// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LocationService/location_service.proto

#include "LocationService/location_service.pb.h"
#include "LocationService/location_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace farm {
namespace nurture {
namespace location {
namespace service {
namespace proto {

static const char* LocationService_method_names[] = {
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocation",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2Cell",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2CellBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfig",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfigBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationByCodeAndNamespace",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocation",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocationId",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationByIdBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelByIdBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocation",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocationBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteFetchConfigById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocation",
  "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocationBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocation",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocationsWithBoundary",
  "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocations",
  "/farm.nurture.location.service.proto.LocationService/ExecuteGetChildGeographies",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundary",
  "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundaryBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryByIdBulk",
  "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationById",
  "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationByIdBulk",
  "/farm.nurture.location.service.proto.LocationService/Execute",
};

std::unique_ptr< LocationService::Stub> LocationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocationService::Stub> stub(new LocationService::Stub(channel, options));
  return stub;
}

LocationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ExecuteInsertLocation_(LocationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertLocationBulk_(LocationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertLocationS2Cell_(LocationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertLocationS2CellBulk_(LocationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertConfig_(LocationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertConfigBulk_(LocationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchLocationById_(LocationService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchLocationByCodeAndNamespace_(LocationService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchS2CellById_(LocationService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchS2CellByLocation_(LocationService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchS2CellByLocationId_(LocationService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationById_(LocationService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationByIdBulk_(LocationService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationLabelById_(LocationService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationLabelByIdBulk_(LocationService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateDeleteS2CellByLocation_(LocationService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateDeleteS2CellByLocationBulk_(LocationService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFetchConfigById_(LocationService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddLocation_(LocationService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddLocationBulk_(LocationService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocation_(LocationService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationBulk_(LocationService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteGetLocationsWithBoundary_(LocationService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteGetLocations_(LocationService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteGetChildGeographies_(LocationService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertLocationWithoutBoundary_(LocationService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteInsertLocationWithoutBoundaryBulk_(LocationService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationWithoutBoundaryById_(LocationService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateLocationWithoutBoundaryByIdBulk_(LocationService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteDeleteLocationById_(LocationService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteDeleteLocationByIdBulk_(LocationService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(LocationService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LocationService::Stub::ExecuteInsertLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest& request, ::farm::nurture::location::service::proto::InsertLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::InsertLocationRequest, ::farm::nurture::location::service::proto::InsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocation_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest* request, ::farm::nurture::location::service::proto::InsertLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::InsertLocationRequest, ::farm::nurture::location::service::proto::InsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest* request, ::farm::nurture::location::service::proto::InsertLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::InsertLocationResponse, ::farm::nurture::location::service::proto::InsertLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationResponse>* LocationService::Stub::AsyncExecuteInsertLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& request, ::farm::nurture::location::service::proto::BulkInsertLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationRequest, ::farm::nurture::location::service::proto::BulkInsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocationBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationRequest, ::farm::nurture::location::service::proto::BulkInsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkInsertLocationResponse, ::farm::nurture::location::service::proto::BulkInsertLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocationBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationResponse>* LocationService::Stub::AsyncExecuteInsertLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertLocationS2Cell(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& request, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocationS2Cell_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocationS2Cell(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationS2Cell_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocationS2Cell(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationS2Cell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationS2CellRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse, ::farm::nurture::location::service::proto::InsertLocationS2CellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocationS2Cell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse>* LocationService::Stub::AsyncExecuteInsertLocationS2CellRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationS2CellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertLocationS2CellBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& request, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocationS2CellBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocationS2CellBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationS2CellBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocationS2CellBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationS2CellBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationS2CellBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocationS2CellBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse>* LocationService::Stub::AsyncExecuteInsertLocationS2CellBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationS2CellBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertConfig(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest& request, ::farm::nurture::location::service::proto::InsertConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::InsertConfigRequest, ::farm::nurture::location::service::proto::InsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertConfig_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertConfig(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest* request, ::farm::nurture::location::service::proto::InsertConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::InsertConfigRequest, ::farm::nurture::location::service::proto::InsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertConfig_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertConfig(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest* request, ::farm::nurture::location::service::proto::InsertConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertConfigResponse>* LocationService::Stub::PrepareAsyncExecuteInsertConfigRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::InsertConfigResponse, ::farm::nurture::location::service::proto::InsertConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertConfigResponse>* LocationService::Stub::AsyncExecuteInsertConfigRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertConfigBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& request, ::farm::nurture::location::service::proto::BulkInsertConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkInsertConfigRequest, ::farm::nurture::location::service::proto::BulkInsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertConfigBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertConfigBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest* request, ::farm::nurture::location::service::proto::BulkInsertConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkInsertConfigRequest, ::farm::nurture::location::service::proto::BulkInsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertConfigBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertConfigBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest* request, ::farm::nurture::location::service::proto::BulkInsertConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertConfigBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertConfigResponse>* LocationService::Stub::PrepareAsyncExecuteInsertConfigBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkInsertConfigResponse, ::farm::nurture::location::service::proto::BulkInsertConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertConfigBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertConfigResponse>* LocationService::Stub::AsyncExecuteInsertConfigBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertConfigBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& request, ::farm::nurture::location::service::proto::Location* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchLocationByIdRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchLocationById_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest* request, ::farm::nurture::location::service::proto::Location* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchLocationByIdRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchLocationById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest* request, ::farm::nurture::location::service::proto::Location* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchLocationById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Location>* LocationService::Stub::PrepareAsyncExecuteFetchLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::Location, ::farm::nurture::location::service::proto::FetchLocationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchLocationById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Location>* LocationService::Stub::AsyncExecuteFetchLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchLocationByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchLocationByCodeAndNamespace(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& request, ::farm::nurture::location::service::proto::Location* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchLocationByCodeAndNamespace_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchLocationByCodeAndNamespace(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* request, ::farm::nurture::location::service::proto::Location* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchLocationByCodeAndNamespace_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchLocationByCodeAndNamespace(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* request, ::farm::nurture::location::service::proto::Location* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchLocationByCodeAndNamespace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Location>* LocationService::Stub::PrepareAsyncExecuteFetchLocationByCodeAndNamespaceRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::Location, ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchLocationByCodeAndNamespace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Location>* LocationService::Stub::AsyncExecuteFetchLocationByCodeAndNamespaceRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchLocationByCodeAndNamespaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchS2CellById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& request, ::farm::nurture::location::service::proto::S2Cell* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchS2CellById_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchS2CellById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* request, ::farm::nurture::location::service::proto::S2Cell* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchS2CellById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* request, ::farm::nurture::location::service::proto::S2Cell* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::S2Cell>* LocationService::Stub::PrepareAsyncExecuteFetchS2CellByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::S2Cell, ::farm::nurture::location::service::proto::FetchS2CellByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchS2CellById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::S2Cell>* LocationService::Stub::AsyncExecuteFetchS2CellByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchS2CellByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& request, ::farm::nurture::location::service::proto::S2Cell* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchS2CellByLocation_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::S2Cell* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellByLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::S2Cell* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellByLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::S2Cell>* LocationService::Stub::PrepareAsyncExecuteFetchS2CellByLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::S2Cell, ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchS2CellByLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::S2Cell>* LocationService::Stub::AsyncExecuteFetchS2CellByLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchS2CellByLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchS2CellByLocationId(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& request, ::farm::nurture::location::service::proto::LocationS2Cells* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, ::farm::nurture::location::service::proto::LocationS2Cells, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchS2CellByLocationId_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchS2CellByLocationId(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* request, ::farm::nurture::location::service::proto::LocationS2Cells* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, ::farm::nurture::location::service::proto::LocationS2Cells, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellByLocationId_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchS2CellByLocationId(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* request, ::farm::nurture::location::service::proto::LocationS2Cells* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchS2CellByLocationId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::LocationS2Cells>* LocationService::Stub::PrepareAsyncExecuteFetchS2CellByLocationIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::LocationS2Cells, ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchS2CellByLocationId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::LocationS2Cells>* LocationService::Stub::AsyncExecuteFetchS2CellByLocationIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchS2CellByLocationIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& request, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationById_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse, ::farm::nurture::location::service::proto::UpdateLocationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& request, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationByIdBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationByIdBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationByIdBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationByIdBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationByIdBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationLabelById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& request, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationLabelById_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationLabelById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationLabelById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationLabelById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationLabelById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationLabelByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationLabelById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationLabelByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationLabelByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationLabelByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& request, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationLabelByIdBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationLabelByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationLabelByIdBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationLabelByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationLabelByIdBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationLabelByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationLabelByIdBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationLabelByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationLabelByIdBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateDeleteS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& request, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateDeleteS2CellByLocation_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateDeleteS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateDeleteS2CellByLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateDeleteS2CellByLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateDeleteS2CellByLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateDeleteS2CellByLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateDeleteS2CellByLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse>* LocationService::Stub::AsyncExecuteUpdateDeleteS2CellByLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateDeleteS2CellByLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateDeleteS2CellByLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& request, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateDeleteS2CellByLocationBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateDeleteS2CellByLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateDeleteS2CellByLocationBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateDeleteS2CellByLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateDeleteS2CellByLocationBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateDeleteS2CellByLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateDeleteS2CellByLocationBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse>* LocationService::Stub::AsyncExecuteUpdateDeleteS2CellByLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateDeleteS2CellByLocationBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteFetchConfigById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& request, ::farm::nurture::location::service::proto::Config* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::FetchConfigByIdRequest, ::farm::nurture::location::service::proto::Config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFetchConfigById_, context, request, response);
}

void LocationService::Stub::async::ExecuteFetchConfigById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest* request, ::farm::nurture::location::service::proto::Config* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::FetchConfigByIdRequest, ::farm::nurture::location::service::proto::Config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchConfigById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteFetchConfigById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest* request, ::farm::nurture::location::service::proto::Config* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFetchConfigById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Config>* LocationService::Stub::PrepareAsyncExecuteFetchConfigByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::Config, ::farm::nurture::location::service::proto::FetchConfigByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFetchConfigById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::Config>* LocationService::Stub::AsyncExecuteFetchConfigByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFetchConfigByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteAddLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest& request, ::farm::nurture::location::service::proto::AddLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::AddLocationRequest, ::farm::nurture::location::service::proto::AddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddLocation_, context, request, response);
}

void LocationService::Stub::async::ExecuteAddLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest* request, ::farm::nurture::location::service::proto::AddLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::AddLocationRequest, ::farm::nurture::location::service::proto::AddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteAddLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest* request, ::farm::nurture::location::service::proto::AddLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::AddLocationResponse>* LocationService::Stub::PrepareAsyncExecuteAddLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::AddLocationResponse, ::farm::nurture::location::service::proto::AddLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::AddLocationResponse>* LocationService::Stub::AsyncExecuteAddLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteAddLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest& request, ::farm::nurture::location::service::proto::BulkAddLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkAddLocationRequest, ::farm::nurture::location::service::proto::BulkAddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddLocationBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteAddLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest* request, ::farm::nurture::location::service::proto::BulkAddLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkAddLocationRequest, ::farm::nurture::location::service::proto::BulkAddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddLocationBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteAddLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest* request, ::farm::nurture::location::service::proto::BulkAddLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddLocationBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkAddLocationResponse>* LocationService::Stub::PrepareAsyncExecuteAddLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkAddLocationResponse, ::farm::nurture::location::service::proto::BulkAddLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddLocationBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkAddLocationResponse>* LocationService::Stub::AsyncExecuteAddLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddLocationBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest& request, ::farm::nurture::location::service::proto::UpdateLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationRequest, ::farm::nurture::location::service::proto::UpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocation_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest* request, ::farm::nurture::location::service::proto::UpdateLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationRequest, ::farm::nurture::location::service::proto::UpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocation(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest* request, ::farm::nurture::location::service::proto::UpdateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::UpdateLocationResponse, ::farm::nurture::location::service::proto::UpdateLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationResponse>* LocationService::Stub::AsyncExecuteUpdateLocationRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& request, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse, ::farm::nurture::location::service::proto::BulkUpdateLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse>* LocationService::Stub::AsyncExecuteUpdateLocationBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteGetLocationsWithBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& request, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteGetLocationsWithBoundary_, context, request, response);
}

void LocationService::Stub::async::ExecuteGetLocationsWithBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* request, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetLocationsWithBoundary_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteGetLocationsWithBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* request, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetLocationsWithBoundary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse>* LocationService::Stub::PrepareAsyncExecuteGetLocationsWithBoundaryRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteGetLocationsWithBoundary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse>* LocationService::Stub::AsyncExecuteGetLocationsWithBoundaryRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteGetLocationsWithBoundaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteGetLocations(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest& request, ::farm::nurture::location::service::proto::GetLocationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::GetLocationsRequest, ::farm::nurture::location::service::proto::GetLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteGetLocations_, context, request, response);
}

void LocationService::Stub::async::ExecuteGetLocations(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest* request, ::farm::nurture::location::service::proto::GetLocationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::GetLocationsRequest, ::farm::nurture::location::service::proto::GetLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetLocations_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteGetLocations(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest* request, ::farm::nurture::location::service::proto::GetLocationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetLocations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetLocationsResponse>* LocationService::Stub::PrepareAsyncExecuteGetLocationsRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::GetLocationsResponse, ::farm::nurture::location::service::proto::GetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteGetLocations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetLocationsResponse>* LocationService::Stub::AsyncExecuteGetLocationsRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteGetLocationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteGetChildGeographies(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& request, ::farm::nurture::location::service::proto::GetChildGeographiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::GetChildGeographiesRequest, ::farm::nurture::location::service::proto::GetChildGeographiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteGetChildGeographies_, context, request, response);
}

void LocationService::Stub::async::ExecuteGetChildGeographies(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest* request, ::farm::nurture::location::service::proto::GetChildGeographiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::GetChildGeographiesRequest, ::farm::nurture::location::service::proto::GetChildGeographiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetChildGeographies_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteGetChildGeographies(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest* request, ::farm::nurture::location::service::proto::GetChildGeographiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteGetChildGeographies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetChildGeographiesResponse>* LocationService::Stub::PrepareAsyncExecuteGetChildGeographiesRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::GetChildGeographiesResponse, ::farm::nurture::location::service::proto::GetChildGeographiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteGetChildGeographies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::GetChildGeographiesResponse>* LocationService::Stub::AsyncExecuteGetChildGeographiesRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteGetChildGeographiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertLocationWithoutBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& request, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocationWithoutBoundary_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocationWithoutBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationWithoutBoundary_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocationWithoutBoundary(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationWithoutBoundary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationWithoutBoundaryRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocationWithoutBoundary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse>* LocationService::Stub::AsyncExecuteInsertLocationWithoutBoundaryRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationWithoutBoundaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteInsertLocationWithoutBoundaryBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& request, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteInsertLocationWithoutBoundaryBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteInsertLocationWithoutBoundaryBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationWithoutBoundaryBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteInsertLocationWithoutBoundaryBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteInsertLocationWithoutBoundaryBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse>* LocationService::Stub::PrepareAsyncExecuteInsertLocationWithoutBoundaryBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteInsertLocationWithoutBoundaryBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse>* LocationService::Stub::AsyncExecuteInsertLocationWithoutBoundaryBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteInsertLocationWithoutBoundaryBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationWithoutBoundaryById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& request, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationWithoutBoundaryById_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationWithoutBoundaryById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationWithoutBoundaryById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationWithoutBoundaryById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationWithoutBoundaryById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationWithoutBoundaryByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationWithoutBoundaryById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationWithoutBoundaryByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationWithoutBoundaryByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteUpdateLocationWithoutBoundaryByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& request, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateLocationWithoutBoundaryByIdBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteUpdateLocationWithoutBoundaryByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationWithoutBoundaryByIdBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteUpdateLocationWithoutBoundaryByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateLocationWithoutBoundaryByIdBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse>* LocationService::Stub::PrepareAsyncExecuteUpdateLocationWithoutBoundaryByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateLocationWithoutBoundaryByIdBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse>* LocationService::Stub::AsyncExecuteUpdateLocationWithoutBoundaryByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateLocationWithoutBoundaryByIdBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteDeleteLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& request, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteDeleteLocationById_, context, request, response);
}

void LocationService::Stub::async::ExecuteDeleteLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteDeleteLocationById_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteDeleteLocationById(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteDeleteLocationById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse>* LocationService::Stub::PrepareAsyncExecuteDeleteLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse, ::farm::nurture::location::service::proto::DeleteLocationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteDeleteLocationById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse>* LocationService::Stub::AsyncExecuteDeleteLocationByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteDeleteLocationByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::ExecuteDeleteLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& request, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteDeleteLocationByIdBulk_, context, request, response);
}

void LocationService::Stub::async::ExecuteDeleteLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteDeleteLocationByIdBulk_, context, request, response, std::move(f));
}

void LocationService::Stub::async::ExecuteDeleteLocationByIdBulk(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteDeleteLocationByIdBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse>* LocationService::Stub::PrepareAsyncExecuteDeleteLocationByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteDeleteLocationByIdBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse>* LocationService::Stub::AsyncExecuteDeleteLocationByIdBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteDeleteLocationByIdBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::Execute(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::MultiRequests& request, ::farm::nurture::location::service::proto::MultiResponses* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::location::service::proto::MultiRequests, ::farm::nurture::location::service::proto::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void LocationService::Stub::async::Execute(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::MultiRequests* request, ::farm::nurture::location::service::proto::MultiResponses* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::location::service::proto::MultiRequests, ::farm::nurture::location::service::proto::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void LocationService::Stub::async::Execute(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::MultiRequests* request, ::farm::nurture::location::service::proto::MultiResponses* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::MultiResponses>* LocationService::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::MultiRequests& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::location::service::proto::MultiResponses, ::farm::nurture::location::service::proto::MultiRequests, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Execute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::location::service::proto::MultiResponses>* LocationService::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::location::service::proto::MultiRequests& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::InsertLocationRequest, ::farm::nurture::location::service::proto::InsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::InsertLocationRequest* req,
             ::farm::nurture::location::service::proto::InsertLocationResponse* resp) {
               return service->ExecuteInsertLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkInsertLocationRequest, ::farm::nurture::location::service::proto::BulkInsertLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkInsertLocationRequest* req,
             ::farm::nurture::location::service::proto::BulkInsertLocationResponse* resp) {
               return service->ExecuteInsertLocationBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::InsertLocationS2CellRequest, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* req,
             ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resp) {
               return service->ExecuteInsertLocationS2Cell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* req,
             ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resp) {
               return service->ExecuteInsertLocationS2CellBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::InsertConfigRequest, ::farm::nurture::location::service::proto::InsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::InsertConfigRequest* req,
             ::farm::nurture::location::service::proto::InsertConfigResponse* resp) {
               return service->ExecuteInsertConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkInsertConfigRequest, ::farm::nurture::location::service::proto::BulkInsertConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkInsertConfigRequest* req,
             ::farm::nurture::location::service::proto::BulkInsertConfigResponse* resp) {
               return service->ExecuteInsertConfigBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchLocationByIdRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchLocationByIdRequest* req,
             ::farm::nurture::location::service::proto::Location* resp) {
               return service->ExecuteFetchLocationById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, ::farm::nurture::location::service::proto::Location, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* req,
             ::farm::nurture::location::service::proto::Location* resp) {
               return service->ExecuteFetchLocationByCodeAndNamespace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchS2CellByIdRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* req,
             ::farm::nurture::location::service::proto::S2Cell* resp) {
               return service->ExecuteFetchS2CellById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, ::farm::nurture::location::service::proto::S2Cell, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* req,
             ::farm::nurture::location::service::proto::S2Cell* resp) {
               return service->ExecuteFetchS2CellByLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, ::farm::nurture::location::service::proto::LocationS2Cells, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* req,
             ::farm::nurture::location::service::proto::LocationS2Cells* resp) {
               return service->ExecuteFetchS2CellByLocationId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::UpdateLocationByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* req,
             ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resp) {
               return service->ExecuteUpdateLocationById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* req,
             ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resp) {
               return service->ExecuteUpdateLocationByIdBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* req,
             ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resp) {
               return service->ExecuteUpdateLocationLabelById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* req,
             ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resp) {
               return service->ExecuteUpdateLocationLabelByIdBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* req,
             ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resp) {
               return service->ExecuteUpdateDeleteS2CellByLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* req,
             ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resp) {
               return service->ExecuteUpdateDeleteS2CellByLocationBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::FetchConfigByIdRequest, ::farm::nurture::location::service::proto::Config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::FetchConfigByIdRequest* req,
             ::farm::nurture::location::service::proto::Config* resp) {
               return service->ExecuteFetchConfigById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::AddLocationRequest, ::farm::nurture::location::service::proto::AddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::AddLocationRequest* req,
             ::farm::nurture::location::service::proto::AddLocationResponse* resp) {
               return service->ExecuteAddLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkAddLocationRequest, ::farm::nurture::location::service::proto::BulkAddLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkAddLocationRequest* req,
             ::farm::nurture::location::service::proto::BulkAddLocationResponse* resp) {
               return service->ExecuteAddLocationBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::UpdateLocationRequest, ::farm::nurture::location::service::proto::UpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::UpdateLocationRequest* req,
             ::farm::nurture::location::service::proto::UpdateLocationResponse* resp) {
               return service->ExecuteUpdateLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkUpdateLocationRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* req,
             ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resp) {
               return service->ExecuteUpdateLocationBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* req,
             ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resp) {
               return service->ExecuteGetLocationsWithBoundary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::GetLocationsRequest, ::farm::nurture::location::service::proto::GetLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::GetLocationsRequest* req,
             ::farm::nurture::location::service::proto::GetLocationsResponse* resp) {
               return service->ExecuteGetLocations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::GetChildGeographiesRequest, ::farm::nurture::location::service::proto::GetChildGeographiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::GetChildGeographiesRequest* req,
             ::farm::nurture::location::service::proto::GetChildGeographiesResponse* resp) {
               return service->ExecuteGetChildGeographies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* req,
             ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resp) {
               return service->ExecuteInsertLocationWithoutBoundary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* req,
             ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resp) {
               return service->ExecuteInsertLocationWithoutBoundaryBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* req,
             ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resp) {
               return service->ExecuteUpdateLocationWithoutBoundaryById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* req,
             ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resp) {
               return service->ExecuteUpdateLocationWithoutBoundaryByIdBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::DeleteLocationByIdRequest, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* req,
             ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resp) {
               return service->ExecuteDeleteLocationById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* req,
             ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resp) {
               return service->ExecuteDeleteLocationByIdBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::farm::nurture::location::service::proto::MultiRequests, ::farm::nurture::location::service::proto::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::location::service::proto::MultiRequests* req,
             ::farm::nurture::location::service::proto::MultiResponses* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
}

LocationService::Service::~Service() {
}

::grpc::Status LocationService::Service::ExecuteInsertLocation(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::InsertLocationRequest* request, ::farm::nurture::location::service::proto::InsertLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertLocationBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertLocationS2Cell(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertLocationS2CellBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertConfig(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::InsertConfigRequest* request, ::farm::nurture::location::service::proto::InsertConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertConfigBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkInsertConfigRequest* request, ::farm::nurture::location::service::proto::BulkInsertConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchLocationById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchLocationByIdRequest* request, ::farm::nurture::location::service::proto::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchLocationByCodeAndNamespace(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* request, ::farm::nurture::location::service::proto::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchS2CellById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* request, ::farm::nurture::location::service::proto::S2Cell* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchS2CellByLocation(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::S2Cell* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchS2CellByLocationId(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* request, ::farm::nurture::location::service::proto::LocationS2Cells* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationByIdBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationLabelById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationLabelByIdBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateDeleteS2CellByLocation(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateDeleteS2CellByLocationBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteFetchConfigById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::FetchConfigByIdRequest* request, ::farm::nurture::location::service::proto::Config* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteAddLocation(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::AddLocationRequest* request, ::farm::nurture::location::service::proto::AddLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteAddLocationBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkAddLocationRequest* request, ::farm::nurture::location::service::proto::BulkAddLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocation(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::UpdateLocationRequest* request, ::farm::nurture::location::service::proto::UpdateLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteGetLocationsWithBoundary(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* request, ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteGetLocations(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::GetLocationsRequest* request, ::farm::nurture::location::service::proto::GetLocationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteGetChildGeographies(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::GetChildGeographiesRequest* request, ::farm::nurture::location::service::proto::GetChildGeographiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertLocationWithoutBoundary(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteInsertLocationWithoutBoundaryBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* request, ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationWithoutBoundaryById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteUpdateLocationWithoutBoundaryByIdBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* request, ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteDeleteLocationById(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::ExecuteDeleteLocationByIdBulk(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* request, ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::Execute(::grpc::ServerContext* context, const ::farm::nurture::location::service::proto::MultiRequests* request, ::farm::nurture::location::service::proto::MultiResponses* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace farm
}  // namespace nurture
}  // namespace location
}  // namespace service
}  // namespace proto

