// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocationService/location_service.proto

#include "LocationService/location_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeaders_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2futils_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStatusResult_Common_2futils_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Location_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<44> scc_info_Request_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<43> scc_info_Response_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace location {
namespace service {
namespace proto {
class InsertLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationRequest> _instance;
} _InsertLocationRequest_default_instance_;
class BulkInsertLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationRequest> _instance;
} _BulkInsertLocationRequest_default_instance_;
class InsertLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationResponse> _instance;
} _InsertLocationResponse_default_instance_;
class BulkInsertLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationResponse> _instance;
} _BulkInsertLocationResponse_default_instance_;
class InsertLocationS2CellRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationS2CellRequest> _instance;
} _InsertLocationS2CellRequest_default_instance_;
class BulkInsertLocationS2CellRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationS2CellRequest> _instance;
} _BulkInsertLocationS2CellRequest_default_instance_;
class InsertLocationS2CellResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationS2CellResponse> _instance;
} _InsertLocationS2CellResponse_default_instance_;
class BulkInsertLocationS2CellResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationS2CellResponse> _instance;
} _BulkInsertLocationS2CellResponse_default_instance_;
class InsertConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertConfigRequest> _instance;
} _InsertConfigRequest_default_instance_;
class BulkInsertConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertConfigRequest> _instance;
} _BulkInsertConfigRequest_default_instance_;
class InsertConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertConfigResponse> _instance;
} _InsertConfigResponse_default_instance_;
class BulkInsertConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertConfigResponse> _instance;
} _BulkInsertConfigResponse_default_instance_;
class FetchLocationByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchLocationByIdRequest> _instance;
} _FetchLocationByIdRequest_default_instance_;
class LocationRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationRecord> _instance;
} _LocationRecord_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class FetchLocationByCodeAndNamespaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchLocationByCodeAndNamespaceRequest> _instance;
} _FetchLocationByCodeAndNamespaceRequest_default_instance_;
class FetchS2CellByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchS2CellByIdRequest> _instance;
} _FetchS2CellByIdRequest_default_instance_;
class S2CellRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2CellRecord> _instance;
} _S2CellRecord_default_instance_;
class S2CellDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2Cell> _instance;
} _S2Cell_default_instance_;
class FetchS2CellByLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchS2CellByLocationRequest> _instance;
} _FetchS2CellByLocationRequest_default_instance_;
class FetchS2CellByLocationIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchS2CellByLocationIdRequest> _instance;
} _FetchS2CellByLocationIdRequest_default_instance_;
class LocationS2CellsRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationS2CellsRecord> _instance;
} _LocationS2CellsRecord_default_instance_;
class LocationS2CellsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationS2Cells> _instance;
} _LocationS2Cells_default_instance_;
class UpdateLocationByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationByIdRequest> _instance;
} _UpdateLocationByIdRequest_default_instance_;
class BulkUpdateLocationByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationByIdRequest> _instance;
} _BulkUpdateLocationByIdRequest_default_instance_;
class UpdateLocationByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationByIdResponse> _instance;
} _UpdateLocationByIdResponse_default_instance_;
class BulkUpdateLocationByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationByIdResponse> _instance;
} _BulkUpdateLocationByIdResponse_default_instance_;
class UpdateLocationLabelByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationLabelByIdRequest> _instance;
} _UpdateLocationLabelByIdRequest_default_instance_;
class BulkUpdateLocationLabelByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationLabelByIdRequest> _instance;
} _BulkUpdateLocationLabelByIdRequest_default_instance_;
class UpdateLocationLabelByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationLabelByIdResponse> _instance;
} _UpdateLocationLabelByIdResponse_default_instance_;
class BulkUpdateLocationLabelByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationLabelByIdResponse> _instance;
} _BulkUpdateLocationLabelByIdResponse_default_instance_;
class UpdateDeleteS2CellByLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeleteS2CellByLocationRequest> _instance;
} _UpdateDeleteS2CellByLocationRequest_default_instance_;
class BulkUpdateDeleteS2CellByLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateDeleteS2CellByLocationRequest> _instance;
} _BulkUpdateDeleteS2CellByLocationRequest_default_instance_;
class UpdateDeleteS2CellByLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeleteS2CellByLocationResponse> _instance;
} _UpdateDeleteS2CellByLocationResponse_default_instance_;
class BulkUpdateDeleteS2CellByLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateDeleteS2CellByLocationResponse> _instance;
} _BulkUpdateDeleteS2CellByLocationResponse_default_instance_;
class FetchConfigByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchConfigByIdRequest> _instance;
} _FetchConfigByIdRequest_default_instance_;
class ConfigRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigRecord> _instance;
} _ConfigRecord_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class AddLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLocationRequest> _instance;
} _AddLocationRequest_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
class BulkAddLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddLocationRequest> _instance;
} _BulkAddLocationRequest_default_instance_;
class AddLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLocationResponse> _instance;
} _AddLocationResponse_default_instance_;
class BulkAddLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddLocationResponse> _instance;
} _BulkAddLocationResponse_default_instance_;
class UpdateLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationRequest> _instance;
} _UpdateLocationRequest_default_instance_;
class BulkUpdateLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationRequest> _instance;
} _BulkUpdateLocationRequest_default_instance_;
class UpdateLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationResponse> _instance;
} _UpdateLocationResponse_default_instance_;
class BulkUpdateLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationResponse> _instance;
} _BulkUpdateLocationResponse_default_instance_;
class GetLocationsWithBoundaryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsWithBoundaryRequest> _instance;
} _GetLocationsWithBoundaryRequest_default_instance_;
class LabelGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelGroup> _instance;
} _LabelGroup_default_instance_;
class LabelOPPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelOPP> _instance;
} _LabelOPP_default_instance_;
class GetLocationsWithBoundaryResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsWithBoundaryResponseRecord> _instance;
} _GetLocationsWithBoundaryResponseRecord_default_instance_;
class GetLocationsWithBoundaryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsWithBoundaryResponse> _instance;
} _GetLocationsWithBoundaryResponse_default_instance_;
class LocationWithBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationWithBoundary> _instance;
} _LocationWithBoundary_default_instance_;
class GetLocationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsRequest> _instance;
} _GetLocationsRequest_default_instance_;
class GetLocationsResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsResponseRecord> _instance;
} _GetLocationsResponseRecord_default_instance_;
class GetLocationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationsResponse> _instance;
} _GetLocationsResponse_default_instance_;
class LocationWithoutBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationWithoutBoundary> _instance;
} _LocationWithoutBoundary_default_instance_;
class GeographyDataTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeographyDataType> _instance;
} _GeographyDataType_default_instance_;
class BulkGeographyDataTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkGeographyDataType> _instance;
} _BulkGeographyDataType_default_instance_;
class GeographyTypeMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeographyTypeMessageResponse> _instance;
} _GeographyTypeMessageResponse_default_instance_;
class BulkGeographyTypeMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkGeographyTypeMessageResponse> _instance;
} _BulkGeographyTypeMessageResponse_default_instance_;
class GetChildGeographiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildGeographiesRequest> _instance;
} _GetChildGeographiesRequest_default_instance_;
class GetChildGeographiesResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildGeographiesResponseRecord> _instance;
} _GetChildGeographiesResponseRecord_default_instance_;
class GetChildGeographiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildGeographiesResponse> _instance;
} _GetChildGeographiesResponse_default_instance_;
class InsertLocationWithoutBoundaryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationWithoutBoundaryRequest> _instance;
} _InsertLocationWithoutBoundaryRequest_default_instance_;
class BulkInsertLocationWithoutBoundaryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationWithoutBoundaryRequest> _instance;
} _BulkInsertLocationWithoutBoundaryRequest_default_instance_;
class InsertLocationWithoutBoundaryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertLocationWithoutBoundaryResponse> _instance;
} _InsertLocationWithoutBoundaryResponse_default_instance_;
class BulkInsertLocationWithoutBoundaryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertLocationWithoutBoundaryResponse> _instance;
} _BulkInsertLocationWithoutBoundaryResponse_default_instance_;
class UpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationWithoutBoundaryByIdRequest> _instance;
} _UpdateLocationWithoutBoundaryByIdRequest_default_instance_;
class BulkUpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationWithoutBoundaryByIdRequest> _instance;
} _BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_;
class UpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLocationWithoutBoundaryByIdResponse> _instance;
} _UpdateLocationWithoutBoundaryByIdResponse_default_instance_;
class BulkUpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateLocationWithoutBoundaryByIdResponse> _instance;
} _BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_;
class DeleteLocationByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLocationByIdRequest> _instance;
} _DeleteLocationByIdRequest_default_instance_;
class BulkDeleteLocationByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkDeleteLocationByIdRequest> _instance;
} _BulkDeleteLocationByIdRequest_default_instance_;
class DeleteLocationByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLocationByIdResponse> _instance;
} _DeleteLocationByIdResponse_default_instance_;
class BulkDeleteLocationByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkDeleteLocationByIdResponse> _instance;
} _BulkDeleteLocationByIdResponse_default_instance_;
class FetchDuplicateVillagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesRequest> _instance;
} _FetchDuplicateVillagesRequest_default_instance_;
class FetchDuplicateVillagesResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesResponseRecord> _instance;
} _FetchDuplicateVillagesResponseRecord_default_instance_;
class FetchDuplicateVillagesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesResponse> _instance;
} _FetchDuplicateVillagesResponse_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesBySDTVLatLongRequest> _instance;
} _FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesBySDTVLatLongResponseRecord> _instance;
} _FetchDuplicateVillagesBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateVillagesBySDTVLatLongResponse> _instance;
} _FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateTehsilsBySDTVLatLongRequest> _instance;
} _FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateTehsilsBySDTVLatLongResponseRecord> _instance;
} _FetchDuplicateTehsilsBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateTehsilsBySDTVLatLongResponse> _instance;
} _FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateDistrictsBySDTVLatLongRequest> _instance;
} _FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateDistrictsBySDTVLatLongResponseRecord> _instance;
} _FetchDuplicateDistrictsBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateDistrictsBySDTVLatLongResponse> _instance;
} _FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_;
class FetchDuplicateStatesBySDTVLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateStatesBySDTVLatLongRequest> _instance;
} _FetchDuplicateStatesBySDTVLatLongRequest_default_instance_;
class FetchDuplicateStatesBySDTVLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateStatesBySDTVLatLongResponseRecord> _instance;
} _FetchDuplicateStatesBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateStatesBySDTVLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDuplicateStatesBySDTVLatLongResponse> _instance;
} _FetchDuplicateStatesBySDTVLatLongResponse_default_instance_;
class GetDuplicateGeographiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDuplicateGeographiesRequest> _instance;
} _GetDuplicateGeographiesRequest_default_instance_;
class GetDuplicateGeographiesResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDuplicateGeographiesResponseRecord> _instance;
} _GetDuplicateGeographiesResponseRecord_default_instance_;
class GetDuplicateGeographiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDuplicateGeographiesResponse> _instance;
} _GetDuplicateGeographiesResponse_default_instance_;
class InsertVendorLocationDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertVendorLocationDataRequest> _instance;
} _InsertVendorLocationDataRequest_default_instance_;
class BulkInsertVendorLocationDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertVendorLocationDataRequest> _instance;
} _BulkInsertVendorLocationDataRequest_default_instance_;
class InsertVendorLocationDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertVendorLocationDataResponse> _instance;
} _InsertVendorLocationDataResponse_default_instance_;
class BulkInsertVendorLocationDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkInsertVendorLocationDataResponse> _instance;
} _BulkInsertVendorLocationDataResponse_default_instance_;
class SearchVendorLocationsByGeohashRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchVendorLocationsByGeohashRequest> _instance;
} _SearchVendorLocationsByGeohashRequest_default_instance_;
class SearchVendorLocationsByGeohashResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchVendorLocationsByGeohashResponseRecord> _instance;
} _SearchVendorLocationsByGeohashResponseRecord_default_instance_;
class SearchVendorLocationsByGeohashResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchVendorLocationsByGeohashResponse> _instance;
} _SearchVendorLocationsByGeohashResponse_default_instance_;
class SearchLocationsByGeohashRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchLocationsByGeohashRequest> _instance;
} _SearchLocationsByGeohashRequest_default_instance_;
class SearchLocationsByGeohashResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchLocationsByGeohashResponseRecord> _instance;
} _SearchLocationsByGeohashResponseRecord_default_instance_;
class SearchLocationsByGeohashResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchLocationsByGeohashResponse> _instance;
} _SearchLocationsByGeohashResponse_default_instance_;
class GetLocationDataByLatLngRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationDataByLatLngRequest> _instance;
} _GetLocationDataByLatLngRequest_default_instance_;
class GetLocationDataByLatLngResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationDataByLatLngResponseRecord> _instance;
} _GetLocationDataByLatLngResponseRecord_default_instance_;
class GetLocationDataByLatLngResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationDataByLatLngResponse> _instance;
} _GetLocationDataByLatLngResponse_default_instance_;
class AddVendorApiLedgerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddVendorApiLedgerRequest> _instance;
} _AddVendorApiLedgerRequest_default_instance_;
class BulkAddVendorApiLedgerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddVendorApiLedgerRequest> _instance;
} _BulkAddVendorApiLedgerRequest_default_instance_;
class AddVendorApiLedgerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddVendorApiLedgerResponse> _instance;
} _AddVendorApiLedgerResponse_default_instance_;
class BulkAddVendorApiLedgerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddVendorApiLedgerResponse> _instance;
} _BulkAddVendorApiLedgerResponse_default_instance_;
class MultiRequestsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRequests> _instance;
} _MultiRequests_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class MultiResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiResponses> _instance;
} _MultiResponses_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace proto
}  // namespace service
}  // namespace location
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_AddLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::AddLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_AddLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::AddLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_AddVendorApiLedgerRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_AddVendorApiLedgerResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkAddLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkAddLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkAddLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkAddLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkDeleteLocationByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkDeleteLocationByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkGeographyDataType_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkGeographyDataType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkGeographyTypeMessageResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertConfigRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertConfigResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationS2CellRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationS2CellResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Config_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_Config_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Config_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_ConfigRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::ConfigRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_DeleteLocationByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::DeleteLocationByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_DeleteLocationByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::DeleteLocationByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchConfigByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchConfigByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchDuplicateVillagesResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchLocationByCodeAndNamespaceRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchLocationByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchLocationByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchS2CellByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchS2CellByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchS2CellByLocationIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_FetchS2CellByLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GeographyDataType_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GeographyDataType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GeographyTypeMessageResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GeographyTypeMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetChildGeographiesRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetChildGeographiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetChildGeographiesResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetChildGeographiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetChildGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetChildGeographiesResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetDuplicateGeographiesRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetDuplicateGeographiesResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetDuplicateGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetDuplicateGeographiesResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDuplicateGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDuplicateGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationDataByLatLngRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationDataByLatLngResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationDataByLatLngResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationDataByLatLngResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocationDataByLatLngResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocationDataByLatLngResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationsResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocationsResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocationsResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsWithBoundaryRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsWithBoundaryResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationsWithBoundaryResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_GetLocationsWithBoundaryResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocationsWithBoundaryResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocationsWithBoundaryResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertConfigRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertConfigResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationS2CellRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationS2CellRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationS2CellResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationS2CellResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertVendorLocationDataRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_InsertVendorLocationDataResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_Label_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_Label_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Label_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LabelGroup_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LabelGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LabelOPP_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LabelOPP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Location_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_Location_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Location_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Location_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LocationRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LocationRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LocationS2Cells_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LocationS2Cells();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LocationS2CellsRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LocationS2CellsRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LocationWithBoundary_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LocationWithBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_LocationWithoutBoundary_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::LocationWithoutBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_MultiRequests_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::MultiRequests();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_Request_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_MultiResponses_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::MultiResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Response_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Request_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_Request_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<44> scc_info_Request_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 44, 0, InitDefaultsscc_info_Request_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Response_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_Response_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<43> scc_info_Response_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 43, 0, InitDefaultsscc_info_Response_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_Location_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_Config_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base,
      &scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_S2Cell_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_S2Cell_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::S2Cell();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_S2Cell_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_S2CellRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::S2CellRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchLocationsByGeohashRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchLocationsByGeohashResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchLocationsByGeohashResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationLabelByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationLabelByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LocationService_2flocation_5fservice_2eproto[115];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LocationService_2flocation_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LocationService_2flocation_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, centerlatitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, centerlongitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, mins2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, maxs2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, createdbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, createdbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationRequest, latlonggeohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, locationid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s2cellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s2celllevel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s27levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s28levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s29levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s210levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s211levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s212levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s213levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s214levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s215levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s216levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s217levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellRequest, s218levelcellid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationS2CellResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigRequest, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertConfigResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertConfigResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByIdRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByIdRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, centerlatitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, centerlongitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, mins2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, maxs2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, createdbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, createdbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, createdat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, updatedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, deletedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationRecord, latlonggeohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Location, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Location, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Location, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Location, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, locationid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s2cellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s2celllevel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s27levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s28levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s29levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s210levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s211levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s212levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s213levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s214levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s215levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s216levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s217levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, s218levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, createdat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, updatedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2CellRecord, deletedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2Cell, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2Cell, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2Cell, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::S2Cell, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, locationid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, s2cellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest, s2celllevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest, locationid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, locationid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s2cellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s2celllevel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s27levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s28levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s29levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s210levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s211levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s212levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s213levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s214levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s215levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s216levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s217levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, s218levelcellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, createdat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, updatedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2CellsRecord, deletedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2Cells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2Cells, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2Cells, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2Cells, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationS2Cells, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, centerlatitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, centerlongitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, newversion_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, mins2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, maxs2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, latlonggeohash_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdRequest, oldversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationByIdResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, deletedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, locationid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, s2cellid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest, s2celllevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchConfigByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchConfigByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchConfigByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchConfigByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, createdat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, updatedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::ConfigRecord, deletedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Config, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Config, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Config, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Config, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, format_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, center_latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, center_longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, created_by_actor_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, created_by_actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, geography_uid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationRequest, lat_long_geohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Label, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Label, value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Label, deletekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddLocationResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddLocationResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, format_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, center_latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, center_longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, modified_by_actor_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, modified_by_actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, geography_uid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationRequest, lat_long_geohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, format_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, radius_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, pagesize_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, pagenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest, polygonformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LabelGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LabelGroup, labelopp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LabelOPP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LabelOPP, operator__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LabelOPP, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse, locationwithboundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, format_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, center_latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, center_longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithBoundary, locationstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, radius_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, pagesize_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, pagenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, boundary_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsRequest, polygonformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationsResponse, locationwithoutboundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, center_latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, center_longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, area_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::LocationWithoutBoundary, locationstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyDataType, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyDataType, geotype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyDataType, labelkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyDataType, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyDataType, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyTypeMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyTypeMessageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyTypeMessageResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyTypeMessageResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GeographyTypeMessageResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, format_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, pagesize_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesRequest, pagenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetChildGeographiesResponse, locationwithboundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, mins2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, maxs2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, createdbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, createdbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest, latlonggeohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, newversion_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, mins2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, maxs2level_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, visibility_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, latlonggeohash_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest, oldversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, deletedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, modifiedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, modifiedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::DeleteLocationByIdResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, countrystored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, statestored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, districtstored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, tehsilstored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, countrystored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, statestored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, districtstored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, countrystored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, statestored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest, countrystored_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, country_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, tehsil_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, village_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest, geotype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, vendorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, vendortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, geohash7_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, geohash6_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, village_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, tehsil_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, country_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest, vendorresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest, geohash7_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest, geohash6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, village_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, tehsil_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest, geohash8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, village_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, tehsil_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, village_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, tehsil_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, vendor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, apiname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, responsestatus_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiRequests, ontxn_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiRequests, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Request, index_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Request, ARequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiResponses, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::MultiResponses, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Response, index_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Response, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::location::service::proto::Response, AResponse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationRequest)},
  { 28, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationRequest)},
  { 35, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationResponse)},
  { 44, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationResponse)},
  { 52, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationS2CellRequest)},
  { 74, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest)},
  { 81, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationS2CellResponse)},
  { 90, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse)},
  { 98, -1, sizeof(::farm::nurture::location::service::proto::InsertConfigRequest)},
  { 106, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertConfigRequest)},
  { 113, -1, sizeof(::farm::nurture::location::service::proto::InsertConfigResponse)},
  { 122, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertConfigResponse)},
  { 130, -1, sizeof(::farm::nurture::location::service::proto::FetchLocationByIdRequest)},
  { 139, -1, sizeof(::farm::nurture::location::service::proto::LocationRecord)},
  { 169, -1, sizeof(::farm::nurture::location::service::proto::Location)},
  { 178, -1, sizeof(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest)},
  { 187, -1, sizeof(::farm::nurture::location::service::proto::FetchS2CellByIdRequest)},
  { 195, -1, sizeof(::farm::nurture::location::service::proto::S2CellRecord)},
  { 219, -1, sizeof(::farm::nurture::location::service::proto::S2Cell)},
  { 228, -1, sizeof(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest)},
  { 238, -1, sizeof(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest)},
  { 246, -1, sizeof(::farm::nurture::location::service::proto::LocationS2CellsRecord)},
  { 270, -1, sizeof(::farm::nurture::location::service::proto::LocationS2Cells)},
  { 279, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationByIdRequest)},
  { 306, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest)},
  { 313, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationByIdResponse)},
  { 322, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse)},
  { 330, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest)},
  { 340, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest)},
  { 347, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse)},
  { 356, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse)},
  { 364, -1, sizeof(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest)},
  { 374, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest)},
  { 381, -1, sizeof(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse)},
  { 390, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse)},
  { 398, -1, sizeof(::farm::nurture::location::service::proto::FetchConfigByIdRequest)},
  { 406, -1, sizeof(::farm::nurture::location::service::proto::ConfigRecord)},
  { 417, -1, sizeof(::farm::nurture::location::service::proto::Config)},
  { 426, -1, sizeof(::farm::nurture::location::service::proto::AddLocationRequest)},
  { 449, -1, sizeof(::farm::nurture::location::service::proto::Label)},
  { 457, -1, sizeof(::farm::nurture::location::service::proto::BulkAddLocationRequest)},
  { 464, -1, sizeof(::farm::nurture::location::service::proto::AddLocationResponse)},
  { 473, -1, sizeof(::farm::nurture::location::service::proto::BulkAddLocationResponse)},
  { 481, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationRequest)},
  { 504, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationRequest)},
  { 511, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationResponse)},
  { 520, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationResponse)},
  { 528, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest)},
  { 546, -1, sizeof(::farm::nurture::location::service::proto::LabelGroup)},
  { 552, -1, sizeof(::farm::nurture::location::service::proto::LabelOPP)},
  { 559, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord)},
  { 564, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse)},
  { 573, -1, sizeof(::farm::nurture::location::service::proto::LocationWithBoundary)},
  { 588, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsRequest)},
  { 605, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsResponseRecord)},
  { 610, -1, sizeof(::farm::nurture::location::service::proto::GetLocationsResponse)},
  { 619, -1, sizeof(::farm::nurture::location::service::proto::LocationWithoutBoundary)},
  { 632, -1, sizeof(::farm::nurture::location::service::proto::GeographyDataType)},
  { 640, -1, sizeof(::farm::nurture::location::service::proto::BulkGeographyDataType)},
  { 647, -1, sizeof(::farm::nurture::location::service::proto::GeographyTypeMessageResponse)},
  { 656, -1, sizeof(::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse)},
  { 664, -1, sizeof(::farm::nurture::location::service::proto::GetChildGeographiesRequest)},
  { 677, -1, sizeof(::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord)},
  { 682, -1, sizeof(::farm::nurture::location::service::proto::GetChildGeographiesResponse)},
  { 691, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest)},
  { 715, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest)},
  { 722, -1, sizeof(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse)},
  { 731, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse)},
  { 739, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest)},
  { 762, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest)},
  { 769, -1, sizeof(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse)},
  { 778, -1, sizeof(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse)},
  { 786, -1, sizeof(::farm::nurture::location::service::proto::DeleteLocationByIdRequest)},
  { 796, -1, sizeof(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest)},
  { 803, -1, sizeof(::farm::nurture::location::service::proto::DeleteLocationByIdResponse)},
  { 812, -1, sizeof(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse)},
  { 820, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest)},
  { 829, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord)},
  { 835, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse)},
  { 844, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest)},
  { 856, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord)},
  { 862, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse)},
  { 871, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest)},
  { 882, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord)},
  { 888, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse)},
  { 897, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest)},
  { 907, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord)},
  { 913, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse)},
  { 922, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest)},
  { 931, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord)},
  { 937, -1, sizeof(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse)},
  { 946, -1, sizeof(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest)},
  { 961, -1, sizeof(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord)},
  { 966, -1, sizeof(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse)},
  { 975, -1, sizeof(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest)},
  { 993, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest)},
  { 1000, -1, sizeof(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse)},
  { 1009, -1, sizeof(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse)},
  { 1017, -1, sizeof(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest)},
  { 1026, -1, sizeof(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord)},
  { 1038, -1, sizeof(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse)},
  { 1047, -1, sizeof(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest)},
  { 1055, -1, sizeof(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord)},
  { 1067, -1, sizeof(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse)},
  { 1076, -1, sizeof(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest)},
  { 1085, -1, sizeof(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord)},
  { 1090, -1, sizeof(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse)},
  { 1105, -1, sizeof(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest)},
  { 1115, -1, sizeof(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest)},
  { 1122, -1, sizeof(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse)},
  { 1131, -1, sizeof(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse)},
  { 1139, -1, sizeof(::farm::nurture::location::service::proto::MultiRequests)},
  { 1146, -1, sizeof(::farm::nurture::location::service::proto::Request)},
  { 1197, -1, sizeof(::farm::nurture::location::service::proto::MultiResponses)},
  { 1204, -1, sizeof(::farm::nurture::location::service::proto::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationS2CellRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationS2CellRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationS2CellResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationS2CellResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchLocationByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LocationRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchLocationByCodeAndNamespaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchS2CellByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_S2CellRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_S2Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchS2CellByLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchS2CellByLocationIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LocationS2CellsRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LocationS2Cells_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationLabelByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationLabelByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchConfigByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_ConfigRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_AddLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_Label_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkAddLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_AddLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkAddLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsWithBoundaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LabelGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LabelOPP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsWithBoundaryResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsWithBoundaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LocationWithBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_LocationWithoutBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GeographyDataType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkGeographyDataType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GeographyTypeMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkGeographyTypeMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetChildGeographiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetChildGeographiesResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetChildGeographiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_DeleteLocationByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkDeleteLocationByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_DeleteLocationByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkDeleteLocationByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetDuplicateGeographiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetDuplicateGeographiesResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetDuplicateGeographiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertVendorLocationDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_InsertVendorLocationDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchLocationsByGeohashRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchLocationsByGeohashResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_SearchLocationsByGeohashResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationDataByLatLngRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationDataByLatLngResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_GetLocationDataByLatLngResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_AddVendorApiLedgerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_AddVendorApiLedgerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_MultiRequests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_MultiResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::location::service::proto::_Response_default_instance_),
};

const char descriptor_table_protodef_LocationService_2flocation_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&LocationService/location_service.proto"
  "\022#farm.nurture.location.service.proto\032\022C"
  "ommon/utils.proto\032\024Common/headers.proto\032"
  "\025Common/entities.proto\032\034Common/event_ref"
  "erence.proto\032\026Common/time_slot.proto\032\021Co"
  "mmon/tags.proto\"\365\005\n\025InsertLocationReques"
  "t\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurture"
  ".core.contracts.common.RequestHeaders\022\n\n"
  "\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\020\n\010boundary\030\004 \001("
  "\t\022\026\n\016centerLatitude\030\005 \001(\001\022\027\n\017centerLongi"
  "tude\030\006 \001(\001\022\014\n\004area\030\007 \001(\001\022\016\n\006labels\030\010 \001(\t"
  "\022\021\n\tnamespace\030\t \001(\t\022\014\n\004code\030\n \001(\t\022Q\n\006sta"
  "tus\030\013 \001(\0162A.farm.nurture.location.servic"
  "e.proto.InsertLocationRequest.Status\022\020\n\010"
  "metadata\030\014 \001(\t\022\017\n\007version\030\r \001(\005\022\022\n\nminS2"
  "Level\030\016 \001(\005\022\022\n\nmaxS2Level\030\017 \001(\005\022\030\n\020creat"
  "edByActorId\030\020 \001(\003\022\032\n\022createdByActorType\030"
  "\021 \001(\t\022\031\n\021modifiedByActorId\030\022 \001(\003\022\033\n\023modi"
  "fiedByActorType\030\023 \001(\t\022Y\n\nvisibility\030\024 \001("
  "\0162E.farm.nurture.location.service.proto."
  "InsertLocationRequest.Visibility\022\024\n\014geog"
  "raphyUid\030\025 \001(\t\022\017\n\007pincode\030\026 \001(\t\022\026\n\016latLo"
  "ngGeohash\030\027 \001(\t\"$\n\006Status\022\r\n\tUNCLAIMED\020\000"
  "\022\013\n\007CLAIMED\020\001\"(\n\nVisibility\022\013\n\007VISIBLE\020\000"
  "\022\r\n\tINVISIBLE\020\001\"\265\001\n\031BulkInsertLocationRe"
  "quest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nur"
  "ture.core.contracts.common.RequestHeader"
  "s\022L\n\010requests\030\002 \003(\0132:.farm.nurture.locat"
  "ion.service.proto.InsertLocationRequest\""
  "\300\001\n\026InsertLocationResponse\022G\n\006status\030\001 \001"
  "(\01327.farm.nurture.core.contracts.common."
  "RequestStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010re"
  "cordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nur"
  "ture.core.contracts.common.Attribs\"\304\001\n\032B"
  "ulkInsertLocationResponse\022G\n\006status\030\001 \001("
  "\01327.farm.nurture.core.contracts.common.R"
  "equestStatusResult\022\r\n\005count\030\002 \001(\005\022N\n\tres"
  "ponses\030\003 \003(\0132;.farm.nurture.location.ser"
  "vice.proto.InsertLocationResponse\"\340\003\n\033In"
  "sertLocationS2CellRequest\022J\n\016requestHead"
  "ers\030\001 \001(\01322.farm.nurture.core.contracts."
  "common.RequestHeaders\022\022\n\nlocationId\030\002 \001("
  "\003\022\021\n\tnamespace\030\003 \001(\t\022\020\n\010s2CellId\030\004 \001(\003\022\023"
  "\n\013s2CellLevel\030\005 \001(\005\022\026\n\016s27LevelCellId\030\006 "
  "\001(\003\022\026\n\016s28LevelCellId\030\007 \001(\003\022\026\n\016s29LevelC"
  "ellId\030\010 \001(\003\022\027\n\017s210LevelCellId\030\t \001(\003\022\027\n\017"
  "s211LevelCellId\030\n \001(\003\022\027\n\017s212LevelCellId"
  "\030\013 \001(\003\022\027\n\017s213LevelCellId\030\014 \001(\003\022\027\n\017s214L"
  "evelCellId\030\r \001(\003\022\027\n\017s215LevelCellId\030\016 \001("
  "\003\022\027\n\017s216LevelCellId\030\017 \001(\003\022\027\n\017s217LevelC"
  "ellId\030\020 \001(\003\022\027\n\017s218LevelCellId\030\021 \001(\003\"\301\001\n"
  "\037BulkInsertLocationS2CellRequest\022J\n\016requ"
  "estHeaders\030\001 \001(\01322.farm.nurture.core.con"
  "tracts.common.RequestHeaders\022R\n\010requests"
  "\030\002 \003(\0132@.farm.nurture.location.service.p"
  "roto.InsertLocationS2CellRequest\"\306\001\n\034Ins"
  "ertLocationS2CellResponse\022G\n\006status\030\001 \001("
  "\01327.farm.nurture.core.contracts.common.R"
  "equestStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010rec"
  "ordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurt"
  "ure.core.contracts.common.Attribs\"\320\001\n Bu"
  "lkInsertLocationS2CellResponse\022G\n\006status"
  "\030\001 \001(\01327.farm.nurture.core.contracts.com"
  "mon.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022T"
  "\n\tresponses\030\003 \003(\0132A.farm.nurture.locatio"
  "n.service.proto.InsertLocationS2CellResp"
  "onse\"}\n\023InsertConfigRequest\022J\n\016requestHe"
  "aders\030\001 \001(\01322.farm.nurture.core.contract"
  "s.common.RequestHeaders\022\013\n\003key\030\002 \001(\t\022\r\n\005"
  "value\030\003 \001(\t\"\261\001\n\027BulkInsertConfigRequest\022"
  "J\n\016requestHeaders\030\001 \001(\01322.farm.nurture.c"
  "ore.contracts.common.RequestHeaders\022J\n\010r"
  "equests\030\002 \003(\01328.farm.nurture.location.se"
  "rvice.proto.InsertConfigRequest\"\276\001\n\024Inse"
  "rtConfigResponse\022G\n\006status\030\001 \001(\01327.farm."
  "nurture.core.contracts.common.RequestSta"
  "tusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001"
  "(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurture.core."
  "contracts.common.Attribs\"\300\001\n\030BulkInsertC"
  "onfigResponse\022G\n\006status\030\001 \001(\01327.farm.nur"
  "ture.core.contracts.common.RequestStatus"
  "Result\022\r\n\005count\030\002 \001(\005\022L\n\tresponses\030\003 \003(\013"
  "29.farm.nurture.location.service.proto.I"
  "nsertConfigResponse\"\235\001\n\030FetchLocationByI"
  "dRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm."
  "nurture.core.contracts.common.RequestHea"
  "ders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\n\n\002id\030\003 \001(\003"
  "\022\021\n\tnamespace\030\004 \001(\t\"\201\004\n\016LocationRecord\022\n"
  "\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\020\n\010boundary\030\003 \001"
  "(\t\022\026\n\016centerLatitude\030\004 \001(\001\022\027\n\017centerLong"
  "itude\030\005 \001(\001\022\014\n\004area\030\006 \001(\001\022\016\n\006labels\030\007 \001("
  "\t\022\021\n\tnamespace\030\010 \001(\t\022\014\n\004code\030\t \001(\t\022\016\n\006st"
  "atus\030\n \001(\t\022\020\n\010metadata\030\013 \001(\t\022\017\n\007version\030"
  "\014 \001(\005\022\022\n\nminS2Level\030\r \001(\005\022\022\n\nmaxS2Level\030"
  "\016 \001(\005\022\030\n\020createdByActorId\030\017 \001(\003\022\032\n\022creat"
  "edByActorType\030\020 \001(\t\022\031\n\021modifiedByActorId"
  "\030\021 \001(\003\022\033\n\023modifiedByActorType\030\022 \001(\t\022\021\n\tc"
  "reatedAt\030\023 \001(\003\022\021\n\tupdatedAt\030\024 \001(\003\022\021\n\tdel"
  "etedAt\030\025 \001(\003\022\022\n\nvisibility\030\026 \001(\t\022\024\n\014geog"
  "raphyUid\030\027 \001(\t\022\017\n\007pincode\030\030 \001(\t\022\026\n\016latLo"
  "ngGeohash\030\031 \001(\t\"\346\001\n\010Location\022G\n\006status\030\001"
  " \001(\01327.farm.nurture.core.contracts.commo"
  "n.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022<\n\007"
  "attribs\030\003 \003(\0132+.farm.nurture.core.contra"
  "cts.common.Attribs\022D\n\007records\030\004 \001(\01323.fa"
  "rm.nurture.location.service.proto.Locati"
  "onRecord\"\255\001\n&FetchLocationByCodeAndNames"
  "paceRequest\022J\n\016requestHeaders\030\001 \001(\01322.fa"
  "rm.nurture.core.contracts.common.Request"
  "Headers\022\026\n\016isStaleAllowed\030\002 \001(\010\022\014\n\004code\030"
  "\003 \001(\t\022\021\n\tnamespace\030\004 \001(\t\"\210\001\n\026FetchS2Cell"
  "ByIdRequest\022J\n\016requestHeaders\030\001 \001(\01322.fa"
  "rm.nurture.core.contracts.common.Request"
  "Headers\022\026\n\016isStaleAllowed\030\002 \001(\010\022\n\n\002id\030\003 "
  "\001(\003\"\267\003\n\014S2CellRecord\022\n\n\002id\030\001 \001(\003\022\022\n\nloca"
  "tionId\030\002 \001(\003\022\020\n\010s2CellId\030\003 \001(\003\022\023\n\013s2Cell"
  "Level\030\004 \001(\005\022\026\n\016s27LevelCellId\030\005 \001(\003\022\026\n\016s"
  "28LevelCellId\030\006 \001(\003\022\026\n\016s29LevelCellId\030\007 "
  "\001(\003\022\027\n\017s210LevelCellId\030\010 \001(\003\022\027\n\017s211Leve"
  "lCellId\030\t \001(\003\022\027\n\017s212LevelCellId\030\n \001(\003\022\027"
  "\n\017s213LevelCellId\030\013 \001(\003\022\027\n\017s214LevelCell"
  "Id\030\014 \001(\003\022\027\n\017s215LevelCellId\030\r \001(\003\022\027\n\017s21"
  "6LevelCellId\030\016 \001(\003\022\027\n\017s217LevelCellId\030\017 "
  "\001(\003\022\027\n\017s218LevelCellId\030\020 \001(\003\022\021\n\tcreatedA"
  "t\030\021 \001(\003\022\021\n\tupdatedAt\030\022 \001(\003\022\021\n\tdeletedAt\030"
  "\023 \001(\003\"\342\001\n\006S2Cell\022G\n\006status\030\001 \001(\01327.farm."
  "nurture.core.contracts.common.RequestSta"
  "tusResult\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003("
  "\0132+.farm.nurture.core.contracts.common.A"
  "ttribs\022B\n\007records\030\004 \001(\01321.farm.nurture.l"
  "ocation.service.proto.S2CellRecord\"\275\001\n\034F"
  "etchS2CellByLocationRequest\022J\n\016requestHe"
  "aders\030\001 \001(\01322.farm.nurture.core.contract"
  "s.common.RequestHeaders\022\026\n\016isStaleAllowe"
  "d\030\002 \001(\010\022\022\n\nlocationId\030\003 \001(\003\022\020\n\010s2CellId\030"
  "\004 \001(\003\022\023\n\013s2CellLevel\030\005 \001(\005\"\230\001\n\036FetchS2Ce"
  "llByLocationIdRequest\022J\n\016requestHeaders\030"
  "\001 \001(\01322.farm.nurture.core.contracts.comm"
  "on.RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001("
  "\010\022\022\n\nlocationId\030\003 \001(\003\"\300\003\n\025LocationS2Cell"
  "sRecord\022\n\n\002id\030\001 \001(\003\022\022\n\nlocationId\030\002 \001(\003\022"
  "\020\n\010s2CellId\030\003 \001(\003\022\023\n\013s2CellLevel\030\004 \001(\005\022\026"
  "\n\016s27LevelCellId\030\005 \001(\003\022\026\n\016s28LevelCellId"
  "\030\006 \001(\003\022\026\n\016s29LevelCellId\030\007 \001(\003\022\027\n\017s210Le"
  "velCellId\030\010 \001(\003\022\027\n\017s211LevelCellId\030\t \001(\003"
  "\022\027\n\017s212LevelCellId\030\n \001(\003\022\027\n\017s213LevelCe"
  "llId\030\013 \001(\003\022\027\n\017s214LevelCellId\030\014 \001(\003\022\027\n\017s"
  "215LevelCellId\030\r \001(\003\022\027\n\017s216LevelCellId\030"
  "\016 \001(\003\022\027\n\017s217LevelCellId\030\017 \001(\003\022\027\n\017s218Le"
  "velCellId\030\020 \001(\003\022\021\n\tcreatedAt\030\021 \001(\003\022\021\n\tup"
  "datedAt\030\022 \001(\003\022\021\n\tdeletedAt\030\023 \001(\003\"\364\001\n\017Loc"
  "ationS2Cells\022G\n\006status\030\001 \001(\01327.farm.nurt"
  "ure.core.contracts.common.RequestStatusR"
  "esult\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+."
  "farm.nurture.core.contracts.common.Attri"
  "bs\022K\n\007records\030\004 \003(\0132:.farm.nurture.locat"
  "ion.service.proto.LocationS2CellsRecord\""
  "\342\005\n\031UpdateLocationByIdRequest\022J\n\016request"
  "Headers\030\001 \001(\01322.farm.nurture.core.contra"
  "cts.common.RequestHeaders\022\014\n\004name\030\002 \001(\t\022"
  "\020\n\010boundary\030\003 \001(\t\022\026\n\016centerLatitude\030\004 \001("
  "\001\022\027\n\017centerLongitude\030\005 \001(\001\022\014\n\004area\030\006 \001(\001"
  "\022\016\n\006labels\030\007 \001(\t\022\021\n\tnamespace\030\010 \001(\t\022\014\n\004c"
  "ode\030\t \001(\t\022U\n\006status\030\n \001(\0162E.farm.nurture"
  ".location.service.proto.UpdateLocationBy"
  "IdRequest.Status\022\020\n\010metadata\030\013 \001(\t\022\022\n\nne"
  "wVersion\030\014 \001(\005\022\022\n\nminS2Level\030\r \001(\005\022\022\n\nma"
  "xS2Level\030\016 \001(\005\022\031\n\021modifiedByActorId\030\017 \001("
  "\003\022\033\n\023modifiedByActorType\030\020 \001(\t\022]\n\nvisibi"
  "lity\030\021 \001(\0162I.farm.nurture.location.servi"
  "ce.proto.UpdateLocationByIdRequest.Visib"
  "ility\022\024\n\014geographyUid\030\022 \001(\t\022\017\n\007pincode\030\023"
  " \001(\t\022\026\n\016latLongGeohash\030\024 \001(\t\022\n\n\002id\030\025 \001(\003"
  "\022\022\n\noldVersion\030\026 \001(\005\"$\n\006Status\022\r\n\tUNCLAI"
  "MED\020\000\022\013\n\007CLAIMED\020\001\"(\n\nVisibility\022\013\n\007VISI"
  "BLE\020\000\022\r\n\tINVISIBLE\020\001\"\275\001\n\035BulkUpdateLocat"
  "ionByIdRequest\022J\n\016requestHeaders\030\001 \001(\01322"
  ".farm.nurture.core.contracts.common.Requ"
  "estHeaders\022P\n\010requests\030\002 \003(\0132>.farm.nurt"
  "ure.location.service.proto.UpdateLocatio"
  "nByIdRequest\"\304\001\n\032UpdateLocationByIdRespo"
  "nse\022G\n\006status\030\001 \001(\01327.farm.nurture.core."
  "contracts.common.RequestStatusResult\022\r\n\005"
  "count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs"
  "\030\004 \003(\0132+.farm.nurture.core.contracts.com"
  "mon.Attribs\"\314\001\n\036BulkUpdateLocationByIdRe"
  "sponse\022G\n\006status\030\001 \001(\01327.farm.nurture.co"
  "re.contracts.common.RequestStatusResult\022"
  "\r\n\005count\030\002 \001(\005\022R\n\tresponses\030\003 \003(\0132\?.farm"
  ".nurture.location.service.proto.UpdateLo"
  "cationByIdResponse\"\300\001\n\036UpdateLocationLab"
  "elByIdRequest\022J\n\016requestHeaders\030\001 \001(\01322."
  "farm.nurture.core.contracts.common.Reque"
  "stHeaders\022\016\n\006labels\030\002 \001(\t\022\031\n\021modifiedByA"
  "ctorId\030\003 \001(\003\022\033\n\023modifiedByActorType\030\004 \001("
  "\t\022\n\n\002id\030\005 \001(\003\"\307\001\n\"BulkUpdateLocationLabe"
  "lByIdRequest\022J\n\016requestHeaders\030\001 \001(\01322.f"
  "arm.nurture.core.contracts.common.Reques"
  "tHeaders\022U\n\010requests\030\002 \003(\0132C.farm.nurtur"
  "e.location.service.proto.UpdateLocationL"
  "abelByIdRequest\"\311\001\n\037UpdateLocationLabelB"
  "yIdResponse\022G\n\006status\030\001 \001(\01327.farm.nurtu"
  "re.core.contracts.common.RequestStatusRe"
  "sult\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n"
  "\007attribs\030\004 \003(\0132+.farm.nurture.core.contr"
  "acts.common.Attribs\"\326\001\n#BulkUpdateLocati"
  "onLabelByIdResponse\022G\n\006status\030\001 \001(\01327.fa"
  "rm.nurture.core.contracts.common.Request"
  "StatusResult\022\r\n\005count\030\002 \001(\005\022W\n\tresponses"
  "\030\003 \003(\0132D.farm.nurture.location.service.p"
  "roto.UpdateLocationLabelByIdResponse\"\277\001\n"
  "#UpdateDeleteS2CellByLocationRequest\022J\n\016"
  "requestHeaders\030\001 \001(\01322.farm.nurture.core"
  ".contracts.common.RequestHeaders\022\021\n\tdele"
  "tedAt\030\002 \001(\003\022\022\n\nlocationId\030\003 \001(\003\022\020\n\010s2Cel"
  "lId\030\004 \001(\003\022\023\n\013s2CellLevel\030\005 \001(\005\"\321\001\n\'BulkU"
  "pdateDeleteS2CellByLocationRequest\022J\n\016re"
  "questHeaders\030\001 \001(\01322.farm.nurture.core.c"
  "ontracts.common.RequestHeaders\022Z\n\010reques"
  "ts\030\002 \003(\0132H.farm.nurture.location.service"
  ".proto.UpdateDeleteS2CellByLocationReque"
  "st\"\316\001\n$UpdateDeleteS2CellByLocationRespo"
  "nse\022G\n\006status\030\001 \001(\01327.farm.nurture.core."
  "contracts.common.RequestStatusResult\022\r\n\005"
  "count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs"
  "\030\004 \003(\0132+.farm.nurture.core.contracts.com"
  "mon.Attribs\"\340\001\n(BulkUpdateDeleteS2CellBy"
  "LocationResponse\022G\n\006status\030\001 \001(\01327.farm."
  "nurture.core.contracts.common.RequestSta"
  "tusResult\022\r\n\005count\030\002 \001(\005\022\\\n\tresponses\030\003 "
  "\003(\0132I.farm.nurture.location.service.prot"
  "o.UpdateDeleteS2CellByLocationResponse\"\210"
  "\001\n\026FetchConfigByIdRequest\022J\n\016requestHead"
  "ers\030\001 \001(\01322.farm.nurture.core.contracts."
  "common.RequestHeaders\022\026\n\016isStaleAllowed\030"
  "\002 \001(\010\022\n\n\002id\030\003 \001(\003\"o\n\014ConfigRecord\022\n\n\002id\030"
  "\001 \001(\003\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\021\n\tcre"
  "atedAt\030\004 \001(\003\022\021\n\tupdatedAt\030\005 \001(\003\022\021\n\tdelet"
  "edAt\030\006 \001(\003\"\342\001\n\006Config\022G\n\006status\030\001 \001(\01327."
  "farm.nurture.core.contracts.common.Reque"
  "stStatusResult\022\r\n\005count\030\002 \001(\005\022<\n\007attribs"
  "\030\003 \003(\0132+.farm.nurture.core.contracts.com"
  "mon.Attribs\022B\n\007records\030\004 \001(\01321.farm.nurt"
  "ure.location.service.proto.ConfigRecord\""
  "\347\004\n\022AddLocationRequest\022J\n\016requestHeaders"
  "\030\001 \001(\01322.farm.nurture.core.contracts.com"
  "mon.RequestHeaders\022;\n\006format\030\002 \001(\0162+.far"
  "m.nurture.location.service.proto.Format\022"
  "\020\n\010boundary\030\003 \001(\t\022:\n\006labels\030\004 \003(\0132*.farm"
  ".nurture.location.service.proto.Label\022\027\n"
  "\017center_latitude\030\005 \001(\001\022\030\n\020center_longitu"
  "de\030\006 \001(\001\022\014\n\004area\030\007 \001(\001\022\021\n\tnamespace\030\010 \001("
  "\t\022;\n\006status\030\t \001(\0162+.farm.nurture.locatio"
  "n.service.proto.Status\022\014\n\004name\030\n \001(\t\022\014\n\004"
  "code\030\013 \001(\t\022\n\n\002id\030\014 \001(\003\022\033\n\023created_by_act"
  "or_id\030\r \001(\003\022\035\n\025created_by_actor_type\030\016 \001"
  "(\t\022C\n\nvisibility\030\017 \001(\0162/.farm.nurture.lo"
  "cation.service.proto.Visibility\022\025\n\rgeogr"
  "aphy_uid\030\020 \001(\t\022\017\n\007pincode\030\021 \001(\t\022\030\n\020lat_l"
  "ong_geohash\030\022 \001(\t\"6\n\005Label\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t\022\021\n\tdeleteKey\030\003 \001(\010\"\257\001\n\026Bu"
  "lkAddLocationRequest\022J\n\016requestHeaders\030\001"
  " \001(\01322.farm.nurture.core.contracts.commo"
  "n.RequestHeaders\022I\n\010requests\030\002 \003(\01327.far"
  "m.nurture.location.service.proto.AddLoca"
  "tionRequest\"\275\001\n\023AddLocationResponse\022G\n\006s"
  "tatus\030\001 \001(\01327.farm.nurture.core.contract"
  "s.common.RequestStatusResult\022\r\n\005count\030\002 "
  "\001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+"
  ".farm.nurture.core.contracts.common.Attr"
  "ibs\"\276\001\n\027BulkAddLocationResponse\022G\n\006statu"
  "s\030\001 \001(\01327.farm.nurture.core.contracts.co"
  "mmon.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022"
  "K\n\tresponses\030\003 \003(\01328.farm.nurture.locati"
  "on.service.proto.AddLocationResponse\"\354\004\n"
  "\025UpdateLocationRequest\022J\n\016requestHeaders"
  "\030\001 \001(\01322.farm.nurture.core.contracts.com"
  "mon.RequestHeaders\022;\n\006format\030\002 \001(\0162+.far"
  "m.nurture.location.service.proto.Format\022"
  "\020\n\010boundary\030\003 \001(\t\022:\n\006labels\030\004 \003(\0132*.farm"
  ".nurture.location.service.proto.Label\022\027\n"
  "\017center_latitude\030\005 \001(\001\022\030\n\020center_longitu"
  "de\030\006 \001(\001\022\014\n\004area\030\007 \001(\001\022\021\n\tnamespace\030\010 \001("
  "\t\022;\n\006status\030\t \001(\0162+.farm.nurture.locatio"
  "n.service.proto.Status\022\014\n\004name\030\n \001(\t\022\n\n\002"
  "id\030\013 \001(\003\022\014\n\004code\030\014 \001(\t\022\034\n\024modified_by_ac"
  "tor_id\030\r \001(\003\022\036\n\026modified_by_actor_type\030\016"
  " \001(\t\022C\n\nvisibility\030\017 \001(\0162/.farm.nurture."
  "location.service.proto.Visibility\022\025\n\rgeo"
  "graphy_uid\030\020 \001(\t\022\017\n\007pincode\030\021 \001(\t\022\030\n\020lat"
  "_long_geohash\030\022 \001(\t\"\265\001\n\031BulkUpdateLocati"
  "onRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm"
  ".nurture.core.contracts.common.RequestHe"
  "aders\022L\n\010requests\030\002 \003(\0132:.farm.nurture.l"
  "ocation.service.proto.UpdateLocationRequ"
  "est\"\300\001\n\026UpdateLocationResponse\022G\n\006status"
  "\030\001 \001(\01327.farm.nurture.core.contracts.com"
  "mon.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022\020"
  "\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm"
  ".nurture.core.contracts.common.Attribs\"\304"
  "\001\n\032BulkUpdateLocationResponse\022G\n\006status\030"
  "\001 \001(\01327.farm.nurture.core.contracts.comm"
  "on.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022N\n"
  "\tresponses\030\003 \003(\0132;.farm.nurture.location"
  ".service.proto.UpdateLocationResponse\"\204\004"
  "\n\037GetLocationsWithBoundaryRequest\022J\n\016req"
  "uestHeaders\030\001 \001(\01322.farm.nurture.core.co"
  "ntracts.common.RequestHeaders\022\026\n\016isStale"
  "Allowed\030\002 \001(\010\022;\n\006format\030\003 \001(\0162+.farm.nur"
  "ture.location.service.proto.Format\022\?\n\006la"
  "bels\030\004 \001(\0132/.farm.nurture.location.servi"
  "ce.proto.LabelGroup\022\020\n\010latitude\030\005 \001(\001\022\021\n"
  "\tlongitude\030\006 \001(\001\022\016\n\006radius\030\007 \001(\001\022\021\n\tname"
  "space\030\010 \001(\t\022;\n\006status\030\t \001(\0162+.farm.nurtu"
  "re.location.service.proto.Status\022\020\n\010page"
  "Size\030\n \001(\003\022\022\n\npageNumber\030\013 \001(\003\022\020\n\010bounda"
  "ry\030\014 \001(\t\022B\n\rpolygonFormat\030\r \001(\0162+.farm.n"
  "urture.location.service.proto.Format\"M\n\n"
  "LabelGroup\022\?\n\010labelOpp\030\001 \003(\0132-.farm.nurt"
  "ure.location.service.proto.LabelOPP\"W\n\010L"
  "abelOPP\022\020\n\010operator\030\001 \001(\t\0229\n\005label\030\002 \003(\013"
  "2*.farm.nurture.location.service.proto.L"
  "abel\"(\n&GetLocationsWithBoundaryResponse"
  "Record\"\221\002\n GetLocationsWithBoundaryRespo"
  "nse\022G\n\006status\030\001 \001(\01327.farm.nurture.core."
  "contracts.common.RequestStatusResult\022\r\n\005"
  "count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurt"
  "ure.core.contracts.common.Attribs\022W\n\024loc"
  "ationWithBoundary\030\004 \003(\01329.farm.nurture.l"
  "ocation.service.proto.LocationWithBounda"
  "ry\"\324\002\n\024LocationWithBoundary\022\n\n\002id\030\001 \001(\003\022"
  "\014\n\004name\030\002 \001(\t\022;\n\006format\030\003 \001(\0162+.farm.nur"
  "ture.location.service.proto.Format\022\020\n\010bo"
  "undary\030\004 \001(\t\022:\n\006labels\030\005 \003(\0132*.farm.nurt"
  "ure.location.service.proto.Label\022\027\n\017cent"
  "er_latitude\030\006 \001(\001\022\030\n\020center_longitude\030\007 "
  "\001(\001\022\014\n\004area\030\010 \001(\001\022\021\n\tnamespace\030\t \001(\t\022C\n\016"
  "locationStatus\030\n \001(\0162+.farm.nurture.loca"
  "tion.service.proto.Status\"\273\003\n\023GetLocatio"
  "nsRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm"
  ".nurture.core.contracts.common.RequestHe"
  "aders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\?\n\006labels\030"
  "\003 \001(\0132/.farm.nurture.location.service.pr"
  "oto.LabelGroup\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlong"
  "itude\030\005 \001(\001\022\016\n\006radius\030\006 \001(\001\022\021\n\tnamespace"
  "\030\007 \001(\t\022;\n\006status\030\010 \001(\0162+.farm.nurture.lo"
  "cation.service.proto.Status\022\020\n\010pageSize\030"
  "\t \001(\003\022\022\n\npageNumber\030\n \001(\003\022\020\n\010boundary\030\013 "
  "\001(\t\022B\n\rpolygonFormat\030\014 \001(\0162+.farm.nurtur"
  "e.location.service.proto.Format\"\034\n\032GetLo"
  "cationsResponseRecord\"\213\002\n\024GetLocationsRe"
  "sponse\022G\n\006status\030\001 \001(\01327.farm.nurture.co"
  "re.contracts.common.RequestStatusResult\022"
  "\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.n"
  "urture.core.contracts.common.Attribs\022]\n\027"
  "locationWithoutBoundary\030\004 \003(\0132<.farm.nur"
  "ture.location.service.proto.LocationWith"
  "outBoundary\"\210\002\n\027LocationWithoutBoundary\022"
  "\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022:\n\006labels\030\003 \003("
  "\0132*.farm.nurture.location.service.proto."
  "Label\022\027\n\017center_latitude\030\004 \001(\001\022\030\n\020center"
  "_longitude\030\005 \001(\001\022\014\n\004area\030\006 \001(\001\022\021\n\tnamesp"
  "ace\030\007 \001(\t\022C\n\016locationStatus\030\010 \001(\0162+.farm"
  ".nurture.location.service.proto.Status\"\345"
  "\001\n\021GeographyDataType\022J\n\016requestHeaders\030\001"
  " \001(\01322.farm.nurture.core.contracts.commo"
  "n.RequestHeaders\022C\n\007geoType\030\002 \001(\01622.farm"
  ".nurture.location.service.proto.Geograph"
  "yType\022\?\n\010labelKey\030\003 \001(\0162-.farm.nurture.l"
  "ocation.service.proto.LabelKey\"\255\001\n\025BulkG"
  "eographyDataType\022J\n\016requestHeaders\030\001 \001(\013"
  "22.farm.nurture.core.contracts.common.Re"
  "questHeaders\022H\n\010requests\030\002 \003(\01326.farm.nu"
  "rture.location.service.proto.GeographyDa"
  "taType\"\306\001\n\034GeographyTypeMessageResponse\022"
  "G\n\006status\030\001 \001(\01327.farm.nurture.core.cont"
  "racts.common.RequestStatusResult\022\r\n\005coun"
  "t\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003"
  "(\0132+.farm.nurture.core.contracts.common."
  "Attribs\"\320\001\n BulkGeographyTypeMessageResp"
  "onse\022G\n\006status\030\001 \001(\01327.farm.nurture.core"
  ".contracts.common.RequestStatusResult\022\r\n"
  "\005count\030\002 \001(\005\022T\n\tresponses\030\003 \003(\0132A.farm.n"
  "urture.location.service.proto.GeographyT"
  "ypeMessageResponse\"\220\002\n\032GetChildGeographi"
  "esRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm"
  ".nurture.core.contracts.common.RequestHe"
  "aders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\n\n\002id\030\003 \001("
  "\003\022\021\n\tnamespace\030\004 \001(\t\022\014\n\004code\030\005 \001(\t\022;\n\006fo"
  "rmat\030\006 \001(\0162+.farm.nurture.location.servi"
  "ce.proto.Format\022\020\n\010pageSize\030\007 \001(\003\022\022\n\npag"
  "eNumber\030\010 \001(\003\"#\n!GetChildGeographiesResp"
  "onseRecord\"\214\002\n\033GetChildGeographiesRespon"
  "se\022G\n\006status\030\001 \001(\01327.farm.nurture.core.c"
  "ontracts.common.RequestStatusResult\022\r\n\005c"
  "ount\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurtu"
  "re.core.contracts.common.Attribs\022W\n\024loca"
  "tionWithBoundary\030\004 \003(\01329.farm.nurture.lo"
  "cation.service.proto.LocationWithBoundar"
  "y\"\321\005\n$InsertLocationWithoutBoundaryReque"
  "st\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtur"
  "e.core.contracts.common.RequestHeaders\022\n"
  "\n\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\016\n\006labels\030\004 \001(\t"
  "\022\021\n\tnamespace\030\005 \001(\t\022\014\n\004code\030\006 \001(\t\022`\n\006sta"
  "tus\030\007 \001(\0162P.farm.nurture.location.servic"
  "e.proto.InsertLocationWithoutBoundaryReq"
  "uest.Status\022\020\n\010metadata\030\010 \001(\t\022\017\n\007version"
  "\030\t \001(\005\022\022\n\nminS2Level\030\n \001(\005\022\022\n\nmaxS2Level"
  "\030\013 \001(\005\022\030\n\020createdByActorId\030\014 \001(\003\022\032\n\022crea"
  "tedByActorType\030\r \001(\t\022\031\n\021modifiedByActorI"
  "d\030\016 \001(\003\022\033\n\023modifiedByActorType\030\017 \001(\t\022h\n\n"
  "visibility\030\020 \001(\0162T.farm.nurture.location"
  ".service.proto.InsertLocationWithoutBoun"
  "daryRequest.Visibility\022\024\n\014geographyUid\030\021"
  " \001(\t\022\017\n\007pincode\030\022 \001(\t\022\026\n\016latLongGeohash\030"
  "\023 \001(\t\"$\n\006Status\022\r\n\tUNCLAIMED\020\000\022\013\n\007CLAIME"
  "D\020\001\"(\n\nVisibility\022\013\n\007VISIBLE\020\000\022\r\n\tINVISI"
  "BLE\020\001\"\323\001\n(BulkInsertLocationWithoutBound"
  "aryRequest\022J\n\016requestHeaders\030\001 \001(\01322.far"
  "m.nurture.core.contracts.common.RequestH"
  "eaders\022[\n\010requests\030\002 \003(\0132I.farm.nurture."
  "location.service.proto.InsertLocationWit"
  "houtBoundaryRequest\"\317\001\n%InsertLocationWi"
  "thoutBoundaryResponse\022G\n\006status\030\001 \001(\01327."
  "farm.nurture.core.contracts.common.Reque"
  "stStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010recordI"
  "d\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurture."
  "core.contracts.common.Attribs\"\342\001\n)BulkIn"
  "sertLocationWithoutBoundaryResponse\022G\n\006s"
  "tatus\030\001 \001(\01327.farm.nurture.core.contract"
  "s.common.RequestStatusResult\022\r\n\005count\030\002 "
  "\001(\005\022]\n\tresponses\030\003 \003(\0132J.farm.nurture.lo"
  "cation.service.proto.InsertLocationWitho"
  "utBoundaryResponse\"\276\005\n(UpdateLocationWit"
  "houtBoundaryByIdRequest\022J\n\016requestHeader"
  "s\030\001 \001(\01322.farm.nurture.core.contracts.co"
  "mmon.RequestHeaders\022\014\n\004name\030\002 \001(\t\022\016\n\006lab"
  "els\030\003 \001(\t\022\021\n\tnamespace\030\004 \001(\t\022\014\n\004code\030\005 \001"
  "(\t\022d\n\006status\030\006 \001(\0162T.farm.nurture.locati"
  "on.service.proto.UpdateLocationWithoutBo"
  "undaryByIdRequest.Status\022\020\n\010metadata\030\007 \001"
  "(\t\022\022\n\nnewVersion\030\010 \001(\005\022\022\n\nminS2Level\030\t \001"
  "(\005\022\022\n\nmaxS2Level\030\n \001(\005\022\031\n\021modifiedByActo"
  "rId\030\013 \001(\003\022\033\n\023modifiedByActorType\030\014 \001(\t\022l"
  "\n\nvisibility\030\r \001(\0162X.farm.nurture.locati"
  "on.service.proto.UpdateLocationWithoutBo"
  "undaryByIdRequest.Visibility\022\024\n\014geograph"
  "yUid\030\016 \001(\t\022\017\n\007pincode\030\017 \001(\t\022\026\n\016latLongGe"
  "ohash\030\020 \001(\t\022\n\n\002id\030\021 \001(\003\022\022\n\noldVersion\030\022 "
  "\001(\005\"$\n\006Status\022\r\n\tUNCLAIMED\020\000\022\013\n\007CLAIMED\020"
  "\001\"(\n\nVisibility\022\013\n\007VISIBLE\020\000\022\r\n\tINVISIBL"
  "E\020\001\"\333\001\n,BulkUpdateLocationWithoutBoundar"
  "yByIdRequest\022J\n\016requestHeaders\030\001 \001(\01322.f"
  "arm.nurture.core.contracts.common.Reques"
  "tHeaders\022_\n\010requests\030\002 \003(\0132M.farm.nurtur"
  "e.location.service.proto.UpdateLocationW"
  "ithoutBoundaryByIdRequest\"\323\001\n)UpdateLoca"
  "tionWithoutBoundaryByIdResponse\022G\n\006statu"
  "s\030\001 \001(\01327.farm.nurture.core.contracts.co"
  "mmon.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022"
  "\020\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.far"
  "m.nurture.core.contracts.common.Attribs\""
  "\352\001\n-BulkUpdateLocationWithoutBoundaryByI"
  "dResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022\r\n\005count\030\002 \001(\005\022a\n\tresponses\030\003 \003(\0132N.f"
  "arm.nurture.location.service.proto.Updat"
  "eLocationWithoutBoundaryByIdResponse\"\276\001\n"
  "\031DeleteLocationByIdRequest\022J\n\016requestHea"
  "ders\030\001 \001(\01322.farm.nurture.core.contracts"
  ".common.RequestHeaders\022\021\n\tdeletedAt\030\002 \001("
  "\003\022\031\n\021modifiedByActorId\030\003 \001(\003\022\033\n\023modified"
  "ByActorType\030\004 \001(\t\022\n\n\002id\030\005 \001(\003\"\275\001\n\035BulkDe"
  "leteLocationByIdRequest\022J\n\016requestHeader"
  "s\030\001 \001(\01322.farm.nurture.core.contracts.co"
  "mmon.RequestHeaders\022P\n\010requests\030\002 \003(\0132>."
  "farm.nurture.location.service.proto.Dele"
  "teLocationByIdRequest\"\304\001\n\032DeleteLocation"
  "ByIdResponse\022G\n\006status\030\001 \001(\01327.farm.nurt"
  "ure.core.contracts.common.RequestStatusR"
  "esult\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<"
  "\n\007attribs\030\004 \003(\0132+.farm.nurture.core.cont"
  "racts.common.Attribs\"\314\001\n\036BulkDeleteLocat"
  "ionByIdResponse\022G\n\006status\030\001 \001(\01327.farm.n"
  "urture.core.contracts.common.RequestStat"
  "usResult\022\r\n\005count\030\002 \001(\005\022R\n\tresponses\030\003 \003"
  "(\0132\?.farm.nurture.location.service.proto"
  ".DeleteLocationByIdResponse\"\235\001\n\035FetchDup"
  "licateVillagesRequest\022J\n\016requestHeaders\030"
  "\001 \001(\01322.farm.nurture.core.contracts.comm"
  "on.RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001("
  "\010\022\n\n\002id\030\003 \001(\003\022\014\n\004name\030\004 \001(\t\"2\n$FetchDupl"
  "icateVillagesResponseRecord\022\n\n\002id\030\001 \001(\003\""
  "\222\002\n\036FetchDuplicateVillagesResponse\022G\n\006st"
  "atus\030\001 \001(\01327.farm.nurture.core.contracts"
  ".common.RequestStatusResult\022\r\n\005count\030\002 \001"
  "(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.core."
  "contracts.common.Attribs\022Z\n\007records\030\004 \003("
  "\0132I.farm.nurture.location.service.proto."
  "FetchDuplicateVillagesResponseRecord\"\370\001\n"
  "*FetchDuplicateVillagesBySDTVLatLongRequ"
  "est\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtu"
  "re.core.contracts.common.RequestHeaders\022"
  "\026\n\016isStaleAllowed\030\002 \001(\010\022\025\n\rcountryStored"
  "\030\003 \001(\t\022\023\n\013stateStored\030\004 \001(\t\022\026\n\016districtS"
  "tored\030\005 \001(\t\022\024\n\014tehsilStored\030\006 \001(\t\022\014\n\004nam"
  "e\030\007 \001(\t\"\?\n1FetchDuplicateVillagesBySDTVL"
  "atLongResponseRecord\022\n\n\002id\030\001 \001(\003\"\254\002\n+Fet"
  "chDuplicateVillagesBySDTVLatLongResponse"
  "\022G\n\006status\030\001 \001(\01327.farm.nurture.core.con"
  "tracts.common.RequestStatusResult\022\r\n\005cou"
  "nt\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture"
  ".core.contracts.common.Attribs\022g\n\007record"
  "s\030\004 \003(\0132V.farm.nurture.location.service."
  "proto.FetchDuplicateVillagesBySDTVLatLon"
  "gResponseRecord\"\341\001\n)FetchDuplicateTehsil"
  "sBySDTVLatLongRequest\022J\n\016requestHeaders\030"
  "\001 \001(\01322.farm.nurture.core.contracts.comm"
  "on.RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001("
  "\010\022\025\n\rcountryStored\030\003 \001(\t\022\023\n\013stateStored\030"
  "\004 \001(\t\022\026\n\016districtStored\030\005 \001(\t\022\014\n\004name\030\006 "
  "\001(\t\">\n0FetchDuplicateTehsilsBySDTVLatLon"
  "gResponseRecord\022\n\n\002id\030\001 \001(\003\"\252\002\n*FetchDup"
  "licateTehsilsBySDTVLatLongResponse\022G\n\006st"
  "atus\030\001 \001(\01327.farm.nurture.core.contracts"
  ".common.RequestStatusResult\022\r\n\005count\030\002 \001"
  "(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.core."
  "contracts.common.Attribs\022f\n\007records\030\004 \003("
  "\0132U.farm.nurture.location.service.proto."
  "FetchDuplicateTehsilsBySDTVLatLongRespon"
  "seRecord\"\313\001\n+FetchDuplicateDistrictsBySD"
  "TVLatLongRequest\022J\n\016requestHeaders\030\001 \001(\013"
  "22.farm.nurture.core.contracts.common.Re"
  "questHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\025\n\r"
  "countryStored\030\003 \001(\t\022\023\n\013stateStored\030\004 \001(\t"
  "\022\014\n\004name\030\005 \001(\t\"@\n2FetchDuplicateDistrict"
  "sBySDTVLatLongResponseRecord\022\n\n\002id\030\001 \001(\003"
  "\"\256\002\n,FetchDuplicateDistrictsBySDTVLatLon"
  "gResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.far"
  "m.nurture.core.contracts.common.Attribs\022"
  "h\n\007records\030\004 \003(\0132W.farm.nurture.location"
  ".service.proto.FetchDuplicateDistrictsBy"
  "SDTVLatLongResponseRecord\"\263\001\n(FetchDupli"
  "cateStatesBySDTVLatLongRequest\022J\n\016reques"
  "tHeaders\030\001 \001(\01322.farm.nurture.core.contr"
  "acts.common.RequestHeaders\022\026\n\016isStaleAll"
  "owed\030\002 \001(\010\022\025\n\rcountryStored\030\003 \001(\t\022\014\n\004nam"
  "e\030\004 \001(\t\"=\n/FetchDuplicateStatesBySDTVLat"
  "LongResponseRecord\022\n\n\002id\030\001 \001(\003\"\250\002\n)Fetch"
  "DuplicateStatesBySDTVLatLongResponse\022G\n\006"
  "status\030\001 \001(\01327.farm.nurture.core.contrac"
  "ts.common.RequestStatusResult\022\r\n\005count\030\002"
  " \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.cor"
  "e.contracts.common.Attribs\022e\n\007records\030\004 "
  "\003(\0132T.farm.nurture.location.service.prot"
  "o.FetchDuplicateStatesBySDTVLatLongRespo"
  "nseRecord\"\301\002\n\036GetDuplicateGeographiesReq"
  "uest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurt"
  "ure.core.contracts.common.RequestHeaders"
  "\022\026\n\016isStaleAllowed\030\002 \001(\010\022\020\n\010latitude\030\004 \001"
  "(\001\022\021\n\tlongitude\030\005 \001(\001\022\017\n\007country\030\006 \001(\t\022\r"
  "\n\005state\030\007 \001(\t\022\020\n\010district\030\010 \001(\t\022\016\n\006tehsi"
  "l\030\t \001(\t\022\017\n\007village\030\n \001(\t\022C\n\007geoType\030\013 \001("
  "\01622.farm.nurture.location.service.proto."
  "GeographyType\"\'\n%GetDuplicateGeographies"
  "ResponseRecord\"\303\001\n\037GetDuplicateGeographi"
  "esResponse\022G\n\006status\030\001 \001(\01327.farm.nurtur"
  "e.core.contracts.common.RequestStatusRes"
  "ult\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.fa"
  "rm.nurture.core.contracts.common.Attribs"
  "\022\n\n\002id\030\004 \003(\003\"\307\002\n\037InsertVendorLocationDat"
  "aRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm."
  "nurture.core.contracts.common.RequestHea"
  "ders\022\020\n\010vendorId\030\002 \001(\t\022\022\n\nvendorType\030\003 \001"
  "(\t\022\020\n\010geohash7\030\004 \001(\t\022\020\n\010geohash6\030\005 \001(\t\022\020"
  "\n\010latitude\030\006 \001(\001\022\021\n\tlongitude\030\007 \001(\001\022\017\n\007v"
  "illage\030\010 \001(\t\022\016\n\006tehsil\030\t \001(\t\022\020\n\010district"
  "\030\n \001(\t\022\r\n\005state\030\013 \001(\t\022\017\n\007country\030\014 \001(\t\022\026"
  "\n\016vendorResponse\030\r \001(\t\"\311\001\n#BulkInsertVen"
  "dorLocationDataRequest\022J\n\016requestHeaders"
  "\030\001 \001(\01322.farm.nurture.core.contracts.com"
  "mon.RequestHeaders\022V\n\010requests\030\002 \003(\0132D.f"
  "arm.nurture.location.service.proto.Inser"
  "tVendorLocationDataRequest\"\312\001\n InsertVen"
  "dorLocationDataResponse\022G\n\006status\030\001 \001(\0132"
  "7.farm.nurture.core.contracts.common.Req"
  "uestStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010recor"
  "dId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurtur"
  "e.core.contracts.common.Attribs\"\330\001\n$Bulk"
  "InsertVendorLocationDataResponse\022G\n\006stat"
  "us\030\001 \001(\01327.farm.nurture.core.contracts.c"
  "ommon.RequestStatusResult\022\r\n\005count\030\002 \001(\005"
  "\022X\n\tresponses\030\003 \003(\0132E.farm.nurture.locat"
  "ion.service.proto.InsertVendorLocationDa"
  "taResponse\"\257\001\n%SearchVendorLocationsByGe"
  "ohashRequest\022J\n\016requestHeaders\030\001 \001(\01322.f"
  "arm.nurture.core.contracts.common.Reques"
  "tHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\020\n\010geoh"
  "ash7\030\003 \001(\t\022\020\n\010geohash6\030\004 \001(\t\"\246\001\n,SearchV"
  "endorLocationsByGeohashResponseRecord\022\020\n"
  "\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\017\n\007vi"
  "llage\030\003 \001(\t\022\016\n\006tehsil\030\004 \001(\t\022\020\n\010district\030"
  "\005 \001(\t\022\r\n\005state\030\006 \001(\t\022\017\n\007country\030\007 \001(\t\"\242\002"
  "\n&SearchVendorLocationsByGeohashResponse"
  "\022G\n\006status\030\001 \001(\01327.farm.nurture.core.con"
  "tracts.common.RequestStatusResult\022\r\n\005cou"
  "nt\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture"
  ".core.contracts.common.Attribs\022b\n\007record"
  "s\030\004 \003(\0132Q.farm.nurture.location.service."
  "proto.SearchVendorLocationsByGeohashResp"
  "onseRecord\"\227\001\n\037SearchLocationsByGeohashR"
  "equest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nu"
  "rture.core.contracts.common.RequestHeade"
  "rs\022\026\n\016isStaleAllowed\030\002 \001(\010\022\020\n\010geohash8\030\003"
  " \001(\t\"\240\001\n&SearchLocationsByGeohashRespons"
  "eRecord\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002"
  " \001(\001\022\017\n\007village\030\003 \001(\t\022\016\n\006tehsil\030\004 \001(\t\022\020\n"
  "\010district\030\005 \001(\t\022\r\n\005state\030\006 \001(\t\022\017\n\007countr"
  "y\030\007 \001(\t\"\226\002\n SearchLocationsByGeohashResp"
  "onse\022G\n\006status\030\001 \001(\01327.farm.nurture.core"
  ".contracts.common.RequestStatusResult\022\r\n"
  "\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nur"
  "ture.core.contracts.common.Attribs\022\\\n\007re"
  "cords\030\004 \003(\0132K.farm.nurture.location.serv"
  "ice.proto.SearchLocationsByGeohashRespon"
  "seRecord\"\251\001\n\036GetLocationDataByLatLngRequ"
  "est\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtu"
  "re.core.contracts.common.RequestHeaders\022"
  "\026\n\016isStaleAllowed\030\002 \001(\010\022\020\n\010latitude\030\004 \001("
  "\001\022\021\n\tlongitude\030\005 \001(\001\"\'\n%GetLocationDataB"
  "yLatLngResponseRecord\"\257\002\n\037GetLocationDat"
  "aByLatLngResponse\022G\n\006status\030\001 \001(\01327.farm"
  ".nurture.core.contracts.common.RequestSt"
  "atusResult\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003"
  "(\0132+.farm.nurture.core.contracts.common."
  "Attribs\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlongitude\030\005"
  " \001(\001\022\017\n\007village\030\006 \001(\t\022\016\n\006tehsil\030\007 \001(\t\022\020\n"
  "\010district\030\010 \001(\t\022\r\n\005state\030\t \001(\t\022\017\n\007countr"
  "y\030\n \001(\t\"\260\001\n\031AddVendorApiLedgerRequest\022J\n"
  "\016requestHeaders\030\001 \001(\01322.farm.nurture.cor"
  "e.contracts.common.RequestHeaders\022\016\n\006ven"
  "dor\030\002 \001(\t\022\017\n\007apiName\030\003 \001(\t\022\026\n\016responseSt"
  "atus\030\004 \001(\t\022\016\n\006params\030\005 \001(\t\"\275\001\n\035BulkAddVe"
  "ndorApiLedgerRequest\022J\n\016requestHeaders\030\001"
  " \001(\01322.farm.nurture.core.contracts.commo"
  "n.RequestHeaders\022P\n\010requests\030\002 \003(\0132>.far"
  "m.nurture.location.service.proto.AddVend"
  "orApiLedgerRequest\"\304\001\n\032AddVendorApiLedge"
  "rResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007a"
  "ttribs\030\004 \003(\0132+.farm.nurture.core.contrac"
  "ts.common.Attribs\"\314\001\n\036BulkAddVendorApiLe"
  "dgerResponse\022G\n\006status\030\001 \001(\01327.farm.nurt"
  "ure.core.contracts.common.RequestStatusR"
  "esult\022\r\n\005count\030\002 \001(\005\022R\n\tresponses\030\003 \003(\0132"
  "\?.farm.nurture.location.service.proto.Ad"
  "dVendorApiLedgerResponse\"]\n\rMultiRequest"
  "s\022\r\n\005onTxn\030\001 \001(\010\022=\n\007request\030\002 \003(\0132,.farm"
  ".nurture.location.service.proto.Request\""
  "\215%\n\007Request\022\r\n\005index\030\001 \001(\t\022W\n\021reqInsertL"
  "ocation\030\002 \001(\0132:.farm.nurture.location.se"
  "rvice.proto.InsertLocationRequestH\000\022_\n\025r"
  "eqInsertLocationBulk\030\003 \001(\0132>.farm.nurtur"
  "e.location.service.proto.BulkInsertLocat"
  "ionRequestH\000\022c\n\027reqInsertLocationS2Cell\030"
  "\004 \001(\0132@.farm.nurture.location.service.pr"
  "oto.InsertLocationS2CellRequestH\000\022k\n\033req"
  "InsertLocationS2CellBulk\030\005 \001(\0132D.farm.nu"
  "rture.location.service.proto.BulkInsertL"
  "ocationS2CellRequestH\000\022S\n\017reqInsertConfi"
  "g\030\006 \001(\01328.farm.nurture.location.service."
  "proto.InsertConfigRequestH\000\022[\n\023reqInsert"
  "ConfigBulk\030\007 \001(\0132<.farm.nurture.location"
  ".service.proto.BulkInsertConfigRequestH\000"
  "\022]\n\024reqFetchLocationById\030\010 \001(\0132=.farm.nu"
  "rture.location.service.proto.FetchLocati"
  "onByIdRequestH\000\022y\n\"reqFetchLocationByCod"
  "eAndNamespace\030\t \001(\0132K.farm.nurture.locat"
  "ion.service.proto.FetchLocationByCodeAnd"
  "NamespaceRequestH\000\022Y\n\022reqFetchS2CellById"
  "\030\n \001(\0132;.farm.nurture.location.service.p"
  "roto.FetchS2CellByIdRequestH\000\022e\n\030reqFetc"
  "hS2CellByLocation\030\013 \001(\0132A.farm.nurture.l"
  "ocation.service.proto.FetchS2CellByLocat"
  "ionRequestH\000\022i\n\032reqFetchS2CellByLocation"
  "Id\030\014 \001(\0132C.farm.nurture.location.service"
  ".proto.FetchS2CellByLocationIdRequestH\000\022"
  "_\n\025reqUpdateLocationById\030\r \001(\0132>.farm.nu"
  "rture.location.service.proto.UpdateLocat"
  "ionByIdRequestH\000\022g\n\031reqUpdateLocationByI"
  "dBulk\030\016 \001(\0132B.farm.nurture.location.serv"
  "ice.proto.BulkUpdateLocationByIdRequestH"
  "\000\022i\n\032reqUpdateLocationLabelById\030\017 \001(\0132C."
  "farm.nurture.location.service.proto.Upda"
  "teLocationLabelByIdRequestH\000\022q\n\036reqUpdat"
  "eLocationLabelByIdBulk\030\020 \001(\0132G.farm.nurt"
  "ure.location.service.proto.BulkUpdateLoc"
  "ationLabelByIdRequestH\000\022s\n\037reqUpdateDele"
  "teS2CellByLocation\030\021 \001(\0132H.farm.nurture."
  "location.service.proto.UpdateDeleteS2Cel"
  "lByLocationRequestH\000\022{\n#reqUpdateDeleteS"
  "2CellByLocationBulk\030\022 \001(\0132L.farm.nurture"
  ".location.service.proto.BulkUpdateDelete"
  "S2CellByLocationRequestH\000\022Y\n\022reqFetchCon"
  "figById\030\023 \001(\0132;.farm.nurture.location.se"
  "rvice.proto.FetchConfigByIdRequestH\000\022Q\n\016"
  "reqAddLocation\030\024 \001(\01327.farm.nurture.loca"
  "tion.service.proto.AddLocationRequestH\000\022"
  "Y\n\022reqAddLocationBulk\030\025 \001(\0132;.farm.nurtu"
  "re.location.service.proto.BulkAddLocatio"
  "nRequestH\000\022W\n\021reqUpdateLocation\030\026 \001(\0132:."
  "farm.nurture.location.service.proto.Upda"
  "teLocationRequestH\000\022_\n\025reqUpdateLocation"
  "Bulk\030\027 \001(\0132>.farm.nurture.location.servi"
  "ce.proto.BulkUpdateLocationRequestH\000\022k\n\033"
  "reqGetLocationsWithBoundary\030\030 \001(\0132D.farm"
  ".nurture.location.service.proto.GetLocat"
  "ionsWithBoundaryRequestH\000\022S\n\017reqGetLocat"
  "ions\030\031 \001(\01328.farm.nurture.location.servi"
  "ce.proto.GetLocationsRequestH\000\022a\n\026reqGet"
  "ChildGeographies\030\032 \001(\0132\?.farm.nurture.lo"
  "cation.service.proto.GetChildGeographies"
  "RequestH\000\022u\n reqInsertLocationWithoutBou"
  "ndary\030\033 \001(\0132I.farm.nurture.location.serv"
  "ice.proto.InsertLocationWithoutBoundaryR"
  "equestH\000\022}\n$reqInsertLocationWithoutBoun"
  "daryBulk\030\034 \001(\0132M.farm.nurture.location.s"
  "ervice.proto.BulkInsertLocationWithoutBo"
  "undaryRequestH\000\022}\n$reqUpdateLocationWith"
  "outBoundaryById\030\035 \001(\0132M.farm.nurture.loc"
  "ation.service.proto.UpdateLocationWithou"
  "tBoundaryByIdRequestH\000\022\205\001\n(reqUpdateLoca"
  "tionWithoutBoundaryByIdBulk\030\036 \001(\0132Q.farm"
  ".nurture.location.service.proto.BulkUpda"
  "teLocationWithoutBoundaryByIdRequestH\000\022_"
  "\n\025reqDeleteLocationById\030\037 \001(\0132>.farm.nur"
  "ture.location.service.proto.DeleteLocati"
  "onByIdRequestH\000\022g\n\031reqDeleteLocationById"
  "Bulk\030  \001(\0132B.farm.nurture.location.servi"
  "ce.proto.BulkDeleteLocationByIdRequestH\000"
  "\022g\n\031reqFetchDuplicateVillages\030! \001(\0132B.fa"
  "rm.nurture.location.service.proto.FetchD"
  "uplicateVillagesRequestH\000\022\201\001\n&reqFetchDu"
  "plicateVillagesBySDTVLatLong\030\" \001(\0132O.far"
  "m.nurture.location.service.proto.FetchDu"
  "plicateVillagesBySDTVLatLongRequestH\000\022\177\n"
  "%reqFetchDuplicateTehsilsBySDTVLatLong\030#"
  " \001(\0132N.farm.nurture.location.service.pro"
  "to.FetchDuplicateTehsilsBySDTVLatLongReq"
  "uestH\000\022\203\001\n\'reqFetchDuplicateDistrictsByS"
  "DTVLatLong\030$ \001(\0132P.farm.nurture.location"
  ".service.proto.FetchDuplicateDistrictsBy"
  "SDTVLatLongRequestH\000\022}\n$reqFetchDuplicat"
  "eStatesBySDTVLatLong\030% \001(\0132M.farm.nurtur"
  "e.location.service.proto.FetchDuplicateS"
  "tatesBySDTVLatLongRequestH\000\022i\n\032reqGetDup"
  "licateGeographies\030& \001(\0132C.farm.nurture.l"
  "ocation.service.proto.GetDuplicateGeogra"
  "phiesRequestH\000\022k\n\033reqInsertVendorLocatio"
  "nData\030\' \001(\0132D.farm.nurture.location.serv"
  "ice.proto.InsertVendorLocationDataReques"
  "tH\000\022s\n\037reqInsertVendorLocationDataBulk\030("
  " \001(\0132H.farm.nurture.location.service.pro"
  "to.BulkInsertVendorLocationDataRequestH\000"
  "\022w\n!reqSearchVendorLocationsByGeohash\030) "
  "\001(\0132J.farm.nurture.location.service.prot"
  "o.SearchVendorLocationsByGeohashRequestH"
  "\000\022k\n\033reqSearchLocationsByGeohash\030* \001(\0132D"
  ".farm.nurture.location.service.proto.Sea"
  "rchLocationsByGeohashRequestH\000\022i\n\032reqGet"
  "LocationDataByLatLng\030+ \001(\0132C.farm.nurtur"
  "e.location.service.proto.GetLocationData"
  "ByLatLngRequestH\000\022_\n\025reqAddVendorApiLedg"
  "er\030, \001(\0132>.farm.nurture.location.service"
  ".proto.AddVendorApiLedgerRequestH\000\022g\n\031re"
  "qAddVendorApiLedgerBulk\030- \001(\0132B.farm.nur"
  "ture.location.service.proto.BulkAddVendo"
  "rApiLedgerRequestH\000B\n\n\010ARequest\"\232\001\n\016Mult"
  "iResponses\022G\n\006status\030\001 \001(\01327.farm.nurtur"
  "e.core.contracts.common.RequestStatusRes"
  "ult\022\?\n\010response\030\002 \003(\0132-.farm.nurture.loc"
  "ation.service.proto.Response\"\214%\n\010Respons"
  "e\022\r\n\005index\030\001 \001(\t\022G\n\006status\030\002 \001(\01327.farm."
  "nurture.core.contracts.common.RequestSta"
  "tusResult\022X\n\021resInsertLocation\030\003 \001(\0132;.f"
  "arm.nurture.location.service.proto.Inser"
  "tLocationResponseH\000\022`\n\025resInsertLocation"
  "Bulk\030\004 \001(\0132\?.farm.nurture.location.servi"
  "ce.proto.BulkInsertLocationResponseH\000\022d\n"
  "\027resInsertLocationS2Cell\030\005 \001(\0132A.farm.nu"
  "rture.location.service.proto.InsertLocat"
  "ionS2CellResponseH\000\022l\n\033resInsertLocation"
  "S2CellBulk\030\006 \001(\0132E.farm.nurture.location"
  ".service.proto.BulkInsertLocationS2CellR"
  "esponseH\000\022T\n\017resInsertConfig\030\007 \001(\01329.far"
  "m.nurture.location.service.proto.InsertC"
  "onfigResponseH\000\022\\\n\023resInsertConfigBulk\030\010"
  " \001(\0132=.farm.nurture.location.service.pro"
  "to.BulkInsertConfigResponseH\000\022M\n\024resFetc"
  "hLocationById\030\t \001(\0132-.farm.nurture.locat"
  "ion.service.proto.LocationH\000\022[\n\"resFetch"
  "LocationByCodeAndNamespace\030\n \001(\0132-.farm."
  "nurture.location.service.proto.LocationH"
  "\000\022I\n\022resFetchS2CellById\030\013 \001(\0132+.farm.nur"
  "ture.location.service.proto.S2CellH\000\022O\n\030"
  "resFetchS2CellByLocation\030\014 \001(\0132+.farm.nu"
  "rture.location.service.proto.S2CellH\000\022Z\n"
  "\032resFetchS2CellByLocationId\030\r \001(\01324.farm"
  ".nurture.location.service.proto.Location"
  "S2CellsH\000\022`\n\025resUpdateLocationById\030\016 \001(\013"
  "2\?.farm.nurture.location.service.proto.U"
  "pdateLocationByIdResponseH\000\022h\n\031resUpdate"
  "LocationByIdBulk\030\017 \001(\0132C.farm.nurture.lo"
  "cation.service.proto.BulkUpdateLocationB"
  "yIdResponseH\000\022j\n\032resUpdateLocationLabelB"
  "yId\030\020 \001(\0132D.farm.nurture.location.servic"
  "e.proto.UpdateLocationLabelByIdResponseH"
  "\000\022r\n\036resUpdateLocationLabelByIdBulk\030\021 \001("
  "\0132H.farm.nurture.location.service.proto."
  "BulkUpdateLocationLabelByIdResponseH\000\022t\n"
  "\037resUpdateDeleteS2CellByLocation\030\022 \001(\0132I"
  ".farm.nurture.location.service.proto.Upd"
  "ateDeleteS2CellByLocationResponseH\000\022|\n#r"
  "esUpdateDeleteS2CellByLocationBulk\030\023 \001(\013"
  "2M.farm.nurture.location.service.proto.B"
  "ulkUpdateDeleteS2CellByLocationResponseH"
  "\000\022I\n\022resFetchConfigById\030\024 \001(\0132+.farm.nur"
  "ture.location.service.proto.ConfigH\000\022R\n\016"
  "resAddLocation\030\025 \001(\01328.farm.nurture.loca"
  "tion.service.proto.AddLocationResponseH\000"
  "\022Z\n\022resAddLocationBulk\030\026 \001(\0132<.farm.nurt"
  "ure.location.service.proto.BulkAddLocati"
  "onResponseH\000\022X\n\021resUpdateLocation\030\027 \001(\0132"
  ";.farm.nurture.location.service.proto.Up"
  "dateLocationResponseH\000\022`\n\025resUpdateLocat"
  "ionBulk\030\030 \001(\0132\?.farm.nurture.location.se"
  "rvice.proto.BulkUpdateLocationResponseH\000"
  "\022l\n\033resGetLocationsWithBoundary\030\031 \001(\0132E."
  "farm.nurture.location.service.proto.GetL"
  "ocationsWithBoundaryResponseH\000\022T\n\017resGet"
  "Locations\030\032 \001(\01329.farm.nurture.location."
  "service.proto.GetLocationsResponseH\000\022b\n\026"
  "resGetChildGeographies\030\033 \001(\0132@.farm.nurt"
  "ure.location.service.proto.GetChildGeogr"
  "aphiesResponseH\000\022v\n resInsertLocationWit"
  "houtBoundary\030\034 \001(\0132J.farm.nurture.locati"
  "on.service.proto.InsertLocationWithoutBo"
  "undaryResponseH\000\022~\n$resInsertLocationWit"
  "houtBoundaryBulk\030\035 \001(\0132N.farm.nurture.lo"
  "cation.service.proto.BulkInsertLocationW"
  "ithoutBoundaryResponseH\000\022~\n$resUpdateLoc"
  "ationWithoutBoundaryById\030\036 \001(\0132N.farm.nu"
  "rture.location.service.proto.UpdateLocat"
  "ionWithoutBoundaryByIdResponseH\000\022\206\001\n(res"
  "UpdateLocationWithoutBoundaryByIdBulk\030\037 "
  "\001(\0132R.farm.nurture.location.service.prot"
  "o.BulkUpdateLocationWithoutBoundaryByIdR"
  "esponseH\000\022`\n\025resDeleteLocationById\030  \001(\013"
  "2\?.farm.nurture.location.service.proto.D"
  "eleteLocationByIdResponseH\000\022h\n\031resDelete"
  "LocationByIdBulk\030! \001(\0132C.farm.nurture.lo"
  "cation.service.proto.BulkDeleteLocationB"
  "yIdResponseH\000\022h\n\031resFetchDuplicateVillag"
  "es\030\" \001(\0132C.farm.nurture.location.service"
  ".proto.FetchDuplicateVillagesResponseH\000\022"
  "\202\001\n&resFetchDuplicateVillagesBySDTVLatLo"
  "ng\030# \001(\0132P.farm.nurture.location.service"
  ".proto.FetchDuplicateVillagesBySDTVLatLo"
  "ngResponseH\000\022\200\001\n%resFetchDuplicateTehsil"
  "sBySDTVLatLong\030$ \001(\0132O.farm.nurture.loca"
  "tion.service.proto.FetchDuplicateTehsils"
  "BySDTVLatLongResponseH\000\022\204\001\n\'resFetchDupl"
  "icateDistrictsBySDTVLatLong\030% \001(\0132Q.farm"
  ".nurture.location.service.proto.FetchDup"
  "licateDistrictsBySDTVLatLongResponseH\000\022~"
  "\n$resFetchDuplicateStatesBySDTVLatLong\030&"
  " \001(\0132N.farm.nurture.location.service.pro"
  "to.FetchDuplicateStatesBySDTVLatLongResp"
  "onseH\000\022j\n\032resGetDuplicateGeographies\030\' \001"
  "(\0132D.farm.nurture.location.service.proto"
  ".GetDuplicateGeographiesResponseH\000\022l\n\033re"
  "sInsertVendorLocationData\030( \001(\0132E.farm.n"
  "urture.location.service.proto.InsertVend"
  "orLocationDataResponseH\000\022t\n\037resInsertVen"
  "dorLocationDataBulk\030) \001(\0132I.farm.nurture"
  ".location.service.proto.BulkInsertVendor"
  "LocationDataResponseH\000\022x\n!resSearchVendo"
  "rLocationsByGeohash\030* \001(\0132K.farm.nurture"
  ".location.service.proto.SearchVendorLoca"
  "tionsByGeohashResponseH\000\022l\n\033resSearchLoc"
  "ationsByGeohash\030+ \001(\0132E.farm.nurture.loc"
  "ation.service.proto.SearchLocationsByGeo"
  "hashResponseH\000\022j\n\032resGetLocationDataByLa"
  "tLng\030, \001(\0132D.farm.nurture.location.servi"
  "ce.proto.GetLocationDataByLatLngResponse"
  "H\000\022`\n\025resAddVendorApiLedger\030- \001(\0132\?.farm"
  ".nurture.location.service.proto.AddVendo"
  "rApiLedgerResponseH\000\022h\n\031resAddVendorApiL"
  "edgerBulk\030. \001(\0132C.farm.nurture.location."
  "service.proto.BulkAddVendorApiLedgerResp"
  "onseH\000B\013\n\tAResponse*i\n\tNamespace\022\020\n\014NO_N"
  "AMESPACE\020\000\022\020\n\014NURTURE_FARM\020\001\022\023\n\017NURTURE_"
  "SUSTAIN\020\002\022\020\n\014MUNICIPALITY\020\003\022\021\n\rNURTURE_T"
  "RADE\020\004*3\n\006Status\022\r\n\tNO_STATUS\020\000\022\r\n\tUNCLA"
  "IMED\020\001\022\013\n\007CLAIMED\020\002*@\n\006Format\022\r\n\tNO_FORM"
  "AT\020\000\022\007\n\003KML\020\001\022\013\n\007GEOJSON\020\002\022\010\n\004TEXT\020\003\022\007\n\003"
  "SHP\020\004*;\n\nVisibility\022\021\n\rNO_VISIBILITY\020\000\022\013"
  "\n\007VISIBLE\020\001\022\r\n\tINVISIBLE\020\002*e\n\rGeographyT"
  "ype\022\025\n\021NO_GEOGRAPHY_TYPE\020\000\022\013\n\007VILLAGE\020\001\022"
  "\n\n\006TEHSIL\020\002\022\014\n\010DISTRICT\020\003\022\t\n\005STATE\020\004\022\013\n\007"
  "COUNTRY\020\005*\207\001\n\010LabelKey\022\021\n\rno_label_type\020"
  "\000\022\013\n\007country\020\001\022\014\n\010state_id\020\002\022\t\n\005state\020\003\022"
  "\017\n\013district_id\020\004\022\014\n\010district\020\005\022\r\n\ttehsil"
  "_id\020\006\022\n\n\006tehsil\020\007\022\010\n\004type\020\0102\321<\n\017Location"
  "Service\022\222\001\n\025ExecuteInsertLocation\022:.farm"
  ".nurture.location.service.proto.InsertLo"
  "cationRequest\032;.farm.nurture.location.se"
  "rvice.proto.InsertLocationResponse\"\000\022\236\001\n"
  "\031ExecuteInsertLocationBulk\022>.farm.nurtur"
  "e.location.service.proto.BulkInsertLocat"
  "ionRequest\032\?.farm.nurture.location.servi"
  "ce.proto.BulkInsertLocationResponse\"\000\022\244\001"
  "\n\033ExecuteInsertLocationS2Cell\022@.farm.nur"
  "ture.location.service.proto.InsertLocati"
  "onS2CellRequest\032A.farm.nurture.location."
  "service.proto.InsertLocationS2CellRespon"
  "se\"\000\022\260\001\n\037ExecuteInsertLocationS2CellBulk"
  "\022D.farm.nurture.location.service.proto.B"
  "ulkInsertLocationS2CellRequest\032E.farm.nu"
  "rture.location.service.proto.BulkInsertL"
  "ocationS2CellResponse\"\000\022\214\001\n\023ExecuteInser"
  "tConfig\0228.farm.nurture.location.service."
  "proto.InsertConfigRequest\0329.farm.nurture"
  ".location.service.proto.InsertConfigResp"
  "onse\"\000\022\230\001\n\027ExecuteInsertConfigBulk\022<.far"
  "m.nurture.location.service.proto.BulkIns"
  "ertConfigRequest\032=.farm.nurture.location"
  ".service.proto.BulkInsertConfigResponse\""
  "\000\022\212\001\n\030ExecuteFetchLocationById\022=.farm.nu"
  "rture.location.service.proto.FetchLocati"
  "onByIdRequest\032-.farm.nurture.location.se"
  "rvice.proto.Location\"\000\022\246\001\n&ExecuteFetchL"
  "ocationByCodeAndNamespace\022K.farm.nurture"
  ".location.service.proto.FetchLocationByC"
  "odeAndNamespaceRequest\032-.farm.nurture.lo"
  "cation.service.proto.Location\"\000\022\204\001\n\026Exec"
  "uteFetchS2CellById\022;.farm.nurture.locati"
  "on.service.proto.FetchS2CellByIdRequest\032"
  "+.farm.nurture.location.service.proto.S2"
  "Cell\"\000\022\220\001\n\034ExecuteFetchS2CellByLocation\022"
  "A.farm.nurture.location.service.proto.Fe"
  "tchS2CellByLocationRequest\032+.farm.nurtur"
  "e.location.service.proto.S2Cell\"\000\022\235\001\n\036Ex"
  "ecuteFetchS2CellByLocationId\022C.farm.nurt"
  "ure.location.service.proto.FetchS2CellBy"
  "LocationIdRequest\0324.farm.nurture.locatio"
  "n.service.proto.LocationS2Cells\"\000\022\236\001\n\031Ex"
  "ecuteUpdateLocationById\022>.farm.nurture.l"
  "ocation.service.proto.UpdateLocationById"
  "Request\032\?.farm.nurture.location.service."
  "proto.UpdateLocationByIdResponse\"\000\022\252\001\n\035E"
  "xecuteUpdateLocationByIdBulk\022B.farm.nurt"
  "ure.location.service.proto.BulkUpdateLoc"
  "ationByIdRequest\032C.farm.nurture.location"
  ".service.proto.BulkUpdateLocationByIdRes"
  "ponse\"\000\022\255\001\n\036ExecuteUpdateLocationLabelBy"
  "Id\022C.farm.nurture.location.service.proto"
  ".UpdateLocationLabelByIdRequest\032D.farm.n"
  "urture.location.service.proto.UpdateLoca"
  "tionLabelByIdResponse\"\000\022\271\001\n\"ExecuteUpdat"
  "eLocationLabelByIdBulk\022G.farm.nurture.lo"
  "cation.service.proto.BulkUpdateLocationL"
  "abelByIdRequest\032H.farm.nurture.location."
  "service.proto.BulkUpdateLocationLabelByI"
  "dResponse\"\000\022\274\001\n#ExecuteUpdateDeleteS2Cel"
  "lByLocation\022H.farm.nurture.location.serv"
  "ice.proto.UpdateDeleteS2CellByLocationRe"
  "quest\032I.farm.nurture.location.service.pr"
  "oto.UpdateDeleteS2CellByLocationResponse"
  "\"\000\022\310\001\n\'ExecuteUpdateDeleteS2CellByLocati"
  "onBulk\022L.farm.nurture.location.service.p"
  "roto.BulkUpdateDeleteS2CellByLocationReq"
  "uest\032M.farm.nurture.location.service.pro"
  "to.BulkUpdateDeleteS2CellByLocationRespo"
  "nse\"\000\022\204\001\n\026ExecuteFetchConfigById\022;.farm."
  "nurture.location.service.proto.FetchConf"
  "igByIdRequest\032+.farm.nurture.location.se"
  "rvice.proto.Config\"\000\022\211\001\n\022ExecuteAddLocat"
  "ion\0227.farm.nurture.location.service.prot"
  "o.AddLocationRequest\0328.farm.nurture.loca"
  "tion.service.proto.AddLocationResponse\"\000"
  "\022\225\001\n\026ExecuteAddLocationBulk\022;.farm.nurtu"
  "re.location.service.proto.BulkAddLocatio"
  "nRequest\032<.farm.nurture.location.service"
  ".proto.BulkAddLocationResponse\"\000\022\222\001\n\025Exe"
  "cuteUpdateLocation\022:.farm.nurture.locati"
  "on.service.proto.UpdateLocationRequest\032;"
  ".farm.nurture.location.service.proto.Upd"
  "ateLocationResponse\"\000\022\236\001\n\031ExecuteUpdateL"
  "ocationBulk\022>.farm.nurture.location.serv"
  "ice.proto.BulkUpdateLocationRequest\032\?.fa"
  "rm.nurture.location.service.proto.BulkUp"
  "dateLocationResponse\"\000\022\260\001\n\037ExecuteGetLoc"
  "ationsWithBoundary\022D.farm.nurture.locati"
  "on.service.proto.GetLocationsWithBoundar"
  "yRequest\032E.farm.nurture.location.service"
  ".proto.GetLocationsWithBoundaryResponse\""
  "\000\022\214\001\n\023ExecuteGetLocations\0228.farm.nurture"
  ".location.service.proto.GetLocationsRequ"
  "est\0329.farm.nurture.location.service.prot"
  "o.GetLocationsResponse\"\000\022\241\001\n\032ExecuteGetC"
  "hildGeographies\022\?.farm.nurture.location."
  "service.proto.GetChildGeographiesRequest"
  "\032@.farm.nurture.location.service.proto.G"
  "etChildGeographiesResponse\"\000\022\277\001\n$Execute"
  "InsertLocationWithoutBoundary\022I.farm.nur"
  "ture.location.service.proto.InsertLocati"
  "onWithoutBoundaryRequest\032J.farm.nurture."
  "location.service.proto.InsertLocationWit"
  "houtBoundaryResponse\"\000\022\313\001\n(ExecuteInsert"
  "LocationWithoutBoundaryBulk\022M.farm.nurtu"
  "re.location.service.proto.BulkInsertLoca"
  "tionWithoutBoundaryRequest\032N.farm.nurtur"
  "e.location.service.proto.BulkInsertLocat"
  "ionWithoutBoundaryResponse\"\000\022\313\001\n(Execute"
  "UpdateLocationWithoutBoundaryById\022M.farm"
  ".nurture.location.service.proto.UpdateLo"
  "cationWithoutBoundaryByIdRequest\032N.farm."
  "nurture.location.service.proto.UpdateLoc"
  "ationWithoutBoundaryByIdResponse\"\000\022\327\001\n,E"
  "xecuteUpdateLocationWithoutBoundaryByIdB"
  "ulk\022Q.farm.nurture.location.service.prot"
  "o.BulkUpdateLocationWithoutBoundaryByIdR"
  "equest\032R.farm.nurture.location.service.p"
  "roto.BulkUpdateLocationWithoutBoundaryBy"
  "IdResponse\"\000\022\236\001\n\031ExecuteDeleteLocationBy"
  "Id\022>.farm.nurture.location.service.proto"
  ".DeleteLocationByIdRequest\032\?.farm.nurtur"
  "e.location.service.proto.DeleteLocationB"
  "yIdResponse\"\000\022\252\001\n\035ExecuteDeleteLocationB"
  "yIdBulk\022B.farm.nurture.location.service."
  "proto.BulkDeleteLocationByIdRequest\032C.fa"
  "rm.nurture.location.service.proto.BulkDe"
  "leteLocationByIdResponse\"\000\022\252\001\n\035ExecuteFe"
  "tchDuplicateVillages\022B.farm.nurture.loca"
  "tion.service.proto.FetchDuplicateVillage"
  "sRequest\032C.farm.nurture.location.service"
  ".proto.FetchDuplicateVillagesResponse\"\000\022"
  "\321\001\n*ExecuteFetchDuplicateVillagesBySDTVL"
  "atLong\022O.farm.nurture.location.service.p"
  "roto.FetchDuplicateVillagesBySDTVLatLong"
  "Request\032P.farm.nurture.location.service."
  "proto.FetchDuplicateVillagesBySDTVLatLon"
  "gResponse\"\000\022\316\001\n)ExecuteFetchDuplicateTeh"
  "silsBySDTVLatLong\022N.farm.nurture.locatio"
  "n.service.proto.FetchDuplicateTehsilsByS"
  "DTVLatLongRequest\032O.farm.nurture.locatio"
  "n.service.proto.FetchDuplicateTehsilsByS"
  "DTVLatLongResponse\"\000\022\324\001\n+ExecuteFetchDup"
  "licateDistrictsBySDTVLatLong\022P.farm.nurt"
  "ure.location.service.proto.FetchDuplicat"
  "eDistrictsBySDTVLatLongRequest\032Q.farm.nu"
  "rture.location.service.proto.FetchDuplic"
  "ateDistrictsBySDTVLatLongResponse\"\000\022\313\001\n("
  "ExecuteFetchDuplicateStatesBySDTVLatLong"
  "\022M.farm.nurture.location.service.proto.F"
  "etchDuplicateStatesBySDTVLatLongRequest\032"
  "N.farm.nurture.location.service.proto.Fe"
  "tchDuplicateStatesBySDTVLatLongResponse\""
  "\000\022\255\001\n\036ExecuteGetDuplicateGeographies\022C.f"
  "arm.nurture.location.service.proto.GetDu"
  "plicateGeographiesRequest\032D.farm.nurture"
  ".location.service.proto.GetDuplicateGeog"
  "raphiesResponse\"\000\022\260\001\n\037ExecuteInsertVendo"
  "rLocationData\022D.farm.nurture.location.se"
  "rvice.proto.InsertVendorLocationDataRequ"
  "est\032E.farm.nurture.location.service.prot"
  "o.InsertVendorLocationDataResponse\"\000\022\274\001\n"
  "#ExecuteInsertVendorLocationDataBulk\022H.f"
  "arm.nurture.location.service.proto.BulkI"
  "nsertVendorLocationDataRequest\032I.farm.nu"
  "rture.location.service.proto.BulkInsertV"
  "endorLocationDataResponse\"\000\022\302\001\n%ExecuteS"
  "earchVendorLocationsByGeohash\022J.farm.nur"
  "ture.location.service.proto.SearchVendor"
  "LocationsByGeohashRequest\032K.farm.nurture"
  ".location.service.proto.SearchVendorLoca"
  "tionsByGeohashResponse\"\000\022\260\001\n\037ExecuteSear"
  "chLocationsByGeohash\022D.farm.nurture.loca"
  "tion.service.proto.SearchLocationsByGeoh"
  "ashRequest\032E.farm.nurture.location.servi"
  "ce.proto.SearchLocationsByGeohashRespons"
  "e\"\000\022\255\001\n\036ExecuteGetLocationDataByLatLng\022C"
  ".farm.nurture.location.service.proto.Get"
  "LocationDataByLatLngRequest\032D.farm.nurtu"
  "re.location.service.proto.GetLocationDat"
  "aByLatLngResponse\"\000\022\236\001\n\031ExecuteAddVendor"
  "ApiLedger\022>.farm.nurture.location.servic"
  "e.proto.AddVendorApiLedgerRequest\032\?.farm"
  ".nurture.location.service.proto.AddVendo"
  "rApiLedgerResponse\"\000\022\252\001\n\035ExecuteAddVendo"
  "rApiLedgerBulk\022B.farm.nurture.location.s"
  "ervice.proto.BulkAddVendorApiLedgerReque"
  "st\032C.farm.nurture.location.service.proto"
  ".BulkAddVendorApiLedgerResponse\"\000\022t\n\007Exe"
  "cute\0222.farm.nurture.location.service.pro"
  "to.MultiRequests\0323.farm.nurture.location"
  ".service.proto.MultiResponses\"\000BY\n#farm."
  "nurture.location.service.protoP\001Z0code.n"
  "urture.farm/Core/Contracts/LocationServi"
  "ceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LocationService_2flocation_5fservice_2eproto_deps[6] = {
  &::descriptor_table_Common_2fentities_2eproto,
  &::descriptor_table_Common_2fevent_5freference_2eproto,
  &::descriptor_table_Common_2fheaders_2eproto,
  &::descriptor_table_Common_2ftags_2eproto,
  &::descriptor_table_Common_2ftime_5fslot_2eproto,
  &::descriptor_table_Common_2futils_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LocationService_2flocation_5fservice_2eproto_sccs[115] = {
  &scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_Config_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetChildGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetDuplicateGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationDataByLatLngResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_GetLocationsWithBoundaryResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_Label_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_Location_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_Request_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_Response_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base,
  &scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LocationService_2flocation_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LocationService_2flocation_5fservice_2eproto = {
  false, false, descriptor_table_protodef_LocationService_2flocation_5fservice_2eproto, "LocationService/location_service.proto", 44530,
  &descriptor_table_LocationService_2flocation_5fservice_2eproto_once, descriptor_table_LocationService_2flocation_5fservice_2eproto_sccs, descriptor_table_LocationService_2flocation_5fservice_2eproto_deps, 115, 6,
  schemas, file_default_instances, TableStruct_LocationService_2flocation_5fservice_2eproto::offsets,
  file_level_metadata_LocationService_2flocation_5fservice_2eproto, 115, file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto, file_level_service_descriptors_LocationService_2flocation_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LocationService_2flocation_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto)), true);
namespace farm {
namespace nurture {
namespace location {
namespace service {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationRequest_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[0];
}
bool InsertLocationRequest_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InsertLocationRequest_Status InsertLocationRequest::UNCLAIMED;
constexpr InsertLocationRequest_Status InsertLocationRequest::CLAIMED;
constexpr InsertLocationRequest_Status InsertLocationRequest::Status_MIN;
constexpr InsertLocationRequest_Status InsertLocationRequest::Status_MAX;
constexpr int InsertLocationRequest::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationRequest_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[1];
}
bool InsertLocationRequest_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InsertLocationRequest_Visibility InsertLocationRequest::VISIBLE;
constexpr InsertLocationRequest_Visibility InsertLocationRequest::INVISIBLE;
constexpr InsertLocationRequest_Visibility InsertLocationRequest::Visibility_MIN;
constexpr InsertLocationRequest_Visibility InsertLocationRequest::Visibility_MAX;
constexpr int InsertLocationRequest::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationByIdRequest_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[2];
}
bool UpdateLocationByIdRequest_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::UNCLAIMED;
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::CLAIMED;
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::Status_MIN;
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::Status_MAX;
constexpr int UpdateLocationByIdRequest::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationByIdRequest_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[3];
}
bool UpdateLocationByIdRequest_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::VISIBLE;
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::INVISIBLE;
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::Visibility_MIN;
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::Visibility_MAX;
constexpr int UpdateLocationByIdRequest::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationWithoutBoundaryRequest_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[4];
}
bool InsertLocationWithoutBoundaryRequest_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::UNCLAIMED;
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::CLAIMED;
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::Status_MIN;
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::Status_MAX;
constexpr int InsertLocationWithoutBoundaryRequest::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationWithoutBoundaryRequest_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[5];
}
bool InsertLocationWithoutBoundaryRequest_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::VISIBLE;
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::INVISIBLE;
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::Visibility_MIN;
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::Visibility_MAX;
constexpr int InsertLocationWithoutBoundaryRequest::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[6];
}
bool UpdateLocationWithoutBoundaryByIdRequest_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::UNCLAIMED;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::CLAIMED;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::Status_MIN;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::Status_MAX;
constexpr int UpdateLocationWithoutBoundaryByIdRequest::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[7];
}
bool UpdateLocationWithoutBoundaryByIdRequest_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::VISIBLE;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::INVISIBLE;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::Visibility_MIN;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::Visibility_MAX;
constexpr int UpdateLocationWithoutBoundaryByIdRequest::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Namespace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[8];
}
bool Namespace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[9];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[10];
}
bool Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[11];
}
bool Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeographyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[12];
}
bool GeographyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationService_2flocation_5fservice_2eproto);
  return file_level_enum_descriptors_LocationService_2flocation_5fservice_2eproto[13];
}
bool LabelKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InsertLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const InsertLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
InsertLocationRequest::_Internal::requestheaders(const InsertLocationRequest* msg) {
  return *msg->requestheaders_;
}
void InsertLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
InsertLocationRequest::InsertLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationRequest)
}
InsertLocationRequest::InsertLocationRequest(const InsertLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdbyactortype().empty()) {
    createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_createdbyactortype(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latlonggeohash().empty()) {
    latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latlonggeohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&id_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationRequest)
}

void InsertLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(visibility_));
}

InsertLocationRequest::~InsertLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void InsertLocationRequest::ArenaDtor(void* object) {
  InsertLocationRequest* _this = reinterpret_cast< InsertLocationRequest* >(object);
  (void)_this;
}
void InsertLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationRequest& InsertLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  boundary_.ClearToEmpty();
  labels_.ClearToEmpty();
  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  metadata_.ClearToEmpty();
  createdbyactortype_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  latlonggeohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&id_)) + sizeof(visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double centerLatitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          centerlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double centerLongitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          centerlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationRequest.Status status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::InsertLocationRequest_Status>(val));
        } else goto handle_unusual;
        continue;
      // string metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minS2Level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          mins2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxS2Level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          maxs2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdByActorId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          createdbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdByActorType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_createdbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationRequest.Visibility visibility = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::InsertLocationRequest_Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geographyUid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latLongGeohash = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_latlonggeohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string boundary = 4;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boundary(), target);
  }

  // double centerLatitude = 5;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_centerlatitude(), target);
  }

  // double centerLongitude = 6;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_centerlongitude(), target);
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_area(), target);
  }

  // string labels = 8;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.labels");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_labels(), target);
  }

  // string namespace = 9;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_namespace_(), target);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // .farm.nurture.location.service.proto.InsertLocationRequest.Status status = 11;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_metadata(), target);
  }

  // int32 version = 13;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_version(), target);
  }

  // int32 minS2Level = 14;
  if (this->mins2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_mins2level(), target);
  }

  // int32 maxS2Level = 15;
  if (this->maxs2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_maxs2level(), target);
  }

  // int64 createdByActorId = 16;
  if (this->createdbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_createdbyactorid(), target);
  }

  // string createdByActorType = 17;
  if (this->createdbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdbyactortype().data(), static_cast<int>(this->_internal_createdbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_createdbyactortype(), target);
  }

  // int64 modifiedByActorId = 18;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 19;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_modifiedbyactortype(), target);
  }

  // .farm.nurture.location.service.proto.InsertLocationRequest.Visibility visibility = 20;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_visibility(), target);
  }

  // string geographyUid = 21;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.geographyUid");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_geographyuid(), target);
  }

  // string pincode = 22;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_pincode(), target);
  }

  // string latLongGeohash = 23;
  if (this->latlonggeohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latlonggeohash().data(), static_cast<int>(this->_internal_latlonggeohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_latlonggeohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationRequest)
  return target;
}

size_t InsertLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string boundary = 4;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string labels = 8;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string namespace = 9;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 10;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string createdByActorType = 17;
  if (this->createdbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdbyactortype());
  }

  // string modifiedByActorType = 19;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // string geographyUid = 21;
  if (this->geographyuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string pincode = 22;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string latLongGeohash = 23;
  if (this->latlonggeohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latlonggeohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // double centerLatitude = 5;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double centerLongitude = 6;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.InsertLocationRequest.Status status = 11;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 version = 13;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 minS2Level = 14;
  if (this->mins2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins2level());
  }

  // int32 maxS2Level = 15;
  if (this->maxs2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxs2level());
  }

  // int64 createdByActorId = 16;
  if (this->createdbyactorid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdbyactorid());
  }

  // int64 modifiedByActorId = 18;
  if (this->modifiedbyactorid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // .farm.nurture.location.service.proto.InsertLocationRequest.Visibility visibility = 20;
  if (this->visibility() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationRequest)
    MergeFrom(*source);
  }
}

void InsertLocationRequest::MergeFrom(const InsertLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.createdbyactortype().size() > 0) {
    _internal_set_createdbyactortype(from._internal_createdbyactortype());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.latlonggeohash().size() > 0) {
    _internal_set_latlonggeohash(from._internal_latlonggeohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.centerlatitude() <= 0 && from.centerlatitude() >= 0)) {
    _internal_set_centerlatitude(from._internal_centerlatitude());
  }
  if (!(from.centerlongitude() <= 0 && from.centerlongitude() >= 0)) {
    _internal_set_centerlongitude(from._internal_centerlongitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.mins2level() != 0) {
    _internal_set_mins2level(from._internal_mins2level());
  }
  if (from.maxs2level() != 0) {
    _internal_set_maxs2level(from._internal_maxs2level());
  }
  if (from.createdbyactorid() != 0) {
    _internal_set_createdbyactorid(from._internal_createdbyactorid());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
}

void InsertLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationRequest::CopyFrom(const InsertLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationRequest::IsInitialized() const {
  return true;
}

void InsertLocationRequest::InternalSwap(InsertLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createdbyactortype_.Swap(&other->createdbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latlonggeohash_.Swap(&other->latlonggeohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationRequest, visibility_)
      + sizeof(InsertLocationRequest::visibility_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkInsertLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkInsertLocationRequest::_Internal::requestheaders(const BulkInsertLocationRequest* msg) {
  return *msg->requestheaders_;
}
void BulkInsertLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkInsertLocationRequest::BulkInsertLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationRequest)
}
BulkInsertLocationRequest::BulkInsertLocationRequest(const BulkInsertLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationRequest)
}

void BulkInsertLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkInsertLocationRequest::~BulkInsertLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkInsertLocationRequest::ArenaDtor(void* object) {
  BulkInsertLocationRequest* _this = reinterpret_cast< BulkInsertLocationRequest* >(object);
  (void)_this;
}
void BulkInsertLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationRequest& BulkInsertLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  return target;
}

size_t BulkInsertLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationRequest)
    MergeFrom(*source);
  }
}

void BulkInsertLocationRequest::MergeFrom(const BulkInsertLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkInsertLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationRequest::CopyFrom(const BulkInsertLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationRequest::IsInitialized() const {
  return true;
}

void BulkInsertLocationRequest::InternalSwap(BulkInsertLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const InsertLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
InsertLocationResponse::_Internal::status(const InsertLocationResponse* msg) {
  return *msg->status_;
}
void InsertLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void InsertLocationResponse::clear_attribs() {
  attribs_.Clear();
}
InsertLocationResponse::InsertLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationResponse)
}
InsertLocationResponse::InsertLocationResponse(const InsertLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationResponse)
}

void InsertLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

InsertLocationResponse::~InsertLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void InsertLocationResponse::ArenaDtor(void* object) {
  InsertLocationResponse* _this = reinterpret_cast< InsertLocationResponse* >(object);
  (void)_this;
}
void InsertLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationResponse& InsertLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationResponse)
  return target;
}

size_t InsertLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationResponse)
    MergeFrom(*source);
  }
}

void InsertLocationResponse::MergeFrom(const InsertLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InsertLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationResponse::CopyFrom(const InsertLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationResponse::IsInitialized() const {
  return true;
}

void InsertLocationResponse::InternalSwap(InsertLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationResponse, count_)
      + sizeof(InsertLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkInsertLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkInsertLocationResponse::_Internal::status(const BulkInsertLocationResponse* msg) {
  return *msg->status_;
}
void BulkInsertLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkInsertLocationResponse::BulkInsertLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationResponse)
}
BulkInsertLocationResponse::BulkInsertLocationResponse(const BulkInsertLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationResponse)
}

void BulkInsertLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkInsertLocationResponse::~BulkInsertLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkInsertLocationResponse::ArenaDtor(void* object) {
  BulkInsertLocationResponse* _this = reinterpret_cast< BulkInsertLocationResponse* >(object);
  (void)_this;
}
void BulkInsertLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationResponse& BulkInsertLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  return target;
}

size_t BulkInsertLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationResponse)
    MergeFrom(*source);
  }
}

void BulkInsertLocationResponse::MergeFrom(const BulkInsertLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkInsertLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationResponse::CopyFrom(const BulkInsertLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationResponse::IsInitialized() const {
  return true;
}

void BulkInsertLocationResponse::InternalSwap(BulkInsertLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkInsertLocationResponse, count_)
      + sizeof(BulkInsertLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkInsertLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertLocationS2CellRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const InsertLocationS2CellRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
InsertLocationS2CellRequest::_Internal::requestheaders(const InsertLocationS2CellRequest* msg) {
  return *msg->requestheaders_;
}
void InsertLocationS2CellRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
InsertLocationS2CellRequest::InsertLocationS2CellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
}
InsertLocationS2CellRequest::InsertLocationS2CellRequest(const InsertLocationS2CellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&locationid_, &from.locationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
    reinterpret_cast<char*>(&locationid_)) + sizeof(s2celllevel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
}

void InsertLocationS2CellRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(s2celllevel_));
}

InsertLocationS2CellRequest::~InsertLocationS2CellRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationS2CellRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void InsertLocationS2CellRequest::ArenaDtor(void* object) {
  InsertLocationS2CellRequest* _this = reinterpret_cast< InsertLocationS2CellRequest* >(object);
  (void)_this;
}
void InsertLocationS2CellRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationS2CellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationS2CellRequest& InsertLocationS2CellRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationS2CellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&locationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&locationid_)) + sizeof(s2celllevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationS2CellRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s2CellId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s2cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s2CellLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s2celllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s27LevelCellId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s27levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s28LevelCellId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s28levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s29LevelCellId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s29levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s210LevelCellId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s210levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s211LevelCellId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s211levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s212LevelCellId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          s212levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s213LevelCellId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          s213levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s214LevelCellId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          s214levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s215LevelCellId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          s215levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s216LevelCellId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          s216levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s217LevelCellId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          s217levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s218LevelCellId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          s218levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationS2CellRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_locationid(), target);
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_s2cellid(), target);
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_s2celllevel(), target);
  }

  // int64 s27LevelCellId = 6;
  if (this->s27levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_s27levelcellid(), target);
  }

  // int64 s28LevelCellId = 7;
  if (this->s28levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_s28levelcellid(), target);
  }

  // int64 s29LevelCellId = 8;
  if (this->s29levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_s29levelcellid(), target);
  }

  // int64 s210LevelCellId = 9;
  if (this->s210levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_s210levelcellid(), target);
  }

  // int64 s211LevelCellId = 10;
  if (this->s211levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_s211levelcellid(), target);
  }

  // int64 s212LevelCellId = 11;
  if (this->s212levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_s212levelcellid(), target);
  }

  // int64 s213LevelCellId = 12;
  if (this->s213levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_s213levelcellid(), target);
  }

  // int64 s214LevelCellId = 13;
  if (this->s214levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_s214levelcellid(), target);
  }

  // int64 s215LevelCellId = 14;
  if (this->s215levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_s215levelcellid(), target);
  }

  // int64 s216LevelCellId = 15;
  if (this->s216levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_s216levelcellid(), target);
  }

  // int64 s217LevelCellId = 16;
  if (this->s217levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_s217levelcellid(), target);
  }

  // int64 s218LevelCellId = 17;
  if (this->s218levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_s218levelcellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  return target;
}

size_t InsertLocationS2CellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s2cellid());
  }

  // int64 s27LevelCellId = 6;
  if (this->s27levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s27levelcellid());
  }

  // int64 s28LevelCellId = 7;
  if (this->s28levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s28levelcellid());
  }

  // int64 s29LevelCellId = 8;
  if (this->s29levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s29levelcellid());
  }

  // int64 s210LevelCellId = 9;
  if (this->s210levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s210levelcellid());
  }

  // int64 s211LevelCellId = 10;
  if (this->s211levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s211levelcellid());
  }

  // int64 s212LevelCellId = 11;
  if (this->s212levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s212levelcellid());
  }

  // int64 s213LevelCellId = 12;
  if (this->s213levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s213levelcellid());
  }

  // int64 s214LevelCellId = 13;
  if (this->s214levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s214levelcellid());
  }

  // int64 s215LevelCellId = 14;
  if (this->s215levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s215levelcellid());
  }

  // int64 s216LevelCellId = 15;
  if (this->s216levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s216levelcellid());
  }

  // int64 s217LevelCellId = 16;
  if (this->s217levelcellid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s217levelcellid());
  }

  // int64 s218LevelCellId = 17;
  if (this->s218levelcellid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s218levelcellid());
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s2celllevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationS2CellRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationS2CellRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationS2CellRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
    MergeFrom(*source);
  }
}

void InsertLocationS2CellRequest::MergeFrom(const InsertLocationS2CellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.s2cellid() != 0) {
    _internal_set_s2cellid(from._internal_s2cellid());
  }
  if (from.s27levelcellid() != 0) {
    _internal_set_s27levelcellid(from._internal_s27levelcellid());
  }
  if (from.s28levelcellid() != 0) {
    _internal_set_s28levelcellid(from._internal_s28levelcellid());
  }
  if (from.s29levelcellid() != 0) {
    _internal_set_s29levelcellid(from._internal_s29levelcellid());
  }
  if (from.s210levelcellid() != 0) {
    _internal_set_s210levelcellid(from._internal_s210levelcellid());
  }
  if (from.s211levelcellid() != 0) {
    _internal_set_s211levelcellid(from._internal_s211levelcellid());
  }
  if (from.s212levelcellid() != 0) {
    _internal_set_s212levelcellid(from._internal_s212levelcellid());
  }
  if (from.s213levelcellid() != 0) {
    _internal_set_s213levelcellid(from._internal_s213levelcellid());
  }
  if (from.s214levelcellid() != 0) {
    _internal_set_s214levelcellid(from._internal_s214levelcellid());
  }
  if (from.s215levelcellid() != 0) {
    _internal_set_s215levelcellid(from._internal_s215levelcellid());
  }
  if (from.s216levelcellid() != 0) {
    _internal_set_s216levelcellid(from._internal_s216levelcellid());
  }
  if (from.s217levelcellid() != 0) {
    _internal_set_s217levelcellid(from._internal_s217levelcellid());
  }
  if (from.s218levelcellid() != 0) {
    _internal_set_s218levelcellid(from._internal_s218levelcellid());
  }
  if (from.s2celllevel() != 0) {
    _internal_set_s2celllevel(from._internal_s2celllevel());
  }
}

void InsertLocationS2CellRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationS2CellRequest::CopyFrom(const InsertLocationS2CellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationS2CellRequest::IsInitialized() const {
  return true;
}

void InsertLocationS2CellRequest::InternalSwap(InsertLocationS2CellRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationS2CellRequest, s2celllevel_)
      + sizeof(InsertLocationS2CellRequest::s2celllevel_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationS2CellRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationS2CellRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationS2CellRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkInsertLocationS2CellRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkInsertLocationS2CellRequest::_Internal::requestheaders(const BulkInsertLocationS2CellRequest* msg) {
  return *msg->requestheaders_;
}
void BulkInsertLocationS2CellRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkInsertLocationS2CellRequest::BulkInsertLocationS2CellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
}
BulkInsertLocationS2CellRequest::BulkInsertLocationS2CellRequest(const BulkInsertLocationS2CellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
}

void BulkInsertLocationS2CellRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkInsertLocationS2CellRequest::~BulkInsertLocationS2CellRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationS2CellRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkInsertLocationS2CellRequest::ArenaDtor(void* object) {
  BulkInsertLocationS2CellRequest* _this = reinterpret_cast< BulkInsertLocationS2CellRequest* >(object);
  (void)_this;
}
void BulkInsertLocationS2CellRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationS2CellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationS2CellRequest& BulkInsertLocationS2CellRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationS2CellRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationS2CellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationS2CellRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationS2CellRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationS2CellRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  return target;
}

size_t BulkInsertLocationS2CellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationS2CellRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationS2CellRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationS2CellRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
    MergeFrom(*source);
  }
}

void BulkInsertLocationS2CellRequest::MergeFrom(const BulkInsertLocationS2CellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkInsertLocationS2CellRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationS2CellRequest::CopyFrom(const BulkInsertLocationS2CellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationS2CellRequest::IsInitialized() const {
  return true;
}

void BulkInsertLocationS2CellRequest::InternalSwap(BulkInsertLocationS2CellRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationS2CellRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertLocationS2CellResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const InsertLocationS2CellResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
InsertLocationS2CellResponse::_Internal::status(const InsertLocationS2CellResponse* msg) {
  return *msg->status_;
}
void InsertLocationS2CellResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void InsertLocationS2CellResponse::clear_attribs() {
  attribs_.Clear();
}
InsertLocationS2CellResponse::InsertLocationS2CellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
}
InsertLocationS2CellResponse::InsertLocationS2CellResponse(const InsertLocationS2CellResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
}

void InsertLocationS2CellResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

InsertLocationS2CellResponse::~InsertLocationS2CellResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationS2CellResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void InsertLocationS2CellResponse::ArenaDtor(void* object) {
  InsertLocationS2CellResponse* _this = reinterpret_cast< InsertLocationS2CellResponse* >(object);
  (void)_this;
}
void InsertLocationS2CellResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationS2CellResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationS2CellResponse& InsertLocationS2CellResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationS2CellResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationS2CellResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationS2CellResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  return target;
}

size_t InsertLocationS2CellResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationS2CellResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationS2CellResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationS2CellResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
    MergeFrom(*source);
  }
}

void InsertLocationS2CellResponse::MergeFrom(const InsertLocationS2CellResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InsertLocationS2CellResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationS2CellResponse::CopyFrom(const InsertLocationS2CellResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationS2CellResponse::IsInitialized() const {
  return true;
}

void InsertLocationS2CellResponse::InternalSwap(InsertLocationS2CellResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationS2CellResponse, count_)
      + sizeof(InsertLocationS2CellResponse::count_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationS2CellResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationS2CellResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationS2CellResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkInsertLocationS2CellResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkInsertLocationS2CellResponse::_Internal::status(const BulkInsertLocationS2CellResponse* msg) {
  return *msg->status_;
}
void BulkInsertLocationS2CellResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkInsertLocationS2CellResponse::BulkInsertLocationS2CellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
}
BulkInsertLocationS2CellResponse::BulkInsertLocationS2CellResponse(const BulkInsertLocationS2CellResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
}

void BulkInsertLocationS2CellResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkInsertLocationS2CellResponse::~BulkInsertLocationS2CellResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationS2CellResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkInsertLocationS2CellResponse::ArenaDtor(void* object) {
  BulkInsertLocationS2CellResponse* _this = reinterpret_cast< BulkInsertLocationS2CellResponse* >(object);
  (void)_this;
}
void BulkInsertLocationS2CellResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationS2CellResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationS2CellResponse& BulkInsertLocationS2CellResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationS2CellResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationS2CellResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationS2CellResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationS2CellResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationS2CellResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  return target;
}

size_t BulkInsertLocationS2CellResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationS2CellResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationS2CellResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationS2CellResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
    MergeFrom(*source);
  }
}

void BulkInsertLocationS2CellResponse::MergeFrom(const BulkInsertLocationS2CellResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkInsertLocationS2CellResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationS2CellResponse::CopyFrom(const BulkInsertLocationS2CellResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationS2CellResponse::IsInitialized() const {
  return true;
}

void BulkInsertLocationS2CellResponse::InternalSwap(BulkInsertLocationS2CellResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkInsertLocationS2CellResponse, count_)
      + sizeof(BulkInsertLocationS2CellResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkInsertLocationS2CellResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationS2CellResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertConfigRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const InsertConfigRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
InsertConfigRequest::_Internal::requestheaders(const InsertConfigRequest* msg) {
  return *msg->requestheaders_;
}
void InsertConfigRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
InsertConfigRequest::InsertConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertConfigRequest)
}
InsertConfigRequest::InsertConfigRequest(const InsertConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertConfigRequest)
}

void InsertConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

InsertConfigRequest::~InsertConfigRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void InsertConfigRequest::ArenaDtor(void* object) {
  InsertConfigRequest* _this = reinterpret_cast< InsertConfigRequest* >(object);
  (void)_this;
}
void InsertConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertConfigRequest& InsertConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertConfigRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertConfigRequest.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertConfigRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertConfigRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertConfigRequest)
  return target;
}

size_t InsertConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertConfigRequest)
    MergeFrom(*source);
  }
}

void InsertConfigRequest::MergeFrom(const InsertConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void InsertConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertConfigRequest::CopyFrom(const InsertConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertConfigRequest::IsInitialized() const {
  return true;
}

void InsertConfigRequest::InternalSwap(InsertConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertConfigRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkInsertConfigRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkInsertConfigRequest::_Internal::requestheaders(const BulkInsertConfigRequest* msg) {
  return *msg->requestheaders_;
}
void BulkInsertConfigRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkInsertConfigRequest::BulkInsertConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertConfigRequest)
}
BulkInsertConfigRequest::BulkInsertConfigRequest(const BulkInsertConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertConfigRequest)
}

void BulkInsertConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkInsertConfigRequest::~BulkInsertConfigRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkInsertConfigRequest::ArenaDtor(void* object) {
  BulkInsertConfigRequest* _this = reinterpret_cast< BulkInsertConfigRequest* >(object);
  (void)_this;
}
void BulkInsertConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertConfigRequest& BulkInsertConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertConfigRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertConfigRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.InsertConfigRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  return target;
}

size_t BulkInsertConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertConfigRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertConfigRequest)
    MergeFrom(*source);
  }
}

void BulkInsertConfigRequest::MergeFrom(const BulkInsertConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkInsertConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertConfigRequest::CopyFrom(const BulkInsertConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertConfigRequest::IsInitialized() const {
  return true;
}

void BulkInsertConfigRequest::InternalSwap(BulkInsertConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertConfigResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const InsertConfigResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
InsertConfigResponse::_Internal::status(const InsertConfigResponse* msg) {
  return *msg->status_;
}
void InsertConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void InsertConfigResponse::clear_attribs() {
  attribs_.Clear();
}
InsertConfigResponse::InsertConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertConfigResponse)
}
InsertConfigResponse::InsertConfigResponse(const InsertConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertConfigResponse)
}

void InsertConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

InsertConfigResponse::~InsertConfigResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void InsertConfigResponse::ArenaDtor(void* object) {
  InsertConfigResponse* _this = reinterpret_cast< InsertConfigResponse* >(object);
  (void)_this;
}
void InsertConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertConfigResponse& InsertConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertConfigResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertConfigResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertConfigResponse)
  return target;
}

size_t InsertConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertConfigResponse)
    MergeFrom(*source);
  }
}

void InsertConfigResponse::MergeFrom(const InsertConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InsertConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertConfigResponse::CopyFrom(const InsertConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertConfigResponse::IsInitialized() const {
  return true;
}

void InsertConfigResponse::InternalSwap(InsertConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertConfigResponse, count_)
      + sizeof(InsertConfigResponse::count_)
      - PROTOBUF_FIELD_OFFSET(InsertConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertConfigResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkInsertConfigResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkInsertConfigResponse::_Internal::status(const BulkInsertConfigResponse* msg) {
  return *msg->status_;
}
void BulkInsertConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkInsertConfigResponse::BulkInsertConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertConfigResponse)
}
BulkInsertConfigResponse::BulkInsertConfigResponse(const BulkInsertConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertConfigResponse)
}

void BulkInsertConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkInsertConfigResponse::~BulkInsertConfigResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkInsertConfigResponse::ArenaDtor(void* object) {
  BulkInsertConfigResponse* _this = reinterpret_cast< BulkInsertConfigResponse* >(object);
  (void)_this;
}
void BulkInsertConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertConfigResponse& BulkInsertConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertConfigResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertConfigResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.InsertConfigResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  return target;
}

size_t BulkInsertConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertConfigResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertConfigResponse)
    MergeFrom(*source);
  }
}

void BulkInsertConfigResponse::MergeFrom(const BulkInsertConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkInsertConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertConfigResponse::CopyFrom(const BulkInsertConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertConfigResponse::IsInitialized() const {
  return true;
}

void BulkInsertConfigResponse::InternalSwap(BulkInsertConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkInsertConfigResponse, count_)
      + sizeof(BulkInsertConfigResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkInsertConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchLocationByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchLocationByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchLocationByIdRequest::_Internal::requestheaders(const FetchLocationByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FetchLocationByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchLocationByIdRequest::FetchLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchLocationByIdRequest)
}
FetchLocationByIdRequest::FetchLocationByIdRequest(const FetchLocationByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchLocationByIdRequest)
}

void FetchLocationByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchLocationByIdRequest::~FetchLocationByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchLocationByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchLocationByIdRequest::ArenaDtor(void* object) {
  FetchLocationByIdRequest* _this = reinterpret_cast< FetchLocationByIdRequest* >(object);
  (void)_this;
}
void FetchLocationByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchLocationByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchLocationByIdRequest& FetchLocationByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchLocationByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchLocationByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchLocationByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  return target;
}

size_t FetchLocationByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchLocationByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchLocationByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchLocationByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchLocationByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchLocationByIdRequest)
    MergeFrom(*source);
  }
}

void FetchLocationByIdRequest::MergeFrom(const FetchLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchLocationByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLocationByIdRequest::CopyFrom(const FetchLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLocationByIdRequest::IsInitialized() const {
  return true;
}

void FetchLocationByIdRequest::InternalSwap(FetchLocationByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchLocationByIdRequest, isstaleallowed_)
      + sizeof(FetchLocationByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchLocationByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchLocationByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationRecord::_Internal {
 public:
};

LocationRecord::LocationRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LocationRecord)
}
LocationRecord::LocationRecord(const LocationRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdbyactortype().empty()) {
    createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_createdbyactortype(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  visibility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visibility().empty()) {
    visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_visibility(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latlonggeohash().empty()) {
    latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latlonggeohash(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxs2level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxs2level_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LocationRecord)
}

void LocationRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxs2level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxs2level_));
}

LocationRecord::~LocationRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LocationRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibility_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationRecord::ArenaDtor(void* object) {
  LocationRecord* _this = reinterpret_cast< LocationRecord* >(object);
  (void)_this;
}
void LocationRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationRecord& LocationRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LocationRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  boundary_.ClearToEmpty();
  labels_.ClearToEmpty();
  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  status_.ClearToEmpty();
  metadata_.ClearToEmpty();
  createdbyactortype_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  visibility_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  latlonggeohash_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxs2level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxs2level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double centerLatitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          centerlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double centerLongitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          centerlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string labels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minS2Level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mins2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxS2Level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          maxs2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdByActorId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          createdbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdByActorType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_createdbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.createdByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visibility = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_visibility();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.visibility"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geographyUid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latLongGeohash = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_latlonggeohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationRecord.latLongGeohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LocationRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.boundary");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_boundary(), target);
  }

  // double centerLatitude = 4;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_centerlatitude(), target);
  }

  // double centerLongitude = 5;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_centerlongitude(), target);
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_area(), target);
  }

  // string labels = 7;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.labels");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_labels(), target);
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.namespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_namespace_(), target);
  }

  // string code = 9;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_code(), target);
  }

  // string status = 10;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.status");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_status(), target);
  }

  // string metadata = 11;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.metadata");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_metadata(), target);
  }

  // int32 version = 12;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_version(), target);
  }

  // int32 minS2Level = 13;
  if (this->mins2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mins2level(), target);
  }

  // int32 maxS2Level = 14;
  if (this->maxs2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_maxs2level(), target);
  }

  // int64 createdByActorId = 15;
  if (this->createdbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_createdbyactorid(), target);
  }

  // string createdByActorType = 16;
  if (this->createdbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdbyactortype().data(), static_cast<int>(this->_internal_createdbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.createdByActorType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_createdbyactortype(), target);
  }

  // int64 modifiedByActorId = 17;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 18;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_modifiedbyactortype(), target);
  }

  // int64 createdAt = 19;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 20;
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_updatedat(), target);
  }

  // int64 deletedAt = 21;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_deletedat(), target);
  }

  // string visibility = 22;
  if (this->visibility().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visibility().data(), static_cast<int>(this->_internal_visibility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.visibility");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_visibility(), target);
  }

  // string geographyUid = 23;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.geographyUid");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_geographyuid(), target);
  }

  // string pincode = 24;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.pincode");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_pincode(), target);
  }

  // string latLongGeohash = 25;
  if (this->latlonggeohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latlonggeohash().data(), static_cast<int>(this->_internal_latlonggeohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationRecord.latLongGeohash");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_latlonggeohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LocationRecord)
  return target;
}

size_t LocationRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LocationRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string labels = 7;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 9;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string status = 10;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string metadata = 11;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string createdByActorType = 16;
  if (this->createdbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdbyactortype());
  }

  // string modifiedByActorType = 18;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // string visibility = 22;
  if (this->visibility().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visibility());
  }

  // string geographyUid = 23;
  if (this->geographyuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string pincode = 24;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string latLongGeohash = 25;
  if (this->latlonggeohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latlonggeohash());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // double centerLatitude = 4;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double centerLongitude = 5;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 version = 12;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 minS2Level = 13;
  if (this->mins2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins2level());
  }

  // int64 createdByActorId = 15;
  if (this->createdbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdbyactorid());
  }

  // int64 modifiedByActorId = 17;
  if (this->modifiedbyactorid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // int64 createdAt = 19;
  if (this->createdat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 20;
  if (this->updatedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // int64 deletedAt = 21;
  if (this->deletedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int32 maxS2Level = 14;
  if (this->maxs2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxs2level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LocationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LocationRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LocationRecord)
    MergeFrom(*source);
  }
}

void LocationRecord::MergeFrom(const LocationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LocationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.createdbyactortype().size() > 0) {
    _internal_set_createdbyactortype(from._internal_createdbyactortype());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.visibility().size() > 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.latlonggeohash().size() > 0) {
    _internal_set_latlonggeohash(from._internal_latlonggeohash());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.centerlatitude() <= 0 && from.centerlatitude() >= 0)) {
    _internal_set_centerlatitude(from._internal_centerlatitude());
  }
  if (!(from.centerlongitude() <= 0 && from.centerlongitude() >= 0)) {
    _internal_set_centerlongitude(from._internal_centerlongitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.mins2level() != 0) {
    _internal_set_mins2level(from._internal_mins2level());
  }
  if (from.createdbyactorid() != 0) {
    _internal_set_createdbyactorid(from._internal_createdbyactorid());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.maxs2level() != 0) {
    _internal_set_maxs2level(from._internal_maxs2level());
  }
}

void LocationRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LocationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationRecord::CopyFrom(const LocationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LocationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationRecord::IsInitialized() const {
  return true;
}

void LocationRecord::InternalSwap(LocationRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createdbyactortype_.Swap(&other->createdbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visibility_.Swap(&other->visibility_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latlonggeohash_.Swap(&other->latlonggeohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationRecord, maxs2level_)
      + sizeof(LocationRecord::maxs2level_)
      - PROTOBUF_FIELD_OFFSET(LocationRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Location::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const Location* msg);
  static const ::farm::nurture::location::service::proto::LocationRecord& records(const Location* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
Location::_Internal::status(const Location* msg) {
  return *msg->status_;
}
const ::farm::nurture::location::service::proto::LocationRecord&
Location::_Internal::records(const Location* msg) {
  return *msg->records_;
}
void Location::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Location::clear_attribs() {
  attribs_.Clear();
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::farm::nurture::location::service::proto::LocationRecord(*from.records_);
  } else {
    records_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete records_;
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.LocationRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // .farm.nurture.location.service.proto.LocationRecord records = 4;
  if (this->has_records()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .farm.nurture.location.service.proto.LocationRecord records = 4;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.has_records()) {
    _internal_mutable_records()->::farm::nurture::location::service::proto::LocationRecord::MergeFrom(from._internal_records());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, count_)
      + sizeof(Location::count_)
      - PROTOBUF_FIELD_OFFSET(Location, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchLocationByCodeAndNamespaceRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchLocationByCodeAndNamespaceRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchLocationByCodeAndNamespaceRequest::_Internal::requestheaders(const FetchLocationByCodeAndNamespaceRequest* msg) {
  return *msg->requestheaders_;
}
void FetchLocationByCodeAndNamespaceRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchLocationByCodeAndNamespaceRequest::FetchLocationByCodeAndNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
}
FetchLocationByCodeAndNamespaceRequest::FetchLocationByCodeAndNamespaceRequest(const FetchLocationByCodeAndNamespaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
}

void FetchLocationByCodeAndNamespaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchLocationByCodeAndNamespaceRequest::~FetchLocationByCodeAndNamespaceRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchLocationByCodeAndNamespaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchLocationByCodeAndNamespaceRequest::ArenaDtor(void* object) {
  FetchLocationByCodeAndNamespaceRequest* _this = reinterpret_cast< FetchLocationByCodeAndNamespaceRequest* >(object);
  (void)_this;
}
void FetchLocationByCodeAndNamespaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchLocationByCodeAndNamespaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchLocationByCodeAndNamespaceRequest& FetchLocationByCodeAndNamespaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchLocationByCodeAndNamespaceRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchLocationByCodeAndNamespaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  namespace__.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchLocationByCodeAndNamespaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchLocationByCodeAndNamespaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string code = 3;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  return target;
}

size_t FetchLocationByCodeAndNamespaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchLocationByCodeAndNamespaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchLocationByCodeAndNamespaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchLocationByCodeAndNamespaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
    MergeFrom(*source);
  }
}

void FetchLocationByCodeAndNamespaceRequest::MergeFrom(const FetchLocationByCodeAndNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchLocationByCodeAndNamespaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLocationByCodeAndNamespaceRequest::CopyFrom(const FetchLocationByCodeAndNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLocationByCodeAndNamespaceRequest::IsInitialized() const {
  return true;
}

void FetchLocationByCodeAndNamespaceRequest::InternalSwap(FetchLocationByCodeAndNamespaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchLocationByCodeAndNamespaceRequest, isstaleallowed_)
      + sizeof(FetchLocationByCodeAndNamespaceRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchLocationByCodeAndNamespaceRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchLocationByCodeAndNamespaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchS2CellByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchS2CellByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchS2CellByIdRequest::_Internal::requestheaders(const FetchS2CellByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FetchS2CellByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchS2CellByIdRequest::FetchS2CellByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
}
FetchS2CellByIdRequest::FetchS2CellByIdRequest(const FetchS2CellByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
}

void FetchS2CellByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchS2CellByIdRequest::~FetchS2CellByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchS2CellByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchS2CellByIdRequest::ArenaDtor(void* object) {
  FetchS2CellByIdRequest* _this = reinterpret_cast< FetchS2CellByIdRequest* >(object);
  (void)_this;
}
void FetchS2CellByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchS2CellByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchS2CellByIdRequest& FetchS2CellByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchS2CellByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchS2CellByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchS2CellByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchS2CellByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  return target;
}

size_t FetchS2CellByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchS2CellByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchS2CellByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchS2CellByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
    MergeFrom(*source);
  }
}

void FetchS2CellByIdRequest::MergeFrom(const FetchS2CellByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchS2CellByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchS2CellByIdRequest::CopyFrom(const FetchS2CellByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchS2CellByIdRequest::IsInitialized() const {
  return true;
}

void FetchS2CellByIdRequest::InternalSwap(FetchS2CellByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchS2CellByIdRequest, isstaleallowed_)
      + sizeof(FetchS2CellByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchS2CellByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchS2CellByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S2CellRecord::_Internal {
 public:
};

S2CellRecord::S2CellRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.S2CellRecord)
}
S2CellRecord::S2CellRecord(const S2CellRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
    reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.S2CellRecord)
}

void S2CellRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
}

S2CellRecord::~S2CellRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.S2CellRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S2CellRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S2CellRecord::ArenaDtor(void* object) {
  S2CellRecord* _this = reinterpret_cast< S2CellRecord* >(object);
  (void)_this;
}
void S2CellRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2CellRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2CellRecord& S2CellRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2CellRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void S2CellRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.S2CellRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2CellRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s2CellId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s2CellLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s2celllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s27LevelCellId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s27levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s28LevelCellId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s28levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s29LevelCellId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s29levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s210LevelCellId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s210levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s211LevelCellId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s211levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s212LevelCellId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s212levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s213LevelCellId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          s213levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s214LevelCellId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          s214levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s215LevelCellId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          s215levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s216LevelCellId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          s216levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s217LevelCellId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          s217levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s218LevelCellId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          s218levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2CellRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.S2CellRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_locationid(), target);
  }

  // int64 s2CellId = 3;
  if (this->s2cellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_s2cellid(), target);
  }

  // int32 s2CellLevel = 4;
  if (this->s2celllevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_s2celllevel(), target);
  }

  // int64 s27LevelCellId = 5;
  if (this->s27levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_s27levelcellid(), target);
  }

  // int64 s28LevelCellId = 6;
  if (this->s28levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_s28levelcellid(), target);
  }

  // int64 s29LevelCellId = 7;
  if (this->s29levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_s29levelcellid(), target);
  }

  // int64 s210LevelCellId = 8;
  if (this->s210levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_s210levelcellid(), target);
  }

  // int64 s211LevelCellId = 9;
  if (this->s211levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_s211levelcellid(), target);
  }

  // int64 s212LevelCellId = 10;
  if (this->s212levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_s212levelcellid(), target);
  }

  // int64 s213LevelCellId = 11;
  if (this->s213levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_s213levelcellid(), target);
  }

  // int64 s214LevelCellId = 12;
  if (this->s214levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_s214levelcellid(), target);
  }

  // int64 s215LevelCellId = 13;
  if (this->s215levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_s215levelcellid(), target);
  }

  // int64 s216LevelCellId = 14;
  if (this->s216levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_s216levelcellid(), target);
  }

  // int64 s217LevelCellId = 15;
  if (this->s217levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_s217levelcellid(), target);
  }

  // int64 s218LevelCellId = 16;
  if (this->s218levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_s218levelcellid(), target);
  }

  // int64 createdAt = 17;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 18;
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_updatedat(), target);
  }

  // int64 deletedAt = 19;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_deletedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.S2CellRecord)
  return target;
}

size_t S2CellRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.S2CellRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // int64 s2CellId = 3;
  if (this->s2cellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s2cellid());
  }

  // int64 s27LevelCellId = 5;
  if (this->s27levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s27levelcellid());
  }

  // int64 s28LevelCellId = 6;
  if (this->s28levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s28levelcellid());
  }

  // int64 s29LevelCellId = 7;
  if (this->s29levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s29levelcellid());
  }

  // int64 s210LevelCellId = 8;
  if (this->s210levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s210levelcellid());
  }

  // int64 s211LevelCellId = 9;
  if (this->s211levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s211levelcellid());
  }

  // int64 s212LevelCellId = 10;
  if (this->s212levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s212levelcellid());
  }

  // int64 s213LevelCellId = 11;
  if (this->s213levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s213levelcellid());
  }

  // int64 s214LevelCellId = 12;
  if (this->s214levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s214levelcellid());
  }

  // int64 s215LevelCellId = 13;
  if (this->s215levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s215levelcellid());
  }

  // int64 s216LevelCellId = 14;
  if (this->s216levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s216levelcellid());
  }

  // int64 s217LevelCellId = 15;
  if (this->s217levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s217levelcellid());
  }

  // int64 s218LevelCellId = 16;
  if (this->s218levelcellid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s218levelcellid());
  }

  // int64 createdAt = 17;
  if (this->createdat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 18;
  if (this->updatedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // int64 deletedAt = 19;
  if (this->deletedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int32 s2CellLevel = 4;
  if (this->s2celllevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s2celllevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CellRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.S2CellRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CellRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2CellRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.S2CellRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.S2CellRecord)
    MergeFrom(*source);
  }
}

void S2CellRecord::MergeFrom(const S2CellRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.S2CellRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.s2cellid() != 0) {
    _internal_set_s2cellid(from._internal_s2cellid());
  }
  if (from.s27levelcellid() != 0) {
    _internal_set_s27levelcellid(from._internal_s27levelcellid());
  }
  if (from.s28levelcellid() != 0) {
    _internal_set_s28levelcellid(from._internal_s28levelcellid());
  }
  if (from.s29levelcellid() != 0) {
    _internal_set_s29levelcellid(from._internal_s29levelcellid());
  }
  if (from.s210levelcellid() != 0) {
    _internal_set_s210levelcellid(from._internal_s210levelcellid());
  }
  if (from.s211levelcellid() != 0) {
    _internal_set_s211levelcellid(from._internal_s211levelcellid());
  }
  if (from.s212levelcellid() != 0) {
    _internal_set_s212levelcellid(from._internal_s212levelcellid());
  }
  if (from.s213levelcellid() != 0) {
    _internal_set_s213levelcellid(from._internal_s213levelcellid());
  }
  if (from.s214levelcellid() != 0) {
    _internal_set_s214levelcellid(from._internal_s214levelcellid());
  }
  if (from.s215levelcellid() != 0) {
    _internal_set_s215levelcellid(from._internal_s215levelcellid());
  }
  if (from.s216levelcellid() != 0) {
    _internal_set_s216levelcellid(from._internal_s216levelcellid());
  }
  if (from.s217levelcellid() != 0) {
    _internal_set_s217levelcellid(from._internal_s217levelcellid());
  }
  if (from.s218levelcellid() != 0) {
    _internal_set_s218levelcellid(from._internal_s218levelcellid());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.s2celllevel() != 0) {
    _internal_set_s2celllevel(from._internal_s2celllevel());
  }
}

void S2CellRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.S2CellRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CellRecord::CopyFrom(const S2CellRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.S2CellRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CellRecord::IsInitialized() const {
  return true;
}

void S2CellRecord::InternalSwap(S2CellRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2CellRecord, s2celllevel_)
      + sizeof(S2CellRecord::s2celllevel_)
      - PROTOBUF_FIELD_OFFSET(S2CellRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2CellRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S2Cell::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const S2Cell* msg);
  static const ::farm::nurture::location::service::proto::S2CellRecord& records(const S2Cell* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
S2Cell::_Internal::status(const S2Cell* msg) {
  return *msg->status_;
}
const ::farm::nurture::location::service::proto::S2CellRecord&
S2Cell::_Internal::records(const S2Cell* msg) {
  return *msg->records_;
}
void S2Cell::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void S2Cell::clear_attribs() {
  attribs_.Clear();
}
S2Cell::S2Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.S2Cell)
}
S2Cell::S2Cell(const S2Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::farm::nurture::location::service::proto::S2CellRecord(*from.records_);
  } else {
    records_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.S2Cell)
}

void S2Cell::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

S2Cell::~S2Cell() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.S2Cell)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S2Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete records_;
}

void S2Cell::ArenaDtor(void* object) {
  S2Cell* _this = reinterpret_cast< S2Cell* >(object);
  (void)_this;
}
void S2Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2Cell& S2Cell::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2Cell_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void S2Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.S2Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.S2CellRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2Cell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.S2Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // .farm.nurture.location.service.proto.S2CellRecord records = 4;
  if (this->has_records()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.S2Cell)
  return target;
}

size_t S2Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.S2Cell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .farm.nurture.location.service.proto.S2CellRecord records = 4;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2Cell::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.S2Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const S2Cell* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2Cell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.S2Cell)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.S2Cell)
    MergeFrom(*source);
  }
}

void S2Cell::MergeFrom(const S2Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.S2Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.has_records()) {
    _internal_mutable_records()->::farm::nurture::location::service::proto::S2CellRecord::MergeFrom(from._internal_records());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void S2Cell::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.S2Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2Cell::CopyFrom(const S2Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.S2Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2Cell::IsInitialized() const {
  return true;
}

void S2Cell::InternalSwap(S2Cell* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2Cell, count_)
      + sizeof(S2Cell::count_)
      - PROTOBUF_FIELD_OFFSET(S2Cell, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2Cell::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchS2CellByLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchS2CellByLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchS2CellByLocationRequest::_Internal::requestheaders(const FetchS2CellByLocationRequest* msg) {
  return *msg->requestheaders_;
}
void FetchS2CellByLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchS2CellByLocationRequest::FetchS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
}
FetchS2CellByLocationRequest::FetchS2CellByLocationRequest(const FetchS2CellByLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&locationid_, &from.locationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2cellid_) -
    reinterpret_cast<char*>(&locationid_)) + sizeof(s2cellid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
}

void FetchS2CellByLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&s2cellid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(s2cellid_));
}

FetchS2CellByLocationRequest::~FetchS2CellByLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchS2CellByLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchS2CellByLocationRequest::ArenaDtor(void* object) {
  FetchS2CellByLocationRequest* _this = reinterpret_cast< FetchS2CellByLocationRequest* >(object);
  (void)_this;
}
void FetchS2CellByLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchS2CellByLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchS2CellByLocationRequest& FetchS2CellByLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchS2CellByLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&locationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2cellid_) -
      reinterpret_cast<char*>(&locationid_)) + sizeof(s2cellid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchS2CellByLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s2CellId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s2cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s2CellLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s2celllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchS2CellByLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_locationid(), target);
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_s2cellid(), target);
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_s2celllevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  return target;
}

size_t FetchS2CellByLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s2celllevel());
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s2cellid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchS2CellByLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchS2CellByLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchS2CellByLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
    MergeFrom(*source);
  }
}

void FetchS2CellByLocationRequest::MergeFrom(const FetchS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (from.s2celllevel() != 0) {
    _internal_set_s2celllevel(from._internal_s2celllevel());
  }
  if (from.s2cellid() != 0) {
    _internal_set_s2cellid(from._internal_s2cellid());
  }
}

void FetchS2CellByLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchS2CellByLocationRequest::CopyFrom(const FetchS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchS2CellByLocationRequest::IsInitialized() const {
  return true;
}

void FetchS2CellByLocationRequest::InternalSwap(FetchS2CellByLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchS2CellByLocationRequest, s2cellid_)
      + sizeof(FetchS2CellByLocationRequest::s2cellid_)
      - PROTOBUF_FIELD_OFFSET(FetchS2CellByLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchS2CellByLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchS2CellByLocationIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchS2CellByLocationIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchS2CellByLocationIdRequest::_Internal::requestheaders(const FetchS2CellByLocationIdRequest* msg) {
  return *msg->requestheaders_;
}
void FetchS2CellByLocationIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchS2CellByLocationIdRequest::FetchS2CellByLocationIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
}
FetchS2CellByLocationIdRequest::FetchS2CellByLocationIdRequest(const FetchS2CellByLocationIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&locationid_, &from.locationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&locationid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
}

void FetchS2CellByLocationIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchS2CellByLocationIdRequest::~FetchS2CellByLocationIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchS2CellByLocationIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchS2CellByLocationIdRequest::ArenaDtor(void* object) {
  FetchS2CellByLocationIdRequest* _this = reinterpret_cast< FetchS2CellByLocationIdRequest* >(object);
  (void)_this;
}
void FetchS2CellByLocationIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchS2CellByLocationIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchS2CellByLocationIdRequest& FetchS2CellByLocationIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchS2CellByLocationIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchS2CellByLocationIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&locationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&locationid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchS2CellByLocationIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchS2CellByLocationIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_locationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  return target;
}

size_t FetchS2CellByLocationIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchS2CellByLocationIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchS2CellByLocationIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchS2CellByLocationIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
    MergeFrom(*source);
  }
}

void FetchS2CellByLocationIdRequest::MergeFrom(const FetchS2CellByLocationIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchS2CellByLocationIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchS2CellByLocationIdRequest::CopyFrom(const FetchS2CellByLocationIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchS2CellByLocationIdRequest::IsInitialized() const {
  return true;
}

void FetchS2CellByLocationIdRequest::InternalSwap(FetchS2CellByLocationIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchS2CellByLocationIdRequest, isstaleallowed_)
      + sizeof(FetchS2CellByLocationIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchS2CellByLocationIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchS2CellByLocationIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationS2CellsRecord::_Internal {
 public:
};

LocationS2CellsRecord::LocationS2CellsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LocationS2CellsRecord)
}
LocationS2CellsRecord::LocationS2CellsRecord(const LocationS2CellsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
    reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LocationS2CellsRecord)
}

void LocationS2CellsRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
}

LocationS2CellsRecord::~LocationS2CellsRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LocationS2CellsRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationS2CellsRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocationS2CellsRecord::ArenaDtor(void* object) {
  LocationS2CellsRecord* _this = reinterpret_cast< LocationS2CellsRecord* >(object);
  (void)_this;
}
void LocationS2CellsRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationS2CellsRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationS2CellsRecord& LocationS2CellsRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationS2CellsRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocationS2CellsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s2celllevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationS2CellsRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s2CellId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s2CellLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s2celllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s27LevelCellId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s27levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s28LevelCellId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s28levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s29LevelCellId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s29levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s210LevelCellId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s210levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s211LevelCellId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s211levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s212LevelCellId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s212levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s213LevelCellId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          s213levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s214LevelCellId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          s214levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s215LevelCellId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          s215levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s216LevelCellId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          s216levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s217LevelCellId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          s217levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s218LevelCellId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          s218levelcellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationS2CellsRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_locationid(), target);
  }

  // int64 s2CellId = 3;
  if (this->s2cellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_s2cellid(), target);
  }

  // int32 s2CellLevel = 4;
  if (this->s2celllevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_s2celllevel(), target);
  }

  // int64 s27LevelCellId = 5;
  if (this->s27levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_s27levelcellid(), target);
  }

  // int64 s28LevelCellId = 6;
  if (this->s28levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_s28levelcellid(), target);
  }

  // int64 s29LevelCellId = 7;
  if (this->s29levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_s29levelcellid(), target);
  }

  // int64 s210LevelCellId = 8;
  if (this->s210levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_s210levelcellid(), target);
  }

  // int64 s211LevelCellId = 9;
  if (this->s211levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_s211levelcellid(), target);
  }

  // int64 s212LevelCellId = 10;
  if (this->s212levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_s212levelcellid(), target);
  }

  // int64 s213LevelCellId = 11;
  if (this->s213levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_s213levelcellid(), target);
  }

  // int64 s214LevelCellId = 12;
  if (this->s214levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_s214levelcellid(), target);
  }

  // int64 s215LevelCellId = 13;
  if (this->s215levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_s215levelcellid(), target);
  }

  // int64 s216LevelCellId = 14;
  if (this->s216levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_s216levelcellid(), target);
  }

  // int64 s217LevelCellId = 15;
  if (this->s217levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_s217levelcellid(), target);
  }

  // int64 s218LevelCellId = 16;
  if (this->s218levelcellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_s218levelcellid(), target);
  }

  // int64 createdAt = 17;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 18;
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_updatedat(), target);
  }

  // int64 deletedAt = 19;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_deletedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LocationS2CellsRecord)
  return target;
}

size_t LocationS2CellsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 locationId = 2;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // int64 s2CellId = 3;
  if (this->s2cellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s2cellid());
  }

  // int64 s27LevelCellId = 5;
  if (this->s27levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s27levelcellid());
  }

  // int64 s28LevelCellId = 6;
  if (this->s28levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s28levelcellid());
  }

  // int64 s29LevelCellId = 7;
  if (this->s29levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s29levelcellid());
  }

  // int64 s210LevelCellId = 8;
  if (this->s210levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s210levelcellid());
  }

  // int64 s211LevelCellId = 9;
  if (this->s211levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s211levelcellid());
  }

  // int64 s212LevelCellId = 10;
  if (this->s212levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s212levelcellid());
  }

  // int64 s213LevelCellId = 11;
  if (this->s213levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s213levelcellid());
  }

  // int64 s214LevelCellId = 12;
  if (this->s214levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s214levelcellid());
  }

  // int64 s215LevelCellId = 13;
  if (this->s215levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s215levelcellid());
  }

  // int64 s216LevelCellId = 14;
  if (this->s216levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s216levelcellid());
  }

  // int64 s217LevelCellId = 15;
  if (this->s217levelcellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s217levelcellid());
  }

  // int64 s218LevelCellId = 16;
  if (this->s218levelcellid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s218levelcellid());
  }

  // int64 createdAt = 17;
  if (this->createdat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 18;
  if (this->updatedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // int64 deletedAt = 19;
  if (this->deletedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int32 s2CellLevel = 4;
  if (this->s2celllevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s2celllevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationS2CellsRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationS2CellsRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationS2CellsRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LocationS2CellsRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LocationS2CellsRecord)
    MergeFrom(*source);
  }
}

void LocationS2CellsRecord::MergeFrom(const LocationS2CellsRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.s2cellid() != 0) {
    _internal_set_s2cellid(from._internal_s2cellid());
  }
  if (from.s27levelcellid() != 0) {
    _internal_set_s27levelcellid(from._internal_s27levelcellid());
  }
  if (from.s28levelcellid() != 0) {
    _internal_set_s28levelcellid(from._internal_s28levelcellid());
  }
  if (from.s29levelcellid() != 0) {
    _internal_set_s29levelcellid(from._internal_s29levelcellid());
  }
  if (from.s210levelcellid() != 0) {
    _internal_set_s210levelcellid(from._internal_s210levelcellid());
  }
  if (from.s211levelcellid() != 0) {
    _internal_set_s211levelcellid(from._internal_s211levelcellid());
  }
  if (from.s212levelcellid() != 0) {
    _internal_set_s212levelcellid(from._internal_s212levelcellid());
  }
  if (from.s213levelcellid() != 0) {
    _internal_set_s213levelcellid(from._internal_s213levelcellid());
  }
  if (from.s214levelcellid() != 0) {
    _internal_set_s214levelcellid(from._internal_s214levelcellid());
  }
  if (from.s215levelcellid() != 0) {
    _internal_set_s215levelcellid(from._internal_s215levelcellid());
  }
  if (from.s216levelcellid() != 0) {
    _internal_set_s216levelcellid(from._internal_s216levelcellid());
  }
  if (from.s217levelcellid() != 0) {
    _internal_set_s217levelcellid(from._internal_s217levelcellid());
  }
  if (from.s218levelcellid() != 0) {
    _internal_set_s218levelcellid(from._internal_s218levelcellid());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.s2celllevel() != 0) {
    _internal_set_s2celllevel(from._internal_s2celllevel());
  }
}

void LocationS2CellsRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationS2CellsRecord::CopyFrom(const LocationS2CellsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LocationS2CellsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationS2CellsRecord::IsInitialized() const {
  return true;
}

void LocationS2CellsRecord::InternalSwap(LocationS2CellsRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationS2CellsRecord, s2celllevel_)
      + sizeof(LocationS2CellsRecord::s2celllevel_)
      - PROTOBUF_FIELD_OFFSET(LocationS2CellsRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationS2CellsRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationS2Cells::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const LocationS2Cells* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
LocationS2Cells::_Internal::status(const LocationS2Cells* msg) {
  return *msg->status_;
}
void LocationS2Cells::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void LocationS2Cells::clear_attribs() {
  attribs_.Clear();
}
LocationS2Cells::LocationS2Cells(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LocationS2Cells)
}
LocationS2Cells::LocationS2Cells(const LocationS2Cells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LocationS2Cells)
}

void LocationS2Cells::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

LocationS2Cells::~LocationS2Cells() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LocationS2Cells)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationS2Cells::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LocationS2Cells::ArenaDtor(void* object) {
  LocationS2Cells* _this = reinterpret_cast< LocationS2Cells* >(object);
  (void)_this;
}
void LocationS2Cells::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationS2Cells::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationS2Cells& LocationS2Cells::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationS2Cells_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocationS2Cells::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LocationS2Cells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationS2Cells::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.LocationS2CellsRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationS2Cells::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LocationS2Cells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.LocationS2CellsRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LocationS2Cells)
  return target;
}

size_t LocationS2Cells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LocationS2Cells)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.LocationS2CellsRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationS2Cells::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LocationS2Cells)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationS2Cells* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationS2Cells>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LocationS2Cells)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LocationS2Cells)
    MergeFrom(*source);
  }
}

void LocationS2Cells::MergeFrom(const LocationS2Cells& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LocationS2Cells)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void LocationS2Cells::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LocationS2Cells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationS2Cells::CopyFrom(const LocationS2Cells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LocationS2Cells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationS2Cells::IsInitialized() const {
  return true;
}

void LocationS2Cells::InternalSwap(LocationS2Cells* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationS2Cells, count_)
      + sizeof(LocationS2Cells::count_)
      - PROTOBUF_FIELD_OFFSET(LocationS2Cells, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationS2Cells::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateLocationByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateLocationByIdRequest::_Internal::requestheaders(const UpdateLocationByIdRequest* msg) {
  return *msg->requestheaders_;
}
void UpdateLocationByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
UpdateLocationByIdRequest::UpdateLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
}
UpdateLocationByIdRequest::UpdateLocationByIdRequest(const UpdateLocationByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latlonggeohash().empty()) {
    latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latlonggeohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&centerlatitude_, &from.centerlatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&centerlatitude_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
}

void UpdateLocationByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(id_));
}

UpdateLocationByIdRequest::~UpdateLocationByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void UpdateLocationByIdRequest::ArenaDtor(void* object) {
  UpdateLocationByIdRequest* _this = reinterpret_cast< UpdateLocationByIdRequest* >(object);
  (void)_this;
}
void UpdateLocationByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationByIdRequest& UpdateLocationByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  boundary_.ClearToEmpty();
  labels_.ClearToEmpty();
  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  metadata_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  latlonggeohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&centerlatitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&centerlatitude_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double centerLatitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          centerlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double centerLongitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          centerlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string labels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status>(val));
        } else goto handle_unusual;
        continue;
      // string metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 newVersion = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          newversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minS2Level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mins2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxS2Level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          maxs2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility visibility = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geographyUid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latLongGeohash = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_latlonggeohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oldVersion = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          oldversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_boundary(), target);
  }

  // double centerLatitude = 4;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_centerlatitude(), target);
  }

  // double centerLongitude = 5;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_centerlongitude(), target);
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_area(), target);
  }

  // string labels = 7;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_labels(), target);
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_namespace_(), target);
  }

  // string code = 9;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_code(), target);
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status status = 10;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // string metadata = 11;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_metadata(), target);
  }

  // int32 newVersion = 12;
  if (this->newversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_newversion(), target);
  }

  // int32 minS2Level = 13;
  if (this->mins2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mins2level(), target);
  }

  // int32 maxS2Level = 14;
  if (this->maxs2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_maxs2level(), target);
  }

  // int64 modifiedByActorId = 15;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 16;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_modifiedbyactortype(), target);
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility visibility = 17;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_visibility(), target);
  }

  // string geographyUid = 18;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_geographyuid(), target);
  }

  // string pincode = 19;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_pincode(), target);
  }

  // string latLongGeohash = 20;
  if (this->latlonggeohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latlonggeohash().data(), static_cast<int>(this->_internal_latlonggeohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_latlonggeohash(), target);
  }

  // int64 id = 21;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_id(), target);
  }

  // int32 oldVersion = 22;
  if (this->oldversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_oldversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  return target;
}

size_t UpdateLocationByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string labels = 7;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 9;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string metadata = 11;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string modifiedByActorType = 16;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // string geographyUid = 18;
  if (this->geographyuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string pincode = 19;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string latLongGeohash = 20;
  if (this->latlonggeohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latlonggeohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double centerLatitude = 4;
  if (!(this->centerlatitude() <= 0 && this->centerlatitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double centerLongitude = 5;
  if (!(this->centerlongitude() <= 0 && this->centerlongitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 newVersion = 12;
  if (this->newversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newversion());
  }

  // int32 minS2Level = 13;
  if (this->mins2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins2level());
  }

  // int32 maxS2Level = 14;
  if (this->maxs2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxs2level());
  }

  // int64 modifiedByActorId = 15;
  if (this->modifiedbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility visibility = 17;
  if (this->visibility() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // int32 oldVersion = 22;
  if (this->oldversion() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oldversion());
  }

  // int64 id = 21;
  if (this->id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
    MergeFrom(*source);
  }
}

void UpdateLocationByIdRequest::MergeFrom(const UpdateLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.latlonggeohash().size() > 0) {
    _internal_set_latlonggeohash(from._internal_latlonggeohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.centerlatitude() <= 0 && from.centerlatitude() >= 0)) {
    _internal_set_centerlatitude(from._internal_centerlatitude());
  }
  if (!(from.centerlongitude() <= 0 && from.centerlongitude() >= 0)) {
    _internal_set_centerlongitude(from._internal_centerlongitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.newversion() != 0) {
    _internal_set_newversion(from._internal_newversion());
  }
  if (from.mins2level() != 0) {
    _internal_set_mins2level(from._internal_mins2level());
  }
  if (from.maxs2level() != 0) {
    _internal_set_maxs2level(from._internal_maxs2level());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  if (from.oldversion() != 0) {
    _internal_set_oldversion(from._internal_oldversion());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateLocationByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationByIdRequest::CopyFrom(const UpdateLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationByIdRequest::IsInitialized() const {
  return true;
}

void UpdateLocationByIdRequest::InternalSwap(UpdateLocationByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latlonggeohash_.Swap(&other->latlonggeohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationByIdRequest, id_)
      + sizeof(UpdateLocationByIdRequest::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateLocationByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateLocationByIdRequest::_Internal::requestheaders(const BulkUpdateLocationByIdRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateLocationByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateLocationByIdRequest::BulkUpdateLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
}
BulkUpdateLocationByIdRequest::BulkUpdateLocationByIdRequest(const BulkUpdateLocationByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
}

void BulkUpdateLocationByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateLocationByIdRequest::~BulkUpdateLocationByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateLocationByIdRequest::ArenaDtor(void* object) {
  BulkUpdateLocationByIdRequest* _this = reinterpret_cast< BulkUpdateLocationByIdRequest* >(object);
  (void)_this;
}
void BulkUpdateLocationByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationByIdRequest& BulkUpdateLocationByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationByIdRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  return target;
}

size_t BulkUpdateLocationByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationByIdRequest::MergeFrom(const BulkUpdateLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateLocationByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationByIdRequest::CopyFrom(const BulkUpdateLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationByIdRequest::IsInitialized() const {
  return true;
}

void BulkUpdateLocationByIdRequest::InternalSwap(BulkUpdateLocationByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateLocationByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateLocationByIdResponse::_Internal::status(const UpdateLocationByIdResponse* msg) {
  return *msg->status_;
}
void UpdateLocationByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateLocationByIdResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateLocationByIdResponse::UpdateLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
}
UpdateLocationByIdResponse::UpdateLocationByIdResponse(const UpdateLocationByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
}

void UpdateLocationByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateLocationByIdResponse::~UpdateLocationByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateLocationByIdResponse::ArenaDtor(void* object) {
  UpdateLocationByIdResponse* _this = reinterpret_cast< UpdateLocationByIdResponse* >(object);
  (void)_this;
}
void UpdateLocationByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationByIdResponse& UpdateLocationByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  return target;
}

size_t UpdateLocationByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
    MergeFrom(*source);
  }
}

void UpdateLocationByIdResponse::MergeFrom(const UpdateLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateLocationByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationByIdResponse::CopyFrom(const UpdateLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationByIdResponse::IsInitialized() const {
  return true;
}

void UpdateLocationByIdResponse::InternalSwap(UpdateLocationByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationByIdResponse, count_)
      + sizeof(UpdateLocationByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateLocationByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateLocationByIdResponse::_Internal::status(const BulkUpdateLocationByIdResponse* msg) {
  return *msg->status_;
}
void BulkUpdateLocationByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateLocationByIdResponse::BulkUpdateLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
}
BulkUpdateLocationByIdResponse::BulkUpdateLocationByIdResponse(const BulkUpdateLocationByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
}

void BulkUpdateLocationByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateLocationByIdResponse::~BulkUpdateLocationByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateLocationByIdResponse::ArenaDtor(void* object) {
  BulkUpdateLocationByIdResponse* _this = reinterpret_cast< BulkUpdateLocationByIdResponse* >(object);
  (void)_this;
}
void BulkUpdateLocationByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationByIdResponse& BulkUpdateLocationByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationByIdResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  return target;
}

size_t BulkUpdateLocationByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationByIdResponse::MergeFrom(const BulkUpdateLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateLocationByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationByIdResponse::CopyFrom(const BulkUpdateLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationByIdResponse::IsInitialized() const {
  return true;
}

void BulkUpdateLocationByIdResponse::InternalSwap(BulkUpdateLocationByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateLocationByIdResponse, count_)
      + sizeof(BulkUpdateLocationByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateLocationByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationLabelByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateLocationLabelByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateLocationLabelByIdRequest::_Internal::requestheaders(const UpdateLocationLabelByIdRequest* msg) {
  return *msg->requestheaders_;
}
void UpdateLocationLabelByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
UpdateLocationLabelByIdRequest::UpdateLocationLabelByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
}
UpdateLocationLabelByIdRequest::UpdateLocationLabelByIdRequest(const UpdateLocationLabelByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&modifiedbyactorid_, &from.modifiedbyactorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&modifiedbyactorid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
}

void UpdateLocationLabelByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(id_));
}

UpdateLocationLabelByIdRequest::~UpdateLocationLabelByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationLabelByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void UpdateLocationLabelByIdRequest::ArenaDtor(void* object) {
  UpdateLocationLabelByIdRequest* _this = reinterpret_cast< UpdateLocationLabelByIdRequest* >(object);
  (void)_this;
}
void UpdateLocationLabelByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationLabelByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationLabelByIdRequest& UpdateLocationLabelByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationLabelByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&modifiedbyactorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&modifiedbyactorid_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationLabelByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationLabelByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string labels = 2;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_labels(), target);
  }

  // int64 modifiedByActorId = 3;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 4;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modifiedbyactortype(), target);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  return target;
}

size_t UpdateLocationLabelByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string labels = 2;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string modifiedByActorType = 4;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 modifiedByActorId = 3;
  if (this->modifiedbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // int64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationLabelByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationLabelByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationLabelByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
    MergeFrom(*source);
  }
}

void UpdateLocationLabelByIdRequest::MergeFrom(const UpdateLocationLabelByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateLocationLabelByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationLabelByIdRequest::CopyFrom(const UpdateLocationLabelByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationLabelByIdRequest::IsInitialized() const {
  return true;
}

void UpdateLocationLabelByIdRequest::InternalSwap(UpdateLocationLabelByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationLabelByIdRequest, id_)
      + sizeof(UpdateLocationLabelByIdRequest::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationLabelByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationLabelByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationLabelByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateLocationLabelByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateLocationLabelByIdRequest::_Internal::requestheaders(const BulkUpdateLocationLabelByIdRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateLocationLabelByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateLocationLabelByIdRequest::BulkUpdateLocationLabelByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
}
BulkUpdateLocationLabelByIdRequest::BulkUpdateLocationLabelByIdRequest(const BulkUpdateLocationLabelByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
}

void BulkUpdateLocationLabelByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateLocationLabelByIdRequest::~BulkUpdateLocationLabelByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationLabelByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateLocationLabelByIdRequest::ArenaDtor(void* object) {
  BulkUpdateLocationLabelByIdRequest* _this = reinterpret_cast< BulkUpdateLocationLabelByIdRequest* >(object);
  (void)_this;
}
void BulkUpdateLocationLabelByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationLabelByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationLabelByIdRequest& BulkUpdateLocationLabelByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationLabelByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationLabelByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationLabelByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationLabelByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  return target;
}

size_t BulkUpdateLocationLabelByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationLabelByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationLabelByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationLabelByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationLabelByIdRequest::MergeFrom(const BulkUpdateLocationLabelByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateLocationLabelByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationLabelByIdRequest::CopyFrom(const BulkUpdateLocationLabelByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationLabelByIdRequest::IsInitialized() const {
  return true;
}

void BulkUpdateLocationLabelByIdRequest::InternalSwap(BulkUpdateLocationLabelByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationLabelByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationLabelByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateLocationLabelByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateLocationLabelByIdResponse::_Internal::status(const UpdateLocationLabelByIdResponse* msg) {
  return *msg->status_;
}
void UpdateLocationLabelByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateLocationLabelByIdResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateLocationLabelByIdResponse::UpdateLocationLabelByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
}
UpdateLocationLabelByIdResponse::UpdateLocationLabelByIdResponse(const UpdateLocationLabelByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
}

void UpdateLocationLabelByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateLocationLabelByIdResponse::~UpdateLocationLabelByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationLabelByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateLocationLabelByIdResponse::ArenaDtor(void* object) {
  UpdateLocationLabelByIdResponse* _this = reinterpret_cast< UpdateLocationLabelByIdResponse* >(object);
  (void)_this;
}
void UpdateLocationLabelByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationLabelByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationLabelByIdResponse& UpdateLocationLabelByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationLabelByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationLabelByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationLabelByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  return target;
}

size_t UpdateLocationLabelByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationLabelByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationLabelByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationLabelByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
    MergeFrom(*source);
  }
}

void UpdateLocationLabelByIdResponse::MergeFrom(const UpdateLocationLabelByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateLocationLabelByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationLabelByIdResponse::CopyFrom(const UpdateLocationLabelByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationLabelByIdResponse::IsInitialized() const {
  return true;
}

void UpdateLocationLabelByIdResponse::InternalSwap(UpdateLocationLabelByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationLabelByIdResponse, count_)
      + sizeof(UpdateLocationLabelByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationLabelByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationLabelByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationLabelByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateLocationLabelByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateLocationLabelByIdResponse::_Internal::status(const BulkUpdateLocationLabelByIdResponse* msg) {
  return *msg->status_;
}
void BulkUpdateLocationLabelByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateLocationLabelByIdResponse::BulkUpdateLocationLabelByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
}
BulkUpdateLocationLabelByIdResponse::BulkUpdateLocationLabelByIdResponse(const BulkUpdateLocationLabelByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
}

void BulkUpdateLocationLabelByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateLocationLabelByIdResponse::~BulkUpdateLocationLabelByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationLabelByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateLocationLabelByIdResponse::ArenaDtor(void* object) {
  BulkUpdateLocationLabelByIdResponse* _this = reinterpret_cast< BulkUpdateLocationLabelByIdResponse* >(object);
  (void)_this;
}
void BulkUpdateLocationLabelByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationLabelByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationLabelByIdResponse& BulkUpdateLocationLabelByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationLabelByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationLabelByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationLabelByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationLabelByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  return target;
}

size_t BulkUpdateLocationLabelByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationLabelByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationLabelByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationLabelByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationLabelByIdResponse::MergeFrom(const BulkUpdateLocationLabelByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateLocationLabelByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationLabelByIdResponse::CopyFrom(const BulkUpdateLocationLabelByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationLabelByIdResponse::IsInitialized() const {
  return true;
}

void BulkUpdateLocationLabelByIdResponse::InternalSwap(BulkUpdateLocationLabelByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateLocationLabelByIdResponse, count_)
      + sizeof(BulkUpdateLocationLabelByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateLocationLabelByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationLabelByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateDeleteS2CellByLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateDeleteS2CellByLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateDeleteS2CellByLocationRequest::_Internal::requestheaders(const UpdateDeleteS2CellByLocationRequest* msg) {
  return *msg->requestheaders_;
}
void UpdateDeleteS2CellByLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
UpdateDeleteS2CellByLocationRequest::UpdateDeleteS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
}
UpdateDeleteS2CellByLocationRequest::UpdateDeleteS2CellByLocationRequest(const UpdateDeleteS2CellByLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&deletedat_, &from.deletedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
    reinterpret_cast<char*>(&deletedat_)) + sizeof(s2celllevel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
}

void UpdateDeleteS2CellByLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(s2celllevel_));
}

UpdateDeleteS2CellByLocationRequest::~UpdateDeleteS2CellByLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeleteS2CellByLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void UpdateDeleteS2CellByLocationRequest::ArenaDtor(void* object) {
  UpdateDeleteS2CellByLocationRequest* _this = reinterpret_cast< UpdateDeleteS2CellByLocationRequest* >(object);
  (void)_this;
}
void UpdateDeleteS2CellByLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeleteS2CellByLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeleteS2CellByLocationRequest& UpdateDeleteS2CellByLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeleteS2CellByLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&deletedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2celllevel_) -
      reinterpret_cast<char*>(&deletedat_)) + sizeof(s2celllevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeleteS2CellByLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 locationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 s2CellId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s2cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s2CellLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s2celllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeleteS2CellByLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 deletedAt = 2;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deletedat(), target);
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_locationid(), target);
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_s2cellid(), target);
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_s2celllevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  return target;
}

size_t UpdateDeleteS2CellByLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 deletedAt = 2;
  if (this->deletedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int64 locationId = 3;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_locationid());
  }

  // int64 s2CellId = 4;
  if (this->s2cellid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_s2cellid());
  }

  // int32 s2CellLevel = 5;
  if (this->s2celllevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s2celllevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeleteS2CellByLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeleteS2CellByLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeleteS2CellByLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
    MergeFrom(*source);
  }
}

void UpdateDeleteS2CellByLocationRequest::MergeFrom(const UpdateDeleteS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (from.s2cellid() != 0) {
    _internal_set_s2cellid(from._internal_s2cellid());
  }
  if (from.s2celllevel() != 0) {
    _internal_set_s2celllevel(from._internal_s2celllevel());
  }
}

void UpdateDeleteS2CellByLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeleteS2CellByLocationRequest::CopyFrom(const UpdateDeleteS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeleteS2CellByLocationRequest::IsInitialized() const {
  return true;
}

void UpdateDeleteS2CellByLocationRequest::InternalSwap(UpdateDeleteS2CellByLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDeleteS2CellByLocationRequest, s2celllevel_)
      + sizeof(UpdateDeleteS2CellByLocationRequest::s2celllevel_)
      - PROTOBUF_FIELD_OFFSET(UpdateDeleteS2CellByLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeleteS2CellByLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateDeleteS2CellByLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateDeleteS2CellByLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateDeleteS2CellByLocationRequest::_Internal::requestheaders(const BulkUpdateDeleteS2CellByLocationRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateDeleteS2CellByLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateDeleteS2CellByLocationRequest::BulkUpdateDeleteS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
}
BulkUpdateDeleteS2CellByLocationRequest::BulkUpdateDeleteS2CellByLocationRequest(const BulkUpdateDeleteS2CellByLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
}

void BulkUpdateDeleteS2CellByLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateDeleteS2CellByLocationRequest::~BulkUpdateDeleteS2CellByLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateDeleteS2CellByLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateDeleteS2CellByLocationRequest::ArenaDtor(void* object) {
  BulkUpdateDeleteS2CellByLocationRequest* _this = reinterpret_cast< BulkUpdateDeleteS2CellByLocationRequest* >(object);
  (void)_this;
}
void BulkUpdateDeleteS2CellByLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateDeleteS2CellByLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateDeleteS2CellByLocationRequest& BulkUpdateDeleteS2CellByLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateDeleteS2CellByLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateDeleteS2CellByLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateDeleteS2CellByLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateDeleteS2CellByLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  return target;
}

size_t BulkUpdateDeleteS2CellByLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateDeleteS2CellByLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateDeleteS2CellByLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateDeleteS2CellByLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateDeleteS2CellByLocationRequest::MergeFrom(const BulkUpdateDeleteS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateDeleteS2CellByLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateDeleteS2CellByLocationRequest::CopyFrom(const BulkUpdateDeleteS2CellByLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateDeleteS2CellByLocationRequest::IsInitialized() const {
  return true;
}

void BulkUpdateDeleteS2CellByLocationRequest::InternalSwap(BulkUpdateDeleteS2CellByLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateDeleteS2CellByLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateDeleteS2CellByLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateDeleteS2CellByLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateDeleteS2CellByLocationResponse::_Internal::status(const UpdateDeleteS2CellByLocationResponse* msg) {
  return *msg->status_;
}
void UpdateDeleteS2CellByLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateDeleteS2CellByLocationResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateDeleteS2CellByLocationResponse::UpdateDeleteS2CellByLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
}
UpdateDeleteS2CellByLocationResponse::UpdateDeleteS2CellByLocationResponse(const UpdateDeleteS2CellByLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
}

void UpdateDeleteS2CellByLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateDeleteS2CellByLocationResponse::~UpdateDeleteS2CellByLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeleteS2CellByLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateDeleteS2CellByLocationResponse::ArenaDtor(void* object) {
  UpdateDeleteS2CellByLocationResponse* _this = reinterpret_cast< UpdateDeleteS2CellByLocationResponse* >(object);
  (void)_this;
}
void UpdateDeleteS2CellByLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeleteS2CellByLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeleteS2CellByLocationResponse& UpdateDeleteS2CellByLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeleteS2CellByLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeleteS2CellByLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeleteS2CellByLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  return target;
}

size_t UpdateDeleteS2CellByLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeleteS2CellByLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeleteS2CellByLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeleteS2CellByLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
    MergeFrom(*source);
  }
}

void UpdateDeleteS2CellByLocationResponse::MergeFrom(const UpdateDeleteS2CellByLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateDeleteS2CellByLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeleteS2CellByLocationResponse::CopyFrom(const UpdateDeleteS2CellByLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeleteS2CellByLocationResponse::IsInitialized() const {
  return true;
}

void UpdateDeleteS2CellByLocationResponse::InternalSwap(UpdateDeleteS2CellByLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDeleteS2CellByLocationResponse, count_)
      + sizeof(UpdateDeleteS2CellByLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateDeleteS2CellByLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeleteS2CellByLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateDeleteS2CellByLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateDeleteS2CellByLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateDeleteS2CellByLocationResponse::_Internal::status(const BulkUpdateDeleteS2CellByLocationResponse* msg) {
  return *msg->status_;
}
void BulkUpdateDeleteS2CellByLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateDeleteS2CellByLocationResponse::BulkUpdateDeleteS2CellByLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
}
BulkUpdateDeleteS2CellByLocationResponse::BulkUpdateDeleteS2CellByLocationResponse(const BulkUpdateDeleteS2CellByLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
}

void BulkUpdateDeleteS2CellByLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateDeleteS2CellByLocationResponse::~BulkUpdateDeleteS2CellByLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateDeleteS2CellByLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateDeleteS2CellByLocationResponse::ArenaDtor(void* object) {
  BulkUpdateDeleteS2CellByLocationResponse* _this = reinterpret_cast< BulkUpdateDeleteS2CellByLocationResponse* >(object);
  (void)_this;
}
void BulkUpdateDeleteS2CellByLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateDeleteS2CellByLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateDeleteS2CellByLocationResponse& BulkUpdateDeleteS2CellByLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateDeleteS2CellByLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateDeleteS2CellByLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateDeleteS2CellByLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateDeleteS2CellByLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  return target;
}

size_t BulkUpdateDeleteS2CellByLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateDeleteS2CellByLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateDeleteS2CellByLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateDeleteS2CellByLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateDeleteS2CellByLocationResponse::MergeFrom(const BulkUpdateDeleteS2CellByLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateDeleteS2CellByLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateDeleteS2CellByLocationResponse::CopyFrom(const BulkUpdateDeleteS2CellByLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateDeleteS2CellByLocationResponse::IsInitialized() const {
  return true;
}

void BulkUpdateDeleteS2CellByLocationResponse::InternalSwap(BulkUpdateDeleteS2CellByLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateDeleteS2CellByLocationResponse, count_)
      + sizeof(BulkUpdateDeleteS2CellByLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateDeleteS2CellByLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateDeleteS2CellByLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchConfigByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchConfigByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchConfigByIdRequest::_Internal::requestheaders(const FetchConfigByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FetchConfigByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchConfigByIdRequest::FetchConfigByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchConfigByIdRequest)
}
FetchConfigByIdRequest::FetchConfigByIdRequest(const FetchConfigByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchConfigByIdRequest)
}

void FetchConfigByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchConfigByIdRequest::~FetchConfigByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchConfigByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchConfigByIdRequest::ArenaDtor(void* object) {
  FetchConfigByIdRequest* _this = reinterpret_cast< FetchConfigByIdRequest* >(object);
  (void)_this;
}
void FetchConfigByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchConfigByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchConfigByIdRequest& FetchConfigByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchConfigByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchConfigByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchConfigByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchConfigByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  return target;
}

size_t FetchConfigByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchConfigByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchConfigByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchConfigByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchConfigByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchConfigByIdRequest)
    MergeFrom(*source);
  }
}

void FetchConfigByIdRequest::MergeFrom(const FetchConfigByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchConfigByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchConfigByIdRequest::CopyFrom(const FetchConfigByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchConfigByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchConfigByIdRequest::IsInitialized() const {
  return true;
}

void FetchConfigByIdRequest::InternalSwap(FetchConfigByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchConfigByIdRequest, isstaleallowed_)
      + sizeof(FetchConfigByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchConfigByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchConfigByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigRecord::_Internal {
 public:
};

ConfigRecord::ConfigRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.ConfigRecord)
}
ConfigRecord::ConfigRecord(const ConfigRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deletedat_) -
    reinterpret_cast<char*>(&id_)) + sizeof(deletedat_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.ConfigRecord)
}

void ConfigRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&deletedat_) -
      reinterpret_cast<char*>(&id_)) + sizeof(deletedat_));
}

ConfigRecord::~ConfigRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.ConfigRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigRecord::ArenaDtor(void* object) {
  ConfigRecord* _this = reinterpret_cast< ConfigRecord* >(object);
  (void)_this;
}
void ConfigRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigRecord& ConfigRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConfigRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.ConfigRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletedat_) -
      reinterpret_cast<char*>(&id_)) + sizeof(deletedat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.ConfigRecord.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.ConfigRecord.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.ConfigRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.ConfigRecord.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.ConfigRecord.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 createdAt = 4;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 5;
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_updatedat(), target);
  }

  // int64 deletedAt = 6;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_deletedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.ConfigRecord)
  return target;
}

size_t ConfigRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.ConfigRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 createdAt = 4;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 5;
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // int64 deletedAt = 6;
  if (this->deletedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.ConfigRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.ConfigRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.ConfigRecord)
    MergeFrom(*source);
  }
}

void ConfigRecord::MergeFrom(const ConfigRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.ConfigRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
}

void ConfigRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.ConfigRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRecord::CopyFrom(const ConfigRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.ConfigRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRecord::IsInitialized() const {
  return true;
}

void ConfigRecord::InternalSwap(ConfigRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigRecord, deletedat_)
      + sizeof(ConfigRecord::deletedat_)
      - PROTOBUF_FIELD_OFFSET(ConfigRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Config::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const Config* msg);
  static const ::farm::nurture::location::service::proto::ConfigRecord& records(const Config* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
Config::_Internal::status(const Config* msg) {
  return *msg->status_;
}
const ::farm::nurture::location::service::proto::ConfigRecord&
Config::_Internal::records(const Config* msg) {
  return *msg->records_;
}
void Config::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Config::clear_attribs() {
  attribs_.Clear();
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::farm::nurture::location::service::proto::ConfigRecord(*from.records_);
  } else {
    records_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete records_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.ConfigRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // .farm.nurture.location.service.proto.ConfigRecord records = 4;
  if (this->has_records()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .farm.nurture.location.service.proto.ConfigRecord records = 4;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.has_records()) {
    _internal_mutable_records()->::farm::nurture::location::service::proto::ConfigRecord::MergeFrom(from._internal_records());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, count_)
      + sizeof(Config::count_)
      - PROTOBUF_FIELD_OFFSET(Config, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddLocationRequest::_Internal::requestheaders(const AddLocationRequest* msg) {
  return *msg->requestheaders_;
}
void AddLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AddLocationRequest::AddLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.AddLocationRequest)
}
AddLocationRequest::AddLocationRequest(const AddLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  created_by_actor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_by_actor_type().empty()) {
    created_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_by_actor_type(), 
      GetArena());
  }
  geography_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geography_uid().empty()) {
    geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geography_uid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  lat_long_geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lat_long_geohash().empty()) {
    lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lat_long_geohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&center_latitude_, &from.center_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&center_latitude_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.AddLocationRequest)
}

void AddLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_actor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geography_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_long_geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(visibility_));
}

AddLocationRequest::~AddLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.AddLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_actor_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geography_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_long_geohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddLocationRequest::ArenaDtor(void* object) {
  AddLocationRequest* _this = reinterpret_cast< AddLocationRequest* >(object);
  (void)_this;
}
void AddLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLocationRequest& AddLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.AddLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  boundary_.ClearToEmpty();
  namespace__.ClearToEmpty();
  name_.ClearToEmpty();
  code_.ClearToEmpty();
  created_by_actor_type_.ClearToEmpty();
  geography_uid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  lat_long_geohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&center_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&center_latitude_)) + sizeof(visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      // string boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Label labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // double center_latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          center_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double center_longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          center_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created_by_actor_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          created_by_actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_by_actor_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_created_by_actor_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geography_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_geography_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.geography_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lat_long_geohash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_lat_long_geohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.AddLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.location.service.proto.Format format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_boundary(), target);
  }

  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_labels(i), target, stream);
  }

  // double center_latitude = 5;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_center_latitude(), target);
  }

  // double center_longitude = 6;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_center_longitude(), target);
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_area(), target);
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string code = 11;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_code(), target);
  }

  // int64 id = 12;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_id(), target);
  }

  // int64 created_by_actor_id = 13;
  if (this->created_by_actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_created_by_actor_id(), target);
  }

  // string created_by_actor_type = 14;
  if (this->created_by_actor_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by_actor_type().data(), static_cast<int>(this->_internal_created_by_actor_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_created_by_actor_type(), target);
  }

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_visibility(), target);
  }

  // string geography_uid = 16;
  if (this->geography_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geography_uid().data(), static_cast<int>(this->_internal_geography_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.geography_uid");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_geography_uid(), target);
  }

  // string pincode = 17;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pincode(), target);
  }

  // string lat_long_geohash = 18;
  if (this->lat_long_geohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lat_long_geohash().data(), static_cast<int>(this->_internal_lat_long_geohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_lat_long_geohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.AddLocationRequest)
  return target;
}

size_t AddLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.AddLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 11;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string created_by_actor_type = 14;
  if (this->created_by_actor_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by_actor_type());
  }

  // string geography_uid = 16;
  if (this->geography_uid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geography_uid());
  }

  // string pincode = 17;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string lat_long_geohash = 18;
  if (this->lat_long_geohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lat_long_geohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double center_latitude = 5;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.Format format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double center_longitude = 6;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 id = 12;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 created_by_actor_id = 13;
  if (this->created_by_actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_by_actor_id());
  }

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  if (this->visibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.AddLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.AddLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.AddLocationRequest)
    MergeFrom(*source);
  }
}

void AddLocationRequest::MergeFrom(const AddLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.AddLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.created_by_actor_type().size() > 0) {
    _internal_set_created_by_actor_type(from._internal_created_by_actor_type());
  }
  if (from.geography_uid().size() > 0) {
    _internal_set_geography_uid(from._internal_geography_uid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.lat_long_geohash().size() > 0) {
    _internal_set_lat_long_geohash(from._internal_lat_long_geohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.center_latitude() <= 0 && from.center_latitude() >= 0)) {
    _internal_set_center_latitude(from._internal_center_latitude());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.center_longitude() <= 0 && from.center_longitude() >= 0)) {
    _internal_set_center_longitude(from._internal_center_longitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_by_actor_id() != 0) {
    _internal_set_created_by_actor_id(from._internal_created_by_actor_id());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
}

void AddLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.AddLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLocationRequest::CopyFrom(const AddLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.AddLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLocationRequest::IsInitialized() const {
  return true;
}

void AddLocationRequest::InternalSwap(AddLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  created_by_actor_type_.Swap(&other->created_by_actor_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geography_uid_.Swap(&other->geography_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lat_long_geohash_.Swap(&other->lat_long_geohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLocationRequest, visibility_)
      + sizeof(AddLocationRequest::visibility_)
      - PROTOBUF_FIELD_OFFSET(AddLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Label::_Internal {
 public:
};

Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  deletekey_ = from.deletekey_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_LocationService_2flocation_5fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deletekey_ = false;
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.Label)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Label::ArenaDtor(void* object) {
  Label* _this = reinterpret_cast< Label* >(object);
  (void)_this;
}
void Label::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  deletekey_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.Label.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.Label.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deleteKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          deletekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.Label.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.Label.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool deleteKey = 3;
  if (this->deletekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_deletekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.Label)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool deleteKey = 3;
  if (this->deletekey() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.deletekey() != 0) {
    _internal_set_deletekey(from._internal_deletekey());
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(deletekey_, other->deletekey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddLocationRequest::_Internal::requestheaders(const BulkAddLocationRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddLocationRequest::BulkAddLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkAddLocationRequest)
}
BulkAddLocationRequest::BulkAddLocationRequest(const BulkAddLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkAddLocationRequest)
}

void BulkAddLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddLocationRequest::~BulkAddLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkAddLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddLocationRequest::ArenaDtor(void* object) {
  BulkAddLocationRequest* _this = reinterpret_cast< BulkAddLocationRequest* >(object);
  (void)_this;
}
void BulkAddLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddLocationRequest& BulkAddLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.AddLocationRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.AddLocationRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkAddLocationRequest)
  return target;
}

size_t BulkAddLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.AddLocationRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkAddLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkAddLocationRequest)
    MergeFrom(*source);
  }
}

void BulkAddLocationRequest::MergeFrom(const BulkAddLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddLocationRequest::CopyFrom(const BulkAddLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkAddLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddLocationRequest::IsInitialized() const {
  return true;
}

void BulkAddLocationRequest::InternalSwap(BulkAddLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddLocationResponse::_Internal::status(const AddLocationResponse* msg) {
  return *msg->status_;
}
void AddLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddLocationResponse::clear_attribs() {
  attribs_.Clear();
}
AddLocationResponse::AddLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.AddLocationResponse)
}
AddLocationResponse::AddLocationResponse(const AddLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.AddLocationResponse)
}

void AddLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddLocationResponse::~AddLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.AddLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddLocationResponse::ArenaDtor(void* object) {
  AddLocationResponse* _this = reinterpret_cast< AddLocationResponse* >(object);
  (void)_this;
}
void AddLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLocationResponse& AddLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.AddLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddLocationResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.AddLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddLocationResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.AddLocationResponse)
  return target;
}

size_t AddLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.AddLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.AddLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.AddLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.AddLocationResponse)
    MergeFrom(*source);
  }
}

void AddLocationResponse::MergeFrom(const AddLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.AddLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.AddLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLocationResponse::CopyFrom(const AddLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.AddLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLocationResponse::IsInitialized() const {
  return true;
}

void AddLocationResponse::InternalSwap(AddLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLocationResponse, count_)
      + sizeof(AddLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddLocationResponse::_Internal::status(const BulkAddLocationResponse* msg) {
  return *msg->status_;
}
void BulkAddLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddLocationResponse::BulkAddLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkAddLocationResponse)
}
BulkAddLocationResponse::BulkAddLocationResponse(const BulkAddLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkAddLocationResponse)
}

void BulkAddLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddLocationResponse::~BulkAddLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkAddLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddLocationResponse::ArenaDtor(void* object) {
  BulkAddLocationResponse* _this = reinterpret_cast< BulkAddLocationResponse* >(object);
  (void)_this;
}
void BulkAddLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddLocationResponse& BulkAddLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.AddLocationResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.AddLocationResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkAddLocationResponse)
  return target;
}

size_t BulkAddLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.AddLocationResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkAddLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkAddLocationResponse)
    MergeFrom(*source);
  }
}

void BulkAddLocationResponse::MergeFrom(const BulkAddLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddLocationResponse::CopyFrom(const BulkAddLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkAddLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddLocationResponse::IsInitialized() const {
  return true;
}

void BulkAddLocationResponse::InternalSwap(BulkAddLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddLocationResponse, count_)
      + sizeof(BulkAddLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateLocationRequest::_Internal::requestheaders(const UpdateLocationRequest* msg) {
  return *msg->requestheaders_;
}
void UpdateLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
UpdateLocationRequest::UpdateLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationRequest)
}
UpdateLocationRequest::UpdateLocationRequest(const UpdateLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  modified_by_actor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modified_by_actor_type().empty()) {
    modified_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modified_by_actor_type(), 
      GetArena());
  }
  geography_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geography_uid().empty()) {
    geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geography_uid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  lat_long_geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lat_long_geohash().empty()) {
    lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lat_long_geohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&center_latitude_, &from.center_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&center_latitude_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationRequest)
}

void UpdateLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modified_by_actor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geography_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_long_geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(visibility_));
}

UpdateLocationRequest::~UpdateLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modified_by_actor_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geography_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_long_geohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void UpdateLocationRequest::ArenaDtor(void* object) {
  UpdateLocationRequest* _this = reinterpret_cast< UpdateLocationRequest* >(object);
  (void)_this;
}
void UpdateLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationRequest& UpdateLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  boundary_.ClearToEmpty();
  namespace__.ClearToEmpty();
  name_.ClearToEmpty();
  code_.ClearToEmpty();
  modified_by_actor_type_.ClearToEmpty();
  geography_uid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  lat_long_geohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&center_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&center_latitude_)) + sizeof(visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      // string boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Label labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // double center_latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          center_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double center_longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          center_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modified_by_actor_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          modified_by_actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modified_by_actor_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_modified_by_actor_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geography_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_geography_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lat_long_geohash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_lat_long_geohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.location.service.proto.Format format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_boundary(), target);
  }

  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_labels(i), target, stream);
  }

  // double center_latitude = 5;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_center_latitude(), target);
  }

  // double center_longitude = 6;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_center_longitude(), target);
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_area(), target);
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // int64 id = 11;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_id(), target);
  }

  // string code = 12;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.code");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_code(), target);
  }

  // int64 modified_by_actor_id = 13;
  if (this->modified_by_actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_modified_by_actor_id(), target);
  }

  // string modified_by_actor_type = 14;
  if (this->modified_by_actor_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modified_by_actor_type().data(), static_cast<int>(this->_internal_modified_by_actor_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_modified_by_actor_type(), target);
  }

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_visibility(), target);
  }

  // string geography_uid = 16;
  if (this->geography_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geography_uid().data(), static_cast<int>(this->_internal_geography_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_geography_uid(), target);
  }

  // string pincode = 17;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pincode(), target);
  }

  // string lat_long_geohash = 18;
  if (this->lat_long_geohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lat_long_geohash().data(), static_cast<int>(this->_internal_lat_long_geohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_lat_long_geohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationRequest)
  return target;
}

size_t UpdateLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string boundary = 3;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 12;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string modified_by_actor_type = 14;
  if (this->modified_by_actor_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modified_by_actor_type());
  }

  // string geography_uid = 16;
  if (this->geography_uid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geography_uid());
  }

  // string pincode = 17;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string lat_long_geohash = 18;
  if (this->lat_long_geohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lat_long_geohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double center_latitude = 5;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.Format format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double center_longitude = 6;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 7;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 id = 11;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 modified_by_actor_id = 13;
  if (this->modified_by_actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modified_by_actor_id());
  }

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  if (this->visibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationRequest)
    MergeFrom(*source);
  }
}

void UpdateLocationRequest::MergeFrom(const UpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.modified_by_actor_type().size() > 0) {
    _internal_set_modified_by_actor_type(from._internal_modified_by_actor_type());
  }
  if (from.geography_uid().size() > 0) {
    _internal_set_geography_uid(from._internal_geography_uid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.lat_long_geohash().size() > 0) {
    _internal_set_lat_long_geohash(from._internal_lat_long_geohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.center_latitude() <= 0 && from.center_latitude() >= 0)) {
    _internal_set_center_latitude(from._internal_center_latitude());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.center_longitude() <= 0 && from.center_longitude() >= 0)) {
    _internal_set_center_longitude(from._internal_center_longitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.modified_by_actor_id() != 0) {
    _internal_set_modified_by_actor_id(from._internal_modified_by_actor_id());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
}

void UpdateLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationRequest::CopyFrom(const UpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationRequest::IsInitialized() const {
  return true;
}

void UpdateLocationRequest::InternalSwap(UpdateLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modified_by_actor_type_.Swap(&other->modified_by_actor_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geography_uid_.Swap(&other->geography_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lat_long_geohash_.Swap(&other->lat_long_geohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationRequest, visibility_)
      + sizeof(UpdateLocationRequest::visibility_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateLocationRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateLocationRequest::_Internal::requestheaders(const BulkUpdateLocationRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateLocationRequest::BulkUpdateLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
}
BulkUpdateLocationRequest::BulkUpdateLocationRequest(const BulkUpdateLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
}

void BulkUpdateLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateLocationRequest::~BulkUpdateLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateLocationRequest::ArenaDtor(void* object) {
  BulkUpdateLocationRequest* _this = reinterpret_cast< BulkUpdateLocationRequest* >(object);
  (void)_this;
}
void BulkUpdateLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationRequest& BulkUpdateLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  return target;
}

size_t BulkUpdateLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationRequest::MergeFrom(const BulkUpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationRequest::CopyFrom(const BulkUpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationRequest::IsInitialized() const {
  return true;
}

void BulkUpdateLocationRequest::InternalSwap(BulkUpdateLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateLocationResponse::_Internal::status(const UpdateLocationResponse* msg) {
  return *msg->status_;
}
void UpdateLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateLocationResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateLocationResponse::UpdateLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationResponse)
}
UpdateLocationResponse::UpdateLocationResponse(const UpdateLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationResponse)
}

void UpdateLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateLocationResponse::~UpdateLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateLocationResponse::ArenaDtor(void* object) {
  UpdateLocationResponse* _this = reinterpret_cast< UpdateLocationResponse* >(object);
  (void)_this;
}
void UpdateLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationResponse& UpdateLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationResponse)
  return target;
}

size_t UpdateLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationResponse)
    MergeFrom(*source);
  }
}

void UpdateLocationResponse::MergeFrom(const UpdateLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationResponse::CopyFrom(const UpdateLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationResponse::IsInitialized() const {
  return true;
}

void UpdateLocationResponse::InternalSwap(UpdateLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationResponse, count_)
      + sizeof(UpdateLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateLocationResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateLocationResponse::_Internal::status(const BulkUpdateLocationResponse* msg) {
  return *msg->status_;
}
void BulkUpdateLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateLocationResponse::BulkUpdateLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
}
BulkUpdateLocationResponse::BulkUpdateLocationResponse(const BulkUpdateLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
}

void BulkUpdateLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateLocationResponse::~BulkUpdateLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateLocationResponse::ArenaDtor(void* object) {
  BulkUpdateLocationResponse* _this = reinterpret_cast< BulkUpdateLocationResponse* >(object);
  (void)_this;
}
void BulkUpdateLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationResponse& BulkUpdateLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  return target;
}

size_t BulkUpdateLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationResponse::MergeFrom(const BulkUpdateLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationResponse::CopyFrom(const BulkUpdateLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationResponse::IsInitialized() const {
  return true;
}

void BulkUpdateLocationResponse::InternalSwap(BulkUpdateLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateLocationResponse, count_)
      + sizeof(BulkUpdateLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsWithBoundaryRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetLocationsWithBoundaryRequest* msg);
  static const ::farm::nurture::location::service::proto::LabelGroup& labels(const GetLocationsWithBoundaryRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetLocationsWithBoundaryRequest::_Internal::requestheaders(const GetLocationsWithBoundaryRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::location::service::proto::LabelGroup&
GetLocationsWithBoundaryRequest::_Internal::labels(const GetLocationsWithBoundaryRequest* msg) {
  return *msg->labels_;
}
void GetLocationsWithBoundaryRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetLocationsWithBoundaryRequest::GetLocationsWithBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
}
GetLocationsWithBoundaryRequest::GetLocationsWithBoundaryRequest(const GetLocationsWithBoundaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_labels()) {
    labels_ = new ::farm::nurture::location::service::proto::LabelGroup(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  ::memcpy(&isstaleallowed_, &from.isstaleallowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&polygonformat_) -
    reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(polygonformat_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
}

void GetLocationsWithBoundaryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&polygonformat_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(polygonformat_));
}

GetLocationsWithBoundaryRequest::~GetLocationsWithBoundaryRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsWithBoundaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete labels_;
}

void GetLocationsWithBoundaryRequest::ArenaDtor(void* object) {
  GetLocationsWithBoundaryRequest* _this = reinterpret_cast< GetLocationsWithBoundaryRequest* >(object);
  (void)_this;
}
void GetLocationsWithBoundaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsWithBoundaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsWithBoundaryRequest& GetLocationsWithBoundaryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsWithBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsWithBoundaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  boundary_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  ::memset(&isstaleallowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygonformat_) -
      reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(polygonformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsWithBoundaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.LabelGroup labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      // int64 pageSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pageNumber = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pagenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boundary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format polygonFormat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_polygonformat(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsWithBoundaryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // .farm.nurture.location.service.proto.Format format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  // .farm.nurture.location.service.proto.LabelGroup labels = 4;
  if (this->has_labels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::labels(this), target, stream);
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // double longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude(), target);
  }

  // double radius = 7;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_radius(), target);
  }

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // int64 pageSize = 10;
  if (this->pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_pagesize(), target);
  }

  // int64 pageNumber = 11;
  if (this->pagenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_pagenumber(), target);
  }

  // string boundary = 12;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_boundary(), target);
  }

  // .farm.nurture.location.service.proto.Format polygonFormat = 13;
  if (this->polygonformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_polygonformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  return target;
}

size_t GetLocationsWithBoundaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 8;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string boundary = 12;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.location.service.proto.LabelGroup labels = 4;
  if (this->has_labels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.location.service.proto.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 7;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 pageSize = 10;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagesize());
  }

  // int64 pageNumber = 11;
  if (this->pagenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagenumber());
  }

  // .farm.nurture.location.service.proto.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.location.service.proto.Format polygonFormat = 13;
  if (this->polygonformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_polygonformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsWithBoundaryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsWithBoundaryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsWithBoundaryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
    MergeFrom(*source);
  }
}

void GetLocationsWithBoundaryRequest::MergeFrom(const GetLocationsWithBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_labels()) {
    _internal_mutable_labels()->::farm::nurture::location::service::proto::LabelGroup::MergeFrom(from._internal_labels());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from.pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
  if (from.pagenumber() != 0) {
    _internal_set_pagenumber(from._internal_pagenumber());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.polygonformat() != 0) {
    _internal_set_polygonformat(from._internal_polygonformat());
  }
}

void GetLocationsWithBoundaryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsWithBoundaryRequest::CopyFrom(const GetLocationsWithBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsWithBoundaryRequest::IsInitialized() const {
  return true;
}

void GetLocationsWithBoundaryRequest::InternalSwap(GetLocationsWithBoundaryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationsWithBoundaryRequest, polygonformat_)
      + sizeof(GetLocationsWithBoundaryRequest::polygonformat_)
      - PROTOBUF_FIELD_OFFSET(GetLocationsWithBoundaryRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsWithBoundaryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabelGroup::_Internal {
 public:
};

LabelGroup::LabelGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labelopp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LabelGroup)
}
LabelGroup::LabelGroup(const LabelGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labelopp_(from.labelopp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LabelGroup)
}

void LabelGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto.base);
}

LabelGroup::~LabelGroup() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LabelGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelGroup::ArenaDtor(void* object) {
  LabelGroup* _this = reinterpret_cast< LabelGroup* >(object);
  (void)_this;
}
void LabelGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelGroup& LabelGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelGroup_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LabelGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LabelGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labelopp_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .farm.nurture.location.service.proto.LabelOPP labelOpp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labelopp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LabelGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.LabelOPP labelOpp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labelopp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labelopp(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LabelGroup)
  return target;
}

size_t LabelGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LabelGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.LabelOPP labelOpp = 1;
  total_size += 1UL * this->_internal_labelopp_size();
  for (const auto& msg : this->labelopp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LabelGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LabelGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LabelGroup)
    MergeFrom(*source);
  }
}

void LabelGroup::MergeFrom(const LabelGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LabelGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labelopp_.MergeFrom(from.labelopp_);
}

void LabelGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LabelGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelGroup::CopyFrom(const LabelGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LabelGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelGroup::IsInitialized() const {
  return true;
}

void LabelGroup::InternalSwap(LabelGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labelopp_.InternalSwap(&other->labelopp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabelOPP::_Internal {
 public:
};

LabelOPP::LabelOPP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LabelOPP)
}
LabelOPP::LabelOPP(const LabelOPP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_(from.label_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LabelOPP)
}

void LabelOPP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto.base);
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LabelOPP::~LabelOPP() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LabelOPP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelOPP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelOPP::ArenaDtor(void* object) {
  LabelOPP* _this = reinterpret_cast< LabelOPP* >(object);
  (void)_this;
}
void LabelOPP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelOPP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelOPP& LabelOPP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelOPP_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LabelOPP::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LabelOPP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  operator__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelOPP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LabelOPP.operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Label label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelOPP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LabelOPP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operator = 1;
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LabelOPP.operator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operator_(), target);
  }

  // repeated .farm.nurture.location.service.proto.Label label = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_label(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LabelOPP)
  return target;
}

size_t LabelOPP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LabelOPP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Label label = 2;
  total_size += 1UL * this->_internal_label_size();
  for (const auto& msg : this->label_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operator = 1;
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelOPP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LabelOPP)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelOPP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelOPP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LabelOPP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LabelOPP)
    MergeFrom(*source);
  }
}

void LabelOPP::MergeFrom(const LabelOPP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LabelOPP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  if (from.operator_().size() > 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void LabelOPP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LabelOPP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelOPP::CopyFrom(const LabelOPP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LabelOPP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelOPP::IsInitialized() const {
  return true;
}

void LabelOPP::InternalSwap(LabelOPP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.InternalSwap(&other->label_);
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelOPP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsWithBoundaryResponseRecord::_Internal {
 public:
};

GetLocationsWithBoundaryResponseRecord::GetLocationsWithBoundaryResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
}
GetLocationsWithBoundaryResponseRecord::GetLocationsWithBoundaryResponseRecord(const GetLocationsWithBoundaryResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
}

void GetLocationsWithBoundaryResponseRecord::SharedCtor() {
}

GetLocationsWithBoundaryResponseRecord::~GetLocationsWithBoundaryResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsWithBoundaryResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLocationsWithBoundaryResponseRecord::ArenaDtor(void* object) {
  GetLocationsWithBoundaryResponseRecord* _this = reinterpret_cast< GetLocationsWithBoundaryResponseRecord* >(object);
  (void)_this;
}
void GetLocationsWithBoundaryResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsWithBoundaryResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsWithBoundaryResponseRecord& GetLocationsWithBoundaryResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsWithBoundaryResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsWithBoundaryResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsWithBoundaryResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsWithBoundaryResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  return target;
}

size_t GetLocationsWithBoundaryResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsWithBoundaryResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsWithBoundaryResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsWithBoundaryResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
    MergeFrom(*source);
  }
}

void GetLocationsWithBoundaryResponseRecord::MergeFrom(const GetLocationsWithBoundaryResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLocationsWithBoundaryResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsWithBoundaryResponseRecord::CopyFrom(const GetLocationsWithBoundaryResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsWithBoundaryResponseRecord::IsInitialized() const {
  return true;
}

void GetLocationsWithBoundaryResponseRecord::InternalSwap(GetLocationsWithBoundaryResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsWithBoundaryResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsWithBoundaryResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetLocationsWithBoundaryResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetLocationsWithBoundaryResponse::_Internal::status(const GetLocationsWithBoundaryResponse* msg) {
  return *msg->status_;
}
void GetLocationsWithBoundaryResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetLocationsWithBoundaryResponse::clear_attribs() {
  attribs_.Clear();
}
GetLocationsWithBoundaryResponse::GetLocationsWithBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  locationwithboundary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
}
GetLocationsWithBoundaryResponse::GetLocationsWithBoundaryResponse(const GetLocationsWithBoundaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      locationwithboundary_(from.locationwithboundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
}

void GetLocationsWithBoundaryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetLocationsWithBoundaryResponse::~GetLocationsWithBoundaryResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsWithBoundaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetLocationsWithBoundaryResponse::ArenaDtor(void* object) {
  GetLocationsWithBoundaryResponse* _this = reinterpret_cast< GetLocationsWithBoundaryResponse* >(object);
  (void)_this;
}
void GetLocationsWithBoundaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsWithBoundaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsWithBoundaryResponse& GetLocationsWithBoundaryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsWithBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsWithBoundaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  locationwithboundary_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsWithBoundaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locationwithboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsWithBoundaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locationwithboundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_locationwithboundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  return target;
}

size_t GetLocationsWithBoundaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  total_size += 1UL * this->_internal_locationwithboundary_size();
  for (const auto& msg : this->locationwithboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsWithBoundaryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsWithBoundaryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsWithBoundaryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
    MergeFrom(*source);
  }
}

void GetLocationsWithBoundaryResponse::MergeFrom(const GetLocationsWithBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  locationwithboundary_.MergeFrom(from.locationwithboundary_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetLocationsWithBoundaryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsWithBoundaryResponse::CopyFrom(const GetLocationsWithBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsWithBoundaryResponse::IsInitialized() const {
  return true;
}

void GetLocationsWithBoundaryResponse::InternalSwap(GetLocationsWithBoundaryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  locationwithboundary_.InternalSwap(&other->locationwithboundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationsWithBoundaryResponse, count_)
      + sizeof(GetLocationsWithBoundaryResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetLocationsWithBoundaryResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsWithBoundaryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationWithBoundary::_Internal {
 public:
};

LocationWithBoundary::LocationWithBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LocationWithBoundary)
}
LocationWithBoundary::LocationWithBoundary(const LocationWithBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&id_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LocationWithBoundary)
}

void LocationWithBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&id_)) + sizeof(area_));
}

LocationWithBoundary::~LocationWithBoundary() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LocationWithBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationWithBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationWithBoundary::ArenaDtor(void* object) {
  LocationWithBoundary* _this = reinterpret_cast< LocationWithBoundary* >(object);
  (void)_this;
}
void LocationWithBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationWithBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationWithBoundary& LocationWithBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationWithBoundary_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocationWithBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LocationWithBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty();
  boundary_.ClearToEmpty();
  namespace__.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&id_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationWithBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationWithBoundary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      // string boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationWithBoundary.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Label labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // double center_latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          center_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double center_longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          center_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationWithBoundary.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status locationStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locationstatus(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationWithBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LocationWithBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationWithBoundary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .farm.nurture.location.service.proto.Format format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  // string boundary = 4;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationWithBoundary.boundary");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boundary(), target);
  }

  // repeated .farm.nurture.location.service.proto.Label labels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_labels(i), target, stream);
  }

  // double center_latitude = 6;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_center_latitude(), target);
  }

  // double center_longitude = 7;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_center_longitude(), target);
  }

  // double area = 8;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_area(), target);
  }

  // string namespace = 9;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationWithBoundary.namespace");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status locationStatus = 10;
  if (this->locationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_locationstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LocationWithBoundary)
  return target;
}

size_t LocationWithBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LocationWithBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Label labels = 5;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string boundary = 4;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // string namespace = 9;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // double center_latitude = 6;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // .farm.nurture.location.service.proto.Status locationStatus = 10;
  if (this->locationstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locationstatus());
  }

  // double center_longitude = 7;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 8;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationWithBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LocationWithBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationWithBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationWithBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LocationWithBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LocationWithBoundary)
    MergeFrom(*source);
  }
}

void LocationWithBoundary::MergeFrom(const LocationWithBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LocationWithBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.center_latitude() <= 0 && from.center_latitude() >= 0)) {
    _internal_set_center_latitude(from._internal_center_latitude());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.locationstatus() != 0) {
    _internal_set_locationstatus(from._internal_locationstatus());
  }
  if (!(from.center_longitude() <= 0 && from.center_longitude() >= 0)) {
    _internal_set_center_longitude(from._internal_center_longitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
}

void LocationWithBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LocationWithBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationWithBoundary::CopyFrom(const LocationWithBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LocationWithBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationWithBoundary::IsInitialized() const {
  return true;
}

void LocationWithBoundary::InternalSwap(LocationWithBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationWithBoundary, area_)
      + sizeof(LocationWithBoundary::area_)
      - PROTOBUF_FIELD_OFFSET(LocationWithBoundary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationWithBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetLocationsRequest* msg);
  static const ::farm::nurture::location::service::proto::LabelGroup& labels(const GetLocationsRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetLocationsRequest::_Internal::requestheaders(const GetLocationsRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::location::service::proto::LabelGroup&
GetLocationsRequest::_Internal::labels(const GetLocationsRequest* msg) {
  return *msg->labels_;
}
void GetLocationsRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetLocationsRequest::GetLocationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsRequest)
}
GetLocationsRequest::GetLocationsRequest(const GetLocationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boundary().empty()) {
    boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boundary(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_labels()) {
    labels_ = new ::farm::nurture::location::service::proto::LabelGroup(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&polygonformat_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(polygonformat_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsRequest)
}

void GetLocationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&polygonformat_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(polygonformat_));
}

GetLocationsRequest::~GetLocationsRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete labels_;
}

void GetLocationsRequest::ArenaDtor(void* object) {
  GetLocationsRequest* _this = reinterpret_cast< GetLocationsRequest* >(object);
  (void)_this;
}
void GetLocationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsRequest& GetLocationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  boundary_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygonformat_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(polygonformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.LabelGroup labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationsRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      // int64 pageSize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pageNumber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pagenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boundary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationsRequest.boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format polygonFormat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_polygonformat(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // .farm.nurture.location.service.proto.LabelGroup labels = 3;
  if (this->has_labels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::labels(this), target, stream);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // double radius = 6;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_radius(), target);
  }

  // string namespace = 7;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationsRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status status = 8;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // int64 pageSize = 9;
  if (this->pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_pagesize(), target);
  }

  // int64 pageNumber = 10;
  if (this->pagenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_pagenumber(), target);
  }

  // string boundary = 11;
  if (this->boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boundary().data(), static_cast<int>(this->_internal_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationsRequest.boundary");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_boundary(), target);
  }

  // .farm.nurture.location.service.proto.Format polygonFormat = 12;
  if (this->polygonformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_polygonformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsRequest)
  return target;
}

size_t GetLocationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 7;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string boundary = 11;
  if (this->boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boundary());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.location.service.proto.LabelGroup labels = 3;
  if (this->has_labels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.location.service.proto.Status status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double radius = 6;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 pageSize = 9;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagesize());
  }

  // int64 pageNumber = 10;
  if (this->pagenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagenumber());
  }

  // .farm.nurture.location.service.proto.Format polygonFormat = 12;
  if (this->polygonformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_polygonformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsRequest)
    MergeFrom(*source);
  }
}

void GetLocationsRequest::MergeFrom(const GetLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.boundary().size() > 0) {
    _internal_set_boundary(from._internal_boundary());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_labels()) {
    _internal_mutable_labels()->::farm::nurture::location::service::proto::LabelGroup::MergeFrom(from._internal_labels());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from.pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
  if (from.pagenumber() != 0) {
    _internal_set_pagenumber(from._internal_pagenumber());
  }
  if (from.polygonformat() != 0) {
    _internal_set_polygonformat(from._internal_polygonformat());
  }
}

void GetLocationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsRequest::CopyFrom(const GetLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsRequest::IsInitialized() const {
  return true;
}

void GetLocationsRequest::InternalSwap(GetLocationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boundary_.Swap(&other->boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationsRequest, polygonformat_)
      + sizeof(GetLocationsRequest::polygonformat_)
      - PROTOBUF_FIELD_OFFSET(GetLocationsRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsResponseRecord::_Internal {
 public:
};

GetLocationsResponseRecord::GetLocationsResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsResponseRecord)
}
GetLocationsResponseRecord::GetLocationsResponseRecord(const GetLocationsResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsResponseRecord)
}

void GetLocationsResponseRecord::SharedCtor() {
}

GetLocationsResponseRecord::~GetLocationsResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLocationsResponseRecord::ArenaDtor(void* object) {
  GetLocationsResponseRecord* _this = reinterpret_cast< GetLocationsResponseRecord* >(object);
  (void)_this;
}
void GetLocationsResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsResponseRecord& GetLocationsResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  return target;
}

size_t GetLocationsResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsResponseRecord)
    MergeFrom(*source);
  }
}

void GetLocationsResponseRecord::MergeFrom(const GetLocationsResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLocationsResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsResponseRecord::CopyFrom(const GetLocationsResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsResponseRecord::IsInitialized() const {
  return true;
}

void GetLocationsResponseRecord::InternalSwap(GetLocationsResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationsResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetLocationsResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetLocationsResponse::_Internal::status(const GetLocationsResponse* msg) {
  return *msg->status_;
}
void GetLocationsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetLocationsResponse::clear_attribs() {
  attribs_.Clear();
}
GetLocationsResponse::GetLocationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  locationwithoutboundary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationsResponse)
}
GetLocationsResponse::GetLocationsResponse(const GetLocationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      locationwithoutboundary_(from.locationwithoutboundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationsResponse)
}

void GetLocationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetLocationsResponse::~GetLocationsResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetLocationsResponse::ArenaDtor(void* object) {
  GetLocationsResponse* _this = reinterpret_cast< GetLocationsResponse* >(object);
  (void)_this;
}
void GetLocationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationsResponse& GetLocationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationsResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  locationwithoutboundary_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.LocationWithoutBoundary locationWithoutBoundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locationwithoutboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithoutBoundary locationWithoutBoundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locationwithoutboundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_locationwithoutboundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationsResponse)
  return target;
}

size_t GetLocationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithoutBoundary locationWithoutBoundary = 4;
  total_size += 1UL * this->_internal_locationwithoutboundary_size();
  for (const auto& msg : this->locationwithoutboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationsResponse)
    MergeFrom(*source);
  }
}

void GetLocationsResponse::MergeFrom(const GetLocationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  locationwithoutboundary_.MergeFrom(from.locationwithoutboundary_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetLocationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationsResponse::CopyFrom(const GetLocationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationsResponse::IsInitialized() const {
  return true;
}

void GetLocationsResponse::InternalSwap(GetLocationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  locationwithoutboundary_.InternalSwap(&other->locationwithoutboundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationsResponse, count_)
      + sizeof(GetLocationsResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetLocationsResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationWithoutBoundary::_Internal {
 public:
};

LocationWithoutBoundary::LocationWithoutBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.LocationWithoutBoundary)
}
LocationWithoutBoundary::LocationWithoutBoundary(const LocationWithoutBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&locationstatus_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locationstatus_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.LocationWithoutBoundary)
}

void LocationWithoutBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&locationstatus_) -
      reinterpret_cast<char*>(&id_)) + sizeof(locationstatus_));
}

LocationWithoutBoundary::~LocationWithoutBoundary() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.LocationWithoutBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationWithoutBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationWithoutBoundary::ArenaDtor(void* object) {
  LocationWithoutBoundary* _this = reinterpret_cast< LocationWithoutBoundary* >(object);
  (void)_this;
}
void LocationWithoutBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationWithoutBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationWithoutBoundary& LocationWithoutBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationWithoutBoundary_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocationWithoutBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locationstatus_) -
      reinterpret_cast<char*>(&id_)) + sizeof(locationstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationWithoutBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationWithoutBoundary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Label labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // double center_latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          center_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double center_longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          center_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string namespace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.LocationWithoutBoundary.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Status locationStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locationstatus(static_cast<::farm::nurture::location::service::proto::Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationWithoutBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationWithoutBoundary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .farm.nurture.location.service.proto.Label labels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_labels(i), target, stream);
  }

  // double center_latitude = 4;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_center_latitude(), target);
  }

  // double center_longitude = 5;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_center_longitude(), target);
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_area(), target);
  }

  // string namespace = 7;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.LocationWithoutBoundary.namespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_namespace_(), target);
  }

  // .farm.nurture.location.service.proto.Status locationStatus = 8;
  if (this->locationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_locationstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.LocationWithoutBoundary)
  return target;
}

size_t LocationWithoutBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Label labels = 3;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 7;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // double center_latitude = 4;
  if (!(this->center_latitude() <= 0 && this->center_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double center_longitude = 5;
  if (!(this->center_longitude() <= 0 && this->center_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double area = 6;
  if (!(this->area() <= 0 && this->area() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.location.service.proto.Status locationStatus = 8;
  if (this->locationstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locationstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationWithoutBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationWithoutBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationWithoutBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.LocationWithoutBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.LocationWithoutBoundary)
    MergeFrom(*source);
  }
}

void LocationWithoutBoundary::MergeFrom(const LocationWithoutBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.center_latitude() <= 0 && from.center_latitude() >= 0)) {
    _internal_set_center_latitude(from._internal_center_latitude());
  }
  if (!(from.center_longitude() <= 0 && from.center_longitude() >= 0)) {
    _internal_set_center_longitude(from._internal_center_longitude());
  }
  if (!(from.area() <= 0 && from.area() >= 0)) {
    _internal_set_area(from._internal_area());
  }
  if (from.locationstatus() != 0) {
    _internal_set_locationstatus(from._internal_locationstatus());
  }
}

void LocationWithoutBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationWithoutBoundary::CopyFrom(const LocationWithoutBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.LocationWithoutBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationWithoutBoundary::IsInitialized() const {
  return true;
}

void LocationWithoutBoundary::InternalSwap(LocationWithoutBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationWithoutBoundary, locationstatus_)
      + sizeof(LocationWithoutBoundary::locationstatus_)
      - PROTOBUF_FIELD_OFFSET(LocationWithoutBoundary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationWithoutBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeographyDataType::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GeographyDataType* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GeographyDataType::_Internal::requestheaders(const GeographyDataType* msg) {
  return *msg->requestheaders_;
}
void GeographyDataType::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GeographyDataType::GeographyDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GeographyDataType)
}
GeographyDataType::GeographyDataType(const GeographyDataType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&geotype_, &from.geotype_,
    static_cast<size_t>(reinterpret_cast<char*>(&labelkey_) -
    reinterpret_cast<char*>(&geotype_)) + sizeof(labelkey_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GeographyDataType)
}

void GeographyDataType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&labelkey_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(labelkey_));
}

GeographyDataType::~GeographyDataType() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GeographyDataType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeographyDataType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GeographyDataType::ArenaDtor(void* object) {
  GeographyDataType* _this = reinterpret_cast< GeographyDataType* >(object);
  (void)_this;
}
void GeographyDataType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeographyDataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeographyDataType& GeographyDataType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeographyDataType_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GeographyDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GeographyDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&geotype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&labelkey_) -
      reinterpret_cast<char*>(&geotype_)) + sizeof(labelkey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeographyDataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GeographyType geoType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geotype(static_cast<::farm::nurture::location::service::proto::GeographyType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.LabelKey labelKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_labelkey(static_cast<::farm::nurture::location::service::proto::LabelKey>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeographyDataType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GeographyDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GeographyType geoType = 2;
  if (this->geotype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_geotype(), target);
  }

  // .farm.nurture.location.service.proto.LabelKey labelKey = 3;
  if (this->labelkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_labelkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GeographyDataType)
  return target;
}

size_t GeographyDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GeographyDataType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.location.service.proto.GeographyType geoType = 2;
  if (this->geotype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geotype());
  }

  // .farm.nurture.location.service.proto.LabelKey labelKey = 3;
  if (this->labelkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_labelkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyDataType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GeographyDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyDataType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeographyDataType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GeographyDataType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GeographyDataType)
    MergeFrom(*source);
  }
}

void GeographyDataType::MergeFrom(const GeographyDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GeographyDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.geotype() != 0) {
    _internal_set_geotype(from._internal_geotype());
  }
  if (from.labelkey() != 0) {
    _internal_set_labelkey(from._internal_labelkey());
  }
}

void GeographyDataType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GeographyDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyDataType::CopyFrom(const GeographyDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GeographyDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyDataType::IsInitialized() const {
  return true;
}

void GeographyDataType::InternalSwap(GeographyDataType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeographyDataType, labelkey_)
      + sizeof(GeographyDataType::labelkey_)
      - PROTOBUF_FIELD_OFFSET(GeographyDataType, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeographyDataType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkGeographyDataType::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkGeographyDataType* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkGeographyDataType::_Internal::requestheaders(const BulkGeographyDataType* msg) {
  return *msg->requestheaders_;
}
void BulkGeographyDataType::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkGeographyDataType::BulkGeographyDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkGeographyDataType)
}
BulkGeographyDataType::BulkGeographyDataType(const BulkGeographyDataType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkGeographyDataType)
}

void BulkGeographyDataType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkGeographyDataType::~BulkGeographyDataType() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkGeographyDataType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkGeographyDataType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkGeographyDataType::ArenaDtor(void* object) {
  BulkGeographyDataType* _this = reinterpret_cast< BulkGeographyDataType* >(object);
  (void)_this;
}
void BulkGeographyDataType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkGeographyDataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkGeographyDataType& BulkGeographyDataType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkGeographyDataType_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkGeographyDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkGeographyDataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.GeographyDataType requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkGeographyDataType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.GeographyDataType requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkGeographyDataType)
  return target;
}

size_t BulkGeographyDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.GeographyDataType requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkGeographyDataType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkGeographyDataType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkGeographyDataType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkGeographyDataType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkGeographyDataType)
    MergeFrom(*source);
  }
}

void BulkGeographyDataType::MergeFrom(const BulkGeographyDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkGeographyDataType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkGeographyDataType::CopyFrom(const BulkGeographyDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkGeographyDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkGeographyDataType::IsInitialized() const {
  return true;
}

void BulkGeographyDataType::InternalSwap(BulkGeographyDataType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkGeographyDataType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeographyTypeMessageResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GeographyTypeMessageResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GeographyTypeMessageResponse::_Internal::status(const GeographyTypeMessageResponse* msg) {
  return *msg->status_;
}
void GeographyTypeMessageResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GeographyTypeMessageResponse::clear_attribs() {
  attribs_.Clear();
}
GeographyTypeMessageResponse::GeographyTypeMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
}
GeographyTypeMessageResponse::GeographyTypeMessageResponse(const GeographyTypeMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
}

void GeographyTypeMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GeographyTypeMessageResponse::~GeographyTypeMessageResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeographyTypeMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GeographyTypeMessageResponse::ArenaDtor(void* object) {
  GeographyTypeMessageResponse* _this = reinterpret_cast< GeographyTypeMessageResponse* >(object);
  (void)_this;
}
void GeographyTypeMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeographyTypeMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeographyTypeMessageResponse& GeographyTypeMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GeographyTypeMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeographyTypeMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeographyTypeMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  return target;
}

size_t GeographyTypeMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyTypeMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyTypeMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeographyTypeMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
    MergeFrom(*source);
  }
}

void GeographyTypeMessageResponse::MergeFrom(const GeographyTypeMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GeographyTypeMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyTypeMessageResponse::CopyFrom(const GeographyTypeMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyTypeMessageResponse::IsInitialized() const {
  return true;
}

void GeographyTypeMessageResponse::InternalSwap(GeographyTypeMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeographyTypeMessageResponse, count_)
      + sizeof(GeographyTypeMessageResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GeographyTypeMessageResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeographyTypeMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkGeographyTypeMessageResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkGeographyTypeMessageResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkGeographyTypeMessageResponse::_Internal::status(const BulkGeographyTypeMessageResponse* msg) {
  return *msg->status_;
}
void BulkGeographyTypeMessageResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkGeographyTypeMessageResponse::BulkGeographyTypeMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
}
BulkGeographyTypeMessageResponse::BulkGeographyTypeMessageResponse(const BulkGeographyTypeMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
}

void BulkGeographyTypeMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkGeographyTypeMessageResponse::~BulkGeographyTypeMessageResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkGeographyTypeMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkGeographyTypeMessageResponse::ArenaDtor(void* object) {
  BulkGeographyTypeMessageResponse* _this = reinterpret_cast< BulkGeographyTypeMessageResponse* >(object);
  (void)_this;
}
void BulkGeographyTypeMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkGeographyTypeMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkGeographyTypeMessageResponse& BulkGeographyTypeMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkGeographyTypeMessageResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkGeographyTypeMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkGeographyTypeMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.GeographyTypeMessageResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkGeographyTypeMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.GeographyTypeMessageResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  return target;
}

size_t BulkGeographyTypeMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.GeographyTypeMessageResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkGeographyTypeMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkGeographyTypeMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkGeographyTypeMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
    MergeFrom(*source);
  }
}

void BulkGeographyTypeMessageResponse::MergeFrom(const BulkGeographyTypeMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkGeographyTypeMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkGeographyTypeMessageResponse::CopyFrom(const BulkGeographyTypeMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkGeographyTypeMessageResponse::IsInitialized() const {
  return true;
}

void BulkGeographyTypeMessageResponse::InternalSwap(BulkGeographyTypeMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkGeographyTypeMessageResponse, count_)
      + sizeof(BulkGeographyTypeMessageResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkGeographyTypeMessageResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkGeographyTypeMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetChildGeographiesRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetChildGeographiesRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetChildGeographiesRequest::_Internal::requestheaders(const GetChildGeographiesRequest* msg) {
  return *msg->requestheaders_;
}
void GetChildGeographiesRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetChildGeographiesRequest::GetChildGeographiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetChildGeographiesRequest)
}
GetChildGeographiesRequest::GetChildGeographiesRequest(const GetChildGeographiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagenumber_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pagenumber_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetChildGeographiesRequest)
}

void GetChildGeographiesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pagenumber_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(pagenumber_));
}

GetChildGeographiesRequest::~GetChildGeographiesRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChildGeographiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetChildGeographiesRequest::ArenaDtor(void* object) {
  GetChildGeographiesRequest* _this = reinterpret_cast< GetChildGeographiesRequest* >(object);
  (void)_this;
}
void GetChildGeographiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildGeographiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildGeographiesRequest& GetChildGeographiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetChildGeographiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagenumber_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pagenumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChildGeographiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetChildGeographiesRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Format format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::farm::nurture::location::service::proto::Format>(val));
        } else goto handle_unusual;
        continue;
      // int64 pageSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pageNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pagenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildGeographiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetChildGeographiesRequest.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  // .farm.nurture.location.service.proto.Format format = 6;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_format(), target);
  }

  // int64 pageSize = 7;
  if (this->pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_pagesize(), target);
  }

  // int64 pageNumber = 8;
  if (this->pagenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_pagenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  return target;
}

size_t GetChildGeographiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.location.service.proto.Format format = 6;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // int64 pageSize = 7;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagesize());
  }

  // int64 pageNumber = 8;
  if (this->pagenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pagenumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildGeographiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChildGeographiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChildGeographiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetChildGeographiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetChildGeographiesRequest)
    MergeFrom(*source);
  }
}

void GetChildGeographiesRequest::MergeFrom(const GetChildGeographiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
  if (from.pagenumber() != 0) {
    _internal_set_pagenumber(from._internal_pagenumber());
  }
}

void GetChildGeographiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChildGeographiesRequest::CopyFrom(const GetChildGeographiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildGeographiesRequest::IsInitialized() const {
  return true;
}

void GetChildGeographiesRequest::InternalSwap(GetChildGeographiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChildGeographiesRequest, pagenumber_)
      + sizeof(GetChildGeographiesRequest::pagenumber_)
      - PROTOBUF_FIELD_OFFSET(GetChildGeographiesRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChildGeographiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetChildGeographiesResponseRecord::_Internal {
 public:
};

GetChildGeographiesResponseRecord::GetChildGeographiesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
}
GetChildGeographiesResponseRecord::GetChildGeographiesResponseRecord(const GetChildGeographiesResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
}

void GetChildGeographiesResponseRecord::SharedCtor() {
}

GetChildGeographiesResponseRecord::~GetChildGeographiesResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChildGeographiesResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildGeographiesResponseRecord::ArenaDtor(void* object) {
  GetChildGeographiesResponseRecord* _this = reinterpret_cast< GetChildGeographiesResponseRecord* >(object);
  (void)_this;
}
void GetChildGeographiesResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildGeographiesResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildGeographiesResponseRecord& GetChildGeographiesResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetChildGeographiesResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChildGeographiesResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildGeographiesResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  return target;
}

size_t GetChildGeographiesResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildGeographiesResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChildGeographiesResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChildGeographiesResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
    MergeFrom(*source);
  }
}

void GetChildGeographiesResponseRecord::MergeFrom(const GetChildGeographiesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetChildGeographiesResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChildGeographiesResponseRecord::CopyFrom(const GetChildGeographiesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildGeographiesResponseRecord::IsInitialized() const {
  return true;
}

void GetChildGeographiesResponseRecord::InternalSwap(GetChildGeographiesResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChildGeographiesResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetChildGeographiesResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetChildGeographiesResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetChildGeographiesResponse::_Internal::status(const GetChildGeographiesResponse* msg) {
  return *msg->status_;
}
void GetChildGeographiesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetChildGeographiesResponse::clear_attribs() {
  attribs_.Clear();
}
GetChildGeographiesResponse::GetChildGeographiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  locationwithboundary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetChildGeographiesResponse)
}
GetChildGeographiesResponse::GetChildGeographiesResponse(const GetChildGeographiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      locationwithboundary_(from.locationwithboundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetChildGeographiesResponse)
}

void GetChildGeographiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetChildGeographiesResponse::~GetChildGeographiesResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChildGeographiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetChildGeographiesResponse::ArenaDtor(void* object) {
  GetChildGeographiesResponse* _this = reinterpret_cast< GetChildGeographiesResponse* >(object);
  (void)_this;
}
void GetChildGeographiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildGeographiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildGeographiesResponse& GetChildGeographiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetChildGeographiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  locationwithboundary_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChildGeographiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locationwithboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildGeographiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locationwithboundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_locationwithboundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  return target;
}

size_t GetChildGeographiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  total_size += 1UL * this->_internal_locationwithboundary_size();
  for (const auto& msg : this->locationwithboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildGeographiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChildGeographiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChildGeographiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetChildGeographiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetChildGeographiesResponse)
    MergeFrom(*source);
  }
}

void GetChildGeographiesResponse::MergeFrom(const GetChildGeographiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  locationwithboundary_.MergeFrom(from.locationwithboundary_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetChildGeographiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChildGeographiesResponse::CopyFrom(const GetChildGeographiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetChildGeographiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildGeographiesResponse::IsInitialized() const {
  return true;
}

void GetChildGeographiesResponse::InternalSwap(GetChildGeographiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  locationwithboundary_.InternalSwap(&other->locationwithboundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChildGeographiesResponse, count_)
      + sizeof(GetChildGeographiesResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetChildGeographiesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChildGeographiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertLocationWithoutBoundaryRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const InsertLocationWithoutBoundaryRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
InsertLocationWithoutBoundaryRequest::_Internal::requestheaders(const InsertLocationWithoutBoundaryRequest* msg) {
  return *msg->requestheaders_;
}
void InsertLocationWithoutBoundaryRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
InsertLocationWithoutBoundaryRequest::InsertLocationWithoutBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
}
InsertLocationWithoutBoundaryRequest::InsertLocationWithoutBoundaryRequest(const InsertLocationWithoutBoundaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdbyactortype().empty()) {
    createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_createdbyactortype(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latlonggeohash().empty()) {
    latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latlonggeohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&id_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
}

void InsertLocationWithoutBoundaryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(visibility_));
}

InsertLocationWithoutBoundaryRequest::~InsertLocationWithoutBoundaryRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationWithoutBoundaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void InsertLocationWithoutBoundaryRequest::ArenaDtor(void* object) {
  InsertLocationWithoutBoundaryRequest* _this = reinterpret_cast< InsertLocationWithoutBoundaryRequest* >(object);
  (void)_this;
}
void InsertLocationWithoutBoundaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationWithoutBoundaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationWithoutBoundaryRequest& InsertLocationWithoutBoundaryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationWithoutBoundaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  labels_.ClearToEmpty();
  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  metadata_.ClearToEmpty();
  createdbyactortype_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  latlonggeohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&id_)) + sizeof(visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationWithoutBoundaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status>(val));
        } else goto handle_unusual;
        continue;
      // string metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minS2Level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mins2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxS2Level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maxs2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdByActorId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          createdbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdByActorType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_createdbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility visibility = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geographyUid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latLongGeohash = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_latlonggeohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationWithoutBoundaryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string labels = 4;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_labels(), target);
  }

  // string namespace = 5;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // string code = 6;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_code(), target);
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // int32 version = 9;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_version(), target);
  }

  // int32 minS2Level = 10;
  if (this->mins2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mins2level(), target);
  }

  // int32 maxS2Level = 11;
  if (this->maxs2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_maxs2level(), target);
  }

  // int64 createdByActorId = 12;
  if (this->createdbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_createdbyactorid(), target);
  }

  // string createdByActorType = 13;
  if (this->createdbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdbyactortype().data(), static_cast<int>(this->_internal_createdbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_createdbyactortype(), target);
  }

  // int64 modifiedByActorId = 14;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 15;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_modifiedbyactortype(), target);
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility visibility = 16;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_visibility(), target);
  }

  // string geographyUid = 17;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_geographyuid(), target);
  }

  // string pincode = 18;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_pincode(), target);
  }

  // string latLongGeohash = 19;
  if (this->latlonggeohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latlonggeohash().data(), static_cast<int>(this->_internal_latlonggeohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_latlonggeohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  return target;
}

size_t InsertLocationWithoutBoundaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string labels = 4;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string namespace = 5;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 6;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string createdByActorType = 13;
  if (this->createdbyactortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdbyactortype());
  }

  // string modifiedByActorType = 15;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // string geographyUid = 17;
  if (this->geographyuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string pincode = 18;
  if (this->pincode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string latLongGeohash = 19;
  if (this->latlonggeohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latlonggeohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 version = 9;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 minS2Level = 10;
  if (this->mins2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins2level());
  }

  // int32 maxS2Level = 11;
  if (this->maxs2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxs2level());
  }

  // int64 createdByActorId = 12;
  if (this->createdbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdbyactorid());
  }

  // int64 modifiedByActorId = 14;
  if (this->modifiedbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility visibility = 16;
  if (this->visibility() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationWithoutBoundaryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationWithoutBoundaryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationWithoutBoundaryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
    MergeFrom(*source);
  }
}

void InsertLocationWithoutBoundaryRequest::MergeFrom(const InsertLocationWithoutBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.createdbyactortype().size() > 0) {
    _internal_set_createdbyactortype(from._internal_createdbyactortype());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.latlonggeohash().size() > 0) {
    _internal_set_latlonggeohash(from._internal_latlonggeohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.mins2level() != 0) {
    _internal_set_mins2level(from._internal_mins2level());
  }
  if (from.maxs2level() != 0) {
    _internal_set_maxs2level(from._internal_maxs2level());
  }
  if (from.createdbyactorid() != 0) {
    _internal_set_createdbyactorid(from._internal_createdbyactorid());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
}

void InsertLocationWithoutBoundaryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationWithoutBoundaryRequest::CopyFrom(const InsertLocationWithoutBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationWithoutBoundaryRequest::IsInitialized() const {
  return true;
}

void InsertLocationWithoutBoundaryRequest::InternalSwap(InsertLocationWithoutBoundaryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createdbyactortype_.Swap(&other->createdbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latlonggeohash_.Swap(&other->latlonggeohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationWithoutBoundaryRequest, visibility_)
      + sizeof(InsertLocationWithoutBoundaryRequest::visibility_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationWithoutBoundaryRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationWithoutBoundaryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationWithoutBoundaryRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkInsertLocationWithoutBoundaryRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkInsertLocationWithoutBoundaryRequest::_Internal::requestheaders(const BulkInsertLocationWithoutBoundaryRequest* msg) {
  return *msg->requestheaders_;
}
void BulkInsertLocationWithoutBoundaryRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkInsertLocationWithoutBoundaryRequest::BulkInsertLocationWithoutBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
}
BulkInsertLocationWithoutBoundaryRequest::BulkInsertLocationWithoutBoundaryRequest(const BulkInsertLocationWithoutBoundaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
}

void BulkInsertLocationWithoutBoundaryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkInsertLocationWithoutBoundaryRequest::~BulkInsertLocationWithoutBoundaryRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationWithoutBoundaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkInsertLocationWithoutBoundaryRequest::ArenaDtor(void* object) {
  BulkInsertLocationWithoutBoundaryRequest* _this = reinterpret_cast< BulkInsertLocationWithoutBoundaryRequest* >(object);
  (void)_this;
}
void BulkInsertLocationWithoutBoundaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationWithoutBoundaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationWithoutBoundaryRequest& BulkInsertLocationWithoutBoundaryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationWithoutBoundaryRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationWithoutBoundaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationWithoutBoundaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationWithoutBoundaryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  return target;
}

size_t BulkInsertLocationWithoutBoundaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationWithoutBoundaryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationWithoutBoundaryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationWithoutBoundaryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
    MergeFrom(*source);
  }
}

void BulkInsertLocationWithoutBoundaryRequest::MergeFrom(const BulkInsertLocationWithoutBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkInsertLocationWithoutBoundaryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationWithoutBoundaryRequest::CopyFrom(const BulkInsertLocationWithoutBoundaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationWithoutBoundaryRequest::IsInitialized() const {
  return true;
}

void BulkInsertLocationWithoutBoundaryRequest::InternalSwap(BulkInsertLocationWithoutBoundaryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationWithoutBoundaryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertLocationWithoutBoundaryResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const InsertLocationWithoutBoundaryResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
InsertLocationWithoutBoundaryResponse::_Internal::status(const InsertLocationWithoutBoundaryResponse* msg) {
  return *msg->status_;
}
void InsertLocationWithoutBoundaryResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void InsertLocationWithoutBoundaryResponse::clear_attribs() {
  attribs_.Clear();
}
InsertLocationWithoutBoundaryResponse::InsertLocationWithoutBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
}
InsertLocationWithoutBoundaryResponse::InsertLocationWithoutBoundaryResponse(const InsertLocationWithoutBoundaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
}

void InsertLocationWithoutBoundaryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

InsertLocationWithoutBoundaryResponse::~InsertLocationWithoutBoundaryResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertLocationWithoutBoundaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void InsertLocationWithoutBoundaryResponse::ArenaDtor(void* object) {
  InsertLocationWithoutBoundaryResponse* _this = reinterpret_cast< InsertLocationWithoutBoundaryResponse* >(object);
  (void)_this;
}
void InsertLocationWithoutBoundaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertLocationWithoutBoundaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertLocationWithoutBoundaryResponse& InsertLocationWithoutBoundaryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertLocationWithoutBoundaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertLocationWithoutBoundaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertLocationWithoutBoundaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  return target;
}

size_t InsertLocationWithoutBoundaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertLocationWithoutBoundaryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertLocationWithoutBoundaryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertLocationWithoutBoundaryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
    MergeFrom(*source);
  }
}

void InsertLocationWithoutBoundaryResponse::MergeFrom(const InsertLocationWithoutBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InsertLocationWithoutBoundaryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertLocationWithoutBoundaryResponse::CopyFrom(const InsertLocationWithoutBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertLocationWithoutBoundaryResponse::IsInitialized() const {
  return true;
}

void InsertLocationWithoutBoundaryResponse::InternalSwap(InsertLocationWithoutBoundaryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertLocationWithoutBoundaryResponse, count_)
      + sizeof(InsertLocationWithoutBoundaryResponse::count_)
      - PROTOBUF_FIELD_OFFSET(InsertLocationWithoutBoundaryResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertLocationWithoutBoundaryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertLocationWithoutBoundaryResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkInsertLocationWithoutBoundaryResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkInsertLocationWithoutBoundaryResponse::_Internal::status(const BulkInsertLocationWithoutBoundaryResponse* msg) {
  return *msg->status_;
}
void BulkInsertLocationWithoutBoundaryResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkInsertLocationWithoutBoundaryResponse::BulkInsertLocationWithoutBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
}
BulkInsertLocationWithoutBoundaryResponse::BulkInsertLocationWithoutBoundaryResponse(const BulkInsertLocationWithoutBoundaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
}

void BulkInsertLocationWithoutBoundaryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkInsertLocationWithoutBoundaryResponse::~BulkInsertLocationWithoutBoundaryResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertLocationWithoutBoundaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkInsertLocationWithoutBoundaryResponse::ArenaDtor(void* object) {
  BulkInsertLocationWithoutBoundaryResponse* _this = reinterpret_cast< BulkInsertLocationWithoutBoundaryResponse* >(object);
  (void)_this;
}
void BulkInsertLocationWithoutBoundaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertLocationWithoutBoundaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertLocationWithoutBoundaryResponse& BulkInsertLocationWithoutBoundaryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertLocationWithoutBoundaryResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertLocationWithoutBoundaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertLocationWithoutBoundaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertLocationWithoutBoundaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  return target;
}

size_t BulkInsertLocationWithoutBoundaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertLocationWithoutBoundaryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertLocationWithoutBoundaryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertLocationWithoutBoundaryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
    MergeFrom(*source);
  }
}

void BulkInsertLocationWithoutBoundaryResponse::MergeFrom(const BulkInsertLocationWithoutBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkInsertLocationWithoutBoundaryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertLocationWithoutBoundaryResponse::CopyFrom(const BulkInsertLocationWithoutBoundaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertLocationWithoutBoundaryResponse::IsInitialized() const {
  return true;
}

void BulkInsertLocationWithoutBoundaryResponse::InternalSwap(BulkInsertLocationWithoutBoundaryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkInsertLocationWithoutBoundaryResponse, count_)
      + sizeof(BulkInsertLocationWithoutBoundaryResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkInsertLocationWithoutBoundaryResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertLocationWithoutBoundaryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationWithoutBoundaryByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateLocationWithoutBoundaryByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateLocationWithoutBoundaryByIdRequest::_Internal::requestheaders(const UpdateLocationWithoutBoundaryByIdRequest* msg) {
  return *msg->requestheaders_;
}
void UpdateLocationWithoutBoundaryByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
UpdateLocationWithoutBoundaryByIdRequest::UpdateLocationWithoutBoundaryByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
}
UpdateLocationWithoutBoundaryByIdRequest::UpdateLocationWithoutBoundaryByIdRequest(const UpdateLocationWithoutBoundaryByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_labels().empty()) {
    labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_labels(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latlonggeohash().empty()) {
    latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latlonggeohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
}

void UpdateLocationWithoutBoundaryByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(id_));
}

UpdateLocationWithoutBoundaryByIdRequest::~UpdateLocationWithoutBoundaryByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationWithoutBoundaryByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  labels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latlonggeohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void UpdateLocationWithoutBoundaryByIdRequest::ArenaDtor(void* object) {
  UpdateLocationWithoutBoundaryByIdRequest* _this = reinterpret_cast< UpdateLocationWithoutBoundaryByIdRequest* >(object);
  (void)_this;
}
void UpdateLocationWithoutBoundaryByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationWithoutBoundaryByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationWithoutBoundaryByIdRequest& UpdateLocationWithoutBoundaryByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationWithoutBoundaryByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  labels_.ClearToEmpty();
  namespace__.ClearToEmpty();
  code_.ClearToEmpty();
  metadata_.ClearToEmpty();
  modifiedbyactortype_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  pincode_.ClearToEmpty();
  latlonggeohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationWithoutBoundaryByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_labels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status>(val));
        } else goto handle_unusual;
        continue;
      // string metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 newVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          newversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minS2Level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mins2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxS2Level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          maxs2level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility visibility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility>(val));
        } else goto handle_unusual;
        continue;
      // string geographyUid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latLongGeohash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_latlonggeohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oldVersion = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          oldversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationWithoutBoundaryByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string labels = 3;
  if (this->labels().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labels().data(), static_cast<int>(this->_internal_labels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_labels(), target);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_metadata(), target);
  }

  // int32 newVersion = 8;
  if (this->newversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_newversion(), target);
  }

  // int32 minS2Level = 9;
  if (this->mins2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_mins2level(), target);
  }

  // int32 maxS2Level = 10;
  if (this->maxs2level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_maxs2level(), target);
  }

  // int64 modifiedByActorId = 11;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 12;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_modifiedbyactortype(), target);
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility visibility = 13;
  if (this->visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_visibility(), target);
  }

  // string geographyUid = 14;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_geographyuid(), target);
  }

  // string pincode = 15;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_pincode(), target);
  }

  // string latLongGeohash = 16;
  if (this->latlonggeohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latlonggeohash().data(), static_cast<int>(this->_internal_latlonggeohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_latlonggeohash(), target);
  }

  // int64 id = 17;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_id(), target);
  }

  // int32 oldVersion = 18;
  if (this->oldversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_oldversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  return target;
}

size_t UpdateLocationWithoutBoundaryByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string labels = 3;
  if (this->labels().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labels());
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string modifiedByActorType = 12;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // string geographyUid = 14;
  if (this->geographyuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string pincode = 15;
  if (this->pincode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string latLongGeohash = 16;
  if (this->latlonggeohash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latlonggeohash());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 newVersion = 8;
  if (this->newversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newversion());
  }

  // int32 minS2Level = 9;
  if (this->mins2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins2level());
  }

  // int32 maxS2Level = 10;
  if (this->maxs2level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxs2level());
  }

  // int64 modifiedByActorId = 11;
  if (this->modifiedbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility visibility = 13;
  if (this->visibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // int32 oldVersion = 18;
  if (this->oldversion() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oldversion());
  }

  // int64 id = 17;
  if (this->id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationWithoutBoundaryByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationWithoutBoundaryByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationWithoutBoundaryByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
    MergeFrom(*source);
  }
}

void UpdateLocationWithoutBoundaryByIdRequest::MergeFrom(const UpdateLocationWithoutBoundaryByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.labels().size() > 0) {
    _internal_set_labels(from._internal_labels());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.latlonggeohash().size() > 0) {
    _internal_set_latlonggeohash(from._internal_latlonggeohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.newversion() != 0) {
    _internal_set_newversion(from._internal_newversion());
  }
  if (from.mins2level() != 0) {
    _internal_set_mins2level(from._internal_mins2level());
  }
  if (from.maxs2level() != 0) {
    _internal_set_maxs2level(from._internal_maxs2level());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  if (from.oldversion() != 0) {
    _internal_set_oldversion(from._internal_oldversion());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateLocationWithoutBoundaryByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationWithoutBoundaryByIdRequest::CopyFrom(const UpdateLocationWithoutBoundaryByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationWithoutBoundaryByIdRequest::IsInitialized() const {
  return true;
}

void UpdateLocationWithoutBoundaryByIdRequest::InternalSwap(UpdateLocationWithoutBoundaryByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  labels_.Swap(&other->labels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latlonggeohash_.Swap(&other->latlonggeohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationWithoutBoundaryByIdRequest, id_)
      + sizeof(UpdateLocationWithoutBoundaryByIdRequest::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationWithoutBoundaryByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationWithoutBoundaryByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationWithoutBoundaryByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateLocationWithoutBoundaryByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateLocationWithoutBoundaryByIdRequest::_Internal::requestheaders(const BulkUpdateLocationWithoutBoundaryByIdRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateLocationWithoutBoundaryByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateLocationWithoutBoundaryByIdRequest::BulkUpdateLocationWithoutBoundaryByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
}
BulkUpdateLocationWithoutBoundaryByIdRequest::BulkUpdateLocationWithoutBoundaryByIdRequest(const BulkUpdateLocationWithoutBoundaryByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateLocationWithoutBoundaryByIdRequest::~BulkUpdateLocationWithoutBoundaryByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::ArenaDtor(void* object) {
  BulkUpdateLocationWithoutBoundaryByIdRequest* _this = reinterpret_cast< BulkUpdateLocationWithoutBoundaryByIdRequest* >(object);
  (void)_this;
}
void BulkUpdateLocationWithoutBoundaryByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationWithoutBoundaryByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationWithoutBoundaryByIdRequest& BulkUpdateLocationWithoutBoundaryByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationWithoutBoundaryByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationWithoutBoundaryByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationWithoutBoundaryByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationWithoutBoundaryByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  return target;
}

size_t BulkUpdateLocationWithoutBoundaryByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationWithoutBoundaryByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationWithoutBoundaryByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::MergeFrom(const BulkUpdateLocationWithoutBoundaryByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::CopyFrom(const BulkUpdateLocationWithoutBoundaryByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationWithoutBoundaryByIdRequest::IsInitialized() const {
  return true;
}

void BulkUpdateLocationWithoutBoundaryByIdRequest::InternalSwap(BulkUpdateLocationWithoutBoundaryByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationWithoutBoundaryByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateLocationWithoutBoundaryByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateLocationWithoutBoundaryByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateLocationWithoutBoundaryByIdResponse::_Internal::status(const UpdateLocationWithoutBoundaryByIdResponse* msg) {
  return *msg->status_;
}
void UpdateLocationWithoutBoundaryByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateLocationWithoutBoundaryByIdResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateLocationWithoutBoundaryByIdResponse::UpdateLocationWithoutBoundaryByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
}
UpdateLocationWithoutBoundaryByIdResponse::UpdateLocationWithoutBoundaryByIdResponse(const UpdateLocationWithoutBoundaryByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
}

void UpdateLocationWithoutBoundaryByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateLocationWithoutBoundaryByIdResponse::~UpdateLocationWithoutBoundaryByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLocationWithoutBoundaryByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateLocationWithoutBoundaryByIdResponse::ArenaDtor(void* object) {
  UpdateLocationWithoutBoundaryByIdResponse* _this = reinterpret_cast< UpdateLocationWithoutBoundaryByIdResponse* >(object);
  (void)_this;
}
void UpdateLocationWithoutBoundaryByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLocationWithoutBoundaryByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLocationWithoutBoundaryByIdResponse& UpdateLocationWithoutBoundaryByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateLocationWithoutBoundaryByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLocationWithoutBoundaryByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLocationWithoutBoundaryByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  return target;
}

size_t UpdateLocationWithoutBoundaryByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLocationWithoutBoundaryByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationWithoutBoundaryByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLocationWithoutBoundaryByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
    MergeFrom(*source);
  }
}

void UpdateLocationWithoutBoundaryByIdResponse::MergeFrom(const UpdateLocationWithoutBoundaryByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateLocationWithoutBoundaryByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationWithoutBoundaryByIdResponse::CopyFrom(const UpdateLocationWithoutBoundaryByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationWithoutBoundaryByIdResponse::IsInitialized() const {
  return true;
}

void UpdateLocationWithoutBoundaryByIdResponse::InternalSwap(UpdateLocationWithoutBoundaryByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocationWithoutBoundaryByIdResponse, count_)
      + sizeof(UpdateLocationWithoutBoundaryByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocationWithoutBoundaryByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLocationWithoutBoundaryByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateLocationWithoutBoundaryByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateLocationWithoutBoundaryByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateLocationWithoutBoundaryByIdResponse::_Internal::status(const BulkUpdateLocationWithoutBoundaryByIdResponse* msg) {
  return *msg->status_;
}
void BulkUpdateLocationWithoutBoundaryByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateLocationWithoutBoundaryByIdResponse::BulkUpdateLocationWithoutBoundaryByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
}
BulkUpdateLocationWithoutBoundaryByIdResponse::BulkUpdateLocationWithoutBoundaryByIdResponse(const BulkUpdateLocationWithoutBoundaryByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateLocationWithoutBoundaryByIdResponse::~BulkUpdateLocationWithoutBoundaryByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::ArenaDtor(void* object) {
  BulkUpdateLocationWithoutBoundaryByIdResponse* _this = reinterpret_cast< BulkUpdateLocationWithoutBoundaryByIdResponse* >(object);
  (void)_this;
}
void BulkUpdateLocationWithoutBoundaryByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateLocationWithoutBoundaryByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateLocationWithoutBoundaryByIdResponse& BulkUpdateLocationWithoutBoundaryByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateLocationWithoutBoundaryByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateLocationWithoutBoundaryByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateLocationWithoutBoundaryByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateLocationWithoutBoundaryByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  return target;
}

size_t BulkUpdateLocationWithoutBoundaryByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateLocationWithoutBoundaryByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateLocationWithoutBoundaryByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::MergeFrom(const BulkUpdateLocationWithoutBoundaryByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::CopyFrom(const BulkUpdateLocationWithoutBoundaryByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateLocationWithoutBoundaryByIdResponse::IsInitialized() const {
  return true;
}

void BulkUpdateLocationWithoutBoundaryByIdResponse::InternalSwap(BulkUpdateLocationWithoutBoundaryByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateLocationWithoutBoundaryByIdResponse, count_)
      + sizeof(BulkUpdateLocationWithoutBoundaryByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateLocationWithoutBoundaryByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateLocationWithoutBoundaryByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteLocationByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const DeleteLocationByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
DeleteLocationByIdRequest::_Internal::requestheaders(const DeleteLocationByIdRequest* msg) {
  return *msg->requestheaders_;
}
void DeleteLocationByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
DeleteLocationByIdRequest::DeleteLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
}
DeleteLocationByIdRequest::DeleteLocationByIdRequest(const DeleteLocationByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifiedbyactortype().empty()) {
    modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifiedbyactortype(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&deletedat_, &from.deletedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&deletedat_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
}

void DeleteLocationByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  modifiedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(id_));
}

DeleteLocationByIdRequest::~DeleteLocationByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteLocationByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modifiedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void DeleteLocationByIdRequest::ArenaDtor(void* object) {
  DeleteLocationByIdRequest* _this = reinterpret_cast< DeleteLocationByIdRequest* >(object);
  (void)_this;
}
void DeleteLocationByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLocationByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLocationByIdRequest& DeleteLocationByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteLocationByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifiedbyactortype_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&deletedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&deletedat_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLocationByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 modifiedByActorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          modifiedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modifiedByActorType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modifiedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLocationByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 deletedAt = 2;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deletedat(), target);
  }

  // int64 modifiedByActorId = 3;
  if (this->modifiedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_modifiedbyactorid(), target);
  }

  // string modifiedByActorType = 4;
  if (this->modifiedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifiedbyactortype().data(), static_cast<int>(this->_internal_modifiedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modifiedbyactortype(), target);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  return target;
}

size_t DeleteLocationByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modifiedByActorType = 4;
  if (this->modifiedbyactortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifiedbyactortype());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 deletedAt = 2;
  if (this->deletedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int64 modifiedByActorId = 3;
  if (this->modifiedbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_modifiedbyactorid());
  }

  // int64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLocationByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLocationByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLocationByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
    MergeFrom(*source);
  }
}

void DeleteLocationByIdRequest::MergeFrom(const DeleteLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modifiedbyactortype().size() > 0) {
    _internal_set_modifiedbyactortype(from._internal_modifiedbyactortype());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.modifiedbyactorid() != 0) {
    _internal_set_modifiedbyactorid(from._internal_modifiedbyactorid());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteLocationByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLocationByIdRequest::CopyFrom(const DeleteLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLocationByIdRequest::IsInitialized() const {
  return true;
}

void DeleteLocationByIdRequest::InternalSwap(DeleteLocationByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  modifiedbyactortype_.Swap(&other->modifiedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteLocationByIdRequest, id_)
      + sizeof(DeleteLocationByIdRequest::id_)
      - PROTOBUF_FIELD_OFFSET(DeleteLocationByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLocationByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkDeleteLocationByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkDeleteLocationByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkDeleteLocationByIdRequest::_Internal::requestheaders(const BulkDeleteLocationByIdRequest* msg) {
  return *msg->requestheaders_;
}
void BulkDeleteLocationByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkDeleteLocationByIdRequest::BulkDeleteLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
}
BulkDeleteLocationByIdRequest::BulkDeleteLocationByIdRequest(const BulkDeleteLocationByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
}

void BulkDeleteLocationByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkDeleteLocationByIdRequest::~BulkDeleteLocationByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkDeleteLocationByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkDeleteLocationByIdRequest::ArenaDtor(void* object) {
  BulkDeleteLocationByIdRequest* _this = reinterpret_cast< BulkDeleteLocationByIdRequest* >(object);
  (void)_this;
}
void BulkDeleteLocationByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkDeleteLocationByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkDeleteLocationByIdRequest& BulkDeleteLocationByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkDeleteLocationByIdRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkDeleteLocationByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDeleteLocationByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.DeleteLocationByIdRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkDeleteLocationByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  return target;
}

size_t BulkDeleteLocationByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkDeleteLocationByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkDeleteLocationByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkDeleteLocationByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
    MergeFrom(*source);
  }
}

void BulkDeleteLocationByIdRequest::MergeFrom(const BulkDeleteLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkDeleteLocationByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkDeleteLocationByIdRequest::CopyFrom(const BulkDeleteLocationByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDeleteLocationByIdRequest::IsInitialized() const {
  return true;
}

void BulkDeleteLocationByIdRequest::InternalSwap(BulkDeleteLocationByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDeleteLocationByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteLocationByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const DeleteLocationByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
DeleteLocationByIdResponse::_Internal::status(const DeleteLocationByIdResponse* msg) {
  return *msg->status_;
}
void DeleteLocationByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DeleteLocationByIdResponse::clear_attribs() {
  attribs_.Clear();
}
DeleteLocationByIdResponse::DeleteLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
}
DeleteLocationByIdResponse::DeleteLocationByIdResponse(const DeleteLocationByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
}

void DeleteLocationByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

DeleteLocationByIdResponse::~DeleteLocationByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteLocationByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void DeleteLocationByIdResponse::ArenaDtor(void* object) {
  DeleteLocationByIdResponse* _this = reinterpret_cast< DeleteLocationByIdResponse* >(object);
  (void)_this;
}
void DeleteLocationByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLocationByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLocationByIdResponse& DeleteLocationByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteLocationByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLocationByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLocationByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  return target;
}

size_t DeleteLocationByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLocationByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLocationByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLocationByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
    MergeFrom(*source);
  }
}

void DeleteLocationByIdResponse::MergeFrom(const DeleteLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void DeleteLocationByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLocationByIdResponse::CopyFrom(const DeleteLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLocationByIdResponse::IsInitialized() const {
  return true;
}

void DeleteLocationByIdResponse::InternalSwap(DeleteLocationByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteLocationByIdResponse, count_)
      + sizeof(DeleteLocationByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(DeleteLocationByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLocationByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkDeleteLocationByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkDeleteLocationByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkDeleteLocationByIdResponse::_Internal::status(const BulkDeleteLocationByIdResponse* msg) {
  return *msg->status_;
}
void BulkDeleteLocationByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkDeleteLocationByIdResponse::BulkDeleteLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
}
BulkDeleteLocationByIdResponse::BulkDeleteLocationByIdResponse(const BulkDeleteLocationByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
}

void BulkDeleteLocationByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkDeleteLocationByIdResponse::~BulkDeleteLocationByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkDeleteLocationByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkDeleteLocationByIdResponse::ArenaDtor(void* object) {
  BulkDeleteLocationByIdResponse* _this = reinterpret_cast< BulkDeleteLocationByIdResponse* >(object);
  (void)_this;
}
void BulkDeleteLocationByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkDeleteLocationByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkDeleteLocationByIdResponse& BulkDeleteLocationByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkDeleteLocationByIdResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkDeleteLocationByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDeleteLocationByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.DeleteLocationByIdResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkDeleteLocationByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  return target;
}

size_t BulkDeleteLocationByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkDeleteLocationByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkDeleteLocationByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkDeleteLocationByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
    MergeFrom(*source);
  }
}

void BulkDeleteLocationByIdResponse::MergeFrom(const BulkDeleteLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkDeleteLocationByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkDeleteLocationByIdResponse::CopyFrom(const BulkDeleteLocationByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDeleteLocationByIdResponse::IsInitialized() const {
  return true;
}

void BulkDeleteLocationByIdResponse::InternalSwap(BulkDeleteLocationByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkDeleteLocationByIdResponse, count_)
      + sizeof(BulkDeleteLocationByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkDeleteLocationByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDeleteLocationByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchDuplicateVillagesRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchDuplicateVillagesRequest::_Internal::requestheaders(const FetchDuplicateVillagesRequest* msg) {
  return *msg->requestheaders_;
}
void FetchDuplicateVillagesRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchDuplicateVillagesRequest::FetchDuplicateVillagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
}
FetchDuplicateVillagesRequest::FetchDuplicateVillagesRequest(const FetchDuplicateVillagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
}

void FetchDuplicateVillagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchDuplicateVillagesRequest::~FetchDuplicateVillagesRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchDuplicateVillagesRequest::ArenaDtor(void* object) {
  FetchDuplicateVillagesRequest* _this = reinterpret_cast< FetchDuplicateVillagesRequest* >(object);
  (void)_this;
}
void FetchDuplicateVillagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesRequest& FetchDuplicateVillagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  return target;
}

size_t FetchDuplicateVillagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesRequest::MergeFrom(const FetchDuplicateVillagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchDuplicateVillagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesRequest::CopyFrom(const FetchDuplicateVillagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesRequest::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesRequest::InternalSwap(FetchDuplicateVillagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesRequest, isstaleallowed_)
      + sizeof(FetchDuplicateVillagesRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesResponseRecord::_Internal {
 public:
};

FetchDuplicateVillagesResponseRecord::FetchDuplicateVillagesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
}
FetchDuplicateVillagesResponseRecord::FetchDuplicateVillagesResponseRecord(const FetchDuplicateVillagesResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
}

void FetchDuplicateVillagesResponseRecord::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

FetchDuplicateVillagesResponseRecord::~FetchDuplicateVillagesResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchDuplicateVillagesResponseRecord::ArenaDtor(void* object) {
  FetchDuplicateVillagesResponseRecord* _this = reinterpret_cast< FetchDuplicateVillagesResponseRecord* >(object);
  (void)_this;
}
void FetchDuplicateVillagesResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesResponseRecord& FetchDuplicateVillagesResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  return target;
}

size_t FetchDuplicateVillagesResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesResponseRecord::MergeFrom(const FetchDuplicateVillagesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FetchDuplicateVillagesResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesResponseRecord::CopyFrom(const FetchDuplicateVillagesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesResponseRecord::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesResponseRecord::InternalSwap(FetchDuplicateVillagesResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FetchDuplicateVillagesResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FetchDuplicateVillagesResponse::_Internal::status(const FetchDuplicateVillagesResponse* msg) {
  return *msg->status_;
}
void FetchDuplicateVillagesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchDuplicateVillagesResponse::clear_attribs() {
  attribs_.Clear();
}
FetchDuplicateVillagesResponse::FetchDuplicateVillagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
}
FetchDuplicateVillagesResponse::FetchDuplicateVillagesResponse(const FetchDuplicateVillagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
}

void FetchDuplicateVillagesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FetchDuplicateVillagesResponse::~FetchDuplicateVillagesResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FetchDuplicateVillagesResponse::ArenaDtor(void* object) {
  FetchDuplicateVillagesResponse* _this = reinterpret_cast< FetchDuplicateVillagesResponse* >(object);
  (void)_this;
}
void FetchDuplicateVillagesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesResponse& FetchDuplicateVillagesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  return target;
}

size_t FetchDuplicateVillagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesResponse::MergeFrom(const FetchDuplicateVillagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchDuplicateVillagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesResponse::CopyFrom(const FetchDuplicateVillagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesResponse::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesResponse::InternalSwap(FetchDuplicateVillagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesResponse, count_)
      + sizeof(FetchDuplicateVillagesResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesBySDTVLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchDuplicateVillagesBySDTVLatLongRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchDuplicateVillagesBySDTVLatLongRequest::_Internal::requestheaders(const FetchDuplicateVillagesBySDTVLatLongRequest* msg) {
  return *msg->requestheaders_;
}
void FetchDuplicateVillagesBySDTVLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchDuplicateVillagesBySDTVLatLongRequest::FetchDuplicateVillagesBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
}
FetchDuplicateVillagesBySDTVLatLongRequest::FetchDuplicateVillagesBySDTVLatLongRequest(const FetchDuplicateVillagesBySDTVLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrystored().empty()) {
    countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countrystored(), 
      GetArena());
  }
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statestored().empty()) {
    statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statestored(), 
      GetArena());
  }
  districtstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_districtstored().empty()) {
    districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_districtstored(), 
      GetArena());
  }
  tehsilstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsilstored().empty()) {
    tehsilstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsilstored(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
}

void FetchDuplicateVillagesBySDTVLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchDuplicateVillagesBySDTVLatLongRequest::~FetchDuplicateVillagesBySDTVLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesBySDTVLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrystored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtstored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilstored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchDuplicateVillagesBySDTVLatLongRequest::ArenaDtor(void* object) {
  FetchDuplicateVillagesBySDTVLatLongRequest* _this = reinterpret_cast< FetchDuplicateVillagesBySDTVLatLongRequest* >(object);
  (void)_this;
}
void FetchDuplicateVillagesBySDTVLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesBySDTVLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesBySDTVLatLongRequest& FetchDuplicateVillagesBySDTVLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesBySDTVLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countrystored_.ClearToEmpty();
  statestored_.ClearToEmpty();
  districtstored_.ClearToEmpty();
  tehsilstored_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesBySDTVLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryStored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_countrystored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stateStored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_statestored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string districtStored = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_districtstored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsilStored = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tehsilstored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesBySDTVLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrystored().data(), static_cast<int>(this->_internal_countrystored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_countrystored(), target);
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statestored().data(), static_cast<int>(this->_internal_statestored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statestored(), target);
  }

  // string districtStored = 5;
  if (this->districtstored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_districtstored().data(), static_cast<int>(this->_internal_districtstored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_districtstored(), target);
  }

  // string tehsilStored = 6;
  if (this->tehsilstored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsilstored().data(), static_cast<int>(this->_internal_tehsilstored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tehsilstored(), target);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  return target;
}

size_t FetchDuplicateVillagesBySDTVLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrystored());
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statestored());
  }

  // string districtStored = 5;
  if (this->districtstored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_districtstored());
  }

  // string tehsilStored = 6;
  if (this->tehsilstored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsilstored());
  }

  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesBySDTVLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesBySDTVLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesBySDTVLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesBySDTVLatLongRequest::MergeFrom(const FetchDuplicateVillagesBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.countrystored().size() > 0) {
    _internal_set_countrystored(from._internal_countrystored());
  }
  if (from.statestored().size() > 0) {
    _internal_set_statestored(from._internal_statestored());
  }
  if (from.districtstored().size() > 0) {
    _internal_set_districtstored(from._internal_districtstored());
  }
  if (from.tehsilstored().size() > 0) {
    _internal_set_tehsilstored(from._internal_tehsilstored());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchDuplicateVillagesBySDTVLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesBySDTVLatLongRequest::CopyFrom(const FetchDuplicateVillagesBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesBySDTVLatLongRequest::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesBySDTVLatLongRequest::InternalSwap(FetchDuplicateVillagesBySDTVLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  countrystored_.Swap(&other->countrystored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statestored_.Swap(&other->statestored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  districtstored_.Swap(&other->districtstored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsilstored_.Swap(&other->tehsilstored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesBySDTVLatLongRequest, isstaleallowed_)
      + sizeof(FetchDuplicateVillagesBySDTVLatLongRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesBySDTVLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesBySDTVLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesBySDTVLatLongResponseRecord::_Internal {
 public:
};

FetchDuplicateVillagesBySDTVLatLongResponseRecord::FetchDuplicateVillagesBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
}
FetchDuplicateVillagesBySDTVLatLongResponseRecord::FetchDuplicateVillagesBySDTVLatLongResponseRecord(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

FetchDuplicateVillagesBySDTVLatLongResponseRecord::~FetchDuplicateVillagesBySDTVLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::ArenaDtor(void* object) {
  FetchDuplicateVillagesBySDTVLatLongResponseRecord* _this = reinterpret_cast< FetchDuplicateVillagesBySDTVLatLongResponseRecord* >(object);
  (void)_this;
}
void FetchDuplicateVillagesBySDTVLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesBySDTVLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesBySDTVLatLongResponseRecord& FetchDuplicateVillagesBySDTVLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesBySDTVLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesBySDTVLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesBySDTVLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  return target;
}

size_t FetchDuplicateVillagesBySDTVLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesBySDTVLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesBySDTVLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::MergeFrom(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::CopyFrom(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesBySDTVLatLongResponseRecord::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesBySDTVLatLongResponseRecord::InternalSwap(FetchDuplicateVillagesBySDTVLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesBySDTVLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateVillagesBySDTVLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FetchDuplicateVillagesBySDTVLatLongResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FetchDuplicateVillagesBySDTVLatLongResponse::_Internal::status(const FetchDuplicateVillagesBySDTVLatLongResponse* msg) {
  return *msg->status_;
}
void FetchDuplicateVillagesBySDTVLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchDuplicateVillagesBySDTVLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
FetchDuplicateVillagesBySDTVLatLongResponse::FetchDuplicateVillagesBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
}
FetchDuplicateVillagesBySDTVLatLongResponse::FetchDuplicateVillagesBySDTVLatLongResponse(const FetchDuplicateVillagesBySDTVLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
}

void FetchDuplicateVillagesBySDTVLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FetchDuplicateVillagesBySDTVLatLongResponse::~FetchDuplicateVillagesBySDTVLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateVillagesBySDTVLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FetchDuplicateVillagesBySDTVLatLongResponse::ArenaDtor(void* object) {
  FetchDuplicateVillagesBySDTVLatLongResponse* _this = reinterpret_cast< FetchDuplicateVillagesBySDTVLatLongResponse* >(object);
  (void)_this;
}
void FetchDuplicateVillagesBySDTVLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateVillagesBySDTVLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateVillagesBySDTVLatLongResponse& FetchDuplicateVillagesBySDTVLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateVillagesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateVillagesBySDTVLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateVillagesBySDTVLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateVillagesBySDTVLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  return target;
}

size_t FetchDuplicateVillagesBySDTVLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateVillagesBySDTVLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateVillagesBySDTVLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateVillagesBySDTVLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
    MergeFrom(*source);
  }
}

void FetchDuplicateVillagesBySDTVLatLongResponse::MergeFrom(const FetchDuplicateVillagesBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchDuplicateVillagesBySDTVLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateVillagesBySDTVLatLongResponse::CopyFrom(const FetchDuplicateVillagesBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateVillagesBySDTVLatLongResponse::IsInitialized() const {
  return true;
}

void FetchDuplicateVillagesBySDTVLatLongResponse::InternalSwap(FetchDuplicateVillagesBySDTVLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesBySDTVLatLongResponse, count_)
      + sizeof(FetchDuplicateVillagesBySDTVLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateVillagesBySDTVLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateVillagesBySDTVLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateTehsilsBySDTVLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchDuplicateTehsilsBySDTVLatLongRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchDuplicateTehsilsBySDTVLatLongRequest::_Internal::requestheaders(const FetchDuplicateTehsilsBySDTVLatLongRequest* msg) {
  return *msg->requestheaders_;
}
void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchDuplicateTehsilsBySDTVLatLongRequest::FetchDuplicateTehsilsBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
}
FetchDuplicateTehsilsBySDTVLatLongRequest::FetchDuplicateTehsilsBySDTVLatLongRequest(const FetchDuplicateTehsilsBySDTVLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrystored().empty()) {
    countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countrystored(), 
      GetArena());
  }
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statestored().empty()) {
    statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statestored(), 
      GetArena());
  }
  districtstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_districtstored().empty()) {
    districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_districtstored(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtstored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchDuplicateTehsilsBySDTVLatLongRequest::~FetchDuplicateTehsilsBySDTVLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrystored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtstored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::ArenaDtor(void* object) {
  FetchDuplicateTehsilsBySDTVLatLongRequest* _this = reinterpret_cast< FetchDuplicateTehsilsBySDTVLatLongRequest* >(object);
  (void)_this;
}
void FetchDuplicateTehsilsBySDTVLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateTehsilsBySDTVLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateTehsilsBySDTVLatLongRequest& FetchDuplicateTehsilsBySDTVLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateTehsilsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateTehsilsBySDTVLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countrystored_.ClearToEmpty();
  statestored_.ClearToEmpty();
  districtstored_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateTehsilsBySDTVLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryStored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_countrystored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stateStored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_statestored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string districtStored = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_districtstored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateTehsilsBySDTVLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrystored().data(), static_cast<int>(this->_internal_countrystored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_countrystored(), target);
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statestored().data(), static_cast<int>(this->_internal_statestored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statestored(), target);
  }

  // string districtStored = 5;
  if (this->districtstored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_districtstored().data(), static_cast<int>(this->_internal_districtstored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_districtstored(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  return target;
}

size_t FetchDuplicateTehsilsBySDTVLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrystored());
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statestored());
  }

  // string districtStored = 5;
  if (this->districtstored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_districtstored());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateTehsilsBySDTVLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateTehsilsBySDTVLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
    MergeFrom(*source);
  }
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.countrystored().size() > 0) {
    _internal_set_countrystored(from._internal_countrystored());
  }
  if (from.statestored().size() > 0) {
    _internal_set_statestored(from._internal_statestored());
  }
  if (from.districtstored().size() > 0) {
    _internal_set_districtstored(from._internal_districtstored());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateTehsilsBySDTVLatLongRequest::IsInitialized() const {
  return true;
}

void FetchDuplicateTehsilsBySDTVLatLongRequest::InternalSwap(FetchDuplicateTehsilsBySDTVLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  countrystored_.Swap(&other->countrystored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statestored_.Swap(&other->statestored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  districtstored_.Swap(&other->districtstored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateTehsilsBySDTVLatLongRequest, isstaleallowed_)
      + sizeof(FetchDuplicateTehsilsBySDTVLatLongRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateTehsilsBySDTVLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateTehsilsBySDTVLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateTehsilsBySDTVLatLongResponseRecord::_Internal {
 public:
};

FetchDuplicateTehsilsBySDTVLatLongResponseRecord::FetchDuplicateTehsilsBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
}
FetchDuplicateTehsilsBySDTVLatLongResponseRecord::FetchDuplicateTehsilsBySDTVLatLongResponseRecord(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

FetchDuplicateTehsilsBySDTVLatLongResponseRecord::~FetchDuplicateTehsilsBySDTVLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::ArenaDtor(void* object) {
  FetchDuplicateTehsilsBySDTVLatLongResponseRecord* _this = reinterpret_cast< FetchDuplicateTehsilsBySDTVLatLongResponseRecord* >(object);
  (void)_this;
}
void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& FetchDuplicateTehsilsBySDTVLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateTehsilsBySDTVLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateTehsilsBySDTVLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  return target;
}

size_t FetchDuplicateTehsilsBySDTVLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateTehsilsBySDTVLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateTehsilsBySDTVLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateTehsilsBySDTVLatLongResponseRecord::IsInitialized() const {
  return true;
}

void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::InternalSwap(FetchDuplicateTehsilsBySDTVLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateTehsilsBySDTVLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateTehsilsBySDTVLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FetchDuplicateTehsilsBySDTVLatLongResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FetchDuplicateTehsilsBySDTVLatLongResponse::_Internal::status(const FetchDuplicateTehsilsBySDTVLatLongResponse* msg) {
  return *msg->status_;
}
void FetchDuplicateTehsilsBySDTVLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchDuplicateTehsilsBySDTVLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
FetchDuplicateTehsilsBySDTVLatLongResponse::FetchDuplicateTehsilsBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
}
FetchDuplicateTehsilsBySDTVLatLongResponse::FetchDuplicateTehsilsBySDTVLatLongResponse(const FetchDuplicateTehsilsBySDTVLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FetchDuplicateTehsilsBySDTVLatLongResponse::~FetchDuplicateTehsilsBySDTVLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::ArenaDtor(void* object) {
  FetchDuplicateTehsilsBySDTVLatLongResponse* _this = reinterpret_cast< FetchDuplicateTehsilsBySDTVLatLongResponse* >(object);
  (void)_this;
}
void FetchDuplicateTehsilsBySDTVLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateTehsilsBySDTVLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateTehsilsBySDTVLatLongResponse& FetchDuplicateTehsilsBySDTVLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateTehsilsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateTehsilsBySDTVLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateTehsilsBySDTVLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateTehsilsBySDTVLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  return target;
}

size_t FetchDuplicateTehsilsBySDTVLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateTehsilsBySDTVLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateTehsilsBySDTVLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
    MergeFrom(*source);
  }
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateTehsilsBySDTVLatLongResponse::IsInitialized() const {
  return true;
}

void FetchDuplicateTehsilsBySDTVLatLongResponse::InternalSwap(FetchDuplicateTehsilsBySDTVLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateTehsilsBySDTVLatLongResponse, count_)
      + sizeof(FetchDuplicateTehsilsBySDTVLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateTehsilsBySDTVLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateTehsilsBySDTVLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateDistrictsBySDTVLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchDuplicateDistrictsBySDTVLatLongRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchDuplicateDistrictsBySDTVLatLongRequest::_Internal::requestheaders(const FetchDuplicateDistrictsBySDTVLatLongRequest* msg) {
  return *msg->requestheaders_;
}
void FetchDuplicateDistrictsBySDTVLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchDuplicateDistrictsBySDTVLatLongRequest::FetchDuplicateDistrictsBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
}
FetchDuplicateDistrictsBySDTVLatLongRequest::FetchDuplicateDistrictsBySDTVLatLongRequest(const FetchDuplicateDistrictsBySDTVLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrystored().empty()) {
    countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countrystored(), 
      GetArena());
  }
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statestored().empty()) {
    statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statestored(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchDuplicateDistrictsBySDTVLatLongRequest::~FetchDuplicateDistrictsBySDTVLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrystored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statestored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::ArenaDtor(void* object) {
  FetchDuplicateDistrictsBySDTVLatLongRequest* _this = reinterpret_cast< FetchDuplicateDistrictsBySDTVLatLongRequest* >(object);
  (void)_this;
}
void FetchDuplicateDistrictsBySDTVLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateDistrictsBySDTVLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateDistrictsBySDTVLatLongRequest& FetchDuplicateDistrictsBySDTVLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateDistrictsBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateDistrictsBySDTVLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countrystored_.ClearToEmpty();
  statestored_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateDistrictsBySDTVLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryStored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_countrystored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stateStored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_statestored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateDistrictsBySDTVLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrystored().data(), static_cast<int>(this->_internal_countrystored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_countrystored(), target);
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statestored().data(), static_cast<int>(this->_internal_statestored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statestored(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  return target;
}

size_t FetchDuplicateDistrictsBySDTVLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrystored());
  }

  // string stateStored = 4;
  if (this->statestored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statestored());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateDistrictsBySDTVLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateDistrictsBySDTVLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
    MergeFrom(*source);
  }
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.countrystored().size() > 0) {
    _internal_set_countrystored(from._internal_countrystored());
  }
  if (from.statestored().size() > 0) {
    _internal_set_statestored(from._internal_statestored());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateDistrictsBySDTVLatLongRequest::IsInitialized() const {
  return true;
}

void FetchDuplicateDistrictsBySDTVLatLongRequest::InternalSwap(FetchDuplicateDistrictsBySDTVLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  countrystored_.Swap(&other->countrystored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statestored_.Swap(&other->statestored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateDistrictsBySDTVLatLongRequest, isstaleallowed_)
      + sizeof(FetchDuplicateDistrictsBySDTVLatLongRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateDistrictsBySDTVLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateDistrictsBySDTVLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateDistrictsBySDTVLatLongResponseRecord::_Internal {
 public:
};

FetchDuplicateDistrictsBySDTVLatLongResponseRecord::FetchDuplicateDistrictsBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
}
FetchDuplicateDistrictsBySDTVLatLongResponseRecord::FetchDuplicateDistrictsBySDTVLatLongResponseRecord(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

FetchDuplicateDistrictsBySDTVLatLongResponseRecord::~FetchDuplicateDistrictsBySDTVLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::ArenaDtor(void* object) {
  FetchDuplicateDistrictsBySDTVLatLongResponseRecord* _this = reinterpret_cast< FetchDuplicateDistrictsBySDTVLatLongResponseRecord* >(object);
  (void)_this;
}
void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& FetchDuplicateDistrictsBySDTVLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateDistrictsBySDTVLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateDistrictsBySDTVLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  return target;
}

size_t FetchDuplicateDistrictsBySDTVLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateDistrictsBySDTVLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateDistrictsBySDTVLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateDistrictsBySDTVLatLongResponseRecord::IsInitialized() const {
  return true;
}

void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::InternalSwap(FetchDuplicateDistrictsBySDTVLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateDistrictsBySDTVLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateDistrictsBySDTVLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FetchDuplicateDistrictsBySDTVLatLongResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FetchDuplicateDistrictsBySDTVLatLongResponse::_Internal::status(const FetchDuplicateDistrictsBySDTVLatLongResponse* msg) {
  return *msg->status_;
}
void FetchDuplicateDistrictsBySDTVLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchDuplicateDistrictsBySDTVLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
FetchDuplicateDistrictsBySDTVLatLongResponse::FetchDuplicateDistrictsBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
}
FetchDuplicateDistrictsBySDTVLatLongResponse::FetchDuplicateDistrictsBySDTVLatLongResponse(const FetchDuplicateDistrictsBySDTVLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FetchDuplicateDistrictsBySDTVLatLongResponse::~FetchDuplicateDistrictsBySDTVLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::ArenaDtor(void* object) {
  FetchDuplicateDistrictsBySDTVLatLongResponse* _this = reinterpret_cast< FetchDuplicateDistrictsBySDTVLatLongResponse* >(object);
  (void)_this;
}
void FetchDuplicateDistrictsBySDTVLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateDistrictsBySDTVLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateDistrictsBySDTVLatLongResponse& FetchDuplicateDistrictsBySDTVLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateDistrictsBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateDistrictsBySDTVLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateDistrictsBySDTVLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateDistrictsBySDTVLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  return target;
}

size_t FetchDuplicateDistrictsBySDTVLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateDistrictsBySDTVLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateDistrictsBySDTVLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
    MergeFrom(*source);
  }
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateDistrictsBySDTVLatLongResponse::IsInitialized() const {
  return true;
}

void FetchDuplicateDistrictsBySDTVLatLongResponse::InternalSwap(FetchDuplicateDistrictsBySDTVLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateDistrictsBySDTVLatLongResponse, count_)
      + sizeof(FetchDuplicateDistrictsBySDTVLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateDistrictsBySDTVLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateDistrictsBySDTVLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateStatesBySDTVLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchDuplicateStatesBySDTVLatLongRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchDuplicateStatesBySDTVLatLongRequest::_Internal::requestheaders(const FetchDuplicateStatesBySDTVLatLongRequest* msg) {
  return *msg->requestheaders_;
}
void FetchDuplicateStatesBySDTVLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FetchDuplicateStatesBySDTVLatLongRequest::FetchDuplicateStatesBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
}
FetchDuplicateStatesBySDTVLatLongRequest::FetchDuplicateStatesBySDTVLatLongRequest(const FetchDuplicateStatesBySDTVLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrystored().empty()) {
    countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countrystored(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
}

void FetchDuplicateStatesBySDTVLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  countrystored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FetchDuplicateStatesBySDTVLatLongRequest::~FetchDuplicateStatesBySDTVLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateStatesBySDTVLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrystored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FetchDuplicateStatesBySDTVLatLongRequest::ArenaDtor(void* object) {
  FetchDuplicateStatesBySDTVLatLongRequest* _this = reinterpret_cast< FetchDuplicateStatesBySDTVLatLongRequest* >(object);
  (void)_this;
}
void FetchDuplicateStatesBySDTVLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateStatesBySDTVLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateStatesBySDTVLatLongRequest& FetchDuplicateStatesBySDTVLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateStatesBySDTVLatLongRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateStatesBySDTVLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countrystored_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateStatesBySDTVLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryStored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_countrystored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateStatesBySDTVLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrystored().data(), static_cast<int>(this->_internal_countrystored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_countrystored(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  return target;
}

size_t FetchDuplicateStatesBySDTVLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string countryStored = 3;
  if (this->countrystored().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrystored());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateStatesBySDTVLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateStatesBySDTVLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateStatesBySDTVLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
    MergeFrom(*source);
  }
}

void FetchDuplicateStatesBySDTVLatLongRequest::MergeFrom(const FetchDuplicateStatesBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.countrystored().size() > 0) {
    _internal_set_countrystored(from._internal_countrystored());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FetchDuplicateStatesBySDTVLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateStatesBySDTVLatLongRequest::CopyFrom(const FetchDuplicateStatesBySDTVLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateStatesBySDTVLatLongRequest::IsInitialized() const {
  return true;
}

void FetchDuplicateStatesBySDTVLatLongRequest::InternalSwap(FetchDuplicateStatesBySDTVLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  countrystored_.Swap(&other->countrystored_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateStatesBySDTVLatLongRequest, isstaleallowed_)
      + sizeof(FetchDuplicateStatesBySDTVLatLongRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateStatesBySDTVLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateStatesBySDTVLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateStatesBySDTVLatLongResponseRecord::_Internal {
 public:
};

FetchDuplicateStatesBySDTVLatLongResponseRecord::FetchDuplicateStatesBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
}
FetchDuplicateStatesBySDTVLatLongResponseRecord::FetchDuplicateStatesBySDTVLatLongResponseRecord(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

FetchDuplicateStatesBySDTVLatLongResponseRecord::~FetchDuplicateStatesBySDTVLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::ArenaDtor(void* object) {
  FetchDuplicateStatesBySDTVLatLongResponseRecord* _this = reinterpret_cast< FetchDuplicateStatesBySDTVLatLongResponseRecord* >(object);
  (void)_this;
}
void FetchDuplicateStatesBySDTVLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateStatesBySDTVLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateStatesBySDTVLatLongResponseRecord& FetchDuplicateStatesBySDTVLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateStatesBySDTVLatLongResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateStatesBySDTVLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateStatesBySDTVLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateStatesBySDTVLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  return target;
}

size_t FetchDuplicateStatesBySDTVLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateStatesBySDTVLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateStatesBySDTVLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::MergeFrom(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::CopyFrom(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateStatesBySDTVLatLongResponseRecord::IsInitialized() const {
  return true;
}

void FetchDuplicateStatesBySDTVLatLongResponseRecord::InternalSwap(FetchDuplicateStatesBySDTVLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateStatesBySDTVLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchDuplicateStatesBySDTVLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FetchDuplicateStatesBySDTVLatLongResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FetchDuplicateStatesBySDTVLatLongResponse::_Internal::status(const FetchDuplicateStatesBySDTVLatLongResponse* msg) {
  return *msg->status_;
}
void FetchDuplicateStatesBySDTVLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchDuplicateStatesBySDTVLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
FetchDuplicateStatesBySDTVLatLongResponse::FetchDuplicateStatesBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
}
FetchDuplicateStatesBySDTVLatLongResponse::FetchDuplicateStatesBySDTVLatLongResponse(const FetchDuplicateStatesBySDTVLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
}

void FetchDuplicateStatesBySDTVLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FetchDuplicateStatesBySDTVLatLongResponse::~FetchDuplicateStatesBySDTVLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchDuplicateStatesBySDTVLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FetchDuplicateStatesBySDTVLatLongResponse::ArenaDtor(void* object) {
  FetchDuplicateStatesBySDTVLatLongResponse* _this = reinterpret_cast< FetchDuplicateStatesBySDTVLatLongResponse* >(object);
  (void)_this;
}
void FetchDuplicateStatesBySDTVLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchDuplicateStatesBySDTVLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDuplicateStatesBySDTVLatLongResponse& FetchDuplicateStatesBySDTVLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDuplicateStatesBySDTVLatLongResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchDuplicateStatesBySDTVLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchDuplicateStatesBySDTVLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDuplicateStatesBySDTVLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  return target;
}

size_t FetchDuplicateStatesBySDTVLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDuplicateStatesBySDTVLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDuplicateStatesBySDTVLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchDuplicateStatesBySDTVLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
    MergeFrom(*source);
  }
}

void FetchDuplicateStatesBySDTVLatLongResponse::MergeFrom(const FetchDuplicateStatesBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchDuplicateStatesBySDTVLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDuplicateStatesBySDTVLatLongResponse::CopyFrom(const FetchDuplicateStatesBySDTVLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDuplicateStatesBySDTVLatLongResponse::IsInitialized() const {
  return true;
}

void FetchDuplicateStatesBySDTVLatLongResponse::InternalSwap(FetchDuplicateStatesBySDTVLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchDuplicateStatesBySDTVLatLongResponse, count_)
      + sizeof(FetchDuplicateStatesBySDTVLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FetchDuplicateStatesBySDTVLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchDuplicateStatesBySDTVLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDuplicateGeographiesRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetDuplicateGeographiesRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetDuplicateGeographiesRequest::_Internal::requestheaders(const GetDuplicateGeographiesRequest* msg) {
  return *msg->requestheaders_;
}
void GetDuplicateGeographiesRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetDuplicateGeographiesRequest::GetDuplicateGeographiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
}
GetDuplicateGeographiesRequest::GetDuplicateGeographiesRequest(const GetDuplicateGeographiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsil().empty()) {
    tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsil(), 
      GetArena());
  }
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_village().empty()) {
    village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_village(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&geotype_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(geotype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
}

void GetDuplicateGeographiesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&geotype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(geotype_));
}

GetDuplicateGeographiesRequest::~GetDuplicateGeographiesRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDuplicateGeographiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  village_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetDuplicateGeographiesRequest::ArenaDtor(void* object) {
  GetDuplicateGeographiesRequest* _this = reinterpret_cast< GetDuplicateGeographiesRequest* >(object);
  (void)_this;
}
void GetDuplicateGeographiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDuplicateGeographiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDuplicateGeographiesRequest& GetDuplicateGeographiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDuplicateGeographiesRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDuplicateGeographiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_.ClearToEmpty();
  state_.ClearToEmpty();
  district_.ClearToEmpty();
  tehsil_.ClearToEmpty();
  village_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geotype_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(geotype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDuplicateGeographiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string country = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsil = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_tehsil();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string village = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_village();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GeographyType geoType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geotype(static_cast<::farm::nurture::location::service::proto::GeographyType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDuplicateGeographiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // string country = 6;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_country(), target);
  }

  // string state = 7;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_state(), target);
  }

  // string district = 8;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_district(), target);
  }

  // string tehsil = 9;
  if (this->tehsil().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsil().data(), static_cast<int>(this->_internal_tehsil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tehsil(), target);
  }

  // string village = 10;
  if (this->village().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_village().data(), static_cast<int>(this->_internal_village().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_village(), target);
  }

  // .farm.nurture.location.service.proto.GeographyType geoType = 11;
  if (this->geotype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_geotype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  return target;
}

size_t GetDuplicateGeographiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country = 6;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string state = 7;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string district = 8;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string tehsil = 9;
  if (this->tehsil().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsil());
  }

  // string village = 10;
  if (this->village().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_village());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.location.service.proto.GeographyType geoType = 11;
  if (this->geotype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geotype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDuplicateGeographiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDuplicateGeographiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDuplicateGeographiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
    MergeFrom(*source);
  }
}

void GetDuplicateGeographiesRequest::MergeFrom(const GetDuplicateGeographiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.tehsil().size() > 0) {
    _internal_set_tehsil(from._internal_tehsil());
  }
  if (from.village().size() > 0) {
    _internal_set_village(from._internal_village());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (from.geotype() != 0) {
    _internal_set_geotype(from._internal_geotype());
  }
}

void GetDuplicateGeographiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDuplicateGeographiesRequest::CopyFrom(const GetDuplicateGeographiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDuplicateGeographiesRequest::IsInitialized() const {
  return true;
}

void GetDuplicateGeographiesRequest::InternalSwap(GetDuplicateGeographiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsil_.Swap(&other->tehsil_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  village_.Swap(&other->village_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDuplicateGeographiesRequest, geotype_)
      + sizeof(GetDuplicateGeographiesRequest::geotype_)
      - PROTOBUF_FIELD_OFFSET(GetDuplicateGeographiesRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDuplicateGeographiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDuplicateGeographiesResponseRecord::_Internal {
 public:
};

GetDuplicateGeographiesResponseRecord::GetDuplicateGeographiesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
}
GetDuplicateGeographiesResponseRecord::GetDuplicateGeographiesResponseRecord(const GetDuplicateGeographiesResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
}

void GetDuplicateGeographiesResponseRecord::SharedCtor() {
}

GetDuplicateGeographiesResponseRecord::~GetDuplicateGeographiesResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDuplicateGeographiesResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDuplicateGeographiesResponseRecord::ArenaDtor(void* object) {
  GetDuplicateGeographiesResponseRecord* _this = reinterpret_cast< GetDuplicateGeographiesResponseRecord* >(object);
  (void)_this;
}
void GetDuplicateGeographiesResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDuplicateGeographiesResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDuplicateGeographiesResponseRecord& GetDuplicateGeographiesResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDuplicateGeographiesResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDuplicateGeographiesResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDuplicateGeographiesResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDuplicateGeographiesResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  return target;
}

size_t GetDuplicateGeographiesResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDuplicateGeographiesResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDuplicateGeographiesResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDuplicateGeographiesResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
    MergeFrom(*source);
  }
}

void GetDuplicateGeographiesResponseRecord::MergeFrom(const GetDuplicateGeographiesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDuplicateGeographiesResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDuplicateGeographiesResponseRecord::CopyFrom(const GetDuplicateGeographiesResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDuplicateGeographiesResponseRecord::IsInitialized() const {
  return true;
}

void GetDuplicateGeographiesResponseRecord::InternalSwap(GetDuplicateGeographiesResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDuplicateGeographiesResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDuplicateGeographiesResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetDuplicateGeographiesResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetDuplicateGeographiesResponse::_Internal::status(const GetDuplicateGeographiesResponse* msg) {
  return *msg->status_;
}
void GetDuplicateGeographiesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetDuplicateGeographiesResponse::clear_attribs() {
  attribs_.Clear();
}
GetDuplicateGeographiesResponse::GetDuplicateGeographiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
}
GetDuplicateGeographiesResponse::GetDuplicateGeographiesResponse(const GetDuplicateGeographiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
}

void GetDuplicateGeographiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetDuplicateGeographiesResponse::~GetDuplicateGeographiesResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDuplicateGeographiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetDuplicateGeographiesResponse::ArenaDtor(void* object) {
  GetDuplicateGeographiesResponse* _this = reinterpret_cast< GetDuplicateGeographiesResponse* >(object);
  (void)_this;
}
void GetDuplicateGeographiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDuplicateGeographiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDuplicateGeographiesResponse& GetDuplicateGeographiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDuplicateGeographiesResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDuplicateGeographiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  id_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDuplicateGeographiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDuplicateGeographiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated int64 id = 4;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  return target;
}

size_t GetDuplicateGeographiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDuplicateGeographiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDuplicateGeographiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDuplicateGeographiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
    MergeFrom(*source);
  }
}

void GetDuplicateGeographiesResponse::MergeFrom(const GetDuplicateGeographiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  id_.MergeFrom(from.id_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetDuplicateGeographiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDuplicateGeographiesResponse::CopyFrom(const GetDuplicateGeographiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDuplicateGeographiesResponse::IsInitialized() const {
  return true;
}

void GetDuplicateGeographiesResponse::InternalSwap(GetDuplicateGeographiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  id_.InternalSwap(&other->id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDuplicateGeographiesResponse, count_)
      + sizeof(GetDuplicateGeographiesResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetDuplicateGeographiesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDuplicateGeographiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertVendorLocationDataRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const InsertVendorLocationDataRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
InsertVendorLocationDataRequest::_Internal::requestheaders(const InsertVendorLocationDataRequest* msg) {
  return *msg->requestheaders_;
}
void InsertVendorLocationDataRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
InsertVendorLocationDataRequest::InsertVendorLocationDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
}
InsertVendorLocationDataRequest::InsertVendorLocationDataRequest(const InsertVendorLocationDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendorid().empty()) {
    vendorid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendorid(), 
      GetArena());
  }
  vendortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendortype().empty()) {
    vendortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendortype(), 
      GetArena());
  }
  geohash7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash7().empty()) {
    geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash7(), 
      GetArena());
  }
  geohash6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash6().empty()) {
    geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash6(), 
      GetArena());
  }
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_village().empty()) {
    village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_village(), 
      GetArena());
  }
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsil().empty()) {
    tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsil(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  vendorresponse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendorresponse().empty()) {
    vendorresponse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendorresponse(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
}

void InsertVendorLocationDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base);
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendorresponse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(longitude_));
}

InsertVendorLocationDataRequest::~InsertVendorLocationDataRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertVendorLocationDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  village_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendorresponse_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void InsertVendorLocationDataRequest::ArenaDtor(void* object) {
  InsertVendorLocationDataRequest* _this = reinterpret_cast< InsertVendorLocationDataRequest* >(object);
  (void)_this;
}
void InsertVendorLocationDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertVendorLocationDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertVendorLocationDataRequest& InsertVendorLocationDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertVendorLocationDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendorid_.ClearToEmpty();
  vendortype_.ClearToEmpty();
  geohash7_.ClearToEmpty();
  geohash6_.ClearToEmpty();
  village_.ClearToEmpty();
  tehsil_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  country_.ClearToEmpty();
  vendorresponse_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertVendorLocationDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendorid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendorType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vendortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash7 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_geohash7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_geohash6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string village = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_village();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsil = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_tehsil();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendorResponse = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_vendorresponse();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertVendorLocationDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string vendorId = 2;
  if (this->vendorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendorid().data(), static_cast<int>(this->_internal_vendorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendorid(), target);
  }

  // string vendorType = 3;
  if (this->vendortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendortype().data(), static_cast<int>(this->_internal_vendortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendortype(), target);
  }

  // string geohash7 = 4;
  if (this->geohash7().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash7().data(), static_cast<int>(this->_internal_geohash7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_geohash7(), target);
  }

  // string geohash6 = 5;
  if (this->geohash6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash6().data(), static_cast<int>(this->_internal_geohash6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_geohash6(), target);
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_latitude(), target);
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  // string village = 8;
  if (this->village().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_village().data(), static_cast<int>(this->_internal_village().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_village(), target);
  }

  // string tehsil = 9;
  if (this->tehsil().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsil().data(), static_cast<int>(this->_internal_tehsil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tehsil(), target);
  }

  // string district = 10;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_district(), target);
  }

  // string state = 11;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_state(), target);
  }

  // string country = 12;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_country(), target);
  }

  // string vendorResponse = 13;
  if (this->vendorresponse().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendorresponse().data(), static_cast<int>(this->_internal_vendorresponse().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_vendorresponse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  return target;
}

size_t InsertVendorLocationDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendorId = 2;
  if (this->vendorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorid());
  }

  // string vendorType = 3;
  if (this->vendortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendortype());
  }

  // string geohash7 = 4;
  if (this->geohash7().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash7());
  }

  // string geohash6 = 5;
  if (this->geohash6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash6());
  }

  // string village = 8;
  if (this->village().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_village());
  }

  // string tehsil = 9;
  if (this->tehsil().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsil());
  }

  // string district = 10;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 11;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string country = 12;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string vendorResponse = 13;
  if (this->vendorresponse().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorresponse());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertVendorLocationDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertVendorLocationDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertVendorLocationDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
    MergeFrom(*source);
  }
}

void InsertVendorLocationDataRequest::MergeFrom(const InsertVendorLocationDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendorid().size() > 0) {
    _internal_set_vendorid(from._internal_vendorid());
  }
  if (from.vendortype().size() > 0) {
    _internal_set_vendortype(from._internal_vendortype());
  }
  if (from.geohash7().size() > 0) {
    _internal_set_geohash7(from._internal_geohash7());
  }
  if (from.geohash6().size() > 0) {
    _internal_set_geohash6(from._internal_geohash6());
  }
  if (from.village().size() > 0) {
    _internal_set_village(from._internal_village());
  }
  if (from.tehsil().size() > 0) {
    _internal_set_tehsil(from._internal_tehsil());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.vendorresponse().size() > 0) {
    _internal_set_vendorresponse(from._internal_vendorresponse());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void InsertVendorLocationDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertVendorLocationDataRequest::CopyFrom(const InsertVendorLocationDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertVendorLocationDataRequest::IsInitialized() const {
  return true;
}

void InsertVendorLocationDataRequest::InternalSwap(InsertVendorLocationDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendorid_.Swap(&other->vendorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendortype_.Swap(&other->vendortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash7_.Swap(&other->geohash7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash6_.Swap(&other->geohash6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  village_.Swap(&other->village_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsil_.Swap(&other->tehsil_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendorresponse_.Swap(&other->vendorresponse_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertVendorLocationDataRequest, longitude_)
      + sizeof(InsertVendorLocationDataRequest::longitude_)
      - PROTOBUF_FIELD_OFFSET(InsertVendorLocationDataRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertVendorLocationDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertVendorLocationDataRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkInsertVendorLocationDataRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkInsertVendorLocationDataRequest::_Internal::requestheaders(const BulkInsertVendorLocationDataRequest* msg) {
  return *msg->requestheaders_;
}
void BulkInsertVendorLocationDataRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkInsertVendorLocationDataRequest::BulkInsertVendorLocationDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
}
BulkInsertVendorLocationDataRequest::BulkInsertVendorLocationDataRequest(const BulkInsertVendorLocationDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
}

void BulkInsertVendorLocationDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkInsertVendorLocationDataRequest::~BulkInsertVendorLocationDataRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertVendorLocationDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkInsertVendorLocationDataRequest::ArenaDtor(void* object) {
  BulkInsertVendorLocationDataRequest* _this = reinterpret_cast< BulkInsertVendorLocationDataRequest* >(object);
  (void)_this;
}
void BulkInsertVendorLocationDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertVendorLocationDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertVendorLocationDataRequest& BulkInsertVendorLocationDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertVendorLocationDataRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertVendorLocationDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertVendorLocationDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertVendorLocationDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  return target;
}

size_t BulkInsertVendorLocationDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertVendorLocationDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertVendorLocationDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertVendorLocationDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
    MergeFrom(*source);
  }
}

void BulkInsertVendorLocationDataRequest::MergeFrom(const BulkInsertVendorLocationDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkInsertVendorLocationDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertVendorLocationDataRequest::CopyFrom(const BulkInsertVendorLocationDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertVendorLocationDataRequest::IsInitialized() const {
  return true;
}

void BulkInsertVendorLocationDataRequest::InternalSwap(BulkInsertVendorLocationDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertVendorLocationDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertVendorLocationDataResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const InsertVendorLocationDataResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
InsertVendorLocationDataResponse::_Internal::status(const InsertVendorLocationDataResponse* msg) {
  return *msg->status_;
}
void InsertVendorLocationDataResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void InsertVendorLocationDataResponse::clear_attribs() {
  attribs_.Clear();
}
InsertVendorLocationDataResponse::InsertVendorLocationDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
}
InsertVendorLocationDataResponse::InsertVendorLocationDataResponse(const InsertVendorLocationDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
}

void InsertVendorLocationDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

InsertVendorLocationDataResponse::~InsertVendorLocationDataResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertVendorLocationDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void InsertVendorLocationDataResponse::ArenaDtor(void* object) {
  InsertVendorLocationDataResponse* _this = reinterpret_cast< InsertVendorLocationDataResponse* >(object);
  (void)_this;
}
void InsertVendorLocationDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertVendorLocationDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertVendorLocationDataResponse& InsertVendorLocationDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertVendorLocationDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertVendorLocationDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertVendorLocationDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  return target;
}

size_t InsertVendorLocationDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertVendorLocationDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertVendorLocationDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertVendorLocationDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
    MergeFrom(*source);
  }
}

void InsertVendorLocationDataResponse::MergeFrom(const InsertVendorLocationDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InsertVendorLocationDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertVendorLocationDataResponse::CopyFrom(const InsertVendorLocationDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertVendorLocationDataResponse::IsInitialized() const {
  return true;
}

void InsertVendorLocationDataResponse::InternalSwap(InsertVendorLocationDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertVendorLocationDataResponse, count_)
      + sizeof(InsertVendorLocationDataResponse::count_)
      - PROTOBUF_FIELD_OFFSET(InsertVendorLocationDataResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertVendorLocationDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkInsertVendorLocationDataResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkInsertVendorLocationDataResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkInsertVendorLocationDataResponse::_Internal::status(const BulkInsertVendorLocationDataResponse* msg) {
  return *msg->status_;
}
void BulkInsertVendorLocationDataResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkInsertVendorLocationDataResponse::BulkInsertVendorLocationDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
}
BulkInsertVendorLocationDataResponse::BulkInsertVendorLocationDataResponse(const BulkInsertVendorLocationDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
}

void BulkInsertVendorLocationDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkInsertVendorLocationDataResponse::~BulkInsertVendorLocationDataResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkInsertVendorLocationDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkInsertVendorLocationDataResponse::ArenaDtor(void* object) {
  BulkInsertVendorLocationDataResponse* _this = reinterpret_cast< BulkInsertVendorLocationDataResponse* >(object);
  (void)_this;
}
void BulkInsertVendorLocationDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkInsertVendorLocationDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkInsertVendorLocationDataResponse& BulkInsertVendorLocationDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkInsertVendorLocationDataResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkInsertVendorLocationDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkInsertVendorLocationDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkInsertVendorLocationDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  return target;
}

size_t BulkInsertVendorLocationDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkInsertVendorLocationDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkInsertVendorLocationDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkInsertVendorLocationDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
    MergeFrom(*source);
  }
}

void BulkInsertVendorLocationDataResponse::MergeFrom(const BulkInsertVendorLocationDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkInsertVendorLocationDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkInsertVendorLocationDataResponse::CopyFrom(const BulkInsertVendorLocationDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkInsertVendorLocationDataResponse::IsInitialized() const {
  return true;
}

void BulkInsertVendorLocationDataResponse::InternalSwap(BulkInsertVendorLocationDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkInsertVendorLocationDataResponse, count_)
      + sizeof(BulkInsertVendorLocationDataResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkInsertVendorLocationDataResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkInsertVendorLocationDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchVendorLocationsByGeohashRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const SearchVendorLocationsByGeohashRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
SearchVendorLocationsByGeohashRequest::_Internal::requestheaders(const SearchVendorLocationsByGeohashRequest* msg) {
  return *msg->requestheaders_;
}
void SearchVendorLocationsByGeohashRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
SearchVendorLocationsByGeohashRequest::SearchVendorLocationsByGeohashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
}
SearchVendorLocationsByGeohashRequest::SearchVendorLocationsByGeohashRequest(const SearchVendorLocationsByGeohashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geohash7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash7().empty()) {
    geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash7(), 
      GetArena());
  }
  geohash6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash6().empty()) {
    geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash6(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
}

void SearchVendorLocationsByGeohashRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base);
  geohash7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

SearchVendorLocationsByGeohashRequest::~SearchVendorLocationsByGeohashRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchVendorLocationsByGeohashRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geohash7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void SearchVendorLocationsByGeohashRequest::ArenaDtor(void* object) {
  SearchVendorLocationsByGeohashRequest* _this = reinterpret_cast< SearchVendorLocationsByGeohashRequest* >(object);
  (void)_this;
}
void SearchVendorLocationsByGeohashRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchVendorLocationsByGeohashRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchVendorLocationsByGeohashRequest& SearchVendorLocationsByGeohashRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchVendorLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchVendorLocationsByGeohashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geohash7_.ClearToEmpty();
  geohash6_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchVendorLocationsByGeohashRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_geohash7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_geohash6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchVendorLocationsByGeohashRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string geohash7 = 3;
  if (this->geohash7().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash7().data(), static_cast<int>(this->_internal_geohash7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_geohash7(), target);
  }

  // string geohash6 = 4;
  if (this->geohash6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash6().data(), static_cast<int>(this->_internal_geohash6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_geohash6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  return target;
}

size_t SearchVendorLocationsByGeohashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geohash7 = 3;
  if (this->geohash7().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash7());
  }

  // string geohash6 = 4;
  if (this->geohash6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash6());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchVendorLocationsByGeohashRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVendorLocationsByGeohashRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchVendorLocationsByGeohashRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
    MergeFrom(*source);
  }
}

void SearchVendorLocationsByGeohashRequest::MergeFrom(const SearchVendorLocationsByGeohashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geohash7().size() > 0) {
    _internal_set_geohash7(from._internal_geohash7());
  }
  if (from.geohash6().size() > 0) {
    _internal_set_geohash6(from._internal_geohash6());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void SearchVendorLocationsByGeohashRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVendorLocationsByGeohashRequest::CopyFrom(const SearchVendorLocationsByGeohashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVendorLocationsByGeohashRequest::IsInitialized() const {
  return true;
}

void SearchVendorLocationsByGeohashRequest::InternalSwap(SearchVendorLocationsByGeohashRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  geohash7_.Swap(&other->geohash7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash6_.Swap(&other->geohash6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashRequest, isstaleallowed_)
      + sizeof(SearchVendorLocationsByGeohashRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchVendorLocationsByGeohashRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchVendorLocationsByGeohashResponseRecord::_Internal {
 public:
};

SearchVendorLocationsByGeohashResponseRecord::SearchVendorLocationsByGeohashResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
}
SearchVendorLocationsByGeohashResponseRecord::SearchVendorLocationsByGeohashResponseRecord(const SearchVendorLocationsByGeohashResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_village().empty()) {
    village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_village(), 
      GetArena());
  }
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsil().empty()) {
    tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsil(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
}

void SearchVendorLocationsByGeohashResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

SearchVendorLocationsByGeohashResponseRecord::~SearchVendorLocationsByGeohashResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchVendorLocationsByGeohashResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  village_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchVendorLocationsByGeohashResponseRecord::ArenaDtor(void* object) {
  SearchVendorLocationsByGeohashResponseRecord* _this = reinterpret_cast< SearchVendorLocationsByGeohashResponseRecord* >(object);
  (void)_this;
}
void SearchVendorLocationsByGeohashResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchVendorLocationsByGeohashResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchVendorLocationsByGeohashResponseRecord& SearchVendorLocationsByGeohashResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchVendorLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchVendorLocationsByGeohashResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  village_.ClearToEmpty();
  tehsil_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  country_.ClearToEmpty();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchVendorLocationsByGeohashResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string village = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_village();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsil = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tehsil();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchVendorLocationsByGeohashResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // string village = 3;
  if (this->village().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_village().data(), static_cast<int>(this->_internal_village().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_village(), target);
  }

  // string tehsil = 4;
  if (this->tehsil().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsil().data(), static_cast<int>(this->_internal_tehsil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tehsil(), target);
  }

  // string district = 5;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_district(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  // string country = 7;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  return target;
}

size_t SearchVendorLocationsByGeohashResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string village = 3;
  if (this->village().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_village());
  }

  // string tehsil = 4;
  if (this->tehsil().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsil());
  }

  // string district = 5;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string country = 7;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchVendorLocationsByGeohashResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVendorLocationsByGeohashResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchVendorLocationsByGeohashResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
    MergeFrom(*source);
  }
}

void SearchVendorLocationsByGeohashResponseRecord::MergeFrom(const SearchVendorLocationsByGeohashResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.village().size() > 0) {
    _internal_set_village(from._internal_village());
  }
  if (from.tehsil().size() > 0) {
    _internal_set_tehsil(from._internal_tehsil());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void SearchVendorLocationsByGeohashResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVendorLocationsByGeohashResponseRecord::CopyFrom(const SearchVendorLocationsByGeohashResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVendorLocationsByGeohashResponseRecord::IsInitialized() const {
  return true;
}

void SearchVendorLocationsByGeohashResponseRecord::InternalSwap(SearchVendorLocationsByGeohashResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  village_.Swap(&other->village_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsil_.Swap(&other->tehsil_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashResponseRecord, longitude_)
      + sizeof(SearchVendorLocationsByGeohashResponseRecord::longitude_)
      - PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashResponseRecord, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchVendorLocationsByGeohashResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchVendorLocationsByGeohashResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const SearchVendorLocationsByGeohashResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
SearchVendorLocationsByGeohashResponse::_Internal::status(const SearchVendorLocationsByGeohashResponse* msg) {
  return *msg->status_;
}
void SearchVendorLocationsByGeohashResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SearchVendorLocationsByGeohashResponse::clear_attribs() {
  attribs_.Clear();
}
SearchVendorLocationsByGeohashResponse::SearchVendorLocationsByGeohashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
}
SearchVendorLocationsByGeohashResponse::SearchVendorLocationsByGeohashResponse(const SearchVendorLocationsByGeohashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
}

void SearchVendorLocationsByGeohashResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

SearchVendorLocationsByGeohashResponse::~SearchVendorLocationsByGeohashResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchVendorLocationsByGeohashResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SearchVendorLocationsByGeohashResponse::ArenaDtor(void* object) {
  SearchVendorLocationsByGeohashResponse* _this = reinterpret_cast< SearchVendorLocationsByGeohashResponse* >(object);
  (void)_this;
}
void SearchVendorLocationsByGeohashResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchVendorLocationsByGeohashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchVendorLocationsByGeohashResponse& SearchVendorLocationsByGeohashResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchVendorLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchVendorLocationsByGeohashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchVendorLocationsByGeohashResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchVendorLocationsByGeohashResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  return target;
}

size_t SearchVendorLocationsByGeohashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchVendorLocationsByGeohashResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVendorLocationsByGeohashResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchVendorLocationsByGeohashResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
    MergeFrom(*source);
  }
}

void SearchVendorLocationsByGeohashResponse::MergeFrom(const SearchVendorLocationsByGeohashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SearchVendorLocationsByGeohashResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVendorLocationsByGeohashResponse::CopyFrom(const SearchVendorLocationsByGeohashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVendorLocationsByGeohashResponse::IsInitialized() const {
  return true;
}

void SearchVendorLocationsByGeohashResponse::InternalSwap(SearchVendorLocationsByGeohashResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashResponse, count_)
      + sizeof(SearchVendorLocationsByGeohashResponse::count_)
      - PROTOBUF_FIELD_OFFSET(SearchVendorLocationsByGeohashResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchVendorLocationsByGeohashResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchLocationsByGeohashRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const SearchLocationsByGeohashRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
SearchLocationsByGeohashRequest::_Internal::requestheaders(const SearchLocationsByGeohashRequest* msg) {
  return *msg->requestheaders_;
}
void SearchLocationsByGeohashRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
SearchLocationsByGeohashRequest::SearchLocationsByGeohashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
}
SearchLocationsByGeohashRequest::SearchLocationsByGeohashRequest(const SearchLocationsByGeohashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geohash8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash8().empty()) {
    geohash8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash8(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
}

void SearchLocationsByGeohashRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base);
  geohash8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

SearchLocationsByGeohashRequest::~SearchLocationsByGeohashRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchLocationsByGeohashRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geohash8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void SearchLocationsByGeohashRequest::ArenaDtor(void* object) {
  SearchLocationsByGeohashRequest* _this = reinterpret_cast< SearchLocationsByGeohashRequest* >(object);
  (void)_this;
}
void SearchLocationsByGeohashRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchLocationsByGeohashRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchLocationsByGeohashRequest& SearchLocationsByGeohashRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchLocationsByGeohashRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchLocationsByGeohashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geohash8_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchLocationsByGeohashRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geohash8 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_geohash8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchLocationsByGeohashRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string geohash8 = 3;
  if (this->geohash8().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash8().data(), static_cast<int>(this->_internal_geohash8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_geohash8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  return target;
}

size_t SearchLocationsByGeohashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geohash8 = 3;
  if (this->geohash8().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash8());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchLocationsByGeohashRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchLocationsByGeohashRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchLocationsByGeohashRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
    MergeFrom(*source);
  }
}

void SearchLocationsByGeohashRequest::MergeFrom(const SearchLocationsByGeohashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geohash8().size() > 0) {
    _internal_set_geohash8(from._internal_geohash8());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void SearchLocationsByGeohashRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchLocationsByGeohashRequest::CopyFrom(const SearchLocationsByGeohashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchLocationsByGeohashRequest::IsInitialized() const {
  return true;
}

void SearchLocationsByGeohashRequest::InternalSwap(SearchLocationsByGeohashRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  geohash8_.Swap(&other->geohash8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashRequest, isstaleallowed_)
      + sizeof(SearchLocationsByGeohashRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchLocationsByGeohashRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchLocationsByGeohashResponseRecord::_Internal {
 public:
};

SearchLocationsByGeohashResponseRecord::SearchLocationsByGeohashResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
}
SearchLocationsByGeohashResponseRecord::SearchLocationsByGeohashResponseRecord(const SearchLocationsByGeohashResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_village().empty()) {
    village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_village(), 
      GetArena());
  }
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsil().empty()) {
    tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsil(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
}

void SearchLocationsByGeohashResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

SearchLocationsByGeohashResponseRecord::~SearchLocationsByGeohashResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchLocationsByGeohashResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  village_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchLocationsByGeohashResponseRecord::ArenaDtor(void* object) {
  SearchLocationsByGeohashResponseRecord* _this = reinterpret_cast< SearchLocationsByGeohashResponseRecord* >(object);
  (void)_this;
}
void SearchLocationsByGeohashResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchLocationsByGeohashResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchLocationsByGeohashResponseRecord& SearchLocationsByGeohashResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchLocationsByGeohashResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchLocationsByGeohashResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  village_.ClearToEmpty();
  tehsil_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  country_.ClearToEmpty();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchLocationsByGeohashResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string village = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_village();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsil = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tehsil();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchLocationsByGeohashResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // string village = 3;
  if (this->village().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_village().data(), static_cast<int>(this->_internal_village().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_village(), target);
  }

  // string tehsil = 4;
  if (this->tehsil().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsil().data(), static_cast<int>(this->_internal_tehsil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tehsil(), target);
  }

  // string district = 5;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_district(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  // string country = 7;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  return target;
}

size_t SearchLocationsByGeohashResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string village = 3;
  if (this->village().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_village());
  }

  // string tehsil = 4;
  if (this->tehsil().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsil());
  }

  // string district = 5;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string country = 7;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchLocationsByGeohashResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchLocationsByGeohashResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchLocationsByGeohashResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
    MergeFrom(*source);
  }
}

void SearchLocationsByGeohashResponseRecord::MergeFrom(const SearchLocationsByGeohashResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.village().size() > 0) {
    _internal_set_village(from._internal_village());
  }
  if (from.tehsil().size() > 0) {
    _internal_set_tehsil(from._internal_tehsil());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void SearchLocationsByGeohashResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchLocationsByGeohashResponseRecord::CopyFrom(const SearchLocationsByGeohashResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchLocationsByGeohashResponseRecord::IsInitialized() const {
  return true;
}

void SearchLocationsByGeohashResponseRecord::InternalSwap(SearchLocationsByGeohashResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  village_.Swap(&other->village_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsil_.Swap(&other->tehsil_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashResponseRecord, longitude_)
      + sizeof(SearchLocationsByGeohashResponseRecord::longitude_)
      - PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashResponseRecord, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchLocationsByGeohashResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchLocationsByGeohashResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const SearchLocationsByGeohashResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
SearchLocationsByGeohashResponse::_Internal::status(const SearchLocationsByGeohashResponse* msg) {
  return *msg->status_;
}
void SearchLocationsByGeohashResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SearchLocationsByGeohashResponse::clear_attribs() {
  attribs_.Clear();
}
SearchLocationsByGeohashResponse::SearchLocationsByGeohashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
}
SearchLocationsByGeohashResponse::SearchLocationsByGeohashResponse(const SearchLocationsByGeohashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
}

void SearchLocationsByGeohashResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

SearchLocationsByGeohashResponse::~SearchLocationsByGeohashResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchLocationsByGeohashResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SearchLocationsByGeohashResponse::ArenaDtor(void* object) {
  SearchLocationsByGeohashResponse* _this = reinterpret_cast< SearchLocationsByGeohashResponse* >(object);
  (void)_this;
}
void SearchLocationsByGeohashResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchLocationsByGeohashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchLocationsByGeohashResponse& SearchLocationsByGeohashResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchLocationsByGeohashResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SearchLocationsByGeohashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchLocationsByGeohashResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchLocationsByGeohashResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  return target;
}

size_t SearchLocationsByGeohashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchLocationsByGeohashResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchLocationsByGeohashResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchLocationsByGeohashResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
    MergeFrom(*source);
  }
}

void SearchLocationsByGeohashResponse::MergeFrom(const SearchLocationsByGeohashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SearchLocationsByGeohashResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchLocationsByGeohashResponse::CopyFrom(const SearchLocationsByGeohashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchLocationsByGeohashResponse::IsInitialized() const {
  return true;
}

void SearchLocationsByGeohashResponse::InternalSwap(SearchLocationsByGeohashResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashResponse, count_)
      + sizeof(SearchLocationsByGeohashResponse::count_)
      - PROTOBUF_FIELD_OFFSET(SearchLocationsByGeohashResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchLocationsByGeohashResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationDataByLatLngRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetLocationDataByLatLngRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetLocationDataByLatLngRequest::_Internal::requestheaders(const GetLocationDataByLatLngRequest* msg) {
  return *msg->requestheaders_;
}
void GetLocationDataByLatLngRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetLocationDataByLatLngRequest::GetLocationDataByLatLngRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
}
GetLocationDataByLatLngRequest::GetLocationDataByLatLngRequest(const GetLocationDataByLatLngRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
}

void GetLocationDataByLatLngRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetLocationDataByLatLngRequest::~GetLocationDataByLatLngRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationDataByLatLngRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetLocationDataByLatLngRequest::ArenaDtor(void* object) {
  GetLocationDataByLatLngRequest* _this = reinterpret_cast< GetLocationDataByLatLngRequest* >(object);
  (void)_this;
}
void GetLocationDataByLatLngRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationDataByLatLngRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationDataByLatLngRequest& GetLocationDataByLatLngRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationDataByLatLngRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationDataByLatLngRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationDataByLatLngRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationDataByLatLngRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  return target;
}

size_t GetLocationDataByLatLngRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationDataByLatLngRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationDataByLatLngRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationDataByLatLngRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
    MergeFrom(*source);
  }
}

void GetLocationDataByLatLngRequest::MergeFrom(const GetLocationDataByLatLngRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetLocationDataByLatLngRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationDataByLatLngRequest::CopyFrom(const GetLocationDataByLatLngRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationDataByLatLngRequest::IsInitialized() const {
  return true;
}

void GetLocationDataByLatLngRequest::InternalSwap(GetLocationDataByLatLngRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationDataByLatLngRequest, isstaleallowed_)
      + sizeof(GetLocationDataByLatLngRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetLocationDataByLatLngRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationDataByLatLngRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationDataByLatLngResponseRecord::_Internal {
 public:
};

GetLocationDataByLatLngResponseRecord::GetLocationDataByLatLngResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
}
GetLocationDataByLatLngResponseRecord::GetLocationDataByLatLngResponseRecord(const GetLocationDataByLatLngResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
}

void GetLocationDataByLatLngResponseRecord::SharedCtor() {
}

GetLocationDataByLatLngResponseRecord::~GetLocationDataByLatLngResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationDataByLatLngResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLocationDataByLatLngResponseRecord::ArenaDtor(void* object) {
  GetLocationDataByLatLngResponseRecord* _this = reinterpret_cast< GetLocationDataByLatLngResponseRecord* >(object);
  (void)_this;
}
void GetLocationDataByLatLngResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationDataByLatLngResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationDataByLatLngResponseRecord& GetLocationDataByLatLngResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationDataByLatLngResponseRecord_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationDataByLatLngResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationDataByLatLngResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationDataByLatLngResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  return target;
}

size_t GetLocationDataByLatLngResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationDataByLatLngResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationDataByLatLngResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationDataByLatLngResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
    MergeFrom(*source);
  }
}

void GetLocationDataByLatLngResponseRecord::MergeFrom(const GetLocationDataByLatLngResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLocationDataByLatLngResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationDataByLatLngResponseRecord::CopyFrom(const GetLocationDataByLatLngResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationDataByLatLngResponseRecord::IsInitialized() const {
  return true;
}

void GetLocationDataByLatLngResponseRecord::InternalSwap(GetLocationDataByLatLngResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationDataByLatLngResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationDataByLatLngResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetLocationDataByLatLngResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetLocationDataByLatLngResponse::_Internal::status(const GetLocationDataByLatLngResponse* msg) {
  return *msg->status_;
}
void GetLocationDataByLatLngResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetLocationDataByLatLngResponse::clear_attribs() {
  attribs_.Clear();
}
GetLocationDataByLatLngResponse::GetLocationDataByLatLngResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
}
GetLocationDataByLatLngResponse::GetLocationDataByLatLngResponse(const GetLocationDataByLatLngResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_village().empty()) {
    village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_village(), 
      GetArena());
  }
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsil().empty()) {
    tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsil(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
}

void GetLocationDataByLatLngResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto.base);
  village_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetLocationDataByLatLngResponse::~GetLocationDataByLatLngResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationDataByLatLngResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  village_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsil_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetLocationDataByLatLngResponse::ArenaDtor(void* object) {
  GetLocationDataByLatLngResponse* _this = reinterpret_cast< GetLocationDataByLatLngResponse* >(object);
  (void)_this;
}
void GetLocationDataByLatLngResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationDataByLatLngResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationDataByLatLngResponse& GetLocationDataByLatLngResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationDataByLatLngResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationDataByLatLngResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  village_.ClearToEmpty();
  tehsil_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  country_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationDataByLatLngResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string village = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_village();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsil = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tehsil();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationDataByLatLngResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // string village = 6;
  if (this->village().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_village().data(), static_cast<int>(this->_internal_village().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_village(), target);
  }

  // string tehsil = 7;
  if (this->tehsil().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsil().data(), static_cast<int>(this->_internal_tehsil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tehsil(), target);
  }

  // string district = 8;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_district(), target);
  }

  // string state = 9;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_state(), target);
  }

  // string country = 10;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  return target;
}

size_t GetLocationDataByLatLngResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string village = 6;
  if (this->village().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_village());
  }

  // string tehsil = 7;
  if (this->tehsil().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsil());
  }

  // string district = 8;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 9;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string country = 10;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationDataByLatLngResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationDataByLatLngResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationDataByLatLngResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
    MergeFrom(*source);
  }
}

void GetLocationDataByLatLngResponse::MergeFrom(const GetLocationDataByLatLngResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.village().size() > 0) {
    _internal_set_village(from._internal_village());
  }
  if (from.tehsil().size() > 0) {
    _internal_set_tehsil(from._internal_tehsil());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetLocationDataByLatLngResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationDataByLatLngResponse::CopyFrom(const GetLocationDataByLatLngResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationDataByLatLngResponse::IsInitialized() const {
  return true;
}

void GetLocationDataByLatLngResponse::InternalSwap(GetLocationDataByLatLngResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  village_.Swap(&other->village_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsil_.Swap(&other->tehsil_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationDataByLatLngResponse, count_)
      + sizeof(GetLocationDataByLatLngResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetLocationDataByLatLngResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationDataByLatLngResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddVendorApiLedgerRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddVendorApiLedgerRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddVendorApiLedgerRequest::_Internal::requestheaders(const AddVendorApiLedgerRequest* msg) {
  return *msg->requestheaders_;
}
void AddVendorApiLedgerRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AddVendorApiLedgerRequest::AddVendorApiLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
}
AddVendorApiLedgerRequest::AddVendorApiLedgerRequest(const AddVendorApiLedgerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor().empty()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArena());
  }
  apiname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apiname().empty()) {
    apiname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apiname(), 
      GetArena());
  }
  responsestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_responsestatus().empty()) {
    responsestatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responsestatus(), 
      GetArena());
  }
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_params().empty()) {
    params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_params(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
}

void AddVendorApiLedgerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apiname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responsestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

AddVendorApiLedgerRequest::~AddVendorApiLedgerRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddVendorApiLedgerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apiname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responsestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddVendorApiLedgerRequest::ArenaDtor(void* object) {
  AddVendorApiLedgerRequest* _this = reinterpret_cast< AddVendorApiLedgerRequest* >(object);
  (void)_this;
}
void AddVendorApiLedgerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddVendorApiLedgerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddVendorApiLedgerRequest& AddVendorApiLedgerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddVendorApiLedgerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_.ClearToEmpty();
  apiname_.ClearToEmpty();
  responsestatus_.ClearToEmpty();
  params_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddVendorApiLedgerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apiName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_apiname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string responseStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_responsestatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddVendorApiLedgerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string vendor = 2;
  if (this->vendor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor(), target);
  }

  // string apiName = 3;
  if (this->apiname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apiname().data(), static_cast<int>(this->_internal_apiname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_apiname(), target);
  }

  // string responseStatus = 4;
  if (this->responsestatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsestatus().data(), static_cast<int>(this->_internal_responsestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_responsestatus(), target);
  }

  // string params = 5;
  if (this->params().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_params().data(), static_cast<int>(this->_internal_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  return target;
}

size_t AddVendorApiLedgerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor = 2;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string apiName = 3;
  if (this->apiname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apiname());
  }

  // string responseStatus = 4;
  if (this->responsestatus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsestatus());
  }

  // string params = 5;
  if (this->params().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddVendorApiLedgerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVendorApiLedgerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddVendorApiLedgerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
    MergeFrom(*source);
  }
}

void AddVendorApiLedgerRequest::MergeFrom(const AddVendorApiLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendor().size() > 0) {
    _internal_set_vendor(from._internal_vendor());
  }
  if (from.apiname().size() > 0) {
    _internal_set_apiname(from._internal_apiname());
  }
  if (from.responsestatus().size() > 0) {
    _internal_set_responsestatus(from._internal_responsestatus());
  }
  if (from.params().size() > 0) {
    _internal_set_params(from._internal_params());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void AddVendorApiLedgerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVendorApiLedgerRequest::CopyFrom(const AddVendorApiLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVendorApiLedgerRequest::IsInitialized() const {
  return true;
}

void AddVendorApiLedgerRequest::InternalSwap(AddVendorApiLedgerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apiname_.Swap(&other->apiname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  responsestatus_.Swap(&other->responsestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  params_.Swap(&other->params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddVendorApiLedgerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddVendorApiLedgerRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddVendorApiLedgerRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddVendorApiLedgerRequest::_Internal::requestheaders(const BulkAddVendorApiLedgerRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddVendorApiLedgerRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddVendorApiLedgerRequest::BulkAddVendorApiLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
}
BulkAddVendorApiLedgerRequest::BulkAddVendorApiLedgerRequest(const BulkAddVendorApiLedgerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
}

void BulkAddVendorApiLedgerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddVendorApiLedgerRequest::~BulkAddVendorApiLedgerRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddVendorApiLedgerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddVendorApiLedgerRequest::ArenaDtor(void* object) {
  BulkAddVendorApiLedgerRequest* _this = reinterpret_cast< BulkAddVendorApiLedgerRequest* >(object);
  (void)_this;
}
void BulkAddVendorApiLedgerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddVendorApiLedgerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddVendorApiLedgerRequest& BulkAddVendorApiLedgerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddVendorApiLedgerRequest_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddVendorApiLedgerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddVendorApiLedgerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddVendorApiLedgerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  return target;
}

size_t BulkAddVendorApiLedgerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddVendorApiLedgerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddVendorApiLedgerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddVendorApiLedgerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
    MergeFrom(*source);
  }
}

void BulkAddVendorApiLedgerRequest::MergeFrom(const BulkAddVendorApiLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddVendorApiLedgerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddVendorApiLedgerRequest::CopyFrom(const BulkAddVendorApiLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddVendorApiLedgerRequest::IsInitialized() const {
  return true;
}

void BulkAddVendorApiLedgerRequest::InternalSwap(BulkAddVendorApiLedgerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddVendorApiLedgerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddVendorApiLedgerResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddVendorApiLedgerResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddVendorApiLedgerResponse::_Internal::status(const AddVendorApiLedgerResponse* msg) {
  return *msg->status_;
}
void AddVendorApiLedgerResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddVendorApiLedgerResponse::clear_attribs() {
  attribs_.Clear();
}
AddVendorApiLedgerResponse::AddVendorApiLedgerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
}
AddVendorApiLedgerResponse::AddVendorApiLedgerResponse(const AddVendorApiLedgerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
}

void AddVendorApiLedgerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddVendorApiLedgerResponse::~AddVendorApiLedgerResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddVendorApiLedgerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddVendorApiLedgerResponse::ArenaDtor(void* object) {
  AddVendorApiLedgerResponse* _this = reinterpret_cast< AddVendorApiLedgerResponse* >(object);
  (void)_this;
}
void AddVendorApiLedgerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddVendorApiLedgerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddVendorApiLedgerResponse& AddVendorApiLedgerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddVendorApiLedgerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddVendorApiLedgerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddVendorApiLedgerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  return target;
}

size_t AddVendorApiLedgerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddVendorApiLedgerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVendorApiLedgerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddVendorApiLedgerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
    MergeFrom(*source);
  }
}

void AddVendorApiLedgerResponse::MergeFrom(const AddVendorApiLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddVendorApiLedgerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVendorApiLedgerResponse::CopyFrom(const AddVendorApiLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVendorApiLedgerResponse::IsInitialized() const {
  return true;
}

void AddVendorApiLedgerResponse::InternalSwap(AddVendorApiLedgerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddVendorApiLedgerResponse, count_)
      + sizeof(AddVendorApiLedgerResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddVendorApiLedgerResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddVendorApiLedgerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddVendorApiLedgerResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddVendorApiLedgerResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddVendorApiLedgerResponse::_Internal::status(const BulkAddVendorApiLedgerResponse* msg) {
  return *msg->status_;
}
void BulkAddVendorApiLedgerResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddVendorApiLedgerResponse::BulkAddVendorApiLedgerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
}
BulkAddVendorApiLedgerResponse::BulkAddVendorApiLedgerResponse(const BulkAddVendorApiLedgerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
}

void BulkAddVendorApiLedgerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddVendorApiLedgerResponse::~BulkAddVendorApiLedgerResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddVendorApiLedgerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddVendorApiLedgerResponse::ArenaDtor(void* object) {
  BulkAddVendorApiLedgerResponse* _this = reinterpret_cast< BulkAddVendorApiLedgerResponse* >(object);
  (void)_this;
}
void BulkAddVendorApiLedgerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddVendorApiLedgerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddVendorApiLedgerResponse& BulkAddVendorApiLedgerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddVendorApiLedgerResponse_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddVendorApiLedgerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddVendorApiLedgerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddVendorApiLedgerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  return target;
}

size_t BulkAddVendorApiLedgerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddVendorApiLedgerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddVendorApiLedgerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddVendorApiLedgerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
    MergeFrom(*source);
  }
}

void BulkAddVendorApiLedgerResponse::MergeFrom(const BulkAddVendorApiLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddVendorApiLedgerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddVendorApiLedgerResponse::CopyFrom(const BulkAddVendorApiLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddVendorApiLedgerResponse::IsInitialized() const {
  return true;
}

void BulkAddVendorApiLedgerResponse::InternalSwap(BulkAddVendorApiLedgerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddVendorApiLedgerResponse, count_)
      + sizeof(BulkAddVendorApiLedgerResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddVendorApiLedgerResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddVendorApiLedgerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiRequests::_Internal {
 public:
};

MultiRequests::MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.MultiRequests)
}
MultiRequests::MultiRequests(const MultiRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ontxn_ = from.ontxn_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.MultiRequests)
}

void MultiRequests::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto.base);
  ontxn_ = false;
}

MultiRequests::~MultiRequests() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.MultiRequests)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiRequests::ArenaDtor(void* object) {
  MultiRequests* _this = reinterpret_cast< MultiRequests* >(object);
  (void)_this;
}
void MultiRequests::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiRequests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRequests& MultiRequests::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRequests_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  ontxn_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiRequests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool onTxn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ontxn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRequests::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ontxn(), target);
  }

  // repeated .farm.nurture.location.service.proto.Request request = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.MultiRequests)
  return target;
}

size_t MultiRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.MultiRequests)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Request request = 2;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRequests::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRequests* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRequests>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.MultiRequests)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.MultiRequests)
    MergeFrom(*source);
  }
}

void MultiRequests::MergeFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  if (from.ontxn() != 0) {
    _internal_set_ontxn(from._internal_ontxn());
  }
}

void MultiRequests::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRequests::CopyFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRequests::IsInitialized() const {
  return true;
}

void MultiRequests::InternalSwap(MultiRequests* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_.InternalSwap(&other->request_);
  swap(ontxn_, other->ontxn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRequests::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::farm::nurture::location::service::proto::InsertLocationRequest& reqinsertlocation(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& reqinsertlocationbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& reqinsertlocations2cell(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& reqinsertlocations2cellbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::InsertConfigRequest& reqinsertconfig(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& reqinsertconfigbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& reqfetchlocationbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& reqfetchlocationbycodeandnamespace(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& reqfetchs2cellbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& reqfetchs2cellbylocation(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& reqfetchs2cellbylocationid(const Request* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& requpdatelocationbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& requpdatelocationbyidbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& requpdatelocationlabelbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& requpdatelocationlabelbyidbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& requpdatedeletes2cellbylocation(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& requpdatedeletes2cellbylocationbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& reqfetchconfigbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::AddLocationRequest& reqaddlocation(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkAddLocationRequest& reqaddlocationbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationRequest& requpdatelocation(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& requpdatelocationbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& reqgetlocationswithboundary(const Request* msg);
  static const ::farm::nurture::location::service::proto::GetLocationsRequest& reqgetlocations(const Request* msg);
  static const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& reqgetchildgeographies(const Request* msg);
  static const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& reqinsertlocationwithoutboundary(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& reqinsertlocationwithoutboundarybulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& requpdatelocationwithoutboundarybyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& requpdatelocationwithoutboundarybyidbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& reqdeletelocationbyid(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& reqdeletelocationbyidbulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest& reqfetchduplicatevillages(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest& reqfetchduplicatevillagesbysdtvlatlong(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest& reqfetchduplicatetehsilsbysdtvlatlong(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest& reqfetchduplicatedistrictsbysdtvlatlong(const Request* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest& reqfetchduplicatestatesbysdtvlatlong(const Request* msg);
  static const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest& reqgetduplicategeographies(const Request* msg);
  static const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& reqinsertvendorlocationdata(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest& reqinsertvendorlocationdatabulk(const Request* msg);
  static const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest& reqsearchvendorlocationsbygeohash(const Request* msg);
  static const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest& reqsearchlocationsbygeohash(const Request* msg);
  static const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest& reqgetlocationdatabylatlng(const Request* msg);
  static const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& reqaddvendorapiledger(const Request* msg);
  static const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest& reqaddvendorapiledgerbulk(const Request* msg);
};

const ::farm::nurture::location::service::proto::InsertLocationRequest&
Request::_Internal::reqinsertlocation(const Request* msg) {
  return *msg->ARequest_.reqinsertlocation_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationRequest&
Request::_Internal::reqinsertlocationbulk(const Request* msg) {
  return *msg->ARequest_.reqinsertlocationbulk_;
}
const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest&
Request::_Internal::reqinsertlocations2cell(const Request* msg) {
  return *msg->ARequest_.reqinsertlocations2cell_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest&
Request::_Internal::reqinsertlocations2cellbulk(const Request* msg) {
  return *msg->ARequest_.reqinsertlocations2cellbulk_;
}
const ::farm::nurture::location::service::proto::InsertConfigRequest&
Request::_Internal::reqinsertconfig(const Request* msg) {
  return *msg->ARequest_.reqinsertconfig_;
}
const ::farm::nurture::location::service::proto::BulkInsertConfigRequest&
Request::_Internal::reqinsertconfigbulk(const Request* msg) {
  return *msg->ARequest_.reqinsertconfigbulk_;
}
const ::farm::nurture::location::service::proto::FetchLocationByIdRequest&
Request::_Internal::reqfetchlocationbyid(const Request* msg) {
  return *msg->ARequest_.reqfetchlocationbyid_;
}
const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest&
Request::_Internal::reqfetchlocationbycodeandnamespace(const Request* msg) {
  return *msg->ARequest_.reqfetchlocationbycodeandnamespace_;
}
const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest&
Request::_Internal::reqfetchs2cellbyid(const Request* msg) {
  return *msg->ARequest_.reqfetchs2cellbyid_;
}
const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest&
Request::_Internal::reqfetchs2cellbylocation(const Request* msg) {
  return *msg->ARequest_.reqfetchs2cellbylocation_;
}
const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest&
Request::_Internal::reqfetchs2cellbylocationid(const Request* msg) {
  return *msg->ARequest_.reqfetchs2cellbylocationid_;
}
const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest&
Request::_Internal::requpdatelocationbyid(const Request* msg) {
  return *msg->ARequest_.requpdatelocationbyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest&
Request::_Internal::requpdatelocationbyidbulk(const Request* msg) {
  return *msg->ARequest_.requpdatelocationbyidbulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest&
Request::_Internal::requpdatelocationlabelbyid(const Request* msg) {
  return *msg->ARequest_.requpdatelocationlabelbyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest&
Request::_Internal::requpdatelocationlabelbyidbulk(const Request* msg) {
  return *msg->ARequest_.requpdatelocationlabelbyidbulk_;
}
const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest&
Request::_Internal::requpdatedeletes2cellbylocation(const Request* msg) {
  return *msg->ARequest_.requpdatedeletes2cellbylocation_;
}
const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest&
Request::_Internal::requpdatedeletes2cellbylocationbulk(const Request* msg) {
  return *msg->ARequest_.requpdatedeletes2cellbylocationbulk_;
}
const ::farm::nurture::location::service::proto::FetchConfigByIdRequest&
Request::_Internal::reqfetchconfigbyid(const Request* msg) {
  return *msg->ARequest_.reqfetchconfigbyid_;
}
const ::farm::nurture::location::service::proto::AddLocationRequest&
Request::_Internal::reqaddlocation(const Request* msg) {
  return *msg->ARequest_.reqaddlocation_;
}
const ::farm::nurture::location::service::proto::BulkAddLocationRequest&
Request::_Internal::reqaddlocationbulk(const Request* msg) {
  return *msg->ARequest_.reqaddlocationbulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationRequest&
Request::_Internal::requpdatelocation(const Request* msg) {
  return *msg->ARequest_.requpdatelocation_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest&
Request::_Internal::requpdatelocationbulk(const Request* msg) {
  return *msg->ARequest_.requpdatelocationbulk_;
}
const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest&
Request::_Internal::reqgetlocationswithboundary(const Request* msg) {
  return *msg->ARequest_.reqgetlocationswithboundary_;
}
const ::farm::nurture::location::service::proto::GetLocationsRequest&
Request::_Internal::reqgetlocations(const Request* msg) {
  return *msg->ARequest_.reqgetlocations_;
}
const ::farm::nurture::location::service::proto::GetChildGeographiesRequest&
Request::_Internal::reqgetchildgeographies(const Request* msg) {
  return *msg->ARequest_.reqgetchildgeographies_;
}
const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest&
Request::_Internal::reqinsertlocationwithoutboundary(const Request* msg) {
  return *msg->ARequest_.reqinsertlocationwithoutboundary_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest&
Request::_Internal::reqinsertlocationwithoutboundarybulk(const Request* msg) {
  return *msg->ARequest_.reqinsertlocationwithoutboundarybulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest&
Request::_Internal::requpdatelocationwithoutboundarybyid(const Request* msg) {
  return *msg->ARequest_.requpdatelocationwithoutboundarybyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest&
Request::_Internal::requpdatelocationwithoutboundarybyidbulk(const Request* msg) {
  return *msg->ARequest_.requpdatelocationwithoutboundarybyidbulk_;
}
const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest&
Request::_Internal::reqdeletelocationbyid(const Request* msg) {
  return *msg->ARequest_.reqdeletelocationbyid_;
}
const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest&
Request::_Internal::reqdeletelocationbyidbulk(const Request* msg) {
  return *msg->ARequest_.reqdeletelocationbyidbulk_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest&
Request::_Internal::reqfetchduplicatevillages(const Request* msg) {
  return *msg->ARequest_.reqfetchduplicatevillages_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest&
Request::_Internal::reqfetchduplicatevillagesbysdtvlatlong(const Request* msg) {
  return *msg->ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest&
Request::_Internal::reqfetchduplicatetehsilsbysdtvlatlong(const Request* msg) {
  return *msg->ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest&
Request::_Internal::reqfetchduplicatedistrictsbysdtvlatlong(const Request* msg) {
  return *msg->ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest&
Request::_Internal::reqfetchduplicatestatesbysdtvlatlong(const Request* msg) {
  return *msg->ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest&
Request::_Internal::reqgetduplicategeographies(const Request* msg) {
  return *msg->ARequest_.reqgetduplicategeographies_;
}
const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest&
Request::_Internal::reqinsertvendorlocationdata(const Request* msg) {
  return *msg->ARequest_.reqinsertvendorlocationdata_;
}
const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest&
Request::_Internal::reqinsertvendorlocationdatabulk(const Request* msg) {
  return *msg->ARequest_.reqinsertvendorlocationdatabulk_;
}
const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest&
Request::_Internal::reqsearchvendorlocationsbygeohash(const Request* msg) {
  return *msg->ARequest_.reqsearchvendorlocationsbygeohash_;
}
const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest&
Request::_Internal::reqsearchlocationsbygeohash(const Request* msg) {
  return *msg->ARequest_.reqsearchlocationsbygeohash_;
}
const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest&
Request::_Internal::reqgetlocationdatabylatlng(const Request* msg) {
  return *msg->ARequest_.reqgetlocationdatabylatlng_;
}
const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest&
Request::_Internal::reqaddvendorapiledger(const Request* msg) {
  return *msg->ARequest_.reqaddvendorapiledger_;
}
const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest&
Request::_Internal::reqaddvendorapiledgerbulk(const Request* msg) {
  return *msg->ARequest_.reqaddvendorapiledgerbulk_;
}
void Request::set_allocated_reqinsertlocation(::farm::nurture::location::service::proto::InsertLocationRequest* reqinsertlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocation);
    if (message_arena != submessage_arena) {
      reqinsertlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocation, submessage_arena);
    }
    set_has_reqinsertlocation();
    ARequest_.reqinsertlocation_ = reqinsertlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocation)
}
void Request::set_allocated_reqinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationRequest* reqinsertlocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocationbulk);
    if (message_arena != submessage_arena) {
      reqinsertlocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocationbulk, submessage_arena);
    }
    set_has_reqinsertlocationbulk();
    ARequest_.reqinsertlocationbulk_ = reqinsertlocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
}
void Request::set_allocated_reqinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellRequest* reqinsertlocations2cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocations2cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocations2cell);
    if (message_arena != submessage_arena) {
      reqinsertlocations2cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocations2cell, submessage_arena);
    }
    set_has_reqinsertlocations2cell();
    ARequest_.reqinsertlocations2cell_ = reqinsertlocations2cell;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
}
void Request::set_allocated_reqinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* reqinsertlocations2cellbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocations2cellbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocations2cellbulk);
    if (message_arena != submessage_arena) {
      reqinsertlocations2cellbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocations2cellbulk, submessage_arena);
    }
    set_has_reqinsertlocations2cellbulk();
    ARequest_.reqinsertlocations2cellbulk_ = reqinsertlocations2cellbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
}
void Request::set_allocated_reqinsertconfig(::farm::nurture::location::service::proto::InsertConfigRequest* reqinsertconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertconfig);
    if (message_arena != submessage_arena) {
      reqinsertconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertconfig, submessage_arena);
    }
    set_has_reqinsertconfig();
    ARequest_.reqinsertconfig_ = reqinsertconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertConfig)
}
void Request::set_allocated_reqinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigRequest* reqinsertconfigbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertconfigbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertconfigbulk);
    if (message_arena != submessage_arena) {
      reqinsertconfigbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertconfigbulk, submessage_arena);
    }
    set_has_reqinsertconfigbulk();
    ARequest_.reqinsertconfigbulk_ = reqinsertconfigbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
}
void Request::set_allocated_reqfetchlocationbyid(::farm::nurture::location::service::proto::FetchLocationByIdRequest* reqfetchlocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchlocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchlocationbyid);
    if (message_arena != submessage_arena) {
      reqfetchlocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchlocationbyid, submessage_arena);
    }
    set_has_reqfetchlocationbyid();
    ARequest_.reqfetchlocationbyid_ = reqfetchlocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchLocationById)
}
void Request::set_allocated_reqfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* reqfetchlocationbycodeandnamespace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchlocationbycodeandnamespace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchlocationbycodeandnamespace);
    if (message_arena != submessage_arena) {
      reqfetchlocationbycodeandnamespace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchlocationbycodeandnamespace, submessage_arena);
    }
    set_has_reqfetchlocationbycodeandnamespace();
    ARequest_.reqfetchlocationbycodeandnamespace_ = reqfetchlocationbycodeandnamespace;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
}
void Request::set_allocated_reqfetchs2cellbyid(::farm::nurture::location::service::proto::FetchS2CellByIdRequest* reqfetchs2cellbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchs2cellbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchs2cellbyid);
    if (message_arena != submessage_arena) {
      reqfetchs2cellbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchs2cellbyid, submessage_arena);
    }
    set_has_reqfetchs2cellbyid();
    ARequest_.reqfetchs2cellbyid_ = reqfetchs2cellbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
}
void Request::set_allocated_reqfetchs2cellbylocation(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* reqfetchs2cellbylocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchs2cellbylocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchs2cellbylocation);
    if (message_arena != submessage_arena) {
      reqfetchs2cellbylocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchs2cellbylocation, submessage_arena);
    }
    set_has_reqfetchs2cellbylocation();
    ARequest_.reqfetchs2cellbylocation_ = reqfetchs2cellbylocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
}
void Request::set_allocated_reqfetchs2cellbylocationid(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* reqfetchs2cellbylocationid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchs2cellbylocationid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchs2cellbylocationid);
    if (message_arena != submessage_arena) {
      reqfetchs2cellbylocationid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchs2cellbylocationid, submessage_arena);
    }
    set_has_reqfetchs2cellbylocationid();
    ARequest_.reqfetchs2cellbylocationid_ = reqfetchs2cellbylocationid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
}
void Request::set_allocated_requpdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdRequest* requpdatelocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationbyid);
    if (message_arena != submessage_arena) {
      requpdatelocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationbyid, submessage_arena);
    }
    set_has_requpdatelocationbyid();
    ARequest_.requpdatelocationbyid_ = requpdatelocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
}
void Request::set_allocated_requpdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* requpdatelocationbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationbyidbulk);
    if (message_arena != submessage_arena) {
      requpdatelocationbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationbyidbulk, submessage_arena);
    }
    set_has_requpdatelocationbyidbulk();
    ARequest_.requpdatelocationbyidbulk_ = requpdatelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
}
void Request::set_allocated_requpdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* requpdatelocationlabelbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationlabelbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationlabelbyid);
    if (message_arena != submessage_arena) {
      requpdatelocationlabelbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationlabelbyid, submessage_arena);
    }
    set_has_requpdatelocationlabelbyid();
    ARequest_.requpdatelocationlabelbyid_ = requpdatelocationlabelbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
}
void Request::set_allocated_requpdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* requpdatelocationlabelbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationlabelbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationlabelbyidbulk);
    if (message_arena != submessage_arena) {
      requpdatelocationlabelbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationlabelbyidbulk, submessage_arena);
    }
    set_has_requpdatelocationlabelbyidbulk();
    ARequest_.requpdatelocationlabelbyidbulk_ = requpdatelocationlabelbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
}
void Request::set_allocated_requpdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatedeletes2cellbylocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatedeletes2cellbylocation);
    if (message_arena != submessage_arena) {
      requpdatedeletes2cellbylocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatedeletes2cellbylocation, submessage_arena);
    }
    set_has_requpdatedeletes2cellbylocation();
    ARequest_.requpdatedeletes2cellbylocation_ = requpdatedeletes2cellbylocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
}
void Request::set_allocated_requpdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatedeletes2cellbylocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatedeletes2cellbylocationbulk);
    if (message_arena != submessage_arena) {
      requpdatedeletes2cellbylocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatedeletes2cellbylocationbulk, submessage_arena);
    }
    set_has_requpdatedeletes2cellbylocationbulk();
    ARequest_.requpdatedeletes2cellbylocationbulk_ = requpdatedeletes2cellbylocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
}
void Request::set_allocated_reqfetchconfigbyid(::farm::nurture::location::service::proto::FetchConfigByIdRequest* reqfetchconfigbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchconfigbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchconfigbyid);
    if (message_arena != submessage_arena) {
      reqfetchconfigbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchconfigbyid, submessage_arena);
    }
    set_has_reqfetchconfigbyid();
    ARequest_.reqfetchconfigbyid_ = reqfetchconfigbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchConfigById)
}
void Request::set_allocated_reqaddlocation(::farm::nurture::location::service::proto::AddLocationRequest* reqaddlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddlocation);
    if (message_arena != submessage_arena) {
      reqaddlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddlocation, submessage_arena);
    }
    set_has_reqaddlocation();
    ARequest_.reqaddlocation_ = reqaddlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqAddLocation)
}
void Request::set_allocated_reqaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationRequest* reqaddlocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddlocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddlocationbulk);
    if (message_arena != submessage_arena) {
      reqaddlocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddlocationbulk, submessage_arena);
    }
    set_has_reqaddlocationbulk();
    ARequest_.reqaddlocationbulk_ = reqaddlocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
}
void Request::set_allocated_requpdatelocation(::farm::nurture::location::service::proto::UpdateLocationRequest* requpdatelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocation);
    if (message_arena != submessage_arena) {
      requpdatelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocation, submessage_arena);
    }
    set_has_requpdatelocation();
    ARequest_.requpdatelocation_ = requpdatelocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocation)
}
void Request::set_allocated_requpdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationRequest* requpdatelocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationbulk);
    if (message_arena != submessage_arena) {
      requpdatelocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationbulk, submessage_arena);
    }
    set_has_requpdatelocationbulk();
    ARequest_.requpdatelocationbulk_ = requpdatelocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
}
void Request::set_allocated_reqgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* reqgetlocationswithboundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetlocationswithboundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetlocationswithboundary);
    if (message_arena != submessage_arena) {
      reqgetlocationswithboundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetlocationswithboundary, submessage_arena);
    }
    set_has_reqgetlocationswithboundary();
    ARequest_.reqgetlocationswithboundary_ = reqgetlocationswithboundary;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
}
void Request::set_allocated_reqgetlocations(::farm::nurture::location::service::proto::GetLocationsRequest* reqgetlocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetlocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetlocations);
    if (message_arena != submessage_arena) {
      reqgetlocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetlocations, submessage_arena);
    }
    set_has_reqgetlocations();
    ARequest_.reqgetlocations_ = reqgetlocations;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocations)
}
void Request::set_allocated_reqgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesRequest* reqgetchildgeographies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetchildgeographies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetchildgeographies);
    if (message_arena != submessage_arena) {
      reqgetchildgeographies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetchildgeographies, submessage_arena);
    }
    set_has_reqgetchildgeographies();
    ARequest_.reqgetchildgeographies_ = reqgetchildgeographies;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
}
void Request::set_allocated_reqinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocationwithoutboundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocationwithoutboundary);
    if (message_arena != submessage_arena) {
      reqinsertlocationwithoutboundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocationwithoutboundary, submessage_arena);
    }
    set_has_reqinsertlocationwithoutboundary();
    ARequest_.reqinsertlocationwithoutboundary_ = reqinsertlocationwithoutboundary;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
}
void Request::set_allocated_reqinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundarybulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertlocationwithoutboundarybulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertlocationwithoutboundarybulk);
    if (message_arena != submessage_arena) {
      reqinsertlocationwithoutboundarybulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertlocationwithoutboundarybulk, submessage_arena);
    }
    set_has_reqinsertlocationwithoutboundarybulk();
    ARequest_.reqinsertlocationwithoutboundarybulk_ = reqinsertlocationwithoutboundarybulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
}
void Request::set_allocated_requpdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationwithoutboundarybyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationwithoutboundarybyid);
    if (message_arena != submessage_arena) {
      requpdatelocationwithoutboundarybyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationwithoutboundarybyid, submessage_arena);
    }
    set_has_requpdatelocationwithoutboundarybyid();
    ARequest_.requpdatelocationwithoutboundarybyid_ = requpdatelocationwithoutboundarybyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
}
void Request::set_allocated_requpdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatelocationwithoutboundarybyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatelocationwithoutboundarybyidbulk);
    if (message_arena != submessage_arena) {
      requpdatelocationwithoutboundarybyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatelocationwithoutboundarybyidbulk, submessage_arena);
    }
    set_has_requpdatelocationwithoutboundarybyidbulk();
    ARequest_.requpdatelocationwithoutboundarybyidbulk_ = requpdatelocationwithoutboundarybyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
}
void Request::set_allocated_reqdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdRequest* reqdeletelocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqdeletelocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqdeletelocationbyid);
    if (message_arena != submessage_arena) {
      reqdeletelocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqdeletelocationbyid, submessage_arena);
    }
    set_has_reqdeletelocationbyid();
    ARequest_.reqdeletelocationbyid_ = reqdeletelocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
}
void Request::set_allocated_reqdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* reqdeletelocationbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqdeletelocationbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqdeletelocationbyidbulk);
    if (message_arena != submessage_arena) {
      reqdeletelocationbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqdeletelocationbyidbulk, submessage_arena);
    }
    set_has_reqdeletelocationbyidbulk();
    ARequest_.reqdeletelocationbyidbulk_ = reqdeletelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
}
void Request::set_allocated_reqfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* reqfetchduplicatevillages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchduplicatevillages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchduplicatevillages);
    if (message_arena != submessage_arena) {
      reqfetchduplicatevillages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchduplicatevillages, submessage_arena);
    }
    set_has_reqfetchduplicatevillages();
    ARequest_.reqfetchduplicatevillages_ = reqfetchduplicatevillages;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
}
void Request::set_allocated_reqfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* reqfetchduplicatevillagesbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchduplicatevillagesbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchduplicatevillagesbysdtvlatlong);
    if (message_arena != submessage_arena) {
      reqfetchduplicatevillagesbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchduplicatevillagesbysdtvlatlong, submessage_arena);
    }
    set_has_reqfetchduplicatevillagesbysdtvlatlong();
    ARequest_.reqfetchduplicatevillagesbysdtvlatlong_ = reqfetchduplicatevillagesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
}
void Request::set_allocated_reqfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* reqfetchduplicatetehsilsbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchduplicatetehsilsbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchduplicatetehsilsbysdtvlatlong);
    if (message_arena != submessage_arena) {
      reqfetchduplicatetehsilsbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchduplicatetehsilsbysdtvlatlong, submessage_arena);
    }
    set_has_reqfetchduplicatetehsilsbysdtvlatlong();
    ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_ = reqfetchduplicatetehsilsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
}
void Request::set_allocated_reqfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* reqfetchduplicatedistrictsbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchduplicatedistrictsbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchduplicatedistrictsbysdtvlatlong);
    if (message_arena != submessage_arena) {
      reqfetchduplicatedistrictsbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchduplicatedistrictsbysdtvlatlong, submessage_arena);
    }
    set_has_reqfetchduplicatedistrictsbysdtvlatlong();
    ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_ = reqfetchduplicatedistrictsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
}
void Request::set_allocated_reqfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* reqfetchduplicatestatesbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfetchduplicatestatesbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfetchduplicatestatesbysdtvlatlong);
    if (message_arena != submessage_arena) {
      reqfetchduplicatestatesbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfetchduplicatestatesbysdtvlatlong, submessage_arena);
    }
    set_has_reqfetchduplicatestatesbysdtvlatlong();
    ARequest_.reqfetchduplicatestatesbysdtvlatlong_ = reqfetchduplicatestatesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
}
void Request::set_allocated_reqgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* reqgetduplicategeographies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetduplicategeographies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetduplicategeographies);
    if (message_arena != submessage_arena) {
      reqgetduplicategeographies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetduplicategeographies, submessage_arena);
    }
    set_has_reqgetduplicategeographies();
    ARequest_.reqgetduplicategeographies_ = reqgetduplicategeographies;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
}
void Request::set_allocated_reqinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* reqinsertvendorlocationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertvendorlocationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertvendorlocationdata);
    if (message_arena != submessage_arena) {
      reqinsertvendorlocationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertvendorlocationdata, submessage_arena);
    }
    set_has_reqinsertvendorlocationdata();
    ARequest_.reqinsertvendorlocationdata_ = reqinsertvendorlocationdata;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
}
void Request::set_allocated_reqinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* reqinsertvendorlocationdatabulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqinsertvendorlocationdatabulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinsertvendorlocationdatabulk);
    if (message_arena != submessage_arena) {
      reqinsertvendorlocationdatabulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinsertvendorlocationdatabulk, submessage_arena);
    }
    set_has_reqinsertvendorlocationdatabulk();
    ARequest_.reqinsertvendorlocationdatabulk_ = reqinsertvendorlocationdatabulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
}
void Request::set_allocated_reqsearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* reqsearchvendorlocationsbygeohash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqsearchvendorlocationsbygeohash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqsearchvendorlocationsbygeohash);
    if (message_arena != submessage_arena) {
      reqsearchvendorlocationsbygeohash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqsearchvendorlocationsbygeohash, submessage_arena);
    }
    set_has_reqsearchvendorlocationsbygeohash();
    ARequest_.reqsearchvendorlocationsbygeohash_ = reqsearchvendorlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
}
void Request::set_allocated_reqsearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* reqsearchlocationsbygeohash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqsearchlocationsbygeohash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqsearchlocationsbygeohash);
    if (message_arena != submessage_arena) {
      reqsearchlocationsbygeohash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqsearchlocationsbygeohash, submessage_arena);
    }
    set_has_reqsearchlocationsbygeohash();
    ARequest_.reqsearchlocationsbygeohash_ = reqsearchlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
}
void Request::set_allocated_reqgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* reqgetlocationdatabylatlng) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetlocationdatabylatlng) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetlocationdatabylatlng);
    if (message_arena != submessage_arena) {
      reqgetlocationdatabylatlng = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetlocationdatabylatlng, submessage_arena);
    }
    set_has_reqgetlocationdatabylatlng();
    ARequest_.reqgetlocationdatabylatlng_ = reqgetlocationdatabylatlng;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
}
void Request::set_allocated_reqaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* reqaddvendorapiledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddvendorapiledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddvendorapiledger);
    if (message_arena != submessage_arena) {
      reqaddvendorapiledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddvendorapiledger, submessage_arena);
    }
    set_has_reqaddvendorapiledger();
    ARequest_.reqaddvendorapiledger_ = reqaddvendorapiledger;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
}
void Request::set_allocated_reqaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* reqaddvendorapiledgerbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddvendorapiledgerbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddvendorapiledgerbulk);
    if (message_arena != submessage_arena) {
      reqaddvendorapiledgerbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddvendorapiledgerbulk, submessage_arena);
    }
    set_has_reqaddvendorapiledgerbulk();
    ARequest_.reqaddvendorapiledgerbulk_ = reqaddvendorapiledgerbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  clear_has_ARequest();
  switch (from.ARequest_case()) {
    case kReqInsertLocation: {
      _internal_mutable_reqinsertlocation()->::farm::nurture::location::service::proto::InsertLocationRequest::MergeFrom(from._internal_reqinsertlocation());
      break;
    }
    case kReqInsertLocationBulk: {
      _internal_mutable_reqinsertlocationbulk()->::farm::nurture::location::service::proto::BulkInsertLocationRequest::MergeFrom(from._internal_reqinsertlocationbulk());
      break;
    }
    case kReqInsertLocationS2Cell: {
      _internal_mutable_reqinsertlocations2cell()->::farm::nurture::location::service::proto::InsertLocationS2CellRequest::MergeFrom(from._internal_reqinsertlocations2cell());
      break;
    }
    case kReqInsertLocationS2CellBulk: {
      _internal_mutable_reqinsertlocations2cellbulk()->::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest::MergeFrom(from._internal_reqinsertlocations2cellbulk());
      break;
    }
    case kReqInsertConfig: {
      _internal_mutable_reqinsertconfig()->::farm::nurture::location::service::proto::InsertConfigRequest::MergeFrom(from._internal_reqinsertconfig());
      break;
    }
    case kReqInsertConfigBulk: {
      _internal_mutable_reqinsertconfigbulk()->::farm::nurture::location::service::proto::BulkInsertConfigRequest::MergeFrom(from._internal_reqinsertconfigbulk());
      break;
    }
    case kReqFetchLocationById: {
      _internal_mutable_reqfetchlocationbyid()->::farm::nurture::location::service::proto::FetchLocationByIdRequest::MergeFrom(from._internal_reqfetchlocationbyid());
      break;
    }
    case kReqFetchLocationByCodeAndNamespace: {
      _internal_mutable_reqfetchlocationbycodeandnamespace()->::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest::MergeFrom(from._internal_reqfetchlocationbycodeandnamespace());
      break;
    }
    case kReqFetchS2CellById: {
      _internal_mutable_reqfetchs2cellbyid()->::farm::nurture::location::service::proto::FetchS2CellByIdRequest::MergeFrom(from._internal_reqfetchs2cellbyid());
      break;
    }
    case kReqFetchS2CellByLocation: {
      _internal_mutable_reqfetchs2cellbylocation()->::farm::nurture::location::service::proto::FetchS2CellByLocationRequest::MergeFrom(from._internal_reqfetchs2cellbylocation());
      break;
    }
    case kReqFetchS2CellByLocationId: {
      _internal_mutable_reqfetchs2cellbylocationid()->::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest::MergeFrom(from._internal_reqfetchs2cellbylocationid());
      break;
    }
    case kReqUpdateLocationById: {
      _internal_mutable_requpdatelocationbyid()->::farm::nurture::location::service::proto::UpdateLocationByIdRequest::MergeFrom(from._internal_requpdatelocationbyid());
      break;
    }
    case kReqUpdateLocationByIdBulk: {
      _internal_mutable_requpdatelocationbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest::MergeFrom(from._internal_requpdatelocationbyidbulk());
      break;
    }
    case kReqUpdateLocationLabelById: {
      _internal_mutable_requpdatelocationlabelbyid()->::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest::MergeFrom(from._internal_requpdatelocationlabelbyid());
      break;
    }
    case kReqUpdateLocationLabelByIdBulk: {
      _internal_mutable_requpdatelocationlabelbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest::MergeFrom(from._internal_requpdatelocationlabelbyidbulk());
      break;
    }
    case kReqUpdateDeleteS2CellByLocation: {
      _internal_mutable_requpdatedeletes2cellbylocation()->::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest::MergeFrom(from._internal_requpdatedeletes2cellbylocation());
      break;
    }
    case kReqUpdateDeleteS2CellByLocationBulk: {
      _internal_mutable_requpdatedeletes2cellbylocationbulk()->::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest::MergeFrom(from._internal_requpdatedeletes2cellbylocationbulk());
      break;
    }
    case kReqFetchConfigById: {
      _internal_mutable_reqfetchconfigbyid()->::farm::nurture::location::service::proto::FetchConfigByIdRequest::MergeFrom(from._internal_reqfetchconfigbyid());
      break;
    }
    case kReqAddLocation: {
      _internal_mutable_reqaddlocation()->::farm::nurture::location::service::proto::AddLocationRequest::MergeFrom(from._internal_reqaddlocation());
      break;
    }
    case kReqAddLocationBulk: {
      _internal_mutable_reqaddlocationbulk()->::farm::nurture::location::service::proto::BulkAddLocationRequest::MergeFrom(from._internal_reqaddlocationbulk());
      break;
    }
    case kReqUpdateLocation: {
      _internal_mutable_requpdatelocation()->::farm::nurture::location::service::proto::UpdateLocationRequest::MergeFrom(from._internal_requpdatelocation());
      break;
    }
    case kReqUpdateLocationBulk: {
      _internal_mutable_requpdatelocationbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationRequest::MergeFrom(from._internal_requpdatelocationbulk());
      break;
    }
    case kReqGetLocationsWithBoundary: {
      _internal_mutable_reqgetlocationswithboundary()->::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest::MergeFrom(from._internal_reqgetlocationswithboundary());
      break;
    }
    case kReqGetLocations: {
      _internal_mutable_reqgetlocations()->::farm::nurture::location::service::proto::GetLocationsRequest::MergeFrom(from._internal_reqgetlocations());
      break;
    }
    case kReqGetChildGeographies: {
      _internal_mutable_reqgetchildgeographies()->::farm::nurture::location::service::proto::GetChildGeographiesRequest::MergeFrom(from._internal_reqgetchildgeographies());
      break;
    }
    case kReqInsertLocationWithoutBoundary: {
      _internal_mutable_reqinsertlocationwithoutboundary()->::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest::MergeFrom(from._internal_reqinsertlocationwithoutboundary());
      break;
    }
    case kReqInsertLocationWithoutBoundaryBulk: {
      _internal_mutable_reqinsertlocationwithoutboundarybulk()->::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest::MergeFrom(from._internal_reqinsertlocationwithoutboundarybulk());
      break;
    }
    case kReqUpdateLocationWithoutBoundaryById: {
      _internal_mutable_requpdatelocationwithoutboundarybyid()->::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest::MergeFrom(from._internal_requpdatelocationwithoutboundarybyid());
      break;
    }
    case kReqUpdateLocationWithoutBoundaryByIdBulk: {
      _internal_mutable_requpdatelocationwithoutboundarybyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest::MergeFrom(from._internal_requpdatelocationwithoutboundarybyidbulk());
      break;
    }
    case kReqDeleteLocationById: {
      _internal_mutable_reqdeletelocationbyid()->::farm::nurture::location::service::proto::DeleteLocationByIdRequest::MergeFrom(from._internal_reqdeletelocationbyid());
      break;
    }
    case kReqDeleteLocationByIdBulk: {
      _internal_mutable_reqdeletelocationbyidbulk()->::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest::MergeFrom(from._internal_reqdeletelocationbyidbulk());
      break;
    }
    case kReqFetchDuplicateVillages: {
      _internal_mutable_reqfetchduplicatevillages()->::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest::MergeFrom(from._internal_reqfetchduplicatevillages());
      break;
    }
    case kReqFetchDuplicateVillagesBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatevillagesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatevillagesbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateTehsilsBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatetehsilsbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateDistrictsBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatedistrictsbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateStatesBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatestatesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatestatesbysdtvlatlong());
      break;
    }
    case kReqGetDuplicateGeographies: {
      _internal_mutable_reqgetduplicategeographies()->::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest::MergeFrom(from._internal_reqgetduplicategeographies());
      break;
    }
    case kReqInsertVendorLocationData: {
      _internal_mutable_reqinsertvendorlocationdata()->::farm::nurture::location::service::proto::InsertVendorLocationDataRequest::MergeFrom(from._internal_reqinsertvendorlocationdata());
      break;
    }
    case kReqInsertVendorLocationDataBulk: {
      _internal_mutable_reqinsertvendorlocationdatabulk()->::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest::MergeFrom(from._internal_reqinsertvendorlocationdatabulk());
      break;
    }
    case kReqSearchVendorLocationsByGeohash: {
      _internal_mutable_reqsearchvendorlocationsbygeohash()->::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest::MergeFrom(from._internal_reqsearchvendorlocationsbygeohash());
      break;
    }
    case kReqSearchLocationsByGeohash: {
      _internal_mutable_reqsearchlocationsbygeohash()->::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest::MergeFrom(from._internal_reqsearchlocationsbygeohash());
      break;
    }
    case kReqGetLocationDataByLatLng: {
      _internal_mutable_reqgetlocationdatabylatlng()->::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest::MergeFrom(from._internal_reqgetlocationdatabylatlng());
      break;
    }
    case kReqAddVendorApiLedger: {
      _internal_mutable_reqaddvendorapiledger()->::farm::nurture::location::service::proto::AddVendorApiLedgerRequest::MergeFrom(from._internal_reqaddvendorapiledger());
      break;
    }
    case kReqAddVendorApiLedgerBulk: {
      _internal_mutable_reqaddvendorapiledgerbulk()->::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest::MergeFrom(from._internal_reqaddvendorapiledgerbulk());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_LocationService_2flocation_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_ARequest();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ARequest()) {
    clear_ARequest();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_ARequest() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.location.service.proto.Request)
  switch (ARequest_case()) {
    case kReqInsertLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocation_;
      }
      break;
    }
    case kReqInsertLocationBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocationbulk_;
      }
      break;
    }
    case kReqInsertLocationS2Cell: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocations2cell_;
      }
      break;
    }
    case kReqInsertLocationS2CellBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocations2cellbulk_;
      }
      break;
    }
    case kReqInsertConfig: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertconfig_;
      }
      break;
    }
    case kReqInsertConfigBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertconfigbulk_;
      }
      break;
    }
    case kReqFetchLocationById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchlocationbyid_;
      }
      break;
    }
    case kReqFetchLocationByCodeAndNamespace: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchlocationbycodeandnamespace_;
      }
      break;
    }
    case kReqFetchS2CellById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchs2cellbyid_;
      }
      break;
    }
    case kReqFetchS2CellByLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchs2cellbylocation_;
      }
      break;
    }
    case kReqFetchS2CellByLocationId: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchs2cellbylocationid_;
      }
      break;
    }
    case kReqUpdateLocationById: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationbyid_;
      }
      break;
    }
    case kReqUpdateLocationByIdBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationbyidbulk_;
      }
      break;
    }
    case kReqUpdateLocationLabelById: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationlabelbyid_;
      }
      break;
    }
    case kReqUpdateLocationLabelByIdBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationlabelbyidbulk_;
      }
      break;
    }
    case kReqUpdateDeleteS2CellByLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatedeletes2cellbylocation_;
      }
      break;
    }
    case kReqUpdateDeleteS2CellByLocationBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatedeletes2cellbylocationbulk_;
      }
      break;
    }
    case kReqFetchConfigById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchconfigbyid_;
      }
      break;
    }
    case kReqAddLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddlocation_;
      }
      break;
    }
    case kReqAddLocationBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddlocationbulk_;
      }
      break;
    }
    case kReqUpdateLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocation_;
      }
      break;
    }
    case kReqUpdateLocationBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationbulk_;
      }
      break;
    }
    case kReqGetLocationsWithBoundary: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetlocationswithboundary_;
      }
      break;
    }
    case kReqGetLocations: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetlocations_;
      }
      break;
    }
    case kReqGetChildGeographies: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetchildgeographies_;
      }
      break;
    }
    case kReqInsertLocationWithoutBoundary: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocationwithoutboundary_;
      }
      break;
    }
    case kReqInsertLocationWithoutBoundaryBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertlocationwithoutboundarybulk_;
      }
      break;
    }
    case kReqUpdateLocationWithoutBoundaryById: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationwithoutboundarybyid_;
      }
      break;
    }
    case kReqUpdateLocationWithoutBoundaryByIdBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatelocationwithoutboundarybyidbulk_;
      }
      break;
    }
    case kReqDeleteLocationById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqdeletelocationbyid_;
      }
      break;
    }
    case kReqDeleteLocationByIdBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqdeletelocationbyidbulk_;
      }
      break;
    }
    case kReqFetchDuplicateVillages: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchduplicatevillages_;
      }
      break;
    }
    case kReqFetchDuplicateVillagesBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
      }
      break;
    }
    case kReqFetchDuplicateTehsilsBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
      }
      break;
    }
    case kReqFetchDuplicateDistrictsBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
      }
      break;
    }
    case kReqFetchDuplicateStatesBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
      }
      break;
    }
    case kReqGetDuplicateGeographies: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetduplicategeographies_;
      }
      break;
    }
    case kReqInsertVendorLocationData: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertvendorlocationdata_;
      }
      break;
    }
    case kReqInsertVendorLocationDataBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqinsertvendorlocationdatabulk_;
      }
      break;
    }
    case kReqSearchVendorLocationsByGeohash: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqsearchvendorlocationsbygeohash_;
      }
      break;
    }
    case kReqSearchLocationsByGeohash: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqsearchlocationsbygeohash_;
      }
      break;
    }
    case kReqGetLocationDataByLatLng: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetlocationdatabylatlng_;
      }
      break;
    }
    case kReqAddVendorApiLedger: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddvendorapiledger_;
      }
      break;
    }
    case kReqAddVendorApiLedgerBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddvendorapiledgerbulk_;
      }
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AREQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  clear_ARequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.Request.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationRequest reqInsertLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationRequest reqInsertLocationBulk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationS2CellRequest reqInsertLocationS2Cell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocations2cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest reqInsertLocationS2CellBulk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocations2cellbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertConfigRequest reqInsertConfig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertConfigRequest reqInsertConfigBulk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertconfigbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchLocationByIdRequest reqFetchLocationById = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchlocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest reqFetchLocationByCodeAndNamespace = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchlocationbycodeandnamespace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchS2CellByIdRequest reqFetchS2CellById = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchs2cellbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchS2CellByLocationRequest reqFetchS2CellByLocation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchs2cellbylocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest reqFetchS2CellByLocationId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchs2cellbylocationid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationByIdRequest reqUpdateLocationById = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest reqUpdateLocationByIdBulk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest reqUpdateLocationLabelById = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationlabelbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest reqUpdateLocationLabelByIdBulk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationlabelbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatedeletes2cellbylocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocationBulk = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatedeletes2cellbylocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchConfigByIdRequest reqFetchConfigById = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchconfigbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.AddLocationRequest reqAddLocation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkAddLocationRequest reqAddLocationBulk = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddlocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationRequest reqUpdateLocation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationRequest reqUpdateLocationBulk = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest reqGetLocationsWithBoundary = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetlocationswithboundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationsRequest reqGetLocations = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetlocations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetChildGeographiesRequest reqGetChildGeographies = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetchildgeographies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundary = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocationwithoutboundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundaryBulk = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertlocationwithoutboundarybulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryById = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationwithoutboundarybyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryByIdBulk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatelocationwithoutboundarybyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.DeleteLocationByIdRequest reqDeleteLocationById = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqdeletelocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest reqDeleteLocationByIdBulk = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqdeletelocationbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateVillagesRequest reqFetchDuplicateVillages = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchduplicatevillages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest reqFetchDuplicateVillagesBySDTVLatLong = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchduplicatevillagesbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest reqFetchDuplicateTehsilsBySDTVLatLong = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest reqFetchDuplicateDistrictsBySDTVLatLong = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest reqFetchDuplicateStatesBySDTVLatLong = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfetchduplicatestatesbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetDuplicateGeographiesRequest reqGetDuplicateGeographies = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetduplicategeographies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertVendorLocationDataRequest reqInsertVendorLocationData = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertvendorlocationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest reqInsertVendorLocationDataBulk = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinsertvendorlocationdatabulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest reqSearchVendorLocationsByGeohash = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqsearchvendorlocationsbygeohash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.SearchLocationsByGeohashRequest reqSearchLocationsByGeohash = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqsearchlocationsbygeohash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationDataByLatLngRequest reqGetLocationDataByLatLng = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetlocationdatabylatlng(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.AddVendorApiLedgerRequest reqAddVendorApiLedger = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddvendorapiledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest reqAddVendorApiLedgerBulk = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddvendorapiledgerbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.Request.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.location.service.proto.InsertLocationRequest reqInsertLocation = 2;
  if (_internal_has_reqinsertlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reqinsertlocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationRequest reqInsertLocationBulk = 3;
  if (_internal_has_reqinsertlocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reqinsertlocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertLocationS2CellRequest reqInsertLocationS2Cell = 4;
  if (_internal_has_reqinsertlocations2cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reqinsertlocations2cell(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest reqInsertLocationS2CellBulk = 5;
  if (_internal_has_reqinsertlocations2cellbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reqinsertlocations2cellbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertConfigRequest reqInsertConfig = 6;
  if (_internal_has_reqinsertconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reqinsertconfig(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertConfigRequest reqInsertConfigBulk = 7;
  if (_internal_has_reqinsertconfigbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reqinsertconfigbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchLocationByIdRequest reqFetchLocationById = 8;
  if (_internal_has_reqfetchlocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reqfetchlocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest reqFetchLocationByCodeAndNamespace = 9;
  if (_internal_has_reqfetchlocationbycodeandnamespace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::reqfetchlocationbycodeandnamespace(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchS2CellByIdRequest reqFetchS2CellById = 10;
  if (_internal_has_reqfetchs2cellbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reqfetchs2cellbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchS2CellByLocationRequest reqFetchS2CellByLocation = 11;
  if (_internal_has_reqfetchs2cellbylocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::reqfetchs2cellbylocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest reqFetchS2CellByLocationId = 12;
  if (_internal_has_reqfetchs2cellbylocationid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reqfetchs2cellbylocationid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest reqUpdateLocationById = 13;
  if (_internal_has_requpdatelocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::requpdatelocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest reqUpdateLocationByIdBulk = 14;
  if (_internal_has_requpdatelocationbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::requpdatelocationbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest reqUpdateLocationLabelById = 15;
  if (_internal_has_requpdatelocationlabelbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::requpdatelocationlabelbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest reqUpdateLocationLabelByIdBulk = 16;
  if (_internal_has_requpdatelocationlabelbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::requpdatelocationlabelbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocation = 17;
  if (_internal_has_requpdatedeletes2cellbylocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::requpdatedeletes2cellbylocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocationBulk = 18;
  if (_internal_has_requpdatedeletes2cellbylocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::requpdatedeletes2cellbylocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchConfigByIdRequest reqFetchConfigById = 19;
  if (_internal_has_reqfetchconfigbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::reqfetchconfigbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.AddLocationRequest reqAddLocation = 20;
  if (_internal_has_reqaddlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::reqaddlocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkAddLocationRequest reqAddLocationBulk = 21;
  if (_internal_has_reqaddlocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::reqaddlocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationRequest reqUpdateLocation = 22;
  if (_internal_has_requpdatelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::requpdatelocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationRequest reqUpdateLocationBulk = 23;
  if (_internal_has_requpdatelocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::requpdatelocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest reqGetLocationsWithBoundary = 24;
  if (_internal_has_reqgetlocationswithboundary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::reqgetlocationswithboundary(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationsRequest reqGetLocations = 25;
  if (_internal_has_reqgetlocations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::reqgetlocations(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetChildGeographiesRequest reqGetChildGeographies = 26;
  if (_internal_has_reqgetchildgeographies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::reqgetchildgeographies(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundary = 27;
  if (_internal_has_reqinsertlocationwithoutboundary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::reqinsertlocationwithoutboundary(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundaryBulk = 28;
  if (_internal_has_reqinsertlocationwithoutboundarybulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::reqinsertlocationwithoutboundarybulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryById = 29;
  if (_internal_has_requpdatelocationwithoutboundarybyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::requpdatelocationwithoutboundarybyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryByIdBulk = 30;
  if (_internal_has_requpdatelocationwithoutboundarybyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::requpdatelocationwithoutboundarybyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.DeleteLocationByIdRequest reqDeleteLocationById = 31;
  if (_internal_has_reqdeletelocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::reqdeletelocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest reqDeleteLocationByIdBulk = 32;
  if (_internal_has_reqdeletelocationbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::reqdeletelocationbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesRequest reqFetchDuplicateVillages = 33;
  if (_internal_has_reqfetchduplicatevillages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::reqfetchduplicatevillages(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest reqFetchDuplicateVillagesBySDTVLatLong = 34;
  if (_internal_has_reqfetchduplicatevillagesbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::reqfetchduplicatevillagesbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest reqFetchDuplicateTehsilsBySDTVLatLong = 35;
  if (_internal_has_reqfetchduplicatetehsilsbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::reqfetchduplicatetehsilsbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest reqFetchDuplicateDistrictsBySDTVLatLong = 36;
  if (_internal_has_reqfetchduplicatedistrictsbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::reqfetchduplicatedistrictsbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest reqFetchDuplicateStatesBySDTVLatLong = 37;
  if (_internal_has_reqfetchduplicatestatesbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::reqfetchduplicatestatesbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetDuplicateGeographiesRequest reqGetDuplicateGeographies = 38;
  if (_internal_has_reqgetduplicategeographies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::reqgetduplicategeographies(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertVendorLocationDataRequest reqInsertVendorLocationData = 39;
  if (_internal_has_reqinsertvendorlocationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::reqinsertvendorlocationdata(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest reqInsertVendorLocationDataBulk = 40;
  if (_internal_has_reqinsertvendorlocationdatabulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::reqinsertvendorlocationdatabulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest reqSearchVendorLocationsByGeohash = 41;
  if (_internal_has_reqsearchvendorlocationsbygeohash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::reqsearchvendorlocationsbygeohash(this), target, stream);
  }

  // .farm.nurture.location.service.proto.SearchLocationsByGeohashRequest reqSearchLocationsByGeohash = 42;
  if (_internal_has_reqsearchlocationsbygeohash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::reqsearchlocationsbygeohash(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationDataByLatLngRequest reqGetLocationDataByLatLng = 43;
  if (_internal_has_reqgetlocationdatabylatlng()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::reqgetlocationdatabylatlng(this), target, stream);
  }

  // .farm.nurture.location.service.proto.AddVendorApiLedgerRequest reqAddVendorApiLedger = 44;
  if (_internal_has_reqaddvendorapiledger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::reqaddvendorapiledger(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest reqAddVendorApiLedgerBulk = 45;
  if (_internal_has_reqaddvendorapiledgerbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::reqaddvendorapiledgerbulk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  switch (ARequest_case()) {
    // .farm.nurture.location.service.proto.InsertLocationRequest reqInsertLocation = 2;
    case kReqInsertLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationRequest reqInsertLocationBulk = 3;
    case kReqInsertLocationBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertLocationS2CellRequest reqInsertLocationS2Cell = 4;
    case kReqInsertLocationS2Cell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocations2cell_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest reqInsertLocationS2CellBulk = 5;
    case kReqInsertLocationS2CellBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocations2cellbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertConfigRequest reqInsertConfig = 6;
    case kReqInsertConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertconfig_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertConfigRequest reqInsertConfigBulk = 7;
    case kReqInsertConfigBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertconfigbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchLocationByIdRequest reqFetchLocationById = 8;
    case kReqFetchLocationById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchlocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest reqFetchLocationByCodeAndNamespace = 9;
    case kReqFetchLocationByCodeAndNamespace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchlocationbycodeandnamespace_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchS2CellByIdRequest reqFetchS2CellById = 10;
    case kReqFetchS2CellById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchs2cellbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchS2CellByLocationRequest reqFetchS2CellByLocation = 11;
    case kReqFetchS2CellByLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchs2cellbylocation_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest reqFetchS2CellByLocationId = 12;
    case kReqFetchS2CellByLocationId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchs2cellbylocationid_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationByIdRequest reqUpdateLocationById = 13;
    case kReqUpdateLocationById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest reqUpdateLocationByIdBulk = 14;
    case kReqUpdateLocationByIdBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest reqUpdateLocationLabelById = 15;
    case kReqUpdateLocationLabelById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationlabelbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest reqUpdateLocationLabelByIdBulk = 16;
    case kReqUpdateLocationLabelByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationlabelbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocation = 17;
    case kReqUpdateDeleteS2CellByLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatedeletes2cellbylocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocationBulk = 18;
    case kReqUpdateDeleteS2CellByLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatedeletes2cellbylocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchConfigByIdRequest reqFetchConfigById = 19;
    case kReqFetchConfigById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchconfigbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.AddLocationRequest reqAddLocation = 20;
    case kReqAddLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddlocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkAddLocationRequest reqAddLocationBulk = 21;
    case kReqAddLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddlocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationRequest reqUpdateLocation = 22;
    case kReqUpdateLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationRequest reqUpdateLocationBulk = 23;
    case kReqUpdateLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest reqGetLocationsWithBoundary = 24;
    case kReqGetLocationsWithBoundary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetlocationswithboundary_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationsRequest reqGetLocations = 25;
    case kReqGetLocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetlocations_);
      break;
    }
    // .farm.nurture.location.service.proto.GetChildGeographiesRequest reqGetChildGeographies = 26;
    case kReqGetChildGeographies: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetchildgeographies_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundary = 27;
    case kReqInsertLocationWithoutBoundary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocationwithoutboundary_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundaryBulk = 28;
    case kReqInsertLocationWithoutBoundaryBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertlocationwithoutboundarybulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryById = 29;
    case kReqUpdateLocationWithoutBoundaryById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationwithoutboundarybyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryByIdBulk = 30;
    case kReqUpdateLocationWithoutBoundaryByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatelocationwithoutboundarybyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.DeleteLocationByIdRequest reqDeleteLocationById = 31;
    case kReqDeleteLocationById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqdeletelocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest reqDeleteLocationByIdBulk = 32;
    case kReqDeleteLocationByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqdeletelocationbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateVillagesRequest reqFetchDuplicateVillages = 33;
    case kReqFetchDuplicateVillages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchduplicatevillages_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest reqFetchDuplicateVillagesBySDTVLatLong = 34;
    case kReqFetchDuplicateVillagesBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchduplicatevillagesbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest reqFetchDuplicateTehsilsBySDTVLatLong = 35;
    case kReqFetchDuplicateTehsilsBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest reqFetchDuplicateDistrictsBySDTVLatLong = 36;
    case kReqFetchDuplicateDistrictsBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest reqFetchDuplicateStatesBySDTVLatLong = 37;
    case kReqFetchDuplicateStatesBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfetchduplicatestatesbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.GetDuplicateGeographiesRequest reqGetDuplicateGeographies = 38;
    case kReqGetDuplicateGeographies: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetduplicategeographies_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertVendorLocationDataRequest reqInsertVendorLocationData = 39;
    case kReqInsertVendorLocationData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertvendorlocationdata_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest reqInsertVendorLocationDataBulk = 40;
    case kReqInsertVendorLocationDataBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqinsertvendorlocationdatabulk_);
      break;
    }
    // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest reqSearchVendorLocationsByGeohash = 41;
    case kReqSearchVendorLocationsByGeohash: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqsearchvendorlocationsbygeohash_);
      break;
    }
    // .farm.nurture.location.service.proto.SearchLocationsByGeohashRequest reqSearchLocationsByGeohash = 42;
    case kReqSearchLocationsByGeohash: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqsearchlocationsbygeohash_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationDataByLatLngRequest reqGetLocationDataByLatLng = 43;
    case kReqGetLocationDataByLatLng: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetlocationdatabylatlng_);
      break;
    }
    // .farm.nurture.location.service.proto.AddVendorApiLedgerRequest reqAddVendorApiLedger = 44;
    case kReqAddVendorApiLedger: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddvendorapiledger_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest reqAddVendorApiLedgerBulk = 45;
    case kReqAddVendorApiLedgerBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddvendorapiledgerbulk_);
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  switch (from.ARequest_case()) {
    case kReqInsertLocation: {
      _internal_mutable_reqinsertlocation()->::farm::nurture::location::service::proto::InsertLocationRequest::MergeFrom(from._internal_reqinsertlocation());
      break;
    }
    case kReqInsertLocationBulk: {
      _internal_mutable_reqinsertlocationbulk()->::farm::nurture::location::service::proto::BulkInsertLocationRequest::MergeFrom(from._internal_reqinsertlocationbulk());
      break;
    }
    case kReqInsertLocationS2Cell: {
      _internal_mutable_reqinsertlocations2cell()->::farm::nurture::location::service::proto::InsertLocationS2CellRequest::MergeFrom(from._internal_reqinsertlocations2cell());
      break;
    }
    case kReqInsertLocationS2CellBulk: {
      _internal_mutable_reqinsertlocations2cellbulk()->::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest::MergeFrom(from._internal_reqinsertlocations2cellbulk());
      break;
    }
    case kReqInsertConfig: {
      _internal_mutable_reqinsertconfig()->::farm::nurture::location::service::proto::InsertConfigRequest::MergeFrom(from._internal_reqinsertconfig());
      break;
    }
    case kReqInsertConfigBulk: {
      _internal_mutable_reqinsertconfigbulk()->::farm::nurture::location::service::proto::BulkInsertConfigRequest::MergeFrom(from._internal_reqinsertconfigbulk());
      break;
    }
    case kReqFetchLocationById: {
      _internal_mutable_reqfetchlocationbyid()->::farm::nurture::location::service::proto::FetchLocationByIdRequest::MergeFrom(from._internal_reqfetchlocationbyid());
      break;
    }
    case kReqFetchLocationByCodeAndNamespace: {
      _internal_mutable_reqfetchlocationbycodeandnamespace()->::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest::MergeFrom(from._internal_reqfetchlocationbycodeandnamespace());
      break;
    }
    case kReqFetchS2CellById: {
      _internal_mutable_reqfetchs2cellbyid()->::farm::nurture::location::service::proto::FetchS2CellByIdRequest::MergeFrom(from._internal_reqfetchs2cellbyid());
      break;
    }
    case kReqFetchS2CellByLocation: {
      _internal_mutable_reqfetchs2cellbylocation()->::farm::nurture::location::service::proto::FetchS2CellByLocationRequest::MergeFrom(from._internal_reqfetchs2cellbylocation());
      break;
    }
    case kReqFetchS2CellByLocationId: {
      _internal_mutable_reqfetchs2cellbylocationid()->::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest::MergeFrom(from._internal_reqfetchs2cellbylocationid());
      break;
    }
    case kReqUpdateLocationById: {
      _internal_mutable_requpdatelocationbyid()->::farm::nurture::location::service::proto::UpdateLocationByIdRequest::MergeFrom(from._internal_requpdatelocationbyid());
      break;
    }
    case kReqUpdateLocationByIdBulk: {
      _internal_mutable_requpdatelocationbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest::MergeFrom(from._internal_requpdatelocationbyidbulk());
      break;
    }
    case kReqUpdateLocationLabelById: {
      _internal_mutable_requpdatelocationlabelbyid()->::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest::MergeFrom(from._internal_requpdatelocationlabelbyid());
      break;
    }
    case kReqUpdateLocationLabelByIdBulk: {
      _internal_mutable_requpdatelocationlabelbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest::MergeFrom(from._internal_requpdatelocationlabelbyidbulk());
      break;
    }
    case kReqUpdateDeleteS2CellByLocation: {
      _internal_mutable_requpdatedeletes2cellbylocation()->::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest::MergeFrom(from._internal_requpdatedeletes2cellbylocation());
      break;
    }
    case kReqUpdateDeleteS2CellByLocationBulk: {
      _internal_mutable_requpdatedeletes2cellbylocationbulk()->::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest::MergeFrom(from._internal_requpdatedeletes2cellbylocationbulk());
      break;
    }
    case kReqFetchConfigById: {
      _internal_mutable_reqfetchconfigbyid()->::farm::nurture::location::service::proto::FetchConfigByIdRequest::MergeFrom(from._internal_reqfetchconfigbyid());
      break;
    }
    case kReqAddLocation: {
      _internal_mutable_reqaddlocation()->::farm::nurture::location::service::proto::AddLocationRequest::MergeFrom(from._internal_reqaddlocation());
      break;
    }
    case kReqAddLocationBulk: {
      _internal_mutable_reqaddlocationbulk()->::farm::nurture::location::service::proto::BulkAddLocationRequest::MergeFrom(from._internal_reqaddlocationbulk());
      break;
    }
    case kReqUpdateLocation: {
      _internal_mutable_requpdatelocation()->::farm::nurture::location::service::proto::UpdateLocationRequest::MergeFrom(from._internal_requpdatelocation());
      break;
    }
    case kReqUpdateLocationBulk: {
      _internal_mutable_requpdatelocationbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationRequest::MergeFrom(from._internal_requpdatelocationbulk());
      break;
    }
    case kReqGetLocationsWithBoundary: {
      _internal_mutable_reqgetlocationswithboundary()->::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest::MergeFrom(from._internal_reqgetlocationswithboundary());
      break;
    }
    case kReqGetLocations: {
      _internal_mutable_reqgetlocations()->::farm::nurture::location::service::proto::GetLocationsRequest::MergeFrom(from._internal_reqgetlocations());
      break;
    }
    case kReqGetChildGeographies: {
      _internal_mutable_reqgetchildgeographies()->::farm::nurture::location::service::proto::GetChildGeographiesRequest::MergeFrom(from._internal_reqgetchildgeographies());
      break;
    }
    case kReqInsertLocationWithoutBoundary: {
      _internal_mutable_reqinsertlocationwithoutboundary()->::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest::MergeFrom(from._internal_reqinsertlocationwithoutboundary());
      break;
    }
    case kReqInsertLocationWithoutBoundaryBulk: {
      _internal_mutable_reqinsertlocationwithoutboundarybulk()->::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest::MergeFrom(from._internal_reqinsertlocationwithoutboundarybulk());
      break;
    }
    case kReqUpdateLocationWithoutBoundaryById: {
      _internal_mutable_requpdatelocationwithoutboundarybyid()->::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest::MergeFrom(from._internal_requpdatelocationwithoutboundarybyid());
      break;
    }
    case kReqUpdateLocationWithoutBoundaryByIdBulk: {
      _internal_mutable_requpdatelocationwithoutboundarybyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest::MergeFrom(from._internal_requpdatelocationwithoutboundarybyidbulk());
      break;
    }
    case kReqDeleteLocationById: {
      _internal_mutable_reqdeletelocationbyid()->::farm::nurture::location::service::proto::DeleteLocationByIdRequest::MergeFrom(from._internal_reqdeletelocationbyid());
      break;
    }
    case kReqDeleteLocationByIdBulk: {
      _internal_mutable_reqdeletelocationbyidbulk()->::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest::MergeFrom(from._internal_reqdeletelocationbyidbulk());
      break;
    }
    case kReqFetchDuplicateVillages: {
      _internal_mutable_reqfetchduplicatevillages()->::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest::MergeFrom(from._internal_reqfetchduplicatevillages());
      break;
    }
    case kReqFetchDuplicateVillagesBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatevillagesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatevillagesbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateTehsilsBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatetehsilsbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateDistrictsBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatedistrictsbysdtvlatlong());
      break;
    }
    case kReqFetchDuplicateStatesBySDTVLatLong: {
      _internal_mutable_reqfetchduplicatestatesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest::MergeFrom(from._internal_reqfetchduplicatestatesbysdtvlatlong());
      break;
    }
    case kReqGetDuplicateGeographies: {
      _internal_mutable_reqgetduplicategeographies()->::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest::MergeFrom(from._internal_reqgetduplicategeographies());
      break;
    }
    case kReqInsertVendorLocationData: {
      _internal_mutable_reqinsertvendorlocationdata()->::farm::nurture::location::service::proto::InsertVendorLocationDataRequest::MergeFrom(from._internal_reqinsertvendorlocationdata());
      break;
    }
    case kReqInsertVendorLocationDataBulk: {
      _internal_mutable_reqinsertvendorlocationdatabulk()->::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest::MergeFrom(from._internal_reqinsertvendorlocationdatabulk());
      break;
    }
    case kReqSearchVendorLocationsByGeohash: {
      _internal_mutable_reqsearchvendorlocationsbygeohash()->::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest::MergeFrom(from._internal_reqsearchvendorlocationsbygeohash());
      break;
    }
    case kReqSearchLocationsByGeohash: {
      _internal_mutable_reqsearchlocationsbygeohash()->::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest::MergeFrom(from._internal_reqsearchlocationsbygeohash());
      break;
    }
    case kReqGetLocationDataByLatLng: {
      _internal_mutable_reqgetlocationdatabylatlng()->::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest::MergeFrom(from._internal_reqgetlocationdatabylatlng());
      break;
    }
    case kReqAddVendorApiLedger: {
      _internal_mutable_reqaddvendorapiledger()->::farm::nurture::location::service::proto::AddVendorApiLedgerRequest::MergeFrom(from._internal_reqaddvendorapiledger());
      break;
    }
    case kReqAddVendorApiLedgerBulk: {
      _internal_mutable_reqaddvendorapiledgerbulk()->::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest::MergeFrom(from._internal_reqaddvendorapiledgerbulk());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ARequest_, other->ARequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiResponses::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const MultiResponses* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
MultiResponses::_Internal::status(const MultiResponses* msg) {
  return *msg->status_;
}
void MultiResponses::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiResponses::MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.MultiResponses)
}
MultiResponses::MultiResponses(const MultiResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.MultiResponses)
}

void MultiResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto.base);
  status_ = nullptr;
}

MultiResponses::~MultiResponses() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.MultiResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiResponses::ArenaDtor(void* object) {
  MultiResponses* _this = reinterpret_cast< MultiResponses* >(object);
  (void)_this;
}
void MultiResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiResponses& MultiResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiResponses_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.location.service.proto.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .farm.nurture.location.service.proto.Response response = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.MultiResponses)
  return target;
}

size_t MultiResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.MultiResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.location.service.proto.Response response = 2;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.MultiResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.MultiResponses)
    MergeFrom(*source);
  }
}

void MultiResponses::MergeFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
}

void MultiResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResponses::CopyFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResponses::IsInitialized() const {
  return true;
}

void MultiResponses::InternalSwap(MultiResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Response::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const Response* msg);
  static const ::farm::nurture::location::service::proto::InsertLocationResponse& resinsertlocation(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationResponse& resinsertlocationbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& resinsertlocations2cell(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse& resinsertlocations2cellbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::InsertConfigResponse& resinsertconfig(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertConfigResponse& resinsertconfigbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::Location& resfetchlocationbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::Location& resfetchlocationbycodeandnamespace(const Response* msg);
  static const ::farm::nurture::location::service::proto::S2Cell& resfetchs2cellbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::S2Cell& resfetchs2cellbylocation(const Response* msg);
  static const ::farm::nurture::location::service::proto::LocationS2Cells& resfetchs2cellbylocationid(const Response* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& resupdatelocationbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse& resupdatelocationbyidbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& resupdatelocationlabelbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse& resupdatelocationlabelbyidbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& resupdatedeletes2cellbylocation(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse& resupdatedeletes2cellbylocationbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::Config& resfetchconfigbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::AddLocationResponse& resaddlocation(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkAddLocationResponse& resaddlocationbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationResponse& resupdatelocation(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse& resupdatelocationbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse& resgetlocationswithboundary(const Response* msg);
  static const ::farm::nurture::location::service::proto::GetLocationsResponse& resgetlocations(const Response* msg);
  static const ::farm::nurture::location::service::proto::GetChildGeographiesResponse& resgetchildgeographies(const Response* msg);
  static const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& resinsertlocationwithoutboundary(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse& resinsertlocationwithoutboundarybulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& resupdatelocationwithoutboundarybyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse& resupdatelocationwithoutboundarybyidbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& resdeletelocationbyid(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse& resdeletelocationbyidbulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse& resfetchduplicatevillages(const Response* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse& resfetchduplicatevillagesbysdtvlatlong(const Response* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse& resfetchduplicatetehsilsbysdtvlatlong(const Response* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse& resfetchduplicatedistrictsbysdtvlatlong(const Response* msg);
  static const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse& resfetchduplicatestatesbysdtvlatlong(const Response* msg);
  static const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse& resgetduplicategeographies(const Response* msg);
  static const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& resinsertvendorlocationdata(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse& resinsertvendorlocationdatabulk(const Response* msg);
  static const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse& ressearchvendorlocationsbygeohash(const Response* msg);
  static const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse& ressearchlocationsbygeohash(const Response* msg);
  static const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse& resgetlocationdatabylatlng(const Response* msg);
  static const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& resaddvendorapiledger(const Response* msg);
  static const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse& resaddvendorapiledgerbulk(const Response* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
Response::_Internal::status(const Response* msg) {
  return *msg->status_;
}
const ::farm::nurture::location::service::proto::InsertLocationResponse&
Response::_Internal::resinsertlocation(const Response* msg) {
  return *msg->AResponse_.resinsertlocation_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationResponse&
Response::_Internal::resinsertlocationbulk(const Response* msg) {
  return *msg->AResponse_.resinsertlocationbulk_;
}
const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse&
Response::_Internal::resinsertlocations2cell(const Response* msg) {
  return *msg->AResponse_.resinsertlocations2cell_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse&
Response::_Internal::resinsertlocations2cellbulk(const Response* msg) {
  return *msg->AResponse_.resinsertlocations2cellbulk_;
}
const ::farm::nurture::location::service::proto::InsertConfigResponse&
Response::_Internal::resinsertconfig(const Response* msg) {
  return *msg->AResponse_.resinsertconfig_;
}
const ::farm::nurture::location::service::proto::BulkInsertConfigResponse&
Response::_Internal::resinsertconfigbulk(const Response* msg) {
  return *msg->AResponse_.resinsertconfigbulk_;
}
const ::farm::nurture::location::service::proto::Location&
Response::_Internal::resfetchlocationbyid(const Response* msg) {
  return *msg->AResponse_.resfetchlocationbyid_;
}
const ::farm::nurture::location::service::proto::Location&
Response::_Internal::resfetchlocationbycodeandnamespace(const Response* msg) {
  return *msg->AResponse_.resfetchlocationbycodeandnamespace_;
}
const ::farm::nurture::location::service::proto::S2Cell&
Response::_Internal::resfetchs2cellbyid(const Response* msg) {
  return *msg->AResponse_.resfetchs2cellbyid_;
}
const ::farm::nurture::location::service::proto::S2Cell&
Response::_Internal::resfetchs2cellbylocation(const Response* msg) {
  return *msg->AResponse_.resfetchs2cellbylocation_;
}
const ::farm::nurture::location::service::proto::LocationS2Cells&
Response::_Internal::resfetchs2cellbylocationid(const Response* msg) {
  return *msg->AResponse_.resfetchs2cellbylocationid_;
}
const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse&
Response::_Internal::resupdatelocationbyid(const Response* msg) {
  return *msg->AResponse_.resupdatelocationbyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse&
Response::_Internal::resupdatelocationbyidbulk(const Response* msg) {
  return *msg->AResponse_.resupdatelocationbyidbulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse&
Response::_Internal::resupdatelocationlabelbyid(const Response* msg) {
  return *msg->AResponse_.resupdatelocationlabelbyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse&
Response::_Internal::resupdatelocationlabelbyidbulk(const Response* msg) {
  return *msg->AResponse_.resupdatelocationlabelbyidbulk_;
}
const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse&
Response::_Internal::resupdatedeletes2cellbylocation(const Response* msg) {
  return *msg->AResponse_.resupdatedeletes2cellbylocation_;
}
const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse&
Response::_Internal::resupdatedeletes2cellbylocationbulk(const Response* msg) {
  return *msg->AResponse_.resupdatedeletes2cellbylocationbulk_;
}
const ::farm::nurture::location::service::proto::Config&
Response::_Internal::resfetchconfigbyid(const Response* msg) {
  return *msg->AResponse_.resfetchconfigbyid_;
}
const ::farm::nurture::location::service::proto::AddLocationResponse&
Response::_Internal::resaddlocation(const Response* msg) {
  return *msg->AResponse_.resaddlocation_;
}
const ::farm::nurture::location::service::proto::BulkAddLocationResponse&
Response::_Internal::resaddlocationbulk(const Response* msg) {
  return *msg->AResponse_.resaddlocationbulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationResponse&
Response::_Internal::resupdatelocation(const Response* msg) {
  return *msg->AResponse_.resupdatelocation_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse&
Response::_Internal::resupdatelocationbulk(const Response* msg) {
  return *msg->AResponse_.resupdatelocationbulk_;
}
const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse&
Response::_Internal::resgetlocationswithboundary(const Response* msg) {
  return *msg->AResponse_.resgetlocationswithboundary_;
}
const ::farm::nurture::location::service::proto::GetLocationsResponse&
Response::_Internal::resgetlocations(const Response* msg) {
  return *msg->AResponse_.resgetlocations_;
}
const ::farm::nurture::location::service::proto::GetChildGeographiesResponse&
Response::_Internal::resgetchildgeographies(const Response* msg) {
  return *msg->AResponse_.resgetchildgeographies_;
}
const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse&
Response::_Internal::resinsertlocationwithoutboundary(const Response* msg) {
  return *msg->AResponse_.resinsertlocationwithoutboundary_;
}
const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse&
Response::_Internal::resinsertlocationwithoutboundarybulk(const Response* msg) {
  return *msg->AResponse_.resinsertlocationwithoutboundarybulk_;
}
const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse&
Response::_Internal::resupdatelocationwithoutboundarybyid(const Response* msg) {
  return *msg->AResponse_.resupdatelocationwithoutboundarybyid_;
}
const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse&
Response::_Internal::resupdatelocationwithoutboundarybyidbulk(const Response* msg) {
  return *msg->AResponse_.resupdatelocationwithoutboundarybyidbulk_;
}
const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse&
Response::_Internal::resdeletelocationbyid(const Response* msg) {
  return *msg->AResponse_.resdeletelocationbyid_;
}
const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse&
Response::_Internal::resdeletelocationbyidbulk(const Response* msg) {
  return *msg->AResponse_.resdeletelocationbyidbulk_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse&
Response::_Internal::resfetchduplicatevillages(const Response* msg) {
  return *msg->AResponse_.resfetchduplicatevillages_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse&
Response::_Internal::resfetchduplicatevillagesbysdtvlatlong(const Response* msg) {
  return *msg->AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse&
Response::_Internal::resfetchduplicatetehsilsbysdtvlatlong(const Response* msg) {
  return *msg->AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse&
Response::_Internal::resfetchduplicatedistrictsbysdtvlatlong(const Response* msg) {
  return *msg->AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse&
Response::_Internal::resfetchduplicatestatesbysdtvlatlong(const Response* msg) {
  return *msg->AResponse_.resfetchduplicatestatesbysdtvlatlong_;
}
const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse&
Response::_Internal::resgetduplicategeographies(const Response* msg) {
  return *msg->AResponse_.resgetduplicategeographies_;
}
const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse&
Response::_Internal::resinsertvendorlocationdata(const Response* msg) {
  return *msg->AResponse_.resinsertvendorlocationdata_;
}
const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse&
Response::_Internal::resinsertvendorlocationdatabulk(const Response* msg) {
  return *msg->AResponse_.resinsertvendorlocationdatabulk_;
}
const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse&
Response::_Internal::ressearchvendorlocationsbygeohash(const Response* msg) {
  return *msg->AResponse_.ressearchvendorlocationsbygeohash_;
}
const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse&
Response::_Internal::ressearchlocationsbygeohash(const Response* msg) {
  return *msg->AResponse_.ressearchlocationsbygeohash_;
}
const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse&
Response::_Internal::resgetlocationdatabylatlng(const Response* msg) {
  return *msg->AResponse_.resgetlocationdatabylatlng_;
}
const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse&
Response::_Internal::resaddvendorapiledger(const Response* msg) {
  return *msg->AResponse_.resaddvendorapiledger_;
}
const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse&
Response::_Internal::resaddvendorapiledgerbulk(const Response* msg) {
  return *msg->AResponse_.resaddvendorapiledgerbulk_;
}
void Response::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Response::set_allocated_resinsertlocation(::farm::nurture::location::service::proto::InsertLocationResponse* resinsertlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocation);
    if (message_arena != submessage_arena) {
      resinsertlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocation, submessage_arena);
    }
    set_has_resinsertlocation();
    AResponse_.resinsertlocation_ = resinsertlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocation)
}
void Response::set_allocated_resinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationResponse* resinsertlocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocationbulk);
    if (message_arena != submessage_arena) {
      resinsertlocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocationbulk, submessage_arena);
    }
    set_has_resinsertlocationbulk();
    AResponse_.resinsertlocationbulk_ = resinsertlocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
}
void Response::set_allocated_resinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resinsertlocations2cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocations2cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocations2cell);
    if (message_arena != submessage_arena) {
      resinsertlocations2cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocations2cell, submessage_arena);
    }
    set_has_resinsertlocations2cell();
    AResponse_.resinsertlocations2cell_ = resinsertlocations2cell;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
}
void Response::set_allocated_resinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resinsertlocations2cellbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocations2cellbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocations2cellbulk);
    if (message_arena != submessage_arena) {
      resinsertlocations2cellbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocations2cellbulk, submessage_arena);
    }
    set_has_resinsertlocations2cellbulk();
    AResponse_.resinsertlocations2cellbulk_ = resinsertlocations2cellbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
}
void Response::set_allocated_resinsertconfig(::farm::nurture::location::service::proto::InsertConfigResponse* resinsertconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertconfig);
    if (message_arena != submessage_arena) {
      resinsertconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertconfig, submessage_arena);
    }
    set_has_resinsertconfig();
    AResponse_.resinsertconfig_ = resinsertconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertConfig)
}
void Response::set_allocated_resinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigResponse* resinsertconfigbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertconfigbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertconfigbulk);
    if (message_arena != submessage_arena) {
      resinsertconfigbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertconfigbulk, submessage_arena);
    }
    set_has_resinsertconfigbulk();
    AResponse_.resinsertconfigbulk_ = resinsertconfigbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
}
void Response::set_allocated_resfetchlocationbyid(::farm::nurture::location::service::proto::Location* resfetchlocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchlocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchlocationbyid);
    if (message_arena != submessage_arena) {
      resfetchlocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchlocationbyid, submessage_arena);
    }
    set_has_resfetchlocationbyid();
    AResponse_.resfetchlocationbyid_ = resfetchlocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchLocationById)
}
void Response::set_allocated_resfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::Location* resfetchlocationbycodeandnamespace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchlocationbycodeandnamespace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchlocationbycodeandnamespace);
    if (message_arena != submessage_arena) {
      resfetchlocationbycodeandnamespace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchlocationbycodeandnamespace, submessage_arena);
    }
    set_has_resfetchlocationbycodeandnamespace();
    AResponse_.resfetchlocationbycodeandnamespace_ = resfetchlocationbycodeandnamespace;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
}
void Response::set_allocated_resfetchs2cellbyid(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchs2cellbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchs2cellbyid);
    if (message_arena != submessage_arena) {
      resfetchs2cellbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchs2cellbyid, submessage_arena);
    }
    set_has_resfetchs2cellbyid();
    AResponse_.resfetchs2cellbyid_ = resfetchs2cellbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellById)
}
void Response::set_allocated_resfetchs2cellbylocation(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbylocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchs2cellbylocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchs2cellbylocation);
    if (message_arena != submessage_arena) {
      resfetchs2cellbylocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchs2cellbylocation, submessage_arena);
    }
    set_has_resfetchs2cellbylocation();
    AResponse_.resfetchs2cellbylocation_ = resfetchs2cellbylocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
}
void Response::set_allocated_resfetchs2cellbylocationid(::farm::nurture::location::service::proto::LocationS2Cells* resfetchs2cellbylocationid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchs2cellbylocationid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchs2cellbylocationid);
    if (message_arena != submessage_arena) {
      resfetchs2cellbylocationid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchs2cellbylocationid, submessage_arena);
    }
    set_has_resfetchs2cellbylocationid();
    AResponse_.resfetchs2cellbylocationid_ = resfetchs2cellbylocationid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
}
void Response::set_allocated_resupdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resupdatelocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationbyid);
    if (message_arena != submessage_arena) {
      resupdatelocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationbyid, submessage_arena);
    }
    set_has_resupdatelocationbyid();
    AResponse_.resupdatelocationbyid_ = resupdatelocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationById)
}
void Response::set_allocated_resupdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resupdatelocationbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationbyidbulk);
    if (message_arena != submessage_arena) {
      resupdatelocationbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationbyidbulk, submessage_arena);
    }
    set_has_resupdatelocationbyidbulk();
    AResponse_.resupdatelocationbyidbulk_ = resupdatelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
}
void Response::set_allocated_resupdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resupdatelocationlabelbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationlabelbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationlabelbyid);
    if (message_arena != submessage_arena) {
      resupdatelocationlabelbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationlabelbyid, submessage_arena);
    }
    set_has_resupdatelocationlabelbyid();
    AResponse_.resupdatelocationlabelbyid_ = resupdatelocationlabelbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
}
void Response::set_allocated_resupdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resupdatelocationlabelbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationlabelbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationlabelbyidbulk);
    if (message_arena != submessage_arena) {
      resupdatelocationlabelbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationlabelbyidbulk, submessage_arena);
    }
    set_has_resupdatelocationlabelbyidbulk();
    AResponse_.resupdatelocationlabelbyidbulk_ = resupdatelocationlabelbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
}
void Response::set_allocated_resupdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatedeletes2cellbylocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatedeletes2cellbylocation);
    if (message_arena != submessage_arena) {
      resupdatedeletes2cellbylocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatedeletes2cellbylocation, submessage_arena);
    }
    set_has_resupdatedeletes2cellbylocation();
    AResponse_.resupdatedeletes2cellbylocation_ = resupdatedeletes2cellbylocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
}
void Response::set_allocated_resupdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatedeletes2cellbylocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatedeletes2cellbylocationbulk);
    if (message_arena != submessage_arena) {
      resupdatedeletes2cellbylocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatedeletes2cellbylocationbulk, submessage_arena);
    }
    set_has_resupdatedeletes2cellbylocationbulk();
    AResponse_.resupdatedeletes2cellbylocationbulk_ = resupdatedeletes2cellbylocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
}
void Response::set_allocated_resfetchconfigbyid(::farm::nurture::location::service::proto::Config* resfetchconfigbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchconfigbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchconfigbyid);
    if (message_arena != submessage_arena) {
      resfetchconfigbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchconfigbyid, submessage_arena);
    }
    set_has_resfetchconfigbyid();
    AResponse_.resfetchconfigbyid_ = resfetchconfigbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchConfigById)
}
void Response::set_allocated_resaddlocation(::farm::nurture::location::service::proto::AddLocationResponse* resaddlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddlocation);
    if (message_arena != submessage_arena) {
      resaddlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddlocation, submessage_arena);
    }
    set_has_resaddlocation();
    AResponse_.resaddlocation_ = resaddlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resAddLocation)
}
void Response::set_allocated_resaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationResponse* resaddlocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddlocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddlocationbulk);
    if (message_arena != submessage_arena) {
      resaddlocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddlocationbulk, submessage_arena);
    }
    set_has_resaddlocationbulk();
    AResponse_.resaddlocationbulk_ = resaddlocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resAddLocationBulk)
}
void Response::set_allocated_resupdatelocation(::farm::nurture::location::service::proto::UpdateLocationResponse* resupdatelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocation);
    if (message_arena != submessage_arena) {
      resupdatelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocation, submessage_arena);
    }
    set_has_resupdatelocation();
    AResponse_.resupdatelocation_ = resupdatelocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocation)
}
void Response::set_allocated_resupdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resupdatelocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationbulk);
    if (message_arena != submessage_arena) {
      resupdatelocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationbulk, submessage_arena);
    }
    set_has_resupdatelocationbulk();
    AResponse_.resupdatelocationbulk_ = resupdatelocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
}
void Response::set_allocated_resgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resgetlocationswithboundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetlocationswithboundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetlocationswithboundary);
    if (message_arena != submessage_arena) {
      resgetlocationswithboundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetlocationswithboundary, submessage_arena);
    }
    set_has_resgetlocationswithboundary();
    AResponse_.resgetlocationswithboundary_ = resgetlocationswithboundary;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
}
void Response::set_allocated_resgetlocations(::farm::nurture::location::service::proto::GetLocationsResponse* resgetlocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetlocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetlocations);
    if (message_arena != submessage_arena) {
      resgetlocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetlocations, submessage_arena);
    }
    set_has_resgetlocations();
    AResponse_.resgetlocations_ = resgetlocations;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resGetLocations)
}
void Response::set_allocated_resgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesResponse* resgetchildgeographies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetchildgeographies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetchildgeographies);
    if (message_arena != submessage_arena) {
      resgetchildgeographies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetchildgeographies, submessage_arena);
    }
    set_has_resgetchildgeographies();
    AResponse_.resgetchildgeographies_ = resgetchildgeographies;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resGetChildGeographies)
}
void Response::set_allocated_resinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocationwithoutboundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocationwithoutboundary);
    if (message_arena != submessage_arena) {
      resinsertlocationwithoutboundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocationwithoutboundary, submessage_arena);
    }
    set_has_resinsertlocationwithoutboundary();
    AResponse_.resinsertlocationwithoutboundary_ = resinsertlocationwithoutboundary;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
}
void Response::set_allocated_resinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundarybulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertlocationwithoutboundarybulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertlocationwithoutboundarybulk);
    if (message_arena != submessage_arena) {
      resinsertlocationwithoutboundarybulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertlocationwithoutboundarybulk, submessage_arena);
    }
    set_has_resinsertlocationwithoutboundarybulk();
    AResponse_.resinsertlocationwithoutboundarybulk_ = resinsertlocationwithoutboundarybulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
}
void Response::set_allocated_resupdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationwithoutboundarybyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationwithoutboundarybyid);
    if (message_arena != submessage_arena) {
      resupdatelocationwithoutboundarybyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationwithoutboundarybyid, submessage_arena);
    }
    set_has_resupdatelocationwithoutboundarybyid();
    AResponse_.resupdatelocationwithoutboundarybyid_ = resupdatelocationwithoutboundarybyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
}
void Response::set_allocated_resupdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatelocationwithoutboundarybyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatelocationwithoutboundarybyidbulk);
    if (message_arena != submessage_arena) {
      resupdatelocationwithoutboundarybyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatelocationwithoutboundarybyidbulk, submessage_arena);
    }
    set_has_resupdatelocationwithoutboundarybyidbulk();
    AResponse_.resupdatelocationwithoutboundarybyidbulk_ = resupdatelocationwithoutboundarybyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
}
void Response::set_allocated_resdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resdeletelocationbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resdeletelocationbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resdeletelocationbyid);
    if (message_arena != submessage_arena) {
      resdeletelocationbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resdeletelocationbyid, submessage_arena);
    }
    set_has_resdeletelocationbyid();
    AResponse_.resdeletelocationbyid_ = resdeletelocationbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resDeleteLocationById)
}
void Response::set_allocated_resdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resdeletelocationbyidbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resdeletelocationbyidbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resdeletelocationbyidbulk);
    if (message_arena != submessage_arena) {
      resdeletelocationbyidbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resdeletelocationbyidbulk, submessage_arena);
    }
    set_has_resdeletelocationbyidbulk();
    AResponse_.resdeletelocationbyidbulk_ = resdeletelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
}
void Response::set_allocated_resfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* resfetchduplicatevillages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchduplicatevillages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchduplicatevillages);
    if (message_arena != submessage_arena) {
      resfetchduplicatevillages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchduplicatevillages, submessage_arena);
    }
    set_has_resfetchduplicatevillages();
    AResponse_.resfetchduplicatevillages_ = resfetchduplicatevillages;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
}
void Response::set_allocated_resfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* resfetchduplicatevillagesbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchduplicatevillagesbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchduplicatevillagesbysdtvlatlong);
    if (message_arena != submessage_arena) {
      resfetchduplicatevillagesbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchduplicatevillagesbysdtvlatlong, submessage_arena);
    }
    set_has_resfetchduplicatevillagesbysdtvlatlong();
    AResponse_.resfetchduplicatevillagesbysdtvlatlong_ = resfetchduplicatevillagesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
}
void Response::set_allocated_resfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* resfetchduplicatetehsilsbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchduplicatetehsilsbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchduplicatetehsilsbysdtvlatlong);
    if (message_arena != submessage_arena) {
      resfetchduplicatetehsilsbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchduplicatetehsilsbysdtvlatlong, submessage_arena);
    }
    set_has_resfetchduplicatetehsilsbysdtvlatlong();
    AResponse_.resfetchduplicatetehsilsbysdtvlatlong_ = resfetchduplicatetehsilsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
}
void Response::set_allocated_resfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* resfetchduplicatedistrictsbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchduplicatedistrictsbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchduplicatedistrictsbysdtvlatlong);
    if (message_arena != submessage_arena) {
      resfetchduplicatedistrictsbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchduplicatedistrictsbysdtvlatlong, submessage_arena);
    }
    set_has_resfetchduplicatedistrictsbysdtvlatlong();
    AResponse_.resfetchduplicatedistrictsbysdtvlatlong_ = resfetchduplicatedistrictsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
}
void Response::set_allocated_resfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* resfetchduplicatestatesbysdtvlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfetchduplicatestatesbysdtvlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfetchduplicatestatesbysdtvlatlong);
    if (message_arena != submessage_arena) {
      resfetchduplicatestatesbysdtvlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfetchduplicatestatesbysdtvlatlong, submessage_arena);
    }
    set_has_resfetchduplicatestatesbysdtvlatlong();
    AResponse_.resfetchduplicatestatesbysdtvlatlong_ = resfetchduplicatestatesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
}
void Response::set_allocated_resgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* resgetduplicategeographies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetduplicategeographies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetduplicategeographies);
    if (message_arena != submessage_arena) {
      resgetduplicategeographies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetduplicategeographies, submessage_arena);
    }
    set_has_resgetduplicategeographies();
    AResponse_.resgetduplicategeographies_ = resgetduplicategeographies;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
}
void Response::set_allocated_resinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* resinsertvendorlocationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertvendorlocationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertvendorlocationdata);
    if (message_arena != submessage_arena) {
      resinsertvendorlocationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertvendorlocationdata, submessage_arena);
    }
    set_has_resinsertvendorlocationdata();
    AResponse_.resinsertvendorlocationdata_ = resinsertvendorlocationdata;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
}
void Response::set_allocated_resinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* resinsertvendorlocationdatabulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resinsertvendorlocationdatabulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinsertvendorlocationdatabulk);
    if (message_arena != submessage_arena) {
      resinsertvendorlocationdatabulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinsertvendorlocationdatabulk, submessage_arena);
    }
    set_has_resinsertvendorlocationdatabulk();
    AResponse_.resinsertvendorlocationdatabulk_ = resinsertvendorlocationdatabulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
}
void Response::set_allocated_ressearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* ressearchvendorlocationsbygeohash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (ressearchvendorlocationsbygeohash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ressearchvendorlocationsbygeohash);
    if (message_arena != submessage_arena) {
      ressearchvendorlocationsbygeohash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ressearchvendorlocationsbygeohash, submessage_arena);
    }
    set_has_ressearchvendorlocationsbygeohash();
    AResponse_.ressearchvendorlocationsbygeohash_ = ressearchvendorlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
}
void Response::set_allocated_ressearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* ressearchlocationsbygeohash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (ressearchlocationsbygeohash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ressearchlocationsbygeohash);
    if (message_arena != submessage_arena) {
      ressearchlocationsbygeohash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ressearchlocationsbygeohash, submessage_arena);
    }
    set_has_ressearchlocationsbygeohash();
    AResponse_.ressearchlocationsbygeohash_ = ressearchlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
}
void Response::set_allocated_resgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* resgetlocationdatabylatlng) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetlocationdatabylatlng) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetlocationdatabylatlng);
    if (message_arena != submessage_arena) {
      resgetlocationdatabylatlng = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetlocationdatabylatlng, submessage_arena);
    }
    set_has_resgetlocationdatabylatlng();
    AResponse_.resgetlocationdatabylatlng_ = resgetlocationdatabylatlng;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
}
void Response::set_allocated_resaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* resaddvendorapiledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddvendorapiledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddvendorapiledger);
    if (message_arena != submessage_arena) {
      resaddvendorapiledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddvendorapiledger, submessage_arena);
    }
    set_has_resaddvendorapiledger();
    AResponse_.resaddvendorapiledger_ = resaddvendorapiledger;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
}
void Response::set_allocated_resaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* resaddvendorapiledgerbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddvendorapiledgerbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddvendorapiledgerbulk);
    if (message_arena != submessage_arena) {
      resaddvendorapiledgerbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddvendorapiledgerbulk, submessage_arena);
    }
    set_has_resaddvendorapiledgerbulk();
    AResponse_.resaddvendorapiledgerbulk_ = resaddvendorapiledgerbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.location.service.proto.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_AResponse();
  switch (from.AResponse_case()) {
    case kResInsertLocation: {
      _internal_mutable_resinsertlocation()->::farm::nurture::location::service::proto::InsertLocationResponse::MergeFrom(from._internal_resinsertlocation());
      break;
    }
    case kResInsertLocationBulk: {
      _internal_mutable_resinsertlocationbulk()->::farm::nurture::location::service::proto::BulkInsertLocationResponse::MergeFrom(from._internal_resinsertlocationbulk());
      break;
    }
    case kResInsertLocationS2Cell: {
      _internal_mutable_resinsertlocations2cell()->::farm::nurture::location::service::proto::InsertLocationS2CellResponse::MergeFrom(from._internal_resinsertlocations2cell());
      break;
    }
    case kResInsertLocationS2CellBulk: {
      _internal_mutable_resinsertlocations2cellbulk()->::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse::MergeFrom(from._internal_resinsertlocations2cellbulk());
      break;
    }
    case kResInsertConfig: {
      _internal_mutable_resinsertconfig()->::farm::nurture::location::service::proto::InsertConfigResponse::MergeFrom(from._internal_resinsertconfig());
      break;
    }
    case kResInsertConfigBulk: {
      _internal_mutable_resinsertconfigbulk()->::farm::nurture::location::service::proto::BulkInsertConfigResponse::MergeFrom(from._internal_resinsertconfigbulk());
      break;
    }
    case kResFetchLocationById: {
      _internal_mutable_resfetchlocationbyid()->::farm::nurture::location::service::proto::Location::MergeFrom(from._internal_resfetchlocationbyid());
      break;
    }
    case kResFetchLocationByCodeAndNamespace: {
      _internal_mutable_resfetchlocationbycodeandnamespace()->::farm::nurture::location::service::proto::Location::MergeFrom(from._internal_resfetchlocationbycodeandnamespace());
      break;
    }
    case kResFetchS2CellById: {
      _internal_mutable_resfetchs2cellbyid()->::farm::nurture::location::service::proto::S2Cell::MergeFrom(from._internal_resfetchs2cellbyid());
      break;
    }
    case kResFetchS2CellByLocation: {
      _internal_mutable_resfetchs2cellbylocation()->::farm::nurture::location::service::proto::S2Cell::MergeFrom(from._internal_resfetchs2cellbylocation());
      break;
    }
    case kResFetchS2CellByLocationId: {
      _internal_mutable_resfetchs2cellbylocationid()->::farm::nurture::location::service::proto::LocationS2Cells::MergeFrom(from._internal_resfetchs2cellbylocationid());
      break;
    }
    case kResUpdateLocationById: {
      _internal_mutable_resupdatelocationbyid()->::farm::nurture::location::service::proto::UpdateLocationByIdResponse::MergeFrom(from._internal_resupdatelocationbyid());
      break;
    }
    case kResUpdateLocationByIdBulk: {
      _internal_mutable_resupdatelocationbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse::MergeFrom(from._internal_resupdatelocationbyidbulk());
      break;
    }
    case kResUpdateLocationLabelById: {
      _internal_mutable_resupdatelocationlabelbyid()->::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse::MergeFrom(from._internal_resupdatelocationlabelbyid());
      break;
    }
    case kResUpdateLocationLabelByIdBulk: {
      _internal_mutable_resupdatelocationlabelbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse::MergeFrom(from._internal_resupdatelocationlabelbyidbulk());
      break;
    }
    case kResUpdateDeleteS2CellByLocation: {
      _internal_mutable_resupdatedeletes2cellbylocation()->::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse::MergeFrom(from._internal_resupdatedeletes2cellbylocation());
      break;
    }
    case kResUpdateDeleteS2CellByLocationBulk: {
      _internal_mutable_resupdatedeletes2cellbylocationbulk()->::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse::MergeFrom(from._internal_resupdatedeletes2cellbylocationbulk());
      break;
    }
    case kResFetchConfigById: {
      _internal_mutable_resfetchconfigbyid()->::farm::nurture::location::service::proto::Config::MergeFrom(from._internal_resfetchconfigbyid());
      break;
    }
    case kResAddLocation: {
      _internal_mutable_resaddlocation()->::farm::nurture::location::service::proto::AddLocationResponse::MergeFrom(from._internal_resaddlocation());
      break;
    }
    case kResAddLocationBulk: {
      _internal_mutable_resaddlocationbulk()->::farm::nurture::location::service::proto::BulkAddLocationResponse::MergeFrom(from._internal_resaddlocationbulk());
      break;
    }
    case kResUpdateLocation: {
      _internal_mutable_resupdatelocation()->::farm::nurture::location::service::proto::UpdateLocationResponse::MergeFrom(from._internal_resupdatelocation());
      break;
    }
    case kResUpdateLocationBulk: {
      _internal_mutable_resupdatelocationbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationResponse::MergeFrom(from._internal_resupdatelocationbulk());
      break;
    }
    case kResGetLocationsWithBoundary: {
      _internal_mutable_resgetlocationswithboundary()->::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse::MergeFrom(from._internal_resgetlocationswithboundary());
      break;
    }
    case kResGetLocations: {
      _internal_mutable_resgetlocations()->::farm::nurture::location::service::proto::GetLocationsResponse::MergeFrom(from._internal_resgetlocations());
      break;
    }
    case kResGetChildGeographies: {
      _internal_mutable_resgetchildgeographies()->::farm::nurture::location::service::proto::GetChildGeographiesResponse::MergeFrom(from._internal_resgetchildgeographies());
      break;
    }
    case kResInsertLocationWithoutBoundary: {
      _internal_mutable_resinsertlocationwithoutboundary()->::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse::MergeFrom(from._internal_resinsertlocationwithoutboundary());
      break;
    }
    case kResInsertLocationWithoutBoundaryBulk: {
      _internal_mutable_resinsertlocationwithoutboundarybulk()->::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse::MergeFrom(from._internal_resinsertlocationwithoutboundarybulk());
      break;
    }
    case kResUpdateLocationWithoutBoundaryById: {
      _internal_mutable_resupdatelocationwithoutboundarybyid()->::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse::MergeFrom(from._internal_resupdatelocationwithoutboundarybyid());
      break;
    }
    case kResUpdateLocationWithoutBoundaryByIdBulk: {
      _internal_mutable_resupdatelocationwithoutboundarybyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse::MergeFrom(from._internal_resupdatelocationwithoutboundarybyidbulk());
      break;
    }
    case kResDeleteLocationById: {
      _internal_mutable_resdeletelocationbyid()->::farm::nurture::location::service::proto::DeleteLocationByIdResponse::MergeFrom(from._internal_resdeletelocationbyid());
      break;
    }
    case kResDeleteLocationByIdBulk: {
      _internal_mutable_resdeletelocationbyidbulk()->::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse::MergeFrom(from._internal_resdeletelocationbyidbulk());
      break;
    }
    case kResFetchDuplicateVillages: {
      _internal_mutable_resfetchduplicatevillages()->::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse::MergeFrom(from._internal_resfetchduplicatevillages());
      break;
    }
    case kResFetchDuplicateVillagesBySDTVLatLong: {
      _internal_mutable_resfetchduplicatevillagesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatevillagesbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateTehsilsBySDTVLatLong: {
      _internal_mutable_resfetchduplicatetehsilsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatetehsilsbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateDistrictsBySDTVLatLong: {
      _internal_mutable_resfetchduplicatedistrictsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatedistrictsbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateStatesBySDTVLatLong: {
      _internal_mutable_resfetchduplicatestatesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatestatesbysdtvlatlong());
      break;
    }
    case kResGetDuplicateGeographies: {
      _internal_mutable_resgetduplicategeographies()->::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse::MergeFrom(from._internal_resgetduplicategeographies());
      break;
    }
    case kResInsertVendorLocationData: {
      _internal_mutable_resinsertvendorlocationdata()->::farm::nurture::location::service::proto::InsertVendorLocationDataResponse::MergeFrom(from._internal_resinsertvendorlocationdata());
      break;
    }
    case kResInsertVendorLocationDataBulk: {
      _internal_mutable_resinsertvendorlocationdatabulk()->::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse::MergeFrom(from._internal_resinsertvendorlocationdatabulk());
      break;
    }
    case kResSearchVendorLocationsByGeohash: {
      _internal_mutable_ressearchvendorlocationsbygeohash()->::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse::MergeFrom(from._internal_ressearchvendorlocationsbygeohash());
      break;
    }
    case kResSearchLocationsByGeohash: {
      _internal_mutable_ressearchlocationsbygeohash()->::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse::MergeFrom(from._internal_ressearchlocationsbygeohash());
      break;
    }
    case kResGetLocationDataByLatLng: {
      _internal_mutable_resgetlocationdatabylatlng()->::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse::MergeFrom(from._internal_resgetlocationdatabylatlng());
      break;
    }
    case kResAddVendorApiLedger: {
      _internal_mutable_resaddvendorapiledger()->::farm::nurture::location::service::proto::AddVendorApiLedgerResponse::MergeFrom(from._internal_resaddvendorapiledger());
      break;
    }
    case kResAddVendorApiLedgerBulk: {
      _internal_mutable_resaddvendorapiledgerbulk()->::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse::MergeFrom(from._internal_resaddvendorapiledgerbulk());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.location.service.proto.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_LocationService_2flocation_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
  clear_has_AResponse();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:farm.nurture.location.service.proto.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (has_AResponse()) {
    clear_AResponse();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_LocationService_2flocation_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_AResponse() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.location.service.proto.Response)
  switch (AResponse_case()) {
    case kResInsertLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocation_;
      }
      break;
    }
    case kResInsertLocationBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocationbulk_;
      }
      break;
    }
    case kResInsertLocationS2Cell: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocations2cell_;
      }
      break;
    }
    case kResInsertLocationS2CellBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocations2cellbulk_;
      }
      break;
    }
    case kResInsertConfig: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertconfig_;
      }
      break;
    }
    case kResInsertConfigBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertconfigbulk_;
      }
      break;
    }
    case kResFetchLocationById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchlocationbyid_;
      }
      break;
    }
    case kResFetchLocationByCodeAndNamespace: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchlocationbycodeandnamespace_;
      }
      break;
    }
    case kResFetchS2CellById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchs2cellbyid_;
      }
      break;
    }
    case kResFetchS2CellByLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchs2cellbylocation_;
      }
      break;
    }
    case kResFetchS2CellByLocationId: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchs2cellbylocationid_;
      }
      break;
    }
    case kResUpdateLocationById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationbyid_;
      }
      break;
    }
    case kResUpdateLocationByIdBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationbyidbulk_;
      }
      break;
    }
    case kResUpdateLocationLabelById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationlabelbyid_;
      }
      break;
    }
    case kResUpdateLocationLabelByIdBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationlabelbyidbulk_;
      }
      break;
    }
    case kResUpdateDeleteS2CellByLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatedeletes2cellbylocation_;
      }
      break;
    }
    case kResUpdateDeleteS2CellByLocationBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatedeletes2cellbylocationbulk_;
      }
      break;
    }
    case kResFetchConfigById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchconfigbyid_;
      }
      break;
    }
    case kResAddLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddlocation_;
      }
      break;
    }
    case kResAddLocationBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddlocationbulk_;
      }
      break;
    }
    case kResUpdateLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocation_;
      }
      break;
    }
    case kResUpdateLocationBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationbulk_;
      }
      break;
    }
    case kResGetLocationsWithBoundary: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetlocationswithboundary_;
      }
      break;
    }
    case kResGetLocations: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetlocations_;
      }
      break;
    }
    case kResGetChildGeographies: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetchildgeographies_;
      }
      break;
    }
    case kResInsertLocationWithoutBoundary: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocationwithoutboundary_;
      }
      break;
    }
    case kResInsertLocationWithoutBoundaryBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertlocationwithoutboundarybulk_;
      }
      break;
    }
    case kResUpdateLocationWithoutBoundaryById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationwithoutboundarybyid_;
      }
      break;
    }
    case kResUpdateLocationWithoutBoundaryByIdBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatelocationwithoutboundarybyidbulk_;
      }
      break;
    }
    case kResDeleteLocationById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resdeletelocationbyid_;
      }
      break;
    }
    case kResDeleteLocationByIdBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resdeletelocationbyidbulk_;
      }
      break;
    }
    case kResFetchDuplicateVillages: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchduplicatevillages_;
      }
      break;
    }
    case kResFetchDuplicateVillagesBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
      }
      break;
    }
    case kResFetchDuplicateTehsilsBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
      }
      break;
    }
    case kResFetchDuplicateDistrictsBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
      }
      break;
    }
    case kResFetchDuplicateStatesBySDTVLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfetchduplicatestatesbysdtvlatlong_;
      }
      break;
    }
    case kResGetDuplicateGeographies: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetduplicategeographies_;
      }
      break;
    }
    case kResInsertVendorLocationData: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertvendorlocationdata_;
      }
      break;
    }
    case kResInsertVendorLocationDataBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resinsertvendorlocationdatabulk_;
      }
      break;
    }
    case kResSearchVendorLocationsByGeohash: {
      if (GetArena() == nullptr) {
        delete AResponse_.ressearchvendorlocationsbygeohash_;
      }
      break;
    }
    case kResSearchLocationsByGeohash: {
      if (GetArena() == nullptr) {
        delete AResponse_.ressearchlocationsbygeohash_;
      }
      break;
    }
    case kResGetLocationDataByLatLng: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetlocationdatabylatlng_;
      }
      break;
    }
    case kResAddVendorApiLedger: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddvendorapiledger_;
      }
      break;
    }
    case kResAddVendorApiLedgerBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddvendorapiledgerbulk_;
      }
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.location.service.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_AResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.location.service.proto.Response.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationResponse resInsertLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationResponse resInsertLocationBulk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationS2CellResponse resInsertLocationS2Cell = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocations2cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse resInsertLocationS2CellBulk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocations2cellbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertConfigResponse resInsertConfig = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertConfigResponse resInsertConfigBulk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertconfigbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Location resFetchLocationById = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchlocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Location resFetchLocationByCodeAndNamespace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchlocationbycodeandnamespace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.S2Cell resFetchS2CellById = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchs2cellbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.S2Cell resFetchS2CellByLocation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchs2cellbylocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.LocationS2Cells resFetchS2CellByLocationId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchs2cellbylocationid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationByIdResponse resUpdateLocationById = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse resUpdateLocationByIdBulk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse resUpdateLocationLabelById = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationlabelbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse resUpdateLocationLabelByIdBulk = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationlabelbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatedeletes2cellbylocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocationBulk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatedeletes2cellbylocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.Config resFetchConfigById = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchconfigbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.AddLocationResponse resAddLocation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkAddLocationResponse resAddLocationBulk = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddlocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationResponse resUpdateLocation = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationResponse resUpdateLocationBulk = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse resGetLocationsWithBoundary = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetlocationswithboundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationsResponse resGetLocations = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetlocations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetChildGeographiesResponse resGetChildGeographies = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetchildgeographies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundary = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocationwithoutboundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundaryBulk = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertlocationwithoutboundarybulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryById = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationwithoutboundarybyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryByIdBulk = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatelocationwithoutboundarybyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.DeleteLocationByIdResponse resDeleteLocationById = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_resdeletelocationbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse resDeleteLocationByIdBulk = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resdeletelocationbyidbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateVillagesResponse resFetchDuplicateVillages = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchduplicatevillages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse resFetchDuplicateVillagesBySDTVLatLong = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchduplicatevillagesbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse resFetchDuplicateTehsilsBySDTVLatLong = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchduplicatetehsilsbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse resFetchDuplicateDistrictsBySDTVLatLong = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchduplicatedistrictsbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse resFetchDuplicateStatesBySDTVLatLong = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfetchduplicatestatesbysdtvlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetDuplicateGeographiesResponse resGetDuplicateGeographies = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetduplicategeographies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.InsertVendorLocationDataResponse resInsertVendorLocationData = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertvendorlocationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse resInsertVendorLocationDataBulk = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinsertvendorlocationdatabulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse resSearchVendorLocationsByGeohash = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ressearchvendorlocationsbygeohash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.SearchLocationsByGeohashResponse resSearchLocationsByGeohash = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ressearchlocationsbygeohash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.GetLocationDataByLatLngResponse resGetLocationDataByLatLng = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetlocationdatabylatlng(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.AddVendorApiLedgerResponse resAddVendorApiLedger = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddvendorapiledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse resAddVendorApiLedgerBulk = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddvendorapiledgerbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.location.service.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.location.service.proto.Response.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertLocationResponse resInsertLocation = 3;
  if (_internal_has_resinsertlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resinsertlocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationResponse resInsertLocationBulk = 4;
  if (_internal_has_resinsertlocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resinsertlocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertLocationS2CellResponse resInsertLocationS2Cell = 5;
  if (_internal_has_resinsertlocations2cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::resinsertlocations2cell(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse resInsertLocationS2CellBulk = 6;
  if (_internal_has_resinsertlocations2cellbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resinsertlocations2cellbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertConfigResponse resInsertConfig = 7;
  if (_internal_has_resinsertconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resinsertconfig(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertConfigResponse resInsertConfigBulk = 8;
  if (_internal_has_resinsertconfigbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::resinsertconfigbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.Location resFetchLocationById = 9;
  if (_internal_has_resfetchlocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::resfetchlocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.Location resFetchLocationByCodeAndNamespace = 10;
  if (_internal_has_resfetchlocationbycodeandnamespace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::resfetchlocationbycodeandnamespace(this), target, stream);
  }

  // .farm.nurture.location.service.proto.S2Cell resFetchS2CellById = 11;
  if (_internal_has_resfetchs2cellbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::resfetchs2cellbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.S2Cell resFetchS2CellByLocation = 12;
  if (_internal_has_resfetchs2cellbylocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::resfetchs2cellbylocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.LocationS2Cells resFetchS2CellByLocationId = 13;
  if (_internal_has_resfetchs2cellbylocationid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::resfetchs2cellbylocationid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationByIdResponse resUpdateLocationById = 14;
  if (_internal_has_resupdatelocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::resupdatelocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse resUpdateLocationByIdBulk = 15;
  if (_internal_has_resupdatelocationbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::resupdatelocationbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse resUpdateLocationLabelById = 16;
  if (_internal_has_resupdatelocationlabelbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::resupdatelocationlabelbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse resUpdateLocationLabelByIdBulk = 17;
  if (_internal_has_resupdatelocationlabelbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::resupdatelocationlabelbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocation = 18;
  if (_internal_has_resupdatedeletes2cellbylocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::resupdatedeletes2cellbylocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocationBulk = 19;
  if (_internal_has_resupdatedeletes2cellbylocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::resupdatedeletes2cellbylocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.Config resFetchConfigById = 20;
  if (_internal_has_resfetchconfigbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::resfetchconfigbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.AddLocationResponse resAddLocation = 21;
  if (_internal_has_resaddlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::resaddlocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkAddLocationResponse resAddLocationBulk = 22;
  if (_internal_has_resaddlocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::resaddlocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationResponse resUpdateLocation = 23;
  if (_internal_has_resupdatelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::resupdatelocation(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationResponse resUpdateLocationBulk = 24;
  if (_internal_has_resupdatelocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::resupdatelocationbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse resGetLocationsWithBoundary = 25;
  if (_internal_has_resgetlocationswithboundary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::resgetlocationswithboundary(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationsResponse resGetLocations = 26;
  if (_internal_has_resgetlocations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::resgetlocations(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetChildGeographiesResponse resGetChildGeographies = 27;
  if (_internal_has_resgetchildgeographies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::resgetchildgeographies(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundary = 28;
  if (_internal_has_resinsertlocationwithoutboundary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::resinsertlocationwithoutboundary(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundaryBulk = 29;
  if (_internal_has_resinsertlocationwithoutboundarybulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::resinsertlocationwithoutboundarybulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryById = 30;
  if (_internal_has_resupdatelocationwithoutboundarybyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::resupdatelocationwithoutboundarybyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryByIdBulk = 31;
  if (_internal_has_resupdatelocationwithoutboundarybyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::resupdatelocationwithoutboundarybyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.DeleteLocationByIdResponse resDeleteLocationById = 32;
  if (_internal_has_resdeletelocationbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::resdeletelocationbyid(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse resDeleteLocationByIdBulk = 33;
  if (_internal_has_resdeletelocationbyidbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::resdeletelocationbyidbulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesResponse resFetchDuplicateVillages = 34;
  if (_internal_has_resfetchduplicatevillages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::resfetchduplicatevillages(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse resFetchDuplicateVillagesBySDTVLatLong = 35;
  if (_internal_has_resfetchduplicatevillagesbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::resfetchduplicatevillagesbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse resFetchDuplicateTehsilsBySDTVLatLong = 36;
  if (_internal_has_resfetchduplicatetehsilsbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::resfetchduplicatetehsilsbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse resFetchDuplicateDistrictsBySDTVLatLong = 37;
  if (_internal_has_resfetchduplicatedistrictsbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::resfetchduplicatedistrictsbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse resFetchDuplicateStatesBySDTVLatLong = 38;
  if (_internal_has_resfetchduplicatestatesbysdtvlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::resfetchduplicatestatesbysdtvlatlong(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetDuplicateGeographiesResponse resGetDuplicateGeographies = 39;
  if (_internal_has_resgetduplicategeographies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::resgetduplicategeographies(this), target, stream);
  }

  // .farm.nurture.location.service.proto.InsertVendorLocationDataResponse resInsertVendorLocationData = 40;
  if (_internal_has_resinsertvendorlocationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::resinsertvendorlocationdata(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse resInsertVendorLocationDataBulk = 41;
  if (_internal_has_resinsertvendorlocationdatabulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::resinsertvendorlocationdatabulk(this), target, stream);
  }

  // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse resSearchVendorLocationsByGeohash = 42;
  if (_internal_has_ressearchvendorlocationsbygeohash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::ressearchvendorlocationsbygeohash(this), target, stream);
  }

  // .farm.nurture.location.service.proto.SearchLocationsByGeohashResponse resSearchLocationsByGeohash = 43;
  if (_internal_has_ressearchlocationsbygeohash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::ressearchlocationsbygeohash(this), target, stream);
  }

  // .farm.nurture.location.service.proto.GetLocationDataByLatLngResponse resGetLocationDataByLatLng = 44;
  if (_internal_has_resgetlocationdatabylatlng()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::resgetlocationdatabylatlng(this), target, stream);
  }

  // .farm.nurture.location.service.proto.AddVendorApiLedgerResponse resAddVendorApiLedger = 45;
  if (_internal_has_resaddvendorapiledger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::resaddvendorapiledger(this), target, stream);
  }

  // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse resAddVendorApiLedgerBulk = 46;
  if (_internal_has_resaddvendorapiledgerbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::resaddvendorapiledgerbulk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.location.service.proto.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.location.service.proto.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (AResponse_case()) {
    // .farm.nurture.location.service.proto.InsertLocationResponse resInsertLocation = 3;
    case kResInsertLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationResponse resInsertLocationBulk = 4;
    case kResInsertLocationBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertLocationS2CellResponse resInsertLocationS2Cell = 5;
    case kResInsertLocationS2Cell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocations2cell_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse resInsertLocationS2CellBulk = 6;
    case kResInsertLocationS2CellBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocations2cellbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertConfigResponse resInsertConfig = 7;
    case kResInsertConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertconfig_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertConfigResponse resInsertConfigBulk = 8;
    case kResInsertConfigBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertconfigbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.Location resFetchLocationById = 9;
    case kResFetchLocationById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchlocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.Location resFetchLocationByCodeAndNamespace = 10;
    case kResFetchLocationByCodeAndNamespace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchlocationbycodeandnamespace_);
      break;
    }
    // .farm.nurture.location.service.proto.S2Cell resFetchS2CellById = 11;
    case kResFetchS2CellById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchs2cellbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.S2Cell resFetchS2CellByLocation = 12;
    case kResFetchS2CellByLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchs2cellbylocation_);
      break;
    }
    // .farm.nurture.location.service.proto.LocationS2Cells resFetchS2CellByLocationId = 13;
    case kResFetchS2CellByLocationId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchs2cellbylocationid_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationByIdResponse resUpdateLocationById = 14;
    case kResUpdateLocationById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse resUpdateLocationByIdBulk = 15;
    case kResUpdateLocationByIdBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse resUpdateLocationLabelById = 16;
    case kResUpdateLocationLabelById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationlabelbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse resUpdateLocationLabelByIdBulk = 17;
    case kResUpdateLocationLabelByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationlabelbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocation = 18;
    case kResUpdateDeleteS2CellByLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatedeletes2cellbylocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocationBulk = 19;
    case kResUpdateDeleteS2CellByLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatedeletes2cellbylocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.Config resFetchConfigById = 20;
    case kResFetchConfigById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchconfigbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.AddLocationResponse resAddLocation = 21;
    case kResAddLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddlocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkAddLocationResponse resAddLocationBulk = 22;
    case kResAddLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddlocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationResponse resUpdateLocation = 23;
    case kResUpdateLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocation_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationResponse resUpdateLocationBulk = 24;
    case kResUpdateLocationBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse resGetLocationsWithBoundary = 25;
    case kResGetLocationsWithBoundary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetlocationswithboundary_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationsResponse resGetLocations = 26;
    case kResGetLocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetlocations_);
      break;
    }
    // .farm.nurture.location.service.proto.GetChildGeographiesResponse resGetChildGeographies = 27;
    case kResGetChildGeographies: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetchildgeographies_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundary = 28;
    case kResInsertLocationWithoutBoundary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocationwithoutboundary_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundaryBulk = 29;
    case kResInsertLocationWithoutBoundaryBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertlocationwithoutboundarybulk_);
      break;
    }
    // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryById = 30;
    case kResUpdateLocationWithoutBoundaryById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationwithoutboundarybyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryByIdBulk = 31;
    case kResUpdateLocationWithoutBoundaryByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatelocationwithoutboundarybyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.DeleteLocationByIdResponse resDeleteLocationById = 32;
    case kResDeleteLocationById: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resdeletelocationbyid_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse resDeleteLocationByIdBulk = 33;
    case kResDeleteLocationByIdBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resdeletelocationbyidbulk_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateVillagesResponse resFetchDuplicateVillages = 34;
    case kResFetchDuplicateVillages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchduplicatevillages_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse resFetchDuplicateVillagesBySDTVLatLong = 35;
    case kResFetchDuplicateVillagesBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchduplicatevillagesbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse resFetchDuplicateTehsilsBySDTVLatLong = 36;
    case kResFetchDuplicateTehsilsBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchduplicatetehsilsbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse resFetchDuplicateDistrictsBySDTVLatLong = 37;
    case kResFetchDuplicateDistrictsBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchduplicatedistrictsbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse resFetchDuplicateStatesBySDTVLatLong = 38;
    case kResFetchDuplicateStatesBySDTVLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfetchduplicatestatesbysdtvlatlong_);
      break;
    }
    // .farm.nurture.location.service.proto.GetDuplicateGeographiesResponse resGetDuplicateGeographies = 39;
    case kResGetDuplicateGeographies: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetduplicategeographies_);
      break;
    }
    // .farm.nurture.location.service.proto.InsertVendorLocationDataResponse resInsertVendorLocationData = 40;
    case kResInsertVendorLocationData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertvendorlocationdata_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse resInsertVendorLocationDataBulk = 41;
    case kResInsertVendorLocationDataBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resinsertvendorlocationdatabulk_);
      break;
    }
    // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse resSearchVendorLocationsByGeohash = 42;
    case kResSearchVendorLocationsByGeohash: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.ressearchvendorlocationsbygeohash_);
      break;
    }
    // .farm.nurture.location.service.proto.SearchLocationsByGeohashResponse resSearchLocationsByGeohash = 43;
    case kResSearchLocationsByGeohash: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.ressearchlocationsbygeohash_);
      break;
    }
    // .farm.nurture.location.service.proto.GetLocationDataByLatLngResponse resGetLocationDataByLatLng = 44;
    case kResGetLocationDataByLatLng: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetlocationdatabylatlng_);
      break;
    }
    // .farm.nurture.location.service.proto.AddVendorApiLedgerResponse resAddVendorApiLedger = 45;
    case kResAddVendorApiLedger: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddvendorapiledger_);
      break;
    }
    // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse resAddVendorApiLedgerBulk = 46;
    case kResAddVendorApiLedgerBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddvendorapiledgerbulk_);
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.location.service.proto.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.location.service.proto.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.location.service.proto.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.location.service.proto.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  switch (from.AResponse_case()) {
    case kResInsertLocation: {
      _internal_mutable_resinsertlocation()->::farm::nurture::location::service::proto::InsertLocationResponse::MergeFrom(from._internal_resinsertlocation());
      break;
    }
    case kResInsertLocationBulk: {
      _internal_mutable_resinsertlocationbulk()->::farm::nurture::location::service::proto::BulkInsertLocationResponse::MergeFrom(from._internal_resinsertlocationbulk());
      break;
    }
    case kResInsertLocationS2Cell: {
      _internal_mutable_resinsertlocations2cell()->::farm::nurture::location::service::proto::InsertLocationS2CellResponse::MergeFrom(from._internal_resinsertlocations2cell());
      break;
    }
    case kResInsertLocationS2CellBulk: {
      _internal_mutable_resinsertlocations2cellbulk()->::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse::MergeFrom(from._internal_resinsertlocations2cellbulk());
      break;
    }
    case kResInsertConfig: {
      _internal_mutable_resinsertconfig()->::farm::nurture::location::service::proto::InsertConfigResponse::MergeFrom(from._internal_resinsertconfig());
      break;
    }
    case kResInsertConfigBulk: {
      _internal_mutable_resinsertconfigbulk()->::farm::nurture::location::service::proto::BulkInsertConfigResponse::MergeFrom(from._internal_resinsertconfigbulk());
      break;
    }
    case kResFetchLocationById: {
      _internal_mutable_resfetchlocationbyid()->::farm::nurture::location::service::proto::Location::MergeFrom(from._internal_resfetchlocationbyid());
      break;
    }
    case kResFetchLocationByCodeAndNamespace: {
      _internal_mutable_resfetchlocationbycodeandnamespace()->::farm::nurture::location::service::proto::Location::MergeFrom(from._internal_resfetchlocationbycodeandnamespace());
      break;
    }
    case kResFetchS2CellById: {
      _internal_mutable_resfetchs2cellbyid()->::farm::nurture::location::service::proto::S2Cell::MergeFrom(from._internal_resfetchs2cellbyid());
      break;
    }
    case kResFetchS2CellByLocation: {
      _internal_mutable_resfetchs2cellbylocation()->::farm::nurture::location::service::proto::S2Cell::MergeFrom(from._internal_resfetchs2cellbylocation());
      break;
    }
    case kResFetchS2CellByLocationId: {
      _internal_mutable_resfetchs2cellbylocationid()->::farm::nurture::location::service::proto::LocationS2Cells::MergeFrom(from._internal_resfetchs2cellbylocationid());
      break;
    }
    case kResUpdateLocationById: {
      _internal_mutable_resupdatelocationbyid()->::farm::nurture::location::service::proto::UpdateLocationByIdResponse::MergeFrom(from._internal_resupdatelocationbyid());
      break;
    }
    case kResUpdateLocationByIdBulk: {
      _internal_mutable_resupdatelocationbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse::MergeFrom(from._internal_resupdatelocationbyidbulk());
      break;
    }
    case kResUpdateLocationLabelById: {
      _internal_mutable_resupdatelocationlabelbyid()->::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse::MergeFrom(from._internal_resupdatelocationlabelbyid());
      break;
    }
    case kResUpdateLocationLabelByIdBulk: {
      _internal_mutable_resupdatelocationlabelbyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse::MergeFrom(from._internal_resupdatelocationlabelbyidbulk());
      break;
    }
    case kResUpdateDeleteS2CellByLocation: {
      _internal_mutable_resupdatedeletes2cellbylocation()->::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse::MergeFrom(from._internal_resupdatedeletes2cellbylocation());
      break;
    }
    case kResUpdateDeleteS2CellByLocationBulk: {
      _internal_mutable_resupdatedeletes2cellbylocationbulk()->::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse::MergeFrom(from._internal_resupdatedeletes2cellbylocationbulk());
      break;
    }
    case kResFetchConfigById: {
      _internal_mutable_resfetchconfigbyid()->::farm::nurture::location::service::proto::Config::MergeFrom(from._internal_resfetchconfigbyid());
      break;
    }
    case kResAddLocation: {
      _internal_mutable_resaddlocation()->::farm::nurture::location::service::proto::AddLocationResponse::MergeFrom(from._internal_resaddlocation());
      break;
    }
    case kResAddLocationBulk: {
      _internal_mutable_resaddlocationbulk()->::farm::nurture::location::service::proto::BulkAddLocationResponse::MergeFrom(from._internal_resaddlocationbulk());
      break;
    }
    case kResUpdateLocation: {
      _internal_mutable_resupdatelocation()->::farm::nurture::location::service::proto::UpdateLocationResponse::MergeFrom(from._internal_resupdatelocation());
      break;
    }
    case kResUpdateLocationBulk: {
      _internal_mutable_resupdatelocationbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationResponse::MergeFrom(from._internal_resupdatelocationbulk());
      break;
    }
    case kResGetLocationsWithBoundary: {
      _internal_mutable_resgetlocationswithboundary()->::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse::MergeFrom(from._internal_resgetlocationswithboundary());
      break;
    }
    case kResGetLocations: {
      _internal_mutable_resgetlocations()->::farm::nurture::location::service::proto::GetLocationsResponse::MergeFrom(from._internal_resgetlocations());
      break;
    }
    case kResGetChildGeographies: {
      _internal_mutable_resgetchildgeographies()->::farm::nurture::location::service::proto::GetChildGeographiesResponse::MergeFrom(from._internal_resgetchildgeographies());
      break;
    }
    case kResInsertLocationWithoutBoundary: {
      _internal_mutable_resinsertlocationwithoutboundary()->::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse::MergeFrom(from._internal_resinsertlocationwithoutboundary());
      break;
    }
    case kResInsertLocationWithoutBoundaryBulk: {
      _internal_mutable_resinsertlocationwithoutboundarybulk()->::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse::MergeFrom(from._internal_resinsertlocationwithoutboundarybulk());
      break;
    }
    case kResUpdateLocationWithoutBoundaryById: {
      _internal_mutable_resupdatelocationwithoutboundarybyid()->::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse::MergeFrom(from._internal_resupdatelocationwithoutboundarybyid());
      break;
    }
    case kResUpdateLocationWithoutBoundaryByIdBulk: {
      _internal_mutable_resupdatelocationwithoutboundarybyidbulk()->::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse::MergeFrom(from._internal_resupdatelocationwithoutboundarybyidbulk());
      break;
    }
    case kResDeleteLocationById: {
      _internal_mutable_resdeletelocationbyid()->::farm::nurture::location::service::proto::DeleteLocationByIdResponse::MergeFrom(from._internal_resdeletelocationbyid());
      break;
    }
    case kResDeleteLocationByIdBulk: {
      _internal_mutable_resdeletelocationbyidbulk()->::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse::MergeFrom(from._internal_resdeletelocationbyidbulk());
      break;
    }
    case kResFetchDuplicateVillages: {
      _internal_mutable_resfetchduplicatevillages()->::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse::MergeFrom(from._internal_resfetchduplicatevillages());
      break;
    }
    case kResFetchDuplicateVillagesBySDTVLatLong: {
      _internal_mutable_resfetchduplicatevillagesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatevillagesbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateTehsilsBySDTVLatLong: {
      _internal_mutable_resfetchduplicatetehsilsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatetehsilsbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateDistrictsBySDTVLatLong: {
      _internal_mutable_resfetchduplicatedistrictsbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatedistrictsbysdtvlatlong());
      break;
    }
    case kResFetchDuplicateStatesBySDTVLatLong: {
      _internal_mutable_resfetchduplicatestatesbysdtvlatlong()->::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse::MergeFrom(from._internal_resfetchduplicatestatesbysdtvlatlong());
      break;
    }
    case kResGetDuplicateGeographies: {
      _internal_mutable_resgetduplicategeographies()->::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse::MergeFrom(from._internal_resgetduplicategeographies());
      break;
    }
    case kResInsertVendorLocationData: {
      _internal_mutable_resinsertvendorlocationdata()->::farm::nurture::location::service::proto::InsertVendorLocationDataResponse::MergeFrom(from._internal_resinsertvendorlocationdata());
      break;
    }
    case kResInsertVendorLocationDataBulk: {
      _internal_mutable_resinsertvendorlocationdatabulk()->::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse::MergeFrom(from._internal_resinsertvendorlocationdatabulk());
      break;
    }
    case kResSearchVendorLocationsByGeohash: {
      _internal_mutable_ressearchvendorlocationsbygeohash()->::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse::MergeFrom(from._internal_ressearchvendorlocationsbygeohash());
      break;
    }
    case kResSearchLocationsByGeohash: {
      _internal_mutable_ressearchlocationsbygeohash()->::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse::MergeFrom(from._internal_ressearchlocationsbygeohash());
      break;
    }
    case kResGetLocationDataByLatLng: {
      _internal_mutable_resgetlocationdatabylatlng()->::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse::MergeFrom(from._internal_resgetlocationdatabylatlng());
      break;
    }
    case kResAddVendorApiLedger: {
      _internal_mutable_resaddvendorapiledger()->::farm::nurture::location::service::proto::AddVendorApiLedgerResponse::MergeFrom(from._internal_resaddvendorapiledger());
      break;
    }
    case kResAddVendorApiLedgerBulk: {
      _internal_mutable_resaddvendorapiledgerbulk()->::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse::MergeFrom(from._internal_resaddvendorapiledgerbulk());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.location.service.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.location.service.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(AResponse_, other->AResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace service
}  // namespace location
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertConfigRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertConfigResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchLocationByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchLocationByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LocationRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LocationRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::Location* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::S2CellRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::S2CellRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::S2CellRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::S2Cell* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::S2Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::S2Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LocationS2CellsRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationS2CellsRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LocationS2CellsRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LocationS2Cells* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationS2Cells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LocationS2Cells >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchConfigByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchConfigByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::ConfigRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::ConfigRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::ConfigRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::Config* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::AddLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::AddLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::AddLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::Label* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkAddLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkAddLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::AddLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::AddLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::AddLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkAddLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkAddLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LabelGroup* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LabelGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LabelGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LabelOPP* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LabelOPP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LabelOPP >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LocationWithBoundary* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationWithBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LocationWithBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationsResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::LocationWithoutBoundary* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationWithoutBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::LocationWithoutBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GeographyDataType* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GeographyDataType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GeographyDataType >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkGeographyDataType* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkGeographyDataType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkGeographyDataType >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetChildGeographiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetChildGeographiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetChildGeographiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetChildGeographiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::MultiRequests* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::MultiRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::MultiRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::Request* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::MultiResponses* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::MultiResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::MultiResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::location::service::proto::Response* Arena::CreateMaybeMessage< ::farm::nurture::location::service::proto::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::location::service::proto::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
