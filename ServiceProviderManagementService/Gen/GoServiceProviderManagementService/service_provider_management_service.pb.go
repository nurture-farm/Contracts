// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ServiceProviderManagementService/service_provider_management_service.proto

package ServiceProviderManagementService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatusCode int32

const (
	StatusCode_SUCCESS               StatusCode = 0
	StatusCode_NOT_FOUND             StatusCode = 1
	StatusCode_ZERO_RESULTS          StatusCode = 2
	StatusCode_DUPLICATE             StatusCode = 3
	StatusCode_LIMIT_EXCEEDED        StatusCode = 4
	StatusCode_INVALID_REQUEST       StatusCode = 5
	StatusCode_TEMPORARILY_SUSPENDED StatusCode = 6
	StatusCode_OVER_USAGE_LIMIT      StatusCode = 7
	StatusCode_REQUEST_DENIED        StatusCode = 8
	StatusCode_UNKNOWN_ERROR         StatusCode = 9
	StatusCode_DB_FAILURE            StatusCode = 10
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "NOT_FOUND",
		2:  "ZERO_RESULTS",
		3:  "DUPLICATE",
		4:  "LIMIT_EXCEEDED",
		5:  "INVALID_REQUEST",
		6:  "TEMPORARILY_SUSPENDED",
		7:  "OVER_USAGE_LIMIT",
		8:  "REQUEST_DENIED",
		9:  "UNKNOWN_ERROR",
		10: "DB_FAILURE",
	}
	StatusCode_value = map[string]int32{
		"SUCCESS":               0,
		"NOT_FOUND":             1,
		"ZERO_RESULTS":          2,
		"DUPLICATE":             3,
		"LIMIT_EXCEEDED":        4,
		"INVALID_REQUEST":       5,
		"TEMPORARILY_SUSPENDED": 6,
		"OVER_USAGE_LIMIT":      7,
		"REQUEST_DENIED":        8,
		"UNKNOWN_ERROR":         9,
		"DB_FAILURE":            10,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{0}
}

type RequestHeaders_LANGUAGE int32

const (
	RequestHeaders_English RequestHeaders_LANGUAGE = 0
	RequestHeaders_Hindi   RequestHeaders_LANGUAGE = 2
)

// Enum value maps for RequestHeaders_LANGUAGE.
var (
	RequestHeaders_LANGUAGE_name = map[int32]string{
		0: "English",
		2: "Hindi",
	}
	RequestHeaders_LANGUAGE_value = map[string]int32{
		"English": 0,
		"Hindi":   2,
	}
)

func (x RequestHeaders_LANGUAGE) Enum() *RequestHeaders_LANGUAGE {
	p := new(RequestHeaders_LANGUAGE)
	*p = x
	return p
}

func (x RequestHeaders_LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestHeaders_LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[1].Descriptor()
}

func (RequestHeaders_LANGUAGE) Type() protoreflect.EnumType {
	return &file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[1]
}

func (x RequestHeaders_LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestHeaders_LANGUAGE.Descriptor instead.
func (RequestHeaders_LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{0, 0}
}

type RequestHeaders_COUNTRY int32

const (
	RequestHeaders_India     RequestHeaders_COUNTRY = 0
	RequestHeaders_Australia RequestHeaders_COUNTRY = 2
)

// Enum value maps for RequestHeaders_COUNTRY.
var (
	RequestHeaders_COUNTRY_name = map[int32]string{
		0: "India",
		2: "Australia",
	}
	RequestHeaders_COUNTRY_value = map[string]int32{
		"India":     0,
		"Australia": 2,
	}
)

func (x RequestHeaders_COUNTRY) Enum() *RequestHeaders_COUNTRY {
	p := new(RequestHeaders_COUNTRY)
	*p = x
	return p
}

func (x RequestHeaders_COUNTRY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestHeaders_COUNTRY) Descriptor() protoreflect.EnumDescriptor {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[2].Descriptor()
}

func (RequestHeaders_COUNTRY) Type() protoreflect.EnumType {
	return &file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes[2]
}

func (x RequestHeaders_COUNTRY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestHeaders_COUNTRY.Descriptor instead.
func (RequestHeaders_COUNTRY) EnumDescriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{0, 1}
}

type RequestHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefferedUserName string                  `protobuf:"bytes,1,opt,name=prefferedUserName,proto3" json:"prefferedUserName,omitempty"`
	ClientId          string                  `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	TracingId         string                  `protobuf:"bytes,3,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	TraceDetails      bool                    `protobuf:"varint,4,opt,name=traceDetails,proto3" json:"traceDetails,omitempty"`
	Language          RequestHeaders_LANGUAGE `protobuf:"varint,5,opt,name=language,proto3,enum=farm.nurture.serviceProvider.service.proto.RequestHeaders_LANGUAGE" json:"language,omitempty"`
	Latitude          float32                 `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude         float32                 `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Accuracy          float32                 `protobuf:"fixed32,8,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Country           RequestHeaders_COUNTRY  `protobuf:"varint,9,opt,name=country,proto3,enum=farm.nurture.serviceProvider.service.proto.RequestHeaders_COUNTRY" json:"country,omitempty"`
	ExperimentId      string                  `protobuf:"bytes,10,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	Attribs           []*Attribs              `protobuf:"bytes,11,rep,name=attribs,proto3" json:"attribs,omitempty"`
	AuthToken         string                  `protobuf:"bytes,12,opt,name=authToken,proto3" json:"authToken,omitempty"`
	AppToken          string                  `protobuf:"bytes,13,opt,name=appToken,proto3" json:"appToken,omitempty"`
}

func (x *RequestHeaders) Reset() {
	*x = RequestHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeaders) ProtoMessage() {}

func (x *RequestHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeaders.ProtoReflect.Descriptor instead.
func (*RequestHeaders) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHeaders) GetPrefferedUserName() string {
	if x != nil {
		return x.PrefferedUserName
	}
	return ""
}

func (x *RequestHeaders) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RequestHeaders) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *RequestHeaders) GetTraceDetails() bool {
	if x != nil {
		return x.TraceDetails
	}
	return false
}

func (x *RequestHeaders) GetLanguage() RequestHeaders_LANGUAGE {
	if x != nil {
		return x.Language
	}
	return RequestHeaders_English
}

func (x *RequestHeaders) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RequestHeaders) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RequestHeaders) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *RequestHeaders) GetCountry() RequestHeaders_COUNTRY {
	if x != nil {
		return x.Country
	}
	return RequestHeaders_India
}

func (x *RequestHeaders) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *RequestHeaders) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *RequestHeaders) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestHeaders) GetAppToken() string {
	if x != nil {
		return x.AppToken
	}
	return ""
}

type Attribs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribs) Reset() {
	*x = Attribs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribs) ProtoMessage() {}

func (x *Attribs) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribs.ProtoReflect.Descriptor instead.
func (*Attribs) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{1}
}

func (x *Attribs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Attribs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.serviceProvider.service.proto.StatusCode" json:"status,omitempty"`
	ErrorMessages     []string   `protobuf:"bytes,2,rep,name=error_messages,json=errorMessages,proto3" json:"error_messages,omitempty"`
	InternalErrorCode int32      `protobuf:"varint,3,opt,name=internal_error_code,json=internalErrorCode,proto3" json:"internal_error_code,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_SUCCESS
}

func (x *Status) GetErrorMessages() []string {
	if x != nil {
		return x.ErrorMessages
	}
	return nil
}

func (x *Status) GetInternalErrorCode() int32 {
	if x != nil {
		return x.InternalErrorCode
	}
	return 0
}

type AddServiceProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MobileNumber   string          `protobuf:"bytes,3,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	WhatsappNumber string          `protobuf:"bytes,4,opt,name=whatsappNumber,proto3" json:"whatsappNumber,omitempty"`
	Pincode        string          `protobuf:"bytes,5,opt,name=pincode,proto3" json:"pincode,omitempty"`
}

func (x *AddServiceProviderRequest) Reset() {
	*x = AddServiceProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderRequest) ProtoMessage() {}

func (x *AddServiceProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderRequest.ProtoReflect.Descriptor instead.
func (*AddServiceProviderRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddServiceProviderRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServiceProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddServiceProviderRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *AddServiceProviderRequest) GetWhatsappNumber() string {
	if x != nil {
		return x.WhatsappNumber
	}
	return ""
}

func (x *AddServiceProviderRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

type BulkAddServiceProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders              `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddServiceProviderRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddServiceProviderRequest) Reset() {
	*x = BulkAddServiceProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceProviderRequest) ProtoMessage() {}

func (x *BulkAddServiceProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceProviderRequest.ProtoReflect.Descriptor instead.
func (*BulkAddServiceProviderRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{4}
}

func (x *BulkAddServiceProviderRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddServiceProviderRequest) GetRequests() []*AddServiceProviderRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddServiceProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddServiceProviderResponse) Reset() {
	*x = AddServiceProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderResponse) ProtoMessage() {}

func (x *AddServiceProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderResponse.ProtoReflect.Descriptor instead.
func (*AddServiceProviderResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{5}
}

func (x *AddServiceProviderResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServiceProviderResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServiceProviderResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddServiceProviderResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddServiceProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddServiceProviderResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddServiceProviderResponse) Reset() {
	*x = BulkAddServiceProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceProviderResponse) ProtoMessage() {}

func (x *BulkAddServiceProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceProviderResponse.ProtoReflect.Descriptor instead.
func (*BulkAddServiceProviderResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{6}
}

func (x *BulkAddServiceProviderResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddServiceProviderResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddServiceProviderResponse) GetResponses() []*AddServiceProviderResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddServiceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ServiceProviderId int64           `protobuf:"varint,2,opt,name=serviceProviderId,proto3" json:"serviceProviderId,omitempty"`
	GeographyId       string          `protobuf:"bytes,3,opt,name=geographyId,proto3" json:"geographyId,omitempty"`
	District          string          `protobuf:"bytes,4,opt,name=district,proto3" json:"district,omitempty"`
	State             string          `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	GeoHash           string          `protobuf:"bytes,6,opt,name=geoHash,proto3" json:"geoHash,omitempty"`
	Latitude          float64         `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude         float64         `protobuf:"fixed64,8,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *AddServiceLocationRequest) Reset() {
	*x = AddServiceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceLocationRequest) ProtoMessage() {}

func (x *AddServiceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceLocationRequest.ProtoReflect.Descriptor instead.
func (*AddServiceLocationRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{7}
}

func (x *AddServiceLocationRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServiceLocationRequest) GetServiceProviderId() int64 {
	if x != nil {
		return x.ServiceProviderId
	}
	return 0
}

func (x *AddServiceLocationRequest) GetGeographyId() string {
	if x != nil {
		return x.GeographyId
	}
	return ""
}

func (x *AddServiceLocationRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *AddServiceLocationRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddServiceLocationRequest) GetGeoHash() string {
	if x != nil {
		return x.GeoHash
	}
	return ""
}

func (x *AddServiceLocationRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AddServiceLocationRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type BulkAddServiceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders              `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddServiceLocationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddServiceLocationRequest) Reset() {
	*x = BulkAddServiceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceLocationRequest) ProtoMessage() {}

func (x *BulkAddServiceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceLocationRequest.ProtoReflect.Descriptor instead.
func (*BulkAddServiceLocationRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{8}
}

func (x *BulkAddServiceLocationRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddServiceLocationRequest) GetRequests() []*AddServiceLocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddServiceLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddServiceLocationResponse) Reset() {
	*x = AddServiceLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceLocationResponse) ProtoMessage() {}

func (x *AddServiceLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceLocationResponse.ProtoReflect.Descriptor instead.
func (*AddServiceLocationResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddServiceLocationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServiceLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServiceLocationResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddServiceLocationResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddServiceLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddServiceLocationResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddServiceLocationResponse) Reset() {
	*x = BulkAddServiceLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceLocationResponse) ProtoMessage() {}

func (x *BulkAddServiceLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceLocationResponse.ProtoReflect.Descriptor instead.
func (*BulkAddServiceLocationResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{10}
}

func (x *BulkAddServiceLocationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddServiceLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddServiceLocationResponse) GetResponses() []*AddServiceLocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ServiceName    string          `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType    string          `protobuf:"bytes,3,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	ImageUrl       string          `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	TranslationKey string          `protobuf:"bytes,5,opt,name=translationKey,proto3" json:"translationKey,omitempty"`
}

func (x *AddServicesRequest) Reset() {
	*x = AddServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServicesRequest) ProtoMessage() {}

func (x *AddServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServicesRequest.ProtoReflect.Descriptor instead.
func (*AddServicesRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{11}
}

func (x *AddServicesRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServicesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddServicesRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *AddServicesRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AddServicesRequest) GetTranslationKey() string {
	if x != nil {
		return x.TranslationKey
	}
	return ""
}

type BulkAddServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders       `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddServicesRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddServicesRequest) Reset() {
	*x = BulkAddServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServicesRequest) ProtoMessage() {}

func (x *BulkAddServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServicesRequest.ProtoReflect.Descriptor instead.
func (*BulkAddServicesRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{12}
}

func (x *BulkAddServicesRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddServicesRequest) GetRequests() []*AddServicesRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddServicesResponse) Reset() {
	*x = AddServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServicesResponse) ProtoMessage() {}

func (x *AddServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServicesResponse.ProtoReflect.Descriptor instead.
func (*AddServicesResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddServicesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServicesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServicesResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddServicesResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddServicesResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddServicesResponse) Reset() {
	*x = BulkAddServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServicesResponse) ProtoMessage() {}

func (x *BulkAddServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServicesResponse.ProtoReflect.Descriptor instead.
func (*BulkAddServicesResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{14}
}

func (x *BulkAddServicesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddServicesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddServicesResponse) GetResponses() []*AddServicesResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddServiceProviderMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ServiceId         int64           `protobuf:"varint,2,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceProviderId int64           `protobuf:"varint,3,opt,name=serviceProviderId,proto3" json:"serviceProviderId,omitempty"`
	MachineCount      int64           `protobuf:"varint,4,opt,name=machineCount,proto3" json:"machineCount,omitempty"`
	CostPerAcre       string          `protobuf:"bytes,5,opt,name=costPerAcre,proto3" json:"costPerAcre,omitempty"`
}

func (x *AddServiceProviderMappingRequest) Reset() {
	*x = AddServiceProviderMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderMappingRequest) ProtoMessage() {}

func (x *AddServiceProviderMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderMappingRequest.ProtoReflect.Descriptor instead.
func (*AddServiceProviderMappingRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddServiceProviderMappingRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServiceProviderMappingRequest) GetServiceId() int64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *AddServiceProviderMappingRequest) GetServiceProviderId() int64 {
	if x != nil {
		return x.ServiceProviderId
	}
	return 0
}

func (x *AddServiceProviderMappingRequest) GetMachineCount() int64 {
	if x != nil {
		return x.MachineCount
	}
	return 0
}

func (x *AddServiceProviderMappingRequest) GetCostPerAcre() string {
	if x != nil {
		return x.CostPerAcre
	}
	return ""
}

type BulkAddServiceProviderMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders                     `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddServiceProviderMappingRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddServiceProviderMappingRequest) Reset() {
	*x = BulkAddServiceProviderMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceProviderMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceProviderMappingRequest) ProtoMessage() {}

func (x *BulkAddServiceProviderMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceProviderMappingRequest.ProtoReflect.Descriptor instead.
func (*BulkAddServiceProviderMappingRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{16}
}

func (x *BulkAddServiceProviderMappingRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddServiceProviderMappingRequest) GetRequests() []*AddServiceProviderMappingRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddServiceProviderMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddServiceProviderMappingResponse) Reset() {
	*x = AddServiceProviderMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderMappingResponse) ProtoMessage() {}

func (x *AddServiceProviderMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderMappingResponse.ProtoReflect.Descriptor instead.
func (*AddServiceProviderMappingResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{17}
}

func (x *AddServiceProviderMappingResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServiceProviderMappingResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServiceProviderMappingResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddServiceProviderMappingResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddServiceProviderMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status                              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddServiceProviderMappingResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddServiceProviderMappingResponse) Reset() {
	*x = BulkAddServiceProviderMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceProviderMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceProviderMappingResponse) ProtoMessage() {}

func (x *BulkAddServiceProviderMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceProviderMappingResponse.ProtoReflect.Descriptor instead.
func (*BulkAddServiceProviderMappingResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{18}
}

func (x *BulkAddServiceProviderMappingResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddServiceProviderMappingResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddServiceProviderMappingResponse) GetResponses() []*AddServiceProviderMappingResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ServiceType    string          `protobuf:"bytes,2,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	CropId         int64           `protobuf:"varint,3,opt,name=cropId,proto3" json:"cropId,omitempty"`
	RegionName     string          `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
	Section        int64           `protobuf:"varint,5,opt,name=section,proto3" json:"section,omitempty"`
	ServiceRank    int64           `protobuf:"varint,6,opt,name=serviceRank,proto3" json:"serviceRank,omitempty"`
	ValidFrom      int64           `protobuf:"varint,7,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	ValidTill      int64           `protobuf:"varint,8,opt,name=validTill,proto3" json:"validTill,omitempty"`
}

func (x *AddServiceConfigRequest) Reset() {
	*x = AddServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceConfigRequest) ProtoMessage() {}

func (x *AddServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*AddServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{19}
}

func (x *AddServiceConfigRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServiceConfigRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *AddServiceConfigRequest) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *AddServiceConfigRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *AddServiceConfigRequest) GetSection() int64 {
	if x != nil {
		return x.Section
	}
	return 0
}

func (x *AddServiceConfigRequest) GetServiceRank() int64 {
	if x != nil {
		return x.ServiceRank
	}
	return 0
}

func (x *AddServiceConfigRequest) GetValidFrom() int64 {
	if x != nil {
		return x.ValidFrom
	}
	return 0
}

func (x *AddServiceConfigRequest) GetValidTill() int64 {
	if x != nil {
		return x.ValidTill
	}
	return 0
}

type BulkAddServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders            `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddServiceConfigRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddServiceConfigRequest) Reset() {
	*x = BulkAddServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceConfigRequest) ProtoMessage() {}

func (x *BulkAddServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*BulkAddServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{20}
}

func (x *BulkAddServiceConfigRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddServiceConfigRequest) GetRequests() []*AddServiceConfigRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddServiceConfigResponse) Reset() {
	*x = AddServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceConfigResponse) ProtoMessage() {}

func (x *AddServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*AddServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{21}
}

func (x *AddServiceConfigResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServiceConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServiceConfigResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddServiceConfigResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status                     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddServiceConfigResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddServiceConfigResponse) Reset() {
	*x = BulkAddServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddServiceConfigResponse) ProtoMessage() {}

func (x *BulkAddServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*BulkAddServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{22}
}

func (x *BulkAddServiceConfigResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddServiceConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddServiceConfigResponse) GetResponses() []*AddServiceConfigResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetServiceProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Page           int64           `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Offset         int64           `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	CropId         []int64         `protobuf:"varint,8,rep,packed,name=cropId,proto3" json:"cropId,omitempty"`
	Latitude       float64         `protobuf:"fixed64,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64         `protobuf:"fixed64,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	ServiceName    string          `protobuf:"bytes,11,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *GetServiceProviderRequest) Reset() {
	*x = GetServiceProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderRequest) ProtoMessage() {}

func (x *GetServiceProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProviderRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetServiceProviderRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceProviderRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceProviderRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetServiceProviderRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetServiceProviderRequest) GetCropId() []int64 {
	if x != nil {
		return x.CropId
	}
	return nil
}

func (x *GetServiceProviderRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetServiceProviderRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetServiceProviderRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type GetServiceProviderResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceProviderResponseRecord) Reset() {
	*x = GetServiceProviderResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderResponseRecord) ProtoMessage() {}

func (x *GetServiceProviderResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceProviderResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{24}
}

type GetServiceProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count               int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs             []*Attribs             `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	ServiceProviderInfo []*ServiceProviderInfo `protobuf:"bytes,5,rep,name=serviceProviderInfo,proto3" json:"serviceProviderInfo,omitempty"`
}

func (x *GetServiceProviderResponse) Reset() {
	*x = GetServiceProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderResponse) ProtoMessage() {}

func (x *GetServiceProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProviderResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetServiceProviderResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceProviderResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceProviderResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceProviderResponse) GetServiceProviderInfo() []*ServiceProviderInfo {
	if x != nil {
		return x.ServiceProviderInfo
	}
	return nil
}

type ServiceProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderName           string  `protobuf:"bytes,1,opt,name=serviceProviderName,proto3" json:"serviceProviderName,omitempty"`
	ServiceProviderContactDetails string  `protobuf:"bytes,2,opt,name=serviceProviderContactDetails,proto3" json:"serviceProviderContactDetails,omitempty"`
	ServiceProviderAddress        string  `protobuf:"bytes,3,opt,name=serviceProviderAddress,proto3" json:"serviceProviderAddress,omitempty"`
	CostPerAcre                   string  `protobuf:"bytes,4,opt,name=costPerAcre,proto3" json:"costPerAcre,omitempty"`
	Distance                      float64 `protobuf:"fixed64,5,opt,name=distance,proto3" json:"distance,omitempty"`
	ServiceProviderWhatsappNumber string  `protobuf:"bytes,6,opt,name=serviceProviderWhatsappNumber,proto3" json:"serviceProviderWhatsappNumber,omitempty"`
}

func (x *ServiceProviderInfo) Reset() {
	*x = ServiceProviderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceProviderInfo) ProtoMessage() {}

func (x *ServiceProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceProviderInfo.ProtoReflect.Descriptor instead.
func (*ServiceProviderInfo) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{26}
}

func (x *ServiceProviderInfo) GetServiceProviderName() string {
	if x != nil {
		return x.ServiceProviderName
	}
	return ""
}

func (x *ServiceProviderInfo) GetServiceProviderContactDetails() string {
	if x != nil {
		return x.ServiceProviderContactDetails
	}
	return ""
}

func (x *ServiceProviderInfo) GetServiceProviderAddress() string {
	if x != nil {
		return x.ServiceProviderAddress
	}
	return ""
}

func (x *ServiceProviderInfo) GetCostPerAcre() string {
	if x != nil {
		return x.CostPerAcre
	}
	return ""
}

func (x *ServiceProviderInfo) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ServiceProviderInfo) GetServiceProviderWhatsappNumber() string {
	if x != nil {
		return x.ServiceProviderWhatsappNumber
	}
	return ""
}

type AddServiceProviderFromExcelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Csv            string          `protobuf:"bytes,6,opt,name=csv,proto3" json:"csv,omitempty"`
}

func (x *AddServiceProviderFromExcelRequest) Reset() {
	*x = AddServiceProviderFromExcelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderFromExcelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderFromExcelRequest) ProtoMessage() {}

func (x *AddServiceProviderFromExcelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderFromExcelRequest.ProtoReflect.Descriptor instead.
func (*AddServiceProviderFromExcelRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{27}
}

func (x *AddServiceProviderFromExcelRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddServiceProviderFromExcelRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *AddServiceProviderFromExcelRequest) GetCsv() string {
	if x != nil {
		return x.Csv
	}
	return ""
}

type AddServiceProviderFromExcelResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddServiceProviderFromExcelResponseRecord) Reset() {
	*x = AddServiceProviderFromExcelResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderFromExcelResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderFromExcelResponseRecord) ProtoMessage() {}

func (x *AddServiceProviderFromExcelResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderFromExcelResponseRecord.ProtoReflect.Descriptor instead.
func (*AddServiceProviderFromExcelResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{28}
}

type AddServiceProviderFromExcelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    *Status                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                     int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs                   []*Attribs                   `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	AddServiceProviderRequest []*AddServiceProviderRequest `protobuf:"bytes,5,rep,name=addServiceProviderRequest,proto3" json:"addServiceProviderRequest,omitempty"`
}

func (x *AddServiceProviderFromExcelResponse) Reset() {
	*x = AddServiceProviderFromExcelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceProviderFromExcelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceProviderFromExcelResponse) ProtoMessage() {}

func (x *AddServiceProviderFromExcelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceProviderFromExcelResponse.ProtoReflect.Descriptor instead.
func (*AddServiceProviderFromExcelResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{29}
}

func (x *AddServiceProviderFromExcelResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddServiceProviderFromExcelResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddServiceProviderFromExcelResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *AddServiceProviderFromExcelResponse) GetAddServiceProviderRequest() []*AddServiceProviderRequest {
	if x != nil {
		return x.AddServiceProviderRequest
	}
	return nil
}

type GetSDTVOnLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Latitude       float64         `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64         `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetSDTVOnLatLongRequest) Reset() {
	*x = GetSDTVOnLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDTVOnLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDTVOnLatLongRequest) ProtoMessage() {}

func (x *GetSDTVOnLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDTVOnLatLongRequest.ProtoReflect.Descriptor instead.
func (*GetSDTVOnLatLongRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetSDTVOnLatLongRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetSDTVOnLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetSDTVOnLatLongRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetSDTVOnLatLongRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetSDTVOnLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSDTVOnLatLongResponseRecord) Reset() {
	*x = GetSDTVOnLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDTVOnLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDTVOnLatLongResponseRecord) ProtoMessage() {}

func (x *GetSDTVOnLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDTVOnLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*GetSDTVOnLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{31}
}

type GetSDTVOnLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count        int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs      []*Attribs `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	RegionId     int64      `protobuf:"varint,5,opt,name=regionId,proto3" json:"regionId,omitempty"`
	VillageId    int64      `protobuf:"varint,6,opt,name=villageId,proto3" json:"villageId,omitempty"`
	TehsilId     int64      `protobuf:"varint,7,opt,name=tehsilId,proto3" json:"tehsilId,omitempty"`
	DistrictId   int64      `protobuf:"varint,8,opt,name=districtId,proto3" json:"districtId,omitempty"`
	ZoneId       int64      `protobuf:"varint,9,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	VillageName  string     `protobuf:"bytes,10,opt,name=villageName,proto3" json:"villageName,omitempty"`
	TehsilName   string     `protobuf:"bytes,11,opt,name=tehsilName,proto3" json:"tehsilName,omitempty"`
	DistrictName string     `protobuf:"bytes,12,opt,name=districtName,proto3" json:"districtName,omitempty"`
	RegionName   string     `protobuf:"bytes,13,opt,name=regionName,proto3" json:"regionName,omitempty"`
	ZoneName     string     `protobuf:"bytes,14,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	VillageCode  string     `protobuf:"bytes,15,opt,name=villageCode,proto3" json:"villageCode,omitempty"`
	TehsilCode   string     `protobuf:"bytes,16,opt,name=tehsilCode,proto3" json:"tehsilCode,omitempty"`
	DistrictCode string     `protobuf:"bytes,17,opt,name=districtCode,proto3" json:"districtCode,omitempty"`
	RegionCode   string     `protobuf:"bytes,18,opt,name=regionCode,proto3" json:"regionCode,omitempty"`
	ZoneCode     string     `protobuf:"bytes,19,opt,name=zoneCode,proto3" json:"zoneCode,omitempty"`
}

func (x *GetSDTVOnLatLongResponse) Reset() {
	*x = GetSDTVOnLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDTVOnLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDTVOnLatLongResponse) ProtoMessage() {}

func (x *GetSDTVOnLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDTVOnLatLongResponse.ProtoReflect.Descriptor instead.
func (*GetSDTVOnLatLongResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetSDTVOnLatLongResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSDTVOnLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetSDTVOnLatLongResponse) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetVillageId() int64 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetTehsilId() int64 {
	if x != nil {
		return x.TehsilId
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *GetSDTVOnLatLongResponse) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetTehsilName() string {
	if x != nil {
		return x.TehsilName
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetVillageCode() string {
	if x != nil {
		return x.VillageCode
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetTehsilCode() string {
	if x != nil {
		return x.TehsilCode
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetDistrictCode() string {
	if x != nil {
		return x.DistrictCode
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *GetSDTVOnLatLongResponse) GetZoneCode() string {
	if x != nil {
		return x.ZoneCode
	}
	return ""
}

type GetServiceDetailsOnLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Latitude       float64         `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64         `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetServiceDetailsOnLatLongRequest) Reset() {
	*x = GetServiceDetailsOnLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDetailsOnLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDetailsOnLatLongRequest) ProtoMessage() {}

func (x *GetServiceDetailsOnLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDetailsOnLatLongRequest.ProtoReflect.Descriptor instead.
func (*GetServiceDetailsOnLatLongRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetServiceDetailsOnLatLongRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceDetailsOnLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceDetailsOnLatLongRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetServiceDetailsOnLatLongRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetServiceDetailsOnLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceDetailsOnLatLongResponseRecord) Reset() {
	*x = GetServiceDetailsOnLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDetailsOnLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDetailsOnLatLongResponseRecord) ProtoMessage() {}

func (x *GetServiceDetailsOnLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDetailsOnLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceDetailsOnLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{34}
}

type GetServiceDetailsOnLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 *Status                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                  int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs                []*Attribs                `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	ServiceDetailsResponse []*ServiceDetailsResponse `protobuf:"bytes,5,rep,name=serviceDetailsResponse,proto3" json:"serviceDetailsResponse,omitempty"`
}

func (x *GetServiceDetailsOnLatLongResponse) Reset() {
	*x = GetServiceDetailsOnLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDetailsOnLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDetailsOnLatLongResponse) ProtoMessage() {}

func (x *GetServiceDetailsOnLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDetailsOnLatLongResponse.ProtoReflect.Descriptor instead.
func (*GetServiceDetailsOnLatLongResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetServiceDetailsOnLatLongResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceDetailsOnLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceDetailsOnLatLongResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceDetailsOnLatLongResponse) GetServiceDetailsResponse() []*ServiceDetailsResponse {
	if x != nil {
		return x.ServiceDetailsResponse
	}
	return nil
}

type ServiceDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	ImageUrl    string `protobuf:"bytes,2,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Rank        int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Section     int64  `protobuf:"varint,4,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *ServiceDetailsResponse) Reset() {
	*x = ServiceDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetailsResponse) ProtoMessage() {}

func (x *ServiceDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetailsResponse.ProtoReflect.Descriptor instead.
func (*ServiceDetailsResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{36}
}

func (x *ServiceDetailsResponse) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *ServiceDetailsResponse) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ServiceDetailsResponse) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ServiceDetailsResponse) GetSection() int64 {
	if x != nil {
		return x.Section
	}
	return 0
}

type GetServicesOnServiceNameAndServiceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	ServiceName    string          `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType    string          `protobuf:"bytes,4,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) Reset() {
	*x = GetServicesOnServiceNameAndServiceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesOnServiceNameAndServiceTypeRequest) ProtoMessage() {}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesOnServiceNameAndServiceTypeRequest.ProtoReflect.Descriptor instead.
func (*GetServicesOnServiceNameAndServiceTypeRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{37}
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GetServicesOnServiceNameAndServiceTypeRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

type GetServicesOnServiceNameAndServiceTypeResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType string `protobuf:"bytes,3,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) Reset() {
	*x = GetServicesOnServiceNameAndServiceTypeResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesOnServiceNameAndServiceTypeResponseRecord) ProtoMessage() {}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesOnServiceNameAndServiceTypeResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServicesOnServiceNameAndServiceTypeResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GetServicesOnServiceNameAndServiceTypeResponseRecord) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

type GetServicesOnServiceNameAndServiceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                              `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetServicesOnServiceNameAndServiceTypeResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) Reset() {
	*x = GetServicesOnServiceNameAndServiceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesOnServiceNameAndServiceTypeResponse) ProtoMessage() {}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesOnServiceNameAndServiceTypeResponse.ProtoReflect.Descriptor instead.
func (*GetServicesOnServiceNameAndServiceTypeResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServicesOnServiceNameAndServiceTypeResponse) GetRecords() []*GetServicesOnServiceNameAndServiceTypeResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetServiceProviderOnMobileNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	MobileNumber   string          `protobuf:"bytes,3,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *GetServiceProviderOnMobileNumberRequest) Reset() {
	*x = GetServiceProviderOnMobileNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnMobileNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnMobileNumberRequest) ProtoMessage() {}

func (x *GetServiceProviderOnMobileNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnMobileNumberRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnMobileNumberRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetServiceProviderOnMobileNumberRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceProviderOnMobileNumberRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceProviderOnMobileNumberRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type GetServiceProviderOnMobileNumberResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MobileNumber string `protobuf:"bytes,2,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *GetServiceProviderOnMobileNumberResponseRecord) Reset() {
	*x = GetServiceProviderOnMobileNumberResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnMobileNumberResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnMobileNumberResponseRecord) ProtoMessage() {}

func (x *GetServiceProviderOnMobileNumberResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnMobileNumberResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnMobileNumberResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetServiceProviderOnMobileNumberResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetServiceProviderOnMobileNumberResponseRecord) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type GetServiceProviderOnMobileNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                        `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetServiceProviderOnMobileNumberResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetServiceProviderOnMobileNumberResponse) Reset() {
	*x = GetServiceProviderOnMobileNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnMobileNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnMobileNumberResponse) ProtoMessage() {}

func (x *GetServiceProviderOnMobileNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnMobileNumberResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnMobileNumberResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetServiceProviderOnMobileNumberResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceProviderOnMobileNumberResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceProviderOnMobileNumberResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceProviderOnMobileNumberResponse) GetRecords() []*GetServiceProviderOnMobileNumberResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetServiceLocationOnRegionNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	RegionName     []string        `protobuf:"bytes,6,rep,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *GetServiceLocationOnRegionNameRequest) Reset() {
	*x = GetServiceLocationOnRegionNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLocationOnRegionNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLocationOnRegionNameRequest) ProtoMessage() {}

func (x *GetServiceLocationOnRegionNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLocationOnRegionNameRequest.ProtoReflect.Descriptor instead.
func (*GetServiceLocationOnRegionNameRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetServiceLocationOnRegionNameRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceLocationOnRegionNameRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceLocationOnRegionNameRequest) GetRegionName() []string {
	if x != nil {
		return x.RegionName
	}
	return nil
}

type GetServiceLocationOnRegionNameResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceLocationOnRegionNameResponseRecord) Reset() {
	*x = GetServiceLocationOnRegionNameResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLocationOnRegionNameResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLocationOnRegionNameResponseRecord) ProtoMessage() {}

func (x *GetServiceLocationOnRegionNameResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLocationOnRegionNameResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceLocationOnRegionNameResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{44}
}

type GetServiceLocationOnRegionNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count           int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs         []*Attribs         `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	GeographyDetail []*GeographyDetail `protobuf:"bytes,5,rep,name=geographyDetail,proto3" json:"geographyDetail,omitempty"`
}

func (x *GetServiceLocationOnRegionNameResponse) Reset() {
	*x = GetServiceLocationOnRegionNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLocationOnRegionNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLocationOnRegionNameResponse) ProtoMessage() {}

func (x *GetServiceLocationOnRegionNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLocationOnRegionNameResponse.ProtoReflect.Descriptor instead.
func (*GetServiceLocationOnRegionNameResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetServiceLocationOnRegionNameResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceLocationOnRegionNameResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceLocationOnRegionNameResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceLocationOnRegionNameResponse) GetGeographyDetail() []*GeographyDetail {
	if x != nil {
		return x.GeographyDetail
	}
	return nil
}

type GeographyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeographyName      string             `protobuf:"bytes,1,opt,name=geographyName,proto3" json:"geographyName,omitempty"`
	GeographyUid       string             `protobuf:"bytes,2,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	GeographyLongitude string             `protobuf:"bytes,3,opt,name=geographyLongitude,proto3" json:"geographyLongitude,omitempty"`
	GeographyLatitude  string             `protobuf:"bytes,4,opt,name=geographyLatitude,proto3" json:"geographyLatitude,omitempty"`
	GeographyDetail    []*GeographyDetail `protobuf:"bytes,5,rep,name=geographyDetail,proto3" json:"geographyDetail,omitempty"`
}

func (x *GeographyDetail) Reset() {
	*x = GeographyDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographyDetail) ProtoMessage() {}

func (x *GeographyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographyDetail.ProtoReflect.Descriptor instead.
func (*GeographyDetail) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{46}
}

func (x *GeographyDetail) GetGeographyName() string {
	if x != nil {
		return x.GeographyName
	}
	return ""
}

func (x *GeographyDetail) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *GeographyDetail) GetGeographyLongitude() string {
	if x != nil {
		return x.GeographyLongitude
	}
	return ""
}

func (x *GeographyDetail) GetGeographyLatitude() string {
	if x != nil {
		return x.GeographyLatitude
	}
	return ""
}

func (x *GeographyDetail) GetGeographyDetail() []*GeographyDetail {
	if x != nil {
		return x.GeographyDetail
	}
	return nil
}

type GetServiceConfigOnConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	RegionName     string          `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *GetServiceConfigOnConditionRequest) Reset() {
	*x = GetServiceConfigOnConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnConditionRequest) ProtoMessage() {}

func (x *GetServiceConfigOnConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnConditionRequest.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnConditionRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetServiceConfigOnConditionRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceConfigOnConditionRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceConfigOnConditionRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type GetServiceConfigOnConditionResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	CropId      int64  `protobuf:"varint,2,opt,name=cropId,proto3" json:"cropId,omitempty"`
	RegionName  string `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
	Section     int64  `protobuf:"varint,4,opt,name=section,proto3" json:"section,omitempty"`
	ServiceRank int64  `protobuf:"varint,5,opt,name=serviceRank,proto3" json:"serviceRank,omitempty"`
}

func (x *GetServiceConfigOnConditionResponseRecord) Reset() {
	*x = GetServiceConfigOnConditionResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnConditionResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnConditionResponseRecord) ProtoMessage() {}

func (x *GetServiceConfigOnConditionResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnConditionResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnConditionResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{48}
}

func (x *GetServiceConfigOnConditionResponseRecord) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *GetServiceConfigOnConditionResponseRecord) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *GetServiceConfigOnConditionResponseRecord) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *GetServiceConfigOnConditionResponseRecord) GetSection() int64 {
	if x != nil {
		return x.Section
	}
	return 0
}

func (x *GetServiceConfigOnConditionResponseRecord) GetServiceRank() int64 {
	if x != nil {
		return x.ServiceRank
	}
	return 0
}

type GetServiceConfigOnConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                   `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetServiceConfigOnConditionResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetServiceConfigOnConditionResponse) Reset() {
	*x = GetServiceConfigOnConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnConditionResponse) ProtoMessage() {}

func (x *GetServiceConfigOnConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnConditionResponse.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnConditionResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{49}
}

func (x *GetServiceConfigOnConditionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceConfigOnConditionResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceConfigOnConditionResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceConfigOnConditionResponse) GetRecords() []*GetServiceConfigOnConditionResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetServiceProviderOnServiceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	ServiceType    string          `protobuf:"bytes,3,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (x *GetServiceProviderOnServiceTypeRequest) Reset() {
	*x = GetServiceProviderOnServiceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnServiceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnServiceTypeRequest) ProtoMessage() {}

func (x *GetServiceProviderOnServiceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnServiceTypeRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnServiceTypeRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{50}
}

func (x *GetServiceProviderOnServiceTypeRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceProviderOnServiceTypeRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceProviderOnServiceTypeRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

type GetServiceProviderOnServiceTypeResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MobileNumber   string `protobuf:"bytes,3,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	WhatsappNumber string `protobuf:"bytes,4,opt,name=whatsappNumber,proto3" json:"whatsappNumber,omitempty"`
	Pincode        string `protobuf:"bytes,5,opt,name=pincode,proto3" json:"pincode,omitempty"`
	MachineCount   int64  `protobuf:"varint,6,opt,name=machineCount,proto3" json:"machineCount,omitempty"`
	CostPerAcre    string `protobuf:"bytes,7,opt,name=costPerAcre,proto3" json:"costPerAcre,omitempty"`
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) Reset() {
	*x = GetServiceProviderOnServiceTypeResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnServiceTypeResponseRecord) ProtoMessage() {}

func (x *GetServiceProviderOnServiceTypeResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnServiceTypeResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnServiceTypeResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{51}
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetWhatsappNumber() string {
	if x != nil {
		return x.WhatsappNumber
	}
	return ""
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetMachineCount() int64 {
	if x != nil {
		return x.MachineCount
	}
	return 0
}

func (x *GetServiceProviderOnServiceTypeResponseRecord) GetCostPerAcre() string {
	if x != nil {
		return x.CostPerAcre
	}
	return ""
}

type GetServiceProviderOnServiceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                       `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetServiceProviderOnServiceTypeResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetServiceProviderOnServiceTypeResponse) Reset() {
	*x = GetServiceProviderOnServiceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderOnServiceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderOnServiceTypeResponse) ProtoMessage() {}

func (x *GetServiceProviderOnServiceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderOnServiceTypeResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProviderOnServiceTypeResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{52}
}

func (x *GetServiceProviderOnServiceTypeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceProviderOnServiceTypeResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceProviderOnServiceTypeResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceProviderOnServiceTypeResponse) GetRecords() []*GetServiceProviderOnServiceTypeResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetLocationOnServiceProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed    bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	ServiceProviderId string          `protobuf:"bytes,3,opt,name=serviceProviderId,proto3" json:"serviceProviderId,omitempty"`
}

func (x *GetLocationOnServiceProviderIdRequest) Reset() {
	*x = GetLocationOnServiceProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationOnServiceProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationOnServiceProviderIdRequest) ProtoMessage() {}

func (x *GetLocationOnServiceProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationOnServiceProviderIdRequest.ProtoReflect.Descriptor instead.
func (*GetLocationOnServiceProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{53}
}

func (x *GetLocationOnServiceProviderIdRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetLocationOnServiceProviderIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetLocationOnServiceProviderIdRequest) GetServiceProviderId() string {
	if x != nil {
		return x.ServiceProviderId
	}
	return ""
}

type GetLocationOnServiceProviderIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderId int64   `protobuf:"varint,1,opt,name=serviceProviderId,proto3" json:"serviceProviderId,omitempty"`
	District          string  `protobuf:"bytes,2,opt,name=district,proto3" json:"district,omitempty"`
	State             string  `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Latitude          float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude         float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetLocationOnServiceProviderIdResponseRecord) Reset() {
	*x = GetLocationOnServiceProviderIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationOnServiceProviderIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationOnServiceProviderIdResponseRecord) ProtoMessage() {}

func (x *GetLocationOnServiceProviderIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationOnServiceProviderIdResponseRecord.ProtoReflect.Descriptor instead.
func (*GetLocationOnServiceProviderIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{54}
}

func (x *GetLocationOnServiceProviderIdResponseRecord) GetServiceProviderId() int64 {
	if x != nil {
		return x.ServiceProviderId
	}
	return 0
}

func (x *GetLocationOnServiceProviderIdResponseRecord) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetLocationOnServiceProviderIdResponseRecord) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetLocationOnServiceProviderIdResponseRecord) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetLocationOnServiceProviderIdResponseRecord) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetLocationOnServiceProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                      `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetLocationOnServiceProviderIdResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetLocationOnServiceProviderIdResponse) Reset() {
	*x = GetLocationOnServiceProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationOnServiceProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationOnServiceProviderIdResponse) ProtoMessage() {}

func (x *GetLocationOnServiceProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationOnServiceProviderIdResponse.ProtoReflect.Descriptor instead.
func (*GetLocationOnServiceProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{55}
}

func (x *GetLocationOnServiceProviderIdResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLocationOnServiceProviderIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLocationOnServiceProviderIdResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetLocationOnServiceProviderIdResponse) GetRecords() []*GetLocationOnServiceProviderIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	State          []string        `protobuf:"bytes,6,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *GetServiceConfigRequest) Reset() {
	*x = GetServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigRequest) ProtoMessage() {}

func (x *GetServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{56}
}

func (x *GetServiceConfigRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceConfigRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceConfigRequest) GetState() []string {
	if x != nil {
		return x.State
	}
	return nil
}

type GetServiceConfigResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceConfigResponseRecord) Reset() {
	*x = GetServiceConfigResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigResponseRecord) ProtoMessage() {}

func (x *GetServiceConfigResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceConfigResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{57}
}

type GetServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 *Status                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                  int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs                []*Attribs                `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	ServiceDetailsResponse []*ServiceDetailsResponse `protobuf:"bytes,5,rep,name=serviceDetailsResponse,proto3" json:"serviceDetailsResponse,omitempty"`
}

func (x *GetServiceConfigResponse) Reset() {
	*x = GetServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigResponse) ProtoMessage() {}

func (x *GetServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{58}
}

func (x *GetServiceConfigResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceConfigResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceConfigResponse) GetServiceDetailsResponse() []*ServiceDetailsResponse {
	if x != nil {
		return x.ServiceDetailsResponse
	}
	return nil
}

type GetServiceConfigOnRegionNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	RegionName     string          `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *GetServiceConfigOnRegionNameRequest) Reset() {
	*x = GetServiceConfigOnRegionNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnRegionNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnRegionNameRequest) ProtoMessage() {}

func (x *GetServiceConfigOnRegionNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnRegionNameRequest.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnRegionNameRequest) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{59}
}

func (x *GetServiceConfigOnRegionNameRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetServiceConfigOnRegionNameRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetServiceConfigOnRegionNameRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type GetServiceConfigOnRegionNameResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	CropId      int64  `protobuf:"varint,2,opt,name=cropId,proto3" json:"cropId,omitempty"`
	RegionName  string `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
	Section     int64  `protobuf:"varint,4,opt,name=section,proto3" json:"section,omitempty"`
	ServiceRank int64  `protobuf:"varint,5,opt,name=serviceRank,proto3" json:"serviceRank,omitempty"`
}

func (x *GetServiceConfigOnRegionNameResponseRecord) Reset() {
	*x = GetServiceConfigOnRegionNameResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnRegionNameResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnRegionNameResponseRecord) ProtoMessage() {}

func (x *GetServiceConfigOnRegionNameResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnRegionNameResponseRecord.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnRegionNameResponseRecord) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetServiceConfigOnRegionNameResponseRecord) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *GetServiceConfigOnRegionNameResponseRecord) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *GetServiceConfigOnRegionNameResponseRecord) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *GetServiceConfigOnRegionNameResponseRecord) GetSection() int64 {
	if x != nil {
		return x.Section
	}
	return 0
}

func (x *GetServiceConfigOnRegionNameResponseRecord) GetServiceRank() int64 {
	if x != nil {
		return x.ServiceRank
	}
	return 0
}

type GetServiceConfigOnRegionNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                                    `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetServiceConfigOnRegionNameResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetServiceConfigOnRegionNameResponse) Reset() {
	*x = GetServiceConfigOnRegionNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigOnRegionNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigOnRegionNameResponse) ProtoMessage() {}

func (x *GetServiceConfigOnRegionNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigOnRegionNameResponse.ProtoReflect.Descriptor instead.
func (*GetServiceConfigOnRegionNameResponse) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{61}
}

func (x *GetServiceConfigOnRegionNameResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetServiceConfigOnRegionNameResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetServiceConfigOnRegionNameResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetServiceConfigOnRegionNameResponse) GetRecords() []*GetServiceConfigOnRegionNameResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type MultiRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnTxn   bool       `protobuf:"varint,1,opt,name=onTxn,proto3" json:"onTxn,omitempty"`
	Request []*Request `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *MultiRequests) Reset() {
	*x = MultiRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRequests) ProtoMessage() {}

func (x *MultiRequests) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRequests.ProtoReflect.Descriptor instead.
func (*MultiRequests) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{62}
}

func (x *MultiRequests) GetOnTxn() bool {
	if x != nil {
		return x.OnTxn
	}
	return false
}

func (x *MultiRequests) GetRequest() []*Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to ARequest:
	//	*Request_ReqAddServiceProvider
	//	*Request_ReqAddServiceProviderBulk
	//	*Request_ReqAddServiceLocation
	//	*Request_ReqAddServiceLocationBulk
	//	*Request_ReqAddServices
	//	*Request_ReqAddServicesBulk
	//	*Request_ReqAddServiceProviderMapping
	//	*Request_ReqAddServiceProviderMappingBulk
	//	*Request_ReqAddServiceConfig
	//	*Request_ReqAddServiceConfigBulk
	//	*Request_ReqGetServiceProvider
	//	*Request_ReqAddServiceProviderFromExcel
	//	*Request_ReqGetSDTVOnLatLong
	//	*Request_ReqGetServiceDetailsOnLatLong
	//	*Request_ReqGetServicesOnServiceNameAndServiceType
	//	*Request_ReqGetServiceProviderOnMobileNumber
	//	*Request_ReqGetServiceLocationOnRegionName
	//	*Request_ReqGetServiceConfigOnCondition
	//	*Request_ReqGetServiceProviderOnServiceType
	//	*Request_ReqGetLocationOnServiceProviderId
	//	*Request_ReqGetServiceConfig
	//	*Request_ReqGetServiceConfigOnRegionName
	ARequest isRequest_ARequest `protobuf_oneof:"ARequest"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{63}
}

func (x *Request) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (m *Request) GetARequest() isRequest_ARequest {
	if m != nil {
		return m.ARequest
	}
	return nil
}

func (x *Request) GetReqAddServiceProvider() *AddServiceProviderRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceProvider); ok {
		return x.ReqAddServiceProvider
	}
	return nil
}

func (x *Request) GetReqAddServiceProviderBulk() *BulkAddServiceProviderRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceProviderBulk); ok {
		return x.ReqAddServiceProviderBulk
	}
	return nil
}

func (x *Request) GetReqAddServiceLocation() *AddServiceLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceLocation); ok {
		return x.ReqAddServiceLocation
	}
	return nil
}

func (x *Request) GetReqAddServiceLocationBulk() *BulkAddServiceLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceLocationBulk); ok {
		return x.ReqAddServiceLocationBulk
	}
	return nil
}

func (x *Request) GetReqAddServices() *AddServicesRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServices); ok {
		return x.ReqAddServices
	}
	return nil
}

func (x *Request) GetReqAddServicesBulk() *BulkAddServicesRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServicesBulk); ok {
		return x.ReqAddServicesBulk
	}
	return nil
}

func (x *Request) GetReqAddServiceProviderMapping() *AddServiceProviderMappingRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceProviderMapping); ok {
		return x.ReqAddServiceProviderMapping
	}
	return nil
}

func (x *Request) GetReqAddServiceProviderMappingBulk() *BulkAddServiceProviderMappingRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceProviderMappingBulk); ok {
		return x.ReqAddServiceProviderMappingBulk
	}
	return nil
}

func (x *Request) GetReqAddServiceConfig() *AddServiceConfigRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceConfig); ok {
		return x.ReqAddServiceConfig
	}
	return nil
}

func (x *Request) GetReqAddServiceConfigBulk() *BulkAddServiceConfigRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceConfigBulk); ok {
		return x.ReqAddServiceConfigBulk
	}
	return nil
}

func (x *Request) GetReqGetServiceProvider() *GetServiceProviderRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceProvider); ok {
		return x.ReqGetServiceProvider
	}
	return nil
}

func (x *Request) GetReqAddServiceProviderFromExcel() *AddServiceProviderFromExcelRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddServiceProviderFromExcel); ok {
		return x.ReqAddServiceProviderFromExcel
	}
	return nil
}

func (x *Request) GetReqGetSDTVOnLatLong() *GetSDTVOnLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetSDTVOnLatLong); ok {
		return x.ReqGetSDTVOnLatLong
	}
	return nil
}

func (x *Request) GetReqGetServiceDetailsOnLatLong() *GetServiceDetailsOnLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceDetailsOnLatLong); ok {
		return x.ReqGetServiceDetailsOnLatLong
	}
	return nil
}

func (x *Request) GetReqGetServicesOnServiceNameAndServiceType() *GetServicesOnServiceNameAndServiceTypeRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServicesOnServiceNameAndServiceType); ok {
		return x.ReqGetServicesOnServiceNameAndServiceType
	}
	return nil
}

func (x *Request) GetReqGetServiceProviderOnMobileNumber() *GetServiceProviderOnMobileNumberRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceProviderOnMobileNumber); ok {
		return x.ReqGetServiceProviderOnMobileNumber
	}
	return nil
}

func (x *Request) GetReqGetServiceLocationOnRegionName() *GetServiceLocationOnRegionNameRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceLocationOnRegionName); ok {
		return x.ReqGetServiceLocationOnRegionName
	}
	return nil
}

func (x *Request) GetReqGetServiceConfigOnCondition() *GetServiceConfigOnConditionRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceConfigOnCondition); ok {
		return x.ReqGetServiceConfigOnCondition
	}
	return nil
}

func (x *Request) GetReqGetServiceProviderOnServiceType() *GetServiceProviderOnServiceTypeRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceProviderOnServiceType); ok {
		return x.ReqGetServiceProviderOnServiceType
	}
	return nil
}

func (x *Request) GetReqGetLocationOnServiceProviderId() *GetLocationOnServiceProviderIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetLocationOnServiceProviderId); ok {
		return x.ReqGetLocationOnServiceProviderId
	}
	return nil
}

func (x *Request) GetReqGetServiceConfig() *GetServiceConfigRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceConfig); ok {
		return x.ReqGetServiceConfig
	}
	return nil
}

func (x *Request) GetReqGetServiceConfigOnRegionName() *GetServiceConfigOnRegionNameRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetServiceConfigOnRegionName); ok {
		return x.ReqGetServiceConfigOnRegionName
	}
	return nil
}

type isRequest_ARequest interface {
	isRequest_ARequest()
}

type Request_ReqAddServiceProvider struct {
	ReqAddServiceProvider *AddServiceProviderRequest `protobuf:"bytes,2,opt,name=reqAddServiceProvider,proto3,oneof"`
}

type Request_ReqAddServiceProviderBulk struct {
	ReqAddServiceProviderBulk *BulkAddServiceProviderRequest `protobuf:"bytes,3,opt,name=reqAddServiceProviderBulk,proto3,oneof"`
}

type Request_ReqAddServiceLocation struct {
	ReqAddServiceLocation *AddServiceLocationRequest `protobuf:"bytes,4,opt,name=reqAddServiceLocation,proto3,oneof"`
}

type Request_ReqAddServiceLocationBulk struct {
	ReqAddServiceLocationBulk *BulkAddServiceLocationRequest `protobuf:"bytes,5,opt,name=reqAddServiceLocationBulk,proto3,oneof"`
}

type Request_ReqAddServices struct {
	ReqAddServices *AddServicesRequest `protobuf:"bytes,6,opt,name=reqAddServices,proto3,oneof"`
}

type Request_ReqAddServicesBulk struct {
	ReqAddServicesBulk *BulkAddServicesRequest `protobuf:"bytes,7,opt,name=reqAddServicesBulk,proto3,oneof"`
}

type Request_ReqAddServiceProviderMapping struct {
	ReqAddServiceProviderMapping *AddServiceProviderMappingRequest `protobuf:"bytes,8,opt,name=reqAddServiceProviderMapping,proto3,oneof"`
}

type Request_ReqAddServiceProviderMappingBulk struct {
	ReqAddServiceProviderMappingBulk *BulkAddServiceProviderMappingRequest `protobuf:"bytes,9,opt,name=reqAddServiceProviderMappingBulk,proto3,oneof"`
}

type Request_ReqAddServiceConfig struct {
	ReqAddServiceConfig *AddServiceConfigRequest `protobuf:"bytes,10,opt,name=reqAddServiceConfig,proto3,oneof"`
}

type Request_ReqAddServiceConfigBulk struct {
	ReqAddServiceConfigBulk *BulkAddServiceConfigRequest `protobuf:"bytes,11,opt,name=reqAddServiceConfigBulk,proto3,oneof"`
}

type Request_ReqGetServiceProvider struct {
	ReqGetServiceProvider *GetServiceProviderRequest `protobuf:"bytes,12,opt,name=reqGetServiceProvider,proto3,oneof"`
}

type Request_ReqAddServiceProviderFromExcel struct {
	ReqAddServiceProviderFromExcel *AddServiceProviderFromExcelRequest `protobuf:"bytes,13,opt,name=reqAddServiceProviderFromExcel,proto3,oneof"`
}

type Request_ReqGetSDTVOnLatLong struct {
	ReqGetSDTVOnLatLong *GetSDTVOnLatLongRequest `protobuf:"bytes,14,opt,name=reqGetSDTVOnLatLong,proto3,oneof"`
}

type Request_ReqGetServiceDetailsOnLatLong struct {
	ReqGetServiceDetailsOnLatLong *GetServiceDetailsOnLatLongRequest `protobuf:"bytes,15,opt,name=reqGetServiceDetailsOnLatLong,proto3,oneof"`
}

type Request_ReqGetServicesOnServiceNameAndServiceType struct {
	ReqGetServicesOnServiceNameAndServiceType *GetServicesOnServiceNameAndServiceTypeRequest `protobuf:"bytes,16,opt,name=reqGetServicesOnServiceNameAndServiceType,proto3,oneof"`
}

type Request_ReqGetServiceProviderOnMobileNumber struct {
	ReqGetServiceProviderOnMobileNumber *GetServiceProviderOnMobileNumberRequest `protobuf:"bytes,17,opt,name=reqGetServiceProviderOnMobileNumber,proto3,oneof"`
}

type Request_ReqGetServiceLocationOnRegionName struct {
	ReqGetServiceLocationOnRegionName *GetServiceLocationOnRegionNameRequest `protobuf:"bytes,18,opt,name=reqGetServiceLocationOnRegionName,proto3,oneof"`
}

type Request_ReqGetServiceConfigOnCondition struct {
	ReqGetServiceConfigOnCondition *GetServiceConfigOnConditionRequest `protobuf:"bytes,19,opt,name=reqGetServiceConfigOnCondition,proto3,oneof"`
}

type Request_ReqGetServiceProviderOnServiceType struct {
	ReqGetServiceProviderOnServiceType *GetServiceProviderOnServiceTypeRequest `protobuf:"bytes,20,opt,name=reqGetServiceProviderOnServiceType,proto3,oneof"`
}

type Request_ReqGetLocationOnServiceProviderId struct {
	ReqGetLocationOnServiceProviderId *GetLocationOnServiceProviderIdRequest `protobuf:"bytes,21,opt,name=reqGetLocationOnServiceProviderId,proto3,oneof"`
}

type Request_ReqGetServiceConfig struct {
	ReqGetServiceConfig *GetServiceConfigRequest `protobuf:"bytes,22,opt,name=reqGetServiceConfig,proto3,oneof"`
}

type Request_ReqGetServiceConfigOnRegionName struct {
	ReqGetServiceConfigOnRegionName *GetServiceConfigOnRegionNameRequest `protobuf:"bytes,23,opt,name=reqGetServiceConfigOnRegionName,proto3,oneof"`
}

func (*Request_ReqAddServiceProvider) isRequest_ARequest() {}

func (*Request_ReqAddServiceProviderBulk) isRequest_ARequest() {}

func (*Request_ReqAddServiceLocation) isRequest_ARequest() {}

func (*Request_ReqAddServiceLocationBulk) isRequest_ARequest() {}

func (*Request_ReqAddServices) isRequest_ARequest() {}

func (*Request_ReqAddServicesBulk) isRequest_ARequest() {}

func (*Request_ReqAddServiceProviderMapping) isRequest_ARequest() {}

func (*Request_ReqAddServiceProviderMappingBulk) isRequest_ARequest() {}

func (*Request_ReqAddServiceConfig) isRequest_ARequest() {}

func (*Request_ReqAddServiceConfigBulk) isRequest_ARequest() {}

func (*Request_ReqGetServiceProvider) isRequest_ARequest() {}

func (*Request_ReqAddServiceProviderFromExcel) isRequest_ARequest() {}

func (*Request_ReqGetSDTVOnLatLong) isRequest_ARequest() {}

func (*Request_ReqGetServiceDetailsOnLatLong) isRequest_ARequest() {}

func (*Request_ReqGetServicesOnServiceNameAndServiceType) isRequest_ARequest() {}

func (*Request_ReqGetServiceProviderOnMobileNumber) isRequest_ARequest() {}

func (*Request_ReqGetServiceLocationOnRegionName) isRequest_ARequest() {}

func (*Request_ReqGetServiceConfigOnCondition) isRequest_ARequest() {}

func (*Request_ReqGetServiceProviderOnServiceType) isRequest_ARequest() {}

func (*Request_ReqGetLocationOnServiceProviderId) isRequest_ARequest() {}

func (*Request_ReqGetServiceConfig) isRequest_ARequest() {}

func (*Request_ReqGetServiceConfigOnRegionName) isRequest_ARequest() {}

type MultiResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Response []*Response `protobuf:"bytes,2,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiResponses) Reset() {
	*x = MultiResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiResponses) ProtoMessage() {}

func (x *MultiResponses) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiResponses.ProtoReflect.Descriptor instead.
func (*MultiResponses) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{64}
}

func (x *MultiResponses) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiResponses) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  string  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to AResponse:
	//	*Response_ResAddServiceProvider
	//	*Response_ResAddServiceProviderBulk
	//	*Response_ResAddServiceLocation
	//	*Response_ResAddServiceLocationBulk
	//	*Response_ResAddServices
	//	*Response_ResAddServicesBulk
	//	*Response_ResAddServiceProviderMapping
	//	*Response_ResAddServiceProviderMappingBulk
	//	*Response_ResAddServiceConfig
	//	*Response_ResAddServiceConfigBulk
	//	*Response_ResGetServiceProvider
	//	*Response_ResAddServiceProviderFromExcel
	//	*Response_ResGetSDTVOnLatLong
	//	*Response_ResGetServiceDetailsOnLatLong
	//	*Response_ResGetServicesOnServiceNameAndServiceType
	//	*Response_ResGetServiceProviderOnMobileNumber
	//	*Response_ResGetServiceLocationOnRegionName
	//	*Response_ResGetServiceConfigOnCondition
	//	*Response_ResGetServiceProviderOnServiceType
	//	*Response_ResGetLocationOnServiceProviderId
	//	*Response_ResGetServiceConfig
	//	*Response_ResGetServiceConfigOnRegionName
	AResponse isResponse_AResponse `protobuf_oneof:"AResponse"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP(), []int{65}
}

func (x *Response) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Response) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Response) GetAResponse() isResponse_AResponse {
	if m != nil {
		return m.AResponse
	}
	return nil
}

func (x *Response) GetResAddServiceProvider() *AddServiceProviderResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceProvider); ok {
		return x.ResAddServiceProvider
	}
	return nil
}

func (x *Response) GetResAddServiceProviderBulk() *BulkAddServiceProviderResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceProviderBulk); ok {
		return x.ResAddServiceProviderBulk
	}
	return nil
}

func (x *Response) GetResAddServiceLocation() *AddServiceLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceLocation); ok {
		return x.ResAddServiceLocation
	}
	return nil
}

func (x *Response) GetResAddServiceLocationBulk() *BulkAddServiceLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceLocationBulk); ok {
		return x.ResAddServiceLocationBulk
	}
	return nil
}

func (x *Response) GetResAddServices() *AddServicesResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServices); ok {
		return x.ResAddServices
	}
	return nil
}

func (x *Response) GetResAddServicesBulk() *BulkAddServicesResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServicesBulk); ok {
		return x.ResAddServicesBulk
	}
	return nil
}

func (x *Response) GetResAddServiceProviderMapping() *AddServiceProviderMappingResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceProviderMapping); ok {
		return x.ResAddServiceProviderMapping
	}
	return nil
}

func (x *Response) GetResAddServiceProviderMappingBulk() *BulkAddServiceProviderMappingResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceProviderMappingBulk); ok {
		return x.ResAddServiceProviderMappingBulk
	}
	return nil
}

func (x *Response) GetResAddServiceConfig() *AddServiceConfigResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceConfig); ok {
		return x.ResAddServiceConfig
	}
	return nil
}

func (x *Response) GetResAddServiceConfigBulk() *BulkAddServiceConfigResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceConfigBulk); ok {
		return x.ResAddServiceConfigBulk
	}
	return nil
}

func (x *Response) GetResGetServiceProvider() *GetServiceProviderResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceProvider); ok {
		return x.ResGetServiceProvider
	}
	return nil
}

func (x *Response) GetResAddServiceProviderFromExcel() *AddServiceProviderFromExcelResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddServiceProviderFromExcel); ok {
		return x.ResAddServiceProviderFromExcel
	}
	return nil
}

func (x *Response) GetResGetSDTVOnLatLong() *GetSDTVOnLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetSDTVOnLatLong); ok {
		return x.ResGetSDTVOnLatLong
	}
	return nil
}

func (x *Response) GetResGetServiceDetailsOnLatLong() *GetServiceDetailsOnLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceDetailsOnLatLong); ok {
		return x.ResGetServiceDetailsOnLatLong
	}
	return nil
}

func (x *Response) GetResGetServicesOnServiceNameAndServiceType() *GetServicesOnServiceNameAndServiceTypeResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServicesOnServiceNameAndServiceType); ok {
		return x.ResGetServicesOnServiceNameAndServiceType
	}
	return nil
}

func (x *Response) GetResGetServiceProviderOnMobileNumber() *GetServiceProviderOnMobileNumberResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceProviderOnMobileNumber); ok {
		return x.ResGetServiceProviderOnMobileNumber
	}
	return nil
}

func (x *Response) GetResGetServiceLocationOnRegionName() *GetServiceLocationOnRegionNameResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceLocationOnRegionName); ok {
		return x.ResGetServiceLocationOnRegionName
	}
	return nil
}

func (x *Response) GetResGetServiceConfigOnCondition() *GetServiceConfigOnConditionResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceConfigOnCondition); ok {
		return x.ResGetServiceConfigOnCondition
	}
	return nil
}

func (x *Response) GetResGetServiceProviderOnServiceType() *GetServiceProviderOnServiceTypeResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceProviderOnServiceType); ok {
		return x.ResGetServiceProviderOnServiceType
	}
	return nil
}

func (x *Response) GetResGetLocationOnServiceProviderId() *GetLocationOnServiceProviderIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetLocationOnServiceProviderId); ok {
		return x.ResGetLocationOnServiceProviderId
	}
	return nil
}

func (x *Response) GetResGetServiceConfig() *GetServiceConfigResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceConfig); ok {
		return x.ResGetServiceConfig
	}
	return nil
}

func (x *Response) GetResGetServiceConfigOnRegionName() *GetServiceConfigOnRegionNameResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetServiceConfigOnRegionName); ok {
		return x.ResGetServiceConfigOnRegionName
	}
	return nil
}

type isResponse_AResponse interface {
	isResponse_AResponse()
}

type Response_ResAddServiceProvider struct {
	ResAddServiceProvider *AddServiceProviderResponse `protobuf:"bytes,3,opt,name=resAddServiceProvider,proto3,oneof"`
}

type Response_ResAddServiceProviderBulk struct {
	ResAddServiceProviderBulk *BulkAddServiceProviderResponse `protobuf:"bytes,4,opt,name=resAddServiceProviderBulk,proto3,oneof"`
}

type Response_ResAddServiceLocation struct {
	ResAddServiceLocation *AddServiceLocationResponse `protobuf:"bytes,5,opt,name=resAddServiceLocation,proto3,oneof"`
}

type Response_ResAddServiceLocationBulk struct {
	ResAddServiceLocationBulk *BulkAddServiceLocationResponse `protobuf:"bytes,6,opt,name=resAddServiceLocationBulk,proto3,oneof"`
}

type Response_ResAddServices struct {
	ResAddServices *AddServicesResponse `protobuf:"bytes,7,opt,name=resAddServices,proto3,oneof"`
}

type Response_ResAddServicesBulk struct {
	ResAddServicesBulk *BulkAddServicesResponse `protobuf:"bytes,8,opt,name=resAddServicesBulk,proto3,oneof"`
}

type Response_ResAddServiceProviderMapping struct {
	ResAddServiceProviderMapping *AddServiceProviderMappingResponse `protobuf:"bytes,9,opt,name=resAddServiceProviderMapping,proto3,oneof"`
}

type Response_ResAddServiceProviderMappingBulk struct {
	ResAddServiceProviderMappingBulk *BulkAddServiceProviderMappingResponse `protobuf:"bytes,10,opt,name=resAddServiceProviderMappingBulk,proto3,oneof"`
}

type Response_ResAddServiceConfig struct {
	ResAddServiceConfig *AddServiceConfigResponse `protobuf:"bytes,11,opt,name=resAddServiceConfig,proto3,oneof"`
}

type Response_ResAddServiceConfigBulk struct {
	ResAddServiceConfigBulk *BulkAddServiceConfigResponse `protobuf:"bytes,12,opt,name=resAddServiceConfigBulk,proto3,oneof"`
}

type Response_ResGetServiceProvider struct {
	ResGetServiceProvider *GetServiceProviderResponse `protobuf:"bytes,13,opt,name=resGetServiceProvider,proto3,oneof"`
}

type Response_ResAddServiceProviderFromExcel struct {
	ResAddServiceProviderFromExcel *AddServiceProviderFromExcelResponse `protobuf:"bytes,14,opt,name=resAddServiceProviderFromExcel,proto3,oneof"`
}

type Response_ResGetSDTVOnLatLong struct {
	ResGetSDTVOnLatLong *GetSDTVOnLatLongResponse `protobuf:"bytes,15,opt,name=resGetSDTVOnLatLong,proto3,oneof"`
}

type Response_ResGetServiceDetailsOnLatLong struct {
	ResGetServiceDetailsOnLatLong *GetServiceDetailsOnLatLongResponse `protobuf:"bytes,16,opt,name=resGetServiceDetailsOnLatLong,proto3,oneof"`
}

type Response_ResGetServicesOnServiceNameAndServiceType struct {
	ResGetServicesOnServiceNameAndServiceType *GetServicesOnServiceNameAndServiceTypeResponse `protobuf:"bytes,17,opt,name=resGetServicesOnServiceNameAndServiceType,proto3,oneof"`
}

type Response_ResGetServiceProviderOnMobileNumber struct {
	ResGetServiceProviderOnMobileNumber *GetServiceProviderOnMobileNumberResponse `protobuf:"bytes,18,opt,name=resGetServiceProviderOnMobileNumber,proto3,oneof"`
}

type Response_ResGetServiceLocationOnRegionName struct {
	ResGetServiceLocationOnRegionName *GetServiceLocationOnRegionNameResponse `protobuf:"bytes,19,opt,name=resGetServiceLocationOnRegionName,proto3,oneof"`
}

type Response_ResGetServiceConfigOnCondition struct {
	ResGetServiceConfigOnCondition *GetServiceConfigOnConditionResponse `protobuf:"bytes,20,opt,name=resGetServiceConfigOnCondition,proto3,oneof"`
}

type Response_ResGetServiceProviderOnServiceType struct {
	ResGetServiceProviderOnServiceType *GetServiceProviderOnServiceTypeResponse `protobuf:"bytes,21,opt,name=resGetServiceProviderOnServiceType,proto3,oneof"`
}

type Response_ResGetLocationOnServiceProviderId struct {
	ResGetLocationOnServiceProviderId *GetLocationOnServiceProviderIdResponse `protobuf:"bytes,22,opt,name=resGetLocationOnServiceProviderId,proto3,oneof"`
}

type Response_ResGetServiceConfig struct {
	ResGetServiceConfig *GetServiceConfigResponse `protobuf:"bytes,23,opt,name=resGetServiceConfig,proto3,oneof"`
}

type Response_ResGetServiceConfigOnRegionName struct {
	ResGetServiceConfigOnRegionName *GetServiceConfigOnRegionNameResponse `protobuf:"bytes,24,opt,name=resGetServiceConfigOnRegionName,proto3,oneof"`
}

func (*Response_ResAddServiceProvider) isResponse_AResponse() {}

func (*Response_ResAddServiceProviderBulk) isResponse_AResponse() {}

func (*Response_ResAddServiceLocation) isResponse_AResponse() {}

func (*Response_ResAddServiceLocationBulk) isResponse_AResponse() {}

func (*Response_ResAddServices) isResponse_AResponse() {}

func (*Response_ResAddServicesBulk) isResponse_AResponse() {}

func (*Response_ResAddServiceProviderMapping) isResponse_AResponse() {}

func (*Response_ResAddServiceProviderMappingBulk) isResponse_AResponse() {}

func (*Response_ResAddServiceConfig) isResponse_AResponse() {}

func (*Response_ResAddServiceConfigBulk) isResponse_AResponse() {}

func (*Response_ResGetServiceProvider) isResponse_AResponse() {}

func (*Response_ResAddServiceProviderFromExcel) isResponse_AResponse() {}

func (*Response_ResGetSDTVOnLatLong) isResponse_AResponse() {}

func (*Response_ResGetServiceDetailsOnLatLong) isResponse_AResponse() {}

func (*Response_ResGetServicesOnServiceNameAndServiceType) isResponse_AResponse() {}

func (*Response_ResGetServiceProviderOnMobileNumber) isResponse_AResponse() {}

func (*Response_ResGetServiceLocationOnRegionName) isResponse_AResponse() {}

func (*Response_ResGetServiceConfigOnCondition) isResponse_AResponse() {}

func (*Response_ResGetServiceProviderOnServiceType) isResponse_AResponse() {}

func (*Response_ResGetLocationOnServiceProviderId) isResponse_AResponse() {}

func (*Response_ResGetServiceConfig) isResponse_AResponse() {}

func (*Response_ResGetServiceConfigOnRegionName) isResponse_AResponse() {}

var File_ServiceProviderManagementService_service_provider_management_service_proto protoreflect.FileDescriptor

var file_ServiceProviderManagementService_service_provider_management_service_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x5c,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x22, 0x0a, 0x08, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x69, 0x6e, 0x64, 0x69, 0x10, 0x02, 0x22, 0x23, 0x0a,
	0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x69,
	0x61, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61,
	0x10, 0x02, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x61, 0x74, 0x73,
	0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a,
	0x1a, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c,
	0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1d,
	0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x22, 0xe8, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xd8,
	0x01, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xda,
	0x01, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x20,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x41,
	0x63, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x41, 0x63, 0x72, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x24, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf0, 0x01,
	0x0a, 0x21, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x22, 0xf6, 0x01, 0x0a, 0x25, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x22, 0xe2, 0x01, 0x0a, 0x1b,
	0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x5f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xe7, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x1c, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0xc7, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x70, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xc0, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12,
	0x71, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x41, 0x63, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x41, 0x63, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x57, 0x68, 0x61, 0x74, 0x73,
	0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc2,
	0x01, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x73, 0x76, 0x22, 0x2b, 0x0a, 0x29, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xdc, 0x02, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x61, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xdf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x9d, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f,
	0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x68, 0x73, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x65, 0x68, 0x73, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0x2a, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x34, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x7a, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x64, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd1, 0x02, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x74, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0xc0, 0x02, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x65, 0x0a,
	0x0f, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67,
	0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x65, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xc7,
	0x02, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x6f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xff, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x77,
	0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x41, 0x63, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x41,
	0x63, 0x72, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x73, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x72, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xc9, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x12, 0x70, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x19, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7d, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x7d, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x68, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x12, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x20, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x77, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x83, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x7d, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x12, 0x77, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44,
	0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56,
	0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x1d, 0x72, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0xb9, 0x01, 0x0a, 0x29, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x29, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa7, 0x01,
	0x0a, 0x23, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x23, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1e,
	0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x21, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x21,
	0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x77, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x72,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x41, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x75,
	0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x7e, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x69,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x93, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x20, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x78, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x7e, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x72, 0x65,
	0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x78, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53,
	0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x96, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f,
	0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x29, 0x72, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x29, 0x72, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x23, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f,
	0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x23, 0x72, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0xa2, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x22, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x21, 0x72, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x78,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xda, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x42, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x0a, 0x32, 0x96, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb8, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xac, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xb8, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc1, 0x01, 0x0a, 0x20, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xcd,
	0x01, 0x0a, 0x24, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6,
	0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb2, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a,
	0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc7, 0x01, 0x0a, 0x22,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x12, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44, 0x54, 0x56, 0x4f, 0x6e, 0x4c, 0x61, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc4,
	0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xe8, 0x01, 0x0a, 0x2d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xd6, 0x01, 0x0a, 0x27, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x54, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4f, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd0, 0x01, 0x0a, 0x25, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc7, 0x01, 0x0a,
	0x22, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd3, 0x01, 0x0a, 0x26, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd0, 0x01, 0x0a,
	0x25, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa6, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xca, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x3a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x42, 0x71, 0x0a, 0x2a, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescOnce sync.Once
	file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescData = file_ServiceProviderManagementService_service_provider_management_service_proto_rawDesc
)

func file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescGZIP() []byte {
	file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescOnce.Do(func() {
		file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescData)
	})
	return file_ServiceProviderManagementService_service_provider_management_service_proto_rawDescData
}

var file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_ServiceProviderManagementService_service_provider_management_service_proto_goTypes = []interface{}{
	(StatusCode)(0),                                              // 0: farm.nurture.serviceProvider.service.proto.StatusCode
	(RequestHeaders_LANGUAGE)(0),                                 // 1: farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE
	(RequestHeaders_COUNTRY)(0),                                  // 2: farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY
	(*RequestHeaders)(nil),                                       // 3: farm.nurture.serviceProvider.service.proto.RequestHeaders
	(*Attribs)(nil),                                              // 4: farm.nurture.serviceProvider.service.proto.Attribs
	(*Status)(nil),                                               // 5: farm.nurture.serviceProvider.service.proto.Status
	(*AddServiceProviderRequest)(nil),                            // 6: farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest
	(*BulkAddServiceProviderRequest)(nil),                        // 7: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest
	(*AddServiceProviderResponse)(nil),                           // 8: farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse
	(*BulkAddServiceProviderResponse)(nil),                       // 9: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse
	(*AddServiceLocationRequest)(nil),                            // 10: farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest
	(*BulkAddServiceLocationRequest)(nil),                        // 11: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest
	(*AddServiceLocationResponse)(nil),                           // 12: farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse
	(*BulkAddServiceLocationResponse)(nil),                       // 13: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse
	(*AddServicesRequest)(nil),                                   // 14: farm.nurture.serviceProvider.service.proto.AddServicesRequest
	(*BulkAddServicesRequest)(nil),                               // 15: farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest
	(*AddServicesResponse)(nil),                                  // 16: farm.nurture.serviceProvider.service.proto.AddServicesResponse
	(*BulkAddServicesResponse)(nil),                              // 17: farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse
	(*AddServiceProviderMappingRequest)(nil),                     // 18: farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest
	(*BulkAddServiceProviderMappingRequest)(nil),                 // 19: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest
	(*AddServiceProviderMappingResponse)(nil),                    // 20: farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse
	(*BulkAddServiceProviderMappingResponse)(nil),                // 21: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse
	(*AddServiceConfigRequest)(nil),                              // 22: farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest
	(*BulkAddServiceConfigRequest)(nil),                          // 23: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest
	(*AddServiceConfigResponse)(nil),                             // 24: farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse
	(*BulkAddServiceConfigResponse)(nil),                         // 25: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse
	(*GetServiceProviderRequest)(nil),                            // 26: farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest
	(*GetServiceProviderResponseRecord)(nil),                     // 27: farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord
	(*GetServiceProviderResponse)(nil),                           // 28: farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse
	(*ServiceProviderInfo)(nil),                                  // 29: farm.nurture.serviceProvider.service.proto.ServiceProviderInfo
	(*AddServiceProviderFromExcelRequest)(nil),                   // 30: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest
	(*AddServiceProviderFromExcelResponseRecord)(nil),            // 31: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord
	(*AddServiceProviderFromExcelResponse)(nil),                  // 32: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse
	(*GetSDTVOnLatLongRequest)(nil),                              // 33: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest
	(*GetSDTVOnLatLongResponseRecord)(nil),                       // 34: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord
	(*GetSDTVOnLatLongResponse)(nil),                             // 35: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse
	(*GetServiceDetailsOnLatLongRequest)(nil),                    // 36: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest
	(*GetServiceDetailsOnLatLongResponseRecord)(nil),             // 37: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord
	(*GetServiceDetailsOnLatLongResponse)(nil),                   // 38: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse
	(*ServiceDetailsResponse)(nil),                               // 39: farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse
	(*GetServicesOnServiceNameAndServiceTypeRequest)(nil),        // 40: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest
	(*GetServicesOnServiceNameAndServiceTypeResponseRecord)(nil), // 41: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord
	(*GetServicesOnServiceNameAndServiceTypeResponse)(nil),       // 42: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse
	(*GetServiceProviderOnMobileNumberRequest)(nil),              // 43: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest
	(*GetServiceProviderOnMobileNumberResponseRecord)(nil),       // 44: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord
	(*GetServiceProviderOnMobileNumberResponse)(nil),             // 45: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse
	(*GetServiceLocationOnRegionNameRequest)(nil),                // 46: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest
	(*GetServiceLocationOnRegionNameResponseRecord)(nil),         // 47: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord
	(*GetServiceLocationOnRegionNameResponse)(nil),               // 48: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse
	(*GeographyDetail)(nil),                                      // 49: farm.nurture.serviceProvider.service.proto.GeographyDetail
	(*GetServiceConfigOnConditionRequest)(nil),                   // 50: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest
	(*GetServiceConfigOnConditionResponseRecord)(nil),            // 51: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord
	(*GetServiceConfigOnConditionResponse)(nil),                  // 52: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse
	(*GetServiceProviderOnServiceTypeRequest)(nil),               // 53: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest
	(*GetServiceProviderOnServiceTypeResponseRecord)(nil),        // 54: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord
	(*GetServiceProviderOnServiceTypeResponse)(nil),              // 55: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse
	(*GetLocationOnServiceProviderIdRequest)(nil),                // 56: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest
	(*GetLocationOnServiceProviderIdResponseRecord)(nil),         // 57: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord
	(*GetLocationOnServiceProviderIdResponse)(nil),               // 58: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse
	(*GetServiceConfigRequest)(nil),                              // 59: farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest
	(*GetServiceConfigResponseRecord)(nil),                       // 60: farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord
	(*GetServiceConfigResponse)(nil),                             // 61: farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse
	(*GetServiceConfigOnRegionNameRequest)(nil),                  // 62: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest
	(*GetServiceConfigOnRegionNameResponseRecord)(nil),           // 63: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord
	(*GetServiceConfigOnRegionNameResponse)(nil),                 // 64: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse
	(*MultiRequests)(nil),                                        // 65: farm.nurture.serviceProvider.service.proto.MultiRequests
	(*Request)(nil),                                              // 66: farm.nurture.serviceProvider.service.proto.Request
	(*MultiResponses)(nil),                                       // 67: farm.nurture.serviceProvider.service.proto.MultiResponses
	(*Response)(nil),                                             // 68: farm.nurture.serviceProvider.service.proto.Response
}
var file_ServiceProviderManagementService_service_provider_management_service_proto_depIdxs = []int32{
	1,   // 0: farm.nurture.serviceProvider.service.proto.RequestHeaders.language:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE
	2,   // 1: farm.nurture.serviceProvider.service.proto.RequestHeaders.country:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY
	4,   // 2: farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	0,   // 3: farm.nurture.serviceProvider.service.proto.Status.status:type_name -> farm.nurture.serviceProvider.service.proto.StatusCode
	3,   // 4: farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	3,   // 5: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	6,   // 6: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest
	5,   // 7: farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 8: farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	5,   // 9: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	8,   // 10: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse
	3,   // 11: farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	3,   // 12: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	10,  // 13: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest
	5,   // 14: farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 15: farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	5,   // 16: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	12,  // 17: farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse
	3,   // 18: farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	3,   // 19: farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	14,  // 20: farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests:type_name -> farm.nurture.serviceProvider.service.proto.AddServicesRequest
	5,   // 21: farm.nurture.serviceProvider.service.proto.AddServicesResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 22: farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	5,   // 23: farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	16,  // 24: farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses:type_name -> farm.nurture.serviceProvider.service.proto.AddServicesResponse
	3,   // 25: farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	3,   // 26: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	18,  // 27: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest
	5,   // 28: farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 29: farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	5,   // 30: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	20,  // 31: farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse
	3,   // 32: farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	3,   // 33: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	22,  // 34: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest
	5,   // 35: farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 36: farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	5,   // 37: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	24,  // 38: farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse
	3,   // 39: farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 40: farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 41: farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	29,  // 42: farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo:type_name -> farm.nurture.serviceProvider.service.proto.ServiceProviderInfo
	3,   // 43: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 44: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 45: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	6,   // 46: farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest
	3,   // 47: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 48: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 49: farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	3,   // 50: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 51: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 52: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	39,  // 53: farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse:type_name -> farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse
	3,   // 54: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 55: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 56: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	41,  // 57: farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord
	3,   // 58: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 59: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 60: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	44,  // 61: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord
	3,   // 62: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 63: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 64: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	49,  // 65: farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail:type_name -> farm.nurture.serviceProvider.service.proto.GeographyDetail
	49,  // 66: farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail:type_name -> farm.nurture.serviceProvider.service.proto.GeographyDetail
	3,   // 67: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 68: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 69: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	51,  // 70: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord
	3,   // 71: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 72: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 73: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	54,  // 74: farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord
	3,   // 75: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 76: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 77: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	57,  // 78: farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord
	3,   // 79: farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 80: farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 81: farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	39,  // 82: farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse:type_name -> farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse
	3,   // 83: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders:type_name -> farm.nurture.serviceProvider.service.proto.RequestHeaders
	5,   // 84: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	4,   // 85: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs:type_name -> farm.nurture.serviceProvider.service.proto.Attribs
	63,  // 86: farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord
	66,  // 87: farm.nurture.serviceProvider.service.proto.MultiRequests.request:type_name -> farm.nurture.serviceProvider.service.proto.Request
	6,   // 88: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest
	7,   // 89: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest
	10,  // 90: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest
	11,  // 91: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest
	14,  // 92: farm.nurture.serviceProvider.service.proto.Request.reqAddServices:type_name -> farm.nurture.serviceProvider.service.proto.AddServicesRequest
	15,  // 93: farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest
	18,  // 94: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest
	19,  // 95: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest
	22,  // 96: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest
	23,  // 97: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest
	26,  // 98: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest
	30,  // 99: farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest
	33,  // 100: farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong:type_name -> farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest
	36,  // 101: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest
	40,  // 102: farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType:type_name -> farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest
	43,  // 103: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest
	46,  // 104: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest
	50,  // 105: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest
	53,  // 106: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest
	56,  // 107: farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId:type_name -> farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest
	59,  // 108: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest
	62,  // 109: farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest
	5,   // 110: farm.nurture.serviceProvider.service.proto.MultiResponses.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	68,  // 111: farm.nurture.serviceProvider.service.proto.MultiResponses.response:type_name -> farm.nurture.serviceProvider.service.proto.Response
	5,   // 112: farm.nurture.serviceProvider.service.proto.Response.status:type_name -> farm.nurture.serviceProvider.service.proto.Status
	8,   // 113: farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse
	9,   // 114: farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse
	12,  // 115: farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse
	13,  // 116: farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse
	16,  // 117: farm.nurture.serviceProvider.service.proto.Response.resAddServices:type_name -> farm.nurture.serviceProvider.service.proto.AddServicesResponse
	17,  // 118: farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse
	20,  // 119: farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse
	21,  // 120: farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse
	24,  // 121: farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse
	25,  // 122: farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk:type_name -> farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse
	28,  // 123: farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse
	32,  // 124: farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel:type_name -> farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse
	35,  // 125: farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong:type_name -> farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse
	38,  // 126: farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse
	42,  // 127: farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType:type_name -> farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse
	45,  // 128: farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse
	48,  // 129: farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse
	52,  // 130: farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse
	55,  // 131: farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse
	58,  // 132: farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId:type_name -> farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse
	61,  // 133: farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse
	64,  // 134: farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName:type_name -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse
	6,   // 135: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProvider:input_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest
	7,   // 136: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderBulk:input_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest
	10,  // 137: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceLocation:input_type -> farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest
	11,  // 138: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceLocationBulk:input_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest
	14,  // 139: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServices:input_type -> farm.nurture.serviceProvider.service.proto.AddServicesRequest
	15,  // 140: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServicesBulk:input_type -> farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest
	18,  // 141: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderMapping:input_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest
	19,  // 142: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderMappingBulk:input_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest
	22,  // 143: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceConfig:input_type -> farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest
	23,  // 144: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceConfigBulk:input_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest
	26,  // 145: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProvider:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest
	30,  // 146: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderFromExcel:input_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest
	33,  // 147: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetSDTVOnLatLong:input_type -> farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest
	36,  // 148: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceDetailsOnLatLong:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest
	40,  // 149: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServicesOnServiceNameAndServiceType:input_type -> farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest
	43,  // 150: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProviderOnMobileNumber:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest
	46,  // 151: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceLocationOnRegionName:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest
	50,  // 152: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfigOnCondition:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest
	53,  // 153: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProviderOnServiceType:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest
	56,  // 154: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetLocationOnServiceProviderId:input_type -> farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest
	59,  // 155: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfig:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest
	62,  // 156: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfigOnRegionName:input_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest
	65,  // 157: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.Execute:input_type -> farm.nurture.serviceProvider.service.proto.MultiRequests
	8,   // 158: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProvider:output_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse
	9,   // 159: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderBulk:output_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse
	12,  // 160: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceLocation:output_type -> farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse
	13,  // 161: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceLocationBulk:output_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse
	16,  // 162: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServices:output_type -> farm.nurture.serviceProvider.service.proto.AddServicesResponse
	17,  // 163: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServicesBulk:output_type -> farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse
	20,  // 164: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderMapping:output_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse
	21,  // 165: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderMappingBulk:output_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse
	24,  // 166: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceConfig:output_type -> farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse
	25,  // 167: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceConfigBulk:output_type -> farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse
	28,  // 168: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProvider:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse
	32,  // 169: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteAddServiceProviderFromExcel:output_type -> farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse
	35,  // 170: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetSDTVOnLatLong:output_type -> farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse
	38,  // 171: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceDetailsOnLatLong:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse
	42,  // 172: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServicesOnServiceNameAndServiceType:output_type -> farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse
	45,  // 173: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProviderOnMobileNumber:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse
	48,  // 174: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceLocationOnRegionName:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse
	52,  // 175: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfigOnCondition:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse
	55,  // 176: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceProviderOnServiceType:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse
	58,  // 177: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetLocationOnServiceProviderId:output_type -> farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse
	61,  // 178: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfig:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse
	64,  // 179: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.ExecuteGetServiceConfigOnRegionName:output_type -> farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse
	67,  // 180: farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService.Execute:output_type -> farm.nurture.serviceProvider.service.proto.MultiResponses
	158, // [158:181] is the sub-list for method output_type
	135, // [135:158] is the sub-list for method input_type
	135, // [135:135] is the sub-list for extension type_name
	135, // [135:135] is the sub-list for extension extendee
	0,   // [0:135] is the sub-list for field type_name
}

func init() { file_ServiceProviderManagementService_service_provider_management_service_proto_init() }
func file_ServiceProviderManagementService_service_provider_management_service_proto_init() {
	if File_ServiceProviderManagementService_service_provider_management_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceProviderMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceProviderMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceProviderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderFromExcelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderFromExcelResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceProviderFromExcelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDTVOnLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDTVOnLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDTVOnLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDetailsOnLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDetailsOnLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDetailsOnLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesOnServiceNameAndServiceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesOnServiceNameAndServiceTypeResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesOnServiceNameAndServiceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnMobileNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnMobileNumberResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnMobileNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLocationOnRegionNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLocationOnRegionNameResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLocationOnRegionNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographyDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnConditionResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnServiceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnServiceTypeResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderOnServiceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationOnServiceProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationOnServiceProviderIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationOnServiceProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnRegionNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnRegionNameResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigOnRegionNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*Request_ReqAddServiceProvider)(nil),
		(*Request_ReqAddServiceProviderBulk)(nil),
		(*Request_ReqAddServiceLocation)(nil),
		(*Request_ReqAddServiceLocationBulk)(nil),
		(*Request_ReqAddServices)(nil),
		(*Request_ReqAddServicesBulk)(nil),
		(*Request_ReqAddServiceProviderMapping)(nil),
		(*Request_ReqAddServiceProviderMappingBulk)(nil),
		(*Request_ReqAddServiceConfig)(nil),
		(*Request_ReqAddServiceConfigBulk)(nil),
		(*Request_ReqGetServiceProvider)(nil),
		(*Request_ReqAddServiceProviderFromExcel)(nil),
		(*Request_ReqGetSDTVOnLatLong)(nil),
		(*Request_ReqGetServiceDetailsOnLatLong)(nil),
		(*Request_ReqGetServicesOnServiceNameAndServiceType)(nil),
		(*Request_ReqGetServiceProviderOnMobileNumber)(nil),
		(*Request_ReqGetServiceLocationOnRegionName)(nil),
		(*Request_ReqGetServiceConfigOnCondition)(nil),
		(*Request_ReqGetServiceProviderOnServiceType)(nil),
		(*Request_ReqGetLocationOnServiceProviderId)(nil),
		(*Request_ReqGetServiceConfig)(nil),
		(*Request_ReqGetServiceConfigOnRegionName)(nil),
	}
	file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*Response_ResAddServiceProvider)(nil),
		(*Response_ResAddServiceProviderBulk)(nil),
		(*Response_ResAddServiceLocation)(nil),
		(*Response_ResAddServiceLocationBulk)(nil),
		(*Response_ResAddServices)(nil),
		(*Response_ResAddServicesBulk)(nil),
		(*Response_ResAddServiceProviderMapping)(nil),
		(*Response_ResAddServiceProviderMappingBulk)(nil),
		(*Response_ResAddServiceConfig)(nil),
		(*Response_ResAddServiceConfigBulk)(nil),
		(*Response_ResGetServiceProvider)(nil),
		(*Response_ResAddServiceProviderFromExcel)(nil),
		(*Response_ResGetSDTVOnLatLong)(nil),
		(*Response_ResGetServiceDetailsOnLatLong)(nil),
		(*Response_ResGetServicesOnServiceNameAndServiceType)(nil),
		(*Response_ResGetServiceProviderOnMobileNumber)(nil),
		(*Response_ResGetServiceLocationOnRegionName)(nil),
		(*Response_ResGetServiceConfigOnCondition)(nil),
		(*Response_ResGetServiceProviderOnServiceType)(nil),
		(*Response_ResGetLocationOnServiceProviderId)(nil),
		(*Response_ResGetServiceConfig)(nil),
		(*Response_ResGetServiceConfigOnRegionName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ServiceProviderManagementService_service_provider_management_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ServiceProviderManagementService_service_provider_management_service_proto_goTypes,
		DependencyIndexes: file_ServiceProviderManagementService_service_provider_management_service_proto_depIdxs,
		EnumInfos:         file_ServiceProviderManagementService_service_provider_management_service_proto_enumTypes,
		MessageInfos:      file_ServiceProviderManagementService_service_provider_management_service_proto_msgTypes,
	}.Build()
	File_ServiceProviderManagementService_service_provider_management_service_proto = out.File
	file_ServiceProviderManagementService_service_provider_management_service_proto_rawDesc = nil
	file_ServiceProviderManagementService_service_provider_management_service_proto_goTypes = nil
	file_ServiceProviderManagementService_service_provider_management_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceProviderManagementServiceClient is the client API for ServiceProviderManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceProviderManagementServiceClient interface {
	ExecuteAddServiceProvider(ctx context.Context, in *AddServiceProviderRequest, opts ...grpc.CallOption) (*AddServiceProviderResponse, error)
	ExecuteAddServiceProviderBulk(ctx context.Context, in *BulkAddServiceProviderRequest, opts ...grpc.CallOption) (*BulkAddServiceProviderResponse, error)
	ExecuteAddServiceLocation(ctx context.Context, in *AddServiceLocationRequest, opts ...grpc.CallOption) (*AddServiceLocationResponse, error)
	ExecuteAddServiceLocationBulk(ctx context.Context, in *BulkAddServiceLocationRequest, opts ...grpc.CallOption) (*BulkAddServiceLocationResponse, error)
	ExecuteAddServices(ctx context.Context, in *AddServicesRequest, opts ...grpc.CallOption) (*AddServicesResponse, error)
	ExecuteAddServicesBulk(ctx context.Context, in *BulkAddServicesRequest, opts ...grpc.CallOption) (*BulkAddServicesResponse, error)
	ExecuteAddServiceProviderMapping(ctx context.Context, in *AddServiceProviderMappingRequest, opts ...grpc.CallOption) (*AddServiceProviderMappingResponse, error)
	ExecuteAddServiceProviderMappingBulk(ctx context.Context, in *BulkAddServiceProviderMappingRequest, opts ...grpc.CallOption) (*BulkAddServiceProviderMappingResponse, error)
	ExecuteAddServiceConfig(ctx context.Context, in *AddServiceConfigRequest, opts ...grpc.CallOption) (*AddServiceConfigResponse, error)
	ExecuteAddServiceConfigBulk(ctx context.Context, in *BulkAddServiceConfigRequest, opts ...grpc.CallOption) (*BulkAddServiceConfigResponse, error)
	ExecuteGetServiceProvider(ctx context.Context, in *GetServiceProviderRequest, opts ...grpc.CallOption) (*GetServiceProviderResponse, error)
	ExecuteAddServiceProviderFromExcel(ctx context.Context, in *AddServiceProviderFromExcelRequest, opts ...grpc.CallOption) (*AddServiceProviderFromExcelResponse, error)
	ExecuteGetSDTVOnLatLong(ctx context.Context, in *GetSDTVOnLatLongRequest, opts ...grpc.CallOption) (*GetSDTVOnLatLongResponse, error)
	ExecuteGetServiceDetailsOnLatLong(ctx context.Context, in *GetServiceDetailsOnLatLongRequest, opts ...grpc.CallOption) (*GetServiceDetailsOnLatLongResponse, error)
	ExecuteGetServicesOnServiceNameAndServiceType(ctx context.Context, in *GetServicesOnServiceNameAndServiceTypeRequest, opts ...grpc.CallOption) (*GetServicesOnServiceNameAndServiceTypeResponse, error)
	ExecuteGetServiceProviderOnMobileNumber(ctx context.Context, in *GetServiceProviderOnMobileNumberRequest, opts ...grpc.CallOption) (*GetServiceProviderOnMobileNumberResponse, error)
	ExecuteGetServiceLocationOnRegionName(ctx context.Context, in *GetServiceLocationOnRegionNameRequest, opts ...grpc.CallOption) (*GetServiceLocationOnRegionNameResponse, error)
	ExecuteGetServiceConfigOnCondition(ctx context.Context, in *GetServiceConfigOnConditionRequest, opts ...grpc.CallOption) (*GetServiceConfigOnConditionResponse, error)
	ExecuteGetServiceProviderOnServiceType(ctx context.Context, in *GetServiceProviderOnServiceTypeRequest, opts ...grpc.CallOption) (*GetServiceProviderOnServiceTypeResponse, error)
	ExecuteGetLocationOnServiceProviderId(ctx context.Context, in *GetLocationOnServiceProviderIdRequest, opts ...grpc.CallOption) (*GetLocationOnServiceProviderIdResponse, error)
	ExecuteGetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error)
	ExecuteGetServiceConfigOnRegionName(ctx context.Context, in *GetServiceConfigOnRegionNameRequest, opts ...grpc.CallOption) (*GetServiceConfigOnRegionNameResponse, error)
	Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error)
}

type serviceProviderManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderManagementServiceClient(cc grpc.ClientConnInterface) ServiceProviderManagementServiceClient {
	return &serviceProviderManagementServiceClient{cc}
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceProvider(ctx context.Context, in *AddServiceProviderRequest, opts ...grpc.CallOption) (*AddServiceProviderResponse, error) {
	out := new(AddServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceProviderBulk(ctx context.Context, in *BulkAddServiceProviderRequest, opts ...grpc.CallOption) (*BulkAddServiceProviderResponse, error) {
	out := new(BulkAddServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceLocation(ctx context.Context, in *AddServiceLocationRequest, opts ...grpc.CallOption) (*AddServiceLocationResponse, error) {
	out := new(AddServiceLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceLocationBulk(ctx context.Context, in *BulkAddServiceLocationRequest, opts ...grpc.CallOption) (*BulkAddServiceLocationResponse, error) {
	out := new(BulkAddServiceLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceLocationBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServices(ctx context.Context, in *AddServicesRequest, opts ...grpc.CallOption) (*AddServicesResponse, error) {
	out := new(AddServicesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServicesBulk(ctx context.Context, in *BulkAddServicesRequest, opts ...grpc.CallOption) (*BulkAddServicesResponse, error) {
	out := new(BulkAddServicesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServicesBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceProviderMapping(ctx context.Context, in *AddServiceProviderMappingRequest, opts ...grpc.CallOption) (*AddServiceProviderMappingResponse, error) {
	out := new(AddServiceProviderMappingResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceProviderMappingBulk(ctx context.Context, in *BulkAddServiceProviderMappingRequest, opts ...grpc.CallOption) (*BulkAddServiceProviderMappingResponse, error) {
	out := new(BulkAddServiceProviderMappingResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderMappingBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceConfig(ctx context.Context, in *AddServiceConfigRequest, opts ...grpc.CallOption) (*AddServiceConfigResponse, error) {
	out := new(AddServiceConfigResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceConfigBulk(ctx context.Context, in *BulkAddServiceConfigRequest, opts ...grpc.CallOption) (*BulkAddServiceConfigResponse, error) {
	out := new(BulkAddServiceConfigResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceConfigBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceProvider(ctx context.Context, in *GetServiceProviderRequest, opts ...grpc.CallOption) (*GetServiceProviderResponse, error) {
	out := new(GetServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteAddServiceProviderFromExcel(ctx context.Context, in *AddServiceProviderFromExcelRequest, opts ...grpc.CallOption) (*AddServiceProviderFromExcelResponse, error) {
	out := new(AddServiceProviderFromExcelResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderFromExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetSDTVOnLatLong(ctx context.Context, in *GetSDTVOnLatLongRequest, opts ...grpc.CallOption) (*GetSDTVOnLatLongResponse, error) {
	out := new(GetSDTVOnLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetSDTVOnLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceDetailsOnLatLong(ctx context.Context, in *GetServiceDetailsOnLatLongRequest, opts ...grpc.CallOption) (*GetServiceDetailsOnLatLongResponse, error) {
	out := new(GetServiceDetailsOnLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceDetailsOnLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServicesOnServiceNameAndServiceType(ctx context.Context, in *GetServicesOnServiceNameAndServiceTypeRequest, opts ...grpc.CallOption) (*GetServicesOnServiceNameAndServiceTypeResponse, error) {
	out := new(GetServicesOnServiceNameAndServiceTypeResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServicesOnServiceNameAndServiceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceProviderOnMobileNumber(ctx context.Context, in *GetServiceProviderOnMobileNumberRequest, opts ...grpc.CallOption) (*GetServiceProviderOnMobileNumberResponse, error) {
	out := new(GetServiceProviderOnMobileNumberResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProviderOnMobileNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceLocationOnRegionName(ctx context.Context, in *GetServiceLocationOnRegionNameRequest, opts ...grpc.CallOption) (*GetServiceLocationOnRegionNameResponse, error) {
	out := new(GetServiceLocationOnRegionNameResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceLocationOnRegionName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceConfigOnCondition(ctx context.Context, in *GetServiceConfigOnConditionRequest, opts ...grpc.CallOption) (*GetServiceConfigOnConditionResponse, error) {
	out := new(GetServiceConfigOnConditionResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfigOnCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceProviderOnServiceType(ctx context.Context, in *GetServiceProviderOnServiceTypeRequest, opts ...grpc.CallOption) (*GetServiceProviderOnServiceTypeResponse, error) {
	out := new(GetServiceProviderOnServiceTypeResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProviderOnServiceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetLocationOnServiceProviderId(ctx context.Context, in *GetLocationOnServiceProviderIdRequest, opts ...grpc.CallOption) (*GetLocationOnServiceProviderIdResponse, error) {
	out := new(GetLocationOnServiceProviderIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetLocationOnServiceProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error) {
	out := new(GetServiceConfigResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) ExecuteGetServiceConfigOnRegionName(ctx context.Context, in *GetServiceConfigOnRegionNameRequest, opts ...grpc.CallOption) (*GetServiceConfigOnRegionNameResponse, error) {
	out := new(GetServiceConfigOnRegionNameResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfigOnRegionName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderManagementServiceClient) Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error) {
	out := new(MultiResponses)
	err := c.cc.Invoke(ctx, "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderManagementServiceServer is the server API for ServiceProviderManagementService service.
type ServiceProviderManagementServiceServer interface {
	ExecuteAddServiceProvider(context.Context, *AddServiceProviderRequest) (*AddServiceProviderResponse, error)
	ExecuteAddServiceProviderBulk(context.Context, *BulkAddServiceProviderRequest) (*BulkAddServiceProviderResponse, error)
	ExecuteAddServiceLocation(context.Context, *AddServiceLocationRequest) (*AddServiceLocationResponse, error)
	ExecuteAddServiceLocationBulk(context.Context, *BulkAddServiceLocationRequest) (*BulkAddServiceLocationResponse, error)
	ExecuteAddServices(context.Context, *AddServicesRequest) (*AddServicesResponse, error)
	ExecuteAddServicesBulk(context.Context, *BulkAddServicesRequest) (*BulkAddServicesResponse, error)
	ExecuteAddServiceProviderMapping(context.Context, *AddServiceProviderMappingRequest) (*AddServiceProviderMappingResponse, error)
	ExecuteAddServiceProviderMappingBulk(context.Context, *BulkAddServiceProviderMappingRequest) (*BulkAddServiceProviderMappingResponse, error)
	ExecuteAddServiceConfig(context.Context, *AddServiceConfigRequest) (*AddServiceConfigResponse, error)
	ExecuteAddServiceConfigBulk(context.Context, *BulkAddServiceConfigRequest) (*BulkAddServiceConfigResponse, error)
	ExecuteGetServiceProvider(context.Context, *GetServiceProviderRequest) (*GetServiceProviderResponse, error)
	ExecuteAddServiceProviderFromExcel(context.Context, *AddServiceProviderFromExcelRequest) (*AddServiceProviderFromExcelResponse, error)
	ExecuteGetSDTVOnLatLong(context.Context, *GetSDTVOnLatLongRequest) (*GetSDTVOnLatLongResponse, error)
	ExecuteGetServiceDetailsOnLatLong(context.Context, *GetServiceDetailsOnLatLongRequest) (*GetServiceDetailsOnLatLongResponse, error)
	ExecuteGetServicesOnServiceNameAndServiceType(context.Context, *GetServicesOnServiceNameAndServiceTypeRequest) (*GetServicesOnServiceNameAndServiceTypeResponse, error)
	ExecuteGetServiceProviderOnMobileNumber(context.Context, *GetServiceProviderOnMobileNumberRequest) (*GetServiceProviderOnMobileNumberResponse, error)
	ExecuteGetServiceLocationOnRegionName(context.Context, *GetServiceLocationOnRegionNameRequest) (*GetServiceLocationOnRegionNameResponse, error)
	ExecuteGetServiceConfigOnCondition(context.Context, *GetServiceConfigOnConditionRequest) (*GetServiceConfigOnConditionResponse, error)
	ExecuteGetServiceProviderOnServiceType(context.Context, *GetServiceProviderOnServiceTypeRequest) (*GetServiceProviderOnServiceTypeResponse, error)
	ExecuteGetLocationOnServiceProviderId(context.Context, *GetLocationOnServiceProviderIdRequest) (*GetLocationOnServiceProviderIdResponse, error)
	ExecuteGetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error)
	ExecuteGetServiceConfigOnRegionName(context.Context, *GetServiceConfigOnRegionNameRequest) (*GetServiceConfigOnRegionNameResponse, error)
	Execute(context.Context, *MultiRequests) (*MultiResponses, error)
}

// UnimplementedServiceProviderManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceProviderManagementServiceServer struct {
}

func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceProvider(context.Context, *AddServiceProviderRequest) (*AddServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceProvider not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceProviderBulk(context.Context, *BulkAddServiceProviderRequest) (*BulkAddServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceProviderBulk not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceLocation(context.Context, *AddServiceLocationRequest) (*AddServiceLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceLocation not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceLocationBulk(context.Context, *BulkAddServiceLocationRequest) (*BulkAddServiceLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceLocationBulk not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServices(context.Context, *AddServicesRequest) (*AddServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServices not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServicesBulk(context.Context, *BulkAddServicesRequest) (*BulkAddServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServicesBulk not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceProviderMapping(context.Context, *AddServiceProviderMappingRequest) (*AddServiceProviderMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceProviderMapping not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceProviderMappingBulk(context.Context, *BulkAddServiceProviderMappingRequest) (*BulkAddServiceProviderMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceProviderMappingBulk not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceConfig(context.Context, *AddServiceConfigRequest) (*AddServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceConfig not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceConfigBulk(context.Context, *BulkAddServiceConfigRequest) (*BulkAddServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceConfigBulk not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceProvider(context.Context, *GetServiceProviderRequest) (*GetServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceProvider not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteAddServiceProviderFromExcel(context.Context, *AddServiceProviderFromExcelRequest) (*AddServiceProviderFromExcelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddServiceProviderFromExcel not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetSDTVOnLatLong(context.Context, *GetSDTVOnLatLongRequest) (*GetSDTVOnLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetSDTVOnLatLong not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceDetailsOnLatLong(context.Context, *GetServiceDetailsOnLatLongRequest) (*GetServiceDetailsOnLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceDetailsOnLatLong not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServicesOnServiceNameAndServiceType(context.Context, *GetServicesOnServiceNameAndServiceTypeRequest) (*GetServicesOnServiceNameAndServiceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServicesOnServiceNameAndServiceType not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceProviderOnMobileNumber(context.Context, *GetServiceProviderOnMobileNumberRequest) (*GetServiceProviderOnMobileNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceProviderOnMobileNumber not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceLocationOnRegionName(context.Context, *GetServiceLocationOnRegionNameRequest) (*GetServiceLocationOnRegionNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceLocationOnRegionName not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceConfigOnCondition(context.Context, *GetServiceConfigOnConditionRequest) (*GetServiceConfigOnConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceConfigOnCondition not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceProviderOnServiceType(context.Context, *GetServiceProviderOnServiceTypeRequest) (*GetServiceProviderOnServiceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceProviderOnServiceType not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetLocationOnServiceProviderId(context.Context, *GetLocationOnServiceProviderIdRequest) (*GetLocationOnServiceProviderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetLocationOnServiceProviderId not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceConfig not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) ExecuteGetServiceConfigOnRegionName(context.Context, *GetServiceConfigOnRegionNameRequest) (*GetServiceConfigOnRegionNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetServiceConfigOnRegionName not implemented")
}
func (*UnimplementedServiceProviderManagementServiceServer) Execute(context.Context, *MultiRequests) (*MultiResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterServiceProviderManagementServiceServer(s *grpc.Server, srv ServiceProviderManagementServiceServer) {
	s.RegisterService(&_ServiceProviderManagementService_serviceDesc, srv)
}

func _ServiceProviderManagementService_ExecuteAddServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProvider(ctx, req.(*AddServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceProviderBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderBulk(ctx, req.(*BulkAddServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceLocation(ctx, req.(*AddServiceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceLocationBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddServiceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceLocationBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceLocationBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceLocationBulk(ctx, req.(*BulkAddServiceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServices(ctx, req.(*AddServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServicesBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServicesBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServicesBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServicesBulk(ctx, req.(*BulkAddServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceProviderMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceProviderMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderMapping(ctx, req.(*AddServiceProviderMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceProviderMappingBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddServiceProviderMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderMappingBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderMappingBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderMappingBulk(ctx, req.(*BulkAddServiceProviderMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceConfig(ctx, req.(*AddServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceConfigBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceConfigBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceConfigBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceConfigBulk(ctx, req.(*BulkAddServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProvider(ctx, req.(*GetServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteAddServiceProviderFromExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceProviderFromExcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderFromExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteAddServiceProviderFromExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteAddServiceProviderFromExcel(ctx, req.(*AddServiceProviderFromExcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetSDTVOnLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSDTVOnLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetSDTVOnLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetSDTVOnLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetSDTVOnLatLong(ctx, req.(*GetSDTVOnLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceDetailsOnLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceDetailsOnLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceDetailsOnLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceDetailsOnLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceDetailsOnLatLong(ctx, req.(*GetServiceDetailsOnLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServicesOnServiceNameAndServiceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesOnServiceNameAndServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServicesOnServiceNameAndServiceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServicesOnServiceNameAndServiceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServicesOnServiceNameAndServiceType(ctx, req.(*GetServicesOnServiceNameAndServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceProviderOnMobileNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProviderOnMobileNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProviderOnMobileNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProviderOnMobileNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProviderOnMobileNumber(ctx, req.(*GetServiceProviderOnMobileNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceLocationOnRegionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceLocationOnRegionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceLocationOnRegionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceLocationOnRegionName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceLocationOnRegionName(ctx, req.(*GetServiceLocationOnRegionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceConfigOnCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfigOnConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfigOnCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfigOnCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfigOnCondition(ctx, req.(*GetServiceConfigOnConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceProviderOnServiceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProviderOnServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProviderOnServiceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceProviderOnServiceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceProviderOnServiceType(ctx, req.(*GetServiceProviderOnServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetLocationOnServiceProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationOnServiceProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetLocationOnServiceProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetLocationOnServiceProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetLocationOnServiceProviderId(ctx, req.(*GetLocationOnServiceProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfig(ctx, req.(*GetServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_ExecuteGetServiceConfigOnRegionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfigOnRegionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfigOnRegionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/ExecuteGetServiceConfigOnRegionName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).ExecuteGetServiceConfigOnRegionName(ctx, req.(*GetServiceConfigOnRegionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderManagementService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderManagementServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderManagementServiceServer).Execute(ctx, req.(*MultiRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceProviderManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.serviceProvider.service.proto.ServiceProviderManagementService",
	HandlerType: (*ServiceProviderManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteAddServiceProvider",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceProvider_Handler,
		},
		{
			MethodName: "ExecuteAddServiceProviderBulk",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceProviderBulk_Handler,
		},
		{
			MethodName: "ExecuteAddServiceLocation",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceLocation_Handler,
		},
		{
			MethodName: "ExecuteAddServiceLocationBulk",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceLocationBulk_Handler,
		},
		{
			MethodName: "ExecuteAddServices",
			Handler:    _ServiceProviderManagementService_ExecuteAddServices_Handler,
		},
		{
			MethodName: "ExecuteAddServicesBulk",
			Handler:    _ServiceProviderManagementService_ExecuteAddServicesBulk_Handler,
		},
		{
			MethodName: "ExecuteAddServiceProviderMapping",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceProviderMapping_Handler,
		},
		{
			MethodName: "ExecuteAddServiceProviderMappingBulk",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceProviderMappingBulk_Handler,
		},
		{
			MethodName: "ExecuteAddServiceConfig",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceConfig_Handler,
		},
		{
			MethodName: "ExecuteAddServiceConfigBulk",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceConfigBulk_Handler,
		},
		{
			MethodName: "ExecuteGetServiceProvider",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceProvider_Handler,
		},
		{
			MethodName: "ExecuteAddServiceProviderFromExcel",
			Handler:    _ServiceProviderManagementService_ExecuteAddServiceProviderFromExcel_Handler,
		},
		{
			MethodName: "ExecuteGetSDTVOnLatLong",
			Handler:    _ServiceProviderManagementService_ExecuteGetSDTVOnLatLong_Handler,
		},
		{
			MethodName: "ExecuteGetServiceDetailsOnLatLong",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceDetailsOnLatLong_Handler,
		},
		{
			MethodName: "ExecuteGetServicesOnServiceNameAndServiceType",
			Handler:    _ServiceProviderManagementService_ExecuteGetServicesOnServiceNameAndServiceType_Handler,
		},
		{
			MethodName: "ExecuteGetServiceProviderOnMobileNumber",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceProviderOnMobileNumber_Handler,
		},
		{
			MethodName: "ExecuteGetServiceLocationOnRegionName",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceLocationOnRegionName_Handler,
		},
		{
			MethodName: "ExecuteGetServiceConfigOnCondition",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceConfigOnCondition_Handler,
		},
		{
			MethodName: "ExecuteGetServiceProviderOnServiceType",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceProviderOnServiceType_Handler,
		},
		{
			MethodName: "ExecuteGetLocationOnServiceProviderId",
			Handler:    _ServiceProviderManagementService_ExecuteGetLocationOnServiceProviderId_Handler,
		},
		{
			MethodName: "ExecuteGetServiceConfig",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceConfig_Handler,
		},
		{
			MethodName: "ExecuteGetServiceConfigOnRegionName",
			Handler:    _ServiceProviderManagementService_ExecuteGetServiceConfigOnRegionName_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _ServiceProviderManagementService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceProviderManagementService/service_provider_management_service.proto",
}
