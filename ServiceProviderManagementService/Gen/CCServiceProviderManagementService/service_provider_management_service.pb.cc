// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceProviderManagementService/service_provider_management_service.proto

#include "ServiceProviderManagementService/service_provider_management_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace serviceProvider {
namespace service {
namespace proto {
class RequestHeadersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeaders> _instance;
} _RequestHeaders_default_instance_;
class AttribsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribs> _instance;
} _Attribs_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class AddServiceProviderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderRequest> _instance;
} _AddServiceProviderRequest_default_instance_;
class BulkAddServiceProviderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceProviderRequest> _instance;
} _BulkAddServiceProviderRequest_default_instance_;
class AddServiceProviderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderResponse> _instance;
} _AddServiceProviderResponse_default_instance_;
class BulkAddServiceProviderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceProviderResponse> _instance;
} _BulkAddServiceProviderResponse_default_instance_;
class AddServiceLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceLocationRequest> _instance;
} _AddServiceLocationRequest_default_instance_;
class BulkAddServiceLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceLocationRequest> _instance;
} _BulkAddServiceLocationRequest_default_instance_;
class AddServiceLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceLocationResponse> _instance;
} _AddServiceLocationResponse_default_instance_;
class BulkAddServiceLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceLocationResponse> _instance;
} _BulkAddServiceLocationResponse_default_instance_;
class AddServicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServicesRequest> _instance;
} _AddServicesRequest_default_instance_;
class BulkAddServicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServicesRequest> _instance;
} _BulkAddServicesRequest_default_instance_;
class AddServicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServicesResponse> _instance;
} _AddServicesResponse_default_instance_;
class BulkAddServicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServicesResponse> _instance;
} _BulkAddServicesResponse_default_instance_;
class AddServiceProviderMappingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderMappingRequest> _instance;
} _AddServiceProviderMappingRequest_default_instance_;
class BulkAddServiceProviderMappingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceProviderMappingRequest> _instance;
} _BulkAddServiceProviderMappingRequest_default_instance_;
class AddServiceProviderMappingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderMappingResponse> _instance;
} _AddServiceProviderMappingResponse_default_instance_;
class BulkAddServiceProviderMappingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceProviderMappingResponse> _instance;
} _BulkAddServiceProviderMappingResponse_default_instance_;
class AddServiceConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceConfigRequest> _instance;
} _AddServiceConfigRequest_default_instance_;
class BulkAddServiceConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceConfigRequest> _instance;
} _BulkAddServiceConfigRequest_default_instance_;
class AddServiceConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceConfigResponse> _instance;
} _AddServiceConfigResponse_default_instance_;
class BulkAddServiceConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddServiceConfigResponse> _instance;
} _BulkAddServiceConfigResponse_default_instance_;
class GetServiceProviderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderRequest> _instance;
} _GetServiceProviderRequest_default_instance_;
class GetServiceProviderResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderResponseRecord> _instance;
} _GetServiceProviderResponseRecord_default_instance_;
class GetServiceProviderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderResponse> _instance;
} _GetServiceProviderResponse_default_instance_;
class ServiceProviderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceProviderInfo> _instance;
} _ServiceProviderInfo_default_instance_;
class AddServiceProviderFromExcelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderFromExcelRequest> _instance;
} _AddServiceProviderFromExcelRequest_default_instance_;
class AddServiceProviderFromExcelResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderFromExcelResponseRecord> _instance;
} _AddServiceProviderFromExcelResponseRecord_default_instance_;
class AddServiceProviderFromExcelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddServiceProviderFromExcelResponse> _instance;
} _AddServiceProviderFromExcelResponse_default_instance_;
class GetSDTVOnLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSDTVOnLatLongRequest> _instance;
} _GetSDTVOnLatLongRequest_default_instance_;
class GetSDTVOnLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSDTVOnLatLongResponseRecord> _instance;
} _GetSDTVOnLatLongResponseRecord_default_instance_;
class GetSDTVOnLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSDTVOnLatLongResponse> _instance;
} _GetSDTVOnLatLongResponse_default_instance_;
class GetServiceDetailsOnLatLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceDetailsOnLatLongRequest> _instance;
} _GetServiceDetailsOnLatLongRequest_default_instance_;
class GetServiceDetailsOnLatLongResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceDetailsOnLatLongResponseRecord> _instance;
} _GetServiceDetailsOnLatLongResponseRecord_default_instance_;
class GetServiceDetailsOnLatLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceDetailsOnLatLongResponse> _instance;
} _GetServiceDetailsOnLatLongResponse_default_instance_;
class ServiceDetailsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDetailsResponse> _instance;
} _ServiceDetailsResponse_default_instance_;
class GetServicesOnServiceNameAndServiceTypeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServicesOnServiceNameAndServiceTypeRequest> _instance;
} _GetServicesOnServiceNameAndServiceTypeRequest_default_instance_;
class GetServicesOnServiceNameAndServiceTypeResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServicesOnServiceNameAndServiceTypeResponseRecord> _instance;
} _GetServicesOnServiceNameAndServiceTypeResponseRecord_default_instance_;
class GetServicesOnServiceNameAndServiceTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServicesOnServiceNameAndServiceTypeResponse> _instance;
} _GetServicesOnServiceNameAndServiceTypeResponse_default_instance_;
class GetServiceProviderOnMobileNumberRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnMobileNumberRequest> _instance;
} _GetServiceProviderOnMobileNumberRequest_default_instance_;
class GetServiceProviderOnMobileNumberResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnMobileNumberResponseRecord> _instance;
} _GetServiceProviderOnMobileNumberResponseRecord_default_instance_;
class GetServiceProviderOnMobileNumberResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnMobileNumberResponse> _instance;
} _GetServiceProviderOnMobileNumberResponse_default_instance_;
class GetServiceLocationOnRegionNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceLocationOnRegionNameRequest> _instance;
} _GetServiceLocationOnRegionNameRequest_default_instance_;
class GetServiceLocationOnRegionNameResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceLocationOnRegionNameResponseRecord> _instance;
} _GetServiceLocationOnRegionNameResponseRecord_default_instance_;
class GetServiceLocationOnRegionNameResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceLocationOnRegionNameResponse> _instance;
} _GetServiceLocationOnRegionNameResponse_default_instance_;
class GeographyDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeographyDetail> _instance;
} _GeographyDetail_default_instance_;
class GetServiceConfigOnConditionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnConditionRequest> _instance;
} _GetServiceConfigOnConditionRequest_default_instance_;
class GetServiceConfigOnConditionResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnConditionResponseRecord> _instance;
} _GetServiceConfigOnConditionResponseRecord_default_instance_;
class GetServiceConfigOnConditionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnConditionResponse> _instance;
} _GetServiceConfigOnConditionResponse_default_instance_;
class GetServiceProviderOnServiceTypeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnServiceTypeRequest> _instance;
} _GetServiceProviderOnServiceTypeRequest_default_instance_;
class GetServiceProviderOnServiceTypeResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnServiceTypeResponseRecord> _instance;
} _GetServiceProviderOnServiceTypeResponseRecord_default_instance_;
class GetServiceProviderOnServiceTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceProviderOnServiceTypeResponse> _instance;
} _GetServiceProviderOnServiceTypeResponse_default_instance_;
class GetLocationOnServiceProviderIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationOnServiceProviderIdRequest> _instance;
} _GetLocationOnServiceProviderIdRequest_default_instance_;
class GetLocationOnServiceProviderIdResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationOnServiceProviderIdResponseRecord> _instance;
} _GetLocationOnServiceProviderIdResponseRecord_default_instance_;
class GetLocationOnServiceProviderIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocationOnServiceProviderIdResponse> _instance;
} _GetLocationOnServiceProviderIdResponse_default_instance_;
class GetServiceConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigRequest> _instance;
} _GetServiceConfigRequest_default_instance_;
class GetServiceConfigResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigResponseRecord> _instance;
} _GetServiceConfigResponseRecord_default_instance_;
class GetServiceConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigResponse> _instance;
} _GetServiceConfigResponse_default_instance_;
class GetServiceConfigOnRegionNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnRegionNameRequest> _instance;
} _GetServiceConfigOnRegionNameRequest_default_instance_;
class GetServiceConfigOnRegionNameResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnRegionNameResponseRecord> _instance;
} _GetServiceConfigOnRegionNameResponseRecord_default_instance_;
class GetServiceConfigOnRegionNameResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceConfigOnRegionNameResponse> _instance;
} _GetServiceConfigOnRegionNameResponse_default_instance_;
class MultiRequestsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRequests> _instance;
} _MultiRequests_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class MultiResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiResponses> _instance;
} _MultiResponses_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace proto
}  // namespace service
}  // namespace serviceProvider
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceConfigRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceConfigResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderFromExcelResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddServiceProviderFromExcelResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddServiceProviderFromExcelResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServiceProviderResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServicesRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_AddServicesResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::AddServicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_Attribs_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::Attribs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServicesRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_BulkAddServicesResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GeographyDetail_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GeographyDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetSDTVOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSDTVOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSDTVOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceConfigResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceConfigResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceConfigResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceConfigResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceDetailsOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceDetailsOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceDetailsOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceLocationOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceLocationOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceLocationOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServiceProviderResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServiceProviderResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceProviderResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceProviderResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeRequest_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_MultiRequests_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::MultiRequests();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_MultiResponses_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::MultiResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_Request_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::RequestHeaders();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_Response_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 23, 0, InitDefaultsscc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {
      &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
      &scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_ServiceDetailsResponse_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_ServiceProviderInfo_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::serviceProvider::service::proto::_Status_default_instance_;
    new (ptr) ::farm::nurture::serviceProvider::service::proto::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[66];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, prefferedusername_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, clientid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, tracingid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, tracedetails_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, language_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, accuracy_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, country_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, experimentid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, authtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::RequestHeaders, apptoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Attribs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Attribs, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Attribs, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Status, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Status, error_messages_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Status, internal_error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, whatsappnumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest, pincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, serviceproviderid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, geographyid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, geohash_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, servicetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, imageurl_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesRequest, translationkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServicesResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, serviceid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, serviceproviderid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, machinecount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest, costperacre_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, servicetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, cropid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, regionname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, section_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, servicerank_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, validfrom_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest, validtill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, page_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, cropid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest, servicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse, serviceproviderinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, serviceprovidername_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, serviceprovidercontactdetails_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, serviceprovideraddress_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, costperacre_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, distance_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo, serviceproviderwhatsappnumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest, csv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse, addserviceproviderrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, regionid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, villageid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, tehsilid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, districtid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, zoneid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, villagename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, tehsilname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, districtname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, regionname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, zonename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, villagecode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, tehsilcode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, districtcode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, regioncode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse, zonecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse, servicedetailsresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse, servicetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse, imageurl_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse, section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest, servicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord, servicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest, regionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse, geographydetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, geographyname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, geographyuid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, geographylongitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, geographylatitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GeographyDetail, geographydetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest, regionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, servicetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, cropid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, regionname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, section_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord, servicerank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest, servicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, whatsappnumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, pincode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, machinecount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord, costperacre_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest, serviceproviderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, serviceproviderid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse, servicedetailsresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest, regionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, servicetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, cropid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, regionname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, section_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord, servicerank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiRequests, ontxn_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiRequests, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Request, index_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Request, ARequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiResponses, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::MultiResponses, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Response, index_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Response, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::serviceProvider::service::proto::Response, AResponse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::serviceProvider::service::proto::RequestHeaders)},
  { 18, -1, sizeof(::farm::nurture::serviceProvider::service::proto::Attribs)},
  { 25, -1, sizeof(::farm::nurture::serviceProvider::service::proto::Status)},
  { 33, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest)},
  { 43, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest)},
  { 50, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse)},
  { 59, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse)},
  { 67, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest)},
  { 80, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest)},
  { 87, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse)},
  { 96, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse)},
  { 104, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServicesRequest)},
  { 114, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest)},
  { 121, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServicesResponse)},
  { 130, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse)},
  { 138, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest)},
  { 148, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest)},
  { 155, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse)},
  { 164, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse)},
  { 172, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest)},
  { 185, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest)},
  { 192, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse)},
  { 201, -1, sizeof(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse)},
  { 209, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest)},
  { 222, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord)},
  { 227, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse)},
  { 236, -1, sizeof(::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo)},
  { 247, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest)},
  { 255, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord)},
  { 260, -1, sizeof(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse)},
  { 269, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest)},
  { 278, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord)},
  { 283, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse)},
  { 306, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest)},
  { 315, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord)},
  { 320, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse)},
  { 329, -1, sizeof(::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse)},
  { 338, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest)},
  { 347, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord)},
  { 355, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse)},
  { 364, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest)},
  { 372, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord)},
  { 379, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse)},
  { 388, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest)},
  { 396, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord)},
  { 401, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse)},
  { 410, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GeographyDetail)},
  { 420, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest)},
  { 428, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord)},
  { 438, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse)},
  { 447, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest)},
  { 455, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord)},
  { 467, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse)},
  { 476, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest)},
  { 484, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord)},
  { 494, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse)},
  { 503, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest)},
  { 511, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord)},
  { 516, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse)},
  { 525, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest)},
  { 533, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord)},
  { 543, -1, sizeof(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse)},
  { 552, -1, sizeof(::farm::nurture::serviceProvider::service::proto::MultiRequests)},
  { 559, -1, sizeof(::farm::nurture::serviceProvider::service::proto::Request)},
  { 588, -1, sizeof(::farm::nurture::serviceProvider::service::proto::MultiResponses)},
  { 595, -1, sizeof(::farm::nurture::serviceProvider::service::proto::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_Attribs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_ServiceProviderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_ServiceDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GeographyDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_MultiRequests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_MultiResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::serviceProvider::service::proto::_Response_default_instance_),
};

const char descriptor_table_protodef_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nJServiceProviderManagementService/servi"
  "ce_provider_management_service.proto\022*fa"
  "rm.nurture.serviceProvider.service.proto"
  "\"\223\004\n\016RequestHeaders\022\031\n\021prefferedUserName"
  "\030\001 \001(\t\022\020\n\010clientId\030\002 \001(\t\022\021\n\ttracingId\030\003 "
  "\001(\t\022\024\n\014traceDetails\030\004 \001(\010\022U\n\010language\030\005 "
  "\001(\0162C.farm.nurture.serviceProvider.servi"
  "ce.proto.RequestHeaders.LANGUAGE\022\020\n\010lati"
  "tude\030\006 \001(\002\022\021\n\tlongitude\030\007 \001(\002\022\020\n\010accurac"
  "y\030\010 \001(\002\022S\n\007country\030\t \001(\0162B.farm.nurture."
  "serviceProvider.service.proto.RequestHea"
  "ders.COUNTRY\022\024\n\014experimentId\030\n \001(\t\022D\n\007at"
  "tribs\030\013 \003(\01323.farm.nurture.serviceProvid"
  "er.service.proto.Attribs\022\021\n\tauthToken\030\014 "
  "\001(\t\022\020\n\010appToken\030\r \001(\t\"\"\n\010LANGUAGE\022\013\n\007Eng"
  "lish\020\000\022\t\n\005Hindi\020\002\"#\n\007COUNTRY\022\t\n\005India\020\000\022"
  "\r\n\tAustralia\020\002\"%\n\007Attribs\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t\"\205\001\n\006Status\022F\n\006status\030\001 \001(\016"
  "26.farm.nurture.serviceProvider.service."
  "proto.StatusCode\022\026\n\016error_messages\030\002 \003(\t"
  "\022\033\n\023internal_error_code\030\003 \001(\005\"\274\001\n\031AddSer"
  "viceProviderRequest\022R\n\016requestHeaders\030\001 "
  "\001(\0132:.farm.nurture.serviceProvider.servi"
  "ce.proto.RequestHeaders\022\014\n\004name\030\002 \001(\t\022\024\n"
  "\014mobileNumber\030\003 \001(\t\022\026\n\016whatsappNumber\030\004 "
  "\001(\t\022\017\n\007pincode\030\005 \001(\t\"\314\001\n\035BulkAddServiceP"
  "roviderRequest\022R\n\016requestHeaders\030\001 \001(\0132:"
  ".farm.nurture.serviceProvider.service.pr"
  "oto.RequestHeaders\022W\n\010requests\030\002 \003(\0132E.f"
  "arm.nurture.serviceProvider.service.prot"
  "o.AddServiceProviderRequest\"\307\001\n\032AddServi"
  "ceProviderResponse\022B\n\006status\030\001 \001(\01322.far"
  "m.nurture.serviceProvider.service.proto."
  "Status\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022"
  "D\n\007attribs\030\004 \003(\01323.farm.nurture.serviceP"
  "rovider.service.proto.Attribs\"\316\001\n\036BulkAd"
  "dServiceProviderResponse\022B\n\006status\030\001 \001(\013"
  "22.farm.nurture.serviceProvider.service."
  "proto.Status\022\r\n\005count\030\002 \001(\005\022Y\n\tresponses"
  "\030\003 \003(\0132F.farm.nurture.serviceProvider.se"
  "rvice.proto.AddServiceProviderResponse\"\366"
  "\001\n\031AddServiceLocationRequest\022R\n\016requestH"
  "eaders\030\001 \001(\0132:.farm.nurture.serviceProvi"
  "der.service.proto.RequestHeaders\022\031\n\021serv"
  "iceProviderId\030\002 \001(\003\022\023\n\013geographyId\030\003 \001(\t"
  "\022\020\n\010district\030\004 \001(\t\022\r\n\005state\030\005 \001(\t\022\017\n\007geo"
  "Hash\030\006 \001(\t\022\020\n\010latitude\030\007 \001(\001\022\021\n\tlongitud"
  "e\030\010 \001(\001\"\314\001\n\035BulkAddServiceLocationReques"
  "t\022R\n\016requestHeaders\030\001 \001(\0132:.farm.nurture"
  ".serviceProvider.service.proto.RequestHe"
  "aders\022W\n\010requests\030\002 \003(\0132E.farm.nurture.s"
  "erviceProvider.service.proto.AddServiceL"
  "ocationRequest\"\307\001\n\032AddServiceLocationRes"
  "ponse\022B\n\006status\030\001 \001(\01322.farm.nurture.ser"
  "viceProvider.service.proto.Status\022\r\n\005cou"
  "nt\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022D\n\007attribs\030\004 "
  "\003(\01323.farm.nurture.serviceProvider.servi"
  "ce.proto.Attribs\"\316\001\n\036BulkAddServiceLocat"
  "ionResponse\022B\n\006status\030\001 \001(\01322.farm.nurtu"
  "re.serviceProvider.service.proto.Status\022"
  "\r\n\005count\030\002 \001(\005\022Y\n\tresponses\030\003 \003(\0132F.farm"
  ".nurture.serviceProvider.service.proto.A"
  "ddServiceLocationResponse\"\274\001\n\022AddService"
  "sRequest\022R\n\016requestHeaders\030\001 \001(\0132:.farm."
  "nurture.serviceProvider.service.proto.Re"
  "questHeaders\022\023\n\013serviceName\030\002 \001(\t\022\023\n\013ser"
  "viceType\030\003 \001(\t\022\020\n\010imageUrl\030\004 \001(\t\022\026\n\016tran"
  "slationKey\030\005 \001(\t\"\276\001\n\026BulkAddServicesRequ"
  "est\022R\n\016requestHeaders\030\001 \001(\0132:.farm.nurtu"
  "re.serviceProvider.service.proto.Request"
  "Headers\022P\n\010requests\030\002 \003(\0132>.farm.nurture"
  ".serviceProvider.service.proto.AddServic"
  "esRequest\"\300\001\n\023AddServicesResponse\022B\n\006sta"
  "tus\030\001 \001(\01322.farm.nurture.serviceProvider"
  ".service.proto.Status\022\r\n\005count\030\002 \001(\005\022\020\n\010"
  "recordId\030\003 \001(\t\022D\n\007attribs\030\004 \003(\01323.farm.n"
  "urture.serviceProvider.service.proto.Att"
  "ribs\"\300\001\n\027BulkAddServicesResponse\022B\n\006stat"
  "us\030\001 \001(\01322.farm.nurture.serviceProvider."
  "service.proto.Status\022\r\n\005count\030\002 \001(\005\022R\n\tr"
  "esponses\030\003 \003(\0132\?.farm.nurture.servicePro"
  "vider.service.proto.AddServicesResponse\""
  "\317\001\n AddServiceProviderMappingRequest\022R\n\016"
  "requestHeaders\030\001 \001(\0132:.farm.nurture.serv"
  "iceProvider.service.proto.RequestHeaders"
  "\022\021\n\tserviceId\030\002 \001(\003\022\031\n\021serviceProviderId"
  "\030\003 \001(\003\022\024\n\014machineCount\030\004 \001(\003\022\023\n\013costPerA"
  "cre\030\005 \001(\t\"\332\001\n$BulkAddServiceProviderMapp"
  "ingRequest\022R\n\016requestHeaders\030\001 \001(\0132:.far"
  "m.nurture.serviceProvider.service.proto."
  "RequestHeaders\022^\n\010requests\030\002 \003(\0132L.farm."
  "nurture.serviceProvider.service.proto.Ad"
  "dServiceProviderMappingRequest\"\316\001\n!AddSe"
  "rviceProviderMappingResponse\022B\n\006status\030\001"
  " \001(\01322.farm.nurture.serviceProvider.serv"
  "ice.proto.Status\022\r\n\005count\030\002 \001(\005\022\020\n\010recor"
  "dId\030\003 \001(\t\022D\n\007attribs\030\004 \003(\01323.farm.nurtur"
  "e.serviceProvider.service.proto.Attribs\""
  "\334\001\n%BulkAddServiceProviderMappingRespons"
  "e\022B\n\006status\030\001 \001(\01322.farm.nurture.service"
  "Provider.service.proto.Status\022\r\n\005count\030\002"
  " \001(\005\022`\n\tresponses\030\003 \003(\0132M.farm.nurture.s"
  "erviceProvider.service.proto.AddServiceP"
  "roviderMappingResponse\"\362\001\n\027AddServiceCon"
  "figRequest\022R\n\016requestHeaders\030\001 \001(\0132:.far"
  "m.nurture.serviceProvider.service.proto."
  "RequestHeaders\022\023\n\013serviceType\030\002 \001(\t\022\016\n\006c"
  "ropId\030\003 \001(\003\022\022\n\nregionName\030\004 \001(\t\022\017\n\007secti"
  "on\030\005 \001(\003\022\023\n\013serviceRank\030\006 \001(\003\022\021\n\tvalidFr"
  "om\030\007 \001(\003\022\021\n\tvalidTill\030\010 \001(\003\"\310\001\n\033BulkAddS"
  "erviceConfigRequest\022R\n\016requestHeaders\030\001 "
  "\001(\0132:.farm.nurture.serviceProvider.servi"
  "ce.proto.RequestHeaders\022U\n\010requests\030\002 \003("
  "\0132C.farm.nurture.serviceProvider.service"
  ".proto.AddServiceConfigRequest\"\305\001\n\030AddSe"
  "rviceConfigResponse\022B\n\006status\030\001 \001(\01322.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".Status\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t"
  "\022D\n\007attribs\030\004 \003(\01323.farm.nurture.service"
  "Provider.service.proto.Attribs\"\312\001\n\034BulkA"
  "ddServiceConfigResponse\022B\n\006status\030\001 \001(\0132"
  "2.farm.nurture.serviceProvider.service.p"
  "roto.Status\022\r\n\005count\030\002 \001(\005\022W\n\tresponses\030"
  "\003 \003(\0132D.farm.nurture.serviceProvider.ser"
  "vice.proto.AddServiceConfigResponse\"\357\001\n\031"
  "GetServiceProviderRequest\022R\n\016requestHead"
  "ers\030\001 \001(\0132:.farm.nurture.serviceProvider"
  ".service.proto.RequestHeaders\022\026\n\016isStale"
  "Allowed\030\002 \001(\010\022\014\n\004page\030\006 \001(\003\022\016\n\006offset\030\007 "
  "\001(\003\022\016\n\006cropId\030\010 \003(\003\022\020\n\010latitude\030\t \001(\001\022\021\n"
  "\tlongitude\030\n \001(\001\022\023\n\013serviceName\030\013 \001(\t\"\"\n"
  " GetServiceProviderResponseRecord\"\223\002\n\032Ge"
  "tServiceProviderResponse\022B\n\006status\030\001 \001(\013"
  "22.farm.nurture.serviceProvider.service."
  "proto.Status\022\r\n\005count\030\002 \001(\005\022D\n\007attribs\030\003"
  " \003(\01323.farm.nurture.serviceProvider.serv"
  "ice.proto.Attribs\022\\\n\023serviceProviderInfo"
  "\030\005 \003(\0132\?.farm.nurture.serviceProvider.se"
  "rvice.proto.ServiceProviderInfo\"\307\001\n\023Serv"
  "iceProviderInfo\022\033\n\023serviceProviderName\030\001"
  " \001(\t\022%\n\035serviceProviderContactDetails\030\002 "
  "\001(\t\022\036\n\026serviceProviderAddress\030\003 \001(\t\022\023\n\013c"
  "ostPerAcre\030\004 \001(\t\022\020\n\010distance\030\005 \001(\001\022%\n\035se"
  "rviceProviderWhatsappNumber\030\006 \001(\t\"\235\001\n\"Ad"
  "dServiceProviderFromExcelRequest\022R\n\016requ"
  "estHeaders\030\001 \001(\0132:.farm.nurture.serviceP"
  "rovider.service.proto.RequestHeaders\022\026\n\016"
  "isStaleAllowed\030\002 \001(\010\022\013\n\003csv\030\006 \001(\t\"+\n)Add"
  "ServiceProviderFromExcelResponseRecord\"\250"
  "\002\n#AddServiceProviderFromExcelResponse\022B"
  "\n\006status\030\001 \001(\01322.farm.nurture.servicePro"
  "vider.service.proto.Status\022\r\n\005count\030\002 \001("
  "\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture.servic"
  "eProvider.service.proto.Attribs\022h\n\031addSe"
  "rviceProviderRequest\030\005 \003(\0132E.farm.nurtur"
  "e.serviceProvider.service.proto.AddServi"
  "ceProviderRequest\"\252\001\n\027GetSDTVOnLatLongRe"
  "quest\022R\n\016requestHeaders\030\001 \001(\0132:.farm.nur"
  "ture.serviceProvider.service.proto.Reque"
  "stHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\020\n\010lat"
  "itude\030\006 \001(\001\022\021\n\tlongitude\030\007 \001(\001\" \n\036GetSDT"
  "VOnLatLongResponseRecord\"\330\003\n\030GetSDTVOnLa"
  "tLongResponse\022B\n\006status\030\001 \001(\01322.farm.nur"
  "ture.serviceProvider.service.proto.Statu"
  "s\022\r\n\005count\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm"
  ".nurture.serviceProvider.service.proto.A"
  "ttribs\022\020\n\010regionId\030\005 \001(\003\022\021\n\tvillageId\030\006 "
  "\001(\003\022\020\n\010tehsilId\030\007 \001(\003\022\022\n\ndistrictId\030\010 \001("
  "\003\022\016\n\006zoneId\030\t \001(\003\022\023\n\013villageName\030\n \001(\t\022\022"
  "\n\ntehsilName\030\013 \001(\t\022\024\n\014districtName\030\014 \001(\t"
  "\022\022\n\nregionName\030\r \001(\t\022\020\n\010zoneName\030\016 \001(\t\022\023"
  "\n\013villageCode\030\017 \001(\t\022\022\n\ntehsilCode\030\020 \001(\t\022"
  "\024\n\014districtCode\030\021 \001(\t\022\022\n\nregionCode\030\022 \001("
  "\t\022\020\n\010zoneCode\030\023 \001(\t\"\264\001\n!GetServiceDetail"
  "sOnLatLongRequest\022R\n\016requestHeaders\030\001 \001("
  "\0132:.farm.nurture.serviceProvider.service"
  ".proto.RequestHeaders\022\026\n\016isStaleAllowed\030"
  "\002 \001(\010\022\020\n\010latitude\030\006 \001(\001\022\021\n\tlongitude\030\007 \001"
  "(\001\"*\n(GetServiceDetailsOnLatLongResponse"
  "Record\"\241\002\n\"GetServiceDetailsOnLatLongRes"
  "ponse\022B\n\006status\030\001 \001(\01322.farm.nurture.ser"
  "viceProvider.service.proto.Status\022\r\n\005cou"
  "nt\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture"
  ".serviceProvider.service.proto.Attribs\022b"
  "\n\026serviceDetailsResponse\030\005 \003(\0132B.farm.nu"
  "rture.serviceProvider.service.proto.Serv"
  "iceDetailsResponse\"^\n\026ServiceDetailsResp"
  "onse\022\023\n\013serviceType\030\001 \001(\t\022\020\n\010imageUrl\030\002 "
  "\001(\t\022\014\n\004rank\030\003 \001(\003\022\017\n\007section\030\004 \001(\003\"\305\001\n-G"
  "etServicesOnServiceNameAndServiceTypeReq"
  "uest\022R\n\016requestHeaders\030\001 \001(\0132:.farm.nurt"
  "ure.serviceProvider.service.proto.Reques"
  "tHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\023\n\013serv"
  "iceName\030\003 \001(\t\022\023\n\013serviceType\030\004 \001(\t\"l\n4Ge"
  "tServicesOnServiceNameAndServiceTypeResp"
  "onseRecord\022\n\n\002id\030\001 \001(\003\022\023\n\013serviceName\030\002 "
  "\001(\t\022\023\n\013serviceType\030\003 \001(\t\"\274\002\n.GetServices"
  "OnServiceNameAndServiceTypeResponse\022B\n\006s"
  "tatus\030\001 \001(\01322.farm.nurture.serviceProvid"
  "er.service.proto.Status\022\r\n\005count\030\002 \001(\005\022D"
  "\n\007attribs\030\003 \003(\01323.farm.nurture.servicePr"
  "ovider.service.proto.Attribs\022q\n\007records\030"
  "\004 \003(\0132`.farm.nurture.serviceProvider.ser"
  "vice.proto.GetServicesOnServiceNameAndSe"
  "rviceTypeResponseRecord\"\253\001\n\'GetServicePr"
  "oviderOnMobileNumberRequest\022R\n\016requestHe"
  "aders\030\001 \001(\0132:.farm.nurture.serviceProvid"
  "er.service.proto.RequestHeaders\022\026\n\016isSta"
  "leAllowed\030\002 \001(\010\022\024\n\014mobileNumber\030\003 \001(\t\"R\n"
  ".GetServiceProviderOnMobileNumberRespons"
  "eRecord\022\n\n\002id\030\001 \001(\003\022\024\n\014mobileNumber\030\002 \001("
  "\t\"\260\002\n(GetServiceProviderOnMobileNumberRe"
  "sponse\022B\n\006status\030\001 \001(\01322.farm.nurture.se"
  "rviceProvider.service.proto.Status\022\r\n\005co"
  "unt\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nurtur"
  "e.serviceProvider.service.proto.Attribs\022"
  "k\n\007records\030\004 \003(\0132Z.farm.nurture.serviceP"
  "rovider.service.proto.GetServiceProvider"
  "OnMobileNumberResponseRecord\"\247\001\n%GetServ"
  "iceLocationOnRegionNameRequest\022R\n\016reques"
  "tHeaders\030\001 \001(\0132:.farm.nurture.servicePro"
  "vider.service.proto.RequestHeaders\022\026\n\016is"
  "StaleAllowed\030\002 \001(\010\022\022\n\nregionName\030\006 \003(\t\"."
  "\n,GetServiceLocationOnRegionNameResponse"
  "Record\"\227\002\n&GetServiceLocationOnRegionNam"
  "eResponse\022B\n\006status\030\001 \001(\01322.farm.nurture"
  ".serviceProvider.service.proto.Status\022\r\n"
  "\005count\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nur"
  "ture.serviceProvider.service.proto.Attri"
  "bs\022T\n\017geographyDetail\030\005 \003(\0132;.farm.nurtu"
  "re.serviceProvider.service.proto.Geograp"
  "hyDetail\"\313\001\n\017GeographyDetail\022\025\n\rgeograph"
  "yName\030\001 \001(\t\022\024\n\014geographyUid\030\002 \001(\t\022\032\n\022geo"
  "graphyLongitude\030\003 \001(\t\022\031\n\021geographyLatitu"
  "de\030\004 \001(\t\022T\n\017geographyDetail\030\005 \003(\0132;.farm"
  ".nurture.serviceProvider.service.proto.G"
  "eographyDetail\"\244\001\n\"GetServiceConfigOnCon"
  "ditionRequest\022R\n\016requestHeaders\030\001 \001(\0132:."
  "farm.nurture.serviceProvider.service.pro"
  "to.RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001("
  "\010\022\022\n\nregionName\030\003 \001(\t\"\212\001\n)GetServiceConf"
  "igOnConditionResponseRecord\022\023\n\013serviceTy"
  "pe\030\001 \001(\t\022\016\n\006cropId\030\002 \001(\003\022\022\n\nregionName\030\003"
  " \001(\t\022\017\n\007section\030\004 \001(\003\022\023\n\013serviceRank\030\005 \001"
  "(\003\"\246\002\n#GetServiceConfigOnConditionRespon"
  "se\022B\n\006status\030\001 \001(\01322.farm.nurture.servic"
  "eProvider.service.proto.Status\022\r\n\005count\030"
  "\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture.se"
  "rviceProvider.service.proto.Attribs\022f\n\007r"
  "ecords\030\004 \003(\0132U.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceConfigOnCond"
  "itionResponseRecord\"\251\001\n&GetServiceProvid"
  "erOnServiceTypeRequest\022R\n\016requestHeaders"
  "\030\001 \001(\0132:.farm.nurture.serviceProvider.se"
  "rvice.proto.RequestHeaders\022\026\n\016isStaleAll"
  "owed\030\002 \001(\010\022\023\n\013serviceType\030\003 \001(\t\"\263\001\n-GetS"
  "erviceProviderOnServiceTypeResponseRecor"
  "d\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\024\n\014mobileNum"
  "ber\030\003 \001(\t\022\026\n\016whatsappNumber\030\004 \001(\t\022\017\n\007pin"
  "code\030\005 \001(\t\022\024\n\014machineCount\030\006 \001(\003\022\023\n\013cost"
  "PerAcre\030\007 \001(\t\"\256\002\n\'GetServiceProviderOnSe"
  "rviceTypeResponse\022B\n\006status\030\001 \001(\01322.farm"
  ".nurture.serviceProvider.service.proto.S"
  "tatus\022\r\n\005count\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323."
  "farm.nurture.serviceProvider.service.pro"
  "to.Attribs\022j\n\007records\030\004 \003(\0132Y.farm.nurtu"
  "re.serviceProvider.service.proto.GetServ"
  "iceProviderOnServiceTypeResponseRecord\"\256"
  "\001\n%GetLocationOnServiceProviderIdRequest"
  "\022R\n\016requestHeaders\030\001 \001(\0132:.farm.nurture."
  "serviceProvider.service.proto.RequestHea"
  "ders\022\026\n\016isStaleAllowed\030\002 \001(\010\022\031\n\021serviceP"
  "roviderId\030\003 \001(\t\"\217\001\n,GetLocationOnService"
  "ProviderIdResponseRecord\022\031\n\021serviceProvi"
  "derId\030\001 \001(\003\022\020\n\010district\030\002 \001(\t\022\r\n\005state\030\003"
  " \001(\t\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlongitude\030\005 \001("
  "\001\"\254\002\n&GetLocationOnServiceProviderIdResp"
  "onse\022B\n\006status\030\001 \001(\01322.farm.nurture.serv"
  "iceProvider.service.proto.Status\022\r\n\005coun"
  "t\030\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture."
  "serviceProvider.service.proto.Attribs\022i\n"
  "\007records\030\004 \003(\0132X.farm.nurture.servicePro"
  "vider.service.proto.GetLocationOnService"
  "ProviderIdResponseRecord\"\224\001\n\027GetServiceC"
  "onfigRequest\022R\n\016requestHeaders\030\001 \001(\0132:.f"
  "arm.nurture.serviceProvider.service.prot"
  "o.RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010"
  "\022\r\n\005state\030\006 \003(\t\" \n\036GetServiceConfigRespo"
  "nseRecord\"\227\002\n\030GetServiceConfigResponse\022B"
  "\n\006status\030\001 \001(\01322.farm.nurture.servicePro"
  "vider.service.proto.Status\022\r\n\005count\030\002 \001("
  "\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture.servic"
  "eProvider.service.proto.Attribs\022b\n\026servi"
  "ceDetailsResponse\030\005 \003(\0132B.farm.nurture.s"
  "erviceProvider.service.proto.ServiceDeta"
  "ilsResponse\"\245\001\n#GetServiceConfigOnRegion"
  "NameRequest\022R\n\016requestHeaders\030\001 \001(\0132:.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".RequestHeaders\022\026\n\016isStaleAllowed\030\002 \001(\010\022"
  "\022\n\nregionName\030\003 \001(\t\"\213\001\n*GetServiceConfig"
  "OnRegionNameResponseRecord\022\023\n\013serviceTyp"
  "e\030\001 \001(\t\022\016\n\006cropId\030\002 \001(\003\022\022\n\nregionName\030\003 "
  "\001(\t\022\017\n\007section\030\004 \001(\003\022\023\n\013serviceRank\030\005 \001("
  "\003\"\250\002\n$GetServiceConfigOnRegionNameRespon"
  "se\022B\n\006status\030\001 \001(\01322.farm.nurture.servic"
  "eProvider.service.proto.Status\022\r\n\005count\030"
  "\002 \001(\005\022D\n\007attribs\030\003 \003(\01323.farm.nurture.se"
  "rviceProvider.service.proto.Attribs\022g\n\007r"
  "ecords\030\004 \003(\0132V.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceConfigOnRegi"
  "onNameResponseRecord\"d\n\rMultiRequests\022\r\n"
  "\005onTxn\030\001 \001(\010\022D\n\007request\030\002 \003(\01323.farm.nur"
  "ture.serviceProvider.service.proto.Reque"
  "st\"\205\024\n\007Request\022\r\n\005index\030\001 \001(\t\022f\n\025reqAddS"
  "erviceProvider\030\002 \001(\0132E.farm.nurture.serv"
  "iceProvider.service.proto.AddServiceProv"
  "iderRequestH\000\022n\n\031reqAddServiceProviderBu"
  "lk\030\003 \001(\0132I.farm.nurture.serviceProvider."
  "service.proto.BulkAddServiceProviderRequ"
  "estH\000\022f\n\025reqAddServiceLocation\030\004 \001(\0132E.f"
  "arm.nurture.serviceProvider.service.prot"
  "o.AddServiceLocationRequestH\000\022n\n\031reqAddS"
  "erviceLocationBulk\030\005 \001(\0132I.farm.nurture."
  "serviceProvider.service.proto.BulkAddSer"
  "viceLocationRequestH\000\022X\n\016reqAddServices\030"
  "\006 \001(\0132>.farm.nurture.serviceProvider.ser"
  "vice.proto.AddServicesRequestH\000\022`\n\022reqAd"
  "dServicesBulk\030\007 \001(\0132B.farm.nurture.servi"
  "ceProvider.service.proto.BulkAddServices"
  "RequestH\000\022t\n\034reqAddServiceProviderMappin"
  "g\030\010 \001(\0132L.farm.nurture.serviceProvider.s"
  "ervice.proto.AddServiceProviderMappingRe"
  "questH\000\022|\n reqAddServiceProviderMappingB"
  "ulk\030\t \001(\0132P.farm.nurture.serviceProvider"
  ".service.proto.BulkAddServiceProviderMap"
  "pingRequestH\000\022b\n\023reqAddServiceConfig\030\n \001"
  "(\0132C.farm.nurture.serviceProvider.servic"
  "e.proto.AddServiceConfigRequestH\000\022j\n\027req"
  "AddServiceConfigBulk\030\013 \001(\0132G.farm.nurtur"
  "e.serviceProvider.service.proto.BulkAddS"
  "erviceConfigRequestH\000\022f\n\025reqGetServicePr"
  "ovider\030\014 \001(\0132E.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceProviderRequ"
  "estH\000\022x\n\036reqAddServiceProviderFromExcel\030"
  "\r \001(\0132N.farm.nurture.serviceProvider.ser"
  "vice.proto.AddServiceProviderFromExcelRe"
  "questH\000\022b\n\023reqGetSDTVOnLatLong\030\016 \001(\0132C.f"
  "arm.nurture.serviceProvider.service.prot"
  "o.GetSDTVOnLatLongRequestH\000\022v\n\035reqGetSer"
  "viceDetailsOnLatLong\030\017 \001(\0132M.farm.nurtur"
  "e.serviceProvider.service.proto.GetServi"
  "ceDetailsOnLatLongRequestH\000\022\216\001\n)reqGetSe"
  "rvicesOnServiceNameAndServiceType\030\020 \001(\0132"
  "Y.farm.nurture.serviceProvider.service.p"
  "roto.GetServicesOnServiceNameAndServiceT"
  "ypeRequestH\000\022\202\001\n#reqGetServiceProviderOn"
  "MobileNumber\030\021 \001(\0132S.farm.nurture.servic"
  "eProvider.service.proto.GetServiceProvid"
  "erOnMobileNumberRequestH\000\022~\n!reqGetServi"
  "ceLocationOnRegionName\030\022 \001(\0132Q.farm.nurt"
  "ure.serviceProvider.service.proto.GetSer"
  "viceLocationOnRegionNameRequestH\000\022x\n\036req"
  "GetServiceConfigOnCondition\030\023 \001(\0132N.farm"
  ".nurture.serviceProvider.service.proto.G"
  "etServiceConfigOnConditionRequestH\000\022\200\001\n\""
  "reqGetServiceProviderOnServiceType\030\024 \001(\013"
  "2R.farm.nurture.serviceProvider.service."
  "proto.GetServiceProviderOnServiceTypeReq"
  "uestH\000\022~\n!reqGetLocationOnServiceProvide"
  "rId\030\025 \001(\0132Q.farm.nurture.serviceProvider"
  ".service.proto.GetLocationOnServiceProvi"
  "derIdRequestH\000\022b\n\023reqGetServiceConfig\030\026 "
  "\001(\0132C.farm.nurture.serviceProvider.servi"
  "ce.proto.GetServiceConfigRequestH\000\022z\n\037re"
  "qGetServiceConfigOnRegionName\030\027 \001(\0132O.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".GetServiceConfigOnRegionNameRequestH\000B\n"
  "\n\010ARequest\"\234\001\n\016MultiResponses\022B\n\006status\030"
  "\001 \001(\01322.farm.nurture.serviceProvider.ser"
  "vice.proto.Status\022F\n\010response\030\002 \003(\01324.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".Response\"\341\024\n\010Response\022\r\n\005index\030\001 \001(\t\022B\n"
  "\006status\030\002 \001(\01322.farm.nurture.serviceProv"
  "ider.service.proto.Status\022g\n\025resAddServi"
  "ceProvider\030\003 \001(\0132F.farm.nurture.serviceP"
  "rovider.service.proto.AddServiceProvider"
  "ResponseH\000\022o\n\031resAddServiceProviderBulk\030"
  "\004 \001(\0132J.farm.nurture.serviceProvider.ser"
  "vice.proto.BulkAddServiceProviderRespons"
  "eH\000\022g\n\025resAddServiceLocation\030\005 \001(\0132F.far"
  "m.nurture.serviceProvider.service.proto."
  "AddServiceLocationResponseH\000\022o\n\031resAddSe"
  "rviceLocationBulk\030\006 \001(\0132J.farm.nurture.s"
  "erviceProvider.service.proto.BulkAddServ"
  "iceLocationResponseH\000\022Y\n\016resAddServices\030"
  "\007 \001(\0132\?.farm.nurture.serviceProvider.ser"
  "vice.proto.AddServicesResponseH\000\022a\n\022resA"
  "ddServicesBulk\030\010 \001(\0132C.farm.nurture.serv"
  "iceProvider.service.proto.BulkAddService"
  "sResponseH\000\022u\n\034resAddServiceProviderMapp"
  "ing\030\t \001(\0132M.farm.nurture.serviceProvider"
  ".service.proto.AddServiceProviderMapping"
  "ResponseH\000\022}\n resAddServiceProviderMappi"
  "ngBulk\030\n \001(\0132Q.farm.nurture.serviceProvi"
  "der.service.proto.BulkAddServiceProvider"
  "MappingResponseH\000\022c\n\023resAddServiceConfig"
  "\030\013 \001(\0132D.farm.nurture.serviceProvider.se"
  "rvice.proto.AddServiceConfigResponseH\000\022k"
  "\n\027resAddServiceConfigBulk\030\014 \001(\0132H.farm.n"
  "urture.serviceProvider.service.proto.Bul"
  "kAddServiceConfigResponseH\000\022g\n\025resGetSer"
  "viceProvider\030\r \001(\0132F.farm.nurture.servic"
  "eProvider.service.proto.GetServiceProvid"
  "erResponseH\000\022y\n\036resAddServiceProviderFro"
  "mExcel\030\016 \001(\0132O.farm.nurture.serviceProvi"
  "der.service.proto.AddServiceProviderFrom"
  "ExcelResponseH\000\022c\n\023resGetSDTVOnLatLong\030\017"
  " \001(\0132D.farm.nurture.serviceProvider.serv"
  "ice.proto.GetSDTVOnLatLongResponseH\000\022w\n\035"
  "resGetServiceDetailsOnLatLong\030\020 \001(\0132N.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".GetServiceDetailsOnLatLongResponseH\000\022\217\001"
  "\n)resGetServicesOnServiceNameAndServiceT"
  "ype\030\021 \001(\0132Z.farm.nurture.serviceProvider"
  ".service.proto.GetServicesOnServiceNameA"
  "ndServiceTypeResponseH\000\022\203\001\n#resGetServic"
  "eProviderOnMobileNumber\030\022 \001(\0132T.farm.nur"
  "ture.serviceProvider.service.proto.GetSe"
  "rviceProviderOnMobileNumberResponseH\000\022\177\n"
  "!resGetServiceLocationOnRegionName\030\023 \001(\013"
  "2R.farm.nurture.serviceProvider.service."
  "proto.GetServiceLocationOnRegionNameResp"
  "onseH\000\022y\n\036resGetServiceConfigOnCondition"
  "\030\024 \001(\0132O.farm.nurture.serviceProvider.se"
  "rvice.proto.GetServiceConfigOnConditionR"
  "esponseH\000\022\201\001\n\"resGetServiceProviderOnSer"
  "viceType\030\025 \001(\0132S.farm.nurture.servicePro"
  "vider.service.proto.GetServiceProviderOn"
  "ServiceTypeResponseH\000\022\177\n!resGetLocationO"
  "nServiceProviderId\030\026 \001(\0132R.farm.nurture."
  "serviceProvider.service.proto.GetLocatio"
  "nOnServiceProviderIdResponseH\000\022c\n\023resGet"
  "ServiceConfig\030\027 \001(\0132D.farm.nurture.servi"
  "ceProvider.service.proto.GetServiceConfi"
  "gResponseH\000\022{\n\037resGetServiceConfigOnRegi"
  "onName\030\030 \001(\0132P.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceConfigOnRegi"
  "onNameResponseH\000B\013\n\tAResponse*\332\001\n\nStatus"
  "Code\022\013\n\007SUCCESS\020\000\022\r\n\tNOT_FOUND\020\001\022\020\n\014ZERO"
  "_RESULTS\020\002\022\r\n\tDUPLICATE\020\003\022\022\n\016LIMIT_EXCEE"
  "DED\020\004\022\023\n\017INVALID_REQUEST\020\005\022\031\n\025TEMPORARIL"
  "Y_SUSPENDED\020\006\022\024\n\020OVER_USAGE_LIMIT\020\007\022\022\n\016R"
  "EQUEST_DENIED\020\010\022\021\n\rUNKNOWN_ERROR\020\t\022\016\n\nDB"
  "_FAILURE\020\n2\226\"\n ServiceProviderManagement"
  "Service\022\254\001\n\031ExecuteAddServiceProvider\022E."
  "farm.nurture.serviceProvider.service.pro"
  "to.AddServiceProviderRequest\032F.farm.nurt"
  "ure.serviceProvider.service.proto.AddSer"
  "viceProviderResponse\"\000\022\270\001\n\035ExecuteAddSer"
  "viceProviderBulk\022I.farm.nurture.serviceP"
  "rovider.service.proto.BulkAddServiceProv"
  "iderRequest\032J.farm.nurture.serviceProvid"
  "er.service.proto.BulkAddServiceProviderR"
  "esponse\"\000\022\254\001\n\031ExecuteAddServiceLocation\022"
  "E.farm.nurture.serviceProvider.service.p"
  "roto.AddServiceLocationRequest\032F.farm.nu"
  "rture.serviceProvider.service.proto.AddS"
  "erviceLocationResponse\"\000\022\270\001\n\035ExecuteAddS"
  "erviceLocationBulk\022I.farm.nurture.servic"
  "eProvider.service.proto.BulkAddServiceLo"
  "cationRequest\032J.farm.nurture.serviceProv"
  "ider.service.proto.BulkAddServiceLocatio"
  "nResponse\"\000\022\227\001\n\022ExecuteAddServices\022>.far"
  "m.nurture.serviceProvider.service.proto."
  "AddServicesRequest\032\?.farm.nurture.servic"
  "eProvider.service.proto.AddServicesRespo"
  "nse\"\000\022\243\001\n\026ExecuteAddServicesBulk\022B.farm."
  "nurture.serviceProvider.service.proto.Bu"
  "lkAddServicesRequest\032C.farm.nurture.serv"
  "iceProvider.service.proto.BulkAddService"
  "sResponse\"\000\022\301\001\n ExecuteAddServiceProvide"
  "rMapping\022L.farm.nurture.serviceProvider."
  "service.proto.AddServiceProviderMappingR"
  "equest\032M.farm.nurture.serviceProvider.se"
  "rvice.proto.AddServiceProviderMappingRes"
  "ponse\"\000\022\315\001\n$ExecuteAddServiceProviderMap"
  "pingBulk\022P.farm.nurture.serviceProvider."
  "service.proto.BulkAddServiceProviderMapp"
  "ingRequest\032Q.farm.nurture.serviceProvide"
  "r.service.proto.BulkAddServiceProviderMa"
  "ppingResponse\"\000\022\246\001\n\027ExecuteAddServiceCon"
  "fig\022C.farm.nurture.serviceProvider.servi"
  "ce.proto.AddServiceConfigRequest\032D.farm."
  "nurture.serviceProvider.service.proto.Ad"
  "dServiceConfigResponse\"\000\022\262\001\n\033ExecuteAddS"
  "erviceConfigBulk\022G.farm.nurture.serviceP"
  "rovider.service.proto.BulkAddServiceConf"
  "igRequest\032H.farm.nurture.serviceProvider"
  ".service.proto.BulkAddServiceConfigRespo"
  "nse\"\000\022\254\001\n\031ExecuteGetServiceProvider\022E.fa"
  "rm.nurture.serviceProvider.service.proto"
  ".GetServiceProviderRequest\032F.farm.nurtur"
  "e.serviceProvider.service.proto.GetServi"
  "ceProviderResponse\"\000\022\307\001\n\"ExecuteAddServi"
  "ceProviderFromExcel\022N.farm.nurture.servi"
  "ceProvider.service.proto.AddServiceProvi"
  "derFromExcelRequest\032O.farm.nurture.servi"
  "ceProvider.service.proto.AddServiceProvi"
  "derFromExcelResponse\"\000\022\246\001\n\027ExecuteGetSDT"
  "VOnLatLong\022C.farm.nurture.serviceProvide"
  "r.service.proto.GetSDTVOnLatLongRequest\032"
  "D.farm.nurture.serviceProvider.service.p"
  "roto.GetSDTVOnLatLongResponse\"\000\022\304\001\n!Exec"
  "uteGetServiceDetailsOnLatLong\022M.farm.nur"
  "ture.serviceProvider.service.proto.GetSe"
  "rviceDetailsOnLatLongRequest\032N.farm.nurt"
  "ure.serviceProvider.service.proto.GetSer"
  "viceDetailsOnLatLongResponse\"\000\022\350\001\n-Execu"
  "teGetServicesOnServiceNameAndServiceType"
  "\022Y.farm.nurture.serviceProvider.service."
  "proto.GetServicesOnServiceNameAndService"
  "TypeRequest\032Z.farm.nurture.serviceProvid"
  "er.service.proto.GetServicesOnServiceNam"
  "eAndServiceTypeResponse\"\000\022\326\001\n\'ExecuteGet"
  "ServiceProviderOnMobileNumber\022S.farm.nur"
  "ture.serviceProvider.service.proto.GetSe"
  "rviceProviderOnMobileNumberRequest\032T.far"
  "m.nurture.serviceProvider.service.proto."
  "GetServiceProviderOnMobileNumberResponse"
  "\"\000\022\320\001\n%ExecuteGetServiceLocationOnRegion"
  "Name\022Q.farm.nurture.serviceProvider.serv"
  "ice.proto.GetServiceLocationOnRegionName"
  "Request\032R.farm.nurture.serviceProvider.s"
  "ervice.proto.GetServiceLocationOnRegionN"
  "ameResponse\"\000\022\307\001\n\"ExecuteGetServiceConfi"
  "gOnCondition\022N.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceConfigOnCond"
  "itionRequest\032O.farm.nurture.serviceProvi"
  "der.service.proto.GetServiceConfigOnCond"
  "itionResponse\"\000\022\323\001\n&ExecuteGetServicePro"
  "viderOnServiceType\022R.farm.nurture.servic"
  "eProvider.service.proto.GetServiceProvid"
  "erOnServiceTypeRequest\032S.farm.nurture.se"
  "rviceProvider.service.proto.GetServicePr"
  "oviderOnServiceTypeResponse\"\000\022\320\001\n%Execut"
  "eGetLocationOnServiceProviderId\022Q.farm.n"
  "urture.serviceProvider.service.proto.Get"
  "LocationOnServiceProviderIdRequest\032R.far"
  "m.nurture.serviceProvider.service.proto."
  "GetLocationOnServiceProviderIdResponse\"\000"
  "\022\246\001\n\027ExecuteGetServiceConfig\022C.farm.nurt"
  "ure.serviceProvider.service.proto.GetSer"
  "viceConfigRequest\032D.farm.nurture.service"
  "Provider.service.proto.GetServiceConfigR"
  "esponse\"\000\022\312\001\n#ExecuteGetServiceConfigOnR"
  "egionName\022O.farm.nurture.serviceProvider"
  ".service.proto.GetServiceConfigOnRegionN"
  "ameRequest\032P.farm.nurture.serviceProvide"
  "r.service.proto.GetServiceConfigOnRegion"
  "NameResponse\"\000\022\202\001\n\007Execute\0229.farm.nurtur"
  "e.serviceProvider.service.proto.MultiReq"
  "uests\032:.farm.nurture.serviceProvider.ser"
  "vice.proto.MultiResponses\"\000Bq\n*farm.nurt"
  "ure.serviceProvider.service.protoP\001ZASer"
  "viceProviderManagementService/ServicePro"
  "viderManagementServiceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_sccs[66] = {
  &scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderFromExcelResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetSDTVOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceConfigResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceDetailsOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceLocationOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServiceProviderResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
  &scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto = {
  false, false, descriptor_table_protodef_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto, "ServiceProviderManagementService/service_provider_management_service.proto", 22630,
  &descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_once, descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_sccs, descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto_deps, 66, 0,
  schemas, file_default_instances, TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto::offsets,
  file_level_metadata_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto, 66, file_level_enum_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto, file_level_service_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto)), true);
namespace farm {
namespace nurture {
namespace serviceProvider {
namespace service {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestHeaders_LANGUAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
  return file_level_enum_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[0];
}
bool RequestHeaders_LANGUAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RequestHeaders_LANGUAGE RequestHeaders::English;
constexpr RequestHeaders_LANGUAGE RequestHeaders::Hindi;
constexpr RequestHeaders_LANGUAGE RequestHeaders::LANGUAGE_MIN;
constexpr RequestHeaders_LANGUAGE RequestHeaders::LANGUAGE_MAX;
constexpr int RequestHeaders::LANGUAGE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestHeaders_COUNTRY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
  return file_level_enum_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[1];
}
bool RequestHeaders_COUNTRY_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RequestHeaders_COUNTRY RequestHeaders::India;
constexpr RequestHeaders_COUNTRY RequestHeaders::Australia;
constexpr RequestHeaders_COUNTRY RequestHeaders::COUNTRY_MIN;
constexpr RequestHeaders_COUNTRY RequestHeaders::COUNTRY_MAX;
constexpr int RequestHeaders::COUNTRY_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
  return file_level_enum_descriptors_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto[2];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RequestHeaders::_Internal {
 public:
};

RequestHeaders::RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.RequestHeaders)
}
RequestHeaders::RequestHeaders(const RequestHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefferedusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefferedusername().empty()) {
    prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefferedusername(), 
      GetArena());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  tracingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tracingid().empty()) {
    tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracingid(), 
      GetArena());
  }
  experimentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_experimentid().empty()) {
    experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_experimentid(), 
      GetArena());
  }
  authtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authtoken().empty()) {
    authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authtoken(), 
      GetArena());
  }
  apptoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apptoken().empty()) {
    apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apptoken(), 
      GetArena());
  }
  ::memcpy(&tracedetails_, &from.tracedetails_,
    static_cast<size_t>(reinterpret_cast<char*>(&country_) -
    reinterpret_cast<char*>(&tracedetails_)) + sizeof(country_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.RequestHeaders)
}

void RequestHeaders::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  prefferedusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  experimentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tracedetails_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&country_) -
      reinterpret_cast<char*>(&tracedetails_)) + sizeof(country_));
}

RequestHeaders::~RequestHeaders() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefferedusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracingid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  experimentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestHeaders::ArenaDtor(void* object) {
  RequestHeaders* _this = reinterpret_cast< RequestHeaders* >(object);
  (void)_this;
}
void RequestHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeaders& RequestHeaders::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeaders_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  prefferedusername_.ClearToEmpty();
  clientid_.ClearToEmpty();
  tracingid_.ClearToEmpty();
  experimentid_.ClearToEmpty();
  authtoken_.ClearToEmpty();
  apptoken_.ClearToEmpty();
  ::memset(&tracedetails_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_) -
      reinterpret_cast<char*>(&tracedetails_)) + sizeof(country_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefferedUserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefferedusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tracingId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tracingid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool traceDetails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tracedetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE>(val));
        } else goto handle_unusual;
        continue;
      // float latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accuracy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY country = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_country(static_cast<::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY>(val));
        } else goto handle_unusual;
        continue;
      // string experimentId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_experimentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string authToken = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_authtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appToken = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_apptoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeaders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefferedUserName = 1;
  if (this->prefferedusername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefferedusername().data(), static_cast<int>(this->_internal_prefferedusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefferedusername(), target);
  }

  // string clientId = 2;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // string tracingId = 3;
  if (this->tracingid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracingid().data(), static_cast<int>(this->_internal_tracingid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tracingid(), target);
  }

  // bool traceDetails = 4;
  if (this->tracedetails() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_tracedetails(), target);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE language = 5;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_language(), target);
  }

  // float latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_latitude(), target);
  }

  // float longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_longitude(), target);
  }

  // float accuracy = 8;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_accuracy(), target);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY country = 9;
  if (this->country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_country(), target);
  }

  // string experimentId = 10;
  if (this->experimentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_experimentid().data(), static_cast<int>(this->_internal_experimentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_experimentid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_attribs(i), target, stream);
  }

  // string authToken = 12;
  if (this->authtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authtoken().data(), static_cast<int>(this->_internal_authtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_authtoken(), target);
  }

  // string appToken = 13;
  if (this->apptoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apptoken().data(), static_cast<int>(this->_internal_apptoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_apptoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  return target;
}

size_t RequestHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 11;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string prefferedUserName = 1;
  if (this->prefferedusername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefferedusername());
  }

  // string clientId = 2;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string tracingId = 3;
  if (this->tracingid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracingid());
  }

  // string experimentId = 10;
  if (this->experimentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_experimentid());
  }

  // string authToken = 12;
  if (this->authtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authtoken());
  }

  // string appToken = 13;
  if (this->apptoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apptoken());
  }

  // bool traceDetails = 4;
  if (this->tracedetails() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE language = 5;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // float latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float accuracy = 8;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY country = 9;
  if (this->country() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeaders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeaders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.RequestHeaders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.RequestHeaders)
    MergeFrom(*source);
  }
}

void RequestHeaders::MergeFrom(const RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.prefferedusername().size() > 0) {
    _internal_set_prefferedusername(from._internal_prefferedusername());
  }
  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.tracingid().size() > 0) {
    _internal_set_tracingid(from._internal_tracingid());
  }
  if (from.experimentid().size() > 0) {
    _internal_set_experimentid(from._internal_experimentid());
  }
  if (from.authtoken().size() > 0) {
    _internal_set_authtoken(from._internal_authtoken());
  }
  if (from.apptoken().size() > 0) {
    _internal_set_apptoken(from._internal_apptoken());
  }
  if (from.tracedetails() != 0) {
    _internal_set_tracedetails(from._internal_tracedetails());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.accuracy() <= 0 && from.accuracy() >= 0)) {
    _internal_set_accuracy(from._internal_accuracy());
  }
  if (from.country() != 0) {
    _internal_set_country(from._internal_country());
  }
}

void RequestHeaders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeaders::CopyFrom(const RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeaders::IsInitialized() const {
  return true;
}

void RequestHeaders::InternalSwap(RequestHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  prefferedusername_.Swap(&other->prefferedusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tracingid_.Swap(&other->tracingid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  experimentid_.Swap(&other->experimentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authtoken_.Swap(&other->authtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apptoken_.Swap(&other->apptoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeaders, country_)
      + sizeof(RequestHeaders::country_)
      - PROTOBUF_FIELD_OFFSET(RequestHeaders, tracedetails_)>(
          reinterpret_cast<char*>(&tracedetails_),
          reinterpret_cast<char*>(&other->tracedetails_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Attribs::_Internal {
 public:
};

Attribs::Attribs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.Attribs)
}
Attribs::Attribs(const Attribs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.Attribs)
}

void Attribs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Attribs::~Attribs() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.Attribs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attribs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attribs::ArenaDtor(void* object) {
  Attribs* _this = reinterpret_cast< Attribs* >(object);
  (void)_this;
}
void Attribs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attribs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribs& Attribs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribs_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Attribs::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.Attribs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.Attribs.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.Attribs.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.Attribs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.Attribs.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.Attribs.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.Attribs)
  return target;
}

size_t Attribs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.Attribs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.Attribs)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.Attribs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.Attribs)
    MergeFrom(*source);
  }
}

void Attribs::MergeFrom(const Attribs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.Attribs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Attribs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.Attribs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribs::CopyFrom(const Attribs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.Attribs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribs::IsInitialized() const {
  return true;
}

void Attribs::InternalSwap(Attribs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  error_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      error_messages_(from.error_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_error_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(internal_error_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&internal_error_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(internal_error_code_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_messages_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_error_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(internal_error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.StatusCode status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::serviceProvider::service::proto::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string error_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error_messages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.Status.error_messages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 internal_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          internal_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.StatusCode status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated string error_messages = 2;
  for (int i = 0, n = this->_internal_error_messages_size(); i < n; i++) {
    const auto& s = this->_internal_error_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.Status.error_messages");
    target = stream->WriteString(2, s, target);
  }

  // int32 internal_error_code = 3;
  if (this->internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string error_messages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_messages_.size());
  for (int i = 0, n = error_messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_messages_.Get(i));
  }

  // .farm.nurture.serviceProvider.service.proto.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 internal_error_code = 3;
  if (this->internal_error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_messages_.MergeFrom(from.error_messages_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.internal_error_code() != 0) {
    _internal_set_internal_error_code(from._internal_internal_error_code());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_messages_.InternalSwap(&other->error_messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, internal_error_code_)
      + sizeof(Status::internal_error_code_)
      - PROTOBUF_FIELD_OFFSET(Status, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServiceProviderRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServiceProviderRequest::_Internal::requestheaders(const AddServiceProviderRequest* msg) {
  return *msg->requestheaders_;
}
AddServiceProviderRequest::AddServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
}
AddServiceProviderRequest::AddServiceProviderRequest(const AddServiceProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  whatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_whatsappnumber().empty()) {
    whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whatsappnumber(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
}

void AddServiceProviderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

AddServiceProviderRequest::~AddServiceProviderRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsappnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServiceProviderRequest::ArenaDtor(void* object) {
  AddServiceProviderRequest* _this = reinterpret_cast< AddServiceProviderRequest* >(object);
  (void)_this;
}
void AddServiceProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderRequest& AddServiceProviderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  whatsappnumber_.ClearToEmpty();
  pincode_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string whatsappNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_whatsappnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobilenumber(), target);
  }

  // string whatsappNumber = 4;
  if (this->whatsappnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whatsappnumber().data(), static_cast<int>(this->_internal_whatsappnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_whatsappnumber(), target);
  }

  // string pincode = 5;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  return target;
}

size_t AddServiceProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // string whatsappNumber = 4;
  if (this->whatsappnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_whatsappnumber());
  }

  // string pincode = 5;
  if (this->pincode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
    MergeFrom(*source);
  }
}

void AddServiceProviderRequest::MergeFrom(const AddServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.whatsappnumber().size() > 0) {
    _internal_set_whatsappnumber(from._internal_whatsappnumber());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void AddServiceProviderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderRequest::CopyFrom(const AddServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderRequest::IsInitialized() const {
  return true;
}

void AddServiceProviderRequest::InternalSwap(AddServiceProviderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  whatsappnumber_.Swap(&other->whatsappnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceProviderRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const BulkAddServiceProviderRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
BulkAddServiceProviderRequest::_Internal::requestheaders(const BulkAddServiceProviderRequest* msg) {
  return *msg->requestheaders_;
}
BulkAddServiceProviderRequest::BulkAddServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
}
BulkAddServiceProviderRequest::BulkAddServiceProviderRequest(const BulkAddServiceProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
}

void BulkAddServiceProviderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddServiceProviderRequest::~BulkAddServiceProviderRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddServiceProviderRequest::ArenaDtor(void* object) {
  BulkAddServiceProviderRequest* _this = reinterpret_cast< BulkAddServiceProviderRequest* >(object);
  (void)_this;
}
void BulkAddServiceProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceProviderRequest& BulkAddServiceProviderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  return target;
}

size_t BulkAddServiceProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceProviderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceProviderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceProviderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
    MergeFrom(*source);
  }
}

void BulkAddServiceProviderRequest::MergeFrom(const BulkAddServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddServiceProviderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceProviderRequest::CopyFrom(const BulkAddServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceProviderRequest::IsInitialized() const {
  return true;
}

void BulkAddServiceProviderRequest::InternalSwap(BulkAddServiceProviderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceProviderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServiceProviderResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServiceProviderResponse::_Internal::status(const AddServiceProviderResponse* msg) {
  return *msg->status_;
}
AddServiceProviderResponse::AddServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
}
AddServiceProviderResponse::AddServiceProviderResponse(const AddServiceProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
}

void AddServiceProviderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServiceProviderResponse::~AddServiceProviderResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddServiceProviderResponse::ArenaDtor(void* object) {
  AddServiceProviderResponse* _this = reinterpret_cast< AddServiceProviderResponse* >(object);
  (void)_this;
}
void AddServiceProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderResponse& AddServiceProviderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  return target;
}

size_t AddServiceProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
    MergeFrom(*source);
  }
}

void AddServiceProviderResponse::MergeFrom(const AddServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServiceProviderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderResponse::CopyFrom(const AddServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderResponse::IsInitialized() const {
  return true;
}

void AddServiceProviderResponse::InternalSwap(AddServiceProviderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceProviderResponse, count_)
      + sizeof(AddServiceProviderResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServiceProviderResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceProviderResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const BulkAddServiceProviderResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
BulkAddServiceProviderResponse::_Internal::status(const BulkAddServiceProviderResponse* msg) {
  return *msg->status_;
}
BulkAddServiceProviderResponse::BulkAddServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
}
BulkAddServiceProviderResponse::BulkAddServiceProviderResponse(const BulkAddServiceProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
}

void BulkAddServiceProviderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddServiceProviderResponse::~BulkAddServiceProviderResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddServiceProviderResponse::ArenaDtor(void* object) {
  BulkAddServiceProviderResponse* _this = reinterpret_cast< BulkAddServiceProviderResponse* >(object);
  (void)_this;
}
void BulkAddServiceProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceProviderResponse& BulkAddServiceProviderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  return target;
}

size_t BulkAddServiceProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceProviderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceProviderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceProviderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
    MergeFrom(*source);
  }
}

void BulkAddServiceProviderResponse::MergeFrom(const BulkAddServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddServiceProviderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceProviderResponse::CopyFrom(const BulkAddServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceProviderResponse::IsInitialized() const {
  return true;
}

void BulkAddServiceProviderResponse::InternalSwap(BulkAddServiceProviderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddServiceProviderResponse, count_)
      + sizeof(BulkAddServiceProviderResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddServiceProviderResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceProviderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceLocationRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServiceLocationRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServiceLocationRequest::_Internal::requestheaders(const AddServiceLocationRequest* msg) {
  return *msg->requestheaders_;
}
AddServiceLocationRequest::AddServiceLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
}
AddServiceLocationRequest::AddServiceLocationRequest(const AddServiceLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geographyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyid().empty()) {
    geographyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyid(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geohash().empty()) {
    geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geohash(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&serviceproviderid_, &from.serviceproviderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&serviceproviderid_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
}

void AddServiceLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  geographyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(longitude_));
}

AddServiceLocationRequest::~AddServiceLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geographyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geohash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServiceLocationRequest::ArenaDtor(void* object) {
  AddServiceLocationRequest* _this = reinterpret_cast< AddServiceLocationRequest* >(object);
  (void)_this;
}
void AddServiceLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceLocationRequest& AddServiceLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geographyid_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  geohash_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&serviceproviderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&serviceproviderid_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceProviderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serviceproviderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geographyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_geographyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geoHash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_geohash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 serviceProviderId = 2;
  if (this->serviceproviderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_serviceproviderid(), target);
  }

  // string geographyId = 3;
  if (this->geographyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyid().data(), static_cast<int>(this->_internal_geographyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_geographyid(), target);
  }

  // string district = 4;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_district(), target);
  }

  // string state = 5;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_state(), target);
  }

  // string geoHash = 6;
  if (this->geohash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash().data(), static_cast<int>(this->_internal_geohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_geohash(), target);
  }

  // double latitude = 7;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_latitude(), target);
  }

  // double longitude = 8;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  return target;
}

size_t AddServiceLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geographyId = 3;
  if (this->geographyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyid());
  }

  // string district = 4;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 5;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string geoHash = 6;
  if (this->geohash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 serviceProviderId = 2;
  if (this->serviceproviderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serviceproviderid());
  }

  // double latitude = 7;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 8;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
    MergeFrom(*source);
  }
}

void AddServiceLocationRequest::MergeFrom(const AddServiceLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geographyid().size() > 0) {
    _internal_set_geographyid(from._internal_geographyid());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.geohash().size() > 0) {
    _internal_set_geohash(from._internal_geohash());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.serviceproviderid() != 0) {
    _internal_set_serviceproviderid(from._internal_serviceproviderid());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void AddServiceLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceLocationRequest::CopyFrom(const AddServiceLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceLocationRequest::IsInitialized() const {
  return true;
}

void AddServiceLocationRequest::InternalSwap(AddServiceLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  geographyid_.Swap(&other->geographyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geohash_.Swap(&other->geohash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceLocationRequest, longitude_)
      + sizeof(AddServiceLocationRequest::longitude_)
      - PROTOBUF_FIELD_OFFSET(AddServiceLocationRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceLocationRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const BulkAddServiceLocationRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
BulkAddServiceLocationRequest::_Internal::requestheaders(const BulkAddServiceLocationRequest* msg) {
  return *msg->requestheaders_;
}
BulkAddServiceLocationRequest::BulkAddServiceLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
}
BulkAddServiceLocationRequest::BulkAddServiceLocationRequest(const BulkAddServiceLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
}

void BulkAddServiceLocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddServiceLocationRequest::~BulkAddServiceLocationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddServiceLocationRequest::ArenaDtor(void* object) {
  BulkAddServiceLocationRequest* _this = reinterpret_cast< BulkAddServiceLocationRequest* >(object);
  (void)_this;
}
void BulkAddServiceLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceLocationRequest& BulkAddServiceLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceLocationRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  return target;
}

size_t BulkAddServiceLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
    MergeFrom(*source);
  }
}

void BulkAddServiceLocationRequest::MergeFrom(const BulkAddServiceLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddServiceLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceLocationRequest::CopyFrom(const BulkAddServiceLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceLocationRequest::IsInitialized() const {
  return true;
}

void BulkAddServiceLocationRequest::InternalSwap(BulkAddServiceLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceLocationResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServiceLocationResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServiceLocationResponse::_Internal::status(const AddServiceLocationResponse* msg) {
  return *msg->status_;
}
AddServiceLocationResponse::AddServiceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
}
AddServiceLocationResponse::AddServiceLocationResponse(const AddServiceLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
}

void AddServiceLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServiceLocationResponse::~AddServiceLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddServiceLocationResponse::ArenaDtor(void* object) {
  AddServiceLocationResponse* _this = reinterpret_cast< AddServiceLocationResponse* >(object);
  (void)_this;
}
void AddServiceLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceLocationResponse& AddServiceLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  return target;
}

size_t AddServiceLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
    MergeFrom(*source);
  }
}

void AddServiceLocationResponse::MergeFrom(const AddServiceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServiceLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceLocationResponse::CopyFrom(const AddServiceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceLocationResponse::IsInitialized() const {
  return true;
}

void AddServiceLocationResponse::InternalSwap(AddServiceLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceLocationResponse, count_)
      + sizeof(AddServiceLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServiceLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceLocationResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const BulkAddServiceLocationResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
BulkAddServiceLocationResponse::_Internal::status(const BulkAddServiceLocationResponse* msg) {
  return *msg->status_;
}
BulkAddServiceLocationResponse::BulkAddServiceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
}
BulkAddServiceLocationResponse::BulkAddServiceLocationResponse(const BulkAddServiceLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
}

void BulkAddServiceLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddServiceLocationResponse::~BulkAddServiceLocationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddServiceLocationResponse::ArenaDtor(void* object) {
  BulkAddServiceLocationResponse* _this = reinterpret_cast< BulkAddServiceLocationResponse* >(object);
  (void)_this;
}
void BulkAddServiceLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceLocationResponse& BulkAddServiceLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceLocationResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  return target;
}

size_t BulkAddServiceLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
    MergeFrom(*source);
  }
}

void BulkAddServiceLocationResponse::MergeFrom(const BulkAddServiceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddServiceLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceLocationResponse::CopyFrom(const BulkAddServiceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceLocationResponse::IsInitialized() const {
  return true;
}

void BulkAddServiceLocationResponse::InternalSwap(BulkAddServiceLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddServiceLocationResponse, count_)
      + sizeof(BulkAddServiceLocationResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddServiceLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServicesRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServicesRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServicesRequest::_Internal::requestheaders(const AddServicesRequest* msg) {
  return *msg->requestheaders_;
}
AddServicesRequest::AddServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
}
AddServicesRequest::AddServicesRequest(const AddServicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  imageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageurl().empty()) {
    imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imageurl(), 
      GetArena());
  }
  translationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_translationkey().empty()) {
    translationkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_translationkey(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
}

void AddServicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  translationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

AddServicesRequest::~AddServicesRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  translationkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServicesRequest::ArenaDtor(void* object) {
  AddServicesRequest* _this = reinterpret_cast< AddServicesRequest* >(object);
  (void)_this;
}
void AddServicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServicesRequest& AddServicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty();
  servicetype_.ClearToEmpty();
  imageurl_.ClearToEmpty();
  translationkey_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imageUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imageurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string translationKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_translationkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string serviceName = 2;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servicename(), target);
  }

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_servicetype(), target);
  }

  // string imageUrl = 4;
  if (this->imageurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageurl().data(), static_cast<int>(this->_internal_imageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_imageurl(), target);
  }

  // string translationKey = 5;
  if (this->translationkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translationkey().data(), static_cast<int>(this->_internal_translationkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_translationkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  return target;
}

size_t AddServicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 2;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // string imageUrl = 4;
  if (this->imageurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageurl());
  }

  // string translationKey = 5;
  if (this->translationkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translationkey());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
    MergeFrom(*source);
  }
}

void AddServicesRequest::MergeFrom(const AddServicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.imageurl().size() > 0) {
    _internal_set_imageurl(from._internal_imageurl());
  }
  if (from.translationkey().size() > 0) {
    _internal_set_translationkey(from._internal_translationkey());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void AddServicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServicesRequest::CopyFrom(const AddServicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServicesRequest::IsInitialized() const {
  return true;
}

void AddServicesRequest::InternalSwap(AddServicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageurl_.Swap(&other->imageurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  translationkey_.Swap(&other->translationkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServicesRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const BulkAddServicesRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
BulkAddServicesRequest::_Internal::requestheaders(const BulkAddServicesRequest* msg) {
  return *msg->requestheaders_;
}
BulkAddServicesRequest::BulkAddServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
}
BulkAddServicesRequest::BulkAddServicesRequest(const BulkAddServicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
}

void BulkAddServicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddServicesRequest::~BulkAddServicesRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddServicesRequest::ArenaDtor(void* object) {
  BulkAddServicesRequest* _this = reinterpret_cast< BulkAddServicesRequest* >(object);
  (void)_this;
}
void BulkAddServicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServicesRequest& BulkAddServicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServicesRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServicesRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  return target;
}

size_t BulkAddServicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
    MergeFrom(*source);
  }
}

void BulkAddServicesRequest::MergeFrom(const BulkAddServicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddServicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServicesRequest::CopyFrom(const BulkAddServicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServicesRequest::IsInitialized() const {
  return true;
}

void BulkAddServicesRequest::InternalSwap(BulkAddServicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServicesResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServicesResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServicesResponse::_Internal::status(const AddServicesResponse* msg) {
  return *msg->status_;
}
AddServicesResponse::AddServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
}
AddServicesResponse::AddServicesResponse(const AddServicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
}

void AddServicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServicesResponse::~AddServicesResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddServicesResponse::ArenaDtor(void* object) {
  AddServicesResponse* _this = reinterpret_cast< AddServicesResponse* >(object);
  (void)_this;
}
void AddServicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServicesResponse& AddServicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  return target;
}

size_t AddServicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
    MergeFrom(*source);
  }
}

void AddServicesResponse::MergeFrom(const AddServicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServicesResponse::CopyFrom(const AddServicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServicesResponse::IsInitialized() const {
  return true;
}

void AddServicesResponse::InternalSwap(AddServicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServicesResponse, count_)
      + sizeof(AddServicesResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServicesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServicesResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const BulkAddServicesResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
BulkAddServicesResponse::_Internal::status(const BulkAddServicesResponse* msg) {
  return *msg->status_;
}
BulkAddServicesResponse::BulkAddServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
}
BulkAddServicesResponse::BulkAddServicesResponse(const BulkAddServicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
}

void BulkAddServicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddServicesResponse::~BulkAddServicesResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddServicesResponse::ArenaDtor(void* object) {
  BulkAddServicesResponse* _this = reinterpret_cast< BulkAddServicesResponse* >(object);
  (void)_this;
}
void BulkAddServicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServicesResponse& BulkAddServicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServicesResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServicesResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  return target;
}

size_t BulkAddServicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
    MergeFrom(*source);
  }
}

void BulkAddServicesResponse::MergeFrom(const BulkAddServicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddServicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServicesResponse::CopyFrom(const BulkAddServicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServicesResponse::IsInitialized() const {
  return true;
}

void BulkAddServicesResponse::InternalSwap(BulkAddServicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddServicesResponse, count_)
      + sizeof(BulkAddServicesResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddServicesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderMappingRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServiceProviderMappingRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServiceProviderMappingRequest::_Internal::requestheaders(const AddServiceProviderMappingRequest* msg) {
  return *msg->requestheaders_;
}
AddServiceProviderMappingRequest::AddServiceProviderMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
}
AddServiceProviderMappingRequest::AddServiceProviderMappingRequest(const AddServiceProviderMappingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_costperacre().empty()) {
    costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_costperacre(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&machinecount_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(machinecount_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
}

void AddServiceProviderMappingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&machinecount_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(machinecount_));
}

AddServiceProviderMappingRequest::~AddServiceProviderMappingRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderMappingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  costperacre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServiceProviderMappingRequest::ArenaDtor(void* object) {
  AddServiceProviderMappingRequest* _this = reinterpret_cast< AddServiceProviderMappingRequest* >(object);
  (void)_this;
}
void AddServiceProviderMappingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderMappingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderMappingRequest& AddServiceProviderMappingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderMappingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  costperacre_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machinecount_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(machinecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderMappingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceProviderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serviceproviderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 machineCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          machinecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string costPerAcre = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_costperacre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderMappingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 serviceId = 2;
  if (this->serviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_serviceid(), target);
  }

  // int64 serviceProviderId = 3;
  if (this->serviceproviderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_serviceproviderid(), target);
  }

  // int64 machineCount = 4;
  if (this->machinecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_machinecount(), target);
  }

  // string costPerAcre = 5;
  if (this->costperacre().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_costperacre().data(), static_cast<int>(this->_internal_costperacre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_costperacre(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  return target;
}

size_t AddServiceProviderMappingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string costPerAcre = 5;
  if (this->costperacre().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_costperacre());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 serviceId = 2;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serviceid());
  }

  // int64 serviceProviderId = 3;
  if (this->serviceproviderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serviceproviderid());
  }

  // int64 machineCount = 4;
  if (this->machinecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_machinecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderMappingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderMappingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderMappingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
    MergeFrom(*source);
  }
}

void AddServiceProviderMappingRequest::MergeFrom(const AddServiceProviderMappingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.costperacre().size() > 0) {
    _internal_set_costperacre(from._internal_costperacre());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.serviceproviderid() != 0) {
    _internal_set_serviceproviderid(from._internal_serviceproviderid());
  }
  if (from.machinecount() != 0) {
    _internal_set_machinecount(from._internal_machinecount());
  }
}

void AddServiceProviderMappingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderMappingRequest::CopyFrom(const AddServiceProviderMappingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderMappingRequest::IsInitialized() const {
  return true;
}

void AddServiceProviderMappingRequest::InternalSwap(AddServiceProviderMappingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  costperacre_.Swap(&other->costperacre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceProviderMappingRequest, machinecount_)
      + sizeof(AddServiceProviderMappingRequest::machinecount_)
      - PROTOBUF_FIELD_OFFSET(AddServiceProviderMappingRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderMappingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceProviderMappingRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const BulkAddServiceProviderMappingRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
BulkAddServiceProviderMappingRequest::_Internal::requestheaders(const BulkAddServiceProviderMappingRequest* msg) {
  return *msg->requestheaders_;
}
BulkAddServiceProviderMappingRequest::BulkAddServiceProviderMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
}
BulkAddServiceProviderMappingRequest::BulkAddServiceProviderMappingRequest(const BulkAddServiceProviderMappingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
}

void BulkAddServiceProviderMappingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddServiceProviderMappingRequest::~BulkAddServiceProviderMappingRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceProviderMappingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddServiceProviderMappingRequest::ArenaDtor(void* object) {
  BulkAddServiceProviderMappingRequest* _this = reinterpret_cast< BulkAddServiceProviderMappingRequest* >(object);
  (void)_this;
}
void BulkAddServiceProviderMappingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceProviderMappingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceProviderMappingRequest& BulkAddServiceProviderMappingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceProviderMappingRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceProviderMappingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceProviderMappingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceProviderMappingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  return target;
}

size_t BulkAddServiceProviderMappingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceProviderMappingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceProviderMappingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceProviderMappingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
    MergeFrom(*source);
  }
}

void BulkAddServiceProviderMappingRequest::MergeFrom(const BulkAddServiceProviderMappingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddServiceProviderMappingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceProviderMappingRequest::CopyFrom(const BulkAddServiceProviderMappingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceProviderMappingRequest::IsInitialized() const {
  return true;
}

void BulkAddServiceProviderMappingRequest::InternalSwap(BulkAddServiceProviderMappingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceProviderMappingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderMappingResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServiceProviderMappingResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServiceProviderMappingResponse::_Internal::status(const AddServiceProviderMappingResponse* msg) {
  return *msg->status_;
}
AddServiceProviderMappingResponse::AddServiceProviderMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
}
AddServiceProviderMappingResponse::AddServiceProviderMappingResponse(const AddServiceProviderMappingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
}

void AddServiceProviderMappingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServiceProviderMappingResponse::~AddServiceProviderMappingResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderMappingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddServiceProviderMappingResponse::ArenaDtor(void* object) {
  AddServiceProviderMappingResponse* _this = reinterpret_cast< AddServiceProviderMappingResponse* >(object);
  (void)_this;
}
void AddServiceProviderMappingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderMappingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderMappingResponse& AddServiceProviderMappingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderMappingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderMappingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderMappingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  return target;
}

size_t AddServiceProviderMappingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderMappingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderMappingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderMappingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
    MergeFrom(*source);
  }
}

void AddServiceProviderMappingResponse::MergeFrom(const AddServiceProviderMappingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServiceProviderMappingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderMappingResponse::CopyFrom(const AddServiceProviderMappingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderMappingResponse::IsInitialized() const {
  return true;
}

void AddServiceProviderMappingResponse::InternalSwap(AddServiceProviderMappingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceProviderMappingResponse, count_)
      + sizeof(AddServiceProviderMappingResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServiceProviderMappingResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderMappingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceProviderMappingResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const BulkAddServiceProviderMappingResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
BulkAddServiceProviderMappingResponse::_Internal::status(const BulkAddServiceProviderMappingResponse* msg) {
  return *msg->status_;
}
BulkAddServiceProviderMappingResponse::BulkAddServiceProviderMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
}
BulkAddServiceProviderMappingResponse::BulkAddServiceProviderMappingResponse(const BulkAddServiceProviderMappingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
}

void BulkAddServiceProviderMappingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddServiceProviderMappingResponse::~BulkAddServiceProviderMappingResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceProviderMappingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddServiceProviderMappingResponse::ArenaDtor(void* object) {
  BulkAddServiceProviderMappingResponse* _this = reinterpret_cast< BulkAddServiceProviderMappingResponse* >(object);
  (void)_this;
}
void BulkAddServiceProviderMappingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceProviderMappingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceProviderMappingResponse& BulkAddServiceProviderMappingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceProviderMappingResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceProviderMappingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceProviderMappingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceProviderMappingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  return target;
}

size_t BulkAddServiceProviderMappingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceProviderMappingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceProviderMappingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceProviderMappingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
    MergeFrom(*source);
  }
}

void BulkAddServiceProviderMappingResponse::MergeFrom(const BulkAddServiceProviderMappingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddServiceProviderMappingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceProviderMappingResponse::CopyFrom(const BulkAddServiceProviderMappingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceProviderMappingResponse::IsInitialized() const {
  return true;
}

void BulkAddServiceProviderMappingResponse::InternalSwap(BulkAddServiceProviderMappingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddServiceProviderMappingResponse, count_)
      + sizeof(BulkAddServiceProviderMappingResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddServiceProviderMappingResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceProviderMappingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceConfigRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServiceConfigRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServiceConfigRequest::_Internal::requestheaders(const AddServiceConfigRequest* msg) {
  return *msg->requestheaders_;
}
AddServiceConfigRequest::AddServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
}
AddServiceConfigRequest::AddServiceConfigRequest(const AddServiceConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&cropid_, &from.cropid_,
    static_cast<size_t>(reinterpret_cast<char*>(&validtill_) -
    reinterpret_cast<char*>(&cropid_)) + sizeof(validtill_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
}

void AddServiceConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&validtill_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(validtill_));
}

AddServiceConfigRequest::~AddServiceConfigRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServiceConfigRequest::ArenaDtor(void* object) {
  AddServiceConfigRequest* _this = reinterpret_cast< AddServiceConfigRequest* >(object);
  (void)_this;
}
void AddServiceConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceConfigRequest& AddServiceConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicetype_.ClearToEmpty();
  regionname_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&cropid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validtill_) -
      reinterpret_cast<char*>(&cropid_)) + sizeof(validtill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cropId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cropid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceRank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          servicerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 validFrom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          validfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 validTill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          validtill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string serviceType = 2;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servicetype(), target);
  }

  // int64 cropId = 3;
  if (this->cropid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cropid(), target);
  }

  // string regionName = 4;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_regionname(), target);
  }

  // int64 section = 5;
  if (this->section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_section(), target);
  }

  // int64 serviceRank = 6;
  if (this->servicerank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_servicerank(), target);
  }

  // int64 validFrom = 7;
  if (this->validfrom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_validfrom(), target);
  }

  // int64 validTill = 8;
  if (this->validtill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_validtill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  return target;
}

size_t AddServiceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceType = 2;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // string regionName = 4;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 cropId = 3;
  if (this->cropid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cropid());
  }

  // int64 section = 5;
  if (this->section() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_section());
  }

  // int64 serviceRank = 6;
  if (this->servicerank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servicerank());
  }

  // int64 validFrom = 7;
  if (this->validfrom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_validfrom());
  }

  // int64 validTill = 8;
  if (this->validtill() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_validtill());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
    MergeFrom(*source);
  }
}

void AddServiceConfigRequest::MergeFrom(const AddServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.cropid() != 0) {
    _internal_set_cropid(from._internal_cropid());
  }
  if (from.section() != 0) {
    _internal_set_section(from._internal_section());
  }
  if (from.servicerank() != 0) {
    _internal_set_servicerank(from._internal_servicerank());
  }
  if (from.validfrom() != 0) {
    _internal_set_validfrom(from._internal_validfrom());
  }
  if (from.validtill() != 0) {
    _internal_set_validtill(from._internal_validtill());
  }
}

void AddServiceConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceConfigRequest::CopyFrom(const AddServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceConfigRequest::IsInitialized() const {
  return true;
}

void AddServiceConfigRequest::InternalSwap(AddServiceConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceConfigRequest, validtill_)
      + sizeof(AddServiceConfigRequest::validtill_)
      - PROTOBUF_FIELD_OFFSET(AddServiceConfigRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceConfigRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const BulkAddServiceConfigRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
BulkAddServiceConfigRequest::_Internal::requestheaders(const BulkAddServiceConfigRequest* msg) {
  return *msg->requestheaders_;
}
BulkAddServiceConfigRequest::BulkAddServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
}
BulkAddServiceConfigRequest::BulkAddServiceConfigRequest(const BulkAddServiceConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
}

void BulkAddServiceConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddServiceConfigRequest::~BulkAddServiceConfigRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddServiceConfigRequest::ArenaDtor(void* object) {
  BulkAddServiceConfigRequest* _this = reinterpret_cast< BulkAddServiceConfigRequest* >(object);
  (void)_this;
}
void BulkAddServiceConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceConfigRequest& BulkAddServiceConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  return target;
}

size_t BulkAddServiceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
    MergeFrom(*source);
  }
}

void BulkAddServiceConfigRequest::MergeFrom(const BulkAddServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddServiceConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceConfigRequest::CopyFrom(const BulkAddServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceConfigRequest::IsInitialized() const {
  return true;
}

void BulkAddServiceConfigRequest::InternalSwap(BulkAddServiceConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceConfigResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServiceConfigResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServiceConfigResponse::_Internal::status(const AddServiceConfigResponse* msg) {
  return *msg->status_;
}
AddServiceConfigResponse::AddServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
}
AddServiceConfigResponse::AddServiceConfigResponse(const AddServiceConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
}

void AddServiceConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServiceConfigResponse::~AddServiceConfigResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddServiceConfigResponse::ArenaDtor(void* object) {
  AddServiceConfigResponse* _this = reinterpret_cast< AddServiceConfigResponse* >(object);
  (void)_this;
}
void AddServiceConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceConfigResponse& AddServiceConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  return target;
}

size_t AddServiceConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
    MergeFrom(*source);
  }
}

void AddServiceConfigResponse::MergeFrom(const AddServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServiceConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceConfigResponse::CopyFrom(const AddServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceConfigResponse::IsInitialized() const {
  return true;
}

void AddServiceConfigResponse::InternalSwap(AddServiceConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceConfigResponse, count_)
      + sizeof(AddServiceConfigResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServiceConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddServiceConfigResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const BulkAddServiceConfigResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
BulkAddServiceConfigResponse::_Internal::status(const BulkAddServiceConfigResponse* msg) {
  return *msg->status_;
}
BulkAddServiceConfigResponse::BulkAddServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
}
BulkAddServiceConfigResponse::BulkAddServiceConfigResponse(const BulkAddServiceConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
}

void BulkAddServiceConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddServiceConfigResponse::~BulkAddServiceConfigResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddServiceConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddServiceConfigResponse::ArenaDtor(void* object) {
  BulkAddServiceConfigResponse* _this = reinterpret_cast< BulkAddServiceConfigResponse* >(object);
  (void)_this;
}
void BulkAddServiceConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddServiceConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddServiceConfigResponse& BulkAddServiceConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddServiceConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddServiceConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddServiceConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  return target;
}

size_t BulkAddServiceConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddServiceConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddServiceConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddServiceConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
    MergeFrom(*source);
  }
}

void BulkAddServiceConfigResponse::MergeFrom(const BulkAddServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddServiceConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddServiceConfigResponse::CopyFrom(const BulkAddServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddServiceConfigResponse::IsInitialized() const {
  return true;
}

void BulkAddServiceConfigResponse::InternalSwap(BulkAddServiceConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddServiceConfigResponse, count_)
      + sizeof(BulkAddServiceConfigResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddServiceConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddServiceConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceProviderRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceProviderRequest::_Internal::requestheaders(const GetServiceProviderRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceProviderRequest::GetServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cropid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
}
GetServiceProviderRequest::GetServiceProviderRequest(const GetServiceProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cropid_(from.cropid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&page_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
}

void GetServiceProviderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(longitude_));
}

GetServiceProviderRequest::~GetServiceProviderRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceProviderRequest::ArenaDtor(void* object) {
  GetServiceProviderRequest* _this = reinterpret_cast< GetServiceProviderRequest* >(object);
  (void)_this;
}
void GetServiceProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderRequest& GetServiceProviderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cropid_.Clear();
  servicename_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&page_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 cropId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_cropid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_cropid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string serviceName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 page = 6;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_page(), target);
  }

  // int64 offset = 7;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_offset(), target);
  }

  // repeated int64 cropId = 8;
  {
    int byte_size = _cropid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_cropid(), byte_size, target);
    }
  }

  // double latitude = 9;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_latitude(), target);
  }

  // double longitude = 10;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude(), target);
  }

  // string serviceName = 11;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  return target;
}

size_t GetServiceProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 cropId = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->cropid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cropid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string serviceName = 11;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 page = 6;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_page());
  }

  // int64 offset = 7;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // double latitude = 9;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // double longitude = 10;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
    MergeFrom(*source);
  }
}

void GetServiceProviderRequest::MergeFrom(const GetServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cropid_.MergeFrom(from.cropid_);
  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void GetServiceProviderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderRequest::CopyFrom(const GetServiceProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderRequest::IsInitialized() const {
  return true;
}

void GetServiceProviderRequest::InternalSwap(GetServiceProviderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cropid_.InternalSwap(&other->cropid_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderRequest, longitude_)
      + sizeof(GetServiceProviderRequest::longitude_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderResponseRecord::_Internal {
 public:
};

GetServiceProviderResponseRecord::GetServiceProviderResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
}
GetServiceProviderResponseRecord::GetServiceProviderResponseRecord(const GetServiceProviderResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
}

void GetServiceProviderResponseRecord::SharedCtor() {
}

GetServiceProviderResponseRecord::~GetServiceProviderResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServiceProviderResponseRecord::ArenaDtor(void* object) {
  GetServiceProviderResponseRecord* _this = reinterpret_cast< GetServiceProviderResponseRecord* >(object);
  (void)_this;
}
void GetServiceProviderResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderResponseRecord& GetServiceProviderResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  return target;
}

size_t GetServiceProviderResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceProviderResponseRecord::MergeFrom(const GetServiceProviderResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServiceProviderResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderResponseRecord::CopyFrom(const GetServiceProviderResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceProviderResponseRecord::InternalSwap(GetServiceProviderResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceProviderResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceProviderResponse::_Internal::status(const GetServiceProviderResponse* msg) {
  return *msg->status_;
}
GetServiceProviderResponse::GetServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  serviceproviderinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
}
GetServiceProviderResponse::GetServiceProviderResponse(const GetServiceProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      serviceproviderinfo_(from.serviceproviderinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
}

void GetServiceProviderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceProviderResponse::~GetServiceProviderResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceProviderResponse::ArenaDtor(void* object) {
  GetServiceProviderResponse* _this = reinterpret_cast< GetServiceProviderResponse* >(object);
  (void)_this;
}
void GetServiceProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderResponse& GetServiceProviderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  serviceproviderinfo_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.ServiceProviderInfo serviceProviderInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serviceproviderinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceProviderInfo serviceProviderInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_serviceproviderinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_serviceproviderinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  return target;
}

size_t GetServiceProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceProviderInfo serviceProviderInfo = 5;
  total_size += 1UL * this->_internal_serviceproviderinfo_size();
  for (const auto& msg : this->serviceproviderinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
    MergeFrom(*source);
  }
}

void GetServiceProviderResponse::MergeFrom(const GetServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  serviceproviderinfo_.MergeFrom(from.serviceproviderinfo_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceProviderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderResponse::CopyFrom(const GetServiceProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderResponse::IsInitialized() const {
  return true;
}

void GetServiceProviderResponse::InternalSwap(GetServiceProviderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  serviceproviderinfo_.InternalSwap(&other->serviceproviderinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderResponse, count_)
      + sizeof(GetServiceProviderResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceProviderInfo::_Internal {
 public:
};

ServiceProviderInfo::ServiceProviderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
}
ServiceProviderInfo::ServiceProviderInfo(const ServiceProviderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serviceprovidername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceprovidername().empty()) {
    serviceprovidername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceprovidername(), 
      GetArena());
  }
  serviceprovidercontactdetails_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceprovidercontactdetails().empty()) {
    serviceprovidercontactdetails_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceprovidercontactdetails(), 
      GetArena());
  }
  serviceprovideraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceprovideraddress().empty()) {
    serviceprovideraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceprovideraddress(), 
      GetArena());
  }
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_costperacre().empty()) {
    costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_costperacre(), 
      GetArena());
  }
  serviceproviderwhatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceproviderwhatsappnumber().empty()) {
    serviceproviderwhatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceproviderwhatsappnumber(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
}

void ServiceProviderInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  serviceprovidername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceprovidercontactdetails_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceprovideraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceproviderwhatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

ServiceProviderInfo::~ServiceProviderInfo() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceProviderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serviceprovidername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceprovidercontactdetails_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceprovideraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costperacre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceproviderwhatsappnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceProviderInfo::ArenaDtor(void* object) {
  ServiceProviderInfo* _this = reinterpret_cast< ServiceProviderInfo* >(object);
  (void)_this;
}
void ServiceProviderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceProviderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceProviderInfo& ServiceProviderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceProviderInfo_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceProviderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceprovidername_.ClearToEmpty();
  serviceprovidercontactdetails_.ClearToEmpty();
  serviceprovideraddress_.ClearToEmpty();
  costperacre_.ClearToEmpty();
  serviceproviderwhatsappnumber_.ClearToEmpty();
  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceProviderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceProviderName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serviceprovidername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceProviderContactDetails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serviceprovidercontactdetails();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceProviderAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serviceprovideraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string costPerAcre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_costperacre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string serviceProviderWhatsappNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_serviceproviderwhatsappnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceProviderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceProviderName = 1;
  if (this->serviceprovidername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceprovidername().data(), static_cast<int>(this->_internal_serviceprovidername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceprovidername(), target);
  }

  // string serviceProviderContactDetails = 2;
  if (this->serviceprovidercontactdetails().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceprovidercontactdetails().data(), static_cast<int>(this->_internal_serviceprovidercontactdetails().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serviceprovidercontactdetails(), target);
  }

  // string serviceProviderAddress = 3;
  if (this->serviceprovideraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceprovideraddress().data(), static_cast<int>(this->_internal_serviceprovideraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceprovideraddress(), target);
  }

  // string costPerAcre = 4;
  if (this->costperacre().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_costperacre().data(), static_cast<int>(this->_internal_costperacre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_costperacre(), target);
  }

  // double distance = 5;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  // string serviceProviderWhatsappNumber = 6;
  if (this->serviceproviderwhatsappnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceproviderwhatsappnumber().data(), static_cast<int>(this->_internal_serviceproviderwhatsappnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_serviceproviderwhatsappnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  return target;
}

size_t ServiceProviderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceProviderName = 1;
  if (this->serviceprovidername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceprovidername());
  }

  // string serviceProviderContactDetails = 2;
  if (this->serviceprovidercontactdetails().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceprovidercontactdetails());
  }

  // string serviceProviderAddress = 3;
  if (this->serviceprovideraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceprovideraddress());
  }

  // string costPerAcre = 4;
  if (this->costperacre().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_costperacre());
  }

  // string serviceProviderWhatsappNumber = 6;
  if (this->serviceproviderwhatsappnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceproviderwhatsappnumber());
  }

  // double distance = 5;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceProviderInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceProviderInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceProviderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
    MergeFrom(*source);
  }
}

void ServiceProviderInfo::MergeFrom(const ServiceProviderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serviceprovidername().size() > 0) {
    _internal_set_serviceprovidername(from._internal_serviceprovidername());
  }
  if (from.serviceprovidercontactdetails().size() > 0) {
    _internal_set_serviceprovidercontactdetails(from._internal_serviceprovidercontactdetails());
  }
  if (from.serviceprovideraddress().size() > 0) {
    _internal_set_serviceprovideraddress(from._internal_serviceprovideraddress());
  }
  if (from.costperacre().size() > 0) {
    _internal_set_costperacre(from._internal_costperacre());
  }
  if (from.serviceproviderwhatsappnumber().size() > 0) {
    _internal_set_serviceproviderwhatsappnumber(from._internal_serviceproviderwhatsappnumber());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void ServiceProviderInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceProviderInfo::CopyFrom(const ServiceProviderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceProviderInfo::IsInitialized() const {
  return true;
}

void ServiceProviderInfo::InternalSwap(ServiceProviderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serviceprovidername_.Swap(&other->serviceprovidername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serviceprovidercontactdetails_.Swap(&other->serviceprovidercontactdetails_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serviceprovideraddress_.Swap(&other->serviceprovideraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  costperacre_.Swap(&other->costperacre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serviceproviderwhatsappnumber_.Swap(&other->serviceproviderwhatsappnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceProviderInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderFromExcelRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const AddServiceProviderFromExcelRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
AddServiceProviderFromExcelRequest::_Internal::requestheaders(const AddServiceProviderFromExcelRequest* msg) {
  return *msg->requestheaders_;
}
AddServiceProviderFromExcelRequest::AddServiceProviderFromExcelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
}
AddServiceProviderFromExcelRequest::AddServiceProviderFromExcelRequest(const AddServiceProviderFromExcelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csv().empty()) {
    csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csv(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
}

void AddServiceProviderFromExcelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

AddServiceProviderFromExcelRequest::~AddServiceProviderFromExcelRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderFromExcelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  csv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddServiceProviderFromExcelRequest::ArenaDtor(void* object) {
  AddServiceProviderFromExcelRequest* _this = reinterpret_cast< AddServiceProviderFromExcelRequest* >(object);
  (void)_this;
}
void AddServiceProviderFromExcelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderFromExcelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderFromExcelRequest& AddServiceProviderFromExcelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderFromExcelRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderFromExcelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csv_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderFromExcelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string csv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_csv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderFromExcelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string csv = 6;
  if (this->csv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csv().data(), static_cast<int>(this->_internal_csv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_csv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  return target;
}

size_t AddServiceProviderFromExcelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string csv = 6;
  if (this->csv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csv());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderFromExcelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderFromExcelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderFromExcelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
    MergeFrom(*source);
  }
}

void AddServiceProviderFromExcelRequest::MergeFrom(const AddServiceProviderFromExcelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.csv().size() > 0) {
    _internal_set_csv(from._internal_csv());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void AddServiceProviderFromExcelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderFromExcelRequest::CopyFrom(const AddServiceProviderFromExcelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderFromExcelRequest::IsInitialized() const {
  return true;
}

void AddServiceProviderFromExcelRequest::InternalSwap(AddServiceProviderFromExcelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  csv_.Swap(&other->csv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceProviderFromExcelRequest, isstaleallowed_)
      + sizeof(AddServiceProviderFromExcelRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(AddServiceProviderFromExcelRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderFromExcelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderFromExcelResponseRecord::_Internal {
 public:
};

AddServiceProviderFromExcelResponseRecord::AddServiceProviderFromExcelResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
}
AddServiceProviderFromExcelResponseRecord::AddServiceProviderFromExcelResponseRecord(const AddServiceProviderFromExcelResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
}

void AddServiceProviderFromExcelResponseRecord::SharedCtor() {
}

AddServiceProviderFromExcelResponseRecord::~AddServiceProviderFromExcelResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderFromExcelResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddServiceProviderFromExcelResponseRecord::ArenaDtor(void* object) {
  AddServiceProviderFromExcelResponseRecord* _this = reinterpret_cast< AddServiceProviderFromExcelResponseRecord* >(object);
  (void)_this;
}
void AddServiceProviderFromExcelResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderFromExcelResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderFromExcelResponseRecord& AddServiceProviderFromExcelResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderFromExcelResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderFromExcelResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderFromExcelResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderFromExcelResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  return target;
}

size_t AddServiceProviderFromExcelResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderFromExcelResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderFromExcelResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderFromExcelResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
    MergeFrom(*source);
  }
}

void AddServiceProviderFromExcelResponseRecord::MergeFrom(const AddServiceProviderFromExcelResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddServiceProviderFromExcelResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderFromExcelResponseRecord::CopyFrom(const AddServiceProviderFromExcelResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderFromExcelResponseRecord::IsInitialized() const {
  return true;
}

void AddServiceProviderFromExcelResponseRecord::InternalSwap(AddServiceProviderFromExcelResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderFromExcelResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddServiceProviderFromExcelResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const AddServiceProviderFromExcelResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
AddServiceProviderFromExcelResponse::_Internal::status(const AddServiceProviderFromExcelResponse* msg) {
  return *msg->status_;
}
AddServiceProviderFromExcelResponse::AddServiceProviderFromExcelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  addserviceproviderrequest_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
}
AddServiceProviderFromExcelResponse::AddServiceProviderFromExcelResponse(const AddServiceProviderFromExcelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      addserviceproviderrequest_(from.addserviceproviderrequest_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
}

void AddServiceProviderFromExcelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddServiceProviderFromExcelResponse::~AddServiceProviderFromExcelResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddServiceProviderFromExcelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void AddServiceProviderFromExcelResponse::ArenaDtor(void* object) {
  AddServiceProviderFromExcelResponse* _this = reinterpret_cast< AddServiceProviderFromExcelResponse* >(object);
  (void)_this;
}
void AddServiceProviderFromExcelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddServiceProviderFromExcelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddServiceProviderFromExcelResponse& AddServiceProviderFromExcelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddServiceProviderFromExcelResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddServiceProviderFromExcelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  addserviceproviderrequest_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddServiceProviderFromExcelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest addServiceProviderRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addserviceproviderrequest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddServiceProviderFromExcelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest addServiceProviderRequest = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addserviceproviderrequest_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_addserviceproviderrequest(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  return target;
}

size_t AddServiceProviderFromExcelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest addServiceProviderRequest = 5;
  total_size += 1UL * this->_internal_addserviceproviderrequest_size();
  for (const auto& msg : this->addserviceproviderrequest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddServiceProviderFromExcelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddServiceProviderFromExcelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddServiceProviderFromExcelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
    MergeFrom(*source);
  }
}

void AddServiceProviderFromExcelResponse::MergeFrom(const AddServiceProviderFromExcelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  addserviceproviderrequest_.MergeFrom(from.addserviceproviderrequest_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddServiceProviderFromExcelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddServiceProviderFromExcelResponse::CopyFrom(const AddServiceProviderFromExcelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddServiceProviderFromExcelResponse::IsInitialized() const {
  return true;
}

void AddServiceProviderFromExcelResponse::InternalSwap(AddServiceProviderFromExcelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  addserviceproviderrequest_.InternalSwap(&other->addserviceproviderrequest_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddServiceProviderFromExcelResponse, count_)
      + sizeof(AddServiceProviderFromExcelResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddServiceProviderFromExcelResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddServiceProviderFromExcelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSDTVOnLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetSDTVOnLatLongRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetSDTVOnLatLongRequest::_Internal::requestheaders(const GetSDTVOnLatLongRequest* msg) {
  return *msg->requestheaders_;
}
GetSDTVOnLatLongRequest::GetSDTVOnLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
}
GetSDTVOnLatLongRequest::GetSDTVOnLatLongRequest(const GetSDTVOnLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&isstaleallowed_, &from.isstaleallowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
}

void GetSDTVOnLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(longitude_));
}

GetSDTVOnLatLongRequest::~GetSDTVOnLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSDTVOnLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetSDTVOnLatLongRequest::ArenaDtor(void* object) {
  GetSDTVOnLatLongRequest* _this = reinterpret_cast< GetSDTVOnLatLongRequest* >(object);
  (void)_this;
}
void GetSDTVOnLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSDTVOnLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSDTVOnLatLongRequest& GetSDTVOnLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSDTVOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSDTVOnLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&isstaleallowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSDTVOnLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSDTVOnLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_latitude(), target);
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  return target;
}

size_t GetSDTVOnLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSDTVOnLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSDTVOnLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSDTVOnLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
    MergeFrom(*source);
  }
}

void GetSDTVOnLatLongRequest::MergeFrom(const GetSDTVOnLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void GetSDTVOnLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSDTVOnLatLongRequest::CopyFrom(const GetSDTVOnLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSDTVOnLatLongRequest::IsInitialized() const {
  return true;
}

void GetSDTVOnLatLongRequest::InternalSwap(GetSDTVOnLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSDTVOnLatLongRequest, longitude_)
      + sizeof(GetSDTVOnLatLongRequest::longitude_)
      - PROTOBUF_FIELD_OFFSET(GetSDTVOnLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSDTVOnLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSDTVOnLatLongResponseRecord::_Internal {
 public:
};

GetSDTVOnLatLongResponseRecord::GetSDTVOnLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
}
GetSDTVOnLatLongResponseRecord::GetSDTVOnLatLongResponseRecord(const GetSDTVOnLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
}

void GetSDTVOnLatLongResponseRecord::SharedCtor() {
}

GetSDTVOnLatLongResponseRecord::~GetSDTVOnLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSDTVOnLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSDTVOnLatLongResponseRecord::ArenaDtor(void* object) {
  GetSDTVOnLatLongResponseRecord* _this = reinterpret_cast< GetSDTVOnLatLongResponseRecord* >(object);
  (void)_this;
}
void GetSDTVOnLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSDTVOnLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSDTVOnLatLongResponseRecord& GetSDTVOnLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSDTVOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSDTVOnLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSDTVOnLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSDTVOnLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  return target;
}

size_t GetSDTVOnLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSDTVOnLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSDTVOnLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSDTVOnLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void GetSDTVOnLatLongResponseRecord::MergeFrom(const GetSDTVOnLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSDTVOnLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSDTVOnLatLongResponseRecord::CopyFrom(const GetSDTVOnLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSDTVOnLatLongResponseRecord::IsInitialized() const {
  return true;
}

void GetSDTVOnLatLongResponseRecord::InternalSwap(GetSDTVOnLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSDTVOnLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSDTVOnLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetSDTVOnLatLongResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetSDTVOnLatLongResponse::_Internal::status(const GetSDTVOnLatLongResponse* msg) {
  return *msg->status_;
}
GetSDTVOnLatLongResponse::GetSDTVOnLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
}
GetSDTVOnLatLongResponse::GetSDTVOnLatLongResponse(const GetSDTVOnLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  villagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_villagename().empty()) {
    villagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_villagename(), 
      GetArena());
  }
  tehsilname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsilname().empty()) {
    tehsilname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsilname(), 
      GetArena());
  }
  districtname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_districtname().empty()) {
    districtname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_districtname(), 
      GetArena());
  }
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  zonename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zonename().empty()) {
    zonename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zonename(), 
      GetArena());
  }
  villagecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_villagecode().empty()) {
    villagecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_villagecode(), 
      GetArena());
  }
  tehsilcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tehsilcode().empty()) {
    tehsilcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tehsilcode(), 
      GetArena());
  }
  districtcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_districtcode().empty()) {
    districtcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_districtcode(), 
      GetArena());
  }
  regioncode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regioncode().empty()) {
    regioncode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regioncode(), 
      GetArena());
  }
  zonecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zonecode().empty()) {
    zonecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zonecode(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&regionid_, &from.regionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&regionid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
}

void GetSDTVOnLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  villagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zonename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  villagecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regioncode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zonecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetSDTVOnLatLongResponse::~GetSDTVOnLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSDTVOnLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  villagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zonename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  villagecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tehsilcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  districtcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regioncode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zonecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetSDTVOnLatLongResponse::ArenaDtor(void* object) {
  GetSDTVOnLatLongResponse* _this = reinterpret_cast< GetSDTVOnLatLongResponse* >(object);
  (void)_this;
}
void GetSDTVOnLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSDTVOnLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSDTVOnLatLongResponse& GetSDTVOnLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSDTVOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSDTVOnLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  villagename_.ClearToEmpty();
  tehsilname_.ClearToEmpty();
  districtname_.ClearToEmpty();
  regionname_.ClearToEmpty();
  zonename_.ClearToEmpty();
  villagecode_.ClearToEmpty();
  tehsilcode_.ClearToEmpty();
  districtcode_.ClearToEmpty();
  regioncode_.ClearToEmpty();
  zonecode_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&regionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&regionid_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSDTVOnLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 regionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          regionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 villageId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          villageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tehsilId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tehsilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 districtId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          districtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 zoneId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          zoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string villageName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_villagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsilName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_tehsilname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string districtName = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_districtname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zoneName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_zonename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string villageCode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_villagecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tehsilCode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_tehsilcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string districtCode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_districtcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionCode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regioncode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zoneCode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_zonecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSDTVOnLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // int64 regionId = 5;
  if (this->regionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_regionid(), target);
  }

  // int64 villageId = 6;
  if (this->villageid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_villageid(), target);
  }

  // int64 tehsilId = 7;
  if (this->tehsilid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_tehsilid(), target);
  }

  // int64 districtId = 8;
  if (this->districtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_districtid(), target);
  }

  // int64 zoneId = 9;
  if (this->zoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_zoneid(), target);
  }

  // string villageName = 10;
  if (this->villagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_villagename().data(), static_cast<int>(this->_internal_villagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_villagename(), target);
  }

  // string tehsilName = 11;
  if (this->tehsilname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsilname().data(), static_cast<int>(this->_internal_tehsilname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_tehsilname(), target);
  }

  // string districtName = 12;
  if (this->districtname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_districtname().data(), static_cast<int>(this->_internal_districtname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_districtname(), target);
  }

  // string regionName = 13;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_regionname(), target);
  }

  // string zoneName = 14;
  if (this->zonename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zonename().data(), static_cast<int>(this->_internal_zonename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_zonename(), target);
  }

  // string villageCode = 15;
  if (this->villagecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_villagecode().data(), static_cast<int>(this->_internal_villagecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_villagecode(), target);
  }

  // string tehsilCode = 16;
  if (this->tehsilcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tehsilcode().data(), static_cast<int>(this->_internal_tehsilcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_tehsilcode(), target);
  }

  // string districtCode = 17;
  if (this->districtcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_districtcode().data(), static_cast<int>(this->_internal_districtcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_districtcode(), target);
  }

  // string regionCode = 18;
  if (this->regioncode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regioncode().data(), static_cast<int>(this->_internal_regioncode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regioncode(), target);
  }

  // string zoneCode = 19;
  if (this->zonecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zonecode().data(), static_cast<int>(this->_internal_zonecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_zonecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  return target;
}

size_t GetSDTVOnLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string villageName = 10;
  if (this->villagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_villagename());
  }

  // string tehsilName = 11;
  if (this->tehsilname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsilname());
  }

  // string districtName = 12;
  if (this->districtname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_districtname());
  }

  // string regionName = 13;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // string zoneName = 14;
  if (this->zonename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zonename());
  }

  // string villageCode = 15;
  if (this->villagecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_villagecode());
  }

  // string tehsilCode = 16;
  if (this->tehsilcode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tehsilcode());
  }

  // string districtCode = 17;
  if (this->districtcode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_districtcode());
  }

  // string regionCode = 18;
  if (this->regioncode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regioncode());
  }

  // string zoneCode = 19;
  if (this->zonecode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zonecode());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 regionId = 5;
  if (this->regionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_regionid());
  }

  // int64 villageId = 6;
  if (this->villageid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_villageid());
  }

  // int64 tehsilId = 7;
  if (this->tehsilid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tehsilid());
  }

  // int64 districtId = 8;
  if (this->districtid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_districtid());
  }

  // int64 zoneId = 9;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_zoneid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSDTVOnLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSDTVOnLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSDTVOnLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
    MergeFrom(*source);
  }
}

void GetSDTVOnLatLongResponse::MergeFrom(const GetSDTVOnLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.villagename().size() > 0) {
    _internal_set_villagename(from._internal_villagename());
  }
  if (from.tehsilname().size() > 0) {
    _internal_set_tehsilname(from._internal_tehsilname());
  }
  if (from.districtname().size() > 0) {
    _internal_set_districtname(from._internal_districtname());
  }
  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.zonename().size() > 0) {
    _internal_set_zonename(from._internal_zonename());
  }
  if (from.villagecode().size() > 0) {
    _internal_set_villagecode(from._internal_villagecode());
  }
  if (from.tehsilcode().size() > 0) {
    _internal_set_tehsilcode(from._internal_tehsilcode());
  }
  if (from.districtcode().size() > 0) {
    _internal_set_districtcode(from._internal_districtcode());
  }
  if (from.regioncode().size() > 0) {
    _internal_set_regioncode(from._internal_regioncode());
  }
  if (from.zonecode().size() > 0) {
    _internal_set_zonecode(from._internal_zonecode());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.regionid() != 0) {
    _internal_set_regionid(from._internal_regionid());
  }
  if (from.villageid() != 0) {
    _internal_set_villageid(from._internal_villageid());
  }
  if (from.tehsilid() != 0) {
    _internal_set_tehsilid(from._internal_tehsilid());
  }
  if (from.districtid() != 0) {
    _internal_set_districtid(from._internal_districtid());
  }
  if (from.zoneid() != 0) {
    _internal_set_zoneid(from._internal_zoneid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetSDTVOnLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSDTVOnLatLongResponse::CopyFrom(const GetSDTVOnLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSDTVOnLatLongResponse::IsInitialized() const {
  return true;
}

void GetSDTVOnLatLongResponse::InternalSwap(GetSDTVOnLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  villagename_.Swap(&other->villagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsilname_.Swap(&other->tehsilname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  districtname_.Swap(&other->districtname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zonename_.Swap(&other->zonename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  villagecode_.Swap(&other->villagecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tehsilcode_.Swap(&other->tehsilcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  districtcode_.Swap(&other->districtcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  regioncode_.Swap(&other->regioncode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zonecode_.Swap(&other->zonecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSDTVOnLatLongResponse, count_)
      + sizeof(GetSDTVOnLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetSDTVOnLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSDTVOnLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceDetailsOnLatLongRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceDetailsOnLatLongRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceDetailsOnLatLongRequest::_Internal::requestheaders(const GetServiceDetailsOnLatLongRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceDetailsOnLatLongRequest::GetServiceDetailsOnLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
}
GetServiceDetailsOnLatLongRequest::GetServiceDetailsOnLatLongRequest(const GetServiceDetailsOnLatLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&isstaleallowed_, &from.isstaleallowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
}

void GetServiceDetailsOnLatLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(longitude_));
}

GetServiceDetailsOnLatLongRequest::~GetServiceDetailsOnLatLongRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceDetailsOnLatLongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceDetailsOnLatLongRequest::ArenaDtor(void* object) {
  GetServiceDetailsOnLatLongRequest* _this = reinterpret_cast< GetServiceDetailsOnLatLongRequest* >(object);
  (void)_this;
}
void GetServiceDetailsOnLatLongRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceDetailsOnLatLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceDetailsOnLatLongRequest& GetServiceDetailsOnLatLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceDetailsOnLatLongRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceDetailsOnLatLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&isstaleallowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&isstaleallowed_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceDetailsOnLatLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceDetailsOnLatLongRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_latitude(), target);
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  return target;
}

size_t GetServiceDetailsOnLatLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceDetailsOnLatLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceDetailsOnLatLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceDetailsOnLatLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
    MergeFrom(*source);
  }
}

void GetServiceDetailsOnLatLongRequest::MergeFrom(const GetServiceDetailsOnLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void GetServiceDetailsOnLatLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceDetailsOnLatLongRequest::CopyFrom(const GetServiceDetailsOnLatLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceDetailsOnLatLongRequest::IsInitialized() const {
  return true;
}

void GetServiceDetailsOnLatLongRequest::InternalSwap(GetServiceDetailsOnLatLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceDetailsOnLatLongRequest, longitude_)
      + sizeof(GetServiceDetailsOnLatLongRequest::longitude_)
      - PROTOBUF_FIELD_OFFSET(GetServiceDetailsOnLatLongRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceDetailsOnLatLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceDetailsOnLatLongResponseRecord::_Internal {
 public:
};

GetServiceDetailsOnLatLongResponseRecord::GetServiceDetailsOnLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
}
GetServiceDetailsOnLatLongResponseRecord::GetServiceDetailsOnLatLongResponseRecord(const GetServiceDetailsOnLatLongResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
}

void GetServiceDetailsOnLatLongResponseRecord::SharedCtor() {
}

GetServiceDetailsOnLatLongResponseRecord::~GetServiceDetailsOnLatLongResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceDetailsOnLatLongResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServiceDetailsOnLatLongResponseRecord::ArenaDtor(void* object) {
  GetServiceDetailsOnLatLongResponseRecord* _this = reinterpret_cast< GetServiceDetailsOnLatLongResponseRecord* >(object);
  (void)_this;
}
void GetServiceDetailsOnLatLongResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceDetailsOnLatLongResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceDetailsOnLatLongResponseRecord& GetServiceDetailsOnLatLongResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceDetailsOnLatLongResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceDetailsOnLatLongResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceDetailsOnLatLongResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceDetailsOnLatLongResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  return target;
}

size_t GetServiceDetailsOnLatLongResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceDetailsOnLatLongResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceDetailsOnLatLongResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceDetailsOnLatLongResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceDetailsOnLatLongResponseRecord::MergeFrom(const GetServiceDetailsOnLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServiceDetailsOnLatLongResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceDetailsOnLatLongResponseRecord::CopyFrom(const GetServiceDetailsOnLatLongResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceDetailsOnLatLongResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceDetailsOnLatLongResponseRecord::InternalSwap(GetServiceDetailsOnLatLongResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceDetailsOnLatLongResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceDetailsOnLatLongResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceDetailsOnLatLongResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceDetailsOnLatLongResponse::_Internal::status(const GetServiceDetailsOnLatLongResponse* msg) {
  return *msg->status_;
}
GetServiceDetailsOnLatLongResponse::GetServiceDetailsOnLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  servicedetailsresponse_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
}
GetServiceDetailsOnLatLongResponse::GetServiceDetailsOnLatLongResponse(const GetServiceDetailsOnLatLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      servicedetailsresponse_(from.servicedetailsresponse_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
}

void GetServiceDetailsOnLatLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceDetailsOnLatLongResponse::~GetServiceDetailsOnLatLongResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceDetailsOnLatLongResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceDetailsOnLatLongResponse::ArenaDtor(void* object) {
  GetServiceDetailsOnLatLongResponse* _this = reinterpret_cast< GetServiceDetailsOnLatLongResponse* >(object);
  (void)_this;
}
void GetServiceDetailsOnLatLongResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceDetailsOnLatLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceDetailsOnLatLongResponse& GetServiceDetailsOnLatLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceDetailsOnLatLongResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceDetailsOnLatLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  servicedetailsresponse_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceDetailsOnLatLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servicedetailsresponse(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceDetailsOnLatLongResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servicedetailsresponse_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_servicedetailsresponse(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  return target;
}

size_t GetServiceDetailsOnLatLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  total_size += 1UL * this->_internal_servicedetailsresponse_size();
  for (const auto& msg : this->servicedetailsresponse_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceDetailsOnLatLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceDetailsOnLatLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceDetailsOnLatLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
    MergeFrom(*source);
  }
}

void GetServiceDetailsOnLatLongResponse::MergeFrom(const GetServiceDetailsOnLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  servicedetailsresponse_.MergeFrom(from.servicedetailsresponse_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceDetailsOnLatLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceDetailsOnLatLongResponse::CopyFrom(const GetServiceDetailsOnLatLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceDetailsOnLatLongResponse::IsInitialized() const {
  return true;
}

void GetServiceDetailsOnLatLongResponse::InternalSwap(GetServiceDetailsOnLatLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  servicedetailsresponse_.InternalSwap(&other->servicedetailsresponse_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceDetailsOnLatLongResponse, count_)
      + sizeof(GetServiceDetailsOnLatLongResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceDetailsOnLatLongResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceDetailsOnLatLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceDetailsResponse::_Internal {
 public:
};

ServiceDetailsResponse::ServiceDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
}
ServiceDetailsResponse::ServiceDetailsResponse(const ServiceDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  imageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageurl().empty()) {
    imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imageurl(), 
      GetArena());
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&section_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(section_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
}

void ServiceDetailsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&section_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(section_));
}

ServiceDetailsResponse::~ServiceDetailsResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDetailsResponse::ArenaDtor(void* object) {
  ServiceDetailsResponse* _this = reinterpret_cast< ServiceDetailsResponse* >(object);
  (void)_this;
}
void ServiceDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDetailsResponse& ServiceDetailsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDetailsResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicetype_.ClearToEmpty();
  imageurl_.ClearToEmpty();
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&section_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(section_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imageUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imageurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicetype(), target);
  }

  // string imageUrl = 2;
  if (this->imageurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageurl().data(), static_cast<int>(this->_internal_imageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imageurl(), target);
  }

  // int64 rank = 3;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_rank(), target);
  }

  // int64 section = 4;
  if (this->section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_section(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  return target;
}

size_t ServiceDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // string imageUrl = 2;
  if (this->imageurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageurl());
  }

  // int64 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rank());
  }

  // int64 section = 4;
  if (this->section() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_section());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
    MergeFrom(*source);
  }
}

void ServiceDetailsResponse::MergeFrom(const ServiceDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.imageurl().size() > 0) {
    _internal_set_imageurl(from._internal_imageurl());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.section() != 0) {
    _internal_set_section(from._internal_section());
  }
}

void ServiceDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDetailsResponse::CopyFrom(const ServiceDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDetailsResponse::IsInitialized() const {
  return true;
}

void ServiceDetailsResponse::InternalSwap(ServiceDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageurl_.Swap(&other->imageurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDetailsResponse, section_)
      + sizeof(ServiceDetailsResponse::section_)
      - PROTOBUF_FIELD_OFFSET(ServiceDetailsResponse, rank_)>(
          reinterpret_cast<char*>(&rank_),
          reinterpret_cast<char*>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServicesOnServiceNameAndServiceTypeRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServicesOnServiceNameAndServiceTypeRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServicesOnServiceNameAndServiceTypeRequest::_Internal::requestheaders(const GetServicesOnServiceNameAndServiceTypeRequest* msg) {
  return *msg->requestheaders_;
}
GetServicesOnServiceNameAndServiceTypeRequest::GetServicesOnServiceNameAndServiceTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
}
GetServicesOnServiceNameAndServiceTypeRequest::GetServicesOnServiceNameAndServiceTypeRequest(const GetServicesOnServiceNameAndServiceTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
}

void GetServicesOnServiceNameAndServiceTypeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServicesOnServiceNameAndServiceTypeRequest::~GetServicesOnServiceNameAndServiceTypeRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServicesOnServiceNameAndServiceTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServicesOnServiceNameAndServiceTypeRequest::ArenaDtor(void* object) {
  GetServicesOnServiceNameAndServiceTypeRequest* _this = reinterpret_cast< GetServicesOnServiceNameAndServiceTypeRequest* >(object);
  (void)_this;
}
void GetServicesOnServiceNameAndServiceTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServicesOnServiceNameAndServiceTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServicesOnServiceNameAndServiceTypeRequest& GetServicesOnServiceNameAndServiceTypeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServicesOnServiceNameAndServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServicesOnServiceNameAndServiceTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty();
  servicetype_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServicesOnServiceNameAndServiceTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServicesOnServiceNameAndServiceTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string serviceName = 3;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_servicename(), target);
  }

  // string serviceType = 4;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  return target;
}

size_t GetServicesOnServiceNameAndServiceTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 3;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string serviceType = 4;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServicesOnServiceNameAndServiceTypeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServicesOnServiceNameAndServiceTypeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServicesOnServiceNameAndServiceTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
    MergeFrom(*source);
  }
}

void GetServicesOnServiceNameAndServiceTypeRequest::MergeFrom(const GetServicesOnServiceNameAndServiceTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServicesOnServiceNameAndServiceTypeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicesOnServiceNameAndServiceTypeRequest::CopyFrom(const GetServicesOnServiceNameAndServiceTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicesOnServiceNameAndServiceTypeRequest::IsInitialized() const {
  return true;
}

void GetServicesOnServiceNameAndServiceTypeRequest::InternalSwap(GetServicesOnServiceNameAndServiceTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServicesOnServiceNameAndServiceTypeRequest, isstaleallowed_)
      + sizeof(GetServicesOnServiceNameAndServiceTypeRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServicesOnServiceNameAndServiceTypeRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServicesOnServiceNameAndServiceTypeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServicesOnServiceNameAndServiceTypeResponseRecord::_Internal {
 public:
};

GetServicesOnServiceNameAndServiceTypeResponseRecord::GetServicesOnServiceNameAndServiceTypeResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
}
GetServicesOnServiceNameAndServiceTypeResponseRecord::GetServicesOnServiceNameAndServiceTypeResponseRecord(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

GetServicesOnServiceNameAndServiceTypeResponseRecord::~GetServicesOnServiceNameAndServiceTypeResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::ArenaDtor(void* object) {
  GetServicesOnServiceNameAndServiceTypeResponseRecord* _this = reinterpret_cast< GetServicesOnServiceNameAndServiceTypeResponseRecord* >(object);
  (void)_this;
}
void GetServicesOnServiceNameAndServiceTypeResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServicesOnServiceNameAndServiceTypeResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServicesOnServiceNameAndServiceTypeResponseRecord& GetServicesOnServiceNameAndServiceTypeResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServicesOnServiceNameAndServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServicesOnServiceNameAndServiceTypeResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty();
  servicetype_.ClearToEmpty();
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServicesOnServiceNameAndServiceTypeResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServicesOnServiceNameAndServiceTypeResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string serviceName = 2;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servicename(), target);
  }

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_servicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  return target;
}

size_t GetServicesOnServiceNameAndServiceTypeResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 2;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServicesOnServiceNameAndServiceTypeResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServicesOnServiceNameAndServiceTypeResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
    MergeFrom(*source);
  }
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::MergeFrom(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::CopyFrom(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicesOnServiceNameAndServiceTypeResponseRecord::IsInitialized() const {
  return true;
}

void GetServicesOnServiceNameAndServiceTypeResponseRecord::InternalSwap(GetServicesOnServiceNameAndServiceTypeResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServicesOnServiceNameAndServiceTypeResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServicesOnServiceNameAndServiceTypeResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServicesOnServiceNameAndServiceTypeResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServicesOnServiceNameAndServiceTypeResponse::_Internal::status(const GetServicesOnServiceNameAndServiceTypeResponse* msg) {
  return *msg->status_;
}
GetServicesOnServiceNameAndServiceTypeResponse::GetServicesOnServiceNameAndServiceTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
}
GetServicesOnServiceNameAndServiceTypeResponse::GetServicesOnServiceNameAndServiceTypeResponse(const GetServicesOnServiceNameAndServiceTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
}

void GetServicesOnServiceNameAndServiceTypeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServicesOnServiceNameAndServiceTypeResponse::~GetServicesOnServiceNameAndServiceTypeResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServicesOnServiceNameAndServiceTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServicesOnServiceNameAndServiceTypeResponse::ArenaDtor(void* object) {
  GetServicesOnServiceNameAndServiceTypeResponse* _this = reinterpret_cast< GetServicesOnServiceNameAndServiceTypeResponse* >(object);
  (void)_this;
}
void GetServicesOnServiceNameAndServiceTypeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServicesOnServiceNameAndServiceTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServicesOnServiceNameAndServiceTypeResponse& GetServicesOnServiceNameAndServiceTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServicesOnServiceNameAndServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServicesOnServiceNameAndServiceTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServicesOnServiceNameAndServiceTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServicesOnServiceNameAndServiceTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  return target;
}

size_t GetServicesOnServiceNameAndServiceTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServicesOnServiceNameAndServiceTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServicesOnServiceNameAndServiceTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServicesOnServiceNameAndServiceTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
    MergeFrom(*source);
  }
}

void GetServicesOnServiceNameAndServiceTypeResponse::MergeFrom(const GetServicesOnServiceNameAndServiceTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServicesOnServiceNameAndServiceTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicesOnServiceNameAndServiceTypeResponse::CopyFrom(const GetServicesOnServiceNameAndServiceTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicesOnServiceNameAndServiceTypeResponse::IsInitialized() const {
  return true;
}

void GetServicesOnServiceNameAndServiceTypeResponse::InternalSwap(GetServicesOnServiceNameAndServiceTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServicesOnServiceNameAndServiceTypeResponse, count_)
      + sizeof(GetServicesOnServiceNameAndServiceTypeResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServicesOnServiceNameAndServiceTypeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServicesOnServiceNameAndServiceTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnMobileNumberRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceProviderOnMobileNumberRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceProviderOnMobileNumberRequest::_Internal::requestheaders(const GetServiceProviderOnMobileNumberRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceProviderOnMobileNumberRequest::GetServiceProviderOnMobileNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
}
GetServiceProviderOnMobileNumberRequest::GetServiceProviderOnMobileNumberRequest(const GetServiceProviderOnMobileNumberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
}

void GetServiceProviderOnMobileNumberRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceProviderOnMobileNumberRequest::~GetServiceProviderOnMobileNumberRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnMobileNumberRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceProviderOnMobileNumberRequest::ArenaDtor(void* object) {
  GetServiceProviderOnMobileNumberRequest* _this = reinterpret_cast< GetServiceProviderOnMobileNumberRequest* >(object);
  (void)_this;
}
void GetServiceProviderOnMobileNumberRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnMobileNumberRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnMobileNumberRequest& GetServiceProviderOnMobileNumberRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnMobileNumberRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnMobileNumberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnMobileNumberRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnMobileNumberRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  return target;
}

size_t GetServiceProviderOnMobileNumberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnMobileNumberRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnMobileNumberRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnMobileNumberRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnMobileNumberRequest::MergeFrom(const GetServiceProviderOnMobileNumberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceProviderOnMobileNumberRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnMobileNumberRequest::CopyFrom(const GetServiceProviderOnMobileNumberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnMobileNumberRequest::IsInitialized() const {
  return true;
}

void GetServiceProviderOnMobileNumberRequest::InternalSwap(GetServiceProviderOnMobileNumberRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderOnMobileNumberRequest, isstaleallowed_)
      + sizeof(GetServiceProviderOnMobileNumberRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderOnMobileNumberRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnMobileNumberRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnMobileNumberResponseRecord::_Internal {
 public:
};

GetServiceProviderOnMobileNumberResponseRecord::GetServiceProviderOnMobileNumberResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
}
GetServiceProviderOnMobileNumberResponseRecord::GetServiceProviderOnMobileNumberResponseRecord(const GetServiceProviderOnMobileNumberResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
}

void GetServiceProviderOnMobileNumberResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

GetServiceProviderOnMobileNumberResponseRecord::~GetServiceProviderOnMobileNumberResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnMobileNumberResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceProviderOnMobileNumberResponseRecord::ArenaDtor(void* object) {
  GetServiceProviderOnMobileNumberResponseRecord* _this = reinterpret_cast< GetServiceProviderOnMobileNumberResponseRecord* >(object);
  (void)_this;
}
void GetServiceProviderOnMobileNumberResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnMobileNumberResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnMobileNumberResponseRecord& GetServiceProviderOnMobileNumberResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnMobileNumberResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnMobileNumberResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mobilenumber_.ClearToEmpty();
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnMobileNumberResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnMobileNumberResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string mobileNumber = 2;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  return target;
}

size_t GetServiceProviderOnMobileNumberResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mobileNumber = 2;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnMobileNumberResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnMobileNumberResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnMobileNumberResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnMobileNumberResponseRecord::MergeFrom(const GetServiceProviderOnMobileNumberResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetServiceProviderOnMobileNumberResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnMobileNumberResponseRecord::CopyFrom(const GetServiceProviderOnMobileNumberResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnMobileNumberResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceProviderOnMobileNumberResponseRecord::InternalSwap(GetServiceProviderOnMobileNumberResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnMobileNumberResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnMobileNumberResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceProviderOnMobileNumberResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceProviderOnMobileNumberResponse::_Internal::status(const GetServiceProviderOnMobileNumberResponse* msg) {
  return *msg->status_;
}
GetServiceProviderOnMobileNumberResponse::GetServiceProviderOnMobileNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
}
GetServiceProviderOnMobileNumberResponse::GetServiceProviderOnMobileNumberResponse(const GetServiceProviderOnMobileNumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
}

void GetServiceProviderOnMobileNumberResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceProviderOnMobileNumberResponse::~GetServiceProviderOnMobileNumberResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnMobileNumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceProviderOnMobileNumberResponse::ArenaDtor(void* object) {
  GetServiceProviderOnMobileNumberResponse* _this = reinterpret_cast< GetServiceProviderOnMobileNumberResponse* >(object);
  (void)_this;
}
void GetServiceProviderOnMobileNumberResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnMobileNumberResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnMobileNumberResponse& GetServiceProviderOnMobileNumberResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnMobileNumberResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnMobileNumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnMobileNumberResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnMobileNumberResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  return target;
}

size_t GetServiceProviderOnMobileNumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnMobileNumberResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnMobileNumberResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnMobileNumberResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnMobileNumberResponse::MergeFrom(const GetServiceProviderOnMobileNumberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceProviderOnMobileNumberResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnMobileNumberResponse::CopyFrom(const GetServiceProviderOnMobileNumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnMobileNumberResponse::IsInitialized() const {
  return true;
}

void GetServiceProviderOnMobileNumberResponse::InternalSwap(GetServiceProviderOnMobileNumberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderOnMobileNumberResponse, count_)
      + sizeof(GetServiceProviderOnMobileNumberResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderOnMobileNumberResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnMobileNumberResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceLocationOnRegionNameRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceLocationOnRegionNameRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceLocationOnRegionNameRequest::_Internal::requestheaders(const GetServiceLocationOnRegionNameRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceLocationOnRegionNameRequest::GetServiceLocationOnRegionNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  regionname_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
}
GetServiceLocationOnRegionNameRequest::GetServiceLocationOnRegionNameRequest(const GetServiceLocationOnRegionNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      regionname_(from.regionname_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
}

void GetServiceLocationOnRegionNameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceLocationOnRegionNameRequest::~GetServiceLocationOnRegionNameRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceLocationOnRegionNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceLocationOnRegionNameRequest::ArenaDtor(void* object) {
  GetServiceLocationOnRegionNameRequest* _this = reinterpret_cast< GetServiceLocationOnRegionNameRequest* >(object);
  (void)_this;
}
void GetServiceLocationOnRegionNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceLocationOnRegionNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceLocationOnRegionNameRequest& GetServiceLocationOnRegionNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceLocationOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceLocationOnRegionNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regionname_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceLocationOnRegionNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string regionName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_regionname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceLocationOnRegionNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // repeated string regionName = 6;
  for (int i = 0, n = this->_internal_regionname_size(); i < n; i++) {
    const auto& s = this->_internal_regionname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  return target;
}

size_t GetServiceLocationOnRegionNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string regionName = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(regionname_.size());
  for (int i = 0, n = regionname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      regionname_.Get(i));
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceLocationOnRegionNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceLocationOnRegionNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceLocationOnRegionNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
    MergeFrom(*source);
  }
}

void GetServiceLocationOnRegionNameRequest::MergeFrom(const GetServiceLocationOnRegionNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regionname_.MergeFrom(from.regionname_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceLocationOnRegionNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceLocationOnRegionNameRequest::CopyFrom(const GetServiceLocationOnRegionNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLocationOnRegionNameRequest::IsInitialized() const {
  return true;
}

void GetServiceLocationOnRegionNameRequest::InternalSwap(GetServiceLocationOnRegionNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regionname_.InternalSwap(&other->regionname_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceLocationOnRegionNameRequest, isstaleallowed_)
      + sizeof(GetServiceLocationOnRegionNameRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceLocationOnRegionNameRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceLocationOnRegionNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceLocationOnRegionNameResponseRecord::_Internal {
 public:
};

GetServiceLocationOnRegionNameResponseRecord::GetServiceLocationOnRegionNameResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
}
GetServiceLocationOnRegionNameResponseRecord::GetServiceLocationOnRegionNameResponseRecord(const GetServiceLocationOnRegionNameResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
}

void GetServiceLocationOnRegionNameResponseRecord::SharedCtor() {
}

GetServiceLocationOnRegionNameResponseRecord::~GetServiceLocationOnRegionNameResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceLocationOnRegionNameResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServiceLocationOnRegionNameResponseRecord::ArenaDtor(void* object) {
  GetServiceLocationOnRegionNameResponseRecord* _this = reinterpret_cast< GetServiceLocationOnRegionNameResponseRecord* >(object);
  (void)_this;
}
void GetServiceLocationOnRegionNameResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceLocationOnRegionNameResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceLocationOnRegionNameResponseRecord& GetServiceLocationOnRegionNameResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceLocationOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceLocationOnRegionNameResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceLocationOnRegionNameResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceLocationOnRegionNameResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  return target;
}

size_t GetServiceLocationOnRegionNameResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceLocationOnRegionNameResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceLocationOnRegionNameResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceLocationOnRegionNameResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceLocationOnRegionNameResponseRecord::MergeFrom(const GetServiceLocationOnRegionNameResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServiceLocationOnRegionNameResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceLocationOnRegionNameResponseRecord::CopyFrom(const GetServiceLocationOnRegionNameResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLocationOnRegionNameResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceLocationOnRegionNameResponseRecord::InternalSwap(GetServiceLocationOnRegionNameResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceLocationOnRegionNameResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceLocationOnRegionNameResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceLocationOnRegionNameResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceLocationOnRegionNameResponse::_Internal::status(const GetServiceLocationOnRegionNameResponse* msg) {
  return *msg->status_;
}
GetServiceLocationOnRegionNameResponse::GetServiceLocationOnRegionNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  geographydetail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
}
GetServiceLocationOnRegionNameResponse::GetServiceLocationOnRegionNameResponse(const GetServiceLocationOnRegionNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      geographydetail_(from.geographydetail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
}

void GetServiceLocationOnRegionNameResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceLocationOnRegionNameResponse::~GetServiceLocationOnRegionNameResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceLocationOnRegionNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceLocationOnRegionNameResponse::ArenaDtor(void* object) {
  GetServiceLocationOnRegionNameResponse* _this = reinterpret_cast< GetServiceLocationOnRegionNameResponse* >(object);
  (void)_this;
}
void GetServiceLocationOnRegionNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceLocationOnRegionNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceLocationOnRegionNameResponse& GetServiceLocationOnRegionNameResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceLocationOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceLocationOnRegionNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  geographydetail_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceLocationOnRegionNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geographydetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceLocationOnRegionNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geographydetail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_geographydetail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  return target;
}

size_t GetServiceLocationOnRegionNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  total_size += 1UL * this->_internal_geographydetail_size();
  for (const auto& msg : this->geographydetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceLocationOnRegionNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceLocationOnRegionNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceLocationOnRegionNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
    MergeFrom(*source);
  }
}

void GetServiceLocationOnRegionNameResponse::MergeFrom(const GetServiceLocationOnRegionNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  geographydetail_.MergeFrom(from.geographydetail_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceLocationOnRegionNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceLocationOnRegionNameResponse::CopyFrom(const GetServiceLocationOnRegionNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLocationOnRegionNameResponse::IsInitialized() const {
  return true;
}

void GetServiceLocationOnRegionNameResponse::InternalSwap(GetServiceLocationOnRegionNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  geographydetail_.InternalSwap(&other->geographydetail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceLocationOnRegionNameResponse, count_)
      + sizeof(GetServiceLocationOnRegionNameResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceLocationOnRegionNameResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceLocationOnRegionNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeographyDetail::_Internal {
 public:
};

GeographyDetail::GeographyDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  geographydetail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GeographyDetail)
}
GeographyDetail::GeographyDetail(const GeographyDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      geographydetail_(from.geographydetail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geographyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyname().empty()) {
    geographyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyname(), 
      GetArena());
  }
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographyuid().empty()) {
    geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographyuid(), 
      GetArena());
  }
  geographylongitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographylongitude().empty()) {
    geographylongitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographylongitude(), 
      GetArena());
  }
  geographylatitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geographylatitude().empty()) {
    geographylatitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geographylatitude(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GeographyDetail)
}

void GeographyDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  geographyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographylongitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographylatitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GeographyDetail::~GeographyDetail() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeographyDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geographyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographyuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographylongitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geographylatitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeographyDetail::ArenaDtor(void* object) {
  GeographyDetail* _this = reinterpret_cast< GeographyDetail* >(object);
  (void)_this;
}
void GeographyDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeographyDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeographyDetail& GeographyDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeographyDetail_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GeographyDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geographydetail_.Clear();
  geographyname_.ClearToEmpty();
  geographyuid_.ClearToEmpty();
  geographylongitude_.ClearToEmpty();
  geographylatitude_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeographyDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string geographyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_geographyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geographyUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_geographyuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geographyLongitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_geographylongitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geographyLatitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_geographylatitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geographydetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeographyDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geographyName = 1;
  if (this->geographyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyname().data(), static_cast<int>(this->_internal_geographyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geographyname(), target);
  }

  // string geographyUid = 2;
  if (this->geographyuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographyuid().data(), static_cast<int>(this->_internal_geographyuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_geographyuid(), target);
  }

  // string geographyLongitude = 3;
  if (this->geographylongitude().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographylongitude().data(), static_cast<int>(this->_internal_geographylongitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_geographylongitude(), target);
  }

  // string geographyLatitude = 4;
  if (this->geographylatitude().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geographylatitude().data(), static_cast<int>(this->_internal_geographylatitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_geographylatitude(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geographydetail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_geographydetail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  return target;
}

size_t GeographyDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  total_size += 1UL * this->_internal_geographydetail_size();
  for (const auto& msg : this->geographydetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string geographyName = 1;
  if (this->geographyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyname());
  }

  // string geographyUid = 2;
  if (this->geographyuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographyuid());
  }

  // string geographyLongitude = 3;
  if (this->geographylongitude().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographylongitude());
  }

  // string geographyLatitude = 4;
  if (this->geographylatitude().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geographylatitude());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeographyDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GeographyDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GeographyDetail)
    MergeFrom(*source);
  }
}

void GeographyDetail::MergeFrom(const GeographyDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geographydetail_.MergeFrom(from.geographydetail_);
  if (from.geographyname().size() > 0) {
    _internal_set_geographyname(from._internal_geographyname());
  }
  if (from.geographyuid().size() > 0) {
    _internal_set_geographyuid(from._internal_geographyuid());
  }
  if (from.geographylongitude().size() > 0) {
    _internal_set_geographylongitude(from._internal_geographylongitude());
  }
  if (from.geographylatitude().size() > 0) {
    _internal_set_geographylatitude(from._internal_geographylatitude());
  }
}

void GeographyDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyDetail::CopyFrom(const GeographyDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GeographyDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyDetail::IsInitialized() const {
  return true;
}

void GeographyDetail::InternalSwap(GeographyDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  geographydetail_.InternalSwap(&other->geographydetail_);
  geographyname_.Swap(&other->geographyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographyuid_.Swap(&other->geographyuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographylongitude_.Swap(&other->geographylongitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geographylatitude_.Swap(&other->geographylatitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GeographyDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnConditionRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceConfigOnConditionRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceConfigOnConditionRequest::_Internal::requestheaders(const GetServiceConfigOnConditionRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceConfigOnConditionRequest::GetServiceConfigOnConditionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
}
GetServiceConfigOnConditionRequest::GetServiceConfigOnConditionRequest(const GetServiceConfigOnConditionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
}

void GetServiceConfigOnConditionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceConfigOnConditionRequest::~GetServiceConfigOnConditionRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnConditionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceConfigOnConditionRequest::ArenaDtor(void* object) {
  GetServiceConfigOnConditionRequest* _this = reinterpret_cast< GetServiceConfigOnConditionRequest* >(object);
  (void)_this;
}
void GetServiceConfigOnConditionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnConditionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnConditionRequest& GetServiceConfigOnConditionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnConditionRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnConditionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regionname_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnConditionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnConditionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  return target;
}

size_t GetServiceConfigOnConditionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnConditionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnConditionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnConditionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnConditionRequest::MergeFrom(const GetServiceConfigOnConditionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceConfigOnConditionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnConditionRequest::CopyFrom(const GetServiceConfigOnConditionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnConditionRequest::IsInitialized() const {
  return true;
}

void GetServiceConfigOnConditionRequest::InternalSwap(GetServiceConfigOnConditionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionRequest, isstaleallowed_)
      + sizeof(GetServiceConfigOnConditionRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnConditionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnConditionResponseRecord::_Internal {
 public:
};

GetServiceConfigOnConditionResponseRecord::GetServiceConfigOnConditionResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
}
GetServiceConfigOnConditionResponseRecord::GetServiceConfigOnConditionResponseRecord(const GetServiceConfigOnConditionResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  ::memcpy(&cropid_, &from.cropid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servicerank_) -
    reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
}

void GetServiceConfigOnConditionResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cropid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&servicerank_) -
      reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
}

GetServiceConfigOnConditionResponseRecord::~GetServiceConfigOnConditionResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnConditionResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceConfigOnConditionResponseRecord::ArenaDtor(void* object) {
  GetServiceConfigOnConditionResponseRecord* _this = reinterpret_cast< GetServiceConfigOnConditionResponseRecord* >(object);
  (void)_this;
}
void GetServiceConfigOnConditionResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnConditionResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnConditionResponseRecord& GetServiceConfigOnConditionResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnConditionResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnConditionResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicetype_.ClearToEmpty();
  regionname_.ClearToEmpty();
  ::memset(&cropid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servicerank_) -
      reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnConditionResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cropId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cropid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceRank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          servicerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnConditionResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicetype(), target);
  }

  // int64 cropId = 2;
  if (this->cropid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cropid(), target);
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regionname(), target);
  }

  // int64 section = 4;
  if (this->section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_section(), target);
  }

  // int64 serviceRank = 5;
  if (this->servicerank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_servicerank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  return target;
}

size_t GetServiceConfigOnConditionResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // int64 cropId = 2;
  if (this->cropid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cropid());
  }

  // int64 section = 4;
  if (this->section() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_section());
  }

  // int64 serviceRank = 5;
  if (this->servicerank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servicerank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnConditionResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnConditionResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnConditionResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnConditionResponseRecord::MergeFrom(const GetServiceConfigOnConditionResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.cropid() != 0) {
    _internal_set_cropid(from._internal_cropid());
  }
  if (from.section() != 0) {
    _internal_set_section(from._internal_section());
  }
  if (from.servicerank() != 0) {
    _internal_set_servicerank(from._internal_servicerank());
  }
}

void GetServiceConfigOnConditionResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnConditionResponseRecord::CopyFrom(const GetServiceConfigOnConditionResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnConditionResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceConfigOnConditionResponseRecord::InternalSwap(GetServiceConfigOnConditionResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionResponseRecord, servicerank_)
      + sizeof(GetServiceConfigOnConditionResponseRecord::servicerank_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionResponseRecord, cropid_)>(
          reinterpret_cast<char*>(&cropid_),
          reinterpret_cast<char*>(&other->cropid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnConditionResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnConditionResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceConfigOnConditionResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceConfigOnConditionResponse::_Internal::status(const GetServiceConfigOnConditionResponse* msg) {
  return *msg->status_;
}
GetServiceConfigOnConditionResponse::GetServiceConfigOnConditionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
}
GetServiceConfigOnConditionResponse::GetServiceConfigOnConditionResponse(const GetServiceConfigOnConditionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
}

void GetServiceConfigOnConditionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceConfigOnConditionResponse::~GetServiceConfigOnConditionResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnConditionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceConfigOnConditionResponse::ArenaDtor(void* object) {
  GetServiceConfigOnConditionResponse* _this = reinterpret_cast< GetServiceConfigOnConditionResponse* >(object);
  (void)_this;
}
void GetServiceConfigOnConditionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnConditionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnConditionResponse& GetServiceConfigOnConditionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnConditionResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnConditionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnConditionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnConditionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  return target;
}

size_t GetServiceConfigOnConditionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnConditionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnConditionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnConditionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnConditionResponse::MergeFrom(const GetServiceConfigOnConditionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceConfigOnConditionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnConditionResponse::CopyFrom(const GetServiceConfigOnConditionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnConditionResponse::IsInitialized() const {
  return true;
}

void GetServiceConfigOnConditionResponse::InternalSwap(GetServiceConfigOnConditionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionResponse, count_)
      + sizeof(GetServiceConfigOnConditionResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnConditionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnConditionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnServiceTypeRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceProviderOnServiceTypeRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceProviderOnServiceTypeRequest::_Internal::requestheaders(const GetServiceProviderOnServiceTypeRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceProviderOnServiceTypeRequest::GetServiceProviderOnServiceTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
}
GetServiceProviderOnServiceTypeRequest::GetServiceProviderOnServiceTypeRequest(const GetServiceProviderOnServiceTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
}

void GetServiceProviderOnServiceTypeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceProviderOnServiceTypeRequest::~GetServiceProviderOnServiceTypeRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnServiceTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceProviderOnServiceTypeRequest::ArenaDtor(void* object) {
  GetServiceProviderOnServiceTypeRequest* _this = reinterpret_cast< GetServiceProviderOnServiceTypeRequest* >(object);
  (void)_this;
}
void GetServiceProviderOnServiceTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnServiceTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnServiceTypeRequest& GetServiceProviderOnServiceTypeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnServiceTypeRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnServiceTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicetype_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnServiceTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnServiceTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_servicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  return target;
}

size_t GetServiceProviderOnServiceTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceType = 3;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnServiceTypeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnServiceTypeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnServiceTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnServiceTypeRequest::MergeFrom(const GetServiceProviderOnServiceTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceProviderOnServiceTypeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnServiceTypeRequest::CopyFrom(const GetServiceProviderOnServiceTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnServiceTypeRequest::IsInitialized() const {
  return true;
}

void GetServiceProviderOnServiceTypeRequest::InternalSwap(GetServiceProviderOnServiceTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeRequest, isstaleallowed_)
      + sizeof(GetServiceProviderOnServiceTypeRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnServiceTypeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnServiceTypeResponseRecord::_Internal {
 public:
};

GetServiceProviderOnServiceTypeResponseRecord::GetServiceProviderOnServiceTypeResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
}
GetServiceProviderOnServiceTypeResponseRecord::GetServiceProviderOnServiceTypeResponseRecord(const GetServiceProviderOnServiceTypeResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  whatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_whatsappnumber().empty()) {
    whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whatsappnumber(), 
      GetArena());
  }
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pincode().empty()) {
    pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pincode(), 
      GetArena());
  }
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_costperacre().empty()) {
    costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_costperacre(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&machinecount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(machinecount_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
}

void GetServiceProviderOnServiceTypeResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsappnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costperacre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&machinecount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(machinecount_));
}

GetServiceProviderOnServiceTypeResponseRecord::~GetServiceProviderOnServiceTypeResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnServiceTypeResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsappnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costperacre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceProviderOnServiceTypeResponseRecord::ArenaDtor(void* object) {
  GetServiceProviderOnServiceTypeResponseRecord* _this = reinterpret_cast< GetServiceProviderOnServiceTypeResponseRecord* >(object);
  (void)_this;
}
void GetServiceProviderOnServiceTypeResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnServiceTypeResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnServiceTypeResponseRecord& GetServiceProviderOnServiceTypeResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnServiceTypeResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnServiceTypeResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  whatsappnumber_.ClearToEmpty();
  pincode_.ClearToEmpty();
  costperacre_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machinecount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(machinecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnServiceTypeResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string whatsappNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_whatsappnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pincode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 machineCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          machinecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string costPerAcre = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_costperacre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnServiceTypeResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobilenumber(), target);
  }

  // string whatsappNumber = 4;
  if (this->whatsappnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whatsappnumber().data(), static_cast<int>(this->_internal_whatsappnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_whatsappnumber(), target);
  }

  // string pincode = 5;
  if (this->pincode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pincode().data(), static_cast<int>(this->_internal_pincode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pincode(), target);
  }

  // int64 machineCount = 6;
  if (this->machinecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_machinecount(), target);
  }

  // string costPerAcre = 7;
  if (this->costperacre().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_costperacre().data(), static_cast<int>(this->_internal_costperacre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_costperacre(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  return target;
}

size_t GetServiceProviderOnServiceTypeResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mobileNumber = 3;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // string whatsappNumber = 4;
  if (this->whatsappnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_whatsappnumber());
  }

  // string pincode = 5;
  if (this->pincode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pincode());
  }

  // string costPerAcre = 7;
  if (this->costperacre().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_costperacre());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 machineCount = 6;
  if (this->machinecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_machinecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnServiceTypeResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnServiceTypeResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnServiceTypeResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnServiceTypeResponseRecord::MergeFrom(const GetServiceProviderOnServiceTypeResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.whatsappnumber().size() > 0) {
    _internal_set_whatsappnumber(from._internal_whatsappnumber());
  }
  if (from.pincode().size() > 0) {
    _internal_set_pincode(from._internal_pincode());
  }
  if (from.costperacre().size() > 0) {
    _internal_set_costperacre(from._internal_costperacre());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.machinecount() != 0) {
    _internal_set_machinecount(from._internal_machinecount());
  }
}

void GetServiceProviderOnServiceTypeResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnServiceTypeResponseRecord::CopyFrom(const GetServiceProviderOnServiceTypeResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnServiceTypeResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceProviderOnServiceTypeResponseRecord::InternalSwap(GetServiceProviderOnServiceTypeResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  whatsappnumber_.Swap(&other->whatsappnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pincode_.Swap(&other->pincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  costperacre_.Swap(&other->costperacre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeResponseRecord, machinecount_)
      + sizeof(GetServiceProviderOnServiceTypeResponseRecord::machinecount_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeResponseRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnServiceTypeResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceProviderOnServiceTypeResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceProviderOnServiceTypeResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceProviderOnServiceTypeResponse::_Internal::status(const GetServiceProviderOnServiceTypeResponse* msg) {
  return *msg->status_;
}
GetServiceProviderOnServiceTypeResponse::GetServiceProviderOnServiceTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
}
GetServiceProviderOnServiceTypeResponse::GetServiceProviderOnServiceTypeResponse(const GetServiceProviderOnServiceTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
}

void GetServiceProviderOnServiceTypeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceProviderOnServiceTypeResponse::~GetServiceProviderOnServiceTypeResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceProviderOnServiceTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceProviderOnServiceTypeResponse::ArenaDtor(void* object) {
  GetServiceProviderOnServiceTypeResponse* _this = reinterpret_cast< GetServiceProviderOnServiceTypeResponse* >(object);
  (void)_this;
}
void GetServiceProviderOnServiceTypeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceProviderOnServiceTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceProviderOnServiceTypeResponse& GetServiceProviderOnServiceTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceProviderOnServiceTypeResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceProviderOnServiceTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceProviderOnServiceTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceProviderOnServiceTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  return target;
}

size_t GetServiceProviderOnServiceTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceProviderOnServiceTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceProviderOnServiceTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceProviderOnServiceTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
    MergeFrom(*source);
  }
}

void GetServiceProviderOnServiceTypeResponse::MergeFrom(const GetServiceProviderOnServiceTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceProviderOnServiceTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceProviderOnServiceTypeResponse::CopyFrom(const GetServiceProviderOnServiceTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceProviderOnServiceTypeResponse::IsInitialized() const {
  return true;
}

void GetServiceProviderOnServiceTypeResponse::InternalSwap(GetServiceProviderOnServiceTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeResponse, count_)
      + sizeof(GetServiceProviderOnServiceTypeResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceProviderOnServiceTypeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceProviderOnServiceTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationOnServiceProviderIdRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetLocationOnServiceProviderIdRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetLocationOnServiceProviderIdRequest::_Internal::requestheaders(const GetLocationOnServiceProviderIdRequest* msg) {
  return *msg->requestheaders_;
}
GetLocationOnServiceProviderIdRequest::GetLocationOnServiceProviderIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
}
GetLocationOnServiceProviderIdRequest::GetLocationOnServiceProviderIdRequest(const GetLocationOnServiceProviderIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serviceproviderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceproviderid().empty()) {
    serviceproviderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceproviderid(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
}

void GetLocationOnServiceProviderIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  serviceproviderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetLocationOnServiceProviderIdRequest::~GetLocationOnServiceProviderIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationOnServiceProviderIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serviceproviderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetLocationOnServiceProviderIdRequest::ArenaDtor(void* object) {
  GetLocationOnServiceProviderIdRequest* _this = reinterpret_cast< GetLocationOnServiceProviderIdRequest* >(object);
  (void)_this;
}
void GetLocationOnServiceProviderIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationOnServiceProviderIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationOnServiceProviderIdRequest& GetLocationOnServiceProviderIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationOnServiceProviderIdRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationOnServiceProviderIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceproviderid_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationOnServiceProviderIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceProviderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serviceproviderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationOnServiceProviderIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string serviceProviderId = 3;
  if (this->serviceproviderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceproviderid().data(), static_cast<int>(this->_internal_serviceproviderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceproviderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  return target;
}

size_t GetLocationOnServiceProviderIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceProviderId = 3;
  if (this->serviceproviderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceproviderid());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationOnServiceProviderIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationOnServiceProviderIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationOnServiceProviderIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
    MergeFrom(*source);
  }
}

void GetLocationOnServiceProviderIdRequest::MergeFrom(const GetLocationOnServiceProviderIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serviceproviderid().size() > 0) {
    _internal_set_serviceproviderid(from._internal_serviceproviderid());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetLocationOnServiceProviderIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationOnServiceProviderIdRequest::CopyFrom(const GetLocationOnServiceProviderIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationOnServiceProviderIdRequest::IsInitialized() const {
  return true;
}

void GetLocationOnServiceProviderIdRequest::InternalSwap(GetLocationOnServiceProviderIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serviceproviderid_.Swap(&other->serviceproviderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdRequest, isstaleallowed_)
      + sizeof(GetLocationOnServiceProviderIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationOnServiceProviderIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationOnServiceProviderIdResponseRecord::_Internal {
 public:
};

GetLocationOnServiceProviderIdResponseRecord::GetLocationOnServiceProviderIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
}
GetLocationOnServiceProviderIdResponseRecord::GetLocationOnServiceProviderIdResponseRecord(const GetLocationOnServiceProviderIdResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  ::memcpy(&serviceproviderid_, &from.serviceproviderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&serviceproviderid_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
}

void GetLocationOnServiceProviderIdResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serviceproviderid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&serviceproviderid_)) + sizeof(longitude_));
}

GetLocationOnServiceProviderIdResponseRecord::~GetLocationOnServiceProviderIdResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationOnServiceProviderIdResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLocationOnServiceProviderIdResponseRecord::ArenaDtor(void* object) {
  GetLocationOnServiceProviderIdResponseRecord* _this = reinterpret_cast< GetLocationOnServiceProviderIdResponseRecord* >(object);
  (void)_this;
}
void GetLocationOnServiceProviderIdResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationOnServiceProviderIdResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationOnServiceProviderIdResponseRecord& GetLocationOnServiceProviderIdResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationOnServiceProviderIdResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationOnServiceProviderIdResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  district_.ClearToEmpty();
  state_.ClearToEmpty();
  ::memset(&serviceproviderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&serviceproviderid_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationOnServiceProviderIdResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serviceProviderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceproviderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationOnServiceProviderIdResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serviceProviderId = 1;
  if (this->serviceproviderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_serviceproviderid(), target);
  }

  // string district = 2;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_district(), target);
  }

  // string state = 3;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  return target;
}

size_t GetLocationOnServiceProviderIdResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string district = 2;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 3;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // int64 serviceProviderId = 1;
  if (this->serviceproviderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serviceproviderid());
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationOnServiceProviderIdResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationOnServiceProviderIdResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationOnServiceProviderIdResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
    MergeFrom(*source);
  }
}

void GetLocationOnServiceProviderIdResponseRecord::MergeFrom(const GetLocationOnServiceProviderIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.serviceproviderid() != 0) {
    _internal_set_serviceproviderid(from._internal_serviceproviderid());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void GetLocationOnServiceProviderIdResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationOnServiceProviderIdResponseRecord::CopyFrom(const GetLocationOnServiceProviderIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationOnServiceProviderIdResponseRecord::IsInitialized() const {
  return true;
}

void GetLocationOnServiceProviderIdResponseRecord::InternalSwap(GetLocationOnServiceProviderIdResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdResponseRecord, longitude_)
      + sizeof(GetLocationOnServiceProviderIdResponseRecord::longitude_)
      - PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdResponseRecord, serviceproviderid_)>(
          reinterpret_cast<char*>(&serviceproviderid_),
          reinterpret_cast<char*>(&other->serviceproviderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationOnServiceProviderIdResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLocationOnServiceProviderIdResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetLocationOnServiceProviderIdResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetLocationOnServiceProviderIdResponse::_Internal::status(const GetLocationOnServiceProviderIdResponse* msg) {
  return *msg->status_;
}
GetLocationOnServiceProviderIdResponse::GetLocationOnServiceProviderIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
}
GetLocationOnServiceProviderIdResponse::GetLocationOnServiceProviderIdResponse(const GetLocationOnServiceProviderIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
}

void GetLocationOnServiceProviderIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetLocationOnServiceProviderIdResponse::~GetLocationOnServiceProviderIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocationOnServiceProviderIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetLocationOnServiceProviderIdResponse::ArenaDtor(void* object) {
  GetLocationOnServiceProviderIdResponse* _this = reinterpret_cast< GetLocationOnServiceProviderIdResponse* >(object);
  (void)_this;
}
void GetLocationOnServiceProviderIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocationOnServiceProviderIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocationOnServiceProviderIdResponse& GetLocationOnServiceProviderIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocationOnServiceProviderIdResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocationOnServiceProviderIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocationOnServiceProviderIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocationOnServiceProviderIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  return target;
}

size_t GetLocationOnServiceProviderIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocationOnServiceProviderIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationOnServiceProviderIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocationOnServiceProviderIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
    MergeFrom(*source);
  }
}

void GetLocationOnServiceProviderIdResponse::MergeFrom(const GetLocationOnServiceProviderIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetLocationOnServiceProviderIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationOnServiceProviderIdResponse::CopyFrom(const GetLocationOnServiceProviderIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationOnServiceProviderIdResponse::IsInitialized() const {
  return true;
}

void GetLocationOnServiceProviderIdResponse::InternalSwap(GetLocationOnServiceProviderIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdResponse, count_)
      + sizeof(GetLocationOnServiceProviderIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetLocationOnServiceProviderIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocationOnServiceProviderIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceConfigRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceConfigRequest::_Internal::requestheaders(const GetServiceConfigRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceConfigRequest::GetServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
}
GetServiceConfigRequest::GetServiceConfigRequest(const GetServiceConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
}

void GetServiceConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceConfigRequest::~GetServiceConfigRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceConfigRequest::ArenaDtor(void* object) {
  GetServiceConfigRequest* _this = reinterpret_cast< GetServiceConfigRequest* >(object);
  (void)_this;
}
void GetServiceConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigRequest& GetServiceConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_state();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // repeated string state = 6;
  for (int i = 0, n = this->_internal_state_size(); i < n; i++) {
    const auto& s = this->_internal_state(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  return target;
}

size_t GetServiceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string state = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(state_.size());
  for (int i = 0, n = state_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      state_.Get(i));
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
    MergeFrom(*source);
  }
}

void GetServiceConfigRequest::MergeFrom(const GetServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigRequest::CopyFrom(const GetServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigRequest::IsInitialized() const {
  return true;
}

void GetServiceConfigRequest::InternalSwap(GetServiceConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigRequest, isstaleallowed_)
      + sizeof(GetServiceConfigRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigResponseRecord::_Internal {
 public:
};

GetServiceConfigResponseRecord::GetServiceConfigResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
}
GetServiceConfigResponseRecord::GetServiceConfigResponseRecord(const GetServiceConfigResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
}

void GetServiceConfigResponseRecord::SharedCtor() {
}

GetServiceConfigResponseRecord::~GetServiceConfigResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServiceConfigResponseRecord::ArenaDtor(void* object) {
  GetServiceConfigResponseRecord* _this = reinterpret_cast< GetServiceConfigResponseRecord* >(object);
  (void)_this;
}
void GetServiceConfigResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigResponseRecord& GetServiceConfigResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  return target;
}

size_t GetServiceConfigResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceConfigResponseRecord::MergeFrom(const GetServiceConfigResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServiceConfigResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigResponseRecord::CopyFrom(const GetServiceConfigResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceConfigResponseRecord::InternalSwap(GetServiceConfigResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceConfigResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceConfigResponse::_Internal::status(const GetServiceConfigResponse* msg) {
  return *msg->status_;
}
GetServiceConfigResponse::GetServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  servicedetailsresponse_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
}
GetServiceConfigResponse::GetServiceConfigResponse(const GetServiceConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      servicedetailsresponse_(from.servicedetailsresponse_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
}

void GetServiceConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceConfigResponse::~GetServiceConfigResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceConfigResponse::ArenaDtor(void* object) {
  GetServiceConfigResponse* _this = reinterpret_cast< GetServiceConfigResponse* >(object);
  (void)_this;
}
void GetServiceConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigResponse& GetServiceConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  servicedetailsresponse_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servicedetailsresponse(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servicedetailsresponse_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_servicedetailsresponse(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  return target;
}

size_t GetServiceConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  total_size += 1UL * this->_internal_servicedetailsresponse_size();
  for (const auto& msg : this->servicedetailsresponse_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
    MergeFrom(*source);
  }
}

void GetServiceConfigResponse::MergeFrom(const GetServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  servicedetailsresponse_.MergeFrom(from.servicedetailsresponse_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigResponse::CopyFrom(const GetServiceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigResponse::IsInitialized() const {
  return true;
}

void GetServiceConfigResponse::InternalSwap(GetServiceConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  servicedetailsresponse_.InternalSwap(&other->servicedetailsresponse_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigResponse, count_)
      + sizeof(GetServiceConfigResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnRegionNameRequest::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders(const GetServiceConfigOnRegionNameRequest* msg);
};

const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&
GetServiceConfigOnRegionNameRequest::_Internal::requestheaders(const GetServiceConfigOnRegionNameRequest* msg) {
  return *msg->requestheaders_;
}
GetServiceConfigOnRegionNameRequest::GetServiceConfigOnRegionNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
}
GetServiceConfigOnRegionNameRequest::GetServiceConfigOnRegionNameRequest(const GetServiceConfigOnRegionNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::serviceProvider::service::proto::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  isstaleallowed_ = from.isstaleallowed_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
}

void GetServiceConfigOnRegionNameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetServiceConfigOnRegionNameRequest::~GetServiceConfigOnRegionNameRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnRegionNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetServiceConfigOnRegionNameRequest::ArenaDtor(void* object) {
  GetServiceConfigOnRegionNameRequest* _this = reinterpret_cast< GetServiceConfigOnRegionNameRequest* >(object);
  (void)_this;
}
void GetServiceConfigOnRegionNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnRegionNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnRegionNameRequest& GetServiceConfigOnRegionNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnRegionNameRequest_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnRegionNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regionname_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  isstaleallowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnRegionNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnRegionNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  return target;
}

size_t GetServiceConfigOnRegionNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnRegionNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnRegionNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnRegionNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnRegionNameRequest::MergeFrom(const GetServiceConfigOnRegionNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::serviceProvider::service::proto::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetServiceConfigOnRegionNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnRegionNameRequest::CopyFrom(const GetServiceConfigOnRegionNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnRegionNameRequest::IsInitialized() const {
  return true;
}

void GetServiceConfigOnRegionNameRequest::InternalSwap(GetServiceConfigOnRegionNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameRequest, isstaleallowed_)
      + sizeof(GetServiceConfigOnRegionNameRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnRegionNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnRegionNameResponseRecord::_Internal {
 public:
};

GetServiceConfigOnRegionNameResponseRecord::GetServiceConfigOnRegionNameResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
}
GetServiceConfigOnRegionNameResponseRecord::GetServiceConfigOnRegionNameResponseRecord(const GetServiceConfigOnRegionNameResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicetype().empty()) {
    servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicetype(), 
      GetArena());
  }
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regionname().empty()) {
    regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regionname(), 
      GetArena());
  }
  ::memcpy(&cropid_, &from.cropid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servicerank_) -
    reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
}

void GetServiceConfigOnRegionNameResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  servicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cropid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&servicerank_) -
      reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
}

GetServiceConfigOnRegionNameResponseRecord::~GetServiceConfigOnRegionNameResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnRegionNameResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceConfigOnRegionNameResponseRecord::ArenaDtor(void* object) {
  GetServiceConfigOnRegionNameResponseRecord* _this = reinterpret_cast< GetServiceConfigOnRegionNameResponseRecord* >(object);
  (void)_this;
}
void GetServiceConfigOnRegionNameResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnRegionNameResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnRegionNameResponseRecord& GetServiceConfigOnRegionNameResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnRegionNameResponseRecord_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnRegionNameResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicetype_.ClearToEmpty();
  regionname_.ClearToEmpty();
  ::memset(&cropid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servicerank_) -
      reinterpret_cast<char*>(&cropid_)) + sizeof(servicerank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnRegionNameResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cropId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cropid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serviceRank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          servicerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnRegionNameResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicetype().data(), static_cast<int>(this->_internal_servicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicetype(), target);
  }

  // int64 cropId = 2;
  if (this->cropid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cropid(), target);
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regionname().data(), static_cast<int>(this->_internal_regionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regionname(), target);
  }

  // int64 section = 4;
  if (this->section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_section(), target);
  }

  // int64 serviceRank = 5;
  if (this->servicerank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_servicerank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  return target;
}

size_t GetServiceConfigOnRegionNameResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceType = 1;
  if (this->servicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicetype());
  }

  // string regionName = 3;
  if (this->regionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regionname());
  }

  // int64 cropId = 2;
  if (this->cropid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cropid());
  }

  // int64 section = 4;
  if (this->section() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_section());
  }

  // int64 serviceRank = 5;
  if (this->servicerank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servicerank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnRegionNameResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnRegionNameResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnRegionNameResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnRegionNameResponseRecord::MergeFrom(const GetServiceConfigOnRegionNameResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicetype().size() > 0) {
    _internal_set_servicetype(from._internal_servicetype());
  }
  if (from.regionname().size() > 0) {
    _internal_set_regionname(from._internal_regionname());
  }
  if (from.cropid() != 0) {
    _internal_set_cropid(from._internal_cropid());
  }
  if (from.section() != 0) {
    _internal_set_section(from._internal_section());
  }
  if (from.servicerank() != 0) {
    _internal_set_servicerank(from._internal_servicerank());
  }
}

void GetServiceConfigOnRegionNameResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnRegionNameResponseRecord::CopyFrom(const GetServiceConfigOnRegionNameResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnRegionNameResponseRecord::IsInitialized() const {
  return true;
}

void GetServiceConfigOnRegionNameResponseRecord::InternalSwap(GetServiceConfigOnRegionNameResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicetype_.Swap(&other->servicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  regionname_.Swap(&other->regionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameResponseRecord, servicerank_)
      + sizeof(GetServiceConfigOnRegionNameResponseRecord::servicerank_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameResponseRecord, cropid_)>(
          reinterpret_cast<char*>(&cropid_),
          reinterpret_cast<char*>(&other->cropid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnRegionNameResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceConfigOnRegionNameResponse::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const GetServiceConfigOnRegionNameResponse* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
GetServiceConfigOnRegionNameResponse::_Internal::status(const GetServiceConfigOnRegionNameResponse* msg) {
  return *msg->status_;
}
GetServiceConfigOnRegionNameResponse::GetServiceConfigOnRegionNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
}
GetServiceConfigOnRegionNameResponse::GetServiceConfigOnRegionNameResponse(const GetServiceConfigOnRegionNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
}

void GetServiceConfigOnRegionNameResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetServiceConfigOnRegionNameResponse::~GetServiceConfigOnRegionNameResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceConfigOnRegionNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetServiceConfigOnRegionNameResponse::ArenaDtor(void* object) {
  GetServiceConfigOnRegionNameResponse* _this = reinterpret_cast< GetServiceConfigOnRegionNameResponse* >(object);
  (void)_this;
}
void GetServiceConfigOnRegionNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceConfigOnRegionNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceConfigOnRegionNameResponse& GetServiceConfigOnRegionNameResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceConfigOnRegionNameResponse_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceConfigOnRegionNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceConfigOnRegionNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceConfigOnRegionNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  return target;
}

size_t GetServiceConfigOnRegionNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceConfigOnRegionNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigOnRegionNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceConfigOnRegionNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
    MergeFrom(*source);
  }
}

void GetServiceConfigOnRegionNameResponse::MergeFrom(const GetServiceConfigOnRegionNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetServiceConfigOnRegionNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigOnRegionNameResponse::CopyFrom(const GetServiceConfigOnRegionNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigOnRegionNameResponse::IsInitialized() const {
  return true;
}

void GetServiceConfigOnRegionNameResponse::InternalSwap(GetServiceConfigOnRegionNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameResponse, count_)
      + sizeof(GetServiceConfigOnRegionNameResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetServiceConfigOnRegionNameResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceConfigOnRegionNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiRequests::_Internal {
 public:
};

MultiRequests::MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.MultiRequests)
}
MultiRequests::MultiRequests(const MultiRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ontxn_ = from.ontxn_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.MultiRequests)
}

void MultiRequests::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  ontxn_ = false;
}

MultiRequests::~MultiRequests() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.MultiRequests)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiRequests::ArenaDtor(void* object) {
  MultiRequests* _this = reinterpret_cast< MultiRequests* >(object);
  (void)_this;
}
void MultiRequests::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiRequests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRequests& MultiRequests::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRequests_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  ontxn_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiRequests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool onTxn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ontxn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRequests::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ontxn(), target);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Request request = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.MultiRequests)
  return target;
}

size_t MultiRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Request request = 2;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRequests::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRequests* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRequests>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.MultiRequests)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.MultiRequests)
    MergeFrom(*source);
  }
}

void MultiRequests::MergeFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  if (from.ontxn() != 0) {
    _internal_set_ontxn(from._internal_ontxn());
  }
}

void MultiRequests::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRequests::CopyFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRequests::IsInitialized() const {
  return true;
}

void MultiRequests::InternalSwap(MultiRequests* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_.InternalSwap(&other->request_);
  swap(ontxn_, other->ontxn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRequests::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& reqaddserviceprovider(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest& reqaddserviceproviderbulk(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& reqaddservicelocation(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest& reqaddservicelocationbulk(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& reqaddservices(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest& reqaddservicesbulk(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& reqaddserviceprovidermapping(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest& reqaddserviceprovidermappingbulk(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& reqaddserviceconfig(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest& reqaddserviceconfigbulk(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest& reqgetserviceprovider(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest& reqaddserviceproviderfromexcel(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest& reqgetsdtvonlatlong(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest& reqgetservicedetailsonlatlong(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest& reqgetservicesonservicenameandservicetype(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest& reqgetserviceprovideronmobilenumber(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest& reqgetservicelocationonregionname(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest& reqgetserviceconfigoncondition(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest& reqgetserviceprovideronservicetype(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest& reqgetlocationonserviceproviderid(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest& reqgetserviceconfig(const Request* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest& reqgetserviceconfigonregionname(const Request* msg);
};

const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest&
Request::_Internal::reqaddserviceprovider(const Request* msg) {
  return *msg->ARequest_.reqaddserviceprovider_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest&
Request::_Internal::reqaddserviceproviderbulk(const Request* msg) {
  return *msg->ARequest_.reqaddserviceproviderbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest&
Request::_Internal::reqaddservicelocation(const Request* msg) {
  return *msg->ARequest_.reqaddservicelocation_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest&
Request::_Internal::reqaddservicelocationbulk(const Request* msg) {
  return *msg->ARequest_.reqaddservicelocationbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest&
Request::_Internal::reqaddservices(const Request* msg) {
  return *msg->ARequest_.reqaddservices_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest&
Request::_Internal::reqaddservicesbulk(const Request* msg) {
  return *msg->ARequest_.reqaddservicesbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest&
Request::_Internal::reqaddserviceprovidermapping(const Request* msg) {
  return *msg->ARequest_.reqaddserviceprovidermapping_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest&
Request::_Internal::reqaddserviceprovidermappingbulk(const Request* msg) {
  return *msg->ARequest_.reqaddserviceprovidermappingbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest&
Request::_Internal::reqaddserviceconfig(const Request* msg) {
  return *msg->ARequest_.reqaddserviceconfig_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest&
Request::_Internal::reqaddserviceconfigbulk(const Request* msg) {
  return *msg->ARequest_.reqaddserviceconfigbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest&
Request::_Internal::reqgetserviceprovider(const Request* msg) {
  return *msg->ARequest_.reqgetserviceprovider_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest&
Request::_Internal::reqaddserviceproviderfromexcel(const Request* msg) {
  return *msg->ARequest_.reqaddserviceproviderfromexcel_;
}
const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest&
Request::_Internal::reqgetsdtvonlatlong(const Request* msg) {
  return *msg->ARequest_.reqgetsdtvonlatlong_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest&
Request::_Internal::reqgetservicedetailsonlatlong(const Request* msg) {
  return *msg->ARequest_.reqgetservicedetailsonlatlong_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest&
Request::_Internal::reqgetservicesonservicenameandservicetype(const Request* msg) {
  return *msg->ARequest_.reqgetservicesonservicenameandservicetype_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest&
Request::_Internal::reqgetserviceprovideronmobilenumber(const Request* msg) {
  return *msg->ARequest_.reqgetserviceprovideronmobilenumber_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest&
Request::_Internal::reqgetservicelocationonregionname(const Request* msg) {
  return *msg->ARequest_.reqgetservicelocationonregionname_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest&
Request::_Internal::reqgetserviceconfigoncondition(const Request* msg) {
  return *msg->ARequest_.reqgetserviceconfigoncondition_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest&
Request::_Internal::reqgetserviceprovideronservicetype(const Request* msg) {
  return *msg->ARequest_.reqgetserviceprovideronservicetype_;
}
const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest&
Request::_Internal::reqgetlocationonserviceproviderid(const Request* msg) {
  return *msg->ARequest_.reqgetlocationonserviceproviderid_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest&
Request::_Internal::reqgetserviceconfig(const Request* msg) {
  return *msg->ARequest_.reqgetserviceconfig_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest&
Request::_Internal::reqgetserviceconfigonregionname(const Request* msg) {
  return *msg->ARequest_.reqgetserviceconfigonregionname_;
}
void Request::set_allocated_reqaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* reqaddserviceprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceprovider);
    if (message_arena != submessage_arena) {
      reqaddserviceprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceprovider, submessage_arena);
    }
    set_has_reqaddserviceprovider();
    ARequest_.reqaddserviceprovider_ = reqaddserviceprovider;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
}
void Request::set_allocated_reqaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* reqaddserviceproviderbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceproviderbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceproviderbulk);
    if (message_arena != submessage_arena) {
      reqaddserviceproviderbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceproviderbulk, submessage_arena);
    }
    set_has_reqaddserviceproviderbulk();
    ARequest_.reqaddserviceproviderbulk_ = reqaddserviceproviderbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
}
void Request::set_allocated_reqaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* reqaddservicelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddservicelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddservicelocation);
    if (message_arena != submessage_arena) {
      reqaddservicelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddservicelocation, submessage_arena);
    }
    set_has_reqaddservicelocation();
    ARequest_.reqaddservicelocation_ = reqaddservicelocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
}
void Request::set_allocated_reqaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* reqaddservicelocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddservicelocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddservicelocationbulk);
    if (message_arena != submessage_arena) {
      reqaddservicelocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddservicelocationbulk, submessage_arena);
    }
    set_has_reqaddservicelocationbulk();
    ARequest_.reqaddservicelocationbulk_ = reqaddservicelocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
}
void Request::set_allocated_reqaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesRequest* reqaddservices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddservices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddservices);
    if (message_arena != submessage_arena) {
      reqaddservices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddservices, submessage_arena);
    }
    set_has_reqaddservices();
    ARequest_.reqaddservices_ = reqaddservices;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
}
void Request::set_allocated_reqaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* reqaddservicesbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddservicesbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddservicesbulk);
    if (message_arena != submessage_arena) {
      reqaddservicesbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddservicesbulk, submessage_arena);
    }
    set_has_reqaddservicesbulk();
    ARequest_.reqaddservicesbulk_ = reqaddservicesbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
}
void Request::set_allocated_reqaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* reqaddserviceprovidermapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceprovidermapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceprovidermapping);
    if (message_arena != submessage_arena) {
      reqaddserviceprovidermapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceprovidermapping, submessage_arena);
    }
    set_has_reqaddserviceprovidermapping();
    ARequest_.reqaddserviceprovidermapping_ = reqaddserviceprovidermapping;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
}
void Request::set_allocated_reqaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* reqaddserviceprovidermappingbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceprovidermappingbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceprovidermappingbulk);
    if (message_arena != submessage_arena) {
      reqaddserviceprovidermappingbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceprovidermappingbulk, submessage_arena);
    }
    set_has_reqaddserviceprovidermappingbulk();
    ARequest_.reqaddserviceprovidermappingbulk_ = reqaddserviceprovidermappingbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
}
void Request::set_allocated_reqaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* reqaddserviceconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceconfig);
    if (message_arena != submessage_arena) {
      reqaddserviceconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceconfig, submessage_arena);
    }
    set_has_reqaddserviceconfig();
    ARequest_.reqaddserviceconfig_ = reqaddserviceconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
}
void Request::set_allocated_reqaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* reqaddserviceconfigbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceconfigbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceconfigbulk);
    if (message_arena != submessage_arena) {
      reqaddserviceconfigbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceconfigbulk, submessage_arena);
    }
    set_has_reqaddserviceconfigbulk();
    ARequest_.reqaddserviceconfigbulk_ = reqaddserviceconfigbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
}
void Request::set_allocated_reqgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* reqgetserviceprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceprovider);
    if (message_arena != submessage_arena) {
      reqgetserviceprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceprovider, submessage_arena);
    }
    set_has_reqgetserviceprovider();
    ARequest_.reqgetserviceprovider_ = reqgetserviceprovider;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
}
void Request::set_allocated_reqaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* reqaddserviceproviderfromexcel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddserviceproviderfromexcel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddserviceproviderfromexcel);
    if (message_arena != submessage_arena) {
      reqaddserviceproviderfromexcel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddserviceproviderfromexcel, submessage_arena);
    }
    set_has_reqaddserviceproviderfromexcel();
    ARequest_.reqaddserviceproviderfromexcel_ = reqaddserviceproviderfromexcel;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
}
void Request::set_allocated_reqgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* reqgetsdtvonlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetsdtvonlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetsdtvonlatlong);
    if (message_arena != submessage_arena) {
      reqgetsdtvonlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetsdtvonlatlong, submessage_arena);
    }
    set_has_reqgetsdtvonlatlong();
    ARequest_.reqgetsdtvonlatlong_ = reqgetsdtvonlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
}
void Request::set_allocated_reqgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* reqgetservicedetailsonlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetservicedetailsonlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetservicedetailsonlatlong);
    if (message_arena != submessage_arena) {
      reqgetservicedetailsonlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetservicedetailsonlatlong, submessage_arena);
    }
    set_has_reqgetservicedetailsonlatlong();
    ARequest_.reqgetservicedetailsonlatlong_ = reqgetservicedetailsonlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
}
void Request::set_allocated_reqgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* reqgetservicesonservicenameandservicetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetservicesonservicenameandservicetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetservicesonservicenameandservicetype);
    if (message_arena != submessage_arena) {
      reqgetservicesonservicenameandservicetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetservicesonservicenameandservicetype, submessage_arena);
    }
    set_has_reqgetservicesonservicenameandservicetype();
    ARequest_.reqgetservicesonservicenameandservicetype_ = reqgetservicesonservicenameandservicetype;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
}
void Request::set_allocated_reqgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* reqgetserviceprovideronmobilenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceprovideronmobilenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceprovideronmobilenumber);
    if (message_arena != submessage_arena) {
      reqgetserviceprovideronmobilenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceprovideronmobilenumber, submessage_arena);
    }
    set_has_reqgetserviceprovideronmobilenumber();
    ARequest_.reqgetserviceprovideronmobilenumber_ = reqgetserviceprovideronmobilenumber;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
}
void Request::set_allocated_reqgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* reqgetservicelocationonregionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetservicelocationonregionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetservicelocationonregionname);
    if (message_arena != submessage_arena) {
      reqgetservicelocationonregionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetservicelocationonregionname, submessage_arena);
    }
    set_has_reqgetservicelocationonregionname();
    ARequest_.reqgetservicelocationonregionname_ = reqgetservicelocationonregionname;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
}
void Request::set_allocated_reqgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* reqgetserviceconfigoncondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceconfigoncondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceconfigoncondition);
    if (message_arena != submessage_arena) {
      reqgetserviceconfigoncondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceconfigoncondition, submessage_arena);
    }
    set_has_reqgetserviceconfigoncondition();
    ARequest_.reqgetserviceconfigoncondition_ = reqgetserviceconfigoncondition;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
}
void Request::set_allocated_reqgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* reqgetserviceprovideronservicetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceprovideronservicetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceprovideronservicetype);
    if (message_arena != submessage_arena) {
      reqgetserviceprovideronservicetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceprovideronservicetype, submessage_arena);
    }
    set_has_reqgetserviceprovideronservicetype();
    ARequest_.reqgetserviceprovideronservicetype_ = reqgetserviceprovideronservicetype;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
}
void Request::set_allocated_reqgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* reqgetlocationonserviceproviderid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetlocationonserviceproviderid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetlocationonserviceproviderid);
    if (message_arena != submessage_arena) {
      reqgetlocationonserviceproviderid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetlocationonserviceproviderid, submessage_arena);
    }
    set_has_reqgetlocationonserviceproviderid();
    ARequest_.reqgetlocationonserviceproviderid_ = reqgetlocationonserviceproviderid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
}
void Request::set_allocated_reqgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* reqgetserviceconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceconfig);
    if (message_arena != submessage_arena) {
      reqgetserviceconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceconfig, submessage_arena);
    }
    set_has_reqgetserviceconfig();
    ARequest_.reqgetserviceconfig_ = reqgetserviceconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
}
void Request::set_allocated_reqgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* reqgetserviceconfigonregionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetserviceconfigonregionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetserviceconfigonregionname);
    if (message_arena != submessage_arena) {
      reqgetserviceconfigonregionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetserviceconfigonregionname, submessage_arena);
    }
    set_has_reqgetserviceconfigonregionname();
    ARequest_.reqgetserviceconfigonregionname_ = reqgetserviceconfigonregionname;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  clear_has_ARequest();
  switch (from.ARequest_case()) {
    case kReqAddServiceProvider: {
      _internal_mutable_reqaddserviceprovider()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest::MergeFrom(from._internal_reqaddserviceprovider());
      break;
    }
    case kReqAddServiceProviderBulk: {
      _internal_mutable_reqaddserviceproviderbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest::MergeFrom(from._internal_reqaddserviceproviderbulk());
      break;
    }
    case kReqAddServiceLocation: {
      _internal_mutable_reqaddservicelocation()->::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest::MergeFrom(from._internal_reqaddservicelocation());
      break;
    }
    case kReqAddServiceLocationBulk: {
      _internal_mutable_reqaddservicelocationbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest::MergeFrom(from._internal_reqaddservicelocationbulk());
      break;
    }
    case kReqAddServices: {
      _internal_mutable_reqaddservices()->::farm::nurture::serviceProvider::service::proto::AddServicesRequest::MergeFrom(from._internal_reqaddservices());
      break;
    }
    case kReqAddServicesBulk: {
      _internal_mutable_reqaddservicesbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest::MergeFrom(from._internal_reqaddservicesbulk());
      break;
    }
    case kReqAddServiceProviderMapping: {
      _internal_mutable_reqaddserviceprovidermapping()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest::MergeFrom(from._internal_reqaddserviceprovidermapping());
      break;
    }
    case kReqAddServiceProviderMappingBulk: {
      _internal_mutable_reqaddserviceprovidermappingbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest::MergeFrom(from._internal_reqaddserviceprovidermappingbulk());
      break;
    }
    case kReqAddServiceConfig: {
      _internal_mutable_reqaddserviceconfig()->::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest::MergeFrom(from._internal_reqaddserviceconfig());
      break;
    }
    case kReqAddServiceConfigBulk: {
      _internal_mutable_reqaddserviceconfigbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest::MergeFrom(from._internal_reqaddserviceconfigbulk());
      break;
    }
    case kReqGetServiceProvider: {
      _internal_mutable_reqgetserviceprovider()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest::MergeFrom(from._internal_reqgetserviceprovider());
      break;
    }
    case kReqAddServiceProviderFromExcel: {
      _internal_mutable_reqaddserviceproviderfromexcel()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest::MergeFrom(from._internal_reqaddserviceproviderfromexcel());
      break;
    }
    case kReqGetSDTVOnLatLong: {
      _internal_mutable_reqgetsdtvonlatlong()->::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest::MergeFrom(from._internal_reqgetsdtvonlatlong());
      break;
    }
    case kReqGetServiceDetailsOnLatLong: {
      _internal_mutable_reqgetservicedetailsonlatlong()->::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest::MergeFrom(from._internal_reqgetservicedetailsonlatlong());
      break;
    }
    case kReqGetServicesOnServiceNameAndServiceType: {
      _internal_mutable_reqgetservicesonservicenameandservicetype()->::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest::MergeFrom(from._internal_reqgetservicesonservicenameandservicetype());
      break;
    }
    case kReqGetServiceProviderOnMobileNumber: {
      _internal_mutable_reqgetserviceprovideronmobilenumber()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest::MergeFrom(from._internal_reqgetserviceprovideronmobilenumber());
      break;
    }
    case kReqGetServiceLocationOnRegionName: {
      _internal_mutable_reqgetservicelocationonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest::MergeFrom(from._internal_reqgetservicelocationonregionname());
      break;
    }
    case kReqGetServiceConfigOnCondition: {
      _internal_mutable_reqgetserviceconfigoncondition()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest::MergeFrom(from._internal_reqgetserviceconfigoncondition());
      break;
    }
    case kReqGetServiceProviderOnServiceType: {
      _internal_mutable_reqgetserviceprovideronservicetype()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest::MergeFrom(from._internal_reqgetserviceprovideronservicetype());
      break;
    }
    case kReqGetLocationOnServiceProviderId: {
      _internal_mutable_reqgetlocationonserviceproviderid()->::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest::MergeFrom(from._internal_reqgetlocationonserviceproviderid());
      break;
    }
    case kReqGetServiceConfig: {
      _internal_mutable_reqgetserviceconfig()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest::MergeFrom(from._internal_reqgetserviceconfig());
      break;
    }
    case kReqGetServiceConfigOnRegionName: {
      _internal_mutable_reqgetserviceconfigonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest::MergeFrom(from._internal_reqgetserviceconfigonregionname());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_ARequest();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ARequest()) {
    clear_ARequest();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_ARequest() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.serviceProvider.service.proto.Request)
  switch (ARequest_case()) {
    case kReqAddServiceProvider: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceprovider_;
      }
      break;
    }
    case kReqAddServiceProviderBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceproviderbulk_;
      }
      break;
    }
    case kReqAddServiceLocation: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddservicelocation_;
      }
      break;
    }
    case kReqAddServiceLocationBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddservicelocationbulk_;
      }
      break;
    }
    case kReqAddServices: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddservices_;
      }
      break;
    }
    case kReqAddServicesBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddservicesbulk_;
      }
      break;
    }
    case kReqAddServiceProviderMapping: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceprovidermapping_;
      }
      break;
    }
    case kReqAddServiceProviderMappingBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceprovidermappingbulk_;
      }
      break;
    }
    case kReqAddServiceConfig: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceconfig_;
      }
      break;
    }
    case kReqAddServiceConfigBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceconfigbulk_;
      }
      break;
    }
    case kReqGetServiceProvider: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceprovider_;
      }
      break;
    }
    case kReqAddServiceProviderFromExcel: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddserviceproviderfromexcel_;
      }
      break;
    }
    case kReqGetSDTVOnLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetsdtvonlatlong_;
      }
      break;
    }
    case kReqGetServiceDetailsOnLatLong: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetservicedetailsonlatlong_;
      }
      break;
    }
    case kReqGetServicesOnServiceNameAndServiceType: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetservicesonservicenameandservicetype_;
      }
      break;
    }
    case kReqGetServiceProviderOnMobileNumber: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceprovideronmobilenumber_;
      }
      break;
    }
    case kReqGetServiceLocationOnRegionName: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetservicelocationonregionname_;
      }
      break;
    }
    case kReqGetServiceConfigOnCondition: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceconfigoncondition_;
      }
      break;
    }
    case kReqGetServiceProviderOnServiceType: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceprovideronservicetype_;
      }
      break;
    }
    case kReqGetLocationOnServiceProviderId: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetlocationonserviceproviderid_;
      }
      break;
    }
    case kReqGetServiceConfig: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceconfig_;
      }
      break;
    }
    case kReqGetServiceConfigOnRegionName: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetserviceconfigonregionname_;
      }
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AREQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  clear_ARequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.Request.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest reqAddServiceProvider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest reqAddServiceProviderBulk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceproviderbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest reqAddServiceLocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddservicelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest reqAddServiceLocationBulk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddservicelocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServicesRequest reqAddServices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddservices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest reqAddServicesBulk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddservicesbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest reqAddServiceProviderMapping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceprovidermapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest reqAddServiceProviderMappingBulk = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceprovidermappingbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest reqAddServiceConfig = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest reqAddServiceConfigBulk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceconfigbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest reqGetServiceProvider = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest reqAddServiceProviderFromExcel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddserviceproviderfromexcel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest reqGetSDTVOnLatLong = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetsdtvonlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest reqGetServiceDetailsOnLatLong = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetservicedetailsonlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest reqGetServicesOnServiceNameAndServiceType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetservicesonservicenameandservicetype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest reqGetServiceProviderOnMobileNumber = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceprovideronmobilenumber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest reqGetServiceLocationOnRegionName = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetservicelocationonregionname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest reqGetServiceConfigOnCondition = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceconfigoncondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest reqGetServiceProviderOnServiceType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceprovideronservicetype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest reqGetLocationOnServiceProviderId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetlocationonserviceproviderid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest reqGetServiceConfig = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest reqGetServiceConfigOnRegionName = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetserviceconfigonregionname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.Request.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest reqAddServiceProvider = 2;
  if (_internal_has_reqaddserviceprovider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reqaddserviceprovider(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest reqAddServiceProviderBulk = 3;
  if (_internal_has_reqaddserviceproviderbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reqaddserviceproviderbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest reqAddServiceLocation = 4;
  if (_internal_has_reqaddservicelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reqaddservicelocation(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest reqAddServiceLocationBulk = 5;
  if (_internal_has_reqaddservicelocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reqaddservicelocationbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServicesRequest reqAddServices = 6;
  if (_internal_has_reqaddservices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reqaddservices(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest reqAddServicesBulk = 7;
  if (_internal_has_reqaddservicesbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reqaddservicesbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest reqAddServiceProviderMapping = 8;
  if (_internal_has_reqaddserviceprovidermapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reqaddserviceprovidermapping(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest reqAddServiceProviderMappingBulk = 9;
  if (_internal_has_reqaddserviceprovidermappingbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::reqaddserviceprovidermappingbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest reqAddServiceConfig = 10;
  if (_internal_has_reqaddserviceconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reqaddserviceconfig(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest reqAddServiceConfigBulk = 11;
  if (_internal_has_reqaddserviceconfigbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::reqaddserviceconfigbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest reqGetServiceProvider = 12;
  if (_internal_has_reqgetserviceprovider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reqgetserviceprovider(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest reqAddServiceProviderFromExcel = 13;
  if (_internal_has_reqaddserviceproviderfromexcel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::reqaddserviceproviderfromexcel(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest reqGetSDTVOnLatLong = 14;
  if (_internal_has_reqgetsdtvonlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::reqgetsdtvonlatlong(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest reqGetServiceDetailsOnLatLong = 15;
  if (_internal_has_reqgetservicedetailsonlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::reqgetservicedetailsonlatlong(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest reqGetServicesOnServiceNameAndServiceType = 16;
  if (_internal_has_reqgetservicesonservicenameandservicetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::reqgetservicesonservicenameandservicetype(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest reqGetServiceProviderOnMobileNumber = 17;
  if (_internal_has_reqgetserviceprovideronmobilenumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::reqgetserviceprovideronmobilenumber(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest reqGetServiceLocationOnRegionName = 18;
  if (_internal_has_reqgetservicelocationonregionname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::reqgetservicelocationonregionname(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest reqGetServiceConfigOnCondition = 19;
  if (_internal_has_reqgetserviceconfigoncondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::reqgetserviceconfigoncondition(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest reqGetServiceProviderOnServiceType = 20;
  if (_internal_has_reqgetserviceprovideronservicetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::reqgetserviceprovideronservicetype(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest reqGetLocationOnServiceProviderId = 21;
  if (_internal_has_reqgetlocationonserviceproviderid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::reqgetlocationonserviceproviderid(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest reqGetServiceConfig = 22;
  if (_internal_has_reqgetserviceconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::reqgetserviceconfig(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest reqGetServiceConfigOnRegionName = 23;
  if (_internal_has_reqgetserviceconfigonregionname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::reqgetserviceconfigonregionname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  switch (ARequest_case()) {
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest reqAddServiceProvider = 2;
    case kReqAddServiceProvider: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceprovider_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest reqAddServiceProviderBulk = 3;
    case kReqAddServiceProviderBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceproviderbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest reqAddServiceLocation = 4;
    case kReqAddServiceLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddservicelocation_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest reqAddServiceLocationBulk = 5;
    case kReqAddServiceLocationBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddservicelocationbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServicesRequest reqAddServices = 6;
    case kReqAddServices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddservices_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest reqAddServicesBulk = 7;
    case kReqAddServicesBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddservicesbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest reqAddServiceProviderMapping = 8;
    case kReqAddServiceProviderMapping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceprovidermapping_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest reqAddServiceProviderMappingBulk = 9;
    case kReqAddServiceProviderMappingBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceprovidermappingbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest reqAddServiceConfig = 10;
    case kReqAddServiceConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceconfig_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest reqAddServiceConfigBulk = 11;
    case kReqAddServiceConfigBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceconfigbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest reqGetServiceProvider = 12;
    case kReqGetServiceProvider: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceprovider_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest reqAddServiceProviderFromExcel = 13;
    case kReqAddServiceProviderFromExcel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddserviceproviderfromexcel_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest reqGetSDTVOnLatLong = 14;
    case kReqGetSDTVOnLatLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetsdtvonlatlong_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest reqGetServiceDetailsOnLatLong = 15;
    case kReqGetServiceDetailsOnLatLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetservicedetailsonlatlong_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest reqGetServicesOnServiceNameAndServiceType = 16;
    case kReqGetServicesOnServiceNameAndServiceType: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetservicesonservicenameandservicetype_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest reqGetServiceProviderOnMobileNumber = 17;
    case kReqGetServiceProviderOnMobileNumber: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceprovideronmobilenumber_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest reqGetServiceLocationOnRegionName = 18;
    case kReqGetServiceLocationOnRegionName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetservicelocationonregionname_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest reqGetServiceConfigOnCondition = 19;
    case kReqGetServiceConfigOnCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceconfigoncondition_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest reqGetServiceProviderOnServiceType = 20;
    case kReqGetServiceProviderOnServiceType: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceprovideronservicetype_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest reqGetLocationOnServiceProviderId = 21;
    case kReqGetLocationOnServiceProviderId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetlocationonserviceproviderid_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest reqGetServiceConfig = 22;
    case kReqGetServiceConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceconfig_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest reqGetServiceConfigOnRegionName = 23;
    case kReqGetServiceConfigOnRegionName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetserviceconfigonregionname_);
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  switch (from.ARequest_case()) {
    case kReqAddServiceProvider: {
      _internal_mutable_reqaddserviceprovider()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest::MergeFrom(from._internal_reqaddserviceprovider());
      break;
    }
    case kReqAddServiceProviderBulk: {
      _internal_mutable_reqaddserviceproviderbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest::MergeFrom(from._internal_reqaddserviceproviderbulk());
      break;
    }
    case kReqAddServiceLocation: {
      _internal_mutable_reqaddservicelocation()->::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest::MergeFrom(from._internal_reqaddservicelocation());
      break;
    }
    case kReqAddServiceLocationBulk: {
      _internal_mutable_reqaddservicelocationbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest::MergeFrom(from._internal_reqaddservicelocationbulk());
      break;
    }
    case kReqAddServices: {
      _internal_mutable_reqaddservices()->::farm::nurture::serviceProvider::service::proto::AddServicesRequest::MergeFrom(from._internal_reqaddservices());
      break;
    }
    case kReqAddServicesBulk: {
      _internal_mutable_reqaddservicesbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest::MergeFrom(from._internal_reqaddservicesbulk());
      break;
    }
    case kReqAddServiceProviderMapping: {
      _internal_mutable_reqaddserviceprovidermapping()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest::MergeFrom(from._internal_reqaddserviceprovidermapping());
      break;
    }
    case kReqAddServiceProviderMappingBulk: {
      _internal_mutable_reqaddserviceprovidermappingbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest::MergeFrom(from._internal_reqaddserviceprovidermappingbulk());
      break;
    }
    case kReqAddServiceConfig: {
      _internal_mutable_reqaddserviceconfig()->::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest::MergeFrom(from._internal_reqaddserviceconfig());
      break;
    }
    case kReqAddServiceConfigBulk: {
      _internal_mutable_reqaddserviceconfigbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest::MergeFrom(from._internal_reqaddserviceconfigbulk());
      break;
    }
    case kReqGetServiceProvider: {
      _internal_mutable_reqgetserviceprovider()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest::MergeFrom(from._internal_reqgetserviceprovider());
      break;
    }
    case kReqAddServiceProviderFromExcel: {
      _internal_mutable_reqaddserviceproviderfromexcel()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest::MergeFrom(from._internal_reqaddserviceproviderfromexcel());
      break;
    }
    case kReqGetSDTVOnLatLong: {
      _internal_mutable_reqgetsdtvonlatlong()->::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest::MergeFrom(from._internal_reqgetsdtvonlatlong());
      break;
    }
    case kReqGetServiceDetailsOnLatLong: {
      _internal_mutable_reqgetservicedetailsonlatlong()->::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest::MergeFrom(from._internal_reqgetservicedetailsonlatlong());
      break;
    }
    case kReqGetServicesOnServiceNameAndServiceType: {
      _internal_mutable_reqgetservicesonservicenameandservicetype()->::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest::MergeFrom(from._internal_reqgetservicesonservicenameandservicetype());
      break;
    }
    case kReqGetServiceProviderOnMobileNumber: {
      _internal_mutable_reqgetserviceprovideronmobilenumber()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest::MergeFrom(from._internal_reqgetserviceprovideronmobilenumber());
      break;
    }
    case kReqGetServiceLocationOnRegionName: {
      _internal_mutable_reqgetservicelocationonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest::MergeFrom(from._internal_reqgetservicelocationonregionname());
      break;
    }
    case kReqGetServiceConfigOnCondition: {
      _internal_mutable_reqgetserviceconfigoncondition()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest::MergeFrom(from._internal_reqgetserviceconfigoncondition());
      break;
    }
    case kReqGetServiceProviderOnServiceType: {
      _internal_mutable_reqgetserviceprovideronservicetype()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest::MergeFrom(from._internal_reqgetserviceprovideronservicetype());
      break;
    }
    case kReqGetLocationOnServiceProviderId: {
      _internal_mutable_reqgetlocationonserviceproviderid()->::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest::MergeFrom(from._internal_reqgetlocationonserviceproviderid());
      break;
    }
    case kReqGetServiceConfig: {
      _internal_mutable_reqgetserviceconfig()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest::MergeFrom(from._internal_reqgetserviceconfig());
      break;
    }
    case kReqGetServiceConfigOnRegionName: {
      _internal_mutable_reqgetserviceconfigonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest::MergeFrom(from._internal_reqgetserviceconfigonregionname());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ARequest_, other->ARequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiResponses::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const MultiResponses* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
MultiResponses::_Internal::status(const MultiResponses* msg) {
  return *msg->status_;
}
MultiResponses::MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.MultiResponses)
}
MultiResponses::MultiResponses(const MultiResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.MultiResponses)
}

void MultiResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  status_ = nullptr;
}

MultiResponses::~MultiResponses() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.MultiResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiResponses::ArenaDtor(void* object) {
  MultiResponses* _this = reinterpret_cast< MultiResponses* >(object);
  (void)_this;
}
void MultiResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiResponses& MultiResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiResponses_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.serviceProvider.service.proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.serviceProvider.service.proto.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .farm.nurture.serviceProvider.service.proto.Response response = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.MultiResponses)
  return target;
}

size_t MultiResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.serviceProvider.service.proto.Response response = 2;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.MultiResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.MultiResponses)
    MergeFrom(*source);
  }
}

void MultiResponses::MergeFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
}

void MultiResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResponses::CopyFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResponses::IsInitialized() const {
  return true;
}

void MultiResponses::InternalSwap(MultiResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Response::_Internal {
 public:
  static const ::farm::nurture::serviceProvider::service::proto::Status& status(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& resaddserviceprovider(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse& resaddserviceproviderbulk(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& resaddservicelocation(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse& resaddservicelocationbulk(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& resaddservices(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse& resaddservicesbulk(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& resaddserviceprovidermapping(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse& resaddserviceprovidermappingbulk(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& resaddserviceconfig(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse& resaddserviceconfigbulk(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse& resgetserviceprovider(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse& resaddserviceproviderfromexcel(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse& resgetsdtvonlatlong(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse& resgetservicedetailsonlatlong(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse& resgetservicesonservicenameandservicetype(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse& resgetserviceprovideronmobilenumber(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse& resgetservicelocationonregionname(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse& resgetserviceconfigoncondition(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse& resgetserviceprovideronservicetype(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse& resgetlocationonserviceproviderid(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse& resgetserviceconfig(const Response* msg);
  static const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse& resgetserviceconfigonregionname(const Response* msg);
};

const ::farm::nurture::serviceProvider::service::proto::Status&
Response::_Internal::status(const Response* msg) {
  return *msg->status_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse&
Response::_Internal::resaddserviceprovider(const Response* msg) {
  return *msg->AResponse_.resaddserviceprovider_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse&
Response::_Internal::resaddserviceproviderbulk(const Response* msg) {
  return *msg->AResponse_.resaddserviceproviderbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse&
Response::_Internal::resaddservicelocation(const Response* msg) {
  return *msg->AResponse_.resaddservicelocation_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse&
Response::_Internal::resaddservicelocationbulk(const Response* msg) {
  return *msg->AResponse_.resaddservicelocationbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse&
Response::_Internal::resaddservices(const Response* msg) {
  return *msg->AResponse_.resaddservices_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse&
Response::_Internal::resaddservicesbulk(const Response* msg) {
  return *msg->AResponse_.resaddservicesbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse&
Response::_Internal::resaddserviceprovidermapping(const Response* msg) {
  return *msg->AResponse_.resaddserviceprovidermapping_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse&
Response::_Internal::resaddserviceprovidermappingbulk(const Response* msg) {
  return *msg->AResponse_.resaddserviceprovidermappingbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse&
Response::_Internal::resaddserviceconfig(const Response* msg) {
  return *msg->AResponse_.resaddserviceconfig_;
}
const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse&
Response::_Internal::resaddserviceconfigbulk(const Response* msg) {
  return *msg->AResponse_.resaddserviceconfigbulk_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse&
Response::_Internal::resgetserviceprovider(const Response* msg) {
  return *msg->AResponse_.resgetserviceprovider_;
}
const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse&
Response::_Internal::resaddserviceproviderfromexcel(const Response* msg) {
  return *msg->AResponse_.resaddserviceproviderfromexcel_;
}
const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse&
Response::_Internal::resgetsdtvonlatlong(const Response* msg) {
  return *msg->AResponse_.resgetsdtvonlatlong_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse&
Response::_Internal::resgetservicedetailsonlatlong(const Response* msg) {
  return *msg->AResponse_.resgetservicedetailsonlatlong_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse&
Response::_Internal::resgetservicesonservicenameandservicetype(const Response* msg) {
  return *msg->AResponse_.resgetservicesonservicenameandservicetype_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse&
Response::_Internal::resgetserviceprovideronmobilenumber(const Response* msg) {
  return *msg->AResponse_.resgetserviceprovideronmobilenumber_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse&
Response::_Internal::resgetservicelocationonregionname(const Response* msg) {
  return *msg->AResponse_.resgetservicelocationonregionname_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse&
Response::_Internal::resgetserviceconfigoncondition(const Response* msg) {
  return *msg->AResponse_.resgetserviceconfigoncondition_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse&
Response::_Internal::resgetserviceprovideronservicetype(const Response* msg) {
  return *msg->AResponse_.resgetserviceprovideronservicetype_;
}
const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse&
Response::_Internal::resgetlocationonserviceproviderid(const Response* msg) {
  return *msg->AResponse_.resgetlocationonserviceproviderid_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse&
Response::_Internal::resgetserviceconfig(const Response* msg) {
  return *msg->AResponse_.resgetserviceconfig_;
}
const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse&
Response::_Internal::resgetserviceconfigonregionname(const Response* msg) {
  return *msg->AResponse_.resgetserviceconfigonregionname_;
}
void Response::set_allocated_resaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* resaddserviceprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceprovider);
    if (message_arena != submessage_arena) {
      resaddserviceprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceprovider, submessage_arena);
    }
    set_has_resaddserviceprovider();
    AResponse_.resaddserviceprovider_ = resaddserviceprovider;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
}
void Response::set_allocated_resaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* resaddserviceproviderbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceproviderbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceproviderbulk);
    if (message_arena != submessage_arena) {
      resaddserviceproviderbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceproviderbulk, submessage_arena);
    }
    set_has_resaddserviceproviderbulk();
    AResponse_.resaddserviceproviderbulk_ = resaddserviceproviderbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
}
void Response::set_allocated_resaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* resaddservicelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddservicelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddservicelocation);
    if (message_arena != submessage_arena) {
      resaddservicelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddservicelocation, submessage_arena);
    }
    set_has_resaddservicelocation();
    AResponse_.resaddservicelocation_ = resaddservicelocation;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
}
void Response::set_allocated_resaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* resaddservicelocationbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddservicelocationbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddservicelocationbulk);
    if (message_arena != submessage_arena) {
      resaddservicelocationbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddservicelocationbulk, submessage_arena);
    }
    set_has_resaddservicelocationbulk();
    AResponse_.resaddservicelocationbulk_ = resaddservicelocationbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
}
void Response::set_allocated_resaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesResponse* resaddservices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddservices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddservices);
    if (message_arena != submessage_arena) {
      resaddservices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddservices, submessage_arena);
    }
    set_has_resaddservices();
    AResponse_.resaddservices_ = resaddservices;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
}
void Response::set_allocated_resaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* resaddservicesbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddservicesbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddservicesbulk);
    if (message_arena != submessage_arena) {
      resaddservicesbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddservicesbulk, submessage_arena);
    }
    set_has_resaddservicesbulk();
    AResponse_.resaddservicesbulk_ = resaddservicesbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
}
void Response::set_allocated_resaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* resaddserviceprovidermapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceprovidermapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceprovidermapping);
    if (message_arena != submessage_arena) {
      resaddserviceprovidermapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceprovidermapping, submessage_arena);
    }
    set_has_resaddserviceprovidermapping();
    AResponse_.resaddserviceprovidermapping_ = resaddserviceprovidermapping;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
}
void Response::set_allocated_resaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* resaddserviceprovidermappingbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceprovidermappingbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceprovidermappingbulk);
    if (message_arena != submessage_arena) {
      resaddserviceprovidermappingbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceprovidermappingbulk, submessage_arena);
    }
    set_has_resaddserviceprovidermappingbulk();
    AResponse_.resaddserviceprovidermappingbulk_ = resaddserviceprovidermappingbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
}
void Response::set_allocated_resaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* resaddserviceconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceconfig);
    if (message_arena != submessage_arena) {
      resaddserviceconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceconfig, submessage_arena);
    }
    set_has_resaddserviceconfig();
    AResponse_.resaddserviceconfig_ = resaddserviceconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
}
void Response::set_allocated_resaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* resaddserviceconfigbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceconfigbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceconfigbulk);
    if (message_arena != submessage_arena) {
      resaddserviceconfigbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceconfigbulk, submessage_arena);
    }
    set_has_resaddserviceconfigbulk();
    AResponse_.resaddserviceconfigbulk_ = resaddserviceconfigbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
}
void Response::set_allocated_resgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* resgetserviceprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceprovider);
    if (message_arena != submessage_arena) {
      resgetserviceprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceprovider, submessage_arena);
    }
    set_has_resgetserviceprovider();
    AResponse_.resgetserviceprovider_ = resgetserviceprovider;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
}
void Response::set_allocated_resaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* resaddserviceproviderfromexcel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddserviceproviderfromexcel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddserviceproviderfromexcel);
    if (message_arena != submessage_arena) {
      resaddserviceproviderfromexcel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddserviceproviderfromexcel, submessage_arena);
    }
    set_has_resaddserviceproviderfromexcel();
    AResponse_.resaddserviceproviderfromexcel_ = resaddserviceproviderfromexcel;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
}
void Response::set_allocated_resgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* resgetsdtvonlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetsdtvonlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetsdtvonlatlong);
    if (message_arena != submessage_arena) {
      resgetsdtvonlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetsdtvonlatlong, submessage_arena);
    }
    set_has_resgetsdtvonlatlong();
    AResponse_.resgetsdtvonlatlong_ = resgetsdtvonlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
}
void Response::set_allocated_resgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* resgetservicedetailsonlatlong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetservicedetailsonlatlong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetservicedetailsonlatlong);
    if (message_arena != submessage_arena) {
      resgetservicedetailsonlatlong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetservicedetailsonlatlong, submessage_arena);
    }
    set_has_resgetservicedetailsonlatlong();
    AResponse_.resgetservicedetailsonlatlong_ = resgetservicedetailsonlatlong;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
}
void Response::set_allocated_resgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* resgetservicesonservicenameandservicetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetservicesonservicenameandservicetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetservicesonservicenameandservicetype);
    if (message_arena != submessage_arena) {
      resgetservicesonservicenameandservicetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetservicesonservicenameandservicetype, submessage_arena);
    }
    set_has_resgetservicesonservicenameandservicetype();
    AResponse_.resgetservicesonservicenameandservicetype_ = resgetservicesonservicenameandservicetype;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
}
void Response::set_allocated_resgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* resgetserviceprovideronmobilenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceprovideronmobilenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceprovideronmobilenumber);
    if (message_arena != submessage_arena) {
      resgetserviceprovideronmobilenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceprovideronmobilenumber, submessage_arena);
    }
    set_has_resgetserviceprovideronmobilenumber();
    AResponse_.resgetserviceprovideronmobilenumber_ = resgetserviceprovideronmobilenumber;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
}
void Response::set_allocated_resgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* resgetservicelocationonregionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetservicelocationonregionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetservicelocationonregionname);
    if (message_arena != submessage_arena) {
      resgetservicelocationonregionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetservicelocationonregionname, submessage_arena);
    }
    set_has_resgetservicelocationonregionname();
    AResponse_.resgetservicelocationonregionname_ = resgetservicelocationonregionname;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
}
void Response::set_allocated_resgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* resgetserviceconfigoncondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceconfigoncondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceconfigoncondition);
    if (message_arena != submessage_arena) {
      resgetserviceconfigoncondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceconfigoncondition, submessage_arena);
    }
    set_has_resgetserviceconfigoncondition();
    AResponse_.resgetserviceconfigoncondition_ = resgetserviceconfigoncondition;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
}
void Response::set_allocated_resgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* resgetserviceprovideronservicetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceprovideronservicetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceprovideronservicetype);
    if (message_arena != submessage_arena) {
      resgetserviceprovideronservicetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceprovideronservicetype, submessage_arena);
    }
    set_has_resgetserviceprovideronservicetype();
    AResponse_.resgetserviceprovideronservicetype_ = resgetserviceprovideronservicetype;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
}
void Response::set_allocated_resgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* resgetlocationonserviceproviderid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetlocationonserviceproviderid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetlocationonserviceproviderid);
    if (message_arena != submessage_arena) {
      resgetlocationonserviceproviderid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetlocationonserviceproviderid, submessage_arena);
    }
    set_has_resgetlocationonserviceproviderid();
    AResponse_.resgetlocationonserviceproviderid_ = resgetlocationonserviceproviderid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
}
void Response::set_allocated_resgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* resgetserviceconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceconfig);
    if (message_arena != submessage_arena) {
      resgetserviceconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceconfig, submessage_arena);
    }
    set_has_resgetserviceconfig();
    AResponse_.resgetserviceconfig_ = resgetserviceconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
}
void Response::set_allocated_resgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* resgetserviceconfigonregionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetserviceconfigonregionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetserviceconfigonregionname);
    if (message_arena != submessage_arena) {
      resgetserviceconfigonregionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetserviceconfigonregionname, submessage_arena);
    }
    set_has_resgetserviceconfigonregionname();
    AResponse_.resgetserviceconfigonregionname_ = resgetserviceconfigonregionname;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.serviceProvider.service.proto.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::serviceProvider::service::proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_AResponse();
  switch (from.AResponse_case()) {
    case kResAddServiceProvider: {
      _internal_mutable_resaddserviceprovider()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse::MergeFrom(from._internal_resaddserviceprovider());
      break;
    }
    case kResAddServiceProviderBulk: {
      _internal_mutable_resaddserviceproviderbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse::MergeFrom(from._internal_resaddserviceproviderbulk());
      break;
    }
    case kResAddServiceLocation: {
      _internal_mutable_resaddservicelocation()->::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse::MergeFrom(from._internal_resaddservicelocation());
      break;
    }
    case kResAddServiceLocationBulk: {
      _internal_mutable_resaddservicelocationbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse::MergeFrom(from._internal_resaddservicelocationbulk());
      break;
    }
    case kResAddServices: {
      _internal_mutable_resaddservices()->::farm::nurture::serviceProvider::service::proto::AddServicesResponse::MergeFrom(from._internal_resaddservices());
      break;
    }
    case kResAddServicesBulk: {
      _internal_mutable_resaddservicesbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse::MergeFrom(from._internal_resaddservicesbulk());
      break;
    }
    case kResAddServiceProviderMapping: {
      _internal_mutable_resaddserviceprovidermapping()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse::MergeFrom(from._internal_resaddserviceprovidermapping());
      break;
    }
    case kResAddServiceProviderMappingBulk: {
      _internal_mutable_resaddserviceprovidermappingbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse::MergeFrom(from._internal_resaddserviceprovidermappingbulk());
      break;
    }
    case kResAddServiceConfig: {
      _internal_mutable_resaddserviceconfig()->::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse::MergeFrom(from._internal_resaddserviceconfig());
      break;
    }
    case kResAddServiceConfigBulk: {
      _internal_mutable_resaddserviceconfigbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse::MergeFrom(from._internal_resaddserviceconfigbulk());
      break;
    }
    case kResGetServiceProvider: {
      _internal_mutable_resgetserviceprovider()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse::MergeFrom(from._internal_resgetserviceprovider());
      break;
    }
    case kResAddServiceProviderFromExcel: {
      _internal_mutable_resaddserviceproviderfromexcel()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse::MergeFrom(from._internal_resaddserviceproviderfromexcel());
      break;
    }
    case kResGetSDTVOnLatLong: {
      _internal_mutable_resgetsdtvonlatlong()->::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse::MergeFrom(from._internal_resgetsdtvonlatlong());
      break;
    }
    case kResGetServiceDetailsOnLatLong: {
      _internal_mutable_resgetservicedetailsonlatlong()->::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse::MergeFrom(from._internal_resgetservicedetailsonlatlong());
      break;
    }
    case kResGetServicesOnServiceNameAndServiceType: {
      _internal_mutable_resgetservicesonservicenameandservicetype()->::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse::MergeFrom(from._internal_resgetservicesonservicenameandservicetype());
      break;
    }
    case kResGetServiceProviderOnMobileNumber: {
      _internal_mutable_resgetserviceprovideronmobilenumber()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse::MergeFrom(from._internal_resgetserviceprovideronmobilenumber());
      break;
    }
    case kResGetServiceLocationOnRegionName: {
      _internal_mutable_resgetservicelocationonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse::MergeFrom(from._internal_resgetservicelocationonregionname());
      break;
    }
    case kResGetServiceConfigOnCondition: {
      _internal_mutable_resgetserviceconfigoncondition()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse::MergeFrom(from._internal_resgetserviceconfigoncondition());
      break;
    }
    case kResGetServiceProviderOnServiceType: {
      _internal_mutable_resgetserviceprovideronservicetype()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse::MergeFrom(from._internal_resgetserviceprovideronservicetype());
      break;
    }
    case kResGetLocationOnServiceProviderId: {
      _internal_mutable_resgetlocationonserviceproviderid()->::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse::MergeFrom(from._internal_resgetlocationonserviceproviderid());
      break;
    }
    case kResGetServiceConfig: {
      _internal_mutable_resgetserviceconfig()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse::MergeFrom(from._internal_resgetserviceconfig());
      break;
    }
    case kResGetServiceConfigOnRegionName: {
      _internal_mutable_resgetserviceconfigonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse::MergeFrom(from._internal_resgetserviceconfigonregionname());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.serviceProvider.service.proto.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
  clear_has_AResponse();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:farm.nurture.serviceProvider.service.proto.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (has_AResponse()) {
    clear_AResponse();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_AResponse() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.serviceProvider.service.proto.Response)
  switch (AResponse_case()) {
    case kResAddServiceProvider: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceprovider_;
      }
      break;
    }
    case kResAddServiceProviderBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceproviderbulk_;
      }
      break;
    }
    case kResAddServiceLocation: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddservicelocation_;
      }
      break;
    }
    case kResAddServiceLocationBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddservicelocationbulk_;
      }
      break;
    }
    case kResAddServices: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddservices_;
      }
      break;
    }
    case kResAddServicesBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddservicesbulk_;
      }
      break;
    }
    case kResAddServiceProviderMapping: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceprovidermapping_;
      }
      break;
    }
    case kResAddServiceProviderMappingBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceprovidermappingbulk_;
      }
      break;
    }
    case kResAddServiceConfig: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceconfig_;
      }
      break;
    }
    case kResAddServiceConfigBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceconfigbulk_;
      }
      break;
    }
    case kResGetServiceProvider: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceprovider_;
      }
      break;
    }
    case kResAddServiceProviderFromExcel: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddserviceproviderfromexcel_;
      }
      break;
    }
    case kResGetSDTVOnLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetsdtvonlatlong_;
      }
      break;
    }
    case kResGetServiceDetailsOnLatLong: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetservicedetailsonlatlong_;
      }
      break;
    }
    case kResGetServicesOnServiceNameAndServiceType: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetservicesonservicenameandservicetype_;
      }
      break;
    }
    case kResGetServiceProviderOnMobileNumber: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceprovideronmobilenumber_;
      }
      break;
    }
    case kResGetServiceLocationOnRegionName: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetservicelocationonregionname_;
      }
      break;
    }
    case kResGetServiceConfigOnCondition: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceconfigoncondition_;
      }
      break;
    }
    case kResGetServiceProviderOnServiceType: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceprovideronservicetype_;
      }
      break;
    }
    case kResGetLocationOnServiceProviderId: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetlocationonserviceproviderid_;
      }
      break;
    }
    case kResGetServiceConfig: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceconfig_;
      }
      break;
    }
    case kResGetServiceConfigOnRegionName: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetserviceconfigonregionname_;
      }
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.serviceProvider.service.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_AResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.serviceProvider.service.proto.Response.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse resAddServiceProvider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse resAddServiceProviderBulk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceproviderbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse resAddServiceLocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddservicelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse resAddServiceLocationBulk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddservicelocationbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServicesResponse resAddServices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddservices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse resAddServicesBulk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddservicesbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse resAddServiceProviderMapping = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceprovidermapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse resAddServiceProviderMappingBulk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceprovidermappingbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse resAddServiceConfig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse resAddServiceConfigBulk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceconfigbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse resGetServiceProvider = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse resAddServiceProviderFromExcel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddserviceproviderfromexcel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse resGetSDTVOnLatLong = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetsdtvonlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse resGetServiceDetailsOnLatLong = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetservicedetailsonlatlong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse resGetServicesOnServiceNameAndServiceType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetservicesonservicenameandservicetype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse resGetServiceProviderOnMobileNumber = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceprovideronmobilenumber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse resGetServiceLocationOnRegionName = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetservicelocationonregionname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse resGetServiceConfigOnCondition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceconfigoncondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse resGetServiceProviderOnServiceType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceprovideronservicetype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse resGetLocationOnServiceProviderId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetlocationonserviceproviderid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse resGetServiceConfig = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse resGetServiceConfigOnRegionName = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetserviceconfigonregionname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.serviceProvider.service.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.serviceProvider.service.proto.Response.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse resAddServiceProvider = 3;
  if (_internal_has_resaddserviceprovider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resaddserviceprovider(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse resAddServiceProviderBulk = 4;
  if (_internal_has_resaddserviceproviderbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resaddserviceproviderbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse resAddServiceLocation = 5;
  if (_internal_has_resaddservicelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::resaddservicelocation(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse resAddServiceLocationBulk = 6;
  if (_internal_has_resaddservicelocationbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resaddservicelocationbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServicesResponse resAddServices = 7;
  if (_internal_has_resaddservices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resaddservices(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse resAddServicesBulk = 8;
  if (_internal_has_resaddservicesbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::resaddservicesbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse resAddServiceProviderMapping = 9;
  if (_internal_has_resaddserviceprovidermapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::resaddserviceprovidermapping(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse resAddServiceProviderMappingBulk = 10;
  if (_internal_has_resaddserviceprovidermappingbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::resaddserviceprovidermappingbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse resAddServiceConfig = 11;
  if (_internal_has_resaddserviceconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::resaddserviceconfig(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse resAddServiceConfigBulk = 12;
  if (_internal_has_resaddserviceconfigbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::resaddserviceconfigbulk(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse resGetServiceProvider = 13;
  if (_internal_has_resgetserviceprovider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::resgetserviceprovider(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse resAddServiceProviderFromExcel = 14;
  if (_internal_has_resaddserviceproviderfromexcel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::resaddserviceproviderfromexcel(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse resGetSDTVOnLatLong = 15;
  if (_internal_has_resgetsdtvonlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::resgetsdtvonlatlong(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse resGetServiceDetailsOnLatLong = 16;
  if (_internal_has_resgetservicedetailsonlatlong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::resgetservicedetailsonlatlong(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse resGetServicesOnServiceNameAndServiceType = 17;
  if (_internal_has_resgetservicesonservicenameandservicetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::resgetservicesonservicenameandservicetype(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse resGetServiceProviderOnMobileNumber = 18;
  if (_internal_has_resgetserviceprovideronmobilenumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::resgetserviceprovideronmobilenumber(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse resGetServiceLocationOnRegionName = 19;
  if (_internal_has_resgetservicelocationonregionname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::resgetservicelocationonregionname(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse resGetServiceConfigOnCondition = 20;
  if (_internal_has_resgetserviceconfigoncondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::resgetserviceconfigoncondition(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse resGetServiceProviderOnServiceType = 21;
  if (_internal_has_resgetserviceprovideronservicetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::resgetserviceprovideronservicetype(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse resGetLocationOnServiceProviderId = 22;
  if (_internal_has_resgetlocationonserviceproviderid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::resgetlocationonserviceproviderid(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse resGetServiceConfig = 23;
  if (_internal_has_resgetserviceconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::resgetserviceconfig(this), target, stream);
  }

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse resGetServiceConfigOnRegionName = 24;
  if (_internal_has_resgetserviceconfigonregionname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::resgetserviceconfigonregionname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.serviceProvider.service.proto.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.serviceProvider.service.proto.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .farm.nurture.serviceProvider.service.proto.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (AResponse_case()) {
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse resAddServiceProvider = 3;
    case kResAddServiceProvider: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceprovider_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse resAddServiceProviderBulk = 4;
    case kResAddServiceProviderBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceproviderbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse resAddServiceLocation = 5;
    case kResAddServiceLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddservicelocation_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse resAddServiceLocationBulk = 6;
    case kResAddServiceLocationBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddservicelocationbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServicesResponse resAddServices = 7;
    case kResAddServices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddservices_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse resAddServicesBulk = 8;
    case kResAddServicesBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddservicesbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse resAddServiceProviderMapping = 9;
    case kResAddServiceProviderMapping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceprovidermapping_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse resAddServiceProviderMappingBulk = 10;
    case kResAddServiceProviderMappingBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceprovidermappingbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse resAddServiceConfig = 11;
    case kResAddServiceConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceconfig_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse resAddServiceConfigBulk = 12;
    case kResAddServiceConfigBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceconfigbulk_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse resGetServiceProvider = 13;
    case kResGetServiceProvider: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceprovider_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse resAddServiceProviderFromExcel = 14;
    case kResAddServiceProviderFromExcel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddserviceproviderfromexcel_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse resGetSDTVOnLatLong = 15;
    case kResGetSDTVOnLatLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetsdtvonlatlong_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse resGetServiceDetailsOnLatLong = 16;
    case kResGetServiceDetailsOnLatLong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetservicedetailsonlatlong_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse resGetServicesOnServiceNameAndServiceType = 17;
    case kResGetServicesOnServiceNameAndServiceType: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetservicesonservicenameandservicetype_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse resGetServiceProviderOnMobileNumber = 18;
    case kResGetServiceProviderOnMobileNumber: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceprovideronmobilenumber_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse resGetServiceLocationOnRegionName = 19;
    case kResGetServiceLocationOnRegionName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetservicelocationonregionname_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse resGetServiceConfigOnCondition = 20;
    case kResGetServiceConfigOnCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceconfigoncondition_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse resGetServiceProviderOnServiceType = 21;
    case kResGetServiceProviderOnServiceType: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceprovideronservicetype_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse resGetLocationOnServiceProviderId = 22;
    case kResGetLocationOnServiceProviderId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetlocationonserviceproviderid_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse resGetServiceConfig = 23;
    case kResGetServiceConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceconfig_);
      break;
    }
    // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse resGetServiceConfigOnRegionName = 24;
    case kResGetServiceConfigOnRegionName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetserviceconfigonregionname_);
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.serviceProvider.service.proto.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.serviceProvider.service.proto.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.serviceProvider.service.proto.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.serviceProvider.service.proto.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::serviceProvider::service::proto::Status::MergeFrom(from._internal_status());
  }
  switch (from.AResponse_case()) {
    case kResAddServiceProvider: {
      _internal_mutable_resaddserviceprovider()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse::MergeFrom(from._internal_resaddserviceprovider());
      break;
    }
    case kResAddServiceProviderBulk: {
      _internal_mutable_resaddserviceproviderbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse::MergeFrom(from._internal_resaddserviceproviderbulk());
      break;
    }
    case kResAddServiceLocation: {
      _internal_mutable_resaddservicelocation()->::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse::MergeFrom(from._internal_resaddservicelocation());
      break;
    }
    case kResAddServiceLocationBulk: {
      _internal_mutable_resaddservicelocationbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse::MergeFrom(from._internal_resaddservicelocationbulk());
      break;
    }
    case kResAddServices: {
      _internal_mutable_resaddservices()->::farm::nurture::serviceProvider::service::proto::AddServicesResponse::MergeFrom(from._internal_resaddservices());
      break;
    }
    case kResAddServicesBulk: {
      _internal_mutable_resaddservicesbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse::MergeFrom(from._internal_resaddservicesbulk());
      break;
    }
    case kResAddServiceProviderMapping: {
      _internal_mutable_resaddserviceprovidermapping()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse::MergeFrom(from._internal_resaddserviceprovidermapping());
      break;
    }
    case kResAddServiceProviderMappingBulk: {
      _internal_mutable_resaddserviceprovidermappingbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse::MergeFrom(from._internal_resaddserviceprovidermappingbulk());
      break;
    }
    case kResAddServiceConfig: {
      _internal_mutable_resaddserviceconfig()->::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse::MergeFrom(from._internal_resaddserviceconfig());
      break;
    }
    case kResAddServiceConfigBulk: {
      _internal_mutable_resaddserviceconfigbulk()->::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse::MergeFrom(from._internal_resaddserviceconfigbulk());
      break;
    }
    case kResGetServiceProvider: {
      _internal_mutable_resgetserviceprovider()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse::MergeFrom(from._internal_resgetserviceprovider());
      break;
    }
    case kResAddServiceProviderFromExcel: {
      _internal_mutable_resaddserviceproviderfromexcel()->::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse::MergeFrom(from._internal_resaddserviceproviderfromexcel());
      break;
    }
    case kResGetSDTVOnLatLong: {
      _internal_mutable_resgetsdtvonlatlong()->::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse::MergeFrom(from._internal_resgetsdtvonlatlong());
      break;
    }
    case kResGetServiceDetailsOnLatLong: {
      _internal_mutable_resgetservicedetailsonlatlong()->::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse::MergeFrom(from._internal_resgetservicedetailsonlatlong());
      break;
    }
    case kResGetServicesOnServiceNameAndServiceType: {
      _internal_mutable_resgetservicesonservicenameandservicetype()->::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse::MergeFrom(from._internal_resgetservicesonservicenameandservicetype());
      break;
    }
    case kResGetServiceProviderOnMobileNumber: {
      _internal_mutable_resgetserviceprovideronmobilenumber()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse::MergeFrom(from._internal_resgetserviceprovideronmobilenumber());
      break;
    }
    case kResGetServiceLocationOnRegionName: {
      _internal_mutable_resgetservicelocationonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse::MergeFrom(from._internal_resgetservicelocationonregionname());
      break;
    }
    case kResGetServiceConfigOnCondition: {
      _internal_mutable_resgetserviceconfigoncondition()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse::MergeFrom(from._internal_resgetserviceconfigoncondition());
      break;
    }
    case kResGetServiceProviderOnServiceType: {
      _internal_mutable_resgetserviceprovideronservicetype()->::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse::MergeFrom(from._internal_resgetserviceprovideronservicetype());
      break;
    }
    case kResGetLocationOnServiceProviderId: {
      _internal_mutable_resgetlocationonserviceproviderid()->::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse::MergeFrom(from._internal_resgetlocationonserviceproviderid());
      break;
    }
    case kResGetServiceConfig: {
      _internal_mutable_resgetserviceconfig()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse::MergeFrom(from._internal_resgetserviceconfig());
      break;
    }
    case kResGetServiceConfigOnRegionName: {
      _internal_mutable_resgetserviceconfigonregionname()->::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse::MergeFrom(from._internal_resgetserviceconfigonregionname());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.serviceProvider.service.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.serviceProvider.service.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(AResponse_, other->AResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace service
}  // namespace serviceProvider
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::RequestHeaders* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::RequestHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::RequestHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::Attribs* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::Attribs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::Attribs >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::Status* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GeographyDetail* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::MultiRequests* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::MultiRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::MultiRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::Request* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::MultiResponses* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::MultiResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::MultiResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::serviceProvider::service::proto::Response* Arena::CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::serviceProvider::service::proto::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
