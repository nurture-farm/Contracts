// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceProviderManagementService/service_provider_management_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[66]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace serviceProvider {
namespace service {
namespace proto {
class AddServiceConfigRequest;
class AddServiceConfigRequestDefaultTypeInternal;
extern AddServiceConfigRequestDefaultTypeInternal _AddServiceConfigRequest_default_instance_;
class AddServiceConfigResponse;
class AddServiceConfigResponseDefaultTypeInternal;
extern AddServiceConfigResponseDefaultTypeInternal _AddServiceConfigResponse_default_instance_;
class AddServiceLocationRequest;
class AddServiceLocationRequestDefaultTypeInternal;
extern AddServiceLocationRequestDefaultTypeInternal _AddServiceLocationRequest_default_instance_;
class AddServiceLocationResponse;
class AddServiceLocationResponseDefaultTypeInternal;
extern AddServiceLocationResponseDefaultTypeInternal _AddServiceLocationResponse_default_instance_;
class AddServiceProviderFromExcelRequest;
class AddServiceProviderFromExcelRequestDefaultTypeInternal;
extern AddServiceProviderFromExcelRequestDefaultTypeInternal _AddServiceProviderFromExcelRequest_default_instance_;
class AddServiceProviderFromExcelResponse;
class AddServiceProviderFromExcelResponseDefaultTypeInternal;
extern AddServiceProviderFromExcelResponseDefaultTypeInternal _AddServiceProviderFromExcelResponse_default_instance_;
class AddServiceProviderFromExcelResponseRecord;
class AddServiceProviderFromExcelResponseRecordDefaultTypeInternal;
extern AddServiceProviderFromExcelResponseRecordDefaultTypeInternal _AddServiceProviderFromExcelResponseRecord_default_instance_;
class AddServiceProviderMappingRequest;
class AddServiceProviderMappingRequestDefaultTypeInternal;
extern AddServiceProviderMappingRequestDefaultTypeInternal _AddServiceProviderMappingRequest_default_instance_;
class AddServiceProviderMappingResponse;
class AddServiceProviderMappingResponseDefaultTypeInternal;
extern AddServiceProviderMappingResponseDefaultTypeInternal _AddServiceProviderMappingResponse_default_instance_;
class AddServiceProviderRequest;
class AddServiceProviderRequestDefaultTypeInternal;
extern AddServiceProviderRequestDefaultTypeInternal _AddServiceProviderRequest_default_instance_;
class AddServiceProviderResponse;
class AddServiceProviderResponseDefaultTypeInternal;
extern AddServiceProviderResponseDefaultTypeInternal _AddServiceProviderResponse_default_instance_;
class AddServicesRequest;
class AddServicesRequestDefaultTypeInternal;
extern AddServicesRequestDefaultTypeInternal _AddServicesRequest_default_instance_;
class AddServicesResponse;
class AddServicesResponseDefaultTypeInternal;
extern AddServicesResponseDefaultTypeInternal _AddServicesResponse_default_instance_;
class Attribs;
class AttribsDefaultTypeInternal;
extern AttribsDefaultTypeInternal _Attribs_default_instance_;
class BulkAddServiceConfigRequest;
class BulkAddServiceConfigRequestDefaultTypeInternal;
extern BulkAddServiceConfigRequestDefaultTypeInternal _BulkAddServiceConfigRequest_default_instance_;
class BulkAddServiceConfigResponse;
class BulkAddServiceConfigResponseDefaultTypeInternal;
extern BulkAddServiceConfigResponseDefaultTypeInternal _BulkAddServiceConfigResponse_default_instance_;
class BulkAddServiceLocationRequest;
class BulkAddServiceLocationRequestDefaultTypeInternal;
extern BulkAddServiceLocationRequestDefaultTypeInternal _BulkAddServiceLocationRequest_default_instance_;
class BulkAddServiceLocationResponse;
class BulkAddServiceLocationResponseDefaultTypeInternal;
extern BulkAddServiceLocationResponseDefaultTypeInternal _BulkAddServiceLocationResponse_default_instance_;
class BulkAddServiceProviderMappingRequest;
class BulkAddServiceProviderMappingRequestDefaultTypeInternal;
extern BulkAddServiceProviderMappingRequestDefaultTypeInternal _BulkAddServiceProviderMappingRequest_default_instance_;
class BulkAddServiceProviderMappingResponse;
class BulkAddServiceProviderMappingResponseDefaultTypeInternal;
extern BulkAddServiceProviderMappingResponseDefaultTypeInternal _BulkAddServiceProviderMappingResponse_default_instance_;
class BulkAddServiceProviderRequest;
class BulkAddServiceProviderRequestDefaultTypeInternal;
extern BulkAddServiceProviderRequestDefaultTypeInternal _BulkAddServiceProviderRequest_default_instance_;
class BulkAddServiceProviderResponse;
class BulkAddServiceProviderResponseDefaultTypeInternal;
extern BulkAddServiceProviderResponseDefaultTypeInternal _BulkAddServiceProviderResponse_default_instance_;
class BulkAddServicesRequest;
class BulkAddServicesRequestDefaultTypeInternal;
extern BulkAddServicesRequestDefaultTypeInternal _BulkAddServicesRequest_default_instance_;
class BulkAddServicesResponse;
class BulkAddServicesResponseDefaultTypeInternal;
extern BulkAddServicesResponseDefaultTypeInternal _BulkAddServicesResponse_default_instance_;
class GeographyDetail;
class GeographyDetailDefaultTypeInternal;
extern GeographyDetailDefaultTypeInternal _GeographyDetail_default_instance_;
class GetLocationOnServiceProviderIdRequest;
class GetLocationOnServiceProviderIdRequestDefaultTypeInternal;
extern GetLocationOnServiceProviderIdRequestDefaultTypeInternal _GetLocationOnServiceProviderIdRequest_default_instance_;
class GetLocationOnServiceProviderIdResponse;
class GetLocationOnServiceProviderIdResponseDefaultTypeInternal;
extern GetLocationOnServiceProviderIdResponseDefaultTypeInternal _GetLocationOnServiceProviderIdResponse_default_instance_;
class GetLocationOnServiceProviderIdResponseRecord;
class GetLocationOnServiceProviderIdResponseRecordDefaultTypeInternal;
extern GetLocationOnServiceProviderIdResponseRecordDefaultTypeInternal _GetLocationOnServiceProviderIdResponseRecord_default_instance_;
class GetSDTVOnLatLongRequest;
class GetSDTVOnLatLongRequestDefaultTypeInternal;
extern GetSDTVOnLatLongRequestDefaultTypeInternal _GetSDTVOnLatLongRequest_default_instance_;
class GetSDTVOnLatLongResponse;
class GetSDTVOnLatLongResponseDefaultTypeInternal;
extern GetSDTVOnLatLongResponseDefaultTypeInternal _GetSDTVOnLatLongResponse_default_instance_;
class GetSDTVOnLatLongResponseRecord;
class GetSDTVOnLatLongResponseRecordDefaultTypeInternal;
extern GetSDTVOnLatLongResponseRecordDefaultTypeInternal _GetSDTVOnLatLongResponseRecord_default_instance_;
class GetServiceConfigOnConditionRequest;
class GetServiceConfigOnConditionRequestDefaultTypeInternal;
extern GetServiceConfigOnConditionRequestDefaultTypeInternal _GetServiceConfigOnConditionRequest_default_instance_;
class GetServiceConfigOnConditionResponse;
class GetServiceConfigOnConditionResponseDefaultTypeInternal;
extern GetServiceConfigOnConditionResponseDefaultTypeInternal _GetServiceConfigOnConditionResponse_default_instance_;
class GetServiceConfigOnConditionResponseRecord;
class GetServiceConfigOnConditionResponseRecordDefaultTypeInternal;
extern GetServiceConfigOnConditionResponseRecordDefaultTypeInternal _GetServiceConfigOnConditionResponseRecord_default_instance_;
class GetServiceConfigOnRegionNameRequest;
class GetServiceConfigOnRegionNameRequestDefaultTypeInternal;
extern GetServiceConfigOnRegionNameRequestDefaultTypeInternal _GetServiceConfigOnRegionNameRequest_default_instance_;
class GetServiceConfigOnRegionNameResponse;
class GetServiceConfigOnRegionNameResponseDefaultTypeInternal;
extern GetServiceConfigOnRegionNameResponseDefaultTypeInternal _GetServiceConfigOnRegionNameResponse_default_instance_;
class GetServiceConfigOnRegionNameResponseRecord;
class GetServiceConfigOnRegionNameResponseRecordDefaultTypeInternal;
extern GetServiceConfigOnRegionNameResponseRecordDefaultTypeInternal _GetServiceConfigOnRegionNameResponseRecord_default_instance_;
class GetServiceConfigRequest;
class GetServiceConfigRequestDefaultTypeInternal;
extern GetServiceConfigRequestDefaultTypeInternal _GetServiceConfigRequest_default_instance_;
class GetServiceConfigResponse;
class GetServiceConfigResponseDefaultTypeInternal;
extern GetServiceConfigResponseDefaultTypeInternal _GetServiceConfigResponse_default_instance_;
class GetServiceConfigResponseRecord;
class GetServiceConfigResponseRecordDefaultTypeInternal;
extern GetServiceConfigResponseRecordDefaultTypeInternal _GetServiceConfigResponseRecord_default_instance_;
class GetServiceDetailsOnLatLongRequest;
class GetServiceDetailsOnLatLongRequestDefaultTypeInternal;
extern GetServiceDetailsOnLatLongRequestDefaultTypeInternal _GetServiceDetailsOnLatLongRequest_default_instance_;
class GetServiceDetailsOnLatLongResponse;
class GetServiceDetailsOnLatLongResponseDefaultTypeInternal;
extern GetServiceDetailsOnLatLongResponseDefaultTypeInternal _GetServiceDetailsOnLatLongResponse_default_instance_;
class GetServiceDetailsOnLatLongResponseRecord;
class GetServiceDetailsOnLatLongResponseRecordDefaultTypeInternal;
extern GetServiceDetailsOnLatLongResponseRecordDefaultTypeInternal _GetServiceDetailsOnLatLongResponseRecord_default_instance_;
class GetServiceLocationOnRegionNameRequest;
class GetServiceLocationOnRegionNameRequestDefaultTypeInternal;
extern GetServiceLocationOnRegionNameRequestDefaultTypeInternal _GetServiceLocationOnRegionNameRequest_default_instance_;
class GetServiceLocationOnRegionNameResponse;
class GetServiceLocationOnRegionNameResponseDefaultTypeInternal;
extern GetServiceLocationOnRegionNameResponseDefaultTypeInternal _GetServiceLocationOnRegionNameResponse_default_instance_;
class GetServiceLocationOnRegionNameResponseRecord;
class GetServiceLocationOnRegionNameResponseRecordDefaultTypeInternal;
extern GetServiceLocationOnRegionNameResponseRecordDefaultTypeInternal _GetServiceLocationOnRegionNameResponseRecord_default_instance_;
class GetServiceProviderOnMobileNumberRequest;
class GetServiceProviderOnMobileNumberRequestDefaultTypeInternal;
extern GetServiceProviderOnMobileNumberRequestDefaultTypeInternal _GetServiceProviderOnMobileNumberRequest_default_instance_;
class GetServiceProviderOnMobileNumberResponse;
class GetServiceProviderOnMobileNumberResponseDefaultTypeInternal;
extern GetServiceProviderOnMobileNumberResponseDefaultTypeInternal _GetServiceProviderOnMobileNumberResponse_default_instance_;
class GetServiceProviderOnMobileNumberResponseRecord;
class GetServiceProviderOnMobileNumberResponseRecordDefaultTypeInternal;
extern GetServiceProviderOnMobileNumberResponseRecordDefaultTypeInternal _GetServiceProviderOnMobileNumberResponseRecord_default_instance_;
class GetServiceProviderOnServiceTypeRequest;
class GetServiceProviderOnServiceTypeRequestDefaultTypeInternal;
extern GetServiceProviderOnServiceTypeRequestDefaultTypeInternal _GetServiceProviderOnServiceTypeRequest_default_instance_;
class GetServiceProviderOnServiceTypeResponse;
class GetServiceProviderOnServiceTypeResponseDefaultTypeInternal;
extern GetServiceProviderOnServiceTypeResponseDefaultTypeInternal _GetServiceProviderOnServiceTypeResponse_default_instance_;
class GetServiceProviderOnServiceTypeResponseRecord;
class GetServiceProviderOnServiceTypeResponseRecordDefaultTypeInternal;
extern GetServiceProviderOnServiceTypeResponseRecordDefaultTypeInternal _GetServiceProviderOnServiceTypeResponseRecord_default_instance_;
class GetServiceProviderRequest;
class GetServiceProviderRequestDefaultTypeInternal;
extern GetServiceProviderRequestDefaultTypeInternal _GetServiceProviderRequest_default_instance_;
class GetServiceProviderResponse;
class GetServiceProviderResponseDefaultTypeInternal;
extern GetServiceProviderResponseDefaultTypeInternal _GetServiceProviderResponse_default_instance_;
class GetServiceProviderResponseRecord;
class GetServiceProviderResponseRecordDefaultTypeInternal;
extern GetServiceProviderResponseRecordDefaultTypeInternal _GetServiceProviderResponseRecord_default_instance_;
class GetServicesOnServiceNameAndServiceTypeRequest;
class GetServicesOnServiceNameAndServiceTypeRequestDefaultTypeInternal;
extern GetServicesOnServiceNameAndServiceTypeRequestDefaultTypeInternal _GetServicesOnServiceNameAndServiceTypeRequest_default_instance_;
class GetServicesOnServiceNameAndServiceTypeResponse;
class GetServicesOnServiceNameAndServiceTypeResponseDefaultTypeInternal;
extern GetServicesOnServiceNameAndServiceTypeResponseDefaultTypeInternal _GetServicesOnServiceNameAndServiceTypeResponse_default_instance_;
class GetServicesOnServiceNameAndServiceTypeResponseRecord;
class GetServicesOnServiceNameAndServiceTypeResponseRecordDefaultTypeInternal;
extern GetServicesOnServiceNameAndServiceTypeResponseRecordDefaultTypeInternal _GetServicesOnServiceNameAndServiceTypeResponseRecord_default_instance_;
class MultiRequests;
class MultiRequestsDefaultTypeInternal;
extern MultiRequestsDefaultTypeInternal _MultiRequests_default_instance_;
class MultiResponses;
class MultiResponsesDefaultTypeInternal;
extern MultiResponsesDefaultTypeInternal _MultiResponses_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RequestHeaders;
class RequestHeadersDefaultTypeInternal;
extern RequestHeadersDefaultTypeInternal _RequestHeaders_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ServiceDetailsResponse;
class ServiceDetailsResponseDefaultTypeInternal;
extern ServiceDetailsResponseDefaultTypeInternal _ServiceDetailsResponse_default_instance_;
class ServiceProviderInfo;
class ServiceProviderInfoDefaultTypeInternal;
extern ServiceProviderInfoDefaultTypeInternal _ServiceProviderInfo_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace proto
}  // namespace service
}  // namespace serviceProvider
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServicesRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::AddServicesResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::Attribs* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Attribs>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GeographyDetail* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GeographyDetail>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::MultiRequests* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::MultiRequests>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::MultiResponses* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::MultiResponses>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::Request* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Request>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::RequestHeaders* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::Response* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Response>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo>(Arena*);
template<> ::farm::nurture::serviceProvider::service::proto::Status* Arena::CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace serviceProvider {
namespace service {
namespace proto {

enum RequestHeaders_LANGUAGE : int {
  RequestHeaders_LANGUAGE_English = 0,
  RequestHeaders_LANGUAGE_Hindi = 2,
  RequestHeaders_LANGUAGE_RequestHeaders_LANGUAGE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestHeaders_LANGUAGE_RequestHeaders_LANGUAGE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestHeaders_LANGUAGE_IsValid(int value);
constexpr RequestHeaders_LANGUAGE RequestHeaders_LANGUAGE_LANGUAGE_MIN = RequestHeaders_LANGUAGE_English;
constexpr RequestHeaders_LANGUAGE RequestHeaders_LANGUAGE_LANGUAGE_MAX = RequestHeaders_LANGUAGE_Hindi;
constexpr int RequestHeaders_LANGUAGE_LANGUAGE_ARRAYSIZE = RequestHeaders_LANGUAGE_LANGUAGE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestHeaders_LANGUAGE_descriptor();
template<typename T>
inline const std::string& RequestHeaders_LANGUAGE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestHeaders_LANGUAGE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestHeaders_LANGUAGE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestHeaders_LANGUAGE_descriptor(), enum_t_value);
}
inline bool RequestHeaders_LANGUAGE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestHeaders_LANGUAGE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestHeaders_LANGUAGE>(
    RequestHeaders_LANGUAGE_descriptor(), name, value);
}
enum RequestHeaders_COUNTRY : int {
  RequestHeaders_COUNTRY_India = 0,
  RequestHeaders_COUNTRY_Australia = 2,
  RequestHeaders_COUNTRY_RequestHeaders_COUNTRY_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestHeaders_COUNTRY_RequestHeaders_COUNTRY_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestHeaders_COUNTRY_IsValid(int value);
constexpr RequestHeaders_COUNTRY RequestHeaders_COUNTRY_COUNTRY_MIN = RequestHeaders_COUNTRY_India;
constexpr RequestHeaders_COUNTRY RequestHeaders_COUNTRY_COUNTRY_MAX = RequestHeaders_COUNTRY_Australia;
constexpr int RequestHeaders_COUNTRY_COUNTRY_ARRAYSIZE = RequestHeaders_COUNTRY_COUNTRY_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestHeaders_COUNTRY_descriptor();
template<typename T>
inline const std::string& RequestHeaders_COUNTRY_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestHeaders_COUNTRY>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestHeaders_COUNTRY_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestHeaders_COUNTRY_descriptor(), enum_t_value);
}
inline bool RequestHeaders_COUNTRY_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestHeaders_COUNTRY* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestHeaders_COUNTRY>(
    RequestHeaders_COUNTRY_descriptor(), name, value);
}
enum StatusCode : int {
  SUCCESS = 0,
  NOT_FOUND = 1,
  ZERO_RESULTS = 2,
  DUPLICATE = 3,
  LIMIT_EXCEEDED = 4,
  INVALID_REQUEST = 5,
  TEMPORARILY_SUSPENDED = 6,
  OVER_USAGE_LIMIT = 7,
  REQUEST_DENIED = 8,
  UNKNOWN_ERROR = 9,
  DB_FAILURE = 10,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = SUCCESS;
constexpr StatusCode StatusCode_MAX = DB_FAILURE;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor();
template<typename T>
inline const std::string& StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusCode_descriptor(), enum_t_value);
}
inline bool StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class RequestHeaders PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.RequestHeaders) */ {
 public:
  inline RequestHeaders() : RequestHeaders(nullptr) {}
  virtual ~RequestHeaders();

  RequestHeaders(const RequestHeaders& from);
  RequestHeaders(RequestHeaders&& from) noexcept
    : RequestHeaders() {
    *this = ::std::move(from);
  }

  inline RequestHeaders& operator=(const RequestHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaders& operator=(RequestHeaders&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeaders& default_instance();

  static inline const RequestHeaders* internal_default_instance() {
    return reinterpret_cast<const RequestHeaders*>(
               &_RequestHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeaders& a, RequestHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaders* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeaders* New() const final {
    return CreateMaybeMessage<RequestHeaders>(nullptr);
  }

  RequestHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeaders>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeaders& from);
  void MergeFrom(const RequestHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaders* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.RequestHeaders";
  }
  protected:
  explicit RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestHeaders_LANGUAGE LANGUAGE;
  static constexpr LANGUAGE English =
    RequestHeaders_LANGUAGE_English;
  static constexpr LANGUAGE Hindi =
    RequestHeaders_LANGUAGE_Hindi;
  static inline bool LANGUAGE_IsValid(int value) {
    return RequestHeaders_LANGUAGE_IsValid(value);
  }
  static constexpr LANGUAGE LANGUAGE_MIN =
    RequestHeaders_LANGUAGE_LANGUAGE_MIN;
  static constexpr LANGUAGE LANGUAGE_MAX =
    RequestHeaders_LANGUAGE_LANGUAGE_MAX;
  static constexpr int LANGUAGE_ARRAYSIZE =
    RequestHeaders_LANGUAGE_LANGUAGE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LANGUAGE_descriptor() {
    return RequestHeaders_LANGUAGE_descriptor();
  }
  template<typename T>
  static inline const std::string& LANGUAGE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LANGUAGE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LANGUAGE_Name.");
    return RequestHeaders_LANGUAGE_Name(enum_t_value);
  }
  static inline bool LANGUAGE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LANGUAGE* value) {
    return RequestHeaders_LANGUAGE_Parse(name, value);
  }

  typedef RequestHeaders_COUNTRY COUNTRY;
  static constexpr COUNTRY India =
    RequestHeaders_COUNTRY_India;
  static constexpr COUNTRY Australia =
    RequestHeaders_COUNTRY_Australia;
  static inline bool COUNTRY_IsValid(int value) {
    return RequestHeaders_COUNTRY_IsValid(value);
  }
  static constexpr COUNTRY COUNTRY_MIN =
    RequestHeaders_COUNTRY_COUNTRY_MIN;
  static constexpr COUNTRY COUNTRY_MAX =
    RequestHeaders_COUNTRY_COUNTRY_MAX;
  static constexpr int COUNTRY_ARRAYSIZE =
    RequestHeaders_COUNTRY_COUNTRY_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  COUNTRY_descriptor() {
    return RequestHeaders_COUNTRY_descriptor();
  }
  template<typename T>
  static inline const std::string& COUNTRY_Name(T enum_t_value) {
    static_assert(::std::is_same<T, COUNTRY>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function COUNTRY_Name.");
    return RequestHeaders_COUNTRY_Name(enum_t_value);
  }
  static inline bool COUNTRY_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      COUNTRY* value) {
    return RequestHeaders_COUNTRY_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 11,
    kPrefferedUserNameFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kTracingIdFieldNumber = 3,
    kExperimentIdFieldNumber = 10,
    kAuthTokenFieldNumber = 12,
    kAppTokenFieldNumber = 13,
    kTraceDetailsFieldNumber = 4,
    kLanguageFieldNumber = 5,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
    kAccuracyFieldNumber = 8,
    kCountryFieldNumber = 9,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 11;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string prefferedUserName = 1;
  void clear_prefferedusername();
  const std::string& prefferedusername() const;
  void set_prefferedusername(const std::string& value);
  void set_prefferedusername(std::string&& value);
  void set_prefferedusername(const char* value);
  void set_prefferedusername(const char* value, size_t size);
  std::string* mutable_prefferedusername();
  std::string* release_prefferedusername();
  void set_allocated_prefferedusername(std::string* prefferedusername);
  private:
  const std::string& _internal_prefferedusername() const;
  void _internal_set_prefferedusername(const std::string& value);
  std::string* _internal_mutable_prefferedusername();
  public:

  // string clientId = 2;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string tracingId = 3;
  void clear_tracingid();
  const std::string& tracingid() const;
  void set_tracingid(const std::string& value);
  void set_tracingid(std::string&& value);
  void set_tracingid(const char* value);
  void set_tracingid(const char* value, size_t size);
  std::string* mutable_tracingid();
  std::string* release_tracingid();
  void set_allocated_tracingid(std::string* tracingid);
  private:
  const std::string& _internal_tracingid() const;
  void _internal_set_tracingid(const std::string& value);
  std::string* _internal_mutable_tracingid();
  public:

  // string experimentId = 10;
  void clear_experimentid();
  const std::string& experimentid() const;
  void set_experimentid(const std::string& value);
  void set_experimentid(std::string&& value);
  void set_experimentid(const char* value);
  void set_experimentid(const char* value, size_t size);
  std::string* mutable_experimentid();
  std::string* release_experimentid();
  void set_allocated_experimentid(std::string* experimentid);
  private:
  const std::string& _internal_experimentid() const;
  void _internal_set_experimentid(const std::string& value);
  std::string* _internal_mutable_experimentid();
  public:

  // string authToken = 12;
  void clear_authtoken();
  const std::string& authtoken() const;
  void set_authtoken(const std::string& value);
  void set_authtoken(std::string&& value);
  void set_authtoken(const char* value);
  void set_authtoken(const char* value, size_t size);
  std::string* mutable_authtoken();
  std::string* release_authtoken();
  void set_allocated_authtoken(std::string* authtoken);
  private:
  const std::string& _internal_authtoken() const;
  void _internal_set_authtoken(const std::string& value);
  std::string* _internal_mutable_authtoken();
  public:

  // string appToken = 13;
  void clear_apptoken();
  const std::string& apptoken() const;
  void set_apptoken(const std::string& value);
  void set_apptoken(std::string&& value);
  void set_apptoken(const char* value);
  void set_apptoken(const char* value, size_t size);
  std::string* mutable_apptoken();
  std::string* release_apptoken();
  void set_allocated_apptoken(std::string* apptoken);
  private:
  const std::string& _internal_apptoken() const;
  void _internal_set_apptoken(const std::string& value);
  std::string* _internal_mutable_apptoken();
  public:

  // bool traceDetails = 4;
  void clear_tracedetails();
  bool tracedetails() const;
  void set_tracedetails(bool value);
  private:
  bool _internal_tracedetails() const;
  void _internal_set_tracedetails(bool value);
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE language = 5;
  void clear_language();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE language() const;
  void set_language(::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE value);
  private:
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE _internal_language() const;
  void _internal_set_language(::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE value);
  public:

  // float latitude = 6;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 7;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float accuracy = 8;
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY country = 9;
  void clear_country();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY country() const;
  void set_country(::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY value);
  private:
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY _internal_country() const;
  void _internal_set_country(::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.RequestHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefferedusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracingid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr experimentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apptoken_;
  bool tracedetails_;
  int language_;
  float latitude_;
  float longitude_;
  float accuracy_;
  int country_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Attribs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.Attribs) */ {
 public:
  inline Attribs() : Attribs(nullptr) {}
  virtual ~Attribs();

  Attribs(const Attribs& from);
  Attribs(Attribs&& from) noexcept
    : Attribs() {
    *this = ::std::move(from);
  }

  inline Attribs& operator=(const Attribs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribs& operator=(Attribs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribs& default_instance();

  static inline const Attribs* internal_default_instance() {
    return reinterpret_cast<const Attribs*>(
               &_Attribs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Attribs& a, Attribs& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribs* New() const final {
    return CreateMaybeMessage<Attribs>(nullptr);
  }

  Attribs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribs& from);
  void MergeFrom(const Attribs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.Attribs";
  }
  protected:
  explicit Attribs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.Attribs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessagesFieldNumber = 2,
    kStatusFieldNumber = 1,
    kInternalErrorCodeFieldNumber = 3,
  };
  // repeated string error_messages = 2;
  int error_messages_size() const;
  private:
  int _internal_error_messages_size() const;
  public:
  void clear_error_messages();
  const std::string& error_messages(int index) const;
  std::string* mutable_error_messages(int index);
  void set_error_messages(int index, const std::string& value);
  void set_error_messages(int index, std::string&& value);
  void set_error_messages(int index, const char* value);
  void set_error_messages(int index, const char* value, size_t size);
  std::string* add_error_messages();
  void add_error_messages(const std::string& value);
  void add_error_messages(std::string&& value);
  void add_error_messages(const char* value);
  void add_error_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_messages();
  private:
  const std::string& _internal_error_messages(int index) const;
  std::string* _internal_add_error_messages();
  public:

  // .farm.nurture.serviceProvider.service.proto.StatusCode status = 1;
  void clear_status();
  ::farm::nurture::serviceProvider::service::proto::StatusCode status() const;
  void set_status(::farm::nurture::serviceProvider::service::proto::StatusCode value);
  private:
  ::farm::nurture::serviceProvider::service::proto::StatusCode _internal_status() const;
  void _internal_set_status(::farm::nurture::serviceProvider::service::proto::StatusCode value);
  public:

  // int32 internal_error_code = 3;
  void clear_internal_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_error_code() const;
  void set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_error_code() const;
  void _internal_set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_messages_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest) */ {
 public:
  inline AddServiceProviderRequest() : AddServiceProviderRequest(nullptr) {}
  virtual ~AddServiceProviderRequest();

  AddServiceProviderRequest(const AddServiceProviderRequest& from);
  AddServiceProviderRequest(AddServiceProviderRequest&& from) noexcept
    : AddServiceProviderRequest() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderRequest& operator=(const AddServiceProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderRequest& operator=(AddServiceProviderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderRequest& default_instance();

  static inline const AddServiceProviderRequest* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderRequest*>(
               &_AddServiceProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddServiceProviderRequest& a, AddServiceProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderRequest* New() const final {
    return CreateMaybeMessage<AddServiceProviderRequest>(nullptr);
  }

  AddServiceProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderRequest& from);
  void MergeFrom(const AddServiceProviderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest";
  }
  protected:
  explicit AddServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMobileNumberFieldNumber = 3,
    kWhatsappNumberFieldNumber = 4,
    kPincodeFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mobileNumber = 3;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // string whatsappNumber = 4;
  void clear_whatsappnumber();
  const std::string& whatsappnumber() const;
  void set_whatsappnumber(const std::string& value);
  void set_whatsappnumber(std::string&& value);
  void set_whatsappnumber(const char* value);
  void set_whatsappnumber(const char* value, size_t size);
  std::string* mutable_whatsappnumber();
  std::string* release_whatsappnumber();
  void set_allocated_whatsappnumber(std::string* whatsappnumber);
  private:
  const std::string& _internal_whatsappnumber() const;
  void _internal_set_whatsappnumber(const std::string& value);
  std::string* _internal_mutable_whatsappnumber();
  public:

  // string pincode = 5;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whatsappnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceProviderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest) */ {
 public:
  inline BulkAddServiceProviderRequest() : BulkAddServiceProviderRequest(nullptr) {}
  virtual ~BulkAddServiceProviderRequest();

  BulkAddServiceProviderRequest(const BulkAddServiceProviderRequest& from);
  BulkAddServiceProviderRequest(BulkAddServiceProviderRequest&& from) noexcept
    : BulkAddServiceProviderRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceProviderRequest& operator=(const BulkAddServiceProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceProviderRequest& operator=(BulkAddServiceProviderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceProviderRequest& default_instance();

  static inline const BulkAddServiceProviderRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceProviderRequest*>(
               &_BulkAddServiceProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BulkAddServiceProviderRequest& a, BulkAddServiceProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceProviderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceProviderRequest* New() const final {
    return CreateMaybeMessage<BulkAddServiceProviderRequest>(nullptr);
  }

  BulkAddServiceProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceProviderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceProviderRequest& from);
  void MergeFrom(const BulkAddServiceProviderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest";
  }
  protected:
  explicit BulkAddServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& _internal_requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* _internal_add_requests();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >&
      requests() const;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest > requests_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse) */ {
 public:
  inline AddServiceProviderResponse() : AddServiceProviderResponse(nullptr) {}
  virtual ~AddServiceProviderResponse();

  AddServiceProviderResponse(const AddServiceProviderResponse& from);
  AddServiceProviderResponse(AddServiceProviderResponse&& from) noexcept
    : AddServiceProviderResponse() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderResponse& operator=(const AddServiceProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderResponse& operator=(AddServiceProviderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderResponse& default_instance();

  static inline const AddServiceProviderResponse* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderResponse*>(
               &_AddServiceProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddServiceProviderResponse& a, AddServiceProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderResponse* New() const final {
    return CreateMaybeMessage<AddServiceProviderResponse>(nullptr);
  }

  AddServiceProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderResponse& from);
  void MergeFrom(const AddServiceProviderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse";
  }
  protected:
  explicit AddServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceProviderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse) */ {
 public:
  inline BulkAddServiceProviderResponse() : BulkAddServiceProviderResponse(nullptr) {}
  virtual ~BulkAddServiceProviderResponse();

  BulkAddServiceProviderResponse(const BulkAddServiceProviderResponse& from);
  BulkAddServiceProviderResponse(BulkAddServiceProviderResponse&& from) noexcept
    : BulkAddServiceProviderResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceProviderResponse& operator=(const BulkAddServiceProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceProviderResponse& operator=(BulkAddServiceProviderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceProviderResponse& default_instance();

  static inline const BulkAddServiceProviderResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceProviderResponse*>(
               &_BulkAddServiceProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BulkAddServiceProviderResponse& a, BulkAddServiceProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceProviderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceProviderResponse* New() const final {
    return CreateMaybeMessage<BulkAddServiceProviderResponse>(nullptr);
  }

  BulkAddServiceProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceProviderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceProviderResponse& from);
  void MergeFrom(const BulkAddServiceProviderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse";
  }
  protected:
  explicit BulkAddServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& _internal_responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* _internal_add_responses();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >&
      responses() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse > responses_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest) */ {
 public:
  inline AddServiceLocationRequest() : AddServiceLocationRequest(nullptr) {}
  virtual ~AddServiceLocationRequest();

  AddServiceLocationRequest(const AddServiceLocationRequest& from);
  AddServiceLocationRequest(AddServiceLocationRequest&& from) noexcept
    : AddServiceLocationRequest() {
    *this = ::std::move(from);
  }

  inline AddServiceLocationRequest& operator=(const AddServiceLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceLocationRequest& operator=(AddServiceLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceLocationRequest& default_instance();

  static inline const AddServiceLocationRequest* internal_default_instance() {
    return reinterpret_cast<const AddServiceLocationRequest*>(
               &_AddServiceLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddServiceLocationRequest& a, AddServiceLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceLocationRequest* New() const final {
    return CreateMaybeMessage<AddServiceLocationRequest>(nullptr);
  }

  AddServiceLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceLocationRequest& from);
  void MergeFrom(const AddServiceLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest";
  }
  protected:
  explicit AddServiceLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeographyIdFieldNumber = 3,
    kDistrictFieldNumber = 4,
    kStateFieldNumber = 5,
    kGeoHashFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kServiceProviderIdFieldNumber = 2,
    kLatitudeFieldNumber = 7,
    kLongitudeFieldNumber = 8,
  };
  // string geographyId = 3;
  void clear_geographyid();
  const std::string& geographyid() const;
  void set_geographyid(const std::string& value);
  void set_geographyid(std::string&& value);
  void set_geographyid(const char* value);
  void set_geographyid(const char* value, size_t size);
  std::string* mutable_geographyid();
  std::string* release_geographyid();
  void set_allocated_geographyid(std::string* geographyid);
  private:
  const std::string& _internal_geographyid() const;
  void _internal_set_geographyid(const std::string& value);
  std::string* _internal_mutable_geographyid();
  public:

  // string district = 4;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 5;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string geoHash = 6;
  void clear_geohash();
  const std::string& geohash() const;
  void set_geohash(const std::string& value);
  void set_geohash(std::string&& value);
  void set_geohash(const char* value);
  void set_geohash(const char* value, size_t size);
  std::string* mutable_geohash();
  std::string* release_geohash();
  void set_allocated_geohash(std::string* geohash);
  private:
  const std::string& _internal_geohash() const;
  void _internal_set_geohash(const std::string& value);
  std::string* _internal_mutable_geohash();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 serviceProviderId = 2;
  void clear_serviceproviderid();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid() const;
  void set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceproviderid() const;
  void _internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double latitude = 7;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 8;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest) */ {
 public:
  inline BulkAddServiceLocationRequest() : BulkAddServiceLocationRequest(nullptr) {}
  virtual ~BulkAddServiceLocationRequest();

  BulkAddServiceLocationRequest(const BulkAddServiceLocationRequest& from);
  BulkAddServiceLocationRequest(BulkAddServiceLocationRequest&& from) noexcept
    : BulkAddServiceLocationRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceLocationRequest& operator=(const BulkAddServiceLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceLocationRequest& operator=(BulkAddServiceLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceLocationRequest& default_instance();

  static inline const BulkAddServiceLocationRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceLocationRequest*>(
               &_BulkAddServiceLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BulkAddServiceLocationRequest& a, BulkAddServiceLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceLocationRequest* New() const final {
    return CreateMaybeMessage<BulkAddServiceLocationRequest>(nullptr);
  }

  BulkAddServiceLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceLocationRequest& from);
  void MergeFrom(const BulkAddServiceLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest";
  }
  protected:
  explicit BulkAddServiceLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& _internal_requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* _internal_add_requests();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >&
      requests() const;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest > requests_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse) */ {
 public:
  inline AddServiceLocationResponse() : AddServiceLocationResponse(nullptr) {}
  virtual ~AddServiceLocationResponse();

  AddServiceLocationResponse(const AddServiceLocationResponse& from);
  AddServiceLocationResponse(AddServiceLocationResponse&& from) noexcept
    : AddServiceLocationResponse() {
    *this = ::std::move(from);
  }

  inline AddServiceLocationResponse& operator=(const AddServiceLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceLocationResponse& operator=(AddServiceLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceLocationResponse& default_instance();

  static inline const AddServiceLocationResponse* internal_default_instance() {
    return reinterpret_cast<const AddServiceLocationResponse*>(
               &_AddServiceLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddServiceLocationResponse& a, AddServiceLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceLocationResponse* New() const final {
    return CreateMaybeMessage<AddServiceLocationResponse>(nullptr);
  }

  AddServiceLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceLocationResponse& from);
  void MergeFrom(const AddServiceLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse";
  }
  protected:
  explicit AddServiceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse) */ {
 public:
  inline BulkAddServiceLocationResponse() : BulkAddServiceLocationResponse(nullptr) {}
  virtual ~BulkAddServiceLocationResponse();

  BulkAddServiceLocationResponse(const BulkAddServiceLocationResponse& from);
  BulkAddServiceLocationResponse(BulkAddServiceLocationResponse&& from) noexcept
    : BulkAddServiceLocationResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceLocationResponse& operator=(const BulkAddServiceLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceLocationResponse& operator=(BulkAddServiceLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceLocationResponse& default_instance();

  static inline const BulkAddServiceLocationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceLocationResponse*>(
               &_BulkAddServiceLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BulkAddServiceLocationResponse& a, BulkAddServiceLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceLocationResponse* New() const final {
    return CreateMaybeMessage<BulkAddServiceLocationResponse>(nullptr);
  }

  BulkAddServiceLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceLocationResponse& from);
  void MergeFrom(const BulkAddServiceLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse";
  }
  protected:
  explicit BulkAddServiceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& _internal_responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* _internal_add_responses();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >&
      responses() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse > responses_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServicesRequest) */ {
 public:
  inline AddServicesRequest() : AddServicesRequest(nullptr) {}
  virtual ~AddServicesRequest();

  AddServicesRequest(const AddServicesRequest& from);
  AddServicesRequest(AddServicesRequest&& from) noexcept
    : AddServicesRequest() {
    *this = ::std::move(from);
  }

  inline AddServicesRequest& operator=(const AddServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServicesRequest& operator=(AddServicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServicesRequest& default_instance();

  static inline const AddServicesRequest* internal_default_instance() {
    return reinterpret_cast<const AddServicesRequest*>(
               &_AddServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddServicesRequest& a, AddServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServicesRequest* New() const final {
    return CreateMaybeMessage<AddServicesRequest>(nullptr);
  }

  AddServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServicesRequest& from);
  void MergeFrom(const AddServicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServicesRequest";
  }
  protected:
  explicit AddServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kServiceTypeFieldNumber = 3,
    kImageUrlFieldNumber = 4,
    kTranslationKeyFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
  };
  // string serviceName = 2;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string serviceType = 3;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string imageUrl = 4;
  void clear_imageurl();
  const std::string& imageurl() const;
  void set_imageurl(const std::string& value);
  void set_imageurl(std::string&& value);
  void set_imageurl(const char* value);
  void set_imageurl(const char* value, size_t size);
  std::string* mutable_imageurl();
  std::string* release_imageurl();
  void set_allocated_imageurl(std::string* imageurl);
  private:
  const std::string& _internal_imageurl() const;
  void _internal_set_imageurl(const std::string& value);
  std::string* _internal_mutable_imageurl();
  public:

  // string translationKey = 5;
  void clear_translationkey();
  const std::string& translationkey() const;
  void set_translationkey(const std::string& value);
  void set_translationkey(std::string&& value);
  void set_translationkey(const char* value);
  void set_translationkey(const char* value, size_t size);
  std::string* mutable_translationkey();
  std::string* release_translationkey();
  void set_allocated_translationkey(std::string* translationkey);
  private:
  const std::string& _internal_translationkey() const;
  void _internal_set_translationkey(const std::string& value);
  std::string* _internal_mutable_translationkey();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translationkey_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest) */ {
 public:
  inline BulkAddServicesRequest() : BulkAddServicesRequest(nullptr) {}
  virtual ~BulkAddServicesRequest();

  BulkAddServicesRequest(const BulkAddServicesRequest& from);
  BulkAddServicesRequest(BulkAddServicesRequest&& from) noexcept
    : BulkAddServicesRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddServicesRequest& operator=(const BulkAddServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServicesRequest& operator=(BulkAddServicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServicesRequest& default_instance();

  static inline const BulkAddServicesRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddServicesRequest*>(
               &_BulkAddServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BulkAddServicesRequest& a, BulkAddServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServicesRequest* New() const final {
    return CreateMaybeMessage<BulkAddServicesRequest>(nullptr);
  }

  BulkAddServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServicesRequest& from);
  void MergeFrom(const BulkAddServicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest";
  }
  protected:
  explicit BulkAddServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& _internal_requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* _internal_add_requests();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >&
      requests() const;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest > requests_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServicesResponse) */ {
 public:
  inline AddServicesResponse() : AddServicesResponse(nullptr) {}
  virtual ~AddServicesResponse();

  AddServicesResponse(const AddServicesResponse& from);
  AddServicesResponse(AddServicesResponse&& from) noexcept
    : AddServicesResponse() {
    *this = ::std::move(from);
  }

  inline AddServicesResponse& operator=(const AddServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServicesResponse& operator=(AddServicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServicesResponse& default_instance();

  static inline const AddServicesResponse* internal_default_instance() {
    return reinterpret_cast<const AddServicesResponse*>(
               &_AddServicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddServicesResponse& a, AddServicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServicesResponse* New() const final {
    return CreateMaybeMessage<AddServicesResponse>(nullptr);
  }

  AddServicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServicesResponse& from);
  void MergeFrom(const AddServicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServicesResponse";
  }
  protected:
  explicit AddServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse) */ {
 public:
  inline BulkAddServicesResponse() : BulkAddServicesResponse(nullptr) {}
  virtual ~BulkAddServicesResponse();

  BulkAddServicesResponse(const BulkAddServicesResponse& from);
  BulkAddServicesResponse(BulkAddServicesResponse&& from) noexcept
    : BulkAddServicesResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddServicesResponse& operator=(const BulkAddServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServicesResponse& operator=(BulkAddServicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServicesResponse& default_instance();

  static inline const BulkAddServicesResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddServicesResponse*>(
               &_BulkAddServicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BulkAddServicesResponse& a, BulkAddServicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServicesResponse* New() const final {
    return CreateMaybeMessage<BulkAddServicesResponse>(nullptr);
  }

  BulkAddServicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServicesResponse& from);
  void MergeFrom(const BulkAddServicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse";
  }
  protected:
  explicit BulkAddServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServicesResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& _internal_responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* _internal_add_responses();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >&
      responses() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse > responses_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderMappingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest) */ {
 public:
  inline AddServiceProviderMappingRequest() : AddServiceProviderMappingRequest(nullptr) {}
  virtual ~AddServiceProviderMappingRequest();

  AddServiceProviderMappingRequest(const AddServiceProviderMappingRequest& from);
  AddServiceProviderMappingRequest(AddServiceProviderMappingRequest&& from) noexcept
    : AddServiceProviderMappingRequest() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderMappingRequest& operator=(const AddServiceProviderMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderMappingRequest& operator=(AddServiceProviderMappingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderMappingRequest& default_instance();

  static inline const AddServiceProviderMappingRequest* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderMappingRequest*>(
               &_AddServiceProviderMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddServiceProviderMappingRequest& a, AddServiceProviderMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderMappingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderMappingRequest* New() const final {
    return CreateMaybeMessage<AddServiceProviderMappingRequest>(nullptr);
  }

  AddServiceProviderMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderMappingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderMappingRequest& from);
  void MergeFrom(const AddServiceProviderMappingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderMappingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest";
  }
  protected:
  explicit AddServiceProviderMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostPerAcreFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kServiceIdFieldNumber = 2,
    kServiceProviderIdFieldNumber = 3,
    kMachineCountFieldNumber = 4,
  };
  // string costPerAcre = 5;
  void clear_costperacre();
  const std::string& costperacre() const;
  void set_costperacre(const std::string& value);
  void set_costperacre(std::string&& value);
  void set_costperacre(const char* value);
  void set_costperacre(const char* value, size_t size);
  std::string* mutable_costperacre();
  std::string* release_costperacre();
  void set_allocated_costperacre(std::string* costperacre);
  private:
  const std::string& _internal_costperacre() const;
  void _internal_set_costperacre(const std::string& value);
  std::string* _internal_mutable_costperacre();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 serviceId = 2;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serviceProviderId = 3;
  void clear_serviceproviderid();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid() const;
  void set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceproviderid() const;
  void _internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 machineCount = 4;
  void clear_machinecount();
  ::PROTOBUF_NAMESPACE_ID::int64 machinecount() const;
  void set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machinecount() const;
  void _internal_set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr costperacre_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid_;
  ::PROTOBUF_NAMESPACE_ID::int64 machinecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceProviderMappingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest) */ {
 public:
  inline BulkAddServiceProviderMappingRequest() : BulkAddServiceProviderMappingRequest(nullptr) {}
  virtual ~BulkAddServiceProviderMappingRequest();

  BulkAddServiceProviderMappingRequest(const BulkAddServiceProviderMappingRequest& from);
  BulkAddServiceProviderMappingRequest(BulkAddServiceProviderMappingRequest&& from) noexcept
    : BulkAddServiceProviderMappingRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceProviderMappingRequest& operator=(const BulkAddServiceProviderMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceProviderMappingRequest& operator=(BulkAddServiceProviderMappingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceProviderMappingRequest& default_instance();

  static inline const BulkAddServiceProviderMappingRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceProviderMappingRequest*>(
               &_BulkAddServiceProviderMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BulkAddServiceProviderMappingRequest& a, BulkAddServiceProviderMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceProviderMappingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceProviderMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceProviderMappingRequest* New() const final {
    return CreateMaybeMessage<BulkAddServiceProviderMappingRequest>(nullptr);
  }

  BulkAddServiceProviderMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceProviderMappingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceProviderMappingRequest& from);
  void MergeFrom(const BulkAddServiceProviderMappingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceProviderMappingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest";
  }
  protected:
  explicit BulkAddServiceProviderMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& _internal_requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* _internal_add_requests();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >&
      requests() const;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest > requests_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderMappingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse) */ {
 public:
  inline AddServiceProviderMappingResponse() : AddServiceProviderMappingResponse(nullptr) {}
  virtual ~AddServiceProviderMappingResponse();

  AddServiceProviderMappingResponse(const AddServiceProviderMappingResponse& from);
  AddServiceProviderMappingResponse(AddServiceProviderMappingResponse&& from) noexcept
    : AddServiceProviderMappingResponse() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderMappingResponse& operator=(const AddServiceProviderMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderMappingResponse& operator=(AddServiceProviderMappingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderMappingResponse& default_instance();

  static inline const AddServiceProviderMappingResponse* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderMappingResponse*>(
               &_AddServiceProviderMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddServiceProviderMappingResponse& a, AddServiceProviderMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderMappingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderMappingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderMappingResponse* New() const final {
    return CreateMaybeMessage<AddServiceProviderMappingResponse>(nullptr);
  }

  AddServiceProviderMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderMappingResponse& from);
  void MergeFrom(const AddServiceProviderMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse";
  }
  protected:
  explicit AddServiceProviderMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceProviderMappingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse) */ {
 public:
  inline BulkAddServiceProviderMappingResponse() : BulkAddServiceProviderMappingResponse(nullptr) {}
  virtual ~BulkAddServiceProviderMappingResponse();

  BulkAddServiceProviderMappingResponse(const BulkAddServiceProviderMappingResponse& from);
  BulkAddServiceProviderMappingResponse(BulkAddServiceProviderMappingResponse&& from) noexcept
    : BulkAddServiceProviderMappingResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceProviderMappingResponse& operator=(const BulkAddServiceProviderMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceProviderMappingResponse& operator=(BulkAddServiceProviderMappingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceProviderMappingResponse& default_instance();

  static inline const BulkAddServiceProviderMappingResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceProviderMappingResponse*>(
               &_BulkAddServiceProviderMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BulkAddServiceProviderMappingResponse& a, BulkAddServiceProviderMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceProviderMappingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceProviderMappingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceProviderMappingResponse* New() const final {
    return CreateMaybeMessage<BulkAddServiceProviderMappingResponse>(nullptr);
  }

  BulkAddServiceProviderMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceProviderMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceProviderMappingResponse& from);
  void MergeFrom(const BulkAddServiceProviderMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceProviderMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse";
  }
  protected:
  explicit BulkAddServiceProviderMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& _internal_responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* _internal_add_responses();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >&
      responses() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse > responses_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest) */ {
 public:
  inline AddServiceConfigRequest() : AddServiceConfigRequest(nullptr) {}
  virtual ~AddServiceConfigRequest();

  AddServiceConfigRequest(const AddServiceConfigRequest& from);
  AddServiceConfigRequest(AddServiceConfigRequest&& from) noexcept
    : AddServiceConfigRequest() {
    *this = ::std::move(from);
  }

  inline AddServiceConfigRequest& operator=(const AddServiceConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceConfigRequest& operator=(AddServiceConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceConfigRequest& default_instance();

  static inline const AddServiceConfigRequest* internal_default_instance() {
    return reinterpret_cast<const AddServiceConfigRequest*>(
               &_AddServiceConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddServiceConfigRequest& a, AddServiceConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceConfigRequest* New() const final {
    return CreateMaybeMessage<AddServiceConfigRequest>(nullptr);
  }

  AddServiceConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceConfigRequest& from);
  void MergeFrom(const AddServiceConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest";
  }
  protected:
  explicit AddServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTypeFieldNumber = 2,
    kRegionNameFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kCropIdFieldNumber = 3,
    kSectionFieldNumber = 5,
    kServiceRankFieldNumber = 6,
    kValidFromFieldNumber = 7,
    kValidTillFieldNumber = 8,
  };
  // string serviceType = 2;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string regionName = 4;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 cropId = 3;
  void clear_cropid();
  ::PROTOBUF_NAMESPACE_ID::int64 cropid() const;
  void set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cropid() const;
  void _internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 section = 5;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int64 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serviceRank = 6;
  void clear_servicerank();
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank() const;
  void set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servicerank() const;
  void _internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 validFrom = 7;
  void clear_validfrom();
  ::PROTOBUF_NAMESPACE_ID::int64 validfrom() const;
  void set_validfrom(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_validfrom() const;
  void _internal_set_validfrom(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 validTill = 8;
  void clear_validtill();
  ::PROTOBUF_NAMESPACE_ID::int64 validtill() const;
  void set_validtill(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_validtill() const;
  void _internal_set_validtill(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 cropid_;
  ::PROTOBUF_NAMESPACE_ID::int64 section_;
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank_;
  ::PROTOBUF_NAMESPACE_ID::int64 validfrom_;
  ::PROTOBUF_NAMESPACE_ID::int64 validtill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest) */ {
 public:
  inline BulkAddServiceConfigRequest() : BulkAddServiceConfigRequest(nullptr) {}
  virtual ~BulkAddServiceConfigRequest();

  BulkAddServiceConfigRequest(const BulkAddServiceConfigRequest& from);
  BulkAddServiceConfigRequest(BulkAddServiceConfigRequest&& from) noexcept
    : BulkAddServiceConfigRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceConfigRequest& operator=(const BulkAddServiceConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceConfigRequest& operator=(BulkAddServiceConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceConfigRequest& default_instance();

  static inline const BulkAddServiceConfigRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceConfigRequest*>(
               &_BulkAddServiceConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BulkAddServiceConfigRequest& a, BulkAddServiceConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceConfigRequest* New() const final {
    return CreateMaybeMessage<BulkAddServiceConfigRequest>(nullptr);
  }

  BulkAddServiceConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceConfigRequest& from);
  void MergeFrom(const BulkAddServiceConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest";
  }
  protected:
  explicit BulkAddServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& _internal_requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* _internal_add_requests();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& requests(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >&
      requests() const;

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest > requests_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse) */ {
 public:
  inline AddServiceConfigResponse() : AddServiceConfigResponse(nullptr) {}
  virtual ~AddServiceConfigResponse();

  AddServiceConfigResponse(const AddServiceConfigResponse& from);
  AddServiceConfigResponse(AddServiceConfigResponse&& from) noexcept
    : AddServiceConfigResponse() {
    *this = ::std::move(from);
  }

  inline AddServiceConfigResponse& operator=(const AddServiceConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceConfigResponse& operator=(AddServiceConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceConfigResponse& default_instance();

  static inline const AddServiceConfigResponse* internal_default_instance() {
    return reinterpret_cast<const AddServiceConfigResponse*>(
               &_AddServiceConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddServiceConfigResponse& a, AddServiceConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceConfigResponse* New() const final {
    return CreateMaybeMessage<AddServiceConfigResponse>(nullptr);
  }

  AddServiceConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceConfigResponse& from);
  void MergeFrom(const AddServiceConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse";
  }
  protected:
  explicit AddServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddServiceConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse) */ {
 public:
  inline BulkAddServiceConfigResponse() : BulkAddServiceConfigResponse(nullptr) {}
  virtual ~BulkAddServiceConfigResponse();

  BulkAddServiceConfigResponse(const BulkAddServiceConfigResponse& from);
  BulkAddServiceConfigResponse(BulkAddServiceConfigResponse&& from) noexcept
    : BulkAddServiceConfigResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddServiceConfigResponse& operator=(const BulkAddServiceConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddServiceConfigResponse& operator=(BulkAddServiceConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddServiceConfigResponse& default_instance();

  static inline const BulkAddServiceConfigResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddServiceConfigResponse*>(
               &_BulkAddServiceConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BulkAddServiceConfigResponse& a, BulkAddServiceConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddServiceConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddServiceConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddServiceConfigResponse* New() const final {
    return CreateMaybeMessage<BulkAddServiceConfigResponse>(nullptr);
  }

  BulkAddServiceConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddServiceConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddServiceConfigResponse& from);
  void MergeFrom(const BulkAddServiceConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddServiceConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse";
  }
  protected:
  explicit BulkAddServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& _internal_responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* _internal_add_responses();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& responses(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >&
      responses() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse > responses_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest) */ {
 public:
  inline GetServiceProviderRequest() : GetServiceProviderRequest(nullptr) {}
  virtual ~GetServiceProviderRequest();

  GetServiceProviderRequest(const GetServiceProviderRequest& from);
  GetServiceProviderRequest(GetServiceProviderRequest&& from) noexcept
    : GetServiceProviderRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderRequest& operator=(const GetServiceProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderRequest& operator=(GetServiceProviderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderRequest& default_instance();

  static inline const GetServiceProviderRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderRequest*>(
               &_GetServiceProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetServiceProviderRequest& a, GetServiceProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderRequest* New() const final {
    return CreateMaybeMessage<GetServiceProviderRequest>(nullptr);
  }

  GetServiceProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderRequest& from);
  void MergeFrom(const GetServiceProviderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest";
  }
  protected:
  explicit GetServiceProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCropIdFieldNumber = 8,
    kServiceNameFieldNumber = 11,
    kRequestHeadersFieldNumber = 1,
    kPageFieldNumber = 6,
    kOffsetFieldNumber = 7,
    kLatitudeFieldNumber = 9,
    kIsStaleAllowedFieldNumber = 2,
    kLongitudeFieldNumber = 10,
  };
  // repeated int64 cropId = 8;
  int cropid_size() const;
  private:
  int _internal_cropid_size() const;
  public:
  void clear_cropid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cropid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_cropid() const;
  void _internal_add_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_cropid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 cropid(int index) const;
  void set_cropid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      cropid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_cropid();

  // string serviceName = 11;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 page = 6;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int64 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 7;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double latitude = 9;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // double longitude = 10;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > cropid_;
  mutable std::atomic<int> _cropid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 page_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  double latitude_;
  bool isstaleallowed_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord) */ {
 public:
  inline GetServiceProviderResponseRecord() : GetServiceProviderResponseRecord(nullptr) {}
  virtual ~GetServiceProviderResponseRecord();

  GetServiceProviderResponseRecord(const GetServiceProviderResponseRecord& from);
  GetServiceProviderResponseRecord(GetServiceProviderResponseRecord&& from) noexcept
    : GetServiceProviderResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderResponseRecord& operator=(const GetServiceProviderResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderResponseRecord& operator=(GetServiceProviderResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderResponseRecord& default_instance();

  static inline const GetServiceProviderResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderResponseRecord*>(
               &_GetServiceProviderResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetServiceProviderResponseRecord& a, GetServiceProviderResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceProviderResponseRecord>(nullptr);
  }

  GetServiceProviderResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderResponseRecord& from);
  void MergeFrom(const GetServiceProviderResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord";
  }
  protected:
  explicit GetServiceProviderResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse) */ {
 public:
  inline GetServiceProviderResponse() : GetServiceProviderResponse(nullptr) {}
  virtual ~GetServiceProviderResponse();

  GetServiceProviderResponse(const GetServiceProviderResponse& from);
  GetServiceProviderResponse(GetServiceProviderResponse&& from) noexcept
    : GetServiceProviderResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderResponse& operator=(const GetServiceProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderResponse& operator=(GetServiceProviderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderResponse& default_instance();

  static inline const GetServiceProviderResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderResponse*>(
               &_GetServiceProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetServiceProviderResponse& a, GetServiceProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderResponse* New() const final {
    return CreateMaybeMessage<GetServiceProviderResponse>(nullptr);
  }

  GetServiceProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderResponse& from);
  void MergeFrom(const GetServiceProviderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse";
  }
  protected:
  explicit GetServiceProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kServiceProviderInfoFieldNumber = 5,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceProviderInfo serviceProviderInfo = 5;
  int serviceproviderinfo_size() const;
  private:
  int _internal_serviceproviderinfo_size() const;
  public:
  void clear_serviceproviderinfo();
  ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* mutable_serviceproviderinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >*
      mutable_serviceproviderinfo();
  private:
  const ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo& _internal_serviceproviderinfo(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* _internal_add_serviceproviderinfo();
  public:
  const ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo& serviceproviderinfo(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* add_serviceproviderinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >&
      serviceproviderinfo() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo > serviceproviderinfo_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceProviderInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo) */ {
 public:
  inline ServiceProviderInfo() : ServiceProviderInfo(nullptr) {}
  virtual ~ServiceProviderInfo();

  ServiceProviderInfo(const ServiceProviderInfo& from);
  ServiceProviderInfo(ServiceProviderInfo&& from) noexcept
    : ServiceProviderInfo() {
    *this = ::std::move(from);
  }

  inline ServiceProviderInfo& operator=(const ServiceProviderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceProviderInfo& operator=(ServiceProviderInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceProviderInfo& default_instance();

  static inline const ServiceProviderInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceProviderInfo*>(
               &_ServiceProviderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ServiceProviderInfo& a, ServiceProviderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceProviderInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceProviderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceProviderInfo* New() const final {
    return CreateMaybeMessage<ServiceProviderInfo>(nullptr);
  }

  ServiceProviderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceProviderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceProviderInfo& from);
  void MergeFrom(const ServiceProviderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceProviderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.ServiceProviderInfo";
  }
  protected:
  explicit ServiceProviderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceProviderNameFieldNumber = 1,
    kServiceProviderContactDetailsFieldNumber = 2,
    kServiceProviderAddressFieldNumber = 3,
    kCostPerAcreFieldNumber = 4,
    kServiceProviderWhatsappNumberFieldNumber = 6,
    kDistanceFieldNumber = 5,
  };
  // string serviceProviderName = 1;
  void clear_serviceprovidername();
  const std::string& serviceprovidername() const;
  void set_serviceprovidername(const std::string& value);
  void set_serviceprovidername(std::string&& value);
  void set_serviceprovidername(const char* value);
  void set_serviceprovidername(const char* value, size_t size);
  std::string* mutable_serviceprovidername();
  std::string* release_serviceprovidername();
  void set_allocated_serviceprovidername(std::string* serviceprovidername);
  private:
  const std::string& _internal_serviceprovidername() const;
  void _internal_set_serviceprovidername(const std::string& value);
  std::string* _internal_mutable_serviceprovidername();
  public:

  // string serviceProviderContactDetails = 2;
  void clear_serviceprovidercontactdetails();
  const std::string& serviceprovidercontactdetails() const;
  void set_serviceprovidercontactdetails(const std::string& value);
  void set_serviceprovidercontactdetails(std::string&& value);
  void set_serviceprovidercontactdetails(const char* value);
  void set_serviceprovidercontactdetails(const char* value, size_t size);
  std::string* mutable_serviceprovidercontactdetails();
  std::string* release_serviceprovidercontactdetails();
  void set_allocated_serviceprovidercontactdetails(std::string* serviceprovidercontactdetails);
  private:
  const std::string& _internal_serviceprovidercontactdetails() const;
  void _internal_set_serviceprovidercontactdetails(const std::string& value);
  std::string* _internal_mutable_serviceprovidercontactdetails();
  public:

  // string serviceProviderAddress = 3;
  void clear_serviceprovideraddress();
  const std::string& serviceprovideraddress() const;
  void set_serviceprovideraddress(const std::string& value);
  void set_serviceprovideraddress(std::string&& value);
  void set_serviceprovideraddress(const char* value);
  void set_serviceprovideraddress(const char* value, size_t size);
  std::string* mutable_serviceprovideraddress();
  std::string* release_serviceprovideraddress();
  void set_allocated_serviceprovideraddress(std::string* serviceprovideraddress);
  private:
  const std::string& _internal_serviceprovideraddress() const;
  void _internal_set_serviceprovideraddress(const std::string& value);
  std::string* _internal_mutable_serviceprovideraddress();
  public:

  // string costPerAcre = 4;
  void clear_costperacre();
  const std::string& costperacre() const;
  void set_costperacre(const std::string& value);
  void set_costperacre(std::string&& value);
  void set_costperacre(const char* value);
  void set_costperacre(const char* value, size_t size);
  std::string* mutable_costperacre();
  std::string* release_costperacre();
  void set_allocated_costperacre(std::string* costperacre);
  private:
  const std::string& _internal_costperacre() const;
  void _internal_set_costperacre(const std::string& value);
  std::string* _internal_mutable_costperacre();
  public:

  // string serviceProviderWhatsappNumber = 6;
  void clear_serviceproviderwhatsappnumber();
  const std::string& serviceproviderwhatsappnumber() const;
  void set_serviceproviderwhatsappnumber(const std::string& value);
  void set_serviceproviderwhatsappnumber(std::string&& value);
  void set_serviceproviderwhatsappnumber(const char* value);
  void set_serviceproviderwhatsappnumber(const char* value, size_t size);
  std::string* mutable_serviceproviderwhatsappnumber();
  std::string* release_serviceproviderwhatsappnumber();
  void set_allocated_serviceproviderwhatsappnumber(std::string* serviceproviderwhatsappnumber);
  private:
  const std::string& _internal_serviceproviderwhatsappnumber() const;
  void _internal_set_serviceproviderwhatsappnumber(const std::string& value);
  std::string* _internal_mutable_serviceproviderwhatsappnumber();
  public:

  // double distance = 5;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceprovidername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceprovidercontactdetails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceprovideraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr costperacre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceproviderwhatsappnumber_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderFromExcelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest) */ {
 public:
  inline AddServiceProviderFromExcelRequest() : AddServiceProviderFromExcelRequest(nullptr) {}
  virtual ~AddServiceProviderFromExcelRequest();

  AddServiceProviderFromExcelRequest(const AddServiceProviderFromExcelRequest& from);
  AddServiceProviderFromExcelRequest(AddServiceProviderFromExcelRequest&& from) noexcept
    : AddServiceProviderFromExcelRequest() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderFromExcelRequest& operator=(const AddServiceProviderFromExcelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderFromExcelRequest& operator=(AddServiceProviderFromExcelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderFromExcelRequest& default_instance();

  static inline const AddServiceProviderFromExcelRequest* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderFromExcelRequest*>(
               &_AddServiceProviderFromExcelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AddServiceProviderFromExcelRequest& a, AddServiceProviderFromExcelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderFromExcelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderFromExcelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderFromExcelRequest* New() const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelRequest>(nullptr);
  }

  AddServiceProviderFromExcelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderFromExcelRequest& from);
  void MergeFrom(const AddServiceProviderFromExcelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderFromExcelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest";
  }
  protected:
  explicit AddServiceProviderFromExcelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string csv = 6;
  void clear_csv();
  const std::string& csv() const;
  void set_csv(const std::string& value);
  void set_csv(std::string&& value);
  void set_csv(const char* value);
  void set_csv(const char* value, size_t size);
  std::string* mutable_csv();
  std::string* release_csv();
  void set_allocated_csv(std::string* csv);
  private:
  const std::string& _internal_csv() const;
  void _internal_set_csv(const std::string& value);
  std::string* _internal_mutable_csv();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csv_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderFromExcelResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord) */ {
 public:
  inline AddServiceProviderFromExcelResponseRecord() : AddServiceProviderFromExcelResponseRecord(nullptr) {}
  virtual ~AddServiceProviderFromExcelResponseRecord();

  AddServiceProviderFromExcelResponseRecord(const AddServiceProviderFromExcelResponseRecord& from);
  AddServiceProviderFromExcelResponseRecord(AddServiceProviderFromExcelResponseRecord&& from) noexcept
    : AddServiceProviderFromExcelResponseRecord() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderFromExcelResponseRecord& operator=(const AddServiceProviderFromExcelResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderFromExcelResponseRecord& operator=(AddServiceProviderFromExcelResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderFromExcelResponseRecord& default_instance();

  static inline const AddServiceProviderFromExcelResponseRecord* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderFromExcelResponseRecord*>(
               &_AddServiceProviderFromExcelResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AddServiceProviderFromExcelResponseRecord& a, AddServiceProviderFromExcelResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderFromExcelResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderFromExcelResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderFromExcelResponseRecord* New() const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelResponseRecord>(nullptr);
  }

  AddServiceProviderFromExcelResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderFromExcelResponseRecord& from);
  void MergeFrom(const AddServiceProviderFromExcelResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderFromExcelResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord";
  }
  protected:
  explicit AddServiceProviderFromExcelResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddServiceProviderFromExcelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse) */ {
 public:
  inline AddServiceProviderFromExcelResponse() : AddServiceProviderFromExcelResponse(nullptr) {}
  virtual ~AddServiceProviderFromExcelResponse();

  AddServiceProviderFromExcelResponse(const AddServiceProviderFromExcelResponse& from);
  AddServiceProviderFromExcelResponse(AddServiceProviderFromExcelResponse&& from) noexcept
    : AddServiceProviderFromExcelResponse() {
    *this = ::std::move(from);
  }

  inline AddServiceProviderFromExcelResponse& operator=(const AddServiceProviderFromExcelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddServiceProviderFromExcelResponse& operator=(AddServiceProviderFromExcelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddServiceProviderFromExcelResponse& default_instance();

  static inline const AddServiceProviderFromExcelResponse* internal_default_instance() {
    return reinterpret_cast<const AddServiceProviderFromExcelResponse*>(
               &_AddServiceProviderFromExcelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AddServiceProviderFromExcelResponse& a, AddServiceProviderFromExcelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddServiceProviderFromExcelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddServiceProviderFromExcelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddServiceProviderFromExcelResponse* New() const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelResponse>(nullptr);
  }

  AddServiceProviderFromExcelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddServiceProviderFromExcelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddServiceProviderFromExcelResponse& from);
  void MergeFrom(const AddServiceProviderFromExcelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServiceProviderFromExcelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse";
  }
  protected:
  explicit AddServiceProviderFromExcelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kAddServiceProviderRequestFieldNumber = 5,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest addServiceProviderRequest = 5;
  int addserviceproviderrequest_size() const;
  private:
  int _internal_addserviceproviderrequest_size() const;
  public:
  void clear_addserviceproviderrequest();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* mutable_addserviceproviderrequest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >*
      mutable_addserviceproviderrequest();
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& _internal_addserviceproviderrequest(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* _internal_add_addserviceproviderrequest();
  public:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& addserviceproviderrequest(int index) const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* add_addserviceproviderrequest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >&
      addserviceproviderrequest() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest > addserviceproviderrequest_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSDTVOnLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest) */ {
 public:
  inline GetSDTVOnLatLongRequest() : GetSDTVOnLatLongRequest(nullptr) {}
  virtual ~GetSDTVOnLatLongRequest();

  GetSDTVOnLatLongRequest(const GetSDTVOnLatLongRequest& from);
  GetSDTVOnLatLongRequest(GetSDTVOnLatLongRequest&& from) noexcept
    : GetSDTVOnLatLongRequest() {
    *this = ::std::move(from);
  }

  inline GetSDTVOnLatLongRequest& operator=(const GetSDTVOnLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSDTVOnLatLongRequest& operator=(GetSDTVOnLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSDTVOnLatLongRequest& default_instance();

  static inline const GetSDTVOnLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const GetSDTVOnLatLongRequest*>(
               &_GetSDTVOnLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetSDTVOnLatLongRequest& a, GetSDTVOnLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSDTVOnLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSDTVOnLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSDTVOnLatLongRequest* New() const final {
    return CreateMaybeMessage<GetSDTVOnLatLongRequest>(nullptr);
  }

  GetSDTVOnLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSDTVOnLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSDTVOnLatLongRequest& from);
  void MergeFrom(const GetSDTVOnLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSDTVOnLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest";
  }
  protected:
  explicit GetSDTVOnLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
  };
  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSDTVOnLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord) */ {
 public:
  inline GetSDTVOnLatLongResponseRecord() : GetSDTVOnLatLongResponseRecord(nullptr) {}
  virtual ~GetSDTVOnLatLongResponseRecord();

  GetSDTVOnLatLongResponseRecord(const GetSDTVOnLatLongResponseRecord& from);
  GetSDTVOnLatLongResponseRecord(GetSDTVOnLatLongResponseRecord&& from) noexcept
    : GetSDTVOnLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetSDTVOnLatLongResponseRecord& operator=(const GetSDTVOnLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSDTVOnLatLongResponseRecord& operator=(GetSDTVOnLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSDTVOnLatLongResponseRecord& default_instance();

  static inline const GetSDTVOnLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetSDTVOnLatLongResponseRecord*>(
               &_GetSDTVOnLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetSDTVOnLatLongResponseRecord& a, GetSDTVOnLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSDTVOnLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSDTVOnLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSDTVOnLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<GetSDTVOnLatLongResponseRecord>(nullptr);
  }

  GetSDTVOnLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSDTVOnLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSDTVOnLatLongResponseRecord& from);
  void MergeFrom(const GetSDTVOnLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSDTVOnLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord";
  }
  protected:
  explicit GetSDTVOnLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSDTVOnLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse) */ {
 public:
  inline GetSDTVOnLatLongResponse() : GetSDTVOnLatLongResponse(nullptr) {}
  virtual ~GetSDTVOnLatLongResponse();

  GetSDTVOnLatLongResponse(const GetSDTVOnLatLongResponse& from);
  GetSDTVOnLatLongResponse(GetSDTVOnLatLongResponse&& from) noexcept
    : GetSDTVOnLatLongResponse() {
    *this = ::std::move(from);
  }

  inline GetSDTVOnLatLongResponse& operator=(const GetSDTVOnLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSDTVOnLatLongResponse& operator=(GetSDTVOnLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSDTVOnLatLongResponse& default_instance();

  static inline const GetSDTVOnLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const GetSDTVOnLatLongResponse*>(
               &_GetSDTVOnLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetSDTVOnLatLongResponse& a, GetSDTVOnLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSDTVOnLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSDTVOnLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSDTVOnLatLongResponse* New() const final {
    return CreateMaybeMessage<GetSDTVOnLatLongResponse>(nullptr);
  }

  GetSDTVOnLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSDTVOnLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSDTVOnLatLongResponse& from);
  void MergeFrom(const GetSDTVOnLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSDTVOnLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse";
  }
  protected:
  explicit GetSDTVOnLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kVillageNameFieldNumber = 10,
    kTehsilNameFieldNumber = 11,
    kDistrictNameFieldNumber = 12,
    kRegionNameFieldNumber = 13,
    kZoneNameFieldNumber = 14,
    kVillageCodeFieldNumber = 15,
    kTehsilCodeFieldNumber = 16,
    kDistrictCodeFieldNumber = 17,
    kRegionCodeFieldNumber = 18,
    kZoneCodeFieldNumber = 19,
    kStatusFieldNumber = 1,
    kRegionIdFieldNumber = 5,
    kVillageIdFieldNumber = 6,
    kTehsilIdFieldNumber = 7,
    kDistrictIdFieldNumber = 8,
    kZoneIdFieldNumber = 9,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // string villageName = 10;
  void clear_villagename();
  const std::string& villagename() const;
  void set_villagename(const std::string& value);
  void set_villagename(std::string&& value);
  void set_villagename(const char* value);
  void set_villagename(const char* value, size_t size);
  std::string* mutable_villagename();
  std::string* release_villagename();
  void set_allocated_villagename(std::string* villagename);
  private:
  const std::string& _internal_villagename() const;
  void _internal_set_villagename(const std::string& value);
  std::string* _internal_mutable_villagename();
  public:

  // string tehsilName = 11;
  void clear_tehsilname();
  const std::string& tehsilname() const;
  void set_tehsilname(const std::string& value);
  void set_tehsilname(std::string&& value);
  void set_tehsilname(const char* value);
  void set_tehsilname(const char* value, size_t size);
  std::string* mutable_tehsilname();
  std::string* release_tehsilname();
  void set_allocated_tehsilname(std::string* tehsilname);
  private:
  const std::string& _internal_tehsilname() const;
  void _internal_set_tehsilname(const std::string& value);
  std::string* _internal_mutable_tehsilname();
  public:

  // string districtName = 12;
  void clear_districtname();
  const std::string& districtname() const;
  void set_districtname(const std::string& value);
  void set_districtname(std::string&& value);
  void set_districtname(const char* value);
  void set_districtname(const char* value, size_t size);
  std::string* mutable_districtname();
  std::string* release_districtname();
  void set_allocated_districtname(std::string* districtname);
  private:
  const std::string& _internal_districtname() const;
  void _internal_set_districtname(const std::string& value);
  std::string* _internal_mutable_districtname();
  public:

  // string regionName = 13;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // string zoneName = 14;
  void clear_zonename();
  const std::string& zonename() const;
  void set_zonename(const std::string& value);
  void set_zonename(std::string&& value);
  void set_zonename(const char* value);
  void set_zonename(const char* value, size_t size);
  std::string* mutable_zonename();
  std::string* release_zonename();
  void set_allocated_zonename(std::string* zonename);
  private:
  const std::string& _internal_zonename() const;
  void _internal_set_zonename(const std::string& value);
  std::string* _internal_mutable_zonename();
  public:

  // string villageCode = 15;
  void clear_villagecode();
  const std::string& villagecode() const;
  void set_villagecode(const std::string& value);
  void set_villagecode(std::string&& value);
  void set_villagecode(const char* value);
  void set_villagecode(const char* value, size_t size);
  std::string* mutable_villagecode();
  std::string* release_villagecode();
  void set_allocated_villagecode(std::string* villagecode);
  private:
  const std::string& _internal_villagecode() const;
  void _internal_set_villagecode(const std::string& value);
  std::string* _internal_mutable_villagecode();
  public:

  // string tehsilCode = 16;
  void clear_tehsilcode();
  const std::string& tehsilcode() const;
  void set_tehsilcode(const std::string& value);
  void set_tehsilcode(std::string&& value);
  void set_tehsilcode(const char* value);
  void set_tehsilcode(const char* value, size_t size);
  std::string* mutable_tehsilcode();
  std::string* release_tehsilcode();
  void set_allocated_tehsilcode(std::string* tehsilcode);
  private:
  const std::string& _internal_tehsilcode() const;
  void _internal_set_tehsilcode(const std::string& value);
  std::string* _internal_mutable_tehsilcode();
  public:

  // string districtCode = 17;
  void clear_districtcode();
  const std::string& districtcode() const;
  void set_districtcode(const std::string& value);
  void set_districtcode(std::string&& value);
  void set_districtcode(const char* value);
  void set_districtcode(const char* value, size_t size);
  std::string* mutable_districtcode();
  std::string* release_districtcode();
  void set_allocated_districtcode(std::string* districtcode);
  private:
  const std::string& _internal_districtcode() const;
  void _internal_set_districtcode(const std::string& value);
  std::string* _internal_mutable_districtcode();
  public:

  // string regionCode = 18;
  void clear_regioncode();
  const std::string& regioncode() const;
  void set_regioncode(const std::string& value);
  void set_regioncode(std::string&& value);
  void set_regioncode(const char* value);
  void set_regioncode(const char* value, size_t size);
  std::string* mutable_regioncode();
  std::string* release_regioncode();
  void set_allocated_regioncode(std::string* regioncode);
  private:
  const std::string& _internal_regioncode() const;
  void _internal_set_regioncode(const std::string& value);
  std::string* _internal_mutable_regioncode();
  public:

  // string zoneCode = 19;
  void clear_zonecode();
  const std::string& zonecode() const;
  void set_zonecode(const std::string& value);
  void set_zonecode(std::string&& value);
  void set_zonecode(const char* value);
  void set_zonecode(const char* value, size_t size);
  std::string* mutable_zonecode();
  std::string* release_zonecode();
  void set_allocated_zonecode(std::string* zonecode);
  private:
  const std::string& _internal_zonecode() const;
  void _internal_set_zonecode(const std::string& value);
  std::string* _internal_mutable_zonecode();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int64 regionId = 5;
  void clear_regionid();
  ::PROTOBUF_NAMESPACE_ID::int64 regionid() const;
  void set_regionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_regionid() const;
  void _internal_set_regionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 villageId = 6;
  void clear_villageid();
  ::PROTOBUF_NAMESPACE_ID::int64 villageid() const;
  void set_villageid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_villageid() const;
  void _internal_set_villageid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tehsilId = 7;
  void clear_tehsilid();
  ::PROTOBUF_NAMESPACE_ID::int64 tehsilid() const;
  void set_tehsilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tehsilid() const;
  void _internal_set_tehsilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 districtId = 8;
  void clear_districtid();
  ::PROTOBUF_NAMESPACE_ID::int64 districtid() const;
  void set_districtid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_districtid() const;
  void _internal_set_districtid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 zoneId = 9;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::int64 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr villagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsilname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr districtname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zonename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr villagecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsilcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr districtcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regioncode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zonecode_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 regionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 villageid_;
  ::PROTOBUF_NAMESPACE_ID::int64 tehsilid_;
  ::PROTOBUF_NAMESPACE_ID::int64 districtid_;
  ::PROTOBUF_NAMESPACE_ID::int64 zoneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceDetailsOnLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest) */ {
 public:
  inline GetServiceDetailsOnLatLongRequest() : GetServiceDetailsOnLatLongRequest(nullptr) {}
  virtual ~GetServiceDetailsOnLatLongRequest();

  GetServiceDetailsOnLatLongRequest(const GetServiceDetailsOnLatLongRequest& from);
  GetServiceDetailsOnLatLongRequest(GetServiceDetailsOnLatLongRequest&& from) noexcept
    : GetServiceDetailsOnLatLongRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceDetailsOnLatLongRequest& operator=(const GetServiceDetailsOnLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceDetailsOnLatLongRequest& operator=(GetServiceDetailsOnLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceDetailsOnLatLongRequest& default_instance();

  static inline const GetServiceDetailsOnLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceDetailsOnLatLongRequest*>(
               &_GetServiceDetailsOnLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetServiceDetailsOnLatLongRequest& a, GetServiceDetailsOnLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceDetailsOnLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceDetailsOnLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceDetailsOnLatLongRequest* New() const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongRequest>(nullptr);
  }

  GetServiceDetailsOnLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceDetailsOnLatLongRequest& from);
  void MergeFrom(const GetServiceDetailsOnLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceDetailsOnLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest";
  }
  protected:
  explicit GetServiceDetailsOnLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
  };
  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceDetailsOnLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord) */ {
 public:
  inline GetServiceDetailsOnLatLongResponseRecord() : GetServiceDetailsOnLatLongResponseRecord(nullptr) {}
  virtual ~GetServiceDetailsOnLatLongResponseRecord();

  GetServiceDetailsOnLatLongResponseRecord(const GetServiceDetailsOnLatLongResponseRecord& from);
  GetServiceDetailsOnLatLongResponseRecord(GetServiceDetailsOnLatLongResponseRecord&& from) noexcept
    : GetServiceDetailsOnLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceDetailsOnLatLongResponseRecord& operator=(const GetServiceDetailsOnLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceDetailsOnLatLongResponseRecord& operator=(GetServiceDetailsOnLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceDetailsOnLatLongResponseRecord& default_instance();

  static inline const GetServiceDetailsOnLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceDetailsOnLatLongResponseRecord*>(
               &_GetServiceDetailsOnLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetServiceDetailsOnLatLongResponseRecord& a, GetServiceDetailsOnLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceDetailsOnLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceDetailsOnLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceDetailsOnLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongResponseRecord>(nullptr);
  }

  GetServiceDetailsOnLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceDetailsOnLatLongResponseRecord& from);
  void MergeFrom(const GetServiceDetailsOnLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceDetailsOnLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord";
  }
  protected:
  explicit GetServiceDetailsOnLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceDetailsOnLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse) */ {
 public:
  inline GetServiceDetailsOnLatLongResponse() : GetServiceDetailsOnLatLongResponse(nullptr) {}
  virtual ~GetServiceDetailsOnLatLongResponse();

  GetServiceDetailsOnLatLongResponse(const GetServiceDetailsOnLatLongResponse& from);
  GetServiceDetailsOnLatLongResponse(GetServiceDetailsOnLatLongResponse&& from) noexcept
    : GetServiceDetailsOnLatLongResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceDetailsOnLatLongResponse& operator=(const GetServiceDetailsOnLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceDetailsOnLatLongResponse& operator=(GetServiceDetailsOnLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceDetailsOnLatLongResponse& default_instance();

  static inline const GetServiceDetailsOnLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceDetailsOnLatLongResponse*>(
               &_GetServiceDetailsOnLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetServiceDetailsOnLatLongResponse& a, GetServiceDetailsOnLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceDetailsOnLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceDetailsOnLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceDetailsOnLatLongResponse* New() const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongResponse>(nullptr);
  }

  GetServiceDetailsOnLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceDetailsOnLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceDetailsOnLatLongResponse& from);
  void MergeFrom(const GetServiceDetailsOnLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceDetailsOnLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse";
  }
  protected:
  explicit GetServiceDetailsOnLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kServiceDetailsResponseFieldNumber = 5,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  int servicedetailsresponse_size() const;
  private:
  int _internal_servicedetailsresponse_size() const;
  public:
  void clear_servicedetailsresponse();
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* mutable_servicedetailsresponse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >*
      mutable_servicedetailsresponse();
  private:
  const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& _internal_servicedetailsresponse(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* _internal_add_servicedetailsresponse();
  public:
  const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& servicedetailsresponse(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* add_servicedetailsresponse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >&
      servicedetailsresponse() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse > servicedetailsresponse_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse) */ {
 public:
  inline ServiceDetailsResponse() : ServiceDetailsResponse(nullptr) {}
  virtual ~ServiceDetailsResponse();

  ServiceDetailsResponse(const ServiceDetailsResponse& from);
  ServiceDetailsResponse(ServiceDetailsResponse&& from) noexcept
    : ServiceDetailsResponse() {
    *this = ::std::move(from);
  }

  inline ServiceDetailsResponse& operator=(const ServiceDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDetailsResponse& operator=(ServiceDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceDetailsResponse& default_instance();

  static inline const ServiceDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceDetailsResponse*>(
               &_ServiceDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ServiceDetailsResponse& a, ServiceDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceDetailsResponse* New() const final {
    return CreateMaybeMessage<ServiceDetailsResponse>(nullptr);
  }

  ServiceDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceDetailsResponse& from);
  void MergeFrom(const ServiceDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse";
  }
  protected:
  explicit ServiceDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTypeFieldNumber = 1,
    kImageUrlFieldNumber = 2,
    kRankFieldNumber = 3,
    kSectionFieldNumber = 4,
  };
  // string serviceType = 1;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string imageUrl = 2;
  void clear_imageurl();
  const std::string& imageurl() const;
  void set_imageurl(const std::string& value);
  void set_imageurl(std::string&& value);
  void set_imageurl(const char* value);
  void set_imageurl(const char* value, size_t size);
  std::string* mutable_imageurl();
  std::string* release_imageurl();
  void set_allocated_imageurl(std::string* imageurl);
  private:
  const std::string& _internal_imageurl() const;
  void _internal_set_imageurl(const std::string& value);
  std::string* _internal_mutable_imageurl();
  public:

  // int64 rank = 3;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 section = 4;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int64 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 section_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServicesOnServiceNameAndServiceTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest) */ {
 public:
  inline GetServicesOnServiceNameAndServiceTypeRequest() : GetServicesOnServiceNameAndServiceTypeRequest(nullptr) {}
  virtual ~GetServicesOnServiceNameAndServiceTypeRequest();

  GetServicesOnServiceNameAndServiceTypeRequest(const GetServicesOnServiceNameAndServiceTypeRequest& from);
  GetServicesOnServiceNameAndServiceTypeRequest(GetServicesOnServiceNameAndServiceTypeRequest&& from) noexcept
    : GetServicesOnServiceNameAndServiceTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetServicesOnServiceNameAndServiceTypeRequest& operator=(const GetServicesOnServiceNameAndServiceTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesOnServiceNameAndServiceTypeRequest& operator=(GetServicesOnServiceNameAndServiceTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServicesOnServiceNameAndServiceTypeRequest& default_instance();

  static inline const GetServicesOnServiceNameAndServiceTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetServicesOnServiceNameAndServiceTypeRequest*>(
               &_GetServicesOnServiceNameAndServiceTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetServicesOnServiceNameAndServiceTypeRequest& a, GetServicesOnServiceNameAndServiceTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesOnServiceNameAndServiceTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesOnServiceNameAndServiceTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesOnServiceNameAndServiceTypeRequest* New() const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeRequest>(nullptr);
  }

  GetServicesOnServiceNameAndServiceTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesOnServiceNameAndServiceTypeRequest& from);
  void MergeFrom(const GetServicesOnServiceNameAndServiceTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesOnServiceNameAndServiceTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest";
  }
  protected:
  explicit GetServicesOnServiceNameAndServiceTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kServiceTypeFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string serviceName = 3;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string serviceType = 4;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServicesOnServiceNameAndServiceTypeResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord) */ {
 public:
  inline GetServicesOnServiceNameAndServiceTypeResponseRecord() : GetServicesOnServiceNameAndServiceTypeResponseRecord(nullptr) {}
  virtual ~GetServicesOnServiceNameAndServiceTypeResponseRecord();

  GetServicesOnServiceNameAndServiceTypeResponseRecord(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from);
  GetServicesOnServiceNameAndServiceTypeResponseRecord(GetServicesOnServiceNameAndServiceTypeResponseRecord&& from) noexcept
    : GetServicesOnServiceNameAndServiceTypeResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServicesOnServiceNameAndServiceTypeResponseRecord& operator=(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesOnServiceNameAndServiceTypeResponseRecord& operator=(GetServicesOnServiceNameAndServiceTypeResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServicesOnServiceNameAndServiceTypeResponseRecord& default_instance();

  static inline const GetServicesOnServiceNameAndServiceTypeResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServicesOnServiceNameAndServiceTypeResponseRecord*>(
               &_GetServicesOnServiceNameAndServiceTypeResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetServicesOnServiceNameAndServiceTypeResponseRecord& a, GetServicesOnServiceNameAndServiceTypeResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesOnServiceNameAndServiceTypeResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesOnServiceNameAndServiceTypeResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesOnServiceNameAndServiceTypeResponseRecord* New() const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeResponseRecord>(nullptr);
  }

  GetServicesOnServiceNameAndServiceTypeResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from);
  void MergeFrom(const GetServicesOnServiceNameAndServiceTypeResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesOnServiceNameAndServiceTypeResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord";
  }
  protected:
  explicit GetServicesOnServiceNameAndServiceTypeResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kServiceTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string serviceName = 2;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string serviceType = 3;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServicesOnServiceNameAndServiceTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse) */ {
 public:
  inline GetServicesOnServiceNameAndServiceTypeResponse() : GetServicesOnServiceNameAndServiceTypeResponse(nullptr) {}
  virtual ~GetServicesOnServiceNameAndServiceTypeResponse();

  GetServicesOnServiceNameAndServiceTypeResponse(const GetServicesOnServiceNameAndServiceTypeResponse& from);
  GetServicesOnServiceNameAndServiceTypeResponse(GetServicesOnServiceNameAndServiceTypeResponse&& from) noexcept
    : GetServicesOnServiceNameAndServiceTypeResponse() {
    *this = ::std::move(from);
  }

  inline GetServicesOnServiceNameAndServiceTypeResponse& operator=(const GetServicesOnServiceNameAndServiceTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesOnServiceNameAndServiceTypeResponse& operator=(GetServicesOnServiceNameAndServiceTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServicesOnServiceNameAndServiceTypeResponse& default_instance();

  static inline const GetServicesOnServiceNameAndServiceTypeResponse* internal_default_instance() {
    return reinterpret_cast<const GetServicesOnServiceNameAndServiceTypeResponse*>(
               &_GetServicesOnServiceNameAndServiceTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetServicesOnServiceNameAndServiceTypeResponse& a, GetServicesOnServiceNameAndServiceTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesOnServiceNameAndServiceTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesOnServiceNameAndServiceTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesOnServiceNameAndServiceTypeResponse* New() const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeResponse>(nullptr);
  }

  GetServicesOnServiceNameAndServiceTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesOnServiceNameAndServiceTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesOnServiceNameAndServiceTypeResponse& from);
  void MergeFrom(const GetServicesOnServiceNameAndServiceTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesOnServiceNameAndServiceTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse";
  }
  protected:
  explicit GetServicesOnServiceNameAndServiceTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnMobileNumberRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest) */ {
 public:
  inline GetServiceProviderOnMobileNumberRequest() : GetServiceProviderOnMobileNumberRequest(nullptr) {}
  virtual ~GetServiceProviderOnMobileNumberRequest();

  GetServiceProviderOnMobileNumberRequest(const GetServiceProviderOnMobileNumberRequest& from);
  GetServiceProviderOnMobileNumberRequest(GetServiceProviderOnMobileNumberRequest&& from) noexcept
    : GetServiceProviderOnMobileNumberRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnMobileNumberRequest& operator=(const GetServiceProviderOnMobileNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnMobileNumberRequest& operator=(GetServiceProviderOnMobileNumberRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnMobileNumberRequest& default_instance();

  static inline const GetServiceProviderOnMobileNumberRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnMobileNumberRequest*>(
               &_GetServiceProviderOnMobileNumberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetServiceProviderOnMobileNumberRequest& a, GetServiceProviderOnMobileNumberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnMobileNumberRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnMobileNumberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnMobileNumberRequest* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberRequest>(nullptr);
  }

  GetServiceProviderOnMobileNumberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnMobileNumberRequest& from);
  void MergeFrom(const GetServiceProviderOnMobileNumberRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnMobileNumberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest";
  }
  protected:
  explicit GetServiceProviderOnMobileNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileNumberFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string mobileNumber = 3;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnMobileNumberResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord) */ {
 public:
  inline GetServiceProviderOnMobileNumberResponseRecord() : GetServiceProviderOnMobileNumberResponseRecord(nullptr) {}
  virtual ~GetServiceProviderOnMobileNumberResponseRecord();

  GetServiceProviderOnMobileNumberResponseRecord(const GetServiceProviderOnMobileNumberResponseRecord& from);
  GetServiceProviderOnMobileNumberResponseRecord(GetServiceProviderOnMobileNumberResponseRecord&& from) noexcept
    : GetServiceProviderOnMobileNumberResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnMobileNumberResponseRecord& operator=(const GetServiceProviderOnMobileNumberResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnMobileNumberResponseRecord& operator=(GetServiceProviderOnMobileNumberResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnMobileNumberResponseRecord& default_instance();

  static inline const GetServiceProviderOnMobileNumberResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnMobileNumberResponseRecord*>(
               &_GetServiceProviderOnMobileNumberResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetServiceProviderOnMobileNumberResponseRecord& a, GetServiceProviderOnMobileNumberResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnMobileNumberResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnMobileNumberResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnMobileNumberResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberResponseRecord>(nullptr);
  }

  GetServiceProviderOnMobileNumberResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnMobileNumberResponseRecord& from);
  void MergeFrom(const GetServiceProviderOnMobileNumberResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnMobileNumberResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord";
  }
  protected:
  explicit GetServiceProviderOnMobileNumberResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileNumberFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string mobileNumber = 2;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnMobileNumberResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse) */ {
 public:
  inline GetServiceProviderOnMobileNumberResponse() : GetServiceProviderOnMobileNumberResponse(nullptr) {}
  virtual ~GetServiceProviderOnMobileNumberResponse();

  GetServiceProviderOnMobileNumberResponse(const GetServiceProviderOnMobileNumberResponse& from);
  GetServiceProviderOnMobileNumberResponse(GetServiceProviderOnMobileNumberResponse&& from) noexcept
    : GetServiceProviderOnMobileNumberResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnMobileNumberResponse& operator=(const GetServiceProviderOnMobileNumberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnMobileNumberResponse& operator=(GetServiceProviderOnMobileNumberResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnMobileNumberResponse& default_instance();

  static inline const GetServiceProviderOnMobileNumberResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnMobileNumberResponse*>(
               &_GetServiceProviderOnMobileNumberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetServiceProviderOnMobileNumberResponse& a, GetServiceProviderOnMobileNumberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnMobileNumberResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnMobileNumberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnMobileNumberResponse* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberResponse>(nullptr);
  }

  GetServiceProviderOnMobileNumberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnMobileNumberResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnMobileNumberResponse& from);
  void MergeFrom(const GetServiceProviderOnMobileNumberResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnMobileNumberResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse";
  }
  protected:
  explicit GetServiceProviderOnMobileNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceLocationOnRegionNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest) */ {
 public:
  inline GetServiceLocationOnRegionNameRequest() : GetServiceLocationOnRegionNameRequest(nullptr) {}
  virtual ~GetServiceLocationOnRegionNameRequest();

  GetServiceLocationOnRegionNameRequest(const GetServiceLocationOnRegionNameRequest& from);
  GetServiceLocationOnRegionNameRequest(GetServiceLocationOnRegionNameRequest&& from) noexcept
    : GetServiceLocationOnRegionNameRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceLocationOnRegionNameRequest& operator=(const GetServiceLocationOnRegionNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceLocationOnRegionNameRequest& operator=(GetServiceLocationOnRegionNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceLocationOnRegionNameRequest& default_instance();

  static inline const GetServiceLocationOnRegionNameRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceLocationOnRegionNameRequest*>(
               &_GetServiceLocationOnRegionNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetServiceLocationOnRegionNameRequest& a, GetServiceLocationOnRegionNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceLocationOnRegionNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceLocationOnRegionNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceLocationOnRegionNameRequest* New() const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameRequest>(nullptr);
  }

  GetServiceLocationOnRegionNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceLocationOnRegionNameRequest& from);
  void MergeFrom(const GetServiceLocationOnRegionNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceLocationOnRegionNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest";
  }
  protected:
  explicit GetServiceLocationOnRegionNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionNameFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // repeated string regionName = 6;
  int regionname_size() const;
  private:
  int _internal_regionname_size() const;
  public:
  void clear_regionname();
  const std::string& regionname(int index) const;
  std::string* mutable_regionname(int index);
  void set_regionname(int index, const std::string& value);
  void set_regionname(int index, std::string&& value);
  void set_regionname(int index, const char* value);
  void set_regionname(int index, const char* value, size_t size);
  std::string* add_regionname();
  void add_regionname(const std::string& value);
  void add_regionname(std::string&& value);
  void add_regionname(const char* value);
  void add_regionname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& regionname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_regionname();
  private:
  const std::string& _internal_regionname(int index) const;
  std::string* _internal_add_regionname();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> regionname_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceLocationOnRegionNameResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord) */ {
 public:
  inline GetServiceLocationOnRegionNameResponseRecord() : GetServiceLocationOnRegionNameResponseRecord(nullptr) {}
  virtual ~GetServiceLocationOnRegionNameResponseRecord();

  GetServiceLocationOnRegionNameResponseRecord(const GetServiceLocationOnRegionNameResponseRecord& from);
  GetServiceLocationOnRegionNameResponseRecord(GetServiceLocationOnRegionNameResponseRecord&& from) noexcept
    : GetServiceLocationOnRegionNameResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceLocationOnRegionNameResponseRecord& operator=(const GetServiceLocationOnRegionNameResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceLocationOnRegionNameResponseRecord& operator=(GetServiceLocationOnRegionNameResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceLocationOnRegionNameResponseRecord& default_instance();

  static inline const GetServiceLocationOnRegionNameResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceLocationOnRegionNameResponseRecord*>(
               &_GetServiceLocationOnRegionNameResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetServiceLocationOnRegionNameResponseRecord& a, GetServiceLocationOnRegionNameResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceLocationOnRegionNameResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceLocationOnRegionNameResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceLocationOnRegionNameResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameResponseRecord>(nullptr);
  }

  GetServiceLocationOnRegionNameResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceLocationOnRegionNameResponseRecord& from);
  void MergeFrom(const GetServiceLocationOnRegionNameResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceLocationOnRegionNameResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord";
  }
  protected:
  explicit GetServiceLocationOnRegionNameResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceLocationOnRegionNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse) */ {
 public:
  inline GetServiceLocationOnRegionNameResponse() : GetServiceLocationOnRegionNameResponse(nullptr) {}
  virtual ~GetServiceLocationOnRegionNameResponse();

  GetServiceLocationOnRegionNameResponse(const GetServiceLocationOnRegionNameResponse& from);
  GetServiceLocationOnRegionNameResponse(GetServiceLocationOnRegionNameResponse&& from) noexcept
    : GetServiceLocationOnRegionNameResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceLocationOnRegionNameResponse& operator=(const GetServiceLocationOnRegionNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceLocationOnRegionNameResponse& operator=(GetServiceLocationOnRegionNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceLocationOnRegionNameResponse& default_instance();

  static inline const GetServiceLocationOnRegionNameResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceLocationOnRegionNameResponse*>(
               &_GetServiceLocationOnRegionNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetServiceLocationOnRegionNameResponse& a, GetServiceLocationOnRegionNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceLocationOnRegionNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceLocationOnRegionNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceLocationOnRegionNameResponse* New() const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameResponse>(nullptr);
  }

  GetServiceLocationOnRegionNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceLocationOnRegionNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceLocationOnRegionNameResponse& from);
  void MergeFrom(const GetServiceLocationOnRegionNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceLocationOnRegionNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse";
  }
  protected:
  explicit GetServiceLocationOnRegionNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kGeographyDetailFieldNumber = 5,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  int geographydetail_size() const;
  private:
  int _internal_geographydetail_size() const;
  public:
  void clear_geographydetail();
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* mutable_geographydetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >*
      mutable_geographydetail();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& _internal_geographydetail(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* _internal_add_geographydetail();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& geographydetail(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* add_geographydetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >&
      geographydetail() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail > geographydetail_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GeographyDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GeographyDetail) */ {
 public:
  inline GeographyDetail() : GeographyDetail(nullptr) {}
  virtual ~GeographyDetail();

  GeographyDetail(const GeographyDetail& from);
  GeographyDetail(GeographyDetail&& from) noexcept
    : GeographyDetail() {
    *this = ::std::move(from);
  }

  inline GeographyDetail& operator=(const GeographyDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographyDetail& operator=(GeographyDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeographyDetail& default_instance();

  static inline const GeographyDetail* internal_default_instance() {
    return reinterpret_cast<const GeographyDetail*>(
               &_GeographyDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GeographyDetail& a, GeographyDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographyDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographyDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeographyDetail* New() const final {
    return CreateMaybeMessage<GeographyDetail>(nullptr);
  }

  GeographyDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeographyDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeographyDetail& from);
  void MergeFrom(const GeographyDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GeographyDetail";
  }
  protected:
  explicit GeographyDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeographyDetailFieldNumber = 5,
    kGeographyNameFieldNumber = 1,
    kGeographyUidFieldNumber = 2,
    kGeographyLongitudeFieldNumber = 3,
    kGeographyLatitudeFieldNumber = 4,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
  int geographydetail_size() const;
  private:
  int _internal_geographydetail_size() const;
  public:
  void clear_geographydetail();
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* mutable_geographydetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >*
      mutable_geographydetail();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& _internal_geographydetail(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* _internal_add_geographydetail();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& geographydetail(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GeographyDetail* add_geographydetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >&
      geographydetail() const;

  // string geographyName = 1;
  void clear_geographyname();
  const std::string& geographyname() const;
  void set_geographyname(const std::string& value);
  void set_geographyname(std::string&& value);
  void set_geographyname(const char* value);
  void set_geographyname(const char* value, size_t size);
  std::string* mutable_geographyname();
  std::string* release_geographyname();
  void set_allocated_geographyname(std::string* geographyname);
  private:
  const std::string& _internal_geographyname() const;
  void _internal_set_geographyname(const std::string& value);
  std::string* _internal_mutable_geographyname();
  public:

  // string geographyUid = 2;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string geographyLongitude = 3;
  void clear_geographylongitude();
  const std::string& geographylongitude() const;
  void set_geographylongitude(const std::string& value);
  void set_geographylongitude(std::string&& value);
  void set_geographylongitude(const char* value);
  void set_geographylongitude(const char* value, size_t size);
  std::string* mutable_geographylongitude();
  std::string* release_geographylongitude();
  void set_allocated_geographylongitude(std::string* geographylongitude);
  private:
  const std::string& _internal_geographylongitude() const;
  void _internal_set_geographylongitude(const std::string& value);
  std::string* _internal_mutable_geographylongitude();
  public:

  // string geographyLatitude = 4;
  void clear_geographylatitude();
  const std::string& geographylatitude() const;
  void set_geographylatitude(const std::string& value);
  void set_geographylatitude(std::string&& value);
  void set_geographylatitude(const char* value);
  void set_geographylatitude(const char* value, size_t size);
  std::string* mutable_geographylatitude();
  std::string* release_geographylatitude();
  void set_allocated_geographylatitude(std::string* geographylatitude);
  private:
  const std::string& _internal_geographylatitude() const;
  void _internal_set_geographylatitude(const std::string& value);
  std::string* _internal_mutable_geographylatitude();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GeographyDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail > geographydetail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographylongitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographylatitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnConditionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest) */ {
 public:
  inline GetServiceConfigOnConditionRequest() : GetServiceConfigOnConditionRequest(nullptr) {}
  virtual ~GetServiceConfigOnConditionRequest();

  GetServiceConfigOnConditionRequest(const GetServiceConfigOnConditionRequest& from);
  GetServiceConfigOnConditionRequest(GetServiceConfigOnConditionRequest&& from) noexcept
    : GetServiceConfigOnConditionRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnConditionRequest& operator=(const GetServiceConfigOnConditionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnConditionRequest& operator=(GetServiceConfigOnConditionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnConditionRequest& default_instance();

  static inline const GetServiceConfigOnConditionRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnConditionRequest*>(
               &_GetServiceConfigOnConditionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetServiceConfigOnConditionRequest& a, GetServiceConfigOnConditionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnConditionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnConditionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnConditionRequest* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionRequest>(nullptr);
  }

  GetServiceConfigOnConditionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnConditionRequest& from);
  void MergeFrom(const GetServiceConfigOnConditionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnConditionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest";
  }
  protected:
  explicit GetServiceConfigOnConditionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionNameFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string regionName = 3;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnConditionResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord) */ {
 public:
  inline GetServiceConfigOnConditionResponseRecord() : GetServiceConfigOnConditionResponseRecord(nullptr) {}
  virtual ~GetServiceConfigOnConditionResponseRecord();

  GetServiceConfigOnConditionResponseRecord(const GetServiceConfigOnConditionResponseRecord& from);
  GetServiceConfigOnConditionResponseRecord(GetServiceConfigOnConditionResponseRecord&& from) noexcept
    : GetServiceConfigOnConditionResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnConditionResponseRecord& operator=(const GetServiceConfigOnConditionResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnConditionResponseRecord& operator=(GetServiceConfigOnConditionResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnConditionResponseRecord& default_instance();

  static inline const GetServiceConfigOnConditionResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnConditionResponseRecord*>(
               &_GetServiceConfigOnConditionResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetServiceConfigOnConditionResponseRecord& a, GetServiceConfigOnConditionResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnConditionResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnConditionResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnConditionResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionResponseRecord>(nullptr);
  }

  GetServiceConfigOnConditionResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnConditionResponseRecord& from);
  void MergeFrom(const GetServiceConfigOnConditionResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnConditionResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord";
  }
  protected:
  explicit GetServiceConfigOnConditionResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTypeFieldNumber = 1,
    kRegionNameFieldNumber = 3,
    kCropIdFieldNumber = 2,
    kSectionFieldNumber = 4,
    kServiceRankFieldNumber = 5,
  };
  // string serviceType = 1;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string regionName = 3;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // int64 cropId = 2;
  void clear_cropid();
  ::PROTOBUF_NAMESPACE_ID::int64 cropid() const;
  void set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cropid() const;
  void _internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 section = 4;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int64 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serviceRank = 5;
  void clear_servicerank();
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank() const;
  void set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servicerank() const;
  void _internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::PROTOBUF_NAMESPACE_ID::int64 cropid_;
  ::PROTOBUF_NAMESPACE_ID::int64 section_;
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnConditionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse) */ {
 public:
  inline GetServiceConfigOnConditionResponse() : GetServiceConfigOnConditionResponse(nullptr) {}
  virtual ~GetServiceConfigOnConditionResponse();

  GetServiceConfigOnConditionResponse(const GetServiceConfigOnConditionResponse& from);
  GetServiceConfigOnConditionResponse(GetServiceConfigOnConditionResponse&& from) noexcept
    : GetServiceConfigOnConditionResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnConditionResponse& operator=(const GetServiceConfigOnConditionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnConditionResponse& operator=(GetServiceConfigOnConditionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnConditionResponse& default_instance();

  static inline const GetServiceConfigOnConditionResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnConditionResponse*>(
               &_GetServiceConfigOnConditionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetServiceConfigOnConditionResponse& a, GetServiceConfigOnConditionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnConditionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnConditionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnConditionResponse* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionResponse>(nullptr);
  }

  GetServiceConfigOnConditionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnConditionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnConditionResponse& from);
  void MergeFrom(const GetServiceConfigOnConditionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnConditionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse";
  }
  protected:
  explicit GetServiceConfigOnConditionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnServiceTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest) */ {
 public:
  inline GetServiceProviderOnServiceTypeRequest() : GetServiceProviderOnServiceTypeRequest(nullptr) {}
  virtual ~GetServiceProviderOnServiceTypeRequest();

  GetServiceProviderOnServiceTypeRequest(const GetServiceProviderOnServiceTypeRequest& from);
  GetServiceProviderOnServiceTypeRequest(GetServiceProviderOnServiceTypeRequest&& from) noexcept
    : GetServiceProviderOnServiceTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnServiceTypeRequest& operator=(const GetServiceProviderOnServiceTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnServiceTypeRequest& operator=(GetServiceProviderOnServiceTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnServiceTypeRequest& default_instance();

  static inline const GetServiceProviderOnServiceTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnServiceTypeRequest*>(
               &_GetServiceProviderOnServiceTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetServiceProviderOnServiceTypeRequest& a, GetServiceProviderOnServiceTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnServiceTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnServiceTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnServiceTypeRequest* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeRequest>(nullptr);
  }

  GetServiceProviderOnServiceTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnServiceTypeRequest& from);
  void MergeFrom(const GetServiceProviderOnServiceTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnServiceTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest";
  }
  protected:
  explicit GetServiceProviderOnServiceTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTypeFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string serviceType = 3;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnServiceTypeResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord) */ {
 public:
  inline GetServiceProviderOnServiceTypeResponseRecord() : GetServiceProviderOnServiceTypeResponseRecord(nullptr) {}
  virtual ~GetServiceProviderOnServiceTypeResponseRecord();

  GetServiceProviderOnServiceTypeResponseRecord(const GetServiceProviderOnServiceTypeResponseRecord& from);
  GetServiceProviderOnServiceTypeResponseRecord(GetServiceProviderOnServiceTypeResponseRecord&& from) noexcept
    : GetServiceProviderOnServiceTypeResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnServiceTypeResponseRecord& operator=(const GetServiceProviderOnServiceTypeResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnServiceTypeResponseRecord& operator=(GetServiceProviderOnServiceTypeResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnServiceTypeResponseRecord& default_instance();

  static inline const GetServiceProviderOnServiceTypeResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnServiceTypeResponseRecord*>(
               &_GetServiceProviderOnServiceTypeResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetServiceProviderOnServiceTypeResponseRecord& a, GetServiceProviderOnServiceTypeResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnServiceTypeResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnServiceTypeResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnServiceTypeResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeResponseRecord>(nullptr);
  }

  GetServiceProviderOnServiceTypeResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnServiceTypeResponseRecord& from);
  void MergeFrom(const GetServiceProviderOnServiceTypeResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnServiceTypeResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord";
  }
  protected:
  explicit GetServiceProviderOnServiceTypeResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMobileNumberFieldNumber = 3,
    kWhatsappNumberFieldNumber = 4,
    kPincodeFieldNumber = 5,
    kCostPerAcreFieldNumber = 7,
    kIdFieldNumber = 1,
    kMachineCountFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mobileNumber = 3;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // string whatsappNumber = 4;
  void clear_whatsappnumber();
  const std::string& whatsappnumber() const;
  void set_whatsappnumber(const std::string& value);
  void set_whatsappnumber(std::string&& value);
  void set_whatsappnumber(const char* value);
  void set_whatsappnumber(const char* value, size_t size);
  std::string* mutable_whatsappnumber();
  std::string* release_whatsappnumber();
  void set_allocated_whatsappnumber(std::string* whatsappnumber);
  private:
  const std::string& _internal_whatsappnumber() const;
  void _internal_set_whatsappnumber(const std::string& value);
  std::string* _internal_mutable_whatsappnumber();
  public:

  // string pincode = 5;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string costPerAcre = 7;
  void clear_costperacre();
  const std::string& costperacre() const;
  void set_costperacre(const std::string& value);
  void set_costperacre(std::string&& value);
  void set_costperacre(const char* value);
  void set_costperacre(const char* value, size_t size);
  std::string* mutable_costperacre();
  std::string* release_costperacre();
  void set_allocated_costperacre(std::string* costperacre);
  private:
  const std::string& _internal_costperacre() const;
  void _internal_set_costperacre(const std::string& value);
  std::string* _internal_mutable_costperacre();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 machineCount = 6;
  void clear_machinecount();
  ::PROTOBUF_NAMESPACE_ID::int64 machinecount() const;
  void set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machinecount() const;
  void _internal_set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whatsappnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr costperacre_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 machinecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceProviderOnServiceTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse) */ {
 public:
  inline GetServiceProviderOnServiceTypeResponse() : GetServiceProviderOnServiceTypeResponse(nullptr) {}
  virtual ~GetServiceProviderOnServiceTypeResponse();

  GetServiceProviderOnServiceTypeResponse(const GetServiceProviderOnServiceTypeResponse& from);
  GetServiceProviderOnServiceTypeResponse(GetServiceProviderOnServiceTypeResponse&& from) noexcept
    : GetServiceProviderOnServiceTypeResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceProviderOnServiceTypeResponse& operator=(const GetServiceProviderOnServiceTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceProviderOnServiceTypeResponse& operator=(GetServiceProviderOnServiceTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceProviderOnServiceTypeResponse& default_instance();

  static inline const GetServiceProviderOnServiceTypeResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceProviderOnServiceTypeResponse*>(
               &_GetServiceProviderOnServiceTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetServiceProviderOnServiceTypeResponse& a, GetServiceProviderOnServiceTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceProviderOnServiceTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceProviderOnServiceTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceProviderOnServiceTypeResponse* New() const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeResponse>(nullptr);
  }

  GetServiceProviderOnServiceTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceProviderOnServiceTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceProviderOnServiceTypeResponse& from);
  void MergeFrom(const GetServiceProviderOnServiceTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceProviderOnServiceTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse";
  }
  protected:
  explicit GetServiceProviderOnServiceTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationOnServiceProviderIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest) */ {
 public:
  inline GetLocationOnServiceProviderIdRequest() : GetLocationOnServiceProviderIdRequest(nullptr) {}
  virtual ~GetLocationOnServiceProviderIdRequest();

  GetLocationOnServiceProviderIdRequest(const GetLocationOnServiceProviderIdRequest& from);
  GetLocationOnServiceProviderIdRequest(GetLocationOnServiceProviderIdRequest&& from) noexcept
    : GetLocationOnServiceProviderIdRequest() {
    *this = ::std::move(from);
  }

  inline GetLocationOnServiceProviderIdRequest& operator=(const GetLocationOnServiceProviderIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationOnServiceProviderIdRequest& operator=(GetLocationOnServiceProviderIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationOnServiceProviderIdRequest& default_instance();

  static inline const GetLocationOnServiceProviderIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationOnServiceProviderIdRequest*>(
               &_GetLocationOnServiceProviderIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetLocationOnServiceProviderIdRequest& a, GetLocationOnServiceProviderIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationOnServiceProviderIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationOnServiceProviderIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationOnServiceProviderIdRequest* New() const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdRequest>(nullptr);
  }

  GetLocationOnServiceProviderIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationOnServiceProviderIdRequest& from);
  void MergeFrom(const GetLocationOnServiceProviderIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationOnServiceProviderIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest";
  }
  protected:
  explicit GetLocationOnServiceProviderIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceProviderIdFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string serviceProviderId = 3;
  void clear_serviceproviderid();
  const std::string& serviceproviderid() const;
  void set_serviceproviderid(const std::string& value);
  void set_serviceproviderid(std::string&& value);
  void set_serviceproviderid(const char* value);
  void set_serviceproviderid(const char* value, size_t size);
  std::string* mutable_serviceproviderid();
  std::string* release_serviceproviderid();
  void set_allocated_serviceproviderid(std::string* serviceproviderid);
  private:
  const std::string& _internal_serviceproviderid() const;
  void _internal_set_serviceproviderid(const std::string& value);
  std::string* _internal_mutable_serviceproviderid();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceproviderid_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationOnServiceProviderIdResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord) */ {
 public:
  inline GetLocationOnServiceProviderIdResponseRecord() : GetLocationOnServiceProviderIdResponseRecord(nullptr) {}
  virtual ~GetLocationOnServiceProviderIdResponseRecord();

  GetLocationOnServiceProviderIdResponseRecord(const GetLocationOnServiceProviderIdResponseRecord& from);
  GetLocationOnServiceProviderIdResponseRecord(GetLocationOnServiceProviderIdResponseRecord&& from) noexcept
    : GetLocationOnServiceProviderIdResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetLocationOnServiceProviderIdResponseRecord& operator=(const GetLocationOnServiceProviderIdResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationOnServiceProviderIdResponseRecord& operator=(GetLocationOnServiceProviderIdResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationOnServiceProviderIdResponseRecord& default_instance();

  static inline const GetLocationOnServiceProviderIdResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetLocationOnServiceProviderIdResponseRecord*>(
               &_GetLocationOnServiceProviderIdResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetLocationOnServiceProviderIdResponseRecord& a, GetLocationOnServiceProviderIdResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationOnServiceProviderIdResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationOnServiceProviderIdResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationOnServiceProviderIdResponseRecord* New() const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdResponseRecord>(nullptr);
  }

  GetLocationOnServiceProviderIdResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationOnServiceProviderIdResponseRecord& from);
  void MergeFrom(const GetLocationOnServiceProviderIdResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationOnServiceProviderIdResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord";
  }
  protected:
  explicit GetLocationOnServiceProviderIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistrictFieldNumber = 2,
    kStateFieldNumber = 3,
    kServiceProviderIdFieldNumber = 1,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
  };
  // string district = 2;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // int64 serviceProviderId = 1;
  void clear_serviceproviderid();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid() const;
  void set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceproviderid() const;
  void _internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceproviderid_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationOnServiceProviderIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse) */ {
 public:
  inline GetLocationOnServiceProviderIdResponse() : GetLocationOnServiceProviderIdResponse(nullptr) {}
  virtual ~GetLocationOnServiceProviderIdResponse();

  GetLocationOnServiceProviderIdResponse(const GetLocationOnServiceProviderIdResponse& from);
  GetLocationOnServiceProviderIdResponse(GetLocationOnServiceProviderIdResponse&& from) noexcept
    : GetLocationOnServiceProviderIdResponse() {
    *this = ::std::move(from);
  }

  inline GetLocationOnServiceProviderIdResponse& operator=(const GetLocationOnServiceProviderIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationOnServiceProviderIdResponse& operator=(GetLocationOnServiceProviderIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationOnServiceProviderIdResponse& default_instance();

  static inline const GetLocationOnServiceProviderIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocationOnServiceProviderIdResponse*>(
               &_GetLocationOnServiceProviderIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetLocationOnServiceProviderIdResponse& a, GetLocationOnServiceProviderIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationOnServiceProviderIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationOnServiceProviderIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationOnServiceProviderIdResponse* New() const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdResponse>(nullptr);
  }

  GetLocationOnServiceProviderIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationOnServiceProviderIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationOnServiceProviderIdResponse& from);
  void MergeFrom(const GetLocationOnServiceProviderIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationOnServiceProviderIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse";
  }
  protected:
  explicit GetLocationOnServiceProviderIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest) */ {
 public:
  inline GetServiceConfigRequest() : GetServiceConfigRequest(nullptr) {}
  virtual ~GetServiceConfigRequest();

  GetServiceConfigRequest(const GetServiceConfigRequest& from);
  GetServiceConfigRequest(GetServiceConfigRequest&& from) noexcept
    : GetServiceConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigRequest& operator=(const GetServiceConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigRequest& operator=(GetServiceConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigRequest& default_instance();

  static inline const GetServiceConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigRequest*>(
               &_GetServiceConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetServiceConfigRequest& a, GetServiceConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigRequest* New() const final {
    return CreateMaybeMessage<GetServiceConfigRequest>(nullptr);
  }

  GetServiceConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigRequest& from);
  void MergeFrom(const GetServiceConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest";
  }
  protected:
  explicit GetServiceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // repeated string state = 6;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  const std::string& state(int index) const;
  std::string* mutable_state(int index);
  void set_state(int index, const std::string& value);
  void set_state(int index, std::string&& value);
  void set_state(int index, const char* value);
  void set_state(int index, const char* value, size_t size);
  std::string* add_state();
  void add_state(const std::string& value);
  void add_state(std::string&& value);
  void add_state(const char* value);
  void add_state(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_state();
  private:
  const std::string& _internal_state(int index) const;
  std::string* _internal_add_state();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> state_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord) */ {
 public:
  inline GetServiceConfigResponseRecord() : GetServiceConfigResponseRecord(nullptr) {}
  virtual ~GetServiceConfigResponseRecord();

  GetServiceConfigResponseRecord(const GetServiceConfigResponseRecord& from);
  GetServiceConfigResponseRecord(GetServiceConfigResponseRecord&& from) noexcept
    : GetServiceConfigResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigResponseRecord& operator=(const GetServiceConfigResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigResponseRecord& operator=(GetServiceConfigResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigResponseRecord& default_instance();

  static inline const GetServiceConfigResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigResponseRecord*>(
               &_GetServiceConfigResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetServiceConfigResponseRecord& a, GetServiceConfigResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceConfigResponseRecord>(nullptr);
  }

  GetServiceConfigResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigResponseRecord& from);
  void MergeFrom(const GetServiceConfigResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord";
  }
  protected:
  explicit GetServiceConfigResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse) */ {
 public:
  inline GetServiceConfigResponse() : GetServiceConfigResponse(nullptr) {}
  virtual ~GetServiceConfigResponse();

  GetServiceConfigResponse(const GetServiceConfigResponse& from);
  GetServiceConfigResponse(GetServiceConfigResponse&& from) noexcept
    : GetServiceConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigResponse& operator=(const GetServiceConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigResponse& operator=(GetServiceConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigResponse& default_instance();

  static inline const GetServiceConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigResponse*>(
               &_GetServiceConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetServiceConfigResponse& a, GetServiceConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigResponse* New() const final {
    return CreateMaybeMessage<GetServiceConfigResponse>(nullptr);
  }

  GetServiceConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigResponse& from);
  void MergeFrom(const GetServiceConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse";
  }
  protected:
  explicit GetServiceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kServiceDetailsResponseFieldNumber = 5,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
  int servicedetailsresponse_size() const;
  private:
  int _internal_servicedetailsresponse_size() const;
  public:
  void clear_servicedetailsresponse();
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* mutable_servicedetailsresponse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >*
      mutable_servicedetailsresponse();
  private:
  const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& _internal_servicedetailsresponse(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* _internal_add_servicedetailsresponse();
  public:
  const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& servicedetailsresponse(int index) const;
  ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* add_servicedetailsresponse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >&
      servicedetailsresponse() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse > servicedetailsresponse_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnRegionNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest) */ {
 public:
  inline GetServiceConfigOnRegionNameRequest() : GetServiceConfigOnRegionNameRequest(nullptr) {}
  virtual ~GetServiceConfigOnRegionNameRequest();

  GetServiceConfigOnRegionNameRequest(const GetServiceConfigOnRegionNameRequest& from);
  GetServiceConfigOnRegionNameRequest(GetServiceConfigOnRegionNameRequest&& from) noexcept
    : GetServiceConfigOnRegionNameRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnRegionNameRequest& operator=(const GetServiceConfigOnRegionNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnRegionNameRequest& operator=(GetServiceConfigOnRegionNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnRegionNameRequest& default_instance();

  static inline const GetServiceConfigOnRegionNameRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnRegionNameRequest*>(
               &_GetServiceConfigOnRegionNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetServiceConfigOnRegionNameRequest& a, GetServiceConfigOnRegionNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnRegionNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnRegionNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnRegionNameRequest* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameRequest>(nullptr);
  }

  GetServiceConfigOnRegionNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnRegionNameRequest& from);
  void MergeFrom(const GetServiceConfigOnRegionNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnRegionNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest";
  }
  protected:
  explicit GetServiceConfigOnRegionNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionNameFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string regionName = 3;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* release_requestheaders();
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders);
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnRegionNameResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord) */ {
 public:
  inline GetServiceConfigOnRegionNameResponseRecord() : GetServiceConfigOnRegionNameResponseRecord(nullptr) {}
  virtual ~GetServiceConfigOnRegionNameResponseRecord();

  GetServiceConfigOnRegionNameResponseRecord(const GetServiceConfigOnRegionNameResponseRecord& from);
  GetServiceConfigOnRegionNameResponseRecord(GetServiceConfigOnRegionNameResponseRecord&& from) noexcept
    : GetServiceConfigOnRegionNameResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnRegionNameResponseRecord& operator=(const GetServiceConfigOnRegionNameResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnRegionNameResponseRecord& operator=(GetServiceConfigOnRegionNameResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnRegionNameResponseRecord& default_instance();

  static inline const GetServiceConfigOnRegionNameResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnRegionNameResponseRecord*>(
               &_GetServiceConfigOnRegionNameResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetServiceConfigOnRegionNameResponseRecord& a, GetServiceConfigOnRegionNameResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnRegionNameResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnRegionNameResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnRegionNameResponseRecord* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameResponseRecord>(nullptr);
  }

  GetServiceConfigOnRegionNameResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnRegionNameResponseRecord& from);
  void MergeFrom(const GetServiceConfigOnRegionNameResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnRegionNameResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord";
  }
  protected:
  explicit GetServiceConfigOnRegionNameResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTypeFieldNumber = 1,
    kRegionNameFieldNumber = 3,
    kCropIdFieldNumber = 2,
    kSectionFieldNumber = 4,
    kServiceRankFieldNumber = 5,
  };
  // string serviceType = 1;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string regionName = 3;
  void clear_regionname();
  const std::string& regionname() const;
  void set_regionname(const std::string& value);
  void set_regionname(std::string&& value);
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  std::string* mutable_regionname();
  std::string* release_regionname();
  void set_allocated_regionname(std::string* regionname);
  private:
  const std::string& _internal_regionname() const;
  void _internal_set_regionname(const std::string& value);
  std::string* _internal_mutable_regionname();
  public:

  // int64 cropId = 2;
  void clear_cropid();
  ::PROTOBUF_NAMESPACE_ID::int64 cropid() const;
  void set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cropid() const;
  void _internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 section = 4;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int64 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serviceRank = 5;
  void clear_servicerank();
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank() const;
  void set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servicerank() const;
  void _internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionname_;
  ::PROTOBUF_NAMESPACE_ID::int64 cropid_;
  ::PROTOBUF_NAMESPACE_ID::int64 section_;
  ::PROTOBUF_NAMESPACE_ID::int64 servicerank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigOnRegionNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse) */ {
 public:
  inline GetServiceConfigOnRegionNameResponse() : GetServiceConfigOnRegionNameResponse(nullptr) {}
  virtual ~GetServiceConfigOnRegionNameResponse();

  GetServiceConfigOnRegionNameResponse(const GetServiceConfigOnRegionNameResponse& from);
  GetServiceConfigOnRegionNameResponse(GetServiceConfigOnRegionNameResponse&& from) noexcept
    : GetServiceConfigOnRegionNameResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigOnRegionNameResponse& operator=(const GetServiceConfigOnRegionNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigOnRegionNameResponse& operator=(GetServiceConfigOnRegionNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceConfigOnRegionNameResponse& default_instance();

  static inline const GetServiceConfigOnRegionNameResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigOnRegionNameResponse*>(
               &_GetServiceConfigOnRegionNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetServiceConfigOnRegionNameResponse& a, GetServiceConfigOnRegionNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigOnRegionNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigOnRegionNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigOnRegionNameResponse* New() const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameResponse>(nullptr);
  }

  GetServiceConfigOnRegionNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigOnRegionNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigOnRegionNameResponse& from);
  void MergeFrom(const GetServiceConfigOnRegionNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigOnRegionNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse";
  }
  protected:
  explicit GetServiceConfigOnRegionNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::serviceProvider::service::proto::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Attribs& attribs(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
      attribs() const;

  // repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord& _internal_records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord& records(int index) const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >&
      records() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord > records_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiRequests PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.MultiRequests) */ {
 public:
  inline MultiRequests() : MultiRequests(nullptr) {}
  virtual ~MultiRequests();

  MultiRequests(const MultiRequests& from);
  MultiRequests(MultiRequests&& from) noexcept
    : MultiRequests() {
    *this = ::std::move(from);
  }

  inline MultiRequests& operator=(const MultiRequests& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRequests& operator=(MultiRequests&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRequests& default_instance();

  static inline const MultiRequests* internal_default_instance() {
    return reinterpret_cast<const MultiRequests*>(
               &_MultiRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(MultiRequests& a, MultiRequests& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRequests* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRequests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRequests* New() const final {
    return CreateMaybeMessage<MultiRequests>(nullptr);
  }

  MultiRequests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRequests>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRequests& from);
  void MergeFrom(const MultiRequests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRequests* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.MultiRequests";
  }
  protected:
  explicit MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kOnTxnFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Request request = 2;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::farm::nurture::serviceProvider::service::proto::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Request >*
      mutable_request();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Request& _internal_request(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Request* _internal_add_request();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Request& request(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Request >&
      request() const;

  // bool onTxn = 1;
  void clear_ontxn();
  bool ontxn() const;
  void set_ontxn(bool value);
  private:
  bool _internal_ontxn() const;
  void _internal_set_ontxn(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.MultiRequests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Request > request_;
  bool ontxn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum ARequestCase {
    kReqAddServiceProvider = 2,
    kReqAddServiceProviderBulk = 3,
    kReqAddServiceLocation = 4,
    kReqAddServiceLocationBulk = 5,
    kReqAddServices = 6,
    kReqAddServicesBulk = 7,
    kReqAddServiceProviderMapping = 8,
    kReqAddServiceProviderMappingBulk = 9,
    kReqAddServiceConfig = 10,
    kReqAddServiceConfigBulk = 11,
    kReqGetServiceProvider = 12,
    kReqAddServiceProviderFromExcel = 13,
    kReqGetSDTVOnLatLong = 14,
    kReqGetServiceDetailsOnLatLong = 15,
    kReqGetServicesOnServiceNameAndServiceType = 16,
    kReqGetServiceProviderOnMobileNumber = 17,
    kReqGetServiceLocationOnRegionName = 18,
    kReqGetServiceConfigOnCondition = 19,
    kReqGetServiceProviderOnServiceType = 20,
    kReqGetLocationOnServiceProviderId = 21,
    kReqGetServiceConfig = 22,
    kReqGetServiceConfigOnRegionName = 23,
    AREQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kReqAddServiceProviderFieldNumber = 2,
    kReqAddServiceProviderBulkFieldNumber = 3,
    kReqAddServiceLocationFieldNumber = 4,
    kReqAddServiceLocationBulkFieldNumber = 5,
    kReqAddServicesFieldNumber = 6,
    kReqAddServicesBulkFieldNumber = 7,
    kReqAddServiceProviderMappingFieldNumber = 8,
    kReqAddServiceProviderMappingBulkFieldNumber = 9,
    kReqAddServiceConfigFieldNumber = 10,
    kReqAddServiceConfigBulkFieldNumber = 11,
    kReqGetServiceProviderFieldNumber = 12,
    kReqAddServiceProviderFromExcelFieldNumber = 13,
    kReqGetSDTVOnLatLongFieldNumber = 14,
    kReqGetServiceDetailsOnLatLongFieldNumber = 15,
    kReqGetServicesOnServiceNameAndServiceTypeFieldNumber = 16,
    kReqGetServiceProviderOnMobileNumberFieldNumber = 17,
    kReqGetServiceLocationOnRegionNameFieldNumber = 18,
    kReqGetServiceConfigOnConditionFieldNumber = 19,
    kReqGetServiceProviderOnServiceTypeFieldNumber = 20,
    kReqGetLocationOnServiceProviderIdFieldNumber = 21,
    kReqGetServiceConfigFieldNumber = 22,
    kReqGetServiceConfigOnRegionNameFieldNumber = 23,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest reqAddServiceProvider = 2;
  bool has_reqaddserviceprovider() const;
  private:
  bool _internal_has_reqaddserviceprovider() const;
  public:
  void clear_reqaddserviceprovider();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& reqaddserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* release_reqaddserviceprovider();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* mutable_reqaddserviceprovider();
  void set_allocated_reqaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* reqaddserviceprovider);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& _internal_reqaddserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* _internal_mutable_reqaddserviceprovider();
  public:
  void unsafe_arena_set_allocated_reqaddserviceprovider(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* reqaddserviceprovider);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* unsafe_arena_release_reqaddserviceprovider();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest reqAddServiceProviderBulk = 3;
  bool has_reqaddserviceproviderbulk() const;
  private:
  bool _internal_has_reqaddserviceproviderbulk() const;
  public:
  void clear_reqaddserviceproviderbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest& reqaddserviceproviderbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* release_reqaddserviceproviderbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* mutable_reqaddserviceproviderbulk();
  void set_allocated_reqaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* reqaddserviceproviderbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest& _internal_reqaddserviceproviderbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* _internal_mutable_reqaddserviceproviderbulk();
  public:
  void unsafe_arena_set_allocated_reqaddserviceproviderbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* reqaddserviceproviderbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* unsafe_arena_release_reqaddserviceproviderbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest reqAddServiceLocation = 4;
  bool has_reqaddservicelocation() const;
  private:
  bool _internal_has_reqaddservicelocation() const;
  public:
  void clear_reqaddservicelocation();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& reqaddservicelocation() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* release_reqaddservicelocation();
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* mutable_reqaddservicelocation();
  void set_allocated_reqaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* reqaddservicelocation);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& _internal_reqaddservicelocation() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* _internal_mutable_reqaddservicelocation();
  public:
  void unsafe_arena_set_allocated_reqaddservicelocation(
      ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* reqaddservicelocation);
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* unsafe_arena_release_reqaddservicelocation();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest reqAddServiceLocationBulk = 5;
  bool has_reqaddservicelocationbulk() const;
  private:
  bool _internal_has_reqaddservicelocationbulk() const;
  public:
  void clear_reqaddservicelocationbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest& reqaddservicelocationbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* release_reqaddservicelocationbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* mutable_reqaddservicelocationbulk();
  void set_allocated_reqaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* reqaddservicelocationbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest& _internal_reqaddservicelocationbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* _internal_mutable_reqaddservicelocationbulk();
  public:
  void unsafe_arena_set_allocated_reqaddservicelocationbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* reqaddservicelocationbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* unsafe_arena_release_reqaddservicelocationbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServicesRequest reqAddServices = 6;
  bool has_reqaddservices() const;
  private:
  bool _internal_has_reqaddservices() const;
  public:
  void clear_reqaddservices();
  const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& reqaddservices() const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* release_reqaddservices();
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* mutable_reqaddservices();
  void set_allocated_reqaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesRequest* reqaddservices);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& _internal_reqaddservices() const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* _internal_mutable_reqaddservices();
  public:
  void unsafe_arena_set_allocated_reqaddservices(
      ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* reqaddservices);
  ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* unsafe_arena_release_reqaddservices();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest reqAddServicesBulk = 7;
  bool has_reqaddservicesbulk() const;
  private:
  bool _internal_has_reqaddservicesbulk() const;
  public:
  void clear_reqaddservicesbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest& reqaddservicesbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* release_reqaddservicesbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* mutable_reqaddservicesbulk();
  void set_allocated_reqaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* reqaddservicesbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest& _internal_reqaddservicesbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* _internal_mutable_reqaddservicesbulk();
  public:
  void unsafe_arena_set_allocated_reqaddservicesbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* reqaddservicesbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* unsafe_arena_release_reqaddservicesbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest reqAddServiceProviderMapping = 8;
  bool has_reqaddserviceprovidermapping() const;
  private:
  bool _internal_has_reqaddserviceprovidermapping() const;
  public:
  void clear_reqaddserviceprovidermapping();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& reqaddserviceprovidermapping() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* release_reqaddserviceprovidermapping();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* mutable_reqaddserviceprovidermapping();
  void set_allocated_reqaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* reqaddserviceprovidermapping);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& _internal_reqaddserviceprovidermapping() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* _internal_mutable_reqaddserviceprovidermapping();
  public:
  void unsafe_arena_set_allocated_reqaddserviceprovidermapping(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* reqaddserviceprovidermapping);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* unsafe_arena_release_reqaddserviceprovidermapping();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest reqAddServiceProviderMappingBulk = 9;
  bool has_reqaddserviceprovidermappingbulk() const;
  private:
  bool _internal_has_reqaddserviceprovidermappingbulk() const;
  public:
  void clear_reqaddserviceprovidermappingbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest& reqaddserviceprovidermappingbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* release_reqaddserviceprovidermappingbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* mutable_reqaddserviceprovidermappingbulk();
  void set_allocated_reqaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* reqaddserviceprovidermappingbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest& _internal_reqaddserviceprovidermappingbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* _internal_mutable_reqaddserviceprovidermappingbulk();
  public:
  void unsafe_arena_set_allocated_reqaddserviceprovidermappingbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* reqaddserviceprovidermappingbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* unsafe_arena_release_reqaddserviceprovidermappingbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest reqAddServiceConfig = 10;
  bool has_reqaddserviceconfig() const;
  private:
  bool _internal_has_reqaddserviceconfig() const;
  public:
  void clear_reqaddserviceconfig();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& reqaddserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* release_reqaddserviceconfig();
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* mutable_reqaddserviceconfig();
  void set_allocated_reqaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* reqaddserviceconfig);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& _internal_reqaddserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* _internal_mutable_reqaddserviceconfig();
  public:
  void unsafe_arena_set_allocated_reqaddserviceconfig(
      ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* reqaddserviceconfig);
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* unsafe_arena_release_reqaddserviceconfig();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest reqAddServiceConfigBulk = 11;
  bool has_reqaddserviceconfigbulk() const;
  private:
  bool _internal_has_reqaddserviceconfigbulk() const;
  public:
  void clear_reqaddserviceconfigbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest& reqaddserviceconfigbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* release_reqaddserviceconfigbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* mutable_reqaddserviceconfigbulk();
  void set_allocated_reqaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* reqaddserviceconfigbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest& _internal_reqaddserviceconfigbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* _internal_mutable_reqaddserviceconfigbulk();
  public:
  void unsafe_arena_set_allocated_reqaddserviceconfigbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* reqaddserviceconfigbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* unsafe_arena_release_reqaddserviceconfigbulk();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest reqGetServiceProvider = 12;
  bool has_reqgetserviceprovider() const;
  private:
  bool _internal_has_reqgetserviceprovider() const;
  public:
  void clear_reqgetserviceprovider();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest& reqgetserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* release_reqgetserviceprovider();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* mutable_reqgetserviceprovider();
  void set_allocated_reqgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* reqgetserviceprovider);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest& _internal_reqgetserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* _internal_mutable_reqgetserviceprovider();
  public:
  void unsafe_arena_set_allocated_reqgetserviceprovider(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* reqgetserviceprovider);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* unsafe_arena_release_reqgetserviceprovider();

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest reqAddServiceProviderFromExcel = 13;
  bool has_reqaddserviceproviderfromexcel() const;
  private:
  bool _internal_has_reqaddserviceproviderfromexcel() const;
  public:
  void clear_reqaddserviceproviderfromexcel();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest& reqaddserviceproviderfromexcel() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* release_reqaddserviceproviderfromexcel();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* mutable_reqaddserviceproviderfromexcel();
  void set_allocated_reqaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* reqaddserviceproviderfromexcel);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest& _internal_reqaddserviceproviderfromexcel() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* _internal_mutable_reqaddserviceproviderfromexcel();
  public:
  void unsafe_arena_set_allocated_reqaddserviceproviderfromexcel(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* reqaddserviceproviderfromexcel);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* unsafe_arena_release_reqaddserviceproviderfromexcel();

  // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest reqGetSDTVOnLatLong = 14;
  bool has_reqgetsdtvonlatlong() const;
  private:
  bool _internal_has_reqgetsdtvonlatlong() const;
  public:
  void clear_reqgetsdtvonlatlong();
  const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest& reqgetsdtvonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* release_reqgetsdtvonlatlong();
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* mutable_reqgetsdtvonlatlong();
  void set_allocated_reqgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* reqgetsdtvonlatlong);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest& _internal_reqgetsdtvonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* _internal_mutable_reqgetsdtvonlatlong();
  public:
  void unsafe_arena_set_allocated_reqgetsdtvonlatlong(
      ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* reqgetsdtvonlatlong);
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* unsafe_arena_release_reqgetsdtvonlatlong();

  // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest reqGetServiceDetailsOnLatLong = 15;
  bool has_reqgetservicedetailsonlatlong() const;
  private:
  bool _internal_has_reqgetservicedetailsonlatlong() const;
  public:
  void clear_reqgetservicedetailsonlatlong();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest& reqgetservicedetailsonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* release_reqgetservicedetailsonlatlong();
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* mutable_reqgetservicedetailsonlatlong();
  void set_allocated_reqgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* reqgetservicedetailsonlatlong);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest& _internal_reqgetservicedetailsonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* _internal_mutable_reqgetservicedetailsonlatlong();
  public:
  void unsafe_arena_set_allocated_reqgetservicedetailsonlatlong(
      ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* reqgetservicedetailsonlatlong);
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* unsafe_arena_release_reqgetservicedetailsonlatlong();

  // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest reqGetServicesOnServiceNameAndServiceType = 16;
  bool has_reqgetservicesonservicenameandservicetype() const;
  private:
  bool _internal_has_reqgetservicesonservicenameandservicetype() const;
  public:
  void clear_reqgetservicesonservicenameandservicetype();
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest& reqgetservicesonservicenameandservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* release_reqgetservicesonservicenameandservicetype();
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* mutable_reqgetservicesonservicenameandservicetype();
  void set_allocated_reqgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* reqgetservicesonservicenameandservicetype);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest& _internal_reqgetservicesonservicenameandservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* _internal_mutable_reqgetservicesonservicenameandservicetype();
  public:
  void unsafe_arena_set_allocated_reqgetservicesonservicenameandservicetype(
      ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* reqgetservicesonservicenameandservicetype);
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* unsafe_arena_release_reqgetservicesonservicenameandservicetype();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest reqGetServiceProviderOnMobileNumber = 17;
  bool has_reqgetserviceprovideronmobilenumber() const;
  private:
  bool _internal_has_reqgetserviceprovideronmobilenumber() const;
  public:
  void clear_reqgetserviceprovideronmobilenumber();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest& reqgetserviceprovideronmobilenumber() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* release_reqgetserviceprovideronmobilenumber();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* mutable_reqgetserviceprovideronmobilenumber();
  void set_allocated_reqgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* reqgetserviceprovideronmobilenumber);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest& _internal_reqgetserviceprovideronmobilenumber() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* _internal_mutable_reqgetserviceprovideronmobilenumber();
  public:
  void unsafe_arena_set_allocated_reqgetserviceprovideronmobilenumber(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* reqgetserviceprovideronmobilenumber);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* unsafe_arena_release_reqgetserviceprovideronmobilenumber();

  // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest reqGetServiceLocationOnRegionName = 18;
  bool has_reqgetservicelocationonregionname() const;
  private:
  bool _internal_has_reqgetservicelocationonregionname() const;
  public:
  void clear_reqgetservicelocationonregionname();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest& reqgetservicelocationonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* release_reqgetservicelocationonregionname();
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* mutable_reqgetservicelocationonregionname();
  void set_allocated_reqgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* reqgetservicelocationonregionname);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest& _internal_reqgetservicelocationonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* _internal_mutable_reqgetservicelocationonregionname();
  public:
  void unsafe_arena_set_allocated_reqgetservicelocationonregionname(
      ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* reqgetservicelocationonregionname);
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* unsafe_arena_release_reqgetservicelocationonregionname();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest reqGetServiceConfigOnCondition = 19;
  bool has_reqgetserviceconfigoncondition() const;
  private:
  bool _internal_has_reqgetserviceconfigoncondition() const;
  public:
  void clear_reqgetserviceconfigoncondition();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest& reqgetserviceconfigoncondition() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* release_reqgetserviceconfigoncondition();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* mutable_reqgetserviceconfigoncondition();
  void set_allocated_reqgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* reqgetserviceconfigoncondition);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest& _internal_reqgetserviceconfigoncondition() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* _internal_mutable_reqgetserviceconfigoncondition();
  public:
  void unsafe_arena_set_allocated_reqgetserviceconfigoncondition(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* reqgetserviceconfigoncondition);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* unsafe_arena_release_reqgetserviceconfigoncondition();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest reqGetServiceProviderOnServiceType = 20;
  bool has_reqgetserviceprovideronservicetype() const;
  private:
  bool _internal_has_reqgetserviceprovideronservicetype() const;
  public:
  void clear_reqgetserviceprovideronservicetype();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest& reqgetserviceprovideronservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* release_reqgetserviceprovideronservicetype();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* mutable_reqgetserviceprovideronservicetype();
  void set_allocated_reqgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* reqgetserviceprovideronservicetype);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest& _internal_reqgetserviceprovideronservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* _internal_mutable_reqgetserviceprovideronservicetype();
  public:
  void unsafe_arena_set_allocated_reqgetserviceprovideronservicetype(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* reqgetserviceprovideronservicetype);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* unsafe_arena_release_reqgetserviceprovideronservicetype();

  // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest reqGetLocationOnServiceProviderId = 21;
  bool has_reqgetlocationonserviceproviderid() const;
  private:
  bool _internal_has_reqgetlocationonserviceproviderid() const;
  public:
  void clear_reqgetlocationonserviceproviderid();
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest& reqgetlocationonserviceproviderid() const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* release_reqgetlocationonserviceproviderid();
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* mutable_reqgetlocationonserviceproviderid();
  void set_allocated_reqgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* reqgetlocationonserviceproviderid);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest& _internal_reqgetlocationonserviceproviderid() const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* _internal_mutable_reqgetlocationonserviceproviderid();
  public:
  void unsafe_arena_set_allocated_reqgetlocationonserviceproviderid(
      ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* reqgetlocationonserviceproviderid);
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* unsafe_arena_release_reqgetlocationonserviceproviderid();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest reqGetServiceConfig = 22;
  bool has_reqgetserviceconfig() const;
  private:
  bool _internal_has_reqgetserviceconfig() const;
  public:
  void clear_reqgetserviceconfig();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest& reqgetserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* release_reqgetserviceconfig();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* mutable_reqgetserviceconfig();
  void set_allocated_reqgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* reqgetserviceconfig);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest& _internal_reqgetserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* _internal_mutable_reqgetserviceconfig();
  public:
  void unsafe_arena_set_allocated_reqgetserviceconfig(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* reqgetserviceconfig);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* unsafe_arena_release_reqgetserviceconfig();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest reqGetServiceConfigOnRegionName = 23;
  bool has_reqgetserviceconfigonregionname() const;
  private:
  bool _internal_has_reqgetserviceconfigonregionname() const;
  public:
  void clear_reqgetserviceconfigonregionname();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest& reqgetserviceconfigonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* release_reqgetserviceconfigonregionname();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* mutable_reqgetserviceconfigonregionname();
  void set_allocated_reqgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* reqgetserviceconfigonregionname);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest& _internal_reqgetserviceconfigonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* _internal_mutable_reqgetserviceconfigonregionname();
  public:
  void unsafe_arena_set_allocated_reqgetserviceconfigonregionname(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* reqgetserviceconfigonregionname);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* unsafe_arena_release_reqgetserviceconfigonregionname();

  void clear_ARequest();
  ARequestCase ARequest_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.Request)
 private:
  class _Internal;
  void set_has_reqaddserviceprovider();
  void set_has_reqaddserviceproviderbulk();
  void set_has_reqaddservicelocation();
  void set_has_reqaddservicelocationbulk();
  void set_has_reqaddservices();
  void set_has_reqaddservicesbulk();
  void set_has_reqaddserviceprovidermapping();
  void set_has_reqaddserviceprovidermappingbulk();
  void set_has_reqaddserviceconfig();
  void set_has_reqaddserviceconfigbulk();
  void set_has_reqgetserviceprovider();
  void set_has_reqaddserviceproviderfromexcel();
  void set_has_reqgetsdtvonlatlong();
  void set_has_reqgetservicedetailsonlatlong();
  void set_has_reqgetservicesonservicenameandservicetype();
  void set_has_reqgetserviceprovideronmobilenumber();
  void set_has_reqgetservicelocationonregionname();
  void set_has_reqgetserviceconfigoncondition();
  void set_has_reqgetserviceprovideronservicetype();
  void set_has_reqgetlocationonserviceproviderid();
  void set_has_reqgetserviceconfig();
  void set_has_reqgetserviceconfigonregionname();

  inline bool has_ARequest() const;
  inline void clear_has_ARequest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  union ARequestUnion {
    ARequestUnion() {}
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* reqaddserviceprovider_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* reqaddserviceproviderbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* reqaddservicelocation_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* reqaddservicelocationbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* reqaddservices_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* reqaddservicesbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* reqaddserviceprovidermapping_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* reqaddserviceprovidermappingbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* reqaddserviceconfig_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* reqaddserviceconfigbulk_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* reqgetserviceprovider_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* reqaddserviceproviderfromexcel_;
    ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* reqgetsdtvonlatlong_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* reqgetservicedetailsonlatlong_;
    ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* reqgetservicesonservicenameandservicetype_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* reqgetserviceprovideronmobilenumber_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* reqgetservicelocationonregionname_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* reqgetserviceconfigoncondition_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* reqgetserviceprovideronservicetype_;
    ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* reqgetlocationonserviceproviderid_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* reqgetserviceconfig_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* reqgetserviceconfigonregionname_;
  } ARequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiResponses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.MultiResponses) */ {
 public:
  inline MultiResponses() : MultiResponses(nullptr) {}
  virtual ~MultiResponses();

  MultiResponses(const MultiResponses& from);
  MultiResponses(MultiResponses&& from) noexcept
    : MultiResponses() {
    *this = ::std::move(from);
  }

  inline MultiResponses& operator=(const MultiResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiResponses& operator=(MultiResponses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiResponses& default_instance();

  static inline const MultiResponses* internal_default_instance() {
    return reinterpret_cast<const MultiResponses*>(
               &_MultiResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(MultiResponses& a, MultiResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiResponses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiResponses* New() const final {
    return CreateMaybeMessage<MultiResponses>(nullptr);
  }

  MultiResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiResponses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiResponses& from);
  void MergeFrom(const MultiResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiResponses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.MultiResponses";
  }
  protected:
  explicit MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .farm.nurture.serviceProvider.service.proto.Response response = 2;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::farm::nurture::serviceProvider::service::proto::Response* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Response >*
      mutable_response();
  private:
  const ::farm::nurture::serviceProvider::service::proto::Response& _internal_response(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Response* _internal_add_response();
  public:
  const ::farm::nurture::serviceProvider::service::proto::Response& response(int index) const;
  ::farm::nurture::serviceProvider::service::proto::Response* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Response >&
      response() const;

  // .farm.nurture.serviceProvider.service.proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.MultiResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Response > response_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.serviceProvider.service.proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum AResponseCase {
    kResAddServiceProvider = 3,
    kResAddServiceProviderBulk = 4,
    kResAddServiceLocation = 5,
    kResAddServiceLocationBulk = 6,
    kResAddServices = 7,
    kResAddServicesBulk = 8,
    kResAddServiceProviderMapping = 9,
    kResAddServiceProviderMappingBulk = 10,
    kResAddServiceConfig = 11,
    kResAddServiceConfigBulk = 12,
    kResGetServiceProvider = 13,
    kResAddServiceProviderFromExcel = 14,
    kResGetSDTVOnLatLong = 15,
    kResGetServiceDetailsOnLatLong = 16,
    kResGetServicesOnServiceNameAndServiceType = 17,
    kResGetServiceProviderOnMobileNumber = 18,
    kResGetServiceLocationOnRegionName = 19,
    kResGetServiceConfigOnCondition = 20,
    kResGetServiceProviderOnServiceType = 21,
    kResGetLocationOnServiceProviderId = 22,
    kResGetServiceConfig = 23,
    kResGetServiceConfigOnRegionName = 24,
    ARESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.serviceProvider.service.proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto);
    return ::descriptor_table_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kStatusFieldNumber = 2,
    kResAddServiceProviderFieldNumber = 3,
    kResAddServiceProviderBulkFieldNumber = 4,
    kResAddServiceLocationFieldNumber = 5,
    kResAddServiceLocationBulkFieldNumber = 6,
    kResAddServicesFieldNumber = 7,
    kResAddServicesBulkFieldNumber = 8,
    kResAddServiceProviderMappingFieldNumber = 9,
    kResAddServiceProviderMappingBulkFieldNumber = 10,
    kResAddServiceConfigFieldNumber = 11,
    kResAddServiceConfigBulkFieldNumber = 12,
    kResGetServiceProviderFieldNumber = 13,
    kResAddServiceProviderFromExcelFieldNumber = 14,
    kResGetSDTVOnLatLongFieldNumber = 15,
    kResGetServiceDetailsOnLatLongFieldNumber = 16,
    kResGetServicesOnServiceNameAndServiceTypeFieldNumber = 17,
    kResGetServiceProviderOnMobileNumberFieldNumber = 18,
    kResGetServiceLocationOnRegionNameFieldNumber = 19,
    kResGetServiceConfigOnConditionFieldNumber = 20,
    kResGetServiceProviderOnServiceTypeFieldNumber = 21,
    kResGetLocationOnServiceProviderIdFieldNumber = 22,
    kResGetServiceConfigFieldNumber = 23,
    kResGetServiceConfigOnRegionNameFieldNumber = 24,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.serviceProvider.service.proto.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::serviceProvider::service::proto::Status& status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* release_status();
  ::farm::nurture::serviceProvider::service::proto::Status* mutable_status();
  void set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status);
  private:
  const ::farm::nurture::serviceProvider::service::proto::Status& _internal_status() const;
  ::farm::nurture::serviceProvider::service::proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::serviceProvider::service::proto::Status* status);
  ::farm::nurture::serviceProvider::service::proto::Status* unsafe_arena_release_status();

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse resAddServiceProvider = 3;
  bool has_resaddserviceprovider() const;
  private:
  bool _internal_has_resaddserviceprovider() const;
  public:
  void clear_resaddserviceprovider();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& resaddserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* release_resaddserviceprovider();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* mutable_resaddserviceprovider();
  void set_allocated_resaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* resaddserviceprovider);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& _internal_resaddserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* _internal_mutable_resaddserviceprovider();
  public:
  void unsafe_arena_set_allocated_resaddserviceprovider(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* resaddserviceprovider);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* unsafe_arena_release_resaddserviceprovider();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse resAddServiceProviderBulk = 4;
  bool has_resaddserviceproviderbulk() const;
  private:
  bool _internal_has_resaddserviceproviderbulk() const;
  public:
  void clear_resaddserviceproviderbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse& resaddserviceproviderbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* release_resaddserviceproviderbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* mutable_resaddserviceproviderbulk();
  void set_allocated_resaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* resaddserviceproviderbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse& _internal_resaddserviceproviderbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* _internal_mutable_resaddserviceproviderbulk();
  public:
  void unsafe_arena_set_allocated_resaddserviceproviderbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* resaddserviceproviderbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* unsafe_arena_release_resaddserviceproviderbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse resAddServiceLocation = 5;
  bool has_resaddservicelocation() const;
  private:
  bool _internal_has_resaddservicelocation() const;
  public:
  void clear_resaddservicelocation();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& resaddservicelocation() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* release_resaddservicelocation();
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* mutable_resaddservicelocation();
  void set_allocated_resaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* resaddservicelocation);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& _internal_resaddservicelocation() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* _internal_mutable_resaddservicelocation();
  public:
  void unsafe_arena_set_allocated_resaddservicelocation(
      ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* resaddservicelocation);
  ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* unsafe_arena_release_resaddservicelocation();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse resAddServiceLocationBulk = 6;
  bool has_resaddservicelocationbulk() const;
  private:
  bool _internal_has_resaddservicelocationbulk() const;
  public:
  void clear_resaddservicelocationbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse& resaddservicelocationbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* release_resaddservicelocationbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* mutable_resaddservicelocationbulk();
  void set_allocated_resaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* resaddservicelocationbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse& _internal_resaddservicelocationbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* _internal_mutable_resaddservicelocationbulk();
  public:
  void unsafe_arena_set_allocated_resaddservicelocationbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* resaddservicelocationbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* unsafe_arena_release_resaddservicelocationbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServicesResponse resAddServices = 7;
  bool has_resaddservices() const;
  private:
  bool _internal_has_resaddservices() const;
  public:
  void clear_resaddservices();
  const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& resaddservices() const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* release_resaddservices();
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* mutable_resaddservices();
  void set_allocated_resaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesResponse* resaddservices);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& _internal_resaddservices() const;
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* _internal_mutable_resaddservices();
  public:
  void unsafe_arena_set_allocated_resaddservices(
      ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* resaddservices);
  ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* unsafe_arena_release_resaddservices();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse resAddServicesBulk = 8;
  bool has_resaddservicesbulk() const;
  private:
  bool _internal_has_resaddservicesbulk() const;
  public:
  void clear_resaddservicesbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse& resaddservicesbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* release_resaddservicesbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* mutable_resaddservicesbulk();
  void set_allocated_resaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* resaddservicesbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse& _internal_resaddservicesbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* _internal_mutable_resaddservicesbulk();
  public:
  void unsafe_arena_set_allocated_resaddservicesbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* resaddservicesbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* unsafe_arena_release_resaddservicesbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse resAddServiceProviderMapping = 9;
  bool has_resaddserviceprovidermapping() const;
  private:
  bool _internal_has_resaddserviceprovidermapping() const;
  public:
  void clear_resaddserviceprovidermapping();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& resaddserviceprovidermapping() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* release_resaddserviceprovidermapping();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* mutable_resaddserviceprovidermapping();
  void set_allocated_resaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* resaddserviceprovidermapping);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& _internal_resaddserviceprovidermapping() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* _internal_mutable_resaddserviceprovidermapping();
  public:
  void unsafe_arena_set_allocated_resaddserviceprovidermapping(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* resaddserviceprovidermapping);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* unsafe_arena_release_resaddserviceprovidermapping();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse resAddServiceProviderMappingBulk = 10;
  bool has_resaddserviceprovidermappingbulk() const;
  private:
  bool _internal_has_resaddserviceprovidermappingbulk() const;
  public:
  void clear_resaddserviceprovidermappingbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse& resaddserviceprovidermappingbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* release_resaddserviceprovidermappingbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* mutable_resaddserviceprovidermappingbulk();
  void set_allocated_resaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* resaddserviceprovidermappingbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse& _internal_resaddserviceprovidermappingbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* _internal_mutable_resaddserviceprovidermappingbulk();
  public:
  void unsafe_arena_set_allocated_resaddserviceprovidermappingbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* resaddserviceprovidermappingbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* unsafe_arena_release_resaddserviceprovidermappingbulk();

  // .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse resAddServiceConfig = 11;
  bool has_resaddserviceconfig() const;
  private:
  bool _internal_has_resaddserviceconfig() const;
  public:
  void clear_resaddserviceconfig();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& resaddserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* release_resaddserviceconfig();
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* mutable_resaddserviceconfig();
  void set_allocated_resaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* resaddserviceconfig);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& _internal_resaddserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* _internal_mutable_resaddserviceconfig();
  public:
  void unsafe_arena_set_allocated_resaddserviceconfig(
      ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* resaddserviceconfig);
  ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* unsafe_arena_release_resaddserviceconfig();

  // .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse resAddServiceConfigBulk = 12;
  bool has_resaddserviceconfigbulk() const;
  private:
  bool _internal_has_resaddserviceconfigbulk() const;
  public:
  void clear_resaddserviceconfigbulk();
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse& resaddserviceconfigbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* release_resaddserviceconfigbulk();
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* mutable_resaddserviceconfigbulk();
  void set_allocated_resaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* resaddserviceconfigbulk);
  private:
  const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse& _internal_resaddserviceconfigbulk() const;
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* _internal_mutable_resaddserviceconfigbulk();
  public:
  void unsafe_arena_set_allocated_resaddserviceconfigbulk(
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* resaddserviceconfigbulk);
  ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* unsafe_arena_release_resaddserviceconfigbulk();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse resGetServiceProvider = 13;
  bool has_resgetserviceprovider() const;
  private:
  bool _internal_has_resgetserviceprovider() const;
  public:
  void clear_resgetserviceprovider();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse& resgetserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* release_resgetserviceprovider();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* mutable_resgetserviceprovider();
  void set_allocated_resgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* resgetserviceprovider);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse& _internal_resgetserviceprovider() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* _internal_mutable_resgetserviceprovider();
  public:
  void unsafe_arena_set_allocated_resgetserviceprovider(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* resgetserviceprovider);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* unsafe_arena_release_resgetserviceprovider();

  // .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse resAddServiceProviderFromExcel = 14;
  bool has_resaddserviceproviderfromexcel() const;
  private:
  bool _internal_has_resaddserviceproviderfromexcel() const;
  public:
  void clear_resaddserviceproviderfromexcel();
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse& resaddserviceproviderfromexcel() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* release_resaddserviceproviderfromexcel();
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* mutable_resaddserviceproviderfromexcel();
  void set_allocated_resaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* resaddserviceproviderfromexcel);
  private:
  const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse& _internal_resaddserviceproviderfromexcel() const;
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* _internal_mutable_resaddserviceproviderfromexcel();
  public:
  void unsafe_arena_set_allocated_resaddserviceproviderfromexcel(
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* resaddserviceproviderfromexcel);
  ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* unsafe_arena_release_resaddserviceproviderfromexcel();

  // .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse resGetSDTVOnLatLong = 15;
  bool has_resgetsdtvonlatlong() const;
  private:
  bool _internal_has_resgetsdtvonlatlong() const;
  public:
  void clear_resgetsdtvonlatlong();
  const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse& resgetsdtvonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* release_resgetsdtvonlatlong();
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* mutable_resgetsdtvonlatlong();
  void set_allocated_resgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* resgetsdtvonlatlong);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse& _internal_resgetsdtvonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* _internal_mutable_resgetsdtvonlatlong();
  public:
  void unsafe_arena_set_allocated_resgetsdtvonlatlong(
      ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* resgetsdtvonlatlong);
  ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* unsafe_arena_release_resgetsdtvonlatlong();

  // .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse resGetServiceDetailsOnLatLong = 16;
  bool has_resgetservicedetailsonlatlong() const;
  private:
  bool _internal_has_resgetservicedetailsonlatlong() const;
  public:
  void clear_resgetservicedetailsonlatlong();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse& resgetservicedetailsonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* release_resgetservicedetailsonlatlong();
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* mutable_resgetservicedetailsonlatlong();
  void set_allocated_resgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* resgetservicedetailsonlatlong);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse& _internal_resgetservicedetailsonlatlong() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* _internal_mutable_resgetservicedetailsonlatlong();
  public:
  void unsafe_arena_set_allocated_resgetservicedetailsonlatlong(
      ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* resgetservicedetailsonlatlong);
  ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* unsafe_arena_release_resgetservicedetailsonlatlong();

  // .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse resGetServicesOnServiceNameAndServiceType = 17;
  bool has_resgetservicesonservicenameandservicetype() const;
  private:
  bool _internal_has_resgetservicesonservicenameandservicetype() const;
  public:
  void clear_resgetservicesonservicenameandservicetype();
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse& resgetservicesonservicenameandservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* release_resgetservicesonservicenameandservicetype();
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* mutable_resgetservicesonservicenameandservicetype();
  void set_allocated_resgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* resgetservicesonservicenameandservicetype);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse& _internal_resgetservicesonservicenameandservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* _internal_mutable_resgetservicesonservicenameandservicetype();
  public:
  void unsafe_arena_set_allocated_resgetservicesonservicenameandservicetype(
      ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* resgetservicesonservicenameandservicetype);
  ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* unsafe_arena_release_resgetservicesonservicenameandservicetype();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse resGetServiceProviderOnMobileNumber = 18;
  bool has_resgetserviceprovideronmobilenumber() const;
  private:
  bool _internal_has_resgetserviceprovideronmobilenumber() const;
  public:
  void clear_resgetserviceprovideronmobilenumber();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse& resgetserviceprovideronmobilenumber() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* release_resgetserviceprovideronmobilenumber();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* mutable_resgetserviceprovideronmobilenumber();
  void set_allocated_resgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* resgetserviceprovideronmobilenumber);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse& _internal_resgetserviceprovideronmobilenumber() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* _internal_mutable_resgetserviceprovideronmobilenumber();
  public:
  void unsafe_arena_set_allocated_resgetserviceprovideronmobilenumber(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* resgetserviceprovideronmobilenumber);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* unsafe_arena_release_resgetserviceprovideronmobilenumber();

  // .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse resGetServiceLocationOnRegionName = 19;
  bool has_resgetservicelocationonregionname() const;
  private:
  bool _internal_has_resgetservicelocationonregionname() const;
  public:
  void clear_resgetservicelocationonregionname();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse& resgetservicelocationonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* release_resgetservicelocationonregionname();
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* mutable_resgetservicelocationonregionname();
  void set_allocated_resgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* resgetservicelocationonregionname);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse& _internal_resgetservicelocationonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* _internal_mutable_resgetservicelocationonregionname();
  public:
  void unsafe_arena_set_allocated_resgetservicelocationonregionname(
      ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* resgetservicelocationonregionname);
  ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* unsafe_arena_release_resgetservicelocationonregionname();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse resGetServiceConfigOnCondition = 20;
  bool has_resgetserviceconfigoncondition() const;
  private:
  bool _internal_has_resgetserviceconfigoncondition() const;
  public:
  void clear_resgetserviceconfigoncondition();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse& resgetserviceconfigoncondition() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* release_resgetserviceconfigoncondition();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* mutable_resgetserviceconfigoncondition();
  void set_allocated_resgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* resgetserviceconfigoncondition);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse& _internal_resgetserviceconfigoncondition() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* _internal_mutable_resgetserviceconfigoncondition();
  public:
  void unsafe_arena_set_allocated_resgetserviceconfigoncondition(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* resgetserviceconfigoncondition);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* unsafe_arena_release_resgetserviceconfigoncondition();

  // .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse resGetServiceProviderOnServiceType = 21;
  bool has_resgetserviceprovideronservicetype() const;
  private:
  bool _internal_has_resgetserviceprovideronservicetype() const;
  public:
  void clear_resgetserviceprovideronservicetype();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse& resgetserviceprovideronservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* release_resgetserviceprovideronservicetype();
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* mutable_resgetserviceprovideronservicetype();
  void set_allocated_resgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* resgetserviceprovideronservicetype);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse& _internal_resgetserviceprovideronservicetype() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* _internal_mutable_resgetserviceprovideronservicetype();
  public:
  void unsafe_arena_set_allocated_resgetserviceprovideronservicetype(
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* resgetserviceprovideronservicetype);
  ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* unsafe_arena_release_resgetserviceprovideronservicetype();

  // .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse resGetLocationOnServiceProviderId = 22;
  bool has_resgetlocationonserviceproviderid() const;
  private:
  bool _internal_has_resgetlocationonserviceproviderid() const;
  public:
  void clear_resgetlocationonserviceproviderid();
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse& resgetlocationonserviceproviderid() const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* release_resgetlocationonserviceproviderid();
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* mutable_resgetlocationonserviceproviderid();
  void set_allocated_resgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* resgetlocationonserviceproviderid);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse& _internal_resgetlocationonserviceproviderid() const;
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* _internal_mutable_resgetlocationonserviceproviderid();
  public:
  void unsafe_arena_set_allocated_resgetlocationonserviceproviderid(
      ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* resgetlocationonserviceproviderid);
  ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* unsafe_arena_release_resgetlocationonserviceproviderid();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse resGetServiceConfig = 23;
  bool has_resgetserviceconfig() const;
  private:
  bool _internal_has_resgetserviceconfig() const;
  public:
  void clear_resgetserviceconfig();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse& resgetserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* release_resgetserviceconfig();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* mutable_resgetserviceconfig();
  void set_allocated_resgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* resgetserviceconfig);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse& _internal_resgetserviceconfig() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* _internal_mutable_resgetserviceconfig();
  public:
  void unsafe_arena_set_allocated_resgetserviceconfig(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* resgetserviceconfig);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* unsafe_arena_release_resgetserviceconfig();

  // .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse resGetServiceConfigOnRegionName = 24;
  bool has_resgetserviceconfigonregionname() const;
  private:
  bool _internal_has_resgetserviceconfigonregionname() const;
  public:
  void clear_resgetserviceconfigonregionname();
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse& resgetserviceconfigonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* release_resgetserviceconfigonregionname();
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* mutable_resgetserviceconfigonregionname();
  void set_allocated_resgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* resgetserviceconfigonregionname);
  private:
  const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse& _internal_resgetserviceconfigonregionname() const;
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* _internal_mutable_resgetserviceconfigonregionname();
  public:
  void unsafe_arena_set_allocated_resgetserviceconfigonregionname(
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* resgetserviceconfigonregionname);
  ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* unsafe_arena_release_resgetserviceconfigonregionname();

  void clear_AResponse();
  AResponseCase AResponse_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.serviceProvider.service.proto.Response)
 private:
  class _Internal;
  void set_has_resaddserviceprovider();
  void set_has_resaddserviceproviderbulk();
  void set_has_resaddservicelocation();
  void set_has_resaddservicelocationbulk();
  void set_has_resaddservices();
  void set_has_resaddservicesbulk();
  void set_has_resaddserviceprovidermapping();
  void set_has_resaddserviceprovidermappingbulk();
  void set_has_resaddserviceconfig();
  void set_has_resaddserviceconfigbulk();
  void set_has_resgetserviceprovider();
  void set_has_resaddserviceproviderfromexcel();
  void set_has_resgetsdtvonlatlong();
  void set_has_resgetservicedetailsonlatlong();
  void set_has_resgetservicesonservicenameandservicetype();
  void set_has_resgetserviceprovideronmobilenumber();
  void set_has_resgetservicelocationonregionname();
  void set_has_resgetserviceconfigoncondition();
  void set_has_resgetserviceprovideronservicetype();
  void set_has_resgetlocationonserviceproviderid();
  void set_has_resgetserviceconfig();
  void set_has_resgetserviceconfigonregionname();

  inline bool has_AResponse() const;
  inline void clear_has_AResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::farm::nurture::serviceProvider::service::proto::Status* status_;
  union AResponseUnion {
    AResponseUnion() {}
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* resaddserviceprovider_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* resaddserviceproviderbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* resaddservicelocation_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* resaddservicelocationbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* resaddservices_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* resaddservicesbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* resaddserviceprovidermapping_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* resaddserviceprovidermappingbulk_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* resaddserviceconfig_;
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* resaddserviceconfigbulk_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* resgetserviceprovider_;
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* resaddserviceproviderfromexcel_;
    ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* resgetsdtvonlatlong_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* resgetservicedetailsonlatlong_;
    ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* resgetservicesonservicenameandservicetype_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* resgetserviceprovideronmobilenumber_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* resgetservicelocationonregionname_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* resgetserviceconfigoncondition_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* resgetserviceprovideronservicetype_;
    ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* resgetlocationonserviceproviderid_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* resgetserviceconfig_;
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* resgetserviceconfigonregionname_;
  } AResponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaders

// string prefferedUserName = 1;
inline void RequestHeaders::clear_prefferedusername() {
  prefferedusername_.ClearToEmpty();
}
inline const std::string& RequestHeaders::prefferedusername() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
  return _internal_prefferedusername();
}
inline void RequestHeaders::set_prefferedusername(const std::string& value) {
  _internal_set_prefferedusername(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
}
inline std::string* RequestHeaders::mutable_prefferedusername() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
  return _internal_mutable_prefferedusername();
}
inline const std::string& RequestHeaders::_internal_prefferedusername() const {
  return prefferedusername_.Get();
}
inline void RequestHeaders::_internal_set_prefferedusername(const std::string& value) {
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_prefferedusername(std::string&& value) {
  
  prefferedusername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
}
inline void RequestHeaders::set_prefferedusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
}
inline void RequestHeaders::set_prefferedusername(const char* value,
    size_t size) {
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
}
inline std::string* RequestHeaders::_internal_mutable_prefferedusername() {
  
  return prefferedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_prefferedusername() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
  return prefferedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_prefferedusername(std::string* prefferedusername) {
  if (prefferedusername != nullptr) {
    
  } else {
    
  }
  prefferedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefferedusername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.prefferedUserName)
}

// string clientId = 2;
inline void RequestHeaders::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::clientid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
  return _internal_clientid();
}
inline void RequestHeaders::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
}
inline std::string* RequestHeaders::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& RequestHeaders::_internal_clientid() const {
  return clientid_.Get();
}
inline void RequestHeaders::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
}
inline void RequestHeaders::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
}
inline void RequestHeaders::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
}
inline std::string* RequestHeaders::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_clientid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.clientId)
}

// string tracingId = 3;
inline void RequestHeaders::clear_tracingid() {
  tracingid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::tracingid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
  return _internal_tracingid();
}
inline void RequestHeaders::set_tracingid(const std::string& value) {
  _internal_set_tracingid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
}
inline std::string* RequestHeaders::mutable_tracingid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
  return _internal_mutable_tracingid();
}
inline const std::string& RequestHeaders::_internal_tracingid() const {
  return tracingid_.Get();
}
inline void RequestHeaders::_internal_set_tracingid(const std::string& value) {
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_tracingid(std::string&& value) {
  
  tracingid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
}
inline void RequestHeaders::set_tracingid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
}
inline void RequestHeaders::set_tracingid(const char* value,
    size_t size) {
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
}
inline std::string* RequestHeaders::_internal_mutable_tracingid() {
  
  return tracingid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_tracingid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
  return tracingid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_tracingid(std::string* tracingid) {
  if (tracingid != nullptr) {
    
  } else {
    
  }
  tracingid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracingid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.tracingId)
}

// bool traceDetails = 4;
inline void RequestHeaders::clear_tracedetails() {
  tracedetails_ = false;
}
inline bool RequestHeaders::_internal_tracedetails() const {
  return tracedetails_;
}
inline bool RequestHeaders::tracedetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.traceDetails)
  return _internal_tracedetails();
}
inline void RequestHeaders::_internal_set_tracedetails(bool value) {
  
  tracedetails_ = value;
}
inline void RequestHeaders::set_tracedetails(bool value) {
  _internal_set_tracedetails(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.traceDetails)
}

// .farm.nurture.serviceProvider.service.proto.RequestHeaders.LANGUAGE language = 5;
inline void RequestHeaders::clear_language() {
  language_ = 0;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE RequestHeaders::_internal_language() const {
  return static_cast< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE >(language_);
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE RequestHeaders::language() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.language)
  return _internal_language();
}
inline void RequestHeaders::_internal_set_language(::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE value) {
  
  language_ = value;
}
inline void RequestHeaders::set_language(::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.language)
}

// float latitude = 6;
inline void RequestHeaders::clear_latitude() {
  latitude_ = 0;
}
inline float RequestHeaders::_internal_latitude() const {
  return latitude_;
}
inline float RequestHeaders::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.latitude)
  return _internal_latitude();
}
inline void RequestHeaders::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void RequestHeaders::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.latitude)
}

// float longitude = 7;
inline void RequestHeaders::clear_longitude() {
  longitude_ = 0;
}
inline float RequestHeaders::_internal_longitude() const {
  return longitude_;
}
inline float RequestHeaders::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.longitude)
  return _internal_longitude();
}
inline void RequestHeaders::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void RequestHeaders::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.longitude)
}

// float accuracy = 8;
inline void RequestHeaders::clear_accuracy() {
  accuracy_ = 0;
}
inline float RequestHeaders::_internal_accuracy() const {
  return accuracy_;
}
inline float RequestHeaders::accuracy() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.accuracy)
  return _internal_accuracy();
}
inline void RequestHeaders::_internal_set_accuracy(float value) {
  
  accuracy_ = value;
}
inline void RequestHeaders::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.accuracy)
}

// .farm.nurture.serviceProvider.service.proto.RequestHeaders.COUNTRY country = 9;
inline void RequestHeaders::clear_country() {
  country_ = 0;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY RequestHeaders::_internal_country() const {
  return static_cast< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY >(country_);
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY RequestHeaders::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.country)
  return _internal_country();
}
inline void RequestHeaders::_internal_set_country(::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY value) {
  
  country_ = value;
}
inline void RequestHeaders::set_country(::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.country)
}

// string experimentId = 10;
inline void RequestHeaders::clear_experimentid() {
  experimentid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::experimentid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
  return _internal_experimentid();
}
inline void RequestHeaders::set_experimentid(const std::string& value) {
  _internal_set_experimentid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
}
inline std::string* RequestHeaders::mutable_experimentid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
  return _internal_mutable_experimentid();
}
inline const std::string& RequestHeaders::_internal_experimentid() const {
  return experimentid_.Get();
}
inline void RequestHeaders::_internal_set_experimentid(const std::string& value) {
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_experimentid(std::string&& value) {
  
  experimentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
}
inline void RequestHeaders::set_experimentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
}
inline void RequestHeaders::set_experimentid(const char* value,
    size_t size) {
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
}
inline std::string* RequestHeaders::_internal_mutable_experimentid() {
  
  return experimentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_experimentid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
  return experimentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_experimentid(std::string* experimentid) {
  if (experimentid != nullptr) {
    
  } else {
    
  }
  experimentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), experimentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.experimentId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 11;
inline int RequestHeaders::_internal_attribs_size() const {
  return attribs_.size();
}
inline int RequestHeaders::attribs_size() const {
  return _internal_attribs_size();
}
inline void RequestHeaders::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* RequestHeaders::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
RequestHeaders::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& RequestHeaders::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& RequestHeaders::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* RequestHeaders::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* RequestHeaders::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
RequestHeaders::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.RequestHeaders.attribs)
  return attribs_;
}

// string authToken = 12;
inline void RequestHeaders::clear_authtoken() {
  authtoken_.ClearToEmpty();
}
inline const std::string& RequestHeaders::authtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
  return _internal_authtoken();
}
inline void RequestHeaders::set_authtoken(const std::string& value) {
  _internal_set_authtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
}
inline std::string* RequestHeaders::mutable_authtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
  return _internal_mutable_authtoken();
}
inline const std::string& RequestHeaders::_internal_authtoken() const {
  return authtoken_.Get();
}
inline void RequestHeaders::_internal_set_authtoken(const std::string& value) {
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_authtoken(std::string&& value) {
  
  authtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
}
inline void RequestHeaders::set_authtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
}
inline void RequestHeaders::set_authtoken(const char* value,
    size_t size) {
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
}
inline std::string* RequestHeaders::_internal_mutable_authtoken() {
  
  return authtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_authtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
  return authtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_authtoken(std::string* authtoken) {
  if (authtoken != nullptr) {
    
  } else {
    
  }
  authtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.authToken)
}

// string appToken = 13;
inline void RequestHeaders::clear_apptoken() {
  apptoken_.ClearToEmpty();
}
inline const std::string& RequestHeaders::apptoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
  return _internal_apptoken();
}
inline void RequestHeaders::set_apptoken(const std::string& value) {
  _internal_set_apptoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
}
inline std::string* RequestHeaders::mutable_apptoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
  return _internal_mutable_apptoken();
}
inline const std::string& RequestHeaders::_internal_apptoken() const {
  return apptoken_.Get();
}
inline void RequestHeaders::_internal_set_apptoken(const std::string& value) {
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_apptoken(std::string&& value) {
  
  apptoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
}
inline void RequestHeaders::set_apptoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
}
inline void RequestHeaders::set_apptoken(const char* value,
    size_t size) {
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
}
inline std::string* RequestHeaders::_internal_mutable_apptoken() {
  
  return apptoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_apptoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
  return apptoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_apptoken(std::string* apptoken) {
  if (apptoken != nullptr) {
    
  } else {
    
  }
  apptoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apptoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.RequestHeaders.appToken)
}

// -------------------------------------------------------------------

// Attribs

// string key = 1;
inline void Attribs::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Attribs::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Attribs.key)
  return _internal_key();
}
inline void Attribs::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Attribs.key)
}
inline std::string* Attribs::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Attribs.key)
  return _internal_mutable_key();
}
inline const std::string& Attribs::_internal_key() const {
  return key_.Get();
}
inline void Attribs::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribs::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.Attribs.key)
}
inline void Attribs::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.Attribs.key)
}
inline void Attribs::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.Attribs.key)
}
inline std::string* Attribs::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribs::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Attribs.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Attribs.key)
}

// string value = 2;
inline void Attribs::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Attribs::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Attribs.value)
  return _internal_value();
}
inline void Attribs::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Attribs.value)
}
inline std::string* Attribs::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Attribs.value)
  return _internal_mutable_value();
}
inline const std::string& Attribs::_internal_value() const {
  return value_.Get();
}
inline void Attribs::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribs::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.Attribs.value)
}
inline void Attribs::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.Attribs.value)
}
inline void Attribs::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.Attribs.value)
}
inline std::string* Attribs::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribs::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Attribs.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribs::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Attribs.value)
}

// -------------------------------------------------------------------

// Status

// .farm.nurture.serviceProvider.service.proto.StatusCode status = 1;
inline void Status::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::serviceProvider::service::proto::StatusCode Status::_internal_status() const {
  return static_cast< ::farm::nurture::serviceProvider::service::proto::StatusCode >(status_);
}
inline ::farm::nurture::serviceProvider::service::proto::StatusCode Status::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(::farm::nurture::serviceProvider::service::proto::StatusCode value) {
  
  status_ = value;
}
inline void Status::set_status(::farm::nurture::serviceProvider::service::proto::StatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Status.status)
}

// repeated string error_messages = 2;
inline int Status::_internal_error_messages_size() const {
  return error_messages_.size();
}
inline int Status::error_messages_size() const {
  return _internal_error_messages_size();
}
inline void Status::clear_error_messages() {
  error_messages_.Clear();
}
inline std::string* Status::add_error_messages() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  return _internal_add_error_messages();
}
inline const std::string& Status::_internal_error_messages(int index) const {
  return error_messages_.Get(index);
}
inline const std::string& Status::error_messages(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  return _internal_error_messages(index);
}
inline std::string* Status::mutable_error_messages(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  return error_messages_.Mutable(index);
}
inline void Status::set_error_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  error_messages_.Mutable(index)->assign(value);
}
inline void Status::set_error_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  error_messages_.Mutable(index)->assign(std::move(value));
}
inline void Status::set_error_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline void Status::set_error_messages(int index, const char* value, size_t size) {
  error_messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline std::string* Status::_internal_add_error_messages() {
  return error_messages_.Add();
}
inline void Status::add_error_messages(const std::string& value) {
  error_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline void Status::add_error_messages(std::string&& value) {
  error_messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline void Status::add_error_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline void Status::add_error_messages(const char* value, size_t size) {
  error_messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.serviceProvider.service.proto.Status.error_messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Status::error_messages() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  return error_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Status::mutable_error_messages() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.Status.error_messages)
  return &error_messages_;
}

// int32 internal_error_code = 3;
inline void Status::clear_internal_error_code() {
  internal_error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_internal_error_code() const {
  return internal_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::internal_error_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Status.internal_error_code)
  return _internal_internal_error_code();
}
inline void Status::_internal_set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  internal_error_code_ = value;
}
inline void Status::set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_error_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Status.internal_error_code)
}

// -------------------------------------------------------------------

// AddServiceProviderRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServiceProviderRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServiceProviderRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServiceProviderRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServiceProviderRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServiceProviderRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.requestHeaders)
}

// string name = 2;
inline void AddServiceProviderRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AddServiceProviderRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
  return _internal_name();
}
inline void AddServiceProviderRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
}
inline std::string* AddServiceProviderRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddServiceProviderRequest::_internal_name() const {
  return name_.Get();
}
inline void AddServiceProviderRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
}
inline void AddServiceProviderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
}
inline void AddServiceProviderRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
}
inline std::string* AddServiceProviderRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.name)
}

// string mobileNumber = 3;
inline void AddServiceProviderRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& AddServiceProviderRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void AddServiceProviderRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
}
inline std::string* AddServiceProviderRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& AddServiceProviderRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void AddServiceProviderRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
}
inline void AddServiceProviderRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
}
inline void AddServiceProviderRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
}
inline std::string* AddServiceProviderRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.mobileNumber)
}

// string whatsappNumber = 4;
inline void AddServiceProviderRequest::clear_whatsappnumber() {
  whatsappnumber_.ClearToEmpty();
}
inline const std::string& AddServiceProviderRequest::whatsappnumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
  return _internal_whatsappnumber();
}
inline void AddServiceProviderRequest::set_whatsappnumber(const std::string& value) {
  _internal_set_whatsappnumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
}
inline std::string* AddServiceProviderRequest::mutable_whatsappnumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
  return _internal_mutable_whatsappnumber();
}
inline const std::string& AddServiceProviderRequest::_internal_whatsappnumber() const {
  return whatsappnumber_.Get();
}
inline void AddServiceProviderRequest::_internal_set_whatsappnumber(const std::string& value) {
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderRequest::set_whatsappnumber(std::string&& value) {
  
  whatsappnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
}
inline void AddServiceProviderRequest::set_whatsappnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
}
inline void AddServiceProviderRequest::set_whatsappnumber(const char* value,
    size_t size) {
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
}
inline std::string* AddServiceProviderRequest::_internal_mutable_whatsappnumber() {
  
  return whatsappnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderRequest::release_whatsappnumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
  return whatsappnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderRequest::set_allocated_whatsappnumber(std::string* whatsappnumber) {
  if (whatsappnumber != nullptr) {
    
  } else {
    
  }
  whatsappnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whatsappnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.whatsappNumber)
}

// string pincode = 5;
inline void AddServiceProviderRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& AddServiceProviderRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
  return _internal_pincode();
}
inline void AddServiceProviderRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
}
inline std::string* AddServiceProviderRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& AddServiceProviderRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void AddServiceProviderRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
}
inline void AddServiceProviderRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
}
inline void AddServiceProviderRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
}
inline std::string* AddServiceProviderRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest.pincode)
}

// -------------------------------------------------------------------

// BulkAddServiceProviderRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool BulkAddServiceProviderRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddServiceProviderRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void BulkAddServiceProviderRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceProviderRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceProviderRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddServiceProviderRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddServiceProviderRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requestHeaders)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest requests = 2;
inline int BulkAddServiceProviderRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddServiceProviderRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddServiceProviderRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* BulkAddServiceProviderRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >*
BulkAddServiceProviderRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& BulkAddServiceProviderRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& BulkAddServiceProviderRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* BulkAddServiceProviderRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* BulkAddServiceProviderRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >&
BulkAddServiceProviderRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddServiceProviderResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServiceProviderResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServiceProviderResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServiceProviderResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status)
  return _internal_status();
}
inline void AddServiceProviderResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status)
  return _internal_mutable_status();
}
inline void AddServiceProviderResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.status)
}

// int32 count = 2;
inline void AddServiceProviderResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.count)
  return _internal_count();
}
inline void AddServiceProviderResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServiceProviderResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.count)
}

// string recordId = 3;
inline void AddServiceProviderResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddServiceProviderResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
  return _internal_recordid();
}
inline void AddServiceProviderResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
}
inline std::string* AddServiceProviderResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddServiceProviderResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddServiceProviderResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
}
inline void AddServiceProviderResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
}
inline void AddServiceProviderResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
}
inline std::string* AddServiceProviderResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.recordId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
inline int AddServiceProviderResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServiceProviderResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServiceProviderResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServiceProviderResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServiceProviderResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddServiceProviderResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool BulkAddServiceProviderResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddServiceProviderResponse::has_status() const {
  return _internal_has_status();
}
inline void BulkAddServiceProviderResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceProviderResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceProviderResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status)
  return _internal_status();
}
inline void BulkAddServiceProviderResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddServiceProviderResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.status)
}

// int32 count = 2;
inline void BulkAddServiceProviderResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceProviderResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceProviderResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.count)
  return _internal_count();
}
inline void BulkAddServiceProviderResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddServiceProviderResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse responses = 3;
inline int BulkAddServiceProviderResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddServiceProviderResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddServiceProviderResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* BulkAddServiceProviderResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >*
BulkAddServiceProviderResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& BulkAddServiceProviderResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& BulkAddServiceProviderResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* BulkAddServiceProviderResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* BulkAddServiceProviderResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >&
BulkAddServiceProviderResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddServiceLocationRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServiceLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServiceLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServiceLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServiceLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceLocationRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServiceLocationRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.requestHeaders)
}

// int64 serviceProviderId = 2;
inline void AddServiceLocationRequest::clear_serviceproviderid() {
  serviceproviderid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceLocationRequest::_internal_serviceproviderid() const {
  return serviceproviderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceLocationRequest::serviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.serviceProviderId)
  return _internal_serviceproviderid();
}
inline void AddServiceLocationRequest::_internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serviceproviderid_ = value;
}
inline void AddServiceLocationRequest::set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceproviderid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.serviceProviderId)
}

// string geographyId = 3;
inline void AddServiceLocationRequest::clear_geographyid() {
  geographyid_.ClearToEmpty();
}
inline const std::string& AddServiceLocationRequest::geographyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
  return _internal_geographyid();
}
inline void AddServiceLocationRequest::set_geographyid(const std::string& value) {
  _internal_set_geographyid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
}
inline std::string* AddServiceLocationRequest::mutable_geographyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
  return _internal_mutable_geographyid();
}
inline const std::string& AddServiceLocationRequest::_internal_geographyid() const {
  return geographyid_.Get();
}
inline void AddServiceLocationRequest::_internal_set_geographyid(const std::string& value) {
  
  geographyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceLocationRequest::set_geographyid(std::string&& value) {
  
  geographyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
}
inline void AddServiceLocationRequest::set_geographyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
}
inline void AddServiceLocationRequest::set_geographyid(const char* value,
    size_t size) {
  
  geographyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
}
inline std::string* AddServiceLocationRequest::_internal_mutable_geographyid() {
  
  return geographyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceLocationRequest::release_geographyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
  return geographyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceLocationRequest::set_allocated_geographyid(std::string* geographyid) {
  if (geographyid != nullptr) {
    
  } else {
    
  }
  geographyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geographyId)
}

// string district = 4;
inline void AddServiceLocationRequest::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& AddServiceLocationRequest::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
  return _internal_district();
}
inline void AddServiceLocationRequest::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
}
inline std::string* AddServiceLocationRequest::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
  return _internal_mutable_district();
}
inline const std::string& AddServiceLocationRequest::_internal_district() const {
  return district_.Get();
}
inline void AddServiceLocationRequest::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceLocationRequest::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
}
inline void AddServiceLocationRequest::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
}
inline void AddServiceLocationRequest::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
}
inline std::string* AddServiceLocationRequest::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceLocationRequest::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceLocationRequest::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.district)
}

// string state = 5;
inline void AddServiceLocationRequest::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& AddServiceLocationRequest::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
  return _internal_state();
}
inline void AddServiceLocationRequest::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
}
inline std::string* AddServiceLocationRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
  return _internal_mutable_state();
}
inline const std::string& AddServiceLocationRequest::_internal_state() const {
  return state_.Get();
}
inline void AddServiceLocationRequest::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceLocationRequest::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
}
inline void AddServiceLocationRequest::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
}
inline void AddServiceLocationRequest::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
}
inline std::string* AddServiceLocationRequest::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceLocationRequest::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceLocationRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.state)
}

// string geoHash = 6;
inline void AddServiceLocationRequest::clear_geohash() {
  geohash_.ClearToEmpty();
}
inline const std::string& AddServiceLocationRequest::geohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
  return _internal_geohash();
}
inline void AddServiceLocationRequest::set_geohash(const std::string& value) {
  _internal_set_geohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
}
inline std::string* AddServiceLocationRequest::mutable_geohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
  return _internal_mutable_geohash();
}
inline const std::string& AddServiceLocationRequest::_internal_geohash() const {
  return geohash_.Get();
}
inline void AddServiceLocationRequest::_internal_set_geohash(const std::string& value) {
  
  geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceLocationRequest::set_geohash(std::string&& value) {
  
  geohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
}
inline void AddServiceLocationRequest::set_geohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
}
inline void AddServiceLocationRequest::set_geohash(const char* value,
    size_t size) {
  
  geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
}
inline std::string* AddServiceLocationRequest::_internal_mutable_geohash() {
  
  return geohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceLocationRequest::release_geohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
  return geohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceLocationRequest::set_allocated_geohash(std::string* geohash) {
  if (geohash != nullptr) {
    
  } else {
    
  }
  geohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.geoHash)
}

// double latitude = 7;
inline void AddServiceLocationRequest::clear_latitude() {
  latitude_ = 0;
}
inline double AddServiceLocationRequest::_internal_latitude() const {
  return latitude_;
}
inline double AddServiceLocationRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.latitude)
  return _internal_latitude();
}
inline void AddServiceLocationRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void AddServiceLocationRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.latitude)
}

// double longitude = 8;
inline void AddServiceLocationRequest::clear_longitude() {
  longitude_ = 0;
}
inline double AddServiceLocationRequest::_internal_longitude() const {
  return longitude_;
}
inline double AddServiceLocationRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.longitude)
  return _internal_longitude();
}
inline void AddServiceLocationRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void AddServiceLocationRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest.longitude)
}

// -------------------------------------------------------------------

// BulkAddServiceLocationRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool BulkAddServiceLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddServiceLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void BulkAddServiceLocationRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddServiceLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceLocationRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddServiceLocationRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requestHeaders)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest requests = 2;
inline int BulkAddServiceLocationRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddServiceLocationRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddServiceLocationRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* BulkAddServiceLocationRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >*
BulkAddServiceLocationRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& BulkAddServiceLocationRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& BulkAddServiceLocationRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* BulkAddServiceLocationRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* BulkAddServiceLocationRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >&
BulkAddServiceLocationRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddServiceLocationResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServiceLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServiceLocationResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServiceLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceLocationResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status)
  return _internal_status();
}
inline void AddServiceLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceLocationResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status)
  return _internal_mutable_status();
}
inline void AddServiceLocationResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.status)
}

// int32 count = 2;
inline void AddServiceLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.count)
  return _internal_count();
}
inline void AddServiceLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServiceLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.count)
}

// string recordId = 3;
inline void AddServiceLocationResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddServiceLocationResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
  return _internal_recordid();
}
inline void AddServiceLocationResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
}
inline std::string* AddServiceLocationResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddServiceLocationResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddServiceLocationResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceLocationResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
}
inline void AddServiceLocationResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
}
inline void AddServiceLocationResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
}
inline std::string* AddServiceLocationResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceLocationResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceLocationResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.recordId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
inline int AddServiceLocationResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServiceLocationResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServiceLocationResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceLocationResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServiceLocationResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceLocationResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceLocationResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceLocationResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceLocationResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServiceLocationResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddServiceLocationResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool BulkAddServiceLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddServiceLocationResponse::has_status() const {
  return _internal_has_status();
}
inline void BulkAddServiceLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceLocationResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status)
  return _internal_status();
}
inline void BulkAddServiceLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceLocationResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddServiceLocationResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.status)
}

// int32 count = 2;
inline void BulkAddServiceLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.count)
  return _internal_count();
}
inline void BulkAddServiceLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddServiceLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse responses = 3;
inline int BulkAddServiceLocationResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddServiceLocationResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddServiceLocationResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* BulkAddServiceLocationResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >*
BulkAddServiceLocationResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& BulkAddServiceLocationResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& BulkAddServiceLocationResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* BulkAddServiceLocationResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* BulkAddServiceLocationResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >&
BulkAddServiceLocationResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddServicesRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServicesRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServicesRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServicesRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServicesRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServicesRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServicesRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServicesRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServicesRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServicesRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServicesRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServicesRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.requestHeaders)
}

// string serviceName = 2;
inline void AddServicesRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& AddServicesRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
  return _internal_servicename();
}
inline void AddServicesRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
}
inline std::string* AddServicesRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& AddServicesRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void AddServicesRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServicesRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
}
inline void AddServicesRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
}
inline void AddServicesRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
}
inline std::string* AddServicesRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServicesRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServicesRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceName)
}

// string serviceType = 3;
inline void AddServicesRequest::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& AddServicesRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
  return _internal_servicetype();
}
inline void AddServicesRequest::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
}
inline std::string* AddServicesRequest::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& AddServicesRequest::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void AddServicesRequest::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServicesRequest::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
}
inline void AddServicesRequest::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
}
inline void AddServicesRequest::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
}
inline std::string* AddServicesRequest::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServicesRequest::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServicesRequest::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.serviceType)
}

// string imageUrl = 4;
inline void AddServicesRequest::clear_imageurl() {
  imageurl_.ClearToEmpty();
}
inline const std::string& AddServicesRequest::imageurl() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
  return _internal_imageurl();
}
inline void AddServicesRequest::set_imageurl(const std::string& value) {
  _internal_set_imageurl(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
}
inline std::string* AddServicesRequest::mutable_imageurl() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
  return _internal_mutable_imageurl();
}
inline const std::string& AddServicesRequest::_internal_imageurl() const {
  return imageurl_.Get();
}
inline void AddServicesRequest::_internal_set_imageurl(const std::string& value) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServicesRequest::set_imageurl(std::string&& value) {
  
  imageurl_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
}
inline void AddServicesRequest::set_imageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
}
inline void AddServicesRequest::set_imageurl(const char* value,
    size_t size) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
}
inline std::string* AddServicesRequest::_internal_mutable_imageurl() {
  
  return imageurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServicesRequest::release_imageurl() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
  return imageurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServicesRequest::set_allocated_imageurl(std::string* imageurl) {
  if (imageurl != nullptr) {
    
  } else {
    
  }
  imageurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.imageUrl)
}

// string translationKey = 5;
inline void AddServicesRequest::clear_translationkey() {
  translationkey_.ClearToEmpty();
}
inline const std::string& AddServicesRequest::translationkey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
  return _internal_translationkey();
}
inline void AddServicesRequest::set_translationkey(const std::string& value) {
  _internal_set_translationkey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
}
inline std::string* AddServicesRequest::mutable_translationkey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
  return _internal_mutable_translationkey();
}
inline const std::string& AddServicesRequest::_internal_translationkey() const {
  return translationkey_.Get();
}
inline void AddServicesRequest::_internal_set_translationkey(const std::string& value) {
  
  translationkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServicesRequest::set_translationkey(std::string&& value) {
  
  translationkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
}
inline void AddServicesRequest::set_translationkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  translationkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
}
inline void AddServicesRequest::set_translationkey(const char* value,
    size_t size) {
  
  translationkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
}
inline std::string* AddServicesRequest::_internal_mutable_translationkey() {
  
  return translationkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServicesRequest::release_translationkey() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
  return translationkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServicesRequest::set_allocated_translationkey(std::string* translationkey) {
  if (translationkey != nullptr) {
    
  } else {
    
  }
  translationkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), translationkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesRequest.translationKey)
}

// -------------------------------------------------------------------

// BulkAddServicesRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool BulkAddServicesRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddServicesRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void BulkAddServicesRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServicesRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServicesRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddServicesRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServicesRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServicesRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServicesRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServicesRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddServicesRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requestHeaders)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServicesRequest requests = 2;
inline int BulkAddServicesRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddServicesRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddServicesRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* BulkAddServicesRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >*
BulkAddServicesRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& BulkAddServicesRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& BulkAddServicesRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* BulkAddServicesRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* BulkAddServicesRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >&
BulkAddServicesRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddServicesResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServicesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServicesResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServicesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServicesResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServicesResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesResponse.status)
  return _internal_status();
}
inline void AddServicesResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServicesResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServicesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServicesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServicesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesResponse.status)
  return _internal_mutable_status();
}
inline void AddServicesResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesResponse.status)
}

// int32 count = 2;
inline void AddServicesResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServicesResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServicesResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesResponse.count)
  return _internal_count();
}
inline void AddServicesResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServicesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesResponse.count)
}

// string recordId = 3;
inline void AddServicesResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddServicesResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
  return _internal_recordid();
}
inline void AddServicesResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
}
inline std::string* AddServicesResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddServicesResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddServicesResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServicesResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
}
inline void AddServicesResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
}
inline void AddServicesResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
}
inline std::string* AddServicesResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServicesResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServicesResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServicesResponse.recordId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
inline int AddServicesResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServicesResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServicesResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServicesResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServicesResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServicesResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServicesResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServicesResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServicesResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServicesResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServicesResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddServicesResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool BulkAddServicesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddServicesResponse::has_status() const {
  return _internal_has_status();
}
inline void BulkAddServicesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServicesResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServicesResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status)
  return _internal_status();
}
inline void BulkAddServicesResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServicesResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServicesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServicesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServicesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddServicesResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.status)
}

// int32 count = 2;
inline void BulkAddServicesResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServicesResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServicesResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.count)
  return _internal_count();
}
inline void BulkAddServicesResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddServicesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServicesResponse responses = 3;
inline int BulkAddServicesResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddServicesResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddServicesResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* BulkAddServicesResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >*
BulkAddServicesResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& BulkAddServicesResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& BulkAddServicesResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* BulkAddServicesResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* BulkAddServicesResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >&
BulkAddServicesResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddServiceProviderMappingRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServiceProviderMappingRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServiceProviderMappingRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServiceProviderMappingRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderMappingRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderMappingRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServiceProviderMappingRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderMappingRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderMappingRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderMappingRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderMappingRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServiceProviderMappingRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.requestHeaders)
}

// int64 serviceId = 2;
inline void AddServiceProviderMappingRequest::clear_serviceid() {
  serviceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::serviceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.serviceId)
  return _internal_serviceid();
}
inline void AddServiceProviderMappingRequest::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serviceid_ = value;
}
inline void AddServiceProviderMappingRequest::set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.serviceId)
}

// int64 serviceProviderId = 3;
inline void AddServiceProviderMappingRequest::clear_serviceproviderid() {
  serviceproviderid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::_internal_serviceproviderid() const {
  return serviceproviderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::serviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.serviceProviderId)
  return _internal_serviceproviderid();
}
inline void AddServiceProviderMappingRequest::_internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serviceproviderid_ = value;
}
inline void AddServiceProviderMappingRequest::set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceproviderid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.serviceProviderId)
}

// int64 machineCount = 4;
inline void AddServiceProviderMappingRequest::clear_machinecount() {
  machinecount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::_internal_machinecount() const {
  return machinecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceProviderMappingRequest::machinecount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.machineCount)
  return _internal_machinecount();
}
inline void AddServiceProviderMappingRequest::_internal_set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machinecount_ = value;
}
inline void AddServiceProviderMappingRequest::set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machinecount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.machineCount)
}

// string costPerAcre = 5;
inline void AddServiceProviderMappingRequest::clear_costperacre() {
  costperacre_.ClearToEmpty();
}
inline const std::string& AddServiceProviderMappingRequest::costperacre() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
  return _internal_costperacre();
}
inline void AddServiceProviderMappingRequest::set_costperacre(const std::string& value) {
  _internal_set_costperacre(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
}
inline std::string* AddServiceProviderMappingRequest::mutable_costperacre() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
  return _internal_mutable_costperacre();
}
inline const std::string& AddServiceProviderMappingRequest::_internal_costperacre() const {
  return costperacre_.Get();
}
inline void AddServiceProviderMappingRequest::_internal_set_costperacre(const std::string& value) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderMappingRequest::set_costperacre(std::string&& value) {
  
  costperacre_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
}
inline void AddServiceProviderMappingRequest::set_costperacre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
}
inline void AddServiceProviderMappingRequest::set_costperacre(const char* value,
    size_t size) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
}
inline std::string* AddServiceProviderMappingRequest::_internal_mutable_costperacre() {
  
  return costperacre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderMappingRequest::release_costperacre() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
  return costperacre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderMappingRequest::set_allocated_costperacre(std::string* costperacre) {
  if (costperacre != nullptr) {
    
  } else {
    
  }
  costperacre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), costperacre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest.costPerAcre)
}

// -------------------------------------------------------------------

// BulkAddServiceProviderMappingRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool BulkAddServiceProviderMappingRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddServiceProviderMappingRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void BulkAddServiceProviderMappingRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceProviderMappingRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceProviderMappingRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddServiceProviderMappingRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderMappingRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderMappingRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderMappingRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceProviderMappingRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddServiceProviderMappingRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requestHeaders)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest requests = 2;
inline int BulkAddServiceProviderMappingRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddServiceProviderMappingRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddServiceProviderMappingRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* BulkAddServiceProviderMappingRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >*
BulkAddServiceProviderMappingRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& BulkAddServiceProviderMappingRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& BulkAddServiceProviderMappingRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* BulkAddServiceProviderMappingRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* BulkAddServiceProviderMappingRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >&
BulkAddServiceProviderMappingRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddServiceProviderMappingResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServiceProviderMappingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServiceProviderMappingResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServiceProviderMappingResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderMappingResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderMappingResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status)
  return _internal_status();
}
inline void AddServiceProviderMappingResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderMappingResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderMappingResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderMappingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderMappingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status)
  return _internal_mutable_status();
}
inline void AddServiceProviderMappingResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.status)
}

// int32 count = 2;
inline void AddServiceProviderMappingResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderMappingResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderMappingResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.count)
  return _internal_count();
}
inline void AddServiceProviderMappingResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServiceProviderMappingResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.count)
}

// string recordId = 3;
inline void AddServiceProviderMappingResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddServiceProviderMappingResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
  return _internal_recordid();
}
inline void AddServiceProviderMappingResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
}
inline std::string* AddServiceProviderMappingResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddServiceProviderMappingResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddServiceProviderMappingResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderMappingResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
}
inline void AddServiceProviderMappingResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
}
inline void AddServiceProviderMappingResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
}
inline std::string* AddServiceProviderMappingResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderMappingResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderMappingResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.recordId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
inline int AddServiceProviderMappingResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServiceProviderMappingResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServiceProviderMappingResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderMappingResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServiceProviderMappingResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderMappingResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderMappingResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderMappingResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderMappingResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServiceProviderMappingResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddServiceProviderMappingResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool BulkAddServiceProviderMappingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddServiceProviderMappingResponse::has_status() const {
  return _internal_has_status();
}
inline void BulkAddServiceProviderMappingResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceProviderMappingResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceProviderMappingResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status)
  return _internal_status();
}
inline void BulkAddServiceProviderMappingResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderMappingResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderMappingResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderMappingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceProviderMappingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddServiceProviderMappingResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.status)
}

// int32 count = 2;
inline void BulkAddServiceProviderMappingResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceProviderMappingResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceProviderMappingResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.count)
  return _internal_count();
}
inline void BulkAddServiceProviderMappingResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddServiceProviderMappingResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse responses = 3;
inline int BulkAddServiceProviderMappingResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddServiceProviderMappingResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddServiceProviderMappingResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* BulkAddServiceProviderMappingResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >*
BulkAddServiceProviderMappingResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& BulkAddServiceProviderMappingResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& BulkAddServiceProviderMappingResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* BulkAddServiceProviderMappingResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* BulkAddServiceProviderMappingResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >&
BulkAddServiceProviderMappingResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddServiceConfigRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServiceConfigRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServiceConfigRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServiceConfigRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceConfigRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceConfigRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServiceConfigRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceConfigRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceConfigRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceConfigRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceConfigRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServiceConfigRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.requestHeaders)
}

// string serviceType = 2;
inline void AddServiceConfigRequest::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& AddServiceConfigRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
  return _internal_servicetype();
}
inline void AddServiceConfigRequest::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
}
inline std::string* AddServiceConfigRequest::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& AddServiceConfigRequest::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void AddServiceConfigRequest::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceConfigRequest::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
}
inline void AddServiceConfigRequest::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
}
inline void AddServiceConfigRequest::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
}
inline std::string* AddServiceConfigRequest::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceConfigRequest::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceConfigRequest::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceType)
}

// int64 cropId = 3;
inline void AddServiceConfigRequest::clear_cropid() {
  cropid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::_internal_cropid() const {
  return cropid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::cropid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.cropId)
  return _internal_cropid();
}
inline void AddServiceConfigRequest::_internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cropid_ = value;
}
inline void AddServiceConfigRequest::set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cropid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.cropId)
}

// string regionName = 4;
inline void AddServiceConfigRequest::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& AddServiceConfigRequest::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
  return _internal_regionname();
}
inline void AddServiceConfigRequest::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
}
inline std::string* AddServiceConfigRequest::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& AddServiceConfigRequest::_internal_regionname() const {
  return regionname_.Get();
}
inline void AddServiceConfigRequest::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceConfigRequest::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
}
inline void AddServiceConfigRequest::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
}
inline void AddServiceConfigRequest::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
}
inline std::string* AddServiceConfigRequest::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceConfigRequest::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceConfigRequest::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.regionName)
}

// int64 section = 5;
inline void AddServiceConfigRequest::clear_section() {
  section_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::section() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.section)
  return _internal_section();
}
inline void AddServiceConfigRequest::_internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  section_ = value;
}
inline void AddServiceConfigRequest::set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.section)
}

// int64 serviceRank = 6;
inline void AddServiceConfigRequest::clear_servicerank() {
  servicerank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::_internal_servicerank() const {
  return servicerank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::servicerank() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceRank)
  return _internal_servicerank();
}
inline void AddServiceConfigRequest::_internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servicerank_ = value;
}
inline void AddServiceConfigRequest::set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servicerank(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.serviceRank)
}

// int64 validFrom = 7;
inline void AddServiceConfigRequest::clear_validfrom() {
  validfrom_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::_internal_validfrom() const {
  return validfrom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::validfrom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.validFrom)
  return _internal_validfrom();
}
inline void AddServiceConfigRequest::_internal_set_validfrom(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  validfrom_ = value;
}
inline void AddServiceConfigRequest::set_validfrom(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_validfrom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.validFrom)
}

// int64 validTill = 8;
inline void AddServiceConfigRequest::clear_validtill() {
  validtill_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::_internal_validtill() const {
  return validtill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddServiceConfigRequest::validtill() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.validTill)
  return _internal_validtill();
}
inline void AddServiceConfigRequest::_internal_set_validtill(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  validtill_ = value;
}
inline void AddServiceConfigRequest::set_validtill(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_validtill(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest.validTill)
}

// -------------------------------------------------------------------

// BulkAddServiceConfigRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool BulkAddServiceConfigRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddServiceConfigRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void BulkAddServiceConfigRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceConfigRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& BulkAddServiceConfigRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddServiceConfigRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceConfigRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceConfigRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceConfigRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* BulkAddServiceConfigRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddServiceConfigRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requestHeaders)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest requests = 2;
inline int BulkAddServiceConfigRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddServiceConfigRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddServiceConfigRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* BulkAddServiceConfigRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >*
BulkAddServiceConfigRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& BulkAddServiceConfigRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& BulkAddServiceConfigRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* BulkAddServiceConfigRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* BulkAddServiceConfigRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >&
BulkAddServiceConfigRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddServiceConfigResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServiceConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServiceConfigResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServiceConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceConfigResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status)
  return _internal_status();
}
inline void AddServiceConfigResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceConfigResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status)
  return _internal_mutable_status();
}
inline void AddServiceConfigResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.status)
}

// int32 count = 2;
inline void AddServiceConfigResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceConfigResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceConfigResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.count)
  return _internal_count();
}
inline void AddServiceConfigResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServiceConfigResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.count)
}

// string recordId = 3;
inline void AddServiceConfigResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddServiceConfigResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
  return _internal_recordid();
}
inline void AddServiceConfigResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
}
inline std::string* AddServiceConfigResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddServiceConfigResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddServiceConfigResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceConfigResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
}
inline void AddServiceConfigResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
}
inline void AddServiceConfigResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
}
inline std::string* AddServiceConfigResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceConfigResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceConfigResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.recordId)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 4;
inline int AddServiceConfigResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServiceConfigResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServiceConfigResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceConfigResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServiceConfigResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceConfigResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceConfigResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceConfigResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceConfigResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServiceConfigResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddServiceConfigResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool BulkAddServiceConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddServiceConfigResponse::has_status() const {
  return _internal_has_status();
}
inline void BulkAddServiceConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceConfigResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& BulkAddServiceConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status)
  return _internal_status();
}
inline void BulkAddServiceConfigResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceConfigResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* BulkAddServiceConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddServiceConfigResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.status)
}

// int32 count = 2;
inline void BulkAddServiceConfigResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceConfigResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddServiceConfigResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.count)
  return _internal_count();
}
inline void BulkAddServiceConfigResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddServiceConfigResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse responses = 3;
inline int BulkAddServiceConfigResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddServiceConfigResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddServiceConfigResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* BulkAddServiceConfigResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >*
BulkAddServiceConfigResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& BulkAddServiceConfigResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& BulkAddServiceConfigResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* BulkAddServiceConfigResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* BulkAddServiceConfigResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >&
BulkAddServiceConfigResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// GetServiceProviderRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceProviderRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceProviderRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceProviderRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceProviderRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceProviderRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceProviderRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceProviderRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceProviderRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceProviderRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceProviderRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.isStaleAllowed)
}

// int64 page = 6;
inline void GetServiceProviderRequest::clear_page() {
  page_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::page() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.page)
  return _internal_page();
}
inline void GetServiceProviderRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  page_ = value;
}
inline void GetServiceProviderRequest::set_page(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.page)
}

// int64 offset = 7;
inline void GetServiceProviderRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::offset() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.offset)
  return _internal_offset();
}
inline void GetServiceProviderRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetServiceProviderRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.offset)
}

// repeated int64 cropId = 8;
inline int GetServiceProviderRequest::_internal_cropid_size() const {
  return cropid_.size();
}
inline int GetServiceProviderRequest::cropid_size() const {
  return _internal_cropid_size();
}
inline void GetServiceProviderRequest::clear_cropid() {
  cropid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::_internal_cropid(int index) const {
  return cropid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderRequest::cropid(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.cropId)
  return _internal_cropid(index);
}
inline void GetServiceProviderRequest::set_cropid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  cropid_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.cropId)
}
inline void GetServiceProviderRequest::_internal_add_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  cropid_.Add(value);
}
inline void GetServiceProviderRequest::add_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_cropid(value);
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.cropId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetServiceProviderRequest::_internal_cropid() const {
  return cropid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetServiceProviderRequest::cropid() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.cropId)
  return _internal_cropid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetServiceProviderRequest::_internal_mutable_cropid() {
  return &cropid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetServiceProviderRequest::mutable_cropid() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.cropId)
  return _internal_mutable_cropid();
}

// double latitude = 9;
inline void GetServiceProviderRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetServiceProviderRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetServiceProviderRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.latitude)
  return _internal_latitude();
}
inline void GetServiceProviderRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetServiceProviderRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.latitude)
}

// double longitude = 10;
inline void GetServiceProviderRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetServiceProviderRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetServiceProviderRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.longitude)
  return _internal_longitude();
}
inline void GetServiceProviderRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetServiceProviderRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.longitude)
}

// string serviceName = 11;
inline void GetServiceProviderRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& GetServiceProviderRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
  return _internal_servicename();
}
inline void GetServiceProviderRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
}
inline std::string* GetServiceProviderRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& GetServiceProviderRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void GetServiceProviderRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
}
inline void GetServiceProviderRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
}
inline void GetServiceProviderRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
}
inline std::string* GetServiceProviderRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest.serviceName)
}

// -------------------------------------------------------------------

// GetServiceProviderResponseRecord

// -------------------------------------------------------------------

// GetServiceProviderResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceProviderResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceProviderResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceProviderResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status)
  return _internal_status();
}
inline void GetServiceProviderResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceProviderResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.status)
}

// int32 count = 2;
inline void GetServiceProviderResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.count)
  return _internal_count();
}
inline void GetServiceProviderResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceProviderResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceProviderResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceProviderResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceProviderResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceProviderResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceProviderResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.ServiceProviderInfo serviceProviderInfo = 5;
inline int GetServiceProviderResponse::_internal_serviceproviderinfo_size() const {
  return serviceproviderinfo_.size();
}
inline int GetServiceProviderResponse::serviceproviderinfo_size() const {
  return _internal_serviceproviderinfo_size();
}
inline void GetServiceProviderResponse::clear_serviceproviderinfo() {
  serviceproviderinfo_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* GetServiceProviderResponse::mutable_serviceproviderinfo(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo)
  return serviceproviderinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >*
GetServiceProviderResponse::mutable_serviceproviderinfo() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo)
  return &serviceproviderinfo_;
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo& GetServiceProviderResponse::_internal_serviceproviderinfo(int index) const {
  return serviceproviderinfo_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo& GetServiceProviderResponse::serviceproviderinfo(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo)
  return _internal_serviceproviderinfo(index);
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* GetServiceProviderResponse::_internal_add_serviceproviderinfo() {
  return serviceproviderinfo_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo* GetServiceProviderResponse::add_serviceproviderinfo() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo)
  return _internal_add_serviceproviderinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceProviderInfo >&
GetServiceProviderResponse::serviceproviderinfo() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse.serviceProviderInfo)
  return serviceproviderinfo_;
}

// -------------------------------------------------------------------

// ServiceProviderInfo

// string serviceProviderName = 1;
inline void ServiceProviderInfo::clear_serviceprovidername() {
  serviceprovidername_.ClearToEmpty();
}
inline const std::string& ServiceProviderInfo::serviceprovidername() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
  return _internal_serviceprovidername();
}
inline void ServiceProviderInfo::set_serviceprovidername(const std::string& value) {
  _internal_set_serviceprovidername(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
}
inline std::string* ServiceProviderInfo::mutable_serviceprovidername() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
  return _internal_mutable_serviceprovidername();
}
inline const std::string& ServiceProviderInfo::_internal_serviceprovidername() const {
  return serviceprovidername_.Get();
}
inline void ServiceProviderInfo::_internal_set_serviceprovidername(const std::string& value) {
  
  serviceprovidername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceProviderInfo::set_serviceprovidername(std::string&& value) {
  
  serviceprovidername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
}
inline void ServiceProviderInfo::set_serviceprovidername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceprovidername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
}
inline void ServiceProviderInfo::set_serviceprovidername(const char* value,
    size_t size) {
  
  serviceprovidername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
}
inline std::string* ServiceProviderInfo::_internal_mutable_serviceprovidername() {
  
  return serviceprovidername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceProviderInfo::release_serviceprovidername() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
  return serviceprovidername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceProviderInfo::set_allocated_serviceprovidername(std::string* serviceprovidername) {
  if (serviceprovidername != nullptr) {
    
  } else {
    
  }
  serviceprovidername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceprovidername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderName)
}

// string serviceProviderContactDetails = 2;
inline void ServiceProviderInfo::clear_serviceprovidercontactdetails() {
  serviceprovidercontactdetails_.ClearToEmpty();
}
inline const std::string& ServiceProviderInfo::serviceprovidercontactdetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
  return _internal_serviceprovidercontactdetails();
}
inline void ServiceProviderInfo::set_serviceprovidercontactdetails(const std::string& value) {
  _internal_set_serviceprovidercontactdetails(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
}
inline std::string* ServiceProviderInfo::mutable_serviceprovidercontactdetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
  return _internal_mutable_serviceprovidercontactdetails();
}
inline const std::string& ServiceProviderInfo::_internal_serviceprovidercontactdetails() const {
  return serviceprovidercontactdetails_.Get();
}
inline void ServiceProviderInfo::_internal_set_serviceprovidercontactdetails(const std::string& value) {
  
  serviceprovidercontactdetails_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceProviderInfo::set_serviceprovidercontactdetails(std::string&& value) {
  
  serviceprovidercontactdetails_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
}
inline void ServiceProviderInfo::set_serviceprovidercontactdetails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceprovidercontactdetails_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
}
inline void ServiceProviderInfo::set_serviceprovidercontactdetails(const char* value,
    size_t size) {
  
  serviceprovidercontactdetails_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
}
inline std::string* ServiceProviderInfo::_internal_mutable_serviceprovidercontactdetails() {
  
  return serviceprovidercontactdetails_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceProviderInfo::release_serviceprovidercontactdetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
  return serviceprovidercontactdetails_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceProviderInfo::set_allocated_serviceprovidercontactdetails(std::string* serviceprovidercontactdetails) {
  if (serviceprovidercontactdetails != nullptr) {
    
  } else {
    
  }
  serviceprovidercontactdetails_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceprovidercontactdetails,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderContactDetails)
}

// string serviceProviderAddress = 3;
inline void ServiceProviderInfo::clear_serviceprovideraddress() {
  serviceprovideraddress_.ClearToEmpty();
}
inline const std::string& ServiceProviderInfo::serviceprovideraddress() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
  return _internal_serviceprovideraddress();
}
inline void ServiceProviderInfo::set_serviceprovideraddress(const std::string& value) {
  _internal_set_serviceprovideraddress(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
}
inline std::string* ServiceProviderInfo::mutable_serviceprovideraddress() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
  return _internal_mutable_serviceprovideraddress();
}
inline const std::string& ServiceProviderInfo::_internal_serviceprovideraddress() const {
  return serviceprovideraddress_.Get();
}
inline void ServiceProviderInfo::_internal_set_serviceprovideraddress(const std::string& value) {
  
  serviceprovideraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceProviderInfo::set_serviceprovideraddress(std::string&& value) {
  
  serviceprovideraddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
}
inline void ServiceProviderInfo::set_serviceprovideraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceprovideraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
}
inline void ServiceProviderInfo::set_serviceprovideraddress(const char* value,
    size_t size) {
  
  serviceprovideraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
}
inline std::string* ServiceProviderInfo::_internal_mutable_serviceprovideraddress() {
  
  return serviceprovideraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceProviderInfo::release_serviceprovideraddress() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
  return serviceprovideraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceProviderInfo::set_allocated_serviceprovideraddress(std::string* serviceprovideraddress) {
  if (serviceprovideraddress != nullptr) {
    
  } else {
    
  }
  serviceprovideraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceprovideraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderAddress)
}

// string costPerAcre = 4;
inline void ServiceProviderInfo::clear_costperacre() {
  costperacre_.ClearToEmpty();
}
inline const std::string& ServiceProviderInfo::costperacre() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
  return _internal_costperacre();
}
inline void ServiceProviderInfo::set_costperacre(const std::string& value) {
  _internal_set_costperacre(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
}
inline std::string* ServiceProviderInfo::mutable_costperacre() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
  return _internal_mutable_costperacre();
}
inline const std::string& ServiceProviderInfo::_internal_costperacre() const {
  return costperacre_.Get();
}
inline void ServiceProviderInfo::_internal_set_costperacre(const std::string& value) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceProviderInfo::set_costperacre(std::string&& value) {
  
  costperacre_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
}
inline void ServiceProviderInfo::set_costperacre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
}
inline void ServiceProviderInfo::set_costperacre(const char* value,
    size_t size) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
}
inline std::string* ServiceProviderInfo::_internal_mutable_costperacre() {
  
  return costperacre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceProviderInfo::release_costperacre() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
  return costperacre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceProviderInfo::set_allocated_costperacre(std::string* costperacre) {
  if (costperacre != nullptr) {
    
  } else {
    
  }
  costperacre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), costperacre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.costPerAcre)
}

// double distance = 5;
inline void ServiceProviderInfo::clear_distance() {
  distance_ = 0;
}
inline double ServiceProviderInfo::_internal_distance() const {
  return distance_;
}
inline double ServiceProviderInfo::distance() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.distance)
  return _internal_distance();
}
inline void ServiceProviderInfo::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void ServiceProviderInfo::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.distance)
}

// string serviceProviderWhatsappNumber = 6;
inline void ServiceProviderInfo::clear_serviceproviderwhatsappnumber() {
  serviceproviderwhatsappnumber_.ClearToEmpty();
}
inline const std::string& ServiceProviderInfo::serviceproviderwhatsappnumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
  return _internal_serviceproviderwhatsappnumber();
}
inline void ServiceProviderInfo::set_serviceproviderwhatsappnumber(const std::string& value) {
  _internal_set_serviceproviderwhatsappnumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
}
inline std::string* ServiceProviderInfo::mutable_serviceproviderwhatsappnumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
  return _internal_mutable_serviceproviderwhatsappnumber();
}
inline const std::string& ServiceProviderInfo::_internal_serviceproviderwhatsappnumber() const {
  return serviceproviderwhatsappnumber_.Get();
}
inline void ServiceProviderInfo::_internal_set_serviceproviderwhatsappnumber(const std::string& value) {
  
  serviceproviderwhatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceProviderInfo::set_serviceproviderwhatsappnumber(std::string&& value) {
  
  serviceproviderwhatsappnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
}
inline void ServiceProviderInfo::set_serviceproviderwhatsappnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceproviderwhatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
}
inline void ServiceProviderInfo::set_serviceproviderwhatsappnumber(const char* value,
    size_t size) {
  
  serviceproviderwhatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
}
inline std::string* ServiceProviderInfo::_internal_mutable_serviceproviderwhatsappnumber() {
  
  return serviceproviderwhatsappnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceProviderInfo::release_serviceproviderwhatsappnumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
  return serviceproviderwhatsappnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceProviderInfo::set_allocated_serviceproviderwhatsappnumber(std::string* serviceproviderwhatsappnumber) {
  if (serviceproviderwhatsappnumber != nullptr) {
    
  } else {
    
  }
  serviceproviderwhatsappnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceproviderwhatsappnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceProviderInfo.serviceProviderWhatsappNumber)
}

// -------------------------------------------------------------------

// AddServiceProviderFromExcelRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool AddServiceProviderFromExcelRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddServiceProviderFromExcelRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void AddServiceProviderFromExcelRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderFromExcelRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& AddServiceProviderFromExcelRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddServiceProviderFromExcelRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderFromExcelRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderFromExcelRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderFromExcelRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* AddServiceProviderFromExcelRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddServiceProviderFromExcelRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void AddServiceProviderFromExcelRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool AddServiceProviderFromExcelRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool AddServiceProviderFromExcelRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void AddServiceProviderFromExcelRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void AddServiceProviderFromExcelRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.isStaleAllowed)
}

// string csv = 6;
inline void AddServiceProviderFromExcelRequest::clear_csv() {
  csv_.ClearToEmpty();
}
inline const std::string& AddServiceProviderFromExcelRequest::csv() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
  return _internal_csv();
}
inline void AddServiceProviderFromExcelRequest::set_csv(const std::string& value) {
  _internal_set_csv(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
}
inline std::string* AddServiceProviderFromExcelRequest::mutable_csv() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
  return _internal_mutable_csv();
}
inline const std::string& AddServiceProviderFromExcelRequest::_internal_csv() const {
  return csv_.Get();
}
inline void AddServiceProviderFromExcelRequest::_internal_set_csv(const std::string& value) {
  
  csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddServiceProviderFromExcelRequest::set_csv(std::string&& value) {
  
  csv_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
}
inline void AddServiceProviderFromExcelRequest::set_csv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
}
inline void AddServiceProviderFromExcelRequest::set_csv(const char* value,
    size_t size) {
  
  csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
}
inline std::string* AddServiceProviderFromExcelRequest::_internal_mutable_csv() {
  
  return csv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddServiceProviderFromExcelRequest::release_csv() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
  return csv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddServiceProviderFromExcelRequest::set_allocated_csv(std::string* csv) {
  if (csv != nullptr) {
    
  } else {
    
  }
  csv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest.csv)
}

// -------------------------------------------------------------------

// AddServiceProviderFromExcelResponseRecord

// -------------------------------------------------------------------

// AddServiceProviderFromExcelResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool AddServiceProviderFromExcelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddServiceProviderFromExcelResponse::has_status() const {
  return _internal_has_status();
}
inline void AddServiceProviderFromExcelResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderFromExcelResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& AddServiceProviderFromExcelResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status)
  return _internal_status();
}
inline void AddServiceProviderFromExcelResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderFromExcelResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderFromExcelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderFromExcelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* AddServiceProviderFromExcelResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status)
  return _internal_mutable_status();
}
inline void AddServiceProviderFromExcelResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.status)
}

// int32 count = 2;
inline void AddServiceProviderFromExcelResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderFromExcelResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddServiceProviderFromExcelResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.count)
  return _internal_count();
}
inline void AddServiceProviderFromExcelResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddServiceProviderFromExcelResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int AddServiceProviderFromExcelResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddServiceProviderFromExcelResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void AddServiceProviderFromExcelResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderFromExcelResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
AddServiceProviderFromExcelResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderFromExcelResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& AddServiceProviderFromExcelResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderFromExcelResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* AddServiceProviderFromExcelResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
AddServiceProviderFromExcelResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest addServiceProviderRequest = 5;
inline int AddServiceProviderFromExcelResponse::_internal_addserviceproviderrequest_size() const {
  return addserviceproviderrequest_.size();
}
inline int AddServiceProviderFromExcelResponse::addserviceproviderrequest_size() const {
  return _internal_addserviceproviderrequest_size();
}
inline void AddServiceProviderFromExcelResponse::clear_addserviceproviderrequest() {
  addserviceproviderrequest_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* AddServiceProviderFromExcelResponse::mutable_addserviceproviderrequest(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest)
  return addserviceproviderrequest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >*
AddServiceProviderFromExcelResponse::mutable_addserviceproviderrequest() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest)
  return &addserviceproviderrequest_;
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& AddServiceProviderFromExcelResponse::_internal_addserviceproviderrequest(int index) const {
  return addserviceproviderrequest_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& AddServiceProviderFromExcelResponse::addserviceproviderrequest(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest)
  return _internal_addserviceproviderrequest(index);
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* AddServiceProviderFromExcelResponse::_internal_add_addserviceproviderrequest() {
  return addserviceproviderrequest_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* AddServiceProviderFromExcelResponse::add_addserviceproviderrequest() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest)
  return _internal_add_addserviceproviderrequest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >&
AddServiceProviderFromExcelResponse::addserviceproviderrequest() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse.addServiceProviderRequest)
  return addserviceproviderrequest_;
}

// -------------------------------------------------------------------

// GetSDTVOnLatLongRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetSDTVOnLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetSDTVOnLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetSDTVOnLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetSDTVOnLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetSDTVOnLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetSDTVOnLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetSDTVOnLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetSDTVOnLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetSDTVOnLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetSDTVOnLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetSDTVOnLatLongRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetSDTVOnLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetSDTVOnLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetSDTVOnLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetSDTVOnLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetSDTVOnLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.isStaleAllowed)
}

// double latitude = 6;
inline void GetSDTVOnLatLongRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetSDTVOnLatLongRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetSDTVOnLatLongRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.latitude)
  return _internal_latitude();
}
inline void GetSDTVOnLatLongRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetSDTVOnLatLongRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.latitude)
}

// double longitude = 7;
inline void GetSDTVOnLatLongRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetSDTVOnLatLongRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetSDTVOnLatLongRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.longitude)
  return _internal_longitude();
}
inline void GetSDTVOnLatLongRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetSDTVOnLatLongRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest.longitude)
}

// -------------------------------------------------------------------

// GetSDTVOnLatLongResponseRecord

// -------------------------------------------------------------------

// GetSDTVOnLatLongResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetSDTVOnLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSDTVOnLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline void GetSDTVOnLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetSDTVOnLatLongResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetSDTVOnLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status)
  return _internal_status();
}
inline void GetSDTVOnLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetSDTVOnLatLongResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetSDTVOnLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetSDTVOnLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetSDTVOnLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status)
  return _internal_mutable_status();
}
inline void GetSDTVOnLatLongResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.status)
}

// int32 count = 2;
inline void GetSDTVOnLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSDTVOnLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSDTVOnLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.count)
  return _internal_count();
}
inline void GetSDTVOnLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetSDTVOnLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetSDTVOnLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetSDTVOnLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetSDTVOnLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetSDTVOnLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetSDTVOnLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetSDTVOnLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetSDTVOnLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetSDTVOnLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetSDTVOnLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetSDTVOnLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.attribs)
  return attribs_;
}

// int64 regionId = 5;
inline void GetSDTVOnLatLongResponse::clear_regionid() {
  regionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::_internal_regionid() const {
  return regionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::regionid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionId)
  return _internal_regionid();
}
inline void GetSDTVOnLatLongResponse::_internal_set_regionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  regionid_ = value;
}
inline void GetSDTVOnLatLongResponse::set_regionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_regionid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionId)
}

// int64 villageId = 6;
inline void GetSDTVOnLatLongResponse::clear_villageid() {
  villageid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::_internal_villageid() const {
  return villageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::villageid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageId)
  return _internal_villageid();
}
inline void GetSDTVOnLatLongResponse::_internal_set_villageid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  villageid_ = value;
}
inline void GetSDTVOnLatLongResponse::set_villageid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_villageid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageId)
}

// int64 tehsilId = 7;
inline void GetSDTVOnLatLongResponse::clear_tehsilid() {
  tehsilid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::_internal_tehsilid() const {
  return tehsilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::tehsilid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilId)
  return _internal_tehsilid();
}
inline void GetSDTVOnLatLongResponse::_internal_set_tehsilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tehsilid_ = value;
}
inline void GetSDTVOnLatLongResponse::set_tehsilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tehsilid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilId)
}

// int64 districtId = 8;
inline void GetSDTVOnLatLongResponse::clear_districtid() {
  districtid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::_internal_districtid() const {
  return districtid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::districtid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtId)
  return _internal_districtid();
}
inline void GetSDTVOnLatLongResponse::_internal_set_districtid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  districtid_ = value;
}
inline void GetSDTVOnLatLongResponse::set_districtid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_districtid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtId)
}

// int64 zoneId = 9;
inline void GetSDTVOnLatLongResponse::clear_zoneid() {
  zoneid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSDTVOnLatLongResponse::zoneid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneId)
  return _internal_zoneid();
}
inline void GetSDTVOnLatLongResponse::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  zoneid_ = value;
}
inline void GetSDTVOnLatLongResponse::set_zoneid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneId)
}

// string villageName = 10;
inline void GetSDTVOnLatLongResponse::clear_villagename() {
  villagename_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::villagename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
  return _internal_villagename();
}
inline void GetSDTVOnLatLongResponse::set_villagename(const std::string& value) {
  _internal_set_villagename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_villagename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
  return _internal_mutable_villagename();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_villagename() const {
  return villagename_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_villagename(const std::string& value) {
  
  villagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_villagename(std::string&& value) {
  
  villagename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
}
inline void GetSDTVOnLatLongResponse::set_villagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  villagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
}
inline void GetSDTVOnLatLongResponse::set_villagename(const char* value,
    size_t size) {
  
  villagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_villagename() {
  
  return villagename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_villagename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
  return villagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_villagename(std::string* villagename) {
  if (villagename != nullptr) {
    
  } else {
    
  }
  villagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), villagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageName)
}

// string tehsilName = 11;
inline void GetSDTVOnLatLongResponse::clear_tehsilname() {
  tehsilname_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::tehsilname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
  return _internal_tehsilname();
}
inline void GetSDTVOnLatLongResponse::set_tehsilname(const std::string& value) {
  _internal_set_tehsilname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_tehsilname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
  return _internal_mutable_tehsilname();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_tehsilname() const {
  return tehsilname_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_tehsilname(const std::string& value) {
  
  tehsilname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_tehsilname(std::string&& value) {
  
  tehsilname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
}
inline void GetSDTVOnLatLongResponse::set_tehsilname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsilname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
}
inline void GetSDTVOnLatLongResponse::set_tehsilname(const char* value,
    size_t size) {
  
  tehsilname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_tehsilname() {
  
  return tehsilname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_tehsilname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
  return tehsilname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_tehsilname(std::string* tehsilname) {
  if (tehsilname != nullptr) {
    
  } else {
    
  }
  tehsilname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsilname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilName)
}

// string districtName = 12;
inline void GetSDTVOnLatLongResponse::clear_districtname() {
  districtname_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::districtname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
  return _internal_districtname();
}
inline void GetSDTVOnLatLongResponse::set_districtname(const std::string& value) {
  _internal_set_districtname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_districtname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
  return _internal_mutable_districtname();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_districtname() const {
  return districtname_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_districtname(const std::string& value) {
  
  districtname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_districtname(std::string&& value) {
  
  districtname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
}
inline void GetSDTVOnLatLongResponse::set_districtname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  districtname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
}
inline void GetSDTVOnLatLongResponse::set_districtname(const char* value,
    size_t size) {
  
  districtname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_districtname() {
  
  return districtname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_districtname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
  return districtname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_districtname(std::string* districtname) {
  if (districtname != nullptr) {
    
  } else {
    
  }
  districtname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), districtname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtName)
}

// string regionName = 13;
inline void GetSDTVOnLatLongResponse::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
  return _internal_regionname();
}
inline void GetSDTVOnLatLongResponse::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_regionname() const {
  return regionname_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
}
inline void GetSDTVOnLatLongResponse::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
}
inline void GetSDTVOnLatLongResponse::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionName)
}

// string zoneName = 14;
inline void GetSDTVOnLatLongResponse::clear_zonename() {
  zonename_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::zonename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
  return _internal_zonename();
}
inline void GetSDTVOnLatLongResponse::set_zonename(const std::string& value) {
  _internal_set_zonename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_zonename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
  return _internal_mutable_zonename();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_zonename() const {
  return zonename_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_zonename(const std::string& value) {
  
  zonename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_zonename(std::string&& value) {
  
  zonename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
}
inline void GetSDTVOnLatLongResponse::set_zonename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zonename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
}
inline void GetSDTVOnLatLongResponse::set_zonename(const char* value,
    size_t size) {
  
  zonename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_zonename() {
  
  return zonename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_zonename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
  return zonename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_zonename(std::string* zonename) {
  if (zonename != nullptr) {
    
  } else {
    
  }
  zonename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zonename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneName)
}

// string villageCode = 15;
inline void GetSDTVOnLatLongResponse::clear_villagecode() {
  villagecode_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::villagecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
  return _internal_villagecode();
}
inline void GetSDTVOnLatLongResponse::set_villagecode(const std::string& value) {
  _internal_set_villagecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_villagecode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
  return _internal_mutable_villagecode();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_villagecode() const {
  return villagecode_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_villagecode(const std::string& value) {
  
  villagecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_villagecode(std::string&& value) {
  
  villagecode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
}
inline void GetSDTVOnLatLongResponse::set_villagecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  villagecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
}
inline void GetSDTVOnLatLongResponse::set_villagecode(const char* value,
    size_t size) {
  
  villagecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_villagecode() {
  
  return villagecode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_villagecode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
  return villagecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_villagecode(std::string* villagecode) {
  if (villagecode != nullptr) {
    
  } else {
    
  }
  villagecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), villagecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.villageCode)
}

// string tehsilCode = 16;
inline void GetSDTVOnLatLongResponse::clear_tehsilcode() {
  tehsilcode_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::tehsilcode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
  return _internal_tehsilcode();
}
inline void GetSDTVOnLatLongResponse::set_tehsilcode(const std::string& value) {
  _internal_set_tehsilcode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_tehsilcode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
  return _internal_mutable_tehsilcode();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_tehsilcode() const {
  return tehsilcode_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_tehsilcode(const std::string& value) {
  
  tehsilcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_tehsilcode(std::string&& value) {
  
  tehsilcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
}
inline void GetSDTVOnLatLongResponse::set_tehsilcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsilcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
}
inline void GetSDTVOnLatLongResponse::set_tehsilcode(const char* value,
    size_t size) {
  
  tehsilcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_tehsilcode() {
  
  return tehsilcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_tehsilcode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
  return tehsilcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_tehsilcode(std::string* tehsilcode) {
  if (tehsilcode != nullptr) {
    
  } else {
    
  }
  tehsilcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsilcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.tehsilCode)
}

// string districtCode = 17;
inline void GetSDTVOnLatLongResponse::clear_districtcode() {
  districtcode_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::districtcode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
  return _internal_districtcode();
}
inline void GetSDTVOnLatLongResponse::set_districtcode(const std::string& value) {
  _internal_set_districtcode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_districtcode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
  return _internal_mutable_districtcode();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_districtcode() const {
  return districtcode_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_districtcode(const std::string& value) {
  
  districtcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_districtcode(std::string&& value) {
  
  districtcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
}
inline void GetSDTVOnLatLongResponse::set_districtcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  districtcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
}
inline void GetSDTVOnLatLongResponse::set_districtcode(const char* value,
    size_t size) {
  
  districtcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_districtcode() {
  
  return districtcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_districtcode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
  return districtcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_districtcode(std::string* districtcode) {
  if (districtcode != nullptr) {
    
  } else {
    
  }
  districtcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), districtcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.districtCode)
}

// string regionCode = 18;
inline void GetSDTVOnLatLongResponse::clear_regioncode() {
  regioncode_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::regioncode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
  return _internal_regioncode();
}
inline void GetSDTVOnLatLongResponse::set_regioncode(const std::string& value) {
  _internal_set_regioncode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_regioncode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
  return _internal_mutable_regioncode();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_regioncode() const {
  return regioncode_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_regioncode(const std::string& value) {
  
  regioncode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_regioncode(std::string&& value) {
  
  regioncode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
}
inline void GetSDTVOnLatLongResponse::set_regioncode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regioncode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
}
inline void GetSDTVOnLatLongResponse::set_regioncode(const char* value,
    size_t size) {
  
  regioncode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_regioncode() {
  
  return regioncode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_regioncode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
  return regioncode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_regioncode(std::string* regioncode) {
  if (regioncode != nullptr) {
    
  } else {
    
  }
  regioncode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regioncode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.regionCode)
}

// string zoneCode = 19;
inline void GetSDTVOnLatLongResponse::clear_zonecode() {
  zonecode_.ClearToEmpty();
}
inline const std::string& GetSDTVOnLatLongResponse::zonecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
  return _internal_zonecode();
}
inline void GetSDTVOnLatLongResponse::set_zonecode(const std::string& value) {
  _internal_set_zonecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
}
inline std::string* GetSDTVOnLatLongResponse::mutable_zonecode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
  return _internal_mutable_zonecode();
}
inline const std::string& GetSDTVOnLatLongResponse::_internal_zonecode() const {
  return zonecode_.Get();
}
inline void GetSDTVOnLatLongResponse::_internal_set_zonecode(const std::string& value) {
  
  zonecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSDTVOnLatLongResponse::set_zonecode(std::string&& value) {
  
  zonecode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
}
inline void GetSDTVOnLatLongResponse::set_zonecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zonecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
}
inline void GetSDTVOnLatLongResponse::set_zonecode(const char* value,
    size_t size) {
  
  zonecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
}
inline std::string* GetSDTVOnLatLongResponse::_internal_mutable_zonecode() {
  
  return zonecode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSDTVOnLatLongResponse::release_zonecode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
  return zonecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSDTVOnLatLongResponse::set_allocated_zonecode(std::string* zonecode) {
  if (zonecode != nullptr) {
    
  } else {
    
  }
  zonecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zonecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse.zoneCode)
}

// -------------------------------------------------------------------

// GetServiceDetailsOnLatLongRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceDetailsOnLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceDetailsOnLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceDetailsOnLatLongRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceDetailsOnLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceDetailsOnLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceDetailsOnLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceDetailsOnLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceDetailsOnLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceDetailsOnLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceDetailsOnLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceDetailsOnLatLongRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceDetailsOnLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceDetailsOnLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceDetailsOnLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceDetailsOnLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceDetailsOnLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.isStaleAllowed)
}

// double latitude = 6;
inline void GetServiceDetailsOnLatLongRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetServiceDetailsOnLatLongRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetServiceDetailsOnLatLongRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.latitude)
  return _internal_latitude();
}
inline void GetServiceDetailsOnLatLongRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetServiceDetailsOnLatLongRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.latitude)
}

// double longitude = 7;
inline void GetServiceDetailsOnLatLongRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetServiceDetailsOnLatLongRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetServiceDetailsOnLatLongRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.longitude)
  return _internal_longitude();
}
inline void GetServiceDetailsOnLatLongRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetServiceDetailsOnLatLongRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest.longitude)
}

// -------------------------------------------------------------------

// GetServiceDetailsOnLatLongResponseRecord

// -------------------------------------------------------------------

// GetServiceDetailsOnLatLongResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceDetailsOnLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceDetailsOnLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceDetailsOnLatLongResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceDetailsOnLatLongResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceDetailsOnLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status)
  return _internal_status();
}
inline void GetServiceDetailsOnLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceDetailsOnLatLongResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceDetailsOnLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceDetailsOnLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceDetailsOnLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceDetailsOnLatLongResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.status)
}

// int32 count = 2;
inline void GetServiceDetailsOnLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceDetailsOnLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceDetailsOnLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.count)
  return _internal_count();
}
inline void GetServiceDetailsOnLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceDetailsOnLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceDetailsOnLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceDetailsOnLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceDetailsOnLatLongResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceDetailsOnLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceDetailsOnLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceDetailsOnLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceDetailsOnLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceDetailsOnLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceDetailsOnLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceDetailsOnLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
inline int GetServiceDetailsOnLatLongResponse::_internal_servicedetailsresponse_size() const {
  return servicedetailsresponse_.size();
}
inline int GetServiceDetailsOnLatLongResponse::servicedetailsresponse_size() const {
  return _internal_servicedetailsresponse_size();
}
inline void GetServiceDetailsOnLatLongResponse::clear_servicedetailsresponse() {
  servicedetailsresponse_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceDetailsOnLatLongResponse::mutable_servicedetailsresponse(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse)
  return servicedetailsresponse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >*
GetServiceDetailsOnLatLongResponse::mutable_servicedetailsresponse() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse)
  return &servicedetailsresponse_;
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& GetServiceDetailsOnLatLongResponse::_internal_servicedetailsresponse(int index) const {
  return servicedetailsresponse_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& GetServiceDetailsOnLatLongResponse::servicedetailsresponse(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse)
  return _internal_servicedetailsresponse(index);
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceDetailsOnLatLongResponse::_internal_add_servicedetailsresponse() {
  return servicedetailsresponse_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceDetailsOnLatLongResponse::add_servicedetailsresponse() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse)
  return _internal_add_servicedetailsresponse();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >&
GetServiceDetailsOnLatLongResponse::servicedetailsresponse() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse.serviceDetailsResponse)
  return servicedetailsresponse_;
}

// -------------------------------------------------------------------

// ServiceDetailsResponse

// string serviceType = 1;
inline void ServiceDetailsResponse::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& ServiceDetailsResponse::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
  return _internal_servicetype();
}
inline void ServiceDetailsResponse::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
}
inline std::string* ServiceDetailsResponse::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& ServiceDetailsResponse::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void ServiceDetailsResponse::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceDetailsResponse::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
}
inline void ServiceDetailsResponse::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
}
inline void ServiceDetailsResponse::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
}
inline std::string* ServiceDetailsResponse::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceDetailsResponse::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDetailsResponse::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.serviceType)
}

// string imageUrl = 2;
inline void ServiceDetailsResponse::clear_imageurl() {
  imageurl_.ClearToEmpty();
}
inline const std::string& ServiceDetailsResponse::imageurl() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
  return _internal_imageurl();
}
inline void ServiceDetailsResponse::set_imageurl(const std::string& value) {
  _internal_set_imageurl(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
}
inline std::string* ServiceDetailsResponse::mutable_imageurl() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
  return _internal_mutable_imageurl();
}
inline const std::string& ServiceDetailsResponse::_internal_imageurl() const {
  return imageurl_.Get();
}
inline void ServiceDetailsResponse::_internal_set_imageurl(const std::string& value) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceDetailsResponse::set_imageurl(std::string&& value) {
  
  imageurl_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
}
inline void ServiceDetailsResponse::set_imageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
}
inline void ServiceDetailsResponse::set_imageurl(const char* value,
    size_t size) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
}
inline std::string* ServiceDetailsResponse::_internal_mutable_imageurl() {
  
  return imageurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceDetailsResponse::release_imageurl() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
  return imageurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDetailsResponse::set_allocated_imageurl(std::string* imageurl) {
  if (imageurl != nullptr) {
    
  } else {
    
  }
  imageurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.imageUrl)
}

// int64 rank = 3;
inline void ServiceDetailsResponse::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceDetailsResponse::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceDetailsResponse::rank() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.rank)
  return _internal_rank();
}
inline void ServiceDetailsResponse::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rank_ = value;
}
inline void ServiceDetailsResponse::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.rank)
}

// int64 section = 4;
inline void ServiceDetailsResponse::clear_section() {
  section_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceDetailsResponse::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceDetailsResponse::section() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.section)
  return _internal_section();
}
inline void ServiceDetailsResponse::_internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  section_ = value;
}
inline void ServiceDetailsResponse::set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse.section)
}

// -------------------------------------------------------------------

// GetServicesOnServiceNameAndServiceTypeRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServicesOnServiceNameAndServiceTypeRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServicesOnServiceNameAndServiceTypeRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServicesOnServiceNameAndServiceTypeRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServicesOnServiceNameAndServiceTypeRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServicesOnServiceNameAndServiceTypeRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServicesOnServiceNameAndServiceTypeRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServicesOnServiceNameAndServiceTypeRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServicesOnServiceNameAndServiceTypeRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServicesOnServiceNameAndServiceTypeRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServicesOnServiceNameAndServiceTypeRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServicesOnServiceNameAndServiceTypeRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.isStaleAllowed)
}

// string serviceName = 3;
inline void GetServicesOnServiceNameAndServiceTypeRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
  return _internal_servicename();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceName)
}

// string serviceType = 4;
inline void GetServicesOnServiceNameAndServiceTypeRequest::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
  return _internal_servicetype();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeRequest::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServicesOnServiceNameAndServiceTypeRequest::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeRequest::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest.serviceType)
}

// -------------------------------------------------------------------

// GetServicesOnServiceNameAndServiceTypeResponseRecord

// int64 id = 1;
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServicesOnServiceNameAndServiceTypeResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.id)
  return _internal_id();
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.id)
}

// string serviceName = 2;
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeResponseRecord::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
  return _internal_servicename();
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_servicename() const {
  return servicename_.Get();
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceName)
}

// string serviceType = 3;
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeResponseRecord::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
  return _internal_servicetype();
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServicesOnServiceNameAndServiceTypeResponseRecord::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServicesOnServiceNameAndServiceTypeResponseRecord::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord.serviceType)
}

// -------------------------------------------------------------------

// GetServicesOnServiceNameAndServiceTypeResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServicesOnServiceNameAndServiceTypeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServicesOnServiceNameAndServiceTypeResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServicesOnServiceNameAndServiceTypeResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServicesOnServiceNameAndServiceTypeResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status)
  return _internal_status();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServicesOnServiceNameAndServiceTypeResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServicesOnServiceNameAndServiceTypeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServicesOnServiceNameAndServiceTypeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServicesOnServiceNameAndServiceTypeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status)
  return _internal_mutable_status();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.status)
}

// int32 count = 2;
inline void GetServicesOnServiceNameAndServiceTypeResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServicesOnServiceNameAndServiceTypeResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServicesOnServiceNameAndServiceTypeResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.count)
  return _internal_count();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServicesOnServiceNameAndServiceTypeResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServicesOnServiceNameAndServiceTypeResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServicesOnServiceNameAndServiceTypeResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServicesOnServiceNameAndServiceTypeResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServicesOnServiceNameAndServiceTypeResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServicesOnServiceNameAndServiceTypeResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServicesOnServiceNameAndServiceTypeResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServicesOnServiceNameAndServiceTypeResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServicesOnServiceNameAndServiceTypeResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponseRecord records = 4;
inline int GetServicesOnServiceNameAndServiceTypeResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetServicesOnServiceNameAndServiceTypeResponse::records_size() const {
  return _internal_records_size();
}
inline void GetServicesOnServiceNameAndServiceTypeResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* GetServicesOnServiceNameAndServiceTypeResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >*
GetServicesOnServiceNameAndServiceTypeResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord& GetServicesOnServiceNameAndServiceTypeResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord& GetServicesOnServiceNameAndServiceTypeResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* GetServicesOnServiceNameAndServiceTypeResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord* GetServicesOnServiceNameAndServiceTypeResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponseRecord >&
GetServicesOnServiceNameAndServiceTypeResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetServiceProviderOnMobileNumberRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceProviderOnMobileNumberRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceProviderOnMobileNumberRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceProviderOnMobileNumberRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderOnMobileNumberRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderOnMobileNumberRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceProviderOnMobileNumberRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnMobileNumberRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnMobileNumberRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnMobileNumberRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnMobileNumberRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceProviderOnMobileNumberRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceProviderOnMobileNumberRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceProviderOnMobileNumberRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceProviderOnMobileNumberRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceProviderOnMobileNumberRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceProviderOnMobileNumberRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.isStaleAllowed)
}

// string mobileNumber = 3;
inline void GetServiceProviderOnMobileNumberRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnMobileNumberRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void GetServiceProviderOnMobileNumberRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
}
inline std::string* GetServiceProviderOnMobileNumberRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GetServiceProviderOnMobileNumberRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GetServiceProviderOnMobileNumberRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnMobileNumberRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
}
inline void GetServiceProviderOnMobileNumberRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
}
inline void GetServiceProviderOnMobileNumberRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
}
inline std::string* GetServiceProviderOnMobileNumberRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnMobileNumberRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnMobileNumberRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest.mobileNumber)
}

// -------------------------------------------------------------------

// GetServiceProviderOnMobileNumberResponseRecord

// int64 id = 1;
inline void GetServiceProviderOnMobileNumberResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnMobileNumberResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnMobileNumberResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.id)
  return _internal_id();
}
inline void GetServiceProviderOnMobileNumberResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.id)
}

// string mobileNumber = 2;
inline void GetServiceProviderOnMobileNumberResponseRecord::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnMobileNumberResponseRecord::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
  return _internal_mobilenumber();
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
}
inline std::string* GetServiceProviderOnMobileNumberResponseRecord::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GetServiceProviderOnMobileNumberResponseRecord::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GetServiceProviderOnMobileNumberResponseRecord::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
}
inline std::string* GetServiceProviderOnMobileNumberResponseRecord::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnMobileNumberResponseRecord::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnMobileNumberResponseRecord::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord.mobileNumber)
}

// -------------------------------------------------------------------

// GetServiceProviderOnMobileNumberResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceProviderOnMobileNumberResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceProviderOnMobileNumberResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceProviderOnMobileNumberResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderOnMobileNumberResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderOnMobileNumberResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status)
  return _internal_status();
}
inline void GetServiceProviderOnMobileNumberResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnMobileNumberResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnMobileNumberResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnMobileNumberResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnMobileNumberResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceProviderOnMobileNumberResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.status)
}

// int32 count = 2;
inline void GetServiceProviderOnMobileNumberResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderOnMobileNumberResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderOnMobileNumberResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.count)
  return _internal_count();
}
inline void GetServiceProviderOnMobileNumberResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceProviderOnMobileNumberResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceProviderOnMobileNumberResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceProviderOnMobileNumberResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceProviderOnMobileNumberResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnMobileNumberResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceProviderOnMobileNumberResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderOnMobileNumberResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderOnMobileNumberResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnMobileNumberResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnMobileNumberResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceProviderOnMobileNumberResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponseRecord records = 4;
inline int GetServiceProviderOnMobileNumberResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetServiceProviderOnMobileNumberResponse::records_size() const {
  return _internal_records_size();
}
inline void GetServiceProviderOnMobileNumberResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* GetServiceProviderOnMobileNumberResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >*
GetServiceProviderOnMobileNumberResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord& GetServiceProviderOnMobileNumberResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord& GetServiceProviderOnMobileNumberResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* GetServiceProviderOnMobileNumberResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord* GetServiceProviderOnMobileNumberResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponseRecord >&
GetServiceProviderOnMobileNumberResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetServiceLocationOnRegionNameRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceLocationOnRegionNameRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceLocationOnRegionNameRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceLocationOnRegionNameRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceLocationOnRegionNameRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceLocationOnRegionNameRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceLocationOnRegionNameRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceLocationOnRegionNameRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceLocationOnRegionNameRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceLocationOnRegionNameRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceLocationOnRegionNameRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceLocationOnRegionNameRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceLocationOnRegionNameRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceLocationOnRegionNameRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceLocationOnRegionNameRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceLocationOnRegionNameRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceLocationOnRegionNameRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.isStaleAllowed)
}

// repeated string regionName = 6;
inline int GetServiceLocationOnRegionNameRequest::_internal_regionname_size() const {
  return regionname_.size();
}
inline int GetServiceLocationOnRegionNameRequest::regionname_size() const {
  return _internal_regionname_size();
}
inline void GetServiceLocationOnRegionNameRequest::clear_regionname() {
  regionname_.Clear();
}
inline std::string* GetServiceLocationOnRegionNameRequest::add_regionname() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  return _internal_add_regionname();
}
inline const std::string& GetServiceLocationOnRegionNameRequest::_internal_regionname(int index) const {
  return regionname_.Get(index);
}
inline const std::string& GetServiceLocationOnRegionNameRequest::regionname(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  return _internal_regionname(index);
}
inline std::string* GetServiceLocationOnRegionNameRequest::mutable_regionname(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  return regionname_.Mutable(index);
}
inline void GetServiceLocationOnRegionNameRequest::set_regionname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  regionname_.Mutable(index)->assign(value);
}
inline void GetServiceLocationOnRegionNameRequest::set_regionname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  regionname_.Mutable(index)->assign(std::move(value));
}
inline void GetServiceLocationOnRegionNameRequest::set_regionname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regionname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline void GetServiceLocationOnRegionNameRequest::set_regionname(int index, const char* value, size_t size) {
  regionname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline std::string* GetServiceLocationOnRegionNameRequest::_internal_add_regionname() {
  return regionname_.Add();
}
inline void GetServiceLocationOnRegionNameRequest::add_regionname(const std::string& value) {
  regionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline void GetServiceLocationOnRegionNameRequest::add_regionname(std::string&& value) {
  regionname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline void GetServiceLocationOnRegionNameRequest::add_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline void GetServiceLocationOnRegionNameRequest::add_regionname(const char* value, size_t size) {
  regionname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceLocationOnRegionNameRequest::regionname() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  return regionname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServiceLocationOnRegionNameRequest::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest.regionName)
  return &regionname_;
}

// -------------------------------------------------------------------

// GetServiceLocationOnRegionNameResponseRecord

// -------------------------------------------------------------------

// GetServiceLocationOnRegionNameResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceLocationOnRegionNameResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceLocationOnRegionNameResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceLocationOnRegionNameResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceLocationOnRegionNameResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceLocationOnRegionNameResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status)
  return _internal_status();
}
inline void GetServiceLocationOnRegionNameResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceLocationOnRegionNameResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceLocationOnRegionNameResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceLocationOnRegionNameResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceLocationOnRegionNameResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceLocationOnRegionNameResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.status)
}

// int32 count = 2;
inline void GetServiceLocationOnRegionNameResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceLocationOnRegionNameResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceLocationOnRegionNameResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.count)
  return _internal_count();
}
inline void GetServiceLocationOnRegionNameResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceLocationOnRegionNameResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceLocationOnRegionNameResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceLocationOnRegionNameResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceLocationOnRegionNameResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceLocationOnRegionNameResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceLocationOnRegionNameResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceLocationOnRegionNameResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceLocationOnRegionNameResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceLocationOnRegionNameResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceLocationOnRegionNameResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceLocationOnRegionNameResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
inline int GetServiceLocationOnRegionNameResponse::_internal_geographydetail_size() const {
  return geographydetail_.size();
}
inline int GetServiceLocationOnRegionNameResponse::geographydetail_size() const {
  return _internal_geographydetail_size();
}
inline void GetServiceLocationOnRegionNameResponse::clear_geographydetail() {
  geographydetail_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GetServiceLocationOnRegionNameResponse::mutable_geographydetail(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail)
  return geographydetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >*
GetServiceLocationOnRegionNameResponse::mutable_geographydetail() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail)
  return &geographydetail_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& GetServiceLocationOnRegionNameResponse::_internal_geographydetail(int index) const {
  return geographydetail_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& GetServiceLocationOnRegionNameResponse::geographydetail(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail)
  return _internal_geographydetail(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GetServiceLocationOnRegionNameResponse::_internal_add_geographydetail() {
  return geographydetail_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GetServiceLocationOnRegionNameResponse::add_geographydetail() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail)
  return _internal_add_geographydetail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >&
GetServiceLocationOnRegionNameResponse::geographydetail() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse.geographyDetail)
  return geographydetail_;
}

// -------------------------------------------------------------------

// GeographyDetail

// string geographyName = 1;
inline void GeographyDetail::clear_geographyname() {
  geographyname_.ClearToEmpty();
}
inline const std::string& GeographyDetail::geographyname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
  return _internal_geographyname();
}
inline void GeographyDetail::set_geographyname(const std::string& value) {
  _internal_set_geographyname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
}
inline std::string* GeographyDetail::mutable_geographyname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
  return _internal_mutable_geographyname();
}
inline const std::string& GeographyDetail::_internal_geographyname() const {
  return geographyname_.Get();
}
inline void GeographyDetail::_internal_set_geographyname(const std::string& value) {
  
  geographyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographyDetail::set_geographyname(std::string&& value) {
  
  geographyname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
}
inline void GeographyDetail::set_geographyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
}
inline void GeographyDetail::set_geographyname(const char* value,
    size_t size) {
  
  geographyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
}
inline std::string* GeographyDetail::_internal_mutable_geographyname() {
  
  return geographyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographyDetail::release_geographyname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
  return geographyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographyDetail::set_allocated_geographyname(std::string* geographyname) {
  if (geographyname != nullptr) {
    
  } else {
    
  }
  geographyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyName)
}

// string geographyUid = 2;
inline void GeographyDetail::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& GeographyDetail::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
  return _internal_geographyuid();
}
inline void GeographyDetail::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
}
inline std::string* GeographyDetail::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& GeographyDetail::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void GeographyDetail::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographyDetail::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
}
inline void GeographyDetail::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
}
inline void GeographyDetail::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
}
inline std::string* GeographyDetail::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographyDetail::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographyDetail::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyUid)
}

// string geographyLongitude = 3;
inline void GeographyDetail::clear_geographylongitude() {
  geographylongitude_.ClearToEmpty();
}
inline const std::string& GeographyDetail::geographylongitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
  return _internal_geographylongitude();
}
inline void GeographyDetail::set_geographylongitude(const std::string& value) {
  _internal_set_geographylongitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
}
inline std::string* GeographyDetail::mutable_geographylongitude() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
  return _internal_mutable_geographylongitude();
}
inline const std::string& GeographyDetail::_internal_geographylongitude() const {
  return geographylongitude_.Get();
}
inline void GeographyDetail::_internal_set_geographylongitude(const std::string& value) {
  
  geographylongitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographyDetail::set_geographylongitude(std::string&& value) {
  
  geographylongitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
}
inline void GeographyDetail::set_geographylongitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographylongitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
}
inline void GeographyDetail::set_geographylongitude(const char* value,
    size_t size) {
  
  geographylongitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
}
inline std::string* GeographyDetail::_internal_mutable_geographylongitude() {
  
  return geographylongitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographyDetail::release_geographylongitude() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
  return geographylongitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographyDetail::set_allocated_geographylongitude(std::string* geographylongitude) {
  if (geographylongitude != nullptr) {
    
  } else {
    
  }
  geographylongitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographylongitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLongitude)
}

// string geographyLatitude = 4;
inline void GeographyDetail::clear_geographylatitude() {
  geographylatitude_.ClearToEmpty();
}
inline const std::string& GeographyDetail::geographylatitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
  return _internal_geographylatitude();
}
inline void GeographyDetail::set_geographylatitude(const std::string& value) {
  _internal_set_geographylatitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
}
inline std::string* GeographyDetail::mutable_geographylatitude() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
  return _internal_mutable_geographylatitude();
}
inline const std::string& GeographyDetail::_internal_geographylatitude() const {
  return geographylatitude_.Get();
}
inline void GeographyDetail::_internal_set_geographylatitude(const std::string& value) {
  
  geographylatitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographyDetail::set_geographylatitude(std::string&& value) {
  
  geographylatitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
}
inline void GeographyDetail::set_geographylatitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographylatitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
}
inline void GeographyDetail::set_geographylatitude(const char* value,
    size_t size) {
  
  geographylatitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
}
inline std::string* GeographyDetail::_internal_mutable_geographylatitude() {
  
  return geographylatitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographyDetail::release_geographylatitude() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
  return geographylatitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographyDetail::set_allocated_geographylatitude(std::string* geographylatitude) {
  if (geographylatitude != nullptr) {
    
  } else {
    
  }
  geographylatitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographylatitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyLatitude)
}

// repeated .farm.nurture.serviceProvider.service.proto.GeographyDetail geographyDetail = 5;
inline int GeographyDetail::_internal_geographydetail_size() const {
  return geographydetail_.size();
}
inline int GeographyDetail::geographydetail_size() const {
  return _internal_geographydetail_size();
}
inline void GeographyDetail::clear_geographydetail() {
  geographydetail_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GeographyDetail::mutable_geographydetail(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail)
  return geographydetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >*
GeographyDetail::mutable_geographydetail() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail)
  return &geographydetail_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& GeographyDetail::_internal_geographydetail(int index) const {
  return geographydetail_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GeographyDetail& GeographyDetail::geographydetail(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail)
  return _internal_geographydetail(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GeographyDetail::_internal_add_geographydetail() {
  return geographydetail_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GeographyDetail* GeographyDetail::add_geographydetail() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail)
  return _internal_add_geographydetail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GeographyDetail >&
GeographyDetail::geographydetail() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GeographyDetail.geographyDetail)
  return geographydetail_;
}

// -------------------------------------------------------------------

// GetServiceConfigOnConditionRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceConfigOnConditionRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceConfigOnConditionRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceConfigOnConditionRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigOnConditionRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigOnConditionRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceConfigOnConditionRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnConditionRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnConditionRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnConditionRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnConditionRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceConfigOnConditionRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceConfigOnConditionRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceConfigOnConditionRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceConfigOnConditionRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceConfigOnConditionRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceConfigOnConditionRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.isStaleAllowed)
}

// string regionName = 3;
inline void GetServiceConfigOnConditionRequest::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnConditionRequest::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
  return _internal_regionname();
}
inline void GetServiceConfigOnConditionRequest::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
}
inline std::string* GetServiceConfigOnConditionRequest::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& GetServiceConfigOnConditionRequest::_internal_regionname() const {
  return regionname_.Get();
}
inline void GetServiceConfigOnConditionRequest::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnConditionRequest::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
}
inline void GetServiceConfigOnConditionRequest::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
}
inline void GetServiceConfigOnConditionRequest::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
}
inline std::string* GetServiceConfigOnConditionRequest::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnConditionRequest::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnConditionRequest::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest.regionName)
}

// -------------------------------------------------------------------

// GetServiceConfigOnConditionResponseRecord

// string serviceType = 1;
inline void GetServiceConfigOnConditionResponseRecord::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnConditionResponseRecord::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
  return _internal_servicetype();
}
inline void GetServiceConfigOnConditionResponseRecord::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
}
inline std::string* GetServiceConfigOnConditionResponseRecord::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& GetServiceConfigOnConditionResponseRecord::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void GetServiceConfigOnConditionResponseRecord::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnConditionResponseRecord::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
}
inline void GetServiceConfigOnConditionResponseRecord::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
}
inline void GetServiceConfigOnConditionResponseRecord::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
}
inline std::string* GetServiceConfigOnConditionResponseRecord::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnConditionResponseRecord::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnConditionResponseRecord::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceType)
}

// int64 cropId = 2;
inline void GetServiceConfigOnConditionResponseRecord::clear_cropid() {
  cropid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::_internal_cropid() const {
  return cropid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::cropid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.cropId)
  return _internal_cropid();
}
inline void GetServiceConfigOnConditionResponseRecord::_internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cropid_ = value;
}
inline void GetServiceConfigOnConditionResponseRecord::set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cropid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.cropId)
}

// string regionName = 3;
inline void GetServiceConfigOnConditionResponseRecord::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnConditionResponseRecord::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
  return _internal_regionname();
}
inline void GetServiceConfigOnConditionResponseRecord::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
}
inline std::string* GetServiceConfigOnConditionResponseRecord::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& GetServiceConfigOnConditionResponseRecord::_internal_regionname() const {
  return regionname_.Get();
}
inline void GetServiceConfigOnConditionResponseRecord::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnConditionResponseRecord::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
}
inline void GetServiceConfigOnConditionResponseRecord::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
}
inline void GetServiceConfigOnConditionResponseRecord::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
}
inline std::string* GetServiceConfigOnConditionResponseRecord::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnConditionResponseRecord::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnConditionResponseRecord::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.regionName)
}

// int64 section = 4;
inline void GetServiceConfigOnConditionResponseRecord::clear_section() {
  section_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::section() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.section)
  return _internal_section();
}
inline void GetServiceConfigOnConditionResponseRecord::_internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  section_ = value;
}
inline void GetServiceConfigOnConditionResponseRecord::set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.section)
}

// int64 serviceRank = 5;
inline void GetServiceConfigOnConditionResponseRecord::clear_servicerank() {
  servicerank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::_internal_servicerank() const {
  return servicerank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnConditionResponseRecord::servicerank() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceRank)
  return _internal_servicerank();
}
inline void GetServiceConfigOnConditionResponseRecord::_internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servicerank_ = value;
}
inline void GetServiceConfigOnConditionResponseRecord::set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servicerank(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord.serviceRank)
}

// -------------------------------------------------------------------

// GetServiceConfigOnConditionResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceConfigOnConditionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceConfigOnConditionResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceConfigOnConditionResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigOnConditionResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigOnConditionResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status)
  return _internal_status();
}
inline void GetServiceConfigOnConditionResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnConditionResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnConditionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnConditionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnConditionResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceConfigOnConditionResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.status)
}

// int32 count = 2;
inline void GetServiceConfigOnConditionResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigOnConditionResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigOnConditionResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.count)
  return _internal_count();
}
inline void GetServiceConfigOnConditionResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceConfigOnConditionResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceConfigOnConditionResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceConfigOnConditionResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceConfigOnConditionResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnConditionResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceConfigOnConditionResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigOnConditionResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigOnConditionResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnConditionResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnConditionResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceConfigOnConditionResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponseRecord records = 4;
inline int GetServiceConfigOnConditionResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetServiceConfigOnConditionResponse::records_size() const {
  return _internal_records_size();
}
inline void GetServiceConfigOnConditionResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* GetServiceConfigOnConditionResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >*
GetServiceConfigOnConditionResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord& GetServiceConfigOnConditionResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord& GetServiceConfigOnConditionResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* GetServiceConfigOnConditionResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord* GetServiceConfigOnConditionResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponseRecord >&
GetServiceConfigOnConditionResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetServiceProviderOnServiceTypeRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceProviderOnServiceTypeRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceProviderOnServiceTypeRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceProviderOnServiceTypeRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderOnServiceTypeRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceProviderOnServiceTypeRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceProviderOnServiceTypeRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnServiceTypeRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnServiceTypeRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnServiceTypeRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceProviderOnServiceTypeRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceProviderOnServiceTypeRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceProviderOnServiceTypeRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceProviderOnServiceTypeRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceProviderOnServiceTypeRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceProviderOnServiceTypeRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceProviderOnServiceTypeRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.isStaleAllowed)
}

// string serviceType = 3;
inline void GetServiceProviderOnServiceTypeRequest::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
  return _internal_servicetype();
}
inline void GetServiceProviderOnServiceTypeRequest::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
}
inline std::string* GetServiceProviderOnServiceTypeRequest::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& GetServiceProviderOnServiceTypeRequest::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void GetServiceProviderOnServiceTypeRequest::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeRequest::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
}
inline void GetServiceProviderOnServiceTypeRequest::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
}
inline void GetServiceProviderOnServiceTypeRequest::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
}
inline std::string* GetServiceProviderOnServiceTypeRequest::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeRequest::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeRequest::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest.serviceType)
}

// -------------------------------------------------------------------

// GetServiceProviderOnServiceTypeResponseRecord

// int64 id = 1;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnServiceTypeResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnServiceTypeResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.id)
  return _internal_id();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.id)
}

// string name = 2;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
  return _internal_name();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
  return _internal_mutable_name();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::_internal_name() const {
  return name_.Get();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.name)
}

// string mobileNumber = 3;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
  return _internal_mobilenumber();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.mobileNumber)
}

// string whatsappNumber = 4;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_whatsappnumber() {
  whatsappnumber_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::whatsappnumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
  return _internal_whatsappnumber();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_whatsappnumber(const std::string& value) {
  _internal_set_whatsappnumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::mutable_whatsappnumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
  return _internal_mutable_whatsappnumber();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::_internal_whatsappnumber() const {
  return whatsappnumber_.Get();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_whatsappnumber(const std::string& value) {
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_whatsappnumber(std::string&& value) {
  
  whatsappnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_whatsappnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_whatsappnumber(const char* value,
    size_t size) {
  
  whatsappnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::_internal_mutable_whatsappnumber() {
  
  return whatsappnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::release_whatsappnumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
  return whatsappnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_allocated_whatsappnumber(std::string* whatsappnumber) {
  if (whatsappnumber != nullptr) {
    
  } else {
    
  }
  whatsappnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whatsappnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.whatsappNumber)
}

// string pincode = 5;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
  return _internal_pincode();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::_internal_pincode() const {
  return pincode_.Get();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.pincode)
}

// int64 machineCount = 6;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_machinecount() {
  machinecount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnServiceTypeResponseRecord::_internal_machinecount() const {
  return machinecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceProviderOnServiceTypeResponseRecord::machinecount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.machineCount)
  return _internal_machinecount();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machinecount_ = value;
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_machinecount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machinecount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.machineCount)
}

// string costPerAcre = 7;
inline void GetServiceProviderOnServiceTypeResponseRecord::clear_costperacre() {
  costperacre_.ClearToEmpty();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::costperacre() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
  return _internal_costperacre();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_costperacre(const std::string& value) {
  _internal_set_costperacre(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::mutable_costperacre() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
  return _internal_mutable_costperacre();
}
inline const std::string& GetServiceProviderOnServiceTypeResponseRecord::_internal_costperacre() const {
  return costperacre_.Get();
}
inline void GetServiceProviderOnServiceTypeResponseRecord::_internal_set_costperacre(const std::string& value) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_costperacre(std::string&& value) {
  
  costperacre_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_costperacre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_costperacre(const char* value,
    size_t size) {
  
  costperacre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::_internal_mutable_costperacre() {
  
  return costperacre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceProviderOnServiceTypeResponseRecord::release_costperacre() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
  return costperacre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceProviderOnServiceTypeResponseRecord::set_allocated_costperacre(std::string* costperacre) {
  if (costperacre != nullptr) {
    
  } else {
    
  }
  costperacre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), costperacre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord.costPerAcre)
}

// -------------------------------------------------------------------

// GetServiceProviderOnServiceTypeResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceProviderOnServiceTypeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceProviderOnServiceTypeResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceProviderOnServiceTypeResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderOnServiceTypeResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceProviderOnServiceTypeResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status)
  return _internal_status();
}
inline void GetServiceProviderOnServiceTypeResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnServiceTypeResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnServiceTypeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnServiceTypeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceProviderOnServiceTypeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceProviderOnServiceTypeResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.status)
}

// int32 count = 2;
inline void GetServiceProviderOnServiceTypeResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderOnServiceTypeResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceProviderOnServiceTypeResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.count)
  return _internal_count();
}
inline void GetServiceProviderOnServiceTypeResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceProviderOnServiceTypeResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceProviderOnServiceTypeResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceProviderOnServiceTypeResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceProviderOnServiceTypeResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnServiceTypeResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceProviderOnServiceTypeResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderOnServiceTypeResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceProviderOnServiceTypeResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnServiceTypeResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceProviderOnServiceTypeResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceProviderOnServiceTypeResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponseRecord records = 4;
inline int GetServiceProviderOnServiceTypeResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetServiceProviderOnServiceTypeResponse::records_size() const {
  return _internal_records_size();
}
inline void GetServiceProviderOnServiceTypeResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* GetServiceProviderOnServiceTypeResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >*
GetServiceProviderOnServiceTypeResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord& GetServiceProviderOnServiceTypeResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord& GetServiceProviderOnServiceTypeResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* GetServiceProviderOnServiceTypeResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord* GetServiceProviderOnServiceTypeResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponseRecord >&
GetServiceProviderOnServiceTypeResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetLocationOnServiceProviderIdRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetLocationOnServiceProviderIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetLocationOnServiceProviderIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetLocationOnServiceProviderIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetLocationOnServiceProviderIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetLocationOnServiceProviderIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetLocationOnServiceProviderIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetLocationOnServiceProviderIdRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetLocationOnServiceProviderIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetLocationOnServiceProviderIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetLocationOnServiceProviderIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetLocationOnServiceProviderIdRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetLocationOnServiceProviderIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetLocationOnServiceProviderIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetLocationOnServiceProviderIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetLocationOnServiceProviderIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetLocationOnServiceProviderIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.isStaleAllowed)
}

// string serviceProviderId = 3;
inline void GetLocationOnServiceProviderIdRequest::clear_serviceproviderid() {
  serviceproviderid_.ClearToEmpty();
}
inline const std::string& GetLocationOnServiceProviderIdRequest::serviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
  return _internal_serviceproviderid();
}
inline void GetLocationOnServiceProviderIdRequest::set_serviceproviderid(const std::string& value) {
  _internal_set_serviceproviderid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
}
inline std::string* GetLocationOnServiceProviderIdRequest::mutable_serviceproviderid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
  return _internal_mutable_serviceproviderid();
}
inline const std::string& GetLocationOnServiceProviderIdRequest::_internal_serviceproviderid() const {
  return serviceproviderid_.Get();
}
inline void GetLocationOnServiceProviderIdRequest::_internal_set_serviceproviderid(const std::string& value) {
  
  serviceproviderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationOnServiceProviderIdRequest::set_serviceproviderid(std::string&& value) {
  
  serviceproviderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
}
inline void GetLocationOnServiceProviderIdRequest::set_serviceproviderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceproviderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
}
inline void GetLocationOnServiceProviderIdRequest::set_serviceproviderid(const char* value,
    size_t size) {
  
  serviceproviderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
}
inline std::string* GetLocationOnServiceProviderIdRequest::_internal_mutable_serviceproviderid() {
  
  return serviceproviderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationOnServiceProviderIdRequest::release_serviceproviderid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
  return serviceproviderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationOnServiceProviderIdRequest::set_allocated_serviceproviderid(std::string* serviceproviderid) {
  if (serviceproviderid != nullptr) {
    
  } else {
    
  }
  serviceproviderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceproviderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest.serviceProviderId)
}

// -------------------------------------------------------------------

// GetLocationOnServiceProviderIdResponseRecord

// int64 serviceProviderId = 1;
inline void GetLocationOnServiceProviderIdResponseRecord::clear_serviceproviderid() {
  serviceproviderid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationOnServiceProviderIdResponseRecord::_internal_serviceproviderid() const {
  return serviceproviderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationOnServiceProviderIdResponseRecord::serviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.serviceProviderId)
  return _internal_serviceproviderid();
}
inline void GetLocationOnServiceProviderIdResponseRecord::_internal_set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serviceproviderid_ = value;
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_serviceproviderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceproviderid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.serviceProviderId)
}

// string district = 2;
inline void GetLocationOnServiceProviderIdResponseRecord::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& GetLocationOnServiceProviderIdResponseRecord::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
  return _internal_district();
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
  return _internal_mutable_district();
}
inline const std::string& GetLocationOnServiceProviderIdResponseRecord::_internal_district() const {
  return district_.Get();
}
inline void GetLocationOnServiceProviderIdResponseRecord::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.district)
}

// string state = 3;
inline void GetLocationOnServiceProviderIdResponseRecord::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GetLocationOnServiceProviderIdResponseRecord::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
  return _internal_state();
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
  return _internal_mutable_state();
}
inline const std::string& GetLocationOnServiceProviderIdResponseRecord::_internal_state() const {
  return state_.Get();
}
inline void GetLocationOnServiceProviderIdResponseRecord::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationOnServiceProviderIdResponseRecord::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.state)
}

// double latitude = 4;
inline void GetLocationOnServiceProviderIdResponseRecord::clear_latitude() {
  latitude_ = 0;
}
inline double GetLocationOnServiceProviderIdResponseRecord::_internal_latitude() const {
  return latitude_;
}
inline double GetLocationOnServiceProviderIdResponseRecord::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.latitude)
  return _internal_latitude();
}
inline void GetLocationOnServiceProviderIdResponseRecord::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.latitude)
}

// double longitude = 5;
inline void GetLocationOnServiceProviderIdResponseRecord::clear_longitude() {
  longitude_ = 0;
}
inline double GetLocationOnServiceProviderIdResponseRecord::_internal_longitude() const {
  return longitude_;
}
inline double GetLocationOnServiceProviderIdResponseRecord::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.longitude)
  return _internal_longitude();
}
inline void GetLocationOnServiceProviderIdResponseRecord::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetLocationOnServiceProviderIdResponseRecord::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord.longitude)
}

// -------------------------------------------------------------------

// GetLocationOnServiceProviderIdResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetLocationOnServiceProviderIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetLocationOnServiceProviderIdResponse::has_status() const {
  return _internal_has_status();
}
inline void GetLocationOnServiceProviderIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetLocationOnServiceProviderIdResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetLocationOnServiceProviderIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status)
  return _internal_status();
}
inline void GetLocationOnServiceProviderIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetLocationOnServiceProviderIdResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetLocationOnServiceProviderIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetLocationOnServiceProviderIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetLocationOnServiceProviderIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status)
  return _internal_mutable_status();
}
inline void GetLocationOnServiceProviderIdResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.status)
}

// int32 count = 2;
inline void GetLocationOnServiceProviderIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationOnServiceProviderIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationOnServiceProviderIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.count)
  return _internal_count();
}
inline void GetLocationOnServiceProviderIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetLocationOnServiceProviderIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetLocationOnServiceProviderIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetLocationOnServiceProviderIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetLocationOnServiceProviderIdResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetLocationOnServiceProviderIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetLocationOnServiceProviderIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetLocationOnServiceProviderIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetLocationOnServiceProviderIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetLocationOnServiceProviderIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetLocationOnServiceProviderIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetLocationOnServiceProviderIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponseRecord records = 4;
inline int GetLocationOnServiceProviderIdResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetLocationOnServiceProviderIdResponse::records_size() const {
  return _internal_records_size();
}
inline void GetLocationOnServiceProviderIdResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* GetLocationOnServiceProviderIdResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >*
GetLocationOnServiceProviderIdResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord& GetLocationOnServiceProviderIdResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord& GetLocationOnServiceProviderIdResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* GetLocationOnServiceProviderIdResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord* GetLocationOnServiceProviderIdResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponseRecord >&
GetLocationOnServiceProviderIdResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetServiceConfigRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceConfigRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceConfigRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceConfigRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceConfigRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceConfigRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceConfigRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceConfigRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceConfigRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceConfigRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceConfigRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.isStaleAllowed)
}

// repeated string state = 6;
inline int GetServiceConfigRequest::_internal_state_size() const {
  return state_.size();
}
inline int GetServiceConfigRequest::state_size() const {
  return _internal_state_size();
}
inline void GetServiceConfigRequest::clear_state() {
  state_.Clear();
}
inline std::string* GetServiceConfigRequest::add_state() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  return _internal_add_state();
}
inline const std::string& GetServiceConfigRequest::_internal_state(int index) const {
  return state_.Get(index);
}
inline const std::string& GetServiceConfigRequest::state(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  return _internal_state(index);
}
inline std::string* GetServiceConfigRequest::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  return state_.Mutable(index);
}
inline void GetServiceConfigRequest::set_state(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  state_.Mutable(index)->assign(value);
}
inline void GetServiceConfigRequest::set_state(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  state_.Mutable(index)->assign(std::move(value));
}
inline void GetServiceConfigRequest::set_state(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  state_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline void GetServiceConfigRequest::set_state(int index, const char* value, size_t size) {
  state_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline std::string* GetServiceConfigRequest::_internal_add_state() {
  return state_.Add();
}
inline void GetServiceConfigRequest::add_state(const std::string& value) {
  state_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline void GetServiceConfigRequest::add_state(std::string&& value) {
  state_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline void GetServiceConfigRequest::add_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  state_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline void GetServiceConfigRequest::add_state(const char* value, size_t size) {
  state_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceConfigRequest::state() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServiceConfigRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest.state)
  return &state_;
}

// -------------------------------------------------------------------

// GetServiceConfigResponseRecord

// -------------------------------------------------------------------

// GetServiceConfigResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceConfigResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status)
  return _internal_status();
}
inline void GetServiceConfigResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceConfigResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.status)
}

// int32 count = 2;
inline void GetServiceConfigResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.count)
  return _internal_count();
}
inline void GetServiceConfigResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceConfigResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceConfigResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceConfigResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceConfigResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceConfigResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceConfigResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.ServiceDetailsResponse serviceDetailsResponse = 5;
inline int GetServiceConfigResponse::_internal_servicedetailsresponse_size() const {
  return servicedetailsresponse_.size();
}
inline int GetServiceConfigResponse::servicedetailsresponse_size() const {
  return _internal_servicedetailsresponse_size();
}
inline void GetServiceConfigResponse::clear_servicedetailsresponse() {
  servicedetailsresponse_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceConfigResponse::mutable_servicedetailsresponse(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse)
  return servicedetailsresponse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >*
GetServiceConfigResponse::mutable_servicedetailsresponse() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse)
  return &servicedetailsresponse_;
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& GetServiceConfigResponse::_internal_servicedetailsresponse(int index) const {
  return servicedetailsresponse_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse& GetServiceConfigResponse::servicedetailsresponse(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse)
  return _internal_servicedetailsresponse(index);
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceConfigResponse::_internal_add_servicedetailsresponse() {
  return servicedetailsresponse_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse* GetServiceConfigResponse::add_servicedetailsresponse() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse)
  return _internal_add_servicedetailsresponse();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::ServiceDetailsResponse >&
GetServiceConfigResponse::servicedetailsresponse() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse.serviceDetailsResponse)
  return servicedetailsresponse_;
}

// -------------------------------------------------------------------

// GetServiceConfigOnRegionNameRequest

// .farm.nurture.serviceProvider.service.proto.RequestHeaders requestHeaders = 1;
inline bool GetServiceConfigOnRegionNameRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetServiceConfigOnRegionNameRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void GetServiceConfigOnRegionNameRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigOnRegionNameRequest::_internal_requestheaders() const {
  const ::farm::nurture::serviceProvider::service::proto::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::RequestHeaders&>(
      ::farm::nurture::serviceProvider::service::proto::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::RequestHeaders& GetServiceConfigOnRegionNameRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetServiceConfigOnRegionNameRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders)
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnRegionNameRequest::release_requestheaders() {
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnRegionNameRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders)
  
  ::farm::nurture::serviceProvider::service::proto::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnRegionNameRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::serviceProvider::service::proto::RequestHeaders* GetServiceConfigOnRegionNameRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetServiceConfigOnRegionNameRequest::set_allocated_requestheaders(::farm::nurture::serviceProvider::service::proto::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestheaders_;
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestheaders);
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetServiceConfigOnRegionNameRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetServiceConfigOnRegionNameRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetServiceConfigOnRegionNameRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetServiceConfigOnRegionNameRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetServiceConfigOnRegionNameRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.isStaleAllowed)
}

// string regionName = 3;
inline void GetServiceConfigOnRegionNameRequest::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnRegionNameRequest::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
  return _internal_regionname();
}
inline void GetServiceConfigOnRegionNameRequest::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
}
inline std::string* GetServiceConfigOnRegionNameRequest::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& GetServiceConfigOnRegionNameRequest::_internal_regionname() const {
  return regionname_.Get();
}
inline void GetServiceConfigOnRegionNameRequest::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnRegionNameRequest::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
}
inline void GetServiceConfigOnRegionNameRequest::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
}
inline void GetServiceConfigOnRegionNameRequest::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
}
inline std::string* GetServiceConfigOnRegionNameRequest::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnRegionNameRequest::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnRegionNameRequest::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest.regionName)
}

// -------------------------------------------------------------------

// GetServiceConfigOnRegionNameResponseRecord

// string serviceType = 1;
inline void GetServiceConfigOnRegionNameResponseRecord::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnRegionNameResponseRecord::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
  return _internal_servicetype();
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& GetServiceConfigOnRegionNameResponseRecord::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void GetServiceConfigOnRegionNameResponseRecord::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::release_servicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceType)
}

// int64 cropId = 2;
inline void GetServiceConfigOnRegionNameResponseRecord::clear_cropid() {
  cropid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::_internal_cropid() const {
  return cropid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::cropid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.cropId)
  return _internal_cropid();
}
inline void GetServiceConfigOnRegionNameResponseRecord::_internal_set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cropid_ = value;
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_cropid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cropid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.cropId)
}

// string regionName = 3;
inline void GetServiceConfigOnRegionNameResponseRecord::clear_regionname() {
  regionname_.ClearToEmpty();
}
inline const std::string& GetServiceConfigOnRegionNameResponseRecord::regionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
  return _internal_regionname();
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_regionname(const std::string& value) {
  _internal_set_regionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::mutable_regionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
  return _internal_mutable_regionname();
}
inline const std::string& GetServiceConfigOnRegionNameResponseRecord::_internal_regionname() const {
  return regionname_.Get();
}
inline void GetServiceConfigOnRegionNameResponseRecord::_internal_set_regionname(const std::string& value) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_regionname(std::string&& value) {
  
  regionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_regionname(const char* value,
    size_t size) {
  
  regionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::_internal_mutable_regionname() {
  
  return regionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigOnRegionNameResponseRecord::release_regionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
  return regionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_allocated_regionname(std::string* regionname) {
  if (regionname != nullptr) {
    
  } else {
    
  }
  regionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.regionName)
}

// int64 section = 4;
inline void GetServiceConfigOnRegionNameResponseRecord::clear_section() {
  section_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::section() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.section)
  return _internal_section();
}
inline void GetServiceConfigOnRegionNameResponseRecord::_internal_set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  section_ = value;
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_section(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.section)
}

// int64 serviceRank = 5;
inline void GetServiceConfigOnRegionNameResponseRecord::clear_servicerank() {
  servicerank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::_internal_servicerank() const {
  return servicerank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServiceConfigOnRegionNameResponseRecord::servicerank() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceRank)
  return _internal_servicerank();
}
inline void GetServiceConfigOnRegionNameResponseRecord::_internal_set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servicerank_ = value;
}
inline void GetServiceConfigOnRegionNameResponseRecord::set_servicerank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servicerank(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord.serviceRank)
}

// -------------------------------------------------------------------

// GetServiceConfigOnRegionNameResponse

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool GetServiceConfigOnRegionNameResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetServiceConfigOnRegionNameResponse::has_status() const {
  return _internal_has_status();
}
inline void GetServiceConfigOnRegionNameResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigOnRegionNameResponse::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& GetServiceConfigOnRegionNameResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status)
  return _internal_status();
}
inline void GetServiceConfigOnRegionNameResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnRegionNameResponse::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnRegionNameResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnRegionNameResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* GetServiceConfigOnRegionNameResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status)
  return _internal_mutable_status();
}
inline void GetServiceConfigOnRegionNameResponse::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.status)
}

// int32 count = 2;
inline void GetServiceConfigOnRegionNameResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigOnRegionNameResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceConfigOnRegionNameResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.count)
  return _internal_count();
}
inline void GetServiceConfigOnRegionNameResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServiceConfigOnRegionNameResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.count)
}

// repeated .farm.nurture.serviceProvider.service.proto.Attribs attribs = 3;
inline int GetServiceConfigOnRegionNameResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetServiceConfigOnRegionNameResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline void GetServiceConfigOnRegionNameResponse::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnRegionNameResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >*
GetServiceConfigOnRegionNameResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigOnRegionNameResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Attribs& GetServiceConfigOnRegionNameResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnRegionNameResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Attribs* GetServiceConfigOnRegionNameResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Attribs >&
GetServiceConfigOnRegionNameResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponseRecord records = 4;
inline int GetServiceConfigOnRegionNameResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetServiceConfigOnRegionNameResponse::records_size() const {
  return _internal_records_size();
}
inline void GetServiceConfigOnRegionNameResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* GetServiceConfigOnRegionNameResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >*
GetServiceConfigOnRegionNameResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records)
  return &records_;
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord& GetServiceConfigOnRegionNameResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord& GetServiceConfigOnRegionNameResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* GetServiceConfigOnRegionNameResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord* GetServiceConfigOnRegionNameResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponseRecord >&
GetServiceConfigOnRegionNameResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// MultiRequests

// bool onTxn = 1;
inline void MultiRequests::clear_ontxn() {
  ontxn_ = false;
}
inline bool MultiRequests::_internal_ontxn() const {
  return ontxn_;
}
inline bool MultiRequests::ontxn() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.MultiRequests.onTxn)
  return _internal_ontxn();
}
inline void MultiRequests::_internal_set_ontxn(bool value) {
  
  ontxn_ = value;
}
inline void MultiRequests::set_ontxn(bool value) {
  _internal_set_ontxn(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.MultiRequests.onTxn)
}

// repeated .farm.nurture.serviceProvider.service.proto.Request request = 2;
inline int MultiRequests::_internal_request_size() const {
  return request_.size();
}
inline int MultiRequests::request_size() const {
  return _internal_request_size();
}
inline void MultiRequests::clear_request() {
  request_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Request* MultiRequests::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.MultiRequests.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Request >*
MultiRequests::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.MultiRequests.request)
  return &request_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Request& MultiRequests::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Request& MultiRequests::request(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.MultiRequests.request)
  return _internal_request(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Request* MultiRequests::_internal_add_request() {
  return request_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Request* MultiRequests::add_request() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.MultiRequests.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Request >&
MultiRequests::request() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.MultiRequests.request)
  return request_;
}

// -------------------------------------------------------------------

// Request

// string index = 1;
inline void Request::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Request::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.index)
  return _internal_index();
}
inline void Request::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Request.index)
}
inline std::string* Request::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.index)
  return _internal_mutable_index();
}
inline const std::string& Request::_internal_index() const {
  return index_.Get();
}
inline void Request::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.Request.index)
}
inline void Request::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.Request.index)
}
inline void Request::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.Request.index)
}
inline std::string* Request::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Request.index)
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderRequest reqAddServiceProvider = 2;
inline bool Request::_internal_has_reqaddserviceprovider() const {
  return ARequest_case() == kReqAddServiceProvider;
}
inline bool Request::has_reqaddserviceprovider() const {
  return _internal_has_reqaddserviceprovider();
}
inline void Request::set_has_reqaddserviceprovider() {
  _oneof_case_[0] = kReqAddServiceProvider;
}
inline void Request::clear_reqaddserviceprovider() {
  if (_internal_has_reqaddserviceprovider()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceprovider_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Request::release_reqaddserviceprovider() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
  if (_internal_has_reqaddserviceprovider()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* temp = ARequest_.reqaddserviceprovider_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& Request::_internal_reqaddserviceprovider() const {
  return _internal_has_reqaddserviceprovider()
      ? *ARequest_.reqaddserviceprovider_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest& Request::reqaddserviceprovider() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
  return _internal_reqaddserviceprovider();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Request::unsafe_arena_release_reqaddserviceprovider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
  if (_internal_has_reqaddserviceprovider()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* temp = ARequest_.reqaddserviceprovider_;
    ARequest_.reqaddserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* reqaddserviceprovider) {
  clear_ARequest();
  if (reqaddserviceprovider) {
    set_has_reqaddserviceprovider();
    ARequest_.reqaddserviceprovider_ = reqaddserviceprovider;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Request::_internal_mutable_reqaddserviceprovider() {
  if (!_internal_has_reqaddserviceprovider()) {
    clear_ARequest();
    set_has_reqaddserviceprovider();
    ARequest_.reqaddserviceprovider_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest >(GetArena());
  }
  return ARequest_.reqaddserviceprovider_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderRequest* Request::mutable_reqaddserviceprovider() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProvider)
  return _internal_mutable_reqaddserviceprovider();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderRequest reqAddServiceProviderBulk = 3;
inline bool Request::_internal_has_reqaddserviceproviderbulk() const {
  return ARequest_case() == kReqAddServiceProviderBulk;
}
inline bool Request::has_reqaddserviceproviderbulk() const {
  return _internal_has_reqaddserviceproviderbulk();
}
inline void Request::set_has_reqaddserviceproviderbulk() {
  _oneof_case_[0] = kReqAddServiceProviderBulk;
}
inline void Request::clear_reqaddserviceproviderbulk() {
  if (_internal_has_reqaddserviceproviderbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceproviderbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Request::release_reqaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
  if (_internal_has_reqaddserviceproviderbulk()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* temp = ARequest_.reqaddserviceproviderbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceproviderbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest& Request::_internal_reqaddserviceproviderbulk() const {
  return _internal_has_reqaddserviceproviderbulk()
      ? *ARequest_.reqaddserviceproviderbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest& Request::reqaddserviceproviderbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
  return _internal_reqaddserviceproviderbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Request::unsafe_arena_release_reqaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
  if (_internal_has_reqaddserviceproviderbulk()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* temp = ARequest_.reqaddserviceproviderbulk_;
    ARequest_.reqaddserviceproviderbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* reqaddserviceproviderbulk) {
  clear_ARequest();
  if (reqaddserviceproviderbulk) {
    set_has_reqaddserviceproviderbulk();
    ARequest_.reqaddserviceproviderbulk_ = reqaddserviceproviderbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Request::_internal_mutable_reqaddserviceproviderbulk() {
  if (!_internal_has_reqaddserviceproviderbulk()) {
    clear_ARequest();
    set_has_reqaddserviceproviderbulk();
    ARequest_.reqaddserviceproviderbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest >(GetArena());
  }
  return ARequest_.reqaddserviceproviderbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderRequest* Request::mutable_reqaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderBulk)
  return _internal_mutable_reqaddserviceproviderbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceLocationRequest reqAddServiceLocation = 4;
inline bool Request::_internal_has_reqaddservicelocation() const {
  return ARequest_case() == kReqAddServiceLocation;
}
inline bool Request::has_reqaddservicelocation() const {
  return _internal_has_reqaddservicelocation();
}
inline void Request::set_has_reqaddservicelocation() {
  _oneof_case_[0] = kReqAddServiceLocation;
}
inline void Request::clear_reqaddservicelocation() {
  if (_internal_has_reqaddservicelocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddservicelocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Request::release_reqaddservicelocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
  if (_internal_has_reqaddservicelocation()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* temp = ARequest_.reqaddservicelocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddservicelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& Request::_internal_reqaddservicelocation() const {
  return _internal_has_reqaddservicelocation()
      ? *ARequest_.reqaddservicelocation_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServiceLocationRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest& Request::reqaddservicelocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
  return _internal_reqaddservicelocation();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Request::unsafe_arena_release_reqaddservicelocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
  if (_internal_has_reqaddservicelocation()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* temp = ARequest_.reqaddservicelocation_;
    ARequest_.reqaddservicelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* reqaddservicelocation) {
  clear_ARequest();
  if (reqaddservicelocation) {
    set_has_reqaddservicelocation();
    ARequest_.reqaddservicelocation_ = reqaddservicelocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Request::_internal_mutable_reqaddservicelocation() {
  if (!_internal_has_reqaddservicelocation()) {
    clear_ARequest();
    set_has_reqaddservicelocation();
    ARequest_.reqaddservicelocation_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest >(GetArena());
  }
  return ARequest_.reqaddservicelocation_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationRequest* Request::mutable_reqaddservicelocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocation)
  return _internal_mutable_reqaddservicelocation();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationRequest reqAddServiceLocationBulk = 5;
inline bool Request::_internal_has_reqaddservicelocationbulk() const {
  return ARequest_case() == kReqAddServiceLocationBulk;
}
inline bool Request::has_reqaddservicelocationbulk() const {
  return _internal_has_reqaddservicelocationbulk();
}
inline void Request::set_has_reqaddservicelocationbulk() {
  _oneof_case_[0] = kReqAddServiceLocationBulk;
}
inline void Request::clear_reqaddservicelocationbulk() {
  if (_internal_has_reqaddservicelocationbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddservicelocationbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Request::release_reqaddservicelocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
  if (_internal_has_reqaddservicelocationbulk()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* temp = ARequest_.reqaddservicelocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddservicelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest& Request::_internal_reqaddservicelocationbulk() const {
  return _internal_has_reqaddservicelocationbulk()
      ? *ARequest_.reqaddservicelocationbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest& Request::reqaddservicelocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
  return _internal_reqaddservicelocationbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Request::unsafe_arena_release_reqaddservicelocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
  if (_internal_has_reqaddservicelocationbulk()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* temp = ARequest_.reqaddservicelocationbulk_;
    ARequest_.reqaddservicelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* reqaddservicelocationbulk) {
  clear_ARequest();
  if (reqaddservicelocationbulk) {
    set_has_reqaddservicelocationbulk();
    ARequest_.reqaddservicelocationbulk_ = reqaddservicelocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Request::_internal_mutable_reqaddservicelocationbulk() {
  if (!_internal_has_reqaddservicelocationbulk()) {
    clear_ARequest();
    set_has_reqaddservicelocationbulk();
    ARequest_.reqaddservicelocationbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest >(GetArena());
  }
  return ARequest_.reqaddservicelocationbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationRequest* Request::mutable_reqaddservicelocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceLocationBulk)
  return _internal_mutable_reqaddservicelocationbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServicesRequest reqAddServices = 6;
inline bool Request::_internal_has_reqaddservices() const {
  return ARequest_case() == kReqAddServices;
}
inline bool Request::has_reqaddservices() const {
  return _internal_has_reqaddservices();
}
inline void Request::set_has_reqaddservices() {
  _oneof_case_[0] = kReqAddServices;
}
inline void Request::clear_reqaddservices() {
  if (_internal_has_reqaddservices()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddservices_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Request::release_reqaddservices() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
  if (_internal_has_reqaddservices()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* temp = ARequest_.reqaddservices_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddservices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& Request::_internal_reqaddservices() const {
  return _internal_has_reqaddservices()
      ? *ARequest_.reqaddservices_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServicesRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesRequest& Request::reqaddservices() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
  return _internal_reqaddservices();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Request::unsafe_arena_release_reqaddservices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
  if (_internal_has_reqaddservices()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* temp = ARequest_.reqaddservices_;
    ARequest_.reqaddservices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesRequest* reqaddservices) {
  clear_ARequest();
  if (reqaddservices) {
    set_has_reqaddservices();
    ARequest_.reqaddservices_ = reqaddservices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Request::_internal_mutable_reqaddservices() {
  if (!_internal_has_reqaddservices()) {
    clear_ARequest();
    set_has_reqaddservices();
    ARequest_.reqaddservices_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServicesRequest >(GetArena());
  }
  return ARequest_.reqaddservices_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesRequest* Request::mutable_reqaddservices() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServices)
  return _internal_mutable_reqaddservices();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServicesRequest reqAddServicesBulk = 7;
inline bool Request::_internal_has_reqaddservicesbulk() const {
  return ARequest_case() == kReqAddServicesBulk;
}
inline bool Request::has_reqaddservicesbulk() const {
  return _internal_has_reqaddservicesbulk();
}
inline void Request::set_has_reqaddservicesbulk() {
  _oneof_case_[0] = kReqAddServicesBulk;
}
inline void Request::clear_reqaddservicesbulk() {
  if (_internal_has_reqaddservicesbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddservicesbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Request::release_reqaddservicesbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
  if (_internal_has_reqaddservicesbulk()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* temp = ARequest_.reqaddservicesbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddservicesbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest& Request::_internal_reqaddservicesbulk() const {
  return _internal_has_reqaddservicesbulk()
      ? *ARequest_.reqaddservicesbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServicesRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest& Request::reqaddservicesbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
  return _internal_reqaddservicesbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Request::unsafe_arena_release_reqaddservicesbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
  if (_internal_has_reqaddservicesbulk()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* temp = ARequest_.reqaddservicesbulk_;
    ARequest_.reqaddservicesbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* reqaddservicesbulk) {
  clear_ARequest();
  if (reqaddservicesbulk) {
    set_has_reqaddservicesbulk();
    ARequest_.reqaddservicesbulk_ = reqaddservicesbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Request::_internal_mutable_reqaddservicesbulk() {
  if (!_internal_has_reqaddservicesbulk()) {
    clear_ARequest();
    set_has_reqaddservicesbulk();
    ARequest_.reqaddservicesbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest >(GetArena());
  }
  return ARequest_.reqaddservicesbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesRequest* Request::mutable_reqaddservicesbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServicesBulk)
  return _internal_mutable_reqaddservicesbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingRequest reqAddServiceProviderMapping = 8;
inline bool Request::_internal_has_reqaddserviceprovidermapping() const {
  return ARequest_case() == kReqAddServiceProviderMapping;
}
inline bool Request::has_reqaddserviceprovidermapping() const {
  return _internal_has_reqaddserviceprovidermapping();
}
inline void Request::set_has_reqaddserviceprovidermapping() {
  _oneof_case_[0] = kReqAddServiceProviderMapping;
}
inline void Request::clear_reqaddserviceprovidermapping() {
  if (_internal_has_reqaddserviceprovidermapping()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceprovidermapping_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Request::release_reqaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
  if (_internal_has_reqaddserviceprovidermapping()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* temp = ARequest_.reqaddserviceprovidermapping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceprovidermapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& Request::_internal_reqaddserviceprovidermapping() const {
  return _internal_has_reqaddserviceprovidermapping()
      ? *ARequest_.reqaddserviceprovidermapping_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest& Request::reqaddserviceprovidermapping() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
  return _internal_reqaddserviceprovidermapping();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Request::unsafe_arena_release_reqaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
  if (_internal_has_reqaddserviceprovidermapping()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* temp = ARequest_.reqaddserviceprovidermapping_;
    ARequest_.reqaddserviceprovidermapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* reqaddserviceprovidermapping) {
  clear_ARequest();
  if (reqaddserviceprovidermapping) {
    set_has_reqaddserviceprovidermapping();
    ARequest_.reqaddserviceprovidermapping_ = reqaddserviceprovidermapping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Request::_internal_mutable_reqaddserviceprovidermapping() {
  if (!_internal_has_reqaddserviceprovidermapping()) {
    clear_ARequest();
    set_has_reqaddserviceprovidermapping();
    ARequest_.reqaddserviceprovidermapping_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest >(GetArena());
  }
  return ARequest_.reqaddserviceprovidermapping_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingRequest* Request::mutable_reqaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMapping)
  return _internal_mutable_reqaddserviceprovidermapping();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingRequest reqAddServiceProviderMappingBulk = 9;
inline bool Request::_internal_has_reqaddserviceprovidermappingbulk() const {
  return ARequest_case() == kReqAddServiceProviderMappingBulk;
}
inline bool Request::has_reqaddserviceprovidermappingbulk() const {
  return _internal_has_reqaddserviceprovidermappingbulk();
}
inline void Request::set_has_reqaddserviceprovidermappingbulk() {
  _oneof_case_[0] = kReqAddServiceProviderMappingBulk;
}
inline void Request::clear_reqaddserviceprovidermappingbulk() {
  if (_internal_has_reqaddserviceprovidermappingbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceprovidermappingbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Request::release_reqaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
  if (_internal_has_reqaddserviceprovidermappingbulk()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* temp = ARequest_.reqaddserviceprovidermappingbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceprovidermappingbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest& Request::_internal_reqaddserviceprovidermappingbulk() const {
  return _internal_has_reqaddserviceprovidermappingbulk()
      ? *ARequest_.reqaddserviceprovidermappingbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest& Request::reqaddserviceprovidermappingbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
  return _internal_reqaddserviceprovidermappingbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Request::unsafe_arena_release_reqaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
  if (_internal_has_reqaddserviceprovidermappingbulk()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* temp = ARequest_.reqaddserviceprovidermappingbulk_;
    ARequest_.reqaddserviceprovidermappingbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* reqaddserviceprovidermappingbulk) {
  clear_ARequest();
  if (reqaddserviceprovidermappingbulk) {
    set_has_reqaddserviceprovidermappingbulk();
    ARequest_.reqaddserviceprovidermappingbulk_ = reqaddserviceprovidermappingbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Request::_internal_mutable_reqaddserviceprovidermappingbulk() {
  if (!_internal_has_reqaddserviceprovidermappingbulk()) {
    clear_ARequest();
    set_has_reqaddserviceprovidermappingbulk();
    ARequest_.reqaddserviceprovidermappingbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest >(GetArena());
  }
  return ARequest_.reqaddserviceprovidermappingbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingRequest* Request::mutable_reqaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderMappingBulk)
  return _internal_mutable_reqaddserviceprovidermappingbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceConfigRequest reqAddServiceConfig = 10;
inline bool Request::_internal_has_reqaddserviceconfig() const {
  return ARequest_case() == kReqAddServiceConfig;
}
inline bool Request::has_reqaddserviceconfig() const {
  return _internal_has_reqaddserviceconfig();
}
inline void Request::set_has_reqaddserviceconfig() {
  _oneof_case_[0] = kReqAddServiceConfig;
}
inline void Request::clear_reqaddserviceconfig() {
  if (_internal_has_reqaddserviceconfig()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceconfig_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Request::release_reqaddserviceconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
  if (_internal_has_reqaddserviceconfig()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* temp = ARequest_.reqaddserviceconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& Request::_internal_reqaddserviceconfig() const {
  return _internal_has_reqaddserviceconfig()
      ? *ARequest_.reqaddserviceconfig_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServiceConfigRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest& Request::reqaddserviceconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
  return _internal_reqaddserviceconfig();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Request::unsafe_arena_release_reqaddserviceconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
  if (_internal_has_reqaddserviceconfig()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* temp = ARequest_.reqaddserviceconfig_;
    ARequest_.reqaddserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* reqaddserviceconfig) {
  clear_ARequest();
  if (reqaddserviceconfig) {
    set_has_reqaddserviceconfig();
    ARequest_.reqaddserviceconfig_ = reqaddserviceconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Request::_internal_mutable_reqaddserviceconfig() {
  if (!_internal_has_reqaddserviceconfig()) {
    clear_ARequest();
    set_has_reqaddserviceconfig();
    ARequest_.reqaddserviceconfig_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest >(GetArena());
  }
  return ARequest_.reqaddserviceconfig_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigRequest* Request::mutable_reqaddserviceconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfig)
  return _internal_mutable_reqaddserviceconfig();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigRequest reqAddServiceConfigBulk = 11;
inline bool Request::_internal_has_reqaddserviceconfigbulk() const {
  return ARequest_case() == kReqAddServiceConfigBulk;
}
inline bool Request::has_reqaddserviceconfigbulk() const {
  return _internal_has_reqaddserviceconfigbulk();
}
inline void Request::set_has_reqaddserviceconfigbulk() {
  _oneof_case_[0] = kReqAddServiceConfigBulk;
}
inline void Request::clear_reqaddserviceconfigbulk() {
  if (_internal_has_reqaddserviceconfigbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceconfigbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Request::release_reqaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
  if (_internal_has_reqaddserviceconfigbulk()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* temp = ARequest_.reqaddserviceconfigbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest& Request::_internal_reqaddserviceconfigbulk() const {
  return _internal_has_reqaddserviceconfigbulk()
      ? *ARequest_.reqaddserviceconfigbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest& Request::reqaddserviceconfigbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
  return _internal_reqaddserviceconfigbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Request::unsafe_arena_release_reqaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
  if (_internal_has_reqaddserviceconfigbulk()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* temp = ARequest_.reqaddserviceconfigbulk_;
    ARequest_.reqaddserviceconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* reqaddserviceconfigbulk) {
  clear_ARequest();
  if (reqaddserviceconfigbulk) {
    set_has_reqaddserviceconfigbulk();
    ARequest_.reqaddserviceconfigbulk_ = reqaddserviceconfigbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Request::_internal_mutable_reqaddserviceconfigbulk() {
  if (!_internal_has_reqaddserviceconfigbulk()) {
    clear_ARequest();
    set_has_reqaddserviceconfigbulk();
    ARequest_.reqaddserviceconfigbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest >(GetArena());
  }
  return ARequest_.reqaddserviceconfigbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigRequest* Request::mutable_reqaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceConfigBulk)
  return _internal_mutable_reqaddserviceconfigbulk();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderRequest reqGetServiceProvider = 12;
inline bool Request::_internal_has_reqgetserviceprovider() const {
  return ARequest_case() == kReqGetServiceProvider;
}
inline bool Request::has_reqgetserviceprovider() const {
  return _internal_has_reqgetserviceprovider();
}
inline void Request::set_has_reqgetserviceprovider() {
  _oneof_case_[0] = kReqGetServiceProvider;
}
inline void Request::clear_reqgetserviceprovider() {
  if (_internal_has_reqgetserviceprovider()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceprovider_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Request::release_reqgetserviceprovider() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
  if (_internal_has_reqgetserviceprovider()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* temp = ARequest_.reqgetserviceprovider_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest& Request::_internal_reqgetserviceprovider() const {
  return _internal_has_reqgetserviceprovider()
      ? *ARequest_.reqgetserviceprovider_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest& Request::reqgetserviceprovider() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
  return _internal_reqgetserviceprovider();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Request::unsafe_arena_release_reqgetserviceprovider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
  if (_internal_has_reqgetserviceprovider()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* temp = ARequest_.reqgetserviceprovider_;
    ARequest_.reqgetserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* reqgetserviceprovider) {
  clear_ARequest();
  if (reqgetserviceprovider) {
    set_has_reqgetserviceprovider();
    ARequest_.reqgetserviceprovider_ = reqgetserviceprovider;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Request::_internal_mutable_reqgetserviceprovider() {
  if (!_internal_has_reqgetserviceprovider()) {
    clear_ARequest();
    set_has_reqgetserviceprovider();
    ARequest_.reqgetserviceprovider_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest >(GetArena());
  }
  return ARequest_.reqgetserviceprovider_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderRequest* Request::mutable_reqgetserviceprovider() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProvider)
  return _internal_mutable_reqgetserviceprovider();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelRequest reqAddServiceProviderFromExcel = 13;
inline bool Request::_internal_has_reqaddserviceproviderfromexcel() const {
  return ARequest_case() == kReqAddServiceProviderFromExcel;
}
inline bool Request::has_reqaddserviceproviderfromexcel() const {
  return _internal_has_reqaddserviceproviderfromexcel();
}
inline void Request::set_has_reqaddserviceproviderfromexcel() {
  _oneof_case_[0] = kReqAddServiceProviderFromExcel;
}
inline void Request::clear_reqaddserviceproviderfromexcel() {
  if (_internal_has_reqaddserviceproviderfromexcel()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddserviceproviderfromexcel_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Request::release_reqaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
  if (_internal_has_reqaddserviceproviderfromexcel()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* temp = ARequest_.reqaddserviceproviderfromexcel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddserviceproviderfromexcel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest& Request::_internal_reqaddserviceproviderfromexcel() const {
  return _internal_has_reqaddserviceproviderfromexcel()
      ? *ARequest_.reqaddserviceproviderfromexcel_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest& Request::reqaddserviceproviderfromexcel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
  return _internal_reqaddserviceproviderfromexcel();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Request::unsafe_arena_release_reqaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
  if (_internal_has_reqaddserviceproviderfromexcel()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* temp = ARequest_.reqaddserviceproviderfromexcel_;
    ARequest_.reqaddserviceproviderfromexcel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* reqaddserviceproviderfromexcel) {
  clear_ARequest();
  if (reqaddserviceproviderfromexcel) {
    set_has_reqaddserviceproviderfromexcel();
    ARequest_.reqaddserviceproviderfromexcel_ = reqaddserviceproviderfromexcel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Request::_internal_mutable_reqaddserviceproviderfromexcel() {
  if (!_internal_has_reqaddserviceproviderfromexcel()) {
    clear_ARequest();
    set_has_reqaddserviceproviderfromexcel();
    ARequest_.reqaddserviceproviderfromexcel_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest >(GetArena());
  }
  return ARequest_.reqaddserviceproviderfromexcel_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelRequest* Request::mutable_reqaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqAddServiceProviderFromExcel)
  return _internal_mutable_reqaddserviceproviderfromexcel();
}

// .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongRequest reqGetSDTVOnLatLong = 14;
inline bool Request::_internal_has_reqgetsdtvonlatlong() const {
  return ARequest_case() == kReqGetSDTVOnLatLong;
}
inline bool Request::has_reqgetsdtvonlatlong() const {
  return _internal_has_reqgetsdtvonlatlong();
}
inline void Request::set_has_reqgetsdtvonlatlong() {
  _oneof_case_[0] = kReqGetSDTVOnLatLong;
}
inline void Request::clear_reqgetsdtvonlatlong() {
  if (_internal_has_reqgetsdtvonlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetsdtvonlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Request::release_reqgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
  if (_internal_has_reqgetsdtvonlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* temp = ARequest_.reqgetsdtvonlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetsdtvonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest& Request::_internal_reqgetsdtvonlatlong() const {
  return _internal_has_reqgetsdtvonlatlong()
      ? *ARequest_.reqgetsdtvonlatlong_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest&>(::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest& Request::reqgetsdtvonlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
  return _internal_reqgetsdtvonlatlong();
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Request::unsafe_arena_release_reqgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
  if (_internal_has_reqgetsdtvonlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* temp = ARequest_.reqgetsdtvonlatlong_;
    ARequest_.reqgetsdtvonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* reqgetsdtvonlatlong) {
  clear_ARequest();
  if (reqgetsdtvonlatlong) {
    set_has_reqgetsdtvonlatlong();
    ARequest_.reqgetsdtvonlatlong_ = reqgetsdtvonlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Request::_internal_mutable_reqgetsdtvonlatlong() {
  if (!_internal_has_reqgetsdtvonlatlong()) {
    clear_ARequest();
    set_has_reqgetsdtvonlatlong();
    ARequest_.reqgetsdtvonlatlong_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest >(GetArena());
  }
  return ARequest_.reqgetsdtvonlatlong_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongRequest* Request::mutable_reqgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetSDTVOnLatLong)
  return _internal_mutable_reqgetsdtvonlatlong();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongRequest reqGetServiceDetailsOnLatLong = 15;
inline bool Request::_internal_has_reqgetservicedetailsonlatlong() const {
  return ARequest_case() == kReqGetServiceDetailsOnLatLong;
}
inline bool Request::has_reqgetservicedetailsonlatlong() const {
  return _internal_has_reqgetservicedetailsonlatlong();
}
inline void Request::set_has_reqgetservicedetailsonlatlong() {
  _oneof_case_[0] = kReqGetServiceDetailsOnLatLong;
}
inline void Request::clear_reqgetservicedetailsonlatlong() {
  if (_internal_has_reqgetservicedetailsonlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetservicedetailsonlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Request::release_reqgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
  if (_internal_has_reqgetservicedetailsonlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* temp = ARequest_.reqgetservicedetailsonlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetservicedetailsonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest& Request::_internal_reqgetservicedetailsonlatlong() const {
  return _internal_has_reqgetservicedetailsonlatlong()
      ? *ARequest_.reqgetservicedetailsonlatlong_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest& Request::reqgetservicedetailsonlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
  return _internal_reqgetservicedetailsonlatlong();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Request::unsafe_arena_release_reqgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
  if (_internal_has_reqgetservicedetailsonlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* temp = ARequest_.reqgetservicedetailsonlatlong_;
    ARequest_.reqgetservicedetailsonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* reqgetservicedetailsonlatlong) {
  clear_ARequest();
  if (reqgetservicedetailsonlatlong) {
    set_has_reqgetservicedetailsonlatlong();
    ARequest_.reqgetservicedetailsonlatlong_ = reqgetservicedetailsonlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Request::_internal_mutable_reqgetservicedetailsonlatlong() {
  if (!_internal_has_reqgetservicedetailsonlatlong()) {
    clear_ARequest();
    set_has_reqgetservicedetailsonlatlong();
    ARequest_.reqgetservicedetailsonlatlong_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest >(GetArena());
  }
  return ARequest_.reqgetservicedetailsonlatlong_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongRequest* Request::mutable_reqgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceDetailsOnLatLong)
  return _internal_mutable_reqgetservicedetailsonlatlong();
}

// .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeRequest reqGetServicesOnServiceNameAndServiceType = 16;
inline bool Request::_internal_has_reqgetservicesonservicenameandservicetype() const {
  return ARequest_case() == kReqGetServicesOnServiceNameAndServiceType;
}
inline bool Request::has_reqgetservicesonservicenameandservicetype() const {
  return _internal_has_reqgetservicesonservicenameandservicetype();
}
inline void Request::set_has_reqgetservicesonservicenameandservicetype() {
  _oneof_case_[0] = kReqGetServicesOnServiceNameAndServiceType;
}
inline void Request::clear_reqgetservicesonservicenameandservicetype() {
  if (_internal_has_reqgetservicesonservicenameandservicetype()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetservicesonservicenameandservicetype_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Request::release_reqgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
  if (_internal_has_reqgetservicesonservicenameandservicetype()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* temp = ARequest_.reqgetservicesonservicenameandservicetype_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetservicesonservicenameandservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest& Request::_internal_reqgetservicesonservicenameandservicetype() const {
  return _internal_has_reqgetservicesonservicenameandservicetype()
      ? *ARequest_.reqgetservicesonservicenameandservicetype_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest& Request::reqgetservicesonservicenameandservicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
  return _internal_reqgetservicesonservicenameandservicetype();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Request::unsafe_arena_release_reqgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
  if (_internal_has_reqgetservicesonservicenameandservicetype()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* temp = ARequest_.reqgetservicesonservicenameandservicetype_;
    ARequest_.reqgetservicesonservicenameandservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* reqgetservicesonservicenameandservicetype) {
  clear_ARequest();
  if (reqgetservicesonservicenameandservicetype) {
    set_has_reqgetservicesonservicenameandservicetype();
    ARequest_.reqgetservicesonservicenameandservicetype_ = reqgetservicesonservicenameandservicetype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Request::_internal_mutable_reqgetservicesonservicenameandservicetype() {
  if (!_internal_has_reqgetservicesonservicenameandservicetype()) {
    clear_ARequest();
    set_has_reqgetservicesonservicenameandservicetype();
    ARequest_.reqgetservicesonservicenameandservicetype_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest >(GetArena());
  }
  return ARequest_.reqgetservicesonservicenameandservicetype_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeRequest* Request::mutable_reqgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServicesOnServiceNameAndServiceType)
  return _internal_mutable_reqgetservicesonservicenameandservicetype();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberRequest reqGetServiceProviderOnMobileNumber = 17;
inline bool Request::_internal_has_reqgetserviceprovideronmobilenumber() const {
  return ARequest_case() == kReqGetServiceProviderOnMobileNumber;
}
inline bool Request::has_reqgetserviceprovideronmobilenumber() const {
  return _internal_has_reqgetserviceprovideronmobilenumber();
}
inline void Request::set_has_reqgetserviceprovideronmobilenumber() {
  _oneof_case_[0] = kReqGetServiceProviderOnMobileNumber;
}
inline void Request::clear_reqgetserviceprovideronmobilenumber() {
  if (_internal_has_reqgetserviceprovideronmobilenumber()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceprovideronmobilenumber_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Request::release_reqgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
  if (_internal_has_reqgetserviceprovideronmobilenumber()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* temp = ARequest_.reqgetserviceprovideronmobilenumber_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceprovideronmobilenumber_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest& Request::_internal_reqgetserviceprovideronmobilenumber() const {
  return _internal_has_reqgetserviceprovideronmobilenumber()
      ? *ARequest_.reqgetserviceprovideronmobilenumber_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest& Request::reqgetserviceprovideronmobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
  return _internal_reqgetserviceprovideronmobilenumber();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Request::unsafe_arena_release_reqgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
  if (_internal_has_reqgetserviceprovideronmobilenumber()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* temp = ARequest_.reqgetserviceprovideronmobilenumber_;
    ARequest_.reqgetserviceprovideronmobilenumber_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* reqgetserviceprovideronmobilenumber) {
  clear_ARequest();
  if (reqgetserviceprovideronmobilenumber) {
    set_has_reqgetserviceprovideronmobilenumber();
    ARequest_.reqgetserviceprovideronmobilenumber_ = reqgetserviceprovideronmobilenumber;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Request::_internal_mutable_reqgetserviceprovideronmobilenumber() {
  if (!_internal_has_reqgetserviceprovideronmobilenumber()) {
    clear_ARequest();
    set_has_reqgetserviceprovideronmobilenumber();
    ARequest_.reqgetserviceprovideronmobilenumber_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest >(GetArena());
  }
  return ARequest_.reqgetserviceprovideronmobilenumber_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberRequest* Request::mutable_reqgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnMobileNumber)
  return _internal_mutable_reqgetserviceprovideronmobilenumber();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameRequest reqGetServiceLocationOnRegionName = 18;
inline bool Request::_internal_has_reqgetservicelocationonregionname() const {
  return ARequest_case() == kReqGetServiceLocationOnRegionName;
}
inline bool Request::has_reqgetservicelocationonregionname() const {
  return _internal_has_reqgetservicelocationonregionname();
}
inline void Request::set_has_reqgetservicelocationonregionname() {
  _oneof_case_[0] = kReqGetServiceLocationOnRegionName;
}
inline void Request::clear_reqgetservicelocationonregionname() {
  if (_internal_has_reqgetservicelocationonregionname()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetservicelocationonregionname_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Request::release_reqgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
  if (_internal_has_reqgetservicelocationonregionname()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* temp = ARequest_.reqgetservicelocationonregionname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetservicelocationonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest& Request::_internal_reqgetservicelocationonregionname() const {
  return _internal_has_reqgetservicelocationonregionname()
      ? *ARequest_.reqgetservicelocationonregionname_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest& Request::reqgetservicelocationonregionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
  return _internal_reqgetservicelocationonregionname();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Request::unsafe_arena_release_reqgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
  if (_internal_has_reqgetservicelocationonregionname()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* temp = ARequest_.reqgetservicelocationonregionname_;
    ARequest_.reqgetservicelocationonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* reqgetservicelocationonregionname) {
  clear_ARequest();
  if (reqgetservicelocationonregionname) {
    set_has_reqgetservicelocationonregionname();
    ARequest_.reqgetservicelocationonregionname_ = reqgetservicelocationonregionname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Request::_internal_mutable_reqgetservicelocationonregionname() {
  if (!_internal_has_reqgetservicelocationonregionname()) {
    clear_ARequest();
    set_has_reqgetservicelocationonregionname();
    ARequest_.reqgetservicelocationonregionname_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest >(GetArena());
  }
  return ARequest_.reqgetservicelocationonregionname_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameRequest* Request::mutable_reqgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceLocationOnRegionName)
  return _internal_mutable_reqgetservicelocationonregionname();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionRequest reqGetServiceConfigOnCondition = 19;
inline bool Request::_internal_has_reqgetserviceconfigoncondition() const {
  return ARequest_case() == kReqGetServiceConfigOnCondition;
}
inline bool Request::has_reqgetserviceconfigoncondition() const {
  return _internal_has_reqgetserviceconfigoncondition();
}
inline void Request::set_has_reqgetserviceconfigoncondition() {
  _oneof_case_[0] = kReqGetServiceConfigOnCondition;
}
inline void Request::clear_reqgetserviceconfigoncondition() {
  if (_internal_has_reqgetserviceconfigoncondition()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceconfigoncondition_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Request::release_reqgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
  if (_internal_has_reqgetserviceconfigoncondition()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* temp = ARequest_.reqgetserviceconfigoncondition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceconfigoncondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest& Request::_internal_reqgetserviceconfigoncondition() const {
  return _internal_has_reqgetserviceconfigoncondition()
      ? *ARequest_.reqgetserviceconfigoncondition_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest& Request::reqgetserviceconfigoncondition() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
  return _internal_reqgetserviceconfigoncondition();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Request::unsafe_arena_release_reqgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
  if (_internal_has_reqgetserviceconfigoncondition()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* temp = ARequest_.reqgetserviceconfigoncondition_;
    ARequest_.reqgetserviceconfigoncondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* reqgetserviceconfigoncondition) {
  clear_ARequest();
  if (reqgetserviceconfigoncondition) {
    set_has_reqgetserviceconfigoncondition();
    ARequest_.reqgetserviceconfigoncondition_ = reqgetserviceconfigoncondition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Request::_internal_mutable_reqgetserviceconfigoncondition() {
  if (!_internal_has_reqgetserviceconfigoncondition()) {
    clear_ARequest();
    set_has_reqgetserviceconfigoncondition();
    ARequest_.reqgetserviceconfigoncondition_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest >(GetArena());
  }
  return ARequest_.reqgetserviceconfigoncondition_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionRequest* Request::mutable_reqgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnCondition)
  return _internal_mutable_reqgetserviceconfigoncondition();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeRequest reqGetServiceProviderOnServiceType = 20;
inline bool Request::_internal_has_reqgetserviceprovideronservicetype() const {
  return ARequest_case() == kReqGetServiceProviderOnServiceType;
}
inline bool Request::has_reqgetserviceprovideronservicetype() const {
  return _internal_has_reqgetserviceprovideronservicetype();
}
inline void Request::set_has_reqgetserviceprovideronservicetype() {
  _oneof_case_[0] = kReqGetServiceProviderOnServiceType;
}
inline void Request::clear_reqgetserviceprovideronservicetype() {
  if (_internal_has_reqgetserviceprovideronservicetype()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceprovideronservicetype_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Request::release_reqgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
  if (_internal_has_reqgetserviceprovideronservicetype()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* temp = ARequest_.reqgetserviceprovideronservicetype_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceprovideronservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest& Request::_internal_reqgetserviceprovideronservicetype() const {
  return _internal_has_reqgetserviceprovideronservicetype()
      ? *ARequest_.reqgetserviceprovideronservicetype_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest& Request::reqgetserviceprovideronservicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
  return _internal_reqgetserviceprovideronservicetype();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Request::unsafe_arena_release_reqgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
  if (_internal_has_reqgetserviceprovideronservicetype()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* temp = ARequest_.reqgetserviceprovideronservicetype_;
    ARequest_.reqgetserviceprovideronservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* reqgetserviceprovideronservicetype) {
  clear_ARequest();
  if (reqgetserviceprovideronservicetype) {
    set_has_reqgetserviceprovideronservicetype();
    ARequest_.reqgetserviceprovideronservicetype_ = reqgetserviceprovideronservicetype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Request::_internal_mutable_reqgetserviceprovideronservicetype() {
  if (!_internal_has_reqgetserviceprovideronservicetype()) {
    clear_ARequest();
    set_has_reqgetserviceprovideronservicetype();
    ARequest_.reqgetserviceprovideronservicetype_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest >(GetArena());
  }
  return ARequest_.reqgetserviceprovideronservicetype_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeRequest* Request::mutable_reqgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceProviderOnServiceType)
  return _internal_mutable_reqgetserviceprovideronservicetype();
}

// .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdRequest reqGetLocationOnServiceProviderId = 21;
inline bool Request::_internal_has_reqgetlocationonserviceproviderid() const {
  return ARequest_case() == kReqGetLocationOnServiceProviderId;
}
inline bool Request::has_reqgetlocationonserviceproviderid() const {
  return _internal_has_reqgetlocationonserviceproviderid();
}
inline void Request::set_has_reqgetlocationonserviceproviderid() {
  _oneof_case_[0] = kReqGetLocationOnServiceProviderId;
}
inline void Request::clear_reqgetlocationonserviceproviderid() {
  if (_internal_has_reqgetlocationonserviceproviderid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetlocationonserviceproviderid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Request::release_reqgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
  if (_internal_has_reqgetlocationonserviceproviderid()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* temp = ARequest_.reqgetlocationonserviceproviderid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetlocationonserviceproviderid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest& Request::_internal_reqgetlocationonserviceproviderid() const {
  return _internal_has_reqgetlocationonserviceproviderid()
      ? *ARequest_.reqgetlocationonserviceproviderid_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest&>(::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest& Request::reqgetlocationonserviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
  return _internal_reqgetlocationonserviceproviderid();
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Request::unsafe_arena_release_reqgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
  if (_internal_has_reqgetlocationonserviceproviderid()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* temp = ARequest_.reqgetlocationonserviceproviderid_;
    ARequest_.reqgetlocationonserviceproviderid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* reqgetlocationonserviceproviderid) {
  clear_ARequest();
  if (reqgetlocationonserviceproviderid) {
    set_has_reqgetlocationonserviceproviderid();
    ARequest_.reqgetlocationonserviceproviderid_ = reqgetlocationonserviceproviderid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Request::_internal_mutable_reqgetlocationonserviceproviderid() {
  if (!_internal_has_reqgetlocationonserviceproviderid()) {
    clear_ARequest();
    set_has_reqgetlocationonserviceproviderid();
    ARequest_.reqgetlocationonserviceproviderid_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest >(GetArena());
  }
  return ARequest_.reqgetlocationonserviceproviderid_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdRequest* Request::mutable_reqgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetLocationOnServiceProviderId)
  return _internal_mutable_reqgetlocationonserviceproviderid();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigRequest reqGetServiceConfig = 22;
inline bool Request::_internal_has_reqgetserviceconfig() const {
  return ARequest_case() == kReqGetServiceConfig;
}
inline bool Request::has_reqgetserviceconfig() const {
  return _internal_has_reqgetserviceconfig();
}
inline void Request::set_has_reqgetserviceconfig() {
  _oneof_case_[0] = kReqGetServiceConfig;
}
inline void Request::clear_reqgetserviceconfig() {
  if (_internal_has_reqgetserviceconfig()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceconfig_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Request::release_reqgetserviceconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
  if (_internal_has_reqgetserviceconfig()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* temp = ARequest_.reqgetserviceconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest& Request::_internal_reqgetserviceconfig() const {
  return _internal_has_reqgetserviceconfig()
      ? *ARequest_.reqgetserviceconfig_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest& Request::reqgetserviceconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
  return _internal_reqgetserviceconfig();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Request::unsafe_arena_release_reqgetserviceconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
  if (_internal_has_reqgetserviceconfig()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* temp = ARequest_.reqgetserviceconfig_;
    ARequest_.reqgetserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* reqgetserviceconfig) {
  clear_ARequest();
  if (reqgetserviceconfig) {
    set_has_reqgetserviceconfig();
    ARequest_.reqgetserviceconfig_ = reqgetserviceconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Request::_internal_mutable_reqgetserviceconfig() {
  if (!_internal_has_reqgetserviceconfig()) {
    clear_ARequest();
    set_has_reqgetserviceconfig();
    ARequest_.reqgetserviceconfig_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest >(GetArena());
  }
  return ARequest_.reqgetserviceconfig_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigRequest* Request::mutable_reqgetserviceconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfig)
  return _internal_mutable_reqgetserviceconfig();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameRequest reqGetServiceConfigOnRegionName = 23;
inline bool Request::_internal_has_reqgetserviceconfigonregionname() const {
  return ARequest_case() == kReqGetServiceConfigOnRegionName;
}
inline bool Request::has_reqgetserviceconfigonregionname() const {
  return _internal_has_reqgetserviceconfigonregionname();
}
inline void Request::set_has_reqgetserviceconfigonregionname() {
  _oneof_case_[0] = kReqGetServiceConfigOnRegionName;
}
inline void Request::clear_reqgetserviceconfigonregionname() {
  if (_internal_has_reqgetserviceconfigonregionname()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetserviceconfigonregionname_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Request::release_reqgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
  if (_internal_has_reqgetserviceconfigonregionname()) {
    clear_has_ARequest();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* temp = ARequest_.reqgetserviceconfigonregionname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetserviceconfigonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest& Request::_internal_reqgetserviceconfigonregionname() const {
  return _internal_has_reqgetserviceconfigonregionname()
      ? *ARequest_.reqgetserviceconfigonregionname_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameRequest_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest& Request::reqgetserviceconfigonregionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
  return _internal_reqgetserviceconfigonregionname();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Request::unsafe_arena_release_reqgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
  if (_internal_has_reqgetserviceconfigonregionname()) {
    clear_has_ARequest();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* temp = ARequest_.reqgetserviceconfigonregionname_;
    ARequest_.reqgetserviceconfigonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* reqgetserviceconfigonregionname) {
  clear_ARequest();
  if (reqgetserviceconfigonregionname) {
    set_has_reqgetserviceconfigonregionname();
    ARequest_.reqgetserviceconfigonregionname_ = reqgetserviceconfigonregionname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Request::_internal_mutable_reqgetserviceconfigonregionname() {
  if (!_internal_has_reqgetserviceconfigonregionname()) {
    clear_ARequest();
    set_has_reqgetserviceconfigonregionname();
    ARequest_.reqgetserviceconfigonregionname_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest >(GetArena());
  }
  return ARequest_.reqgetserviceconfigonregionname_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameRequest* Request::mutable_reqgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Request.reqGetServiceConfigOnRegionName)
  return _internal_mutable_reqgetserviceconfigonregionname();
}

inline bool Request::has_ARequest() const {
  return ARequest_case() != AREQUEST_NOT_SET;
}
inline void Request::clear_has_ARequest() {
  _oneof_case_[0] = AREQUEST_NOT_SET;
}
inline Request::ARequestCase Request::ARequest_case() const {
  return Request::ARequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultiResponses

// .farm.nurture.serviceProvider.service.proto.Status status = 1;
inline bool MultiResponses::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiResponses::has_status() const {
  return _internal_has_status();
}
inline void MultiResponses::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& MultiResponses::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& MultiResponses::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.MultiResponses.status)
  return _internal_status();
}
inline void MultiResponses::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.MultiResponses.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* MultiResponses::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* MultiResponses::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.MultiResponses.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* MultiResponses::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* MultiResponses::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.MultiResponses.status)
  return _internal_mutable_status();
}
inline void MultiResponses::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.MultiResponses.status)
}

// repeated .farm.nurture.serviceProvider.service.proto.Response response = 2;
inline int MultiResponses::_internal_response_size() const {
  return response_.size();
}
inline int MultiResponses::response_size() const {
  return _internal_response_size();
}
inline void MultiResponses::clear_response() {
  response_.Clear();
}
inline ::farm::nurture::serviceProvider::service::proto::Response* MultiResponses::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.MultiResponses.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Response >*
MultiResponses::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.serviceProvider.service.proto.MultiResponses.response)
  return &response_;
}
inline const ::farm::nurture::serviceProvider::service::proto::Response& MultiResponses::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::farm::nurture::serviceProvider::service::proto::Response& MultiResponses::response(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.MultiResponses.response)
  return _internal_response(index);
}
inline ::farm::nurture::serviceProvider::service::proto::Response* MultiResponses::_internal_add_response() {
  return response_.Add();
}
inline ::farm::nurture::serviceProvider::service::proto::Response* MultiResponses::add_response() {
  // @@protoc_insertion_point(field_add:farm.nurture.serviceProvider.service.proto.MultiResponses.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::serviceProvider::service::proto::Response >&
MultiResponses::response() const {
  // @@protoc_insertion_point(field_list:farm.nurture.serviceProvider.service.proto.MultiResponses.response)
  return response_;
}

// -------------------------------------------------------------------

// Response

// string index = 1;
inline void Response::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Response::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.index)
  return _internal_index();
}
inline void Response::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.serviceProvider.service.proto.Response.index)
}
inline std::string* Response::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.index)
  return _internal_mutable_index();
}
inline const std::string& Response::_internal_index() const {
  return index_.Get();
}
inline void Response::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.serviceProvider.service.proto.Response.index)
}
inline void Response::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.serviceProvider.service.proto.Response.index)
}
inline void Response::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.serviceProvider.service.proto.Response.index)
}
inline std::string* Response::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.index)
}

// .farm.nurture.serviceProvider.service.proto.Status status = 2;
inline bool Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& Response::_internal_status() const {
  const ::farm::nurture::serviceProvider::service::proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::serviceProvider::service::proto::Status&>(
      ::farm::nurture::serviceProvider::service::proto::_Status_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::Status& Response::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.status)
  return _internal_status();
}
inline void Response::unsafe_arena_set_allocated_status(
    ::farm::nurture::serviceProvider::service::proto::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.status)
}
inline ::farm::nurture::serviceProvider::service::proto::Status* Response::release_status() {
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.status)
  
  ::farm::nurture::serviceProvider::service::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::serviceProvider::service::proto::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::serviceProvider::service::proto::Status* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.status)
  return _internal_mutable_status();
}
inline void Response::set_allocated_status(::farm::nurture::serviceProvider::service::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.serviceProvider.service.proto.Response.status)
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderResponse resAddServiceProvider = 3;
inline bool Response::_internal_has_resaddserviceprovider() const {
  return AResponse_case() == kResAddServiceProvider;
}
inline bool Response::has_resaddserviceprovider() const {
  return _internal_has_resaddserviceprovider();
}
inline void Response::set_has_resaddserviceprovider() {
  _oneof_case_[0] = kResAddServiceProvider;
}
inline void Response::clear_resaddserviceprovider() {
  if (_internal_has_resaddserviceprovider()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceprovider_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Response::release_resaddserviceprovider() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
  if (_internal_has_resaddserviceprovider()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* temp = AResponse_.resaddserviceprovider_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& Response::_internal_resaddserviceprovider() const {
  return _internal_has_resaddserviceprovider()
      ? *AResponse_.resaddserviceprovider_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse& Response::resaddserviceprovider() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
  return _internal_resaddserviceprovider();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Response::unsafe_arena_release_resaddserviceprovider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
  if (_internal_has_resaddserviceprovider()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* temp = AResponse_.resaddserviceprovider_;
    AResponse_.resaddserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceprovider(::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* resaddserviceprovider) {
  clear_AResponse();
  if (resaddserviceprovider) {
    set_has_resaddserviceprovider();
    AResponse_.resaddserviceprovider_ = resaddserviceprovider;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Response::_internal_mutable_resaddserviceprovider() {
  if (!_internal_has_resaddserviceprovider()) {
    clear_AResponse();
    set_has_resaddserviceprovider();
    AResponse_.resaddserviceprovider_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse >(GetArena());
  }
  return AResponse_.resaddserviceprovider_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderResponse* Response::mutable_resaddserviceprovider() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProvider)
  return _internal_mutable_resaddserviceprovider();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderResponse resAddServiceProviderBulk = 4;
inline bool Response::_internal_has_resaddserviceproviderbulk() const {
  return AResponse_case() == kResAddServiceProviderBulk;
}
inline bool Response::has_resaddserviceproviderbulk() const {
  return _internal_has_resaddserviceproviderbulk();
}
inline void Response::set_has_resaddserviceproviderbulk() {
  _oneof_case_[0] = kResAddServiceProviderBulk;
}
inline void Response::clear_resaddserviceproviderbulk() {
  if (_internal_has_resaddserviceproviderbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceproviderbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Response::release_resaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
  if (_internal_has_resaddserviceproviderbulk()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* temp = AResponse_.resaddserviceproviderbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceproviderbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse& Response::_internal_resaddserviceproviderbulk() const {
  return _internal_has_resaddserviceproviderbulk()
      ? *AResponse_.resaddserviceproviderbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse& Response::resaddserviceproviderbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
  return _internal_resaddserviceproviderbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Response::unsafe_arena_release_resaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
  if (_internal_has_resaddserviceproviderbulk()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* temp = AResponse_.resaddserviceproviderbulk_;
    AResponse_.resaddserviceproviderbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceproviderbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* resaddserviceproviderbulk) {
  clear_AResponse();
  if (resaddserviceproviderbulk) {
    set_has_resaddserviceproviderbulk();
    AResponse_.resaddserviceproviderbulk_ = resaddserviceproviderbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Response::_internal_mutable_resaddserviceproviderbulk() {
  if (!_internal_has_resaddserviceproviderbulk()) {
    clear_AResponse();
    set_has_resaddserviceproviderbulk();
    AResponse_.resaddserviceproviderbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse >(GetArena());
  }
  return AResponse_.resaddserviceproviderbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderResponse* Response::mutable_resaddserviceproviderbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderBulk)
  return _internal_mutable_resaddserviceproviderbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceLocationResponse resAddServiceLocation = 5;
inline bool Response::_internal_has_resaddservicelocation() const {
  return AResponse_case() == kResAddServiceLocation;
}
inline bool Response::has_resaddservicelocation() const {
  return _internal_has_resaddservicelocation();
}
inline void Response::set_has_resaddservicelocation() {
  _oneof_case_[0] = kResAddServiceLocation;
}
inline void Response::clear_resaddservicelocation() {
  if (_internal_has_resaddservicelocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddservicelocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Response::release_resaddservicelocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
  if (_internal_has_resaddservicelocation()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* temp = AResponse_.resaddservicelocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddservicelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& Response::_internal_resaddservicelocation() const {
  return _internal_has_resaddservicelocation()
      ? *AResponse_.resaddservicelocation_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServiceLocationResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse& Response::resaddservicelocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
  return _internal_resaddservicelocation();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Response::unsafe_arena_release_resaddservicelocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
  if (_internal_has_resaddservicelocation()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* temp = AResponse_.resaddservicelocation_;
    AResponse_.resaddservicelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddservicelocation(::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* resaddservicelocation) {
  clear_AResponse();
  if (resaddservicelocation) {
    set_has_resaddservicelocation();
    AResponse_.resaddservicelocation_ = resaddservicelocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Response::_internal_mutable_resaddservicelocation() {
  if (!_internal_has_resaddservicelocation()) {
    clear_AResponse();
    set_has_resaddservicelocation();
    AResponse_.resaddservicelocation_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse >(GetArena());
  }
  return AResponse_.resaddservicelocation_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceLocationResponse* Response::mutable_resaddservicelocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocation)
  return _internal_mutable_resaddservicelocation();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceLocationResponse resAddServiceLocationBulk = 6;
inline bool Response::_internal_has_resaddservicelocationbulk() const {
  return AResponse_case() == kResAddServiceLocationBulk;
}
inline bool Response::has_resaddservicelocationbulk() const {
  return _internal_has_resaddservicelocationbulk();
}
inline void Response::set_has_resaddservicelocationbulk() {
  _oneof_case_[0] = kResAddServiceLocationBulk;
}
inline void Response::clear_resaddservicelocationbulk() {
  if (_internal_has_resaddservicelocationbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddservicelocationbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Response::release_resaddservicelocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
  if (_internal_has_resaddservicelocationbulk()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* temp = AResponse_.resaddservicelocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddservicelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse& Response::_internal_resaddservicelocationbulk() const {
  return _internal_has_resaddservicelocationbulk()
      ? *AResponse_.resaddservicelocationbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceLocationResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse& Response::resaddservicelocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
  return _internal_resaddservicelocationbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Response::unsafe_arena_release_resaddservicelocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
  if (_internal_has_resaddservicelocationbulk()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* temp = AResponse_.resaddservicelocationbulk_;
    AResponse_.resaddservicelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddservicelocationbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* resaddservicelocationbulk) {
  clear_AResponse();
  if (resaddservicelocationbulk) {
    set_has_resaddservicelocationbulk();
    AResponse_.resaddservicelocationbulk_ = resaddservicelocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Response::_internal_mutable_resaddservicelocationbulk() {
  if (!_internal_has_resaddservicelocationbulk()) {
    clear_AResponse();
    set_has_resaddservicelocationbulk();
    AResponse_.resaddservicelocationbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse >(GetArena());
  }
  return AResponse_.resaddservicelocationbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceLocationResponse* Response::mutable_resaddservicelocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceLocationBulk)
  return _internal_mutable_resaddservicelocationbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServicesResponse resAddServices = 7;
inline bool Response::_internal_has_resaddservices() const {
  return AResponse_case() == kResAddServices;
}
inline bool Response::has_resaddservices() const {
  return _internal_has_resaddservices();
}
inline void Response::set_has_resaddservices() {
  _oneof_case_[0] = kResAddServices;
}
inline void Response::clear_resaddservices() {
  if (_internal_has_resaddservices()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddservices_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Response::release_resaddservices() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
  if (_internal_has_resaddservices()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* temp = AResponse_.resaddservices_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddservices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& Response::_internal_resaddservices() const {
  return _internal_has_resaddservices()
      ? *AResponse_.resaddservices_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServicesResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServicesResponse& Response::resaddservices() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
  return _internal_resaddservices();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Response::unsafe_arena_release_resaddservices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
  if (_internal_has_resaddservices()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* temp = AResponse_.resaddservices_;
    AResponse_.resaddservices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddservices(::farm::nurture::serviceProvider::service::proto::AddServicesResponse* resaddservices) {
  clear_AResponse();
  if (resaddservices) {
    set_has_resaddservices();
    AResponse_.resaddservices_ = resaddservices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Response::_internal_mutable_resaddservices() {
  if (!_internal_has_resaddservices()) {
    clear_AResponse();
    set_has_resaddservices();
    AResponse_.resaddservices_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServicesResponse >(GetArena());
  }
  return AResponse_.resaddservices_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServicesResponse* Response::mutable_resaddservices() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServices)
  return _internal_mutable_resaddservices();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServicesResponse resAddServicesBulk = 8;
inline bool Response::_internal_has_resaddservicesbulk() const {
  return AResponse_case() == kResAddServicesBulk;
}
inline bool Response::has_resaddservicesbulk() const {
  return _internal_has_resaddservicesbulk();
}
inline void Response::set_has_resaddservicesbulk() {
  _oneof_case_[0] = kResAddServicesBulk;
}
inline void Response::clear_resaddservicesbulk() {
  if (_internal_has_resaddservicesbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddservicesbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Response::release_resaddservicesbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
  if (_internal_has_resaddservicesbulk()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* temp = AResponse_.resaddservicesbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddservicesbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse& Response::_internal_resaddservicesbulk() const {
  return _internal_has_resaddservicesbulk()
      ? *AResponse_.resaddservicesbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServicesResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse& Response::resaddservicesbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
  return _internal_resaddservicesbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Response::unsafe_arena_release_resaddservicesbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
  if (_internal_has_resaddservicesbulk()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* temp = AResponse_.resaddservicesbulk_;
    AResponse_.resaddservicesbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddservicesbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* resaddservicesbulk) {
  clear_AResponse();
  if (resaddservicesbulk) {
    set_has_resaddservicesbulk();
    AResponse_.resaddservicesbulk_ = resaddservicesbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Response::_internal_mutable_resaddservicesbulk() {
  if (!_internal_has_resaddservicesbulk()) {
    clear_AResponse();
    set_has_resaddservicesbulk();
    AResponse_.resaddservicesbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse >(GetArena());
  }
  return AResponse_.resaddservicesbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServicesResponse* Response::mutable_resaddservicesbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServicesBulk)
  return _internal_mutable_resaddservicesbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderMappingResponse resAddServiceProviderMapping = 9;
inline bool Response::_internal_has_resaddserviceprovidermapping() const {
  return AResponse_case() == kResAddServiceProviderMapping;
}
inline bool Response::has_resaddserviceprovidermapping() const {
  return _internal_has_resaddserviceprovidermapping();
}
inline void Response::set_has_resaddserviceprovidermapping() {
  _oneof_case_[0] = kResAddServiceProviderMapping;
}
inline void Response::clear_resaddserviceprovidermapping() {
  if (_internal_has_resaddserviceprovidermapping()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceprovidermapping_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Response::release_resaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
  if (_internal_has_resaddserviceprovidermapping()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* temp = AResponse_.resaddserviceprovidermapping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceprovidermapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& Response::_internal_resaddserviceprovidermapping() const {
  return _internal_has_resaddserviceprovidermapping()
      ? *AResponse_.resaddserviceprovidermapping_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderMappingResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse& Response::resaddserviceprovidermapping() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
  return _internal_resaddserviceprovidermapping();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Response::unsafe_arena_release_resaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
  if (_internal_has_resaddserviceprovidermapping()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* temp = AResponse_.resaddserviceprovidermapping_;
    AResponse_.resaddserviceprovidermapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceprovidermapping(::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* resaddserviceprovidermapping) {
  clear_AResponse();
  if (resaddserviceprovidermapping) {
    set_has_resaddserviceprovidermapping();
    AResponse_.resaddserviceprovidermapping_ = resaddserviceprovidermapping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Response::_internal_mutable_resaddserviceprovidermapping() {
  if (!_internal_has_resaddserviceprovidermapping()) {
    clear_AResponse();
    set_has_resaddserviceprovidermapping();
    AResponse_.resaddserviceprovidermapping_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse >(GetArena());
  }
  return AResponse_.resaddserviceprovidermapping_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderMappingResponse* Response::mutable_resaddserviceprovidermapping() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMapping)
  return _internal_mutable_resaddserviceprovidermapping();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceProviderMappingResponse resAddServiceProviderMappingBulk = 10;
inline bool Response::_internal_has_resaddserviceprovidermappingbulk() const {
  return AResponse_case() == kResAddServiceProviderMappingBulk;
}
inline bool Response::has_resaddserviceprovidermappingbulk() const {
  return _internal_has_resaddserviceprovidermappingbulk();
}
inline void Response::set_has_resaddserviceprovidermappingbulk() {
  _oneof_case_[0] = kResAddServiceProviderMappingBulk;
}
inline void Response::clear_resaddserviceprovidermappingbulk() {
  if (_internal_has_resaddserviceprovidermappingbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceprovidermappingbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Response::release_resaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
  if (_internal_has_resaddserviceprovidermappingbulk()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* temp = AResponse_.resaddserviceprovidermappingbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceprovidermappingbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse& Response::_internal_resaddserviceprovidermappingbulk() const {
  return _internal_has_resaddserviceprovidermappingbulk()
      ? *AResponse_.resaddserviceprovidermappingbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceProviderMappingResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse& Response::resaddserviceprovidermappingbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
  return _internal_resaddserviceprovidermappingbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Response::unsafe_arena_release_resaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
  if (_internal_has_resaddserviceprovidermappingbulk()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* temp = AResponse_.resaddserviceprovidermappingbulk_;
    AResponse_.resaddserviceprovidermappingbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceprovidermappingbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* resaddserviceprovidermappingbulk) {
  clear_AResponse();
  if (resaddserviceprovidermappingbulk) {
    set_has_resaddserviceprovidermappingbulk();
    AResponse_.resaddserviceprovidermappingbulk_ = resaddserviceprovidermappingbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Response::_internal_mutable_resaddserviceprovidermappingbulk() {
  if (!_internal_has_resaddserviceprovidermappingbulk()) {
    clear_AResponse();
    set_has_resaddserviceprovidermappingbulk();
    AResponse_.resaddserviceprovidermappingbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse >(GetArena());
  }
  return AResponse_.resaddserviceprovidermappingbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceProviderMappingResponse* Response::mutable_resaddserviceprovidermappingbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderMappingBulk)
  return _internal_mutable_resaddserviceprovidermappingbulk();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceConfigResponse resAddServiceConfig = 11;
inline bool Response::_internal_has_resaddserviceconfig() const {
  return AResponse_case() == kResAddServiceConfig;
}
inline bool Response::has_resaddserviceconfig() const {
  return _internal_has_resaddserviceconfig();
}
inline void Response::set_has_resaddserviceconfig() {
  _oneof_case_[0] = kResAddServiceConfig;
}
inline void Response::clear_resaddserviceconfig() {
  if (_internal_has_resaddserviceconfig()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceconfig_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Response::release_resaddserviceconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
  if (_internal_has_resaddserviceconfig()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* temp = AResponse_.resaddserviceconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& Response::_internal_resaddserviceconfig() const {
  return _internal_has_resaddserviceconfig()
      ? *AResponse_.resaddserviceconfig_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServiceConfigResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse& Response::resaddserviceconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
  return _internal_resaddserviceconfig();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Response::unsafe_arena_release_resaddserviceconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
  if (_internal_has_resaddserviceconfig()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* temp = AResponse_.resaddserviceconfig_;
    AResponse_.resaddserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceconfig(::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* resaddserviceconfig) {
  clear_AResponse();
  if (resaddserviceconfig) {
    set_has_resaddserviceconfig();
    AResponse_.resaddserviceconfig_ = resaddserviceconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Response::_internal_mutable_resaddserviceconfig() {
  if (!_internal_has_resaddserviceconfig()) {
    clear_AResponse();
    set_has_resaddserviceconfig();
    AResponse_.resaddserviceconfig_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse >(GetArena());
  }
  return AResponse_.resaddserviceconfig_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceConfigResponse* Response::mutable_resaddserviceconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfig)
  return _internal_mutable_resaddserviceconfig();
}

// .farm.nurture.serviceProvider.service.proto.BulkAddServiceConfigResponse resAddServiceConfigBulk = 12;
inline bool Response::_internal_has_resaddserviceconfigbulk() const {
  return AResponse_case() == kResAddServiceConfigBulk;
}
inline bool Response::has_resaddserviceconfigbulk() const {
  return _internal_has_resaddserviceconfigbulk();
}
inline void Response::set_has_resaddserviceconfigbulk() {
  _oneof_case_[0] = kResAddServiceConfigBulk;
}
inline void Response::clear_resaddserviceconfigbulk() {
  if (_internal_has_resaddserviceconfigbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceconfigbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Response::release_resaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
  if (_internal_has_resaddserviceconfigbulk()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* temp = AResponse_.resaddserviceconfigbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse& Response::_internal_resaddserviceconfigbulk() const {
  return _internal_has_resaddserviceconfigbulk()
      ? *AResponse_.resaddserviceconfigbulk_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse&>(::farm::nurture::serviceProvider::service::proto::_BulkAddServiceConfigResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse& Response::resaddserviceconfigbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
  return _internal_resaddserviceconfigbulk();
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Response::unsafe_arena_release_resaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
  if (_internal_has_resaddserviceconfigbulk()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* temp = AResponse_.resaddserviceconfigbulk_;
    AResponse_.resaddserviceconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceconfigbulk(::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* resaddserviceconfigbulk) {
  clear_AResponse();
  if (resaddserviceconfigbulk) {
    set_has_resaddserviceconfigbulk();
    AResponse_.resaddserviceconfigbulk_ = resaddserviceconfigbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Response::_internal_mutable_resaddserviceconfigbulk() {
  if (!_internal_has_resaddserviceconfigbulk()) {
    clear_AResponse();
    set_has_resaddserviceconfigbulk();
    AResponse_.resaddserviceconfigbulk_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse >(GetArena());
  }
  return AResponse_.resaddserviceconfigbulk_;
}
inline ::farm::nurture::serviceProvider::service::proto::BulkAddServiceConfigResponse* Response::mutable_resaddserviceconfigbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceConfigBulk)
  return _internal_mutable_resaddserviceconfigbulk();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderResponse resGetServiceProvider = 13;
inline bool Response::_internal_has_resgetserviceprovider() const {
  return AResponse_case() == kResGetServiceProvider;
}
inline bool Response::has_resgetserviceprovider() const {
  return _internal_has_resgetserviceprovider();
}
inline void Response::set_has_resgetserviceprovider() {
  _oneof_case_[0] = kResGetServiceProvider;
}
inline void Response::clear_resgetserviceprovider() {
  if (_internal_has_resgetserviceprovider()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceprovider_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Response::release_resgetserviceprovider() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
  if (_internal_has_resgetserviceprovider()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* temp = AResponse_.resgetserviceprovider_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse& Response::_internal_resgetserviceprovider() const {
  return _internal_has_resgetserviceprovider()
      ? *AResponse_.resgetserviceprovider_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse& Response::resgetserviceprovider() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
  return _internal_resgetserviceprovider();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Response::unsafe_arena_release_resgetserviceprovider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
  if (_internal_has_resgetserviceprovider()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* temp = AResponse_.resgetserviceprovider_;
    AResponse_.resgetserviceprovider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceprovider(::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* resgetserviceprovider) {
  clear_AResponse();
  if (resgetserviceprovider) {
    set_has_resgetserviceprovider();
    AResponse_.resgetserviceprovider_ = resgetserviceprovider;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Response::_internal_mutable_resgetserviceprovider() {
  if (!_internal_has_resgetserviceprovider()) {
    clear_AResponse();
    set_has_resgetserviceprovider();
    AResponse_.resgetserviceprovider_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse >(GetArena());
  }
  return AResponse_.resgetserviceprovider_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderResponse* Response::mutable_resgetserviceprovider() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProvider)
  return _internal_mutable_resgetserviceprovider();
}

// .farm.nurture.serviceProvider.service.proto.AddServiceProviderFromExcelResponse resAddServiceProviderFromExcel = 14;
inline bool Response::_internal_has_resaddserviceproviderfromexcel() const {
  return AResponse_case() == kResAddServiceProviderFromExcel;
}
inline bool Response::has_resaddserviceproviderfromexcel() const {
  return _internal_has_resaddserviceproviderfromexcel();
}
inline void Response::set_has_resaddserviceproviderfromexcel() {
  _oneof_case_[0] = kResAddServiceProviderFromExcel;
}
inline void Response::clear_resaddserviceproviderfromexcel() {
  if (_internal_has_resaddserviceproviderfromexcel()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddserviceproviderfromexcel_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Response::release_resaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
  if (_internal_has_resaddserviceproviderfromexcel()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* temp = AResponse_.resaddserviceproviderfromexcel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddserviceproviderfromexcel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse& Response::_internal_resaddserviceproviderfromexcel() const {
  return _internal_has_resaddserviceproviderfromexcel()
      ? *AResponse_.resaddserviceproviderfromexcel_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse&>(::farm::nurture::serviceProvider::service::proto::_AddServiceProviderFromExcelResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse& Response::resaddserviceproviderfromexcel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
  return _internal_resaddserviceproviderfromexcel();
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Response::unsafe_arena_release_resaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
  if (_internal_has_resaddserviceproviderfromexcel()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* temp = AResponse_.resaddserviceproviderfromexcel_;
    AResponse_.resaddserviceproviderfromexcel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddserviceproviderfromexcel(::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* resaddserviceproviderfromexcel) {
  clear_AResponse();
  if (resaddserviceproviderfromexcel) {
    set_has_resaddserviceproviderfromexcel();
    AResponse_.resaddserviceproviderfromexcel_ = resaddserviceproviderfromexcel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Response::_internal_mutable_resaddserviceproviderfromexcel() {
  if (!_internal_has_resaddserviceproviderfromexcel()) {
    clear_AResponse();
    set_has_resaddserviceproviderfromexcel();
    AResponse_.resaddserviceproviderfromexcel_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse >(GetArena());
  }
  return AResponse_.resaddserviceproviderfromexcel_;
}
inline ::farm::nurture::serviceProvider::service::proto::AddServiceProviderFromExcelResponse* Response::mutable_resaddserviceproviderfromexcel() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resAddServiceProviderFromExcel)
  return _internal_mutable_resaddserviceproviderfromexcel();
}

// .farm.nurture.serviceProvider.service.proto.GetSDTVOnLatLongResponse resGetSDTVOnLatLong = 15;
inline bool Response::_internal_has_resgetsdtvonlatlong() const {
  return AResponse_case() == kResGetSDTVOnLatLong;
}
inline bool Response::has_resgetsdtvonlatlong() const {
  return _internal_has_resgetsdtvonlatlong();
}
inline void Response::set_has_resgetsdtvonlatlong() {
  _oneof_case_[0] = kResGetSDTVOnLatLong;
}
inline void Response::clear_resgetsdtvonlatlong() {
  if (_internal_has_resgetsdtvonlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetsdtvonlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Response::release_resgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
  if (_internal_has_resgetsdtvonlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* temp = AResponse_.resgetsdtvonlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetsdtvonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse& Response::_internal_resgetsdtvonlatlong() const {
  return _internal_has_resgetsdtvonlatlong()
      ? *AResponse_.resgetsdtvonlatlong_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse&>(::farm::nurture::serviceProvider::service::proto::_GetSDTVOnLatLongResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse& Response::resgetsdtvonlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
  return _internal_resgetsdtvonlatlong();
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Response::unsafe_arena_release_resgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
  if (_internal_has_resgetsdtvonlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* temp = AResponse_.resgetsdtvonlatlong_;
    AResponse_.resgetsdtvonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetsdtvonlatlong(::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* resgetsdtvonlatlong) {
  clear_AResponse();
  if (resgetsdtvonlatlong) {
    set_has_resgetsdtvonlatlong();
    AResponse_.resgetsdtvonlatlong_ = resgetsdtvonlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Response::_internal_mutable_resgetsdtvonlatlong() {
  if (!_internal_has_resgetsdtvonlatlong()) {
    clear_AResponse();
    set_has_resgetsdtvonlatlong();
    AResponse_.resgetsdtvonlatlong_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse >(GetArena());
  }
  return AResponse_.resgetsdtvonlatlong_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetSDTVOnLatLongResponse* Response::mutable_resgetsdtvonlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetSDTVOnLatLong)
  return _internal_mutable_resgetsdtvonlatlong();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceDetailsOnLatLongResponse resGetServiceDetailsOnLatLong = 16;
inline bool Response::_internal_has_resgetservicedetailsonlatlong() const {
  return AResponse_case() == kResGetServiceDetailsOnLatLong;
}
inline bool Response::has_resgetservicedetailsonlatlong() const {
  return _internal_has_resgetservicedetailsonlatlong();
}
inline void Response::set_has_resgetservicedetailsonlatlong() {
  _oneof_case_[0] = kResGetServiceDetailsOnLatLong;
}
inline void Response::clear_resgetservicedetailsonlatlong() {
  if (_internal_has_resgetservicedetailsonlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetservicedetailsonlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Response::release_resgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
  if (_internal_has_resgetservicedetailsonlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* temp = AResponse_.resgetservicedetailsonlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetservicedetailsonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse& Response::_internal_resgetservicedetailsonlatlong() const {
  return _internal_has_resgetservicedetailsonlatlong()
      ? *AResponse_.resgetservicedetailsonlatlong_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceDetailsOnLatLongResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse& Response::resgetservicedetailsonlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
  return _internal_resgetservicedetailsonlatlong();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Response::unsafe_arena_release_resgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
  if (_internal_has_resgetservicedetailsonlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* temp = AResponse_.resgetservicedetailsonlatlong_;
    AResponse_.resgetservicedetailsonlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetservicedetailsonlatlong(::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* resgetservicedetailsonlatlong) {
  clear_AResponse();
  if (resgetservicedetailsonlatlong) {
    set_has_resgetservicedetailsonlatlong();
    AResponse_.resgetservicedetailsonlatlong_ = resgetservicedetailsonlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Response::_internal_mutable_resgetservicedetailsonlatlong() {
  if (!_internal_has_resgetservicedetailsonlatlong()) {
    clear_AResponse();
    set_has_resgetservicedetailsonlatlong();
    AResponse_.resgetservicedetailsonlatlong_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse >(GetArena());
  }
  return AResponse_.resgetservicedetailsonlatlong_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceDetailsOnLatLongResponse* Response::mutable_resgetservicedetailsonlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceDetailsOnLatLong)
  return _internal_mutable_resgetservicedetailsonlatlong();
}

// .farm.nurture.serviceProvider.service.proto.GetServicesOnServiceNameAndServiceTypeResponse resGetServicesOnServiceNameAndServiceType = 17;
inline bool Response::_internal_has_resgetservicesonservicenameandservicetype() const {
  return AResponse_case() == kResGetServicesOnServiceNameAndServiceType;
}
inline bool Response::has_resgetservicesonservicenameandservicetype() const {
  return _internal_has_resgetservicesonservicenameandservicetype();
}
inline void Response::set_has_resgetservicesonservicenameandservicetype() {
  _oneof_case_[0] = kResGetServicesOnServiceNameAndServiceType;
}
inline void Response::clear_resgetservicesonservicenameandservicetype() {
  if (_internal_has_resgetservicesonservicenameandservicetype()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetservicesonservicenameandservicetype_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Response::release_resgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
  if (_internal_has_resgetservicesonservicenameandservicetype()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* temp = AResponse_.resgetservicesonservicenameandservicetype_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetservicesonservicenameandservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse& Response::_internal_resgetservicesonservicenameandservicetype() const {
  return _internal_has_resgetservicesonservicenameandservicetype()
      ? *AResponse_.resgetservicesonservicenameandservicetype_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServicesOnServiceNameAndServiceTypeResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse& Response::resgetservicesonservicenameandservicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
  return _internal_resgetservicesonservicenameandservicetype();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Response::unsafe_arena_release_resgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
  if (_internal_has_resgetservicesonservicenameandservicetype()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* temp = AResponse_.resgetservicesonservicenameandservicetype_;
    AResponse_.resgetservicesonservicenameandservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetservicesonservicenameandservicetype(::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* resgetservicesonservicenameandservicetype) {
  clear_AResponse();
  if (resgetservicesonservicenameandservicetype) {
    set_has_resgetservicesonservicenameandservicetype();
    AResponse_.resgetservicesonservicenameandservicetype_ = resgetservicesonservicenameandservicetype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Response::_internal_mutable_resgetservicesonservicenameandservicetype() {
  if (!_internal_has_resgetservicesonservicenameandservicetype()) {
    clear_AResponse();
    set_has_resgetservicesonservicenameandservicetype();
    AResponse_.resgetservicesonservicenameandservicetype_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse >(GetArena());
  }
  return AResponse_.resgetservicesonservicenameandservicetype_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServicesOnServiceNameAndServiceTypeResponse* Response::mutable_resgetservicesonservicenameandservicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServicesOnServiceNameAndServiceType)
  return _internal_mutable_resgetservicesonservicenameandservicetype();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnMobileNumberResponse resGetServiceProviderOnMobileNumber = 18;
inline bool Response::_internal_has_resgetserviceprovideronmobilenumber() const {
  return AResponse_case() == kResGetServiceProviderOnMobileNumber;
}
inline bool Response::has_resgetserviceprovideronmobilenumber() const {
  return _internal_has_resgetserviceprovideronmobilenumber();
}
inline void Response::set_has_resgetserviceprovideronmobilenumber() {
  _oneof_case_[0] = kResGetServiceProviderOnMobileNumber;
}
inline void Response::clear_resgetserviceprovideronmobilenumber() {
  if (_internal_has_resgetserviceprovideronmobilenumber()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceprovideronmobilenumber_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Response::release_resgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
  if (_internal_has_resgetserviceprovideronmobilenumber()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* temp = AResponse_.resgetserviceprovideronmobilenumber_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceprovideronmobilenumber_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse& Response::_internal_resgetserviceprovideronmobilenumber() const {
  return _internal_has_resgetserviceprovideronmobilenumber()
      ? *AResponse_.resgetserviceprovideronmobilenumber_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnMobileNumberResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse& Response::resgetserviceprovideronmobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
  return _internal_resgetserviceprovideronmobilenumber();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Response::unsafe_arena_release_resgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
  if (_internal_has_resgetserviceprovideronmobilenumber()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* temp = AResponse_.resgetserviceprovideronmobilenumber_;
    AResponse_.resgetserviceprovideronmobilenumber_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceprovideronmobilenumber(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* resgetserviceprovideronmobilenumber) {
  clear_AResponse();
  if (resgetserviceprovideronmobilenumber) {
    set_has_resgetserviceprovideronmobilenumber();
    AResponse_.resgetserviceprovideronmobilenumber_ = resgetserviceprovideronmobilenumber;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Response::_internal_mutable_resgetserviceprovideronmobilenumber() {
  if (!_internal_has_resgetserviceprovideronmobilenumber()) {
    clear_AResponse();
    set_has_resgetserviceprovideronmobilenumber();
    AResponse_.resgetserviceprovideronmobilenumber_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse >(GetArena());
  }
  return AResponse_.resgetserviceprovideronmobilenumber_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnMobileNumberResponse* Response::mutable_resgetserviceprovideronmobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnMobileNumber)
  return _internal_mutable_resgetserviceprovideronmobilenumber();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceLocationOnRegionNameResponse resGetServiceLocationOnRegionName = 19;
inline bool Response::_internal_has_resgetservicelocationonregionname() const {
  return AResponse_case() == kResGetServiceLocationOnRegionName;
}
inline bool Response::has_resgetservicelocationonregionname() const {
  return _internal_has_resgetservicelocationonregionname();
}
inline void Response::set_has_resgetservicelocationonregionname() {
  _oneof_case_[0] = kResGetServiceLocationOnRegionName;
}
inline void Response::clear_resgetservicelocationonregionname() {
  if (_internal_has_resgetservicelocationonregionname()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetservicelocationonregionname_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Response::release_resgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
  if (_internal_has_resgetservicelocationonregionname()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* temp = AResponse_.resgetservicelocationonregionname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetservicelocationonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse& Response::_internal_resgetservicelocationonregionname() const {
  return _internal_has_resgetservicelocationonregionname()
      ? *AResponse_.resgetservicelocationonregionname_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceLocationOnRegionNameResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse& Response::resgetservicelocationonregionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
  return _internal_resgetservicelocationonregionname();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Response::unsafe_arena_release_resgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
  if (_internal_has_resgetservicelocationonregionname()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* temp = AResponse_.resgetservicelocationonregionname_;
    AResponse_.resgetservicelocationonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetservicelocationonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* resgetservicelocationonregionname) {
  clear_AResponse();
  if (resgetservicelocationonregionname) {
    set_has_resgetservicelocationonregionname();
    AResponse_.resgetservicelocationonregionname_ = resgetservicelocationonregionname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Response::_internal_mutable_resgetservicelocationonregionname() {
  if (!_internal_has_resgetservicelocationonregionname()) {
    clear_AResponse();
    set_has_resgetservicelocationonregionname();
    AResponse_.resgetservicelocationonregionname_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse >(GetArena());
  }
  return AResponse_.resgetservicelocationonregionname_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceLocationOnRegionNameResponse* Response::mutable_resgetservicelocationonregionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceLocationOnRegionName)
  return _internal_mutable_resgetservicelocationonregionname();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnConditionResponse resGetServiceConfigOnCondition = 20;
inline bool Response::_internal_has_resgetserviceconfigoncondition() const {
  return AResponse_case() == kResGetServiceConfigOnCondition;
}
inline bool Response::has_resgetserviceconfigoncondition() const {
  return _internal_has_resgetserviceconfigoncondition();
}
inline void Response::set_has_resgetserviceconfigoncondition() {
  _oneof_case_[0] = kResGetServiceConfigOnCondition;
}
inline void Response::clear_resgetserviceconfigoncondition() {
  if (_internal_has_resgetserviceconfigoncondition()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceconfigoncondition_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Response::release_resgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
  if (_internal_has_resgetserviceconfigoncondition()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* temp = AResponse_.resgetserviceconfigoncondition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceconfigoncondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse& Response::_internal_resgetserviceconfigoncondition() const {
  return _internal_has_resgetserviceconfigoncondition()
      ? *AResponse_.resgetserviceconfigoncondition_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnConditionResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse& Response::resgetserviceconfigoncondition() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
  return _internal_resgetserviceconfigoncondition();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Response::unsafe_arena_release_resgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
  if (_internal_has_resgetserviceconfigoncondition()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* temp = AResponse_.resgetserviceconfigoncondition_;
    AResponse_.resgetserviceconfigoncondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceconfigoncondition(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* resgetserviceconfigoncondition) {
  clear_AResponse();
  if (resgetserviceconfigoncondition) {
    set_has_resgetserviceconfigoncondition();
    AResponse_.resgetserviceconfigoncondition_ = resgetserviceconfigoncondition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Response::_internal_mutable_resgetserviceconfigoncondition() {
  if (!_internal_has_resgetserviceconfigoncondition()) {
    clear_AResponse();
    set_has_resgetserviceconfigoncondition();
    AResponse_.resgetserviceconfigoncondition_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse >(GetArena());
  }
  return AResponse_.resgetserviceconfigoncondition_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnConditionResponse* Response::mutable_resgetserviceconfigoncondition() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnCondition)
  return _internal_mutable_resgetserviceconfigoncondition();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceProviderOnServiceTypeResponse resGetServiceProviderOnServiceType = 21;
inline bool Response::_internal_has_resgetserviceprovideronservicetype() const {
  return AResponse_case() == kResGetServiceProviderOnServiceType;
}
inline bool Response::has_resgetserviceprovideronservicetype() const {
  return _internal_has_resgetserviceprovideronservicetype();
}
inline void Response::set_has_resgetserviceprovideronservicetype() {
  _oneof_case_[0] = kResGetServiceProviderOnServiceType;
}
inline void Response::clear_resgetserviceprovideronservicetype() {
  if (_internal_has_resgetserviceprovideronservicetype()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceprovideronservicetype_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Response::release_resgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
  if (_internal_has_resgetserviceprovideronservicetype()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* temp = AResponse_.resgetserviceprovideronservicetype_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceprovideronservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse& Response::_internal_resgetserviceprovideronservicetype() const {
  return _internal_has_resgetserviceprovideronservicetype()
      ? *AResponse_.resgetserviceprovideronservicetype_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceProviderOnServiceTypeResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse& Response::resgetserviceprovideronservicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
  return _internal_resgetserviceprovideronservicetype();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Response::unsafe_arena_release_resgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
  if (_internal_has_resgetserviceprovideronservicetype()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* temp = AResponse_.resgetserviceprovideronservicetype_;
    AResponse_.resgetserviceprovideronservicetype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceprovideronservicetype(::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* resgetserviceprovideronservicetype) {
  clear_AResponse();
  if (resgetserviceprovideronservicetype) {
    set_has_resgetserviceprovideronservicetype();
    AResponse_.resgetserviceprovideronservicetype_ = resgetserviceprovideronservicetype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Response::_internal_mutable_resgetserviceprovideronservicetype() {
  if (!_internal_has_resgetserviceprovideronservicetype()) {
    clear_AResponse();
    set_has_resgetserviceprovideronservicetype();
    AResponse_.resgetserviceprovideronservicetype_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse >(GetArena());
  }
  return AResponse_.resgetserviceprovideronservicetype_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceProviderOnServiceTypeResponse* Response::mutable_resgetserviceprovideronservicetype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceProviderOnServiceType)
  return _internal_mutable_resgetserviceprovideronservicetype();
}

// .farm.nurture.serviceProvider.service.proto.GetLocationOnServiceProviderIdResponse resGetLocationOnServiceProviderId = 22;
inline bool Response::_internal_has_resgetlocationonserviceproviderid() const {
  return AResponse_case() == kResGetLocationOnServiceProviderId;
}
inline bool Response::has_resgetlocationonserviceproviderid() const {
  return _internal_has_resgetlocationonserviceproviderid();
}
inline void Response::set_has_resgetlocationonserviceproviderid() {
  _oneof_case_[0] = kResGetLocationOnServiceProviderId;
}
inline void Response::clear_resgetlocationonserviceproviderid() {
  if (_internal_has_resgetlocationonserviceproviderid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetlocationonserviceproviderid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Response::release_resgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
  if (_internal_has_resgetlocationonserviceproviderid()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* temp = AResponse_.resgetlocationonserviceproviderid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetlocationonserviceproviderid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse& Response::_internal_resgetlocationonserviceproviderid() const {
  return _internal_has_resgetlocationonserviceproviderid()
      ? *AResponse_.resgetlocationonserviceproviderid_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse&>(::farm::nurture::serviceProvider::service::proto::_GetLocationOnServiceProviderIdResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse& Response::resgetlocationonserviceproviderid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
  return _internal_resgetlocationonserviceproviderid();
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Response::unsafe_arena_release_resgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
  if (_internal_has_resgetlocationonserviceproviderid()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* temp = AResponse_.resgetlocationonserviceproviderid_;
    AResponse_.resgetlocationonserviceproviderid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetlocationonserviceproviderid(::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* resgetlocationonserviceproviderid) {
  clear_AResponse();
  if (resgetlocationonserviceproviderid) {
    set_has_resgetlocationonserviceproviderid();
    AResponse_.resgetlocationonserviceproviderid_ = resgetlocationonserviceproviderid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Response::_internal_mutable_resgetlocationonserviceproviderid() {
  if (!_internal_has_resgetlocationonserviceproviderid()) {
    clear_AResponse();
    set_has_resgetlocationonserviceproviderid();
    AResponse_.resgetlocationonserviceproviderid_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse >(GetArena());
  }
  return AResponse_.resgetlocationonserviceproviderid_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetLocationOnServiceProviderIdResponse* Response::mutable_resgetlocationonserviceproviderid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetLocationOnServiceProviderId)
  return _internal_mutable_resgetlocationonserviceproviderid();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigResponse resGetServiceConfig = 23;
inline bool Response::_internal_has_resgetserviceconfig() const {
  return AResponse_case() == kResGetServiceConfig;
}
inline bool Response::has_resgetserviceconfig() const {
  return _internal_has_resgetserviceconfig();
}
inline void Response::set_has_resgetserviceconfig() {
  _oneof_case_[0] = kResGetServiceConfig;
}
inline void Response::clear_resgetserviceconfig() {
  if (_internal_has_resgetserviceconfig()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceconfig_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Response::release_resgetserviceconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
  if (_internal_has_resgetserviceconfig()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* temp = AResponse_.resgetserviceconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse& Response::_internal_resgetserviceconfig() const {
  return _internal_has_resgetserviceconfig()
      ? *AResponse_.resgetserviceconfig_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse& Response::resgetserviceconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
  return _internal_resgetserviceconfig();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Response::unsafe_arena_release_resgetserviceconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
  if (_internal_has_resgetserviceconfig()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* temp = AResponse_.resgetserviceconfig_;
    AResponse_.resgetserviceconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceconfig(::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* resgetserviceconfig) {
  clear_AResponse();
  if (resgetserviceconfig) {
    set_has_resgetserviceconfig();
    AResponse_.resgetserviceconfig_ = resgetserviceconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Response::_internal_mutable_resgetserviceconfig() {
  if (!_internal_has_resgetserviceconfig()) {
    clear_AResponse();
    set_has_resgetserviceconfig();
    AResponse_.resgetserviceconfig_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse >(GetArena());
  }
  return AResponse_.resgetserviceconfig_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigResponse* Response::mutable_resgetserviceconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfig)
  return _internal_mutable_resgetserviceconfig();
}

// .farm.nurture.serviceProvider.service.proto.GetServiceConfigOnRegionNameResponse resGetServiceConfigOnRegionName = 24;
inline bool Response::_internal_has_resgetserviceconfigonregionname() const {
  return AResponse_case() == kResGetServiceConfigOnRegionName;
}
inline bool Response::has_resgetserviceconfigonregionname() const {
  return _internal_has_resgetserviceconfigonregionname();
}
inline void Response::set_has_resgetserviceconfigonregionname() {
  _oneof_case_[0] = kResGetServiceConfigOnRegionName;
}
inline void Response::clear_resgetserviceconfigonregionname() {
  if (_internal_has_resgetserviceconfigonregionname()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetserviceconfigonregionname_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Response::release_resgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
  if (_internal_has_resgetserviceconfigonregionname()) {
    clear_has_AResponse();
      ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* temp = AResponse_.resgetserviceconfigonregionname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetserviceconfigonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse& Response::_internal_resgetserviceconfigonregionname() const {
  return _internal_has_resgetserviceconfigonregionname()
      ? *AResponse_.resgetserviceconfigonregionname_
      : reinterpret_cast< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse&>(::farm::nurture::serviceProvider::service::proto::_GetServiceConfigOnRegionNameResponse_default_instance_);
}
inline const ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse& Response::resgetserviceconfigonregionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
  return _internal_resgetserviceconfigonregionname();
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Response::unsafe_arena_release_resgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
  if (_internal_has_resgetserviceconfigonregionname()) {
    clear_has_AResponse();
    ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* temp = AResponse_.resgetserviceconfigonregionname_;
    AResponse_.resgetserviceconfigonregionname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetserviceconfigonregionname(::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* resgetserviceconfigonregionname) {
  clear_AResponse();
  if (resgetserviceconfigonregionname) {
    set_has_resgetserviceconfigonregionname();
    AResponse_.resgetserviceconfigonregionname_ = resgetserviceconfigonregionname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Response::_internal_mutable_resgetserviceconfigonregionname() {
  if (!_internal_has_resgetserviceconfigonregionname()) {
    clear_AResponse();
    set_has_resgetserviceconfigonregionname();
    AResponse_.resgetserviceconfigonregionname_ = CreateMaybeMessage< ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse >(GetArena());
  }
  return AResponse_.resgetserviceconfigonregionname_;
}
inline ::farm::nurture::serviceProvider::service::proto::GetServiceConfigOnRegionNameResponse* Response::mutable_resgetserviceconfigonregionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.serviceProvider.service.proto.Response.resGetServiceConfigOnRegionName)
  return _internal_mutable_resgetserviceconfigonregionname();
}

inline bool Response::has_AResponse() const {
  return AResponse_case() != ARESPONSE_NOT_SET;
}
inline void Response::clear_has_AResponse() {
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}
inline Response::AResponseCase Response::AResponse_case() const {
  return Response::AResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace service
}  // namespace serviceProvider
}  // namespace nurture
}  // namespace farm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE>() {
  return ::farm::nurture::serviceProvider::service::proto::RequestHeaders_LANGUAGE_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY>() {
  return ::farm::nurture::serviceProvider::service::proto::RequestHeaders_COUNTRY_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::serviceProvider::service::proto::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::serviceProvider::service::proto::StatusCode>() {
  return ::farm::nurture::serviceProvider::service::proto::StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceProviderManagementService_2fservice_5fprovider_5fmanagement_5fservice_2eproto
