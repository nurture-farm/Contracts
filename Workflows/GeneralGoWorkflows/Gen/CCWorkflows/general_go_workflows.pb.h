// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Workflows/GeneralGoWorkflows/general_go_workflows.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/entities.pb.h"
#include "MachineService/machine_service.pb.h"
#include "Common/headers.pb.h"
#include "CommunicationEngine/communication_engine.pb.h"
#include "FeedbackService/feedback_service.pb.h"
#include "InsuranceService/insurance_service.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace workflows {
namespace generalgo {
class Attributes;
class AttributesDefaultTypeInternal;
extern AttributesDefaultTypeInternal _Attributes_default_instance_;
class ClearStaleCreatedOrderRequest;
class ClearStaleCreatedOrderRequestDefaultTypeInternal;
extern ClearStaleCreatedOrderRequestDefaultTypeInternal _ClearStaleCreatedOrderRequest_default_instance_;
class ClearStaleCreatedOrderResponse;
class ClearStaleCreatedOrderResponseDefaultTypeInternal;
extern ClearStaleCreatedOrderResponseDefaultTypeInternal _ClearStaleCreatedOrderResponse_default_instance_;
class CreatePartitionsRequest;
class CreatePartitionsRequestDefaultTypeInternal;
extern CreatePartitionsRequestDefaultTypeInternal _CreatePartitionsRequest_default_instance_;
class CreatePartitionsResponse;
class CreatePartitionsResponseDefaultTypeInternal;
extern CreatePartitionsResponseDefaultTypeInternal _CreatePartitionsResponse_default_instance_;
class DiscountedSprayServiceRequest;
class DiscountedSprayServiceRequestDefaultTypeInternal;
extern DiscountedSprayServiceRequestDefaultTypeInternal _DiscountedSprayServiceRequest_default_instance_;
class ExecuteCampaignRequest;
class ExecuteCampaignRequestDefaultTypeInternal;
extern ExecuteCampaignRequestDefaultTypeInternal _ExecuteCampaignRequest_default_instance_;
class ExecuteCampaignResponse;
class ExecuteCampaignResponseDefaultTypeInternal;
extern ExecuteCampaignResponseDefaultTypeInternal _ExecuteCampaignResponse_default_instance_;
class ExecuteUserJourneyCampaignRequest;
class ExecuteUserJourneyCampaignRequestDefaultTypeInternal;
extern ExecuteUserJourneyCampaignRequestDefaultTypeInternal _ExecuteUserJourneyCampaignRequest_default_instance_;
class ExecuteUserJourneyCampaignResponse;
class ExecuteUserJourneyCampaignResponseDefaultTypeInternal;
extern ExecuteUserJourneyCampaignResponseDefaultTypeInternal _ExecuteUserJourneyCampaignResponse_default_instance_;
class HandoverOtpRequest;
class HandoverOtpRequestDefaultTypeInternal;
extern HandoverOtpRequestDefaultTypeInternal _HandoverOtpRequest_default_instance_;
class HandoverOtpResponse;
class HandoverOtpResponseDefaultTypeInternal;
extern HandoverOtpResponseDefaultTypeInternal _HandoverOtpResponse_default_instance_;
class InsurancePurchaseEventRequest;
class InsurancePurchaseEventRequestDefaultTypeInternal;
extern InsurancePurchaseEventRequestDefaultTypeInternal _InsurancePurchaseEventRequest_default_instance_;
class InsurancePurchaseEventResponse;
class InsurancePurchaseEventResponseDefaultTypeInternal;
extern InsurancePurchaseEventResponseDefaultTypeInternal _InsurancePurchaseEventResponse_default_instance_;
class IotComputationRequest;
class IotComputationRequestDefaultTypeInternal;
extern IotComputationRequestDefaultTypeInternal _IotComputationRequest_default_instance_;
class IotComputationResponse;
class IotComputationResponseDefaultTypeInternal;
extern IotComputationResponseDefaultTypeInternal _IotComputationResponse_default_instance_;
class OfferInsuranceRewardRequest;
class OfferInsuranceRewardRequestDefaultTypeInternal;
extern OfferInsuranceRewardRequestDefaultTypeInternal _OfferInsuranceRewardRequest_default_instance_;
class OfferInsuranceRewardResponse;
class OfferInsuranceRewardResponseDefaultTypeInternal;
extern OfferInsuranceRewardResponseDefaultTypeInternal _OfferInsuranceRewardResponse_default_instance_;
class OfferRewardRequest;
class OfferRewardRequestDefaultTypeInternal;
extern OfferRewardRequestDefaultTypeInternal _OfferRewardRequest_default_instance_;
class OfferRewardResponse;
class OfferRewardResponseDefaultTypeInternal;
extern OfferRewardResponseDefaultTypeInternal _OfferRewardResponse_default_instance_;
class PostPusaSprayPopUpRequest;
class PostPusaSprayPopUpRequestDefaultTypeInternal;
extern PostPusaSprayPopUpRequestDefaultTypeInternal _PostPusaSprayPopUpRequest_default_instance_;
class PostPusaSprayPopUpResponse;
class PostPusaSprayPopUpResponseDefaultTypeInternal;
extern PostPusaSprayPopUpResponseDefaultTypeInternal _PostPusaSprayPopUpResponse_default_instance_;
class PostServiceFeedbackPNRequest;
class PostServiceFeedbackPNRequestDefaultTypeInternal;
extern PostServiceFeedbackPNRequestDefaultTypeInternal _PostServiceFeedbackPNRequest_default_instance_;
class PostServiceFeedbackPNResponse;
class PostServiceFeedbackPNResponseDefaultTypeInternal;
extern PostServiceFeedbackPNResponseDefaultTypeInternal _PostServiceFeedbackPNResponse_default_instance_;
class PreventiveMaintenanceTriggerRequest;
class PreventiveMaintenanceTriggerRequestDefaultTypeInternal;
extern PreventiveMaintenanceTriggerRequestDefaultTypeInternal _PreventiveMaintenanceTriggerRequest_default_instance_;
class PreventiveMaintenanceTriggerResponse;
class PreventiveMaintenanceTriggerResponseDefaultTypeInternal;
extern PreventiveMaintenanceTriggerResponseDefaultTypeInternal _PreventiveMaintenanceTriggerResponse_default_instance_;
class RefreshUserContentRequest;
class RefreshUserContentRequestDefaultTypeInternal;
extern RefreshUserContentRequestDefaultTypeInternal _RefreshUserContentRequest_default_instance_;
class RefreshUserContentResponse;
class RefreshUserContentResponseDefaultTypeInternal;
extern RefreshUserContentResponseDefaultTypeInternal _RefreshUserContentResponse_default_instance_;
class RescheduleMachinePreventiveMaintenanceRequest;
class RescheduleMachinePreventiveMaintenanceRequestDefaultTypeInternal;
extern RescheduleMachinePreventiveMaintenanceRequestDefaultTypeInternal _RescheduleMachinePreventiveMaintenanceRequest_default_instance_;
class RescheduleMachinePreventiveMaintenanceResponse;
class RescheduleMachinePreventiveMaintenanceResponseDefaultTypeInternal;
extern RescheduleMachinePreventiveMaintenanceResponseDefaultTypeInternal _RescheduleMachinePreventiveMaintenanceResponse_default_instance_;
class ScoreComputationRequest;
class ScoreComputationRequestDefaultTypeInternal;
extern ScoreComputationRequestDefaultTypeInternal _ScoreComputationRequest_default_instance_;
class ScoreComputationResponse;
class ScoreComputationResponseDefaultTypeInternal;
extern ScoreComputationResponseDefaultTypeInternal _ScoreComputationResponse_default_instance_;
class TriggerF2FPointExpiryCronRequest;
class TriggerF2FPointExpiryCronRequestDefaultTypeInternal;
extern TriggerF2FPointExpiryCronRequestDefaultTypeInternal _TriggerF2FPointExpiryCronRequest_default_instance_;
class TriggerF2FPointExpiryCronResponse;
class TriggerF2FPointExpiryCronResponseDefaultTypeInternal;
extern TriggerF2FPointExpiryCronResponseDefaultTypeInternal _TriggerF2FPointExpiryCronResponse_default_instance_;
class UpdateActorsMachinePreventiveMaintenanceRequest;
class UpdateActorsMachinePreventiveMaintenanceRequestDefaultTypeInternal;
extern UpdateActorsMachinePreventiveMaintenanceRequestDefaultTypeInternal _UpdateActorsMachinePreventiveMaintenanceRequest_default_instance_;
class UpdateActorsMachinePreventiveMaintenanceResponse;
class UpdateActorsMachinePreventiveMaintenanceResponseDefaultTypeInternal;
extern UpdateActorsMachinePreventiveMaintenanceResponseDefaultTypeInternal _UpdateActorsMachinePreventiveMaintenanceResponse_default_instance_;
}  // namespace generalgo
}  // namespace workflows
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::workflows::generalgo::Attributes* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::Attributes>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ClearStaleCreatedOrderRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ClearStaleCreatedOrderRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ClearStaleCreatedOrderResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ClearStaleCreatedOrderResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::DiscountedSprayServiceRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::DiscountedSprayServiceRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::InsurancePurchaseEventRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::InsurancePurchaseEventRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::InsurancePurchaseEventResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::InsurancePurchaseEventResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::IotComputationRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::IotComputationRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::IotComputationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::IotComputationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::OfferInsuranceRewardRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::OfferInsuranceRewardRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::OfferInsuranceRewardResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::OfferInsuranceRewardResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::OfferRewardRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::OfferRewardRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::OfferRewardResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::OfferRewardResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PostPusaSprayPopUpRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PostPusaSprayPopUpRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PostPusaSprayPopUpResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PostPusaSprayPopUpResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PostServiceFeedbackPNRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PostServiceFeedbackPNRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PostServiceFeedbackPNResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PostServiceFeedbackPNResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PreventiveMaintenanceTriggerRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PreventiveMaintenanceTriggerRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::PreventiveMaintenanceTriggerResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::PreventiveMaintenanceTriggerResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::RefreshUserContentRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::RefreshUserContentRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::RefreshUserContentResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::RefreshUserContentResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::RescheduleMachinePreventiveMaintenanceRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::RescheduleMachinePreventiveMaintenanceRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::RescheduleMachinePreventiveMaintenanceResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::RescheduleMachinePreventiveMaintenanceResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ScoreComputationRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ScoreComputationRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ScoreComputationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ScoreComputationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::TriggerF2FPointExpiryCronRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::TriggerF2FPointExpiryCronRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::TriggerF2FPointExpiryCronResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::TriggerF2FPointExpiryCronResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::UpdateActorsMachinePreventiveMaintenanceRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::UpdateActorsMachinePreventiveMaintenanceRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::UpdateActorsMachinePreventiveMaintenanceResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::UpdateActorsMachinePreventiveMaintenanceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace workflows {
namespace generalgo {

enum Status : int {
  NO_STATUS = 0,
  IN_PROGRESS = 1,
  COMPLETED = 2,
  FAILED = 3,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = NO_STATUS;
constexpr Status Status_MAX = FAILED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class ClearStaleCreatedOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest) */ {
 public:
  inline ClearStaleCreatedOrderRequest() : ClearStaleCreatedOrderRequest(nullptr) {}
  virtual ~ClearStaleCreatedOrderRequest();

  ClearStaleCreatedOrderRequest(const ClearStaleCreatedOrderRequest& from);
  ClearStaleCreatedOrderRequest(ClearStaleCreatedOrderRequest&& from) noexcept
    : ClearStaleCreatedOrderRequest() {
    *this = ::std::move(from);
  }

  inline ClearStaleCreatedOrderRequest& operator=(const ClearStaleCreatedOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearStaleCreatedOrderRequest& operator=(ClearStaleCreatedOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearStaleCreatedOrderRequest& default_instance();

  static inline const ClearStaleCreatedOrderRequest* internal_default_instance() {
    return reinterpret_cast<const ClearStaleCreatedOrderRequest*>(
               &_ClearStaleCreatedOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClearStaleCreatedOrderRequest& a, ClearStaleCreatedOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearStaleCreatedOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearStaleCreatedOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearStaleCreatedOrderRequest* New() const final {
    return CreateMaybeMessage<ClearStaleCreatedOrderRequest>(nullptr);
  }

  ClearStaleCreatedOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearStaleCreatedOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearStaleCreatedOrderRequest& from);
  void MergeFrom(const ClearStaleCreatedOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearStaleCreatedOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest";
  }
  protected:
  explicit ClearStaleCreatedOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ClearStaleCreatedOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderResponse) */ {
 public:
  inline ClearStaleCreatedOrderResponse() : ClearStaleCreatedOrderResponse(nullptr) {}
  virtual ~ClearStaleCreatedOrderResponse();

  ClearStaleCreatedOrderResponse(const ClearStaleCreatedOrderResponse& from);
  ClearStaleCreatedOrderResponse(ClearStaleCreatedOrderResponse&& from) noexcept
    : ClearStaleCreatedOrderResponse() {
    *this = ::std::move(from);
  }

  inline ClearStaleCreatedOrderResponse& operator=(const ClearStaleCreatedOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearStaleCreatedOrderResponse& operator=(ClearStaleCreatedOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearStaleCreatedOrderResponse& default_instance();

  static inline const ClearStaleCreatedOrderResponse* internal_default_instance() {
    return reinterpret_cast<const ClearStaleCreatedOrderResponse*>(
               &_ClearStaleCreatedOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClearStaleCreatedOrderResponse& a, ClearStaleCreatedOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearStaleCreatedOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearStaleCreatedOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearStaleCreatedOrderResponse* New() const final {
    return CreateMaybeMessage<ClearStaleCreatedOrderResponse>(nullptr);
  }

  ClearStaleCreatedOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearStaleCreatedOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearStaleCreatedOrderResponse& from);
  void MergeFrom(const ClearStaleCreatedOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearStaleCreatedOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderResponse";
  }
  protected:
  explicit ClearStaleCreatedOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ScoreComputationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationRequest) */ {
 public:
  inline ScoreComputationRequest() : ScoreComputationRequest(nullptr) {}
  virtual ~ScoreComputationRequest();

  ScoreComputationRequest(const ScoreComputationRequest& from);
  ScoreComputationRequest(ScoreComputationRequest&& from) noexcept
    : ScoreComputationRequest() {
    *this = ::std::move(from);
  }

  inline ScoreComputationRequest& operator=(const ScoreComputationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreComputationRequest& operator=(ScoreComputationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoreComputationRequest& default_instance();

  static inline const ScoreComputationRequest* internal_default_instance() {
    return reinterpret_cast<const ScoreComputationRequest*>(
               &_ScoreComputationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScoreComputationRequest& a, ScoreComputationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreComputationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreComputationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreComputationRequest* New() const final {
    return CreateMaybeMessage<ScoreComputationRequest>(nullptr);
  }

  ScoreComputationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreComputationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoreComputationRequest& from);
  void MergeFrom(const ScoreComputationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreComputationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ScoreComputationRequest";
  }
  protected:
  explicit ScoreComputationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoringIdFieldNumber = 1,
  };
  // int64 scoring_id = 1;
  void clear_scoring_id();
  ::PROTOBUF_NAMESPACE_ID::int64 scoring_id() const;
  void set_scoring_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scoring_id() const;
  void _internal_set_scoring_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 scoring_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ScoreComputationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationResponse) */ {
 public:
  inline ScoreComputationResponse() : ScoreComputationResponse(nullptr) {}
  virtual ~ScoreComputationResponse();

  ScoreComputationResponse(const ScoreComputationResponse& from);
  ScoreComputationResponse(ScoreComputationResponse&& from) noexcept
    : ScoreComputationResponse() {
    *this = ::std::move(from);
  }

  inline ScoreComputationResponse& operator=(const ScoreComputationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreComputationResponse& operator=(ScoreComputationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoreComputationResponse& default_instance();

  static inline const ScoreComputationResponse* internal_default_instance() {
    return reinterpret_cast<const ScoreComputationResponse*>(
               &_ScoreComputationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScoreComputationResponse& a, ScoreComputationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreComputationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreComputationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreComputationResponse* New() const final {
    return CreateMaybeMessage<ScoreComputationResponse>(nullptr);
  }

  ScoreComputationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreComputationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoreComputationResponse& from);
  void MergeFrom(const ScoreComputationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreComputationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ScoreComputationResponse";
  }
  protected:
  explicit ScoreComputationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class IotComputationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.IotComputationRequest) */ {
 public:
  inline IotComputationRequest() : IotComputationRequest(nullptr) {}
  virtual ~IotComputationRequest();

  IotComputationRequest(const IotComputationRequest& from);
  IotComputationRequest(IotComputationRequest&& from) noexcept
    : IotComputationRequest() {
    *this = ::std::move(from);
  }

  inline IotComputationRequest& operator=(const IotComputationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IotComputationRequest& operator=(IotComputationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IotComputationRequest& default_instance();

  static inline const IotComputationRequest* internal_default_instance() {
    return reinterpret_cast<const IotComputationRequest*>(
               &_IotComputationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IotComputationRequest& a, IotComputationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IotComputationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IotComputationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IotComputationRequest* New() const final {
    return CreateMaybeMessage<IotComputationRequest>(nullptr);
  }

  IotComputationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IotComputationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IotComputationRequest& from);
  void MergeFrom(const IotComputationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IotComputationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.IotComputationRequest";
  }
  protected:
  explicit IotComputationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.IotComputationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class IotComputationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.IotComputationResponse) */ {
 public:
  inline IotComputationResponse() : IotComputationResponse(nullptr) {}
  virtual ~IotComputationResponse();

  IotComputationResponse(const IotComputationResponse& from);
  IotComputationResponse(IotComputationResponse&& from) noexcept
    : IotComputationResponse() {
    *this = ::std::move(from);
  }

  inline IotComputationResponse& operator=(const IotComputationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IotComputationResponse& operator=(IotComputationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IotComputationResponse& default_instance();

  static inline const IotComputationResponse* internal_default_instance() {
    return reinterpret_cast<const IotComputationResponse*>(
               &_IotComputationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IotComputationResponse& a, IotComputationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IotComputationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IotComputationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IotComputationResponse* New() const final {
    return CreateMaybeMessage<IotComputationResponse>(nullptr);
  }

  IotComputationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IotComputationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IotComputationResponse& from);
  void MergeFrom(const IotComputationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IotComputationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.IotComputationResponse";
  }
  protected:
  explicit IotComputationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.IotComputationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PostServiceFeedbackPNRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest) */ {
 public:
  inline PostServiceFeedbackPNRequest() : PostServiceFeedbackPNRequest(nullptr) {}
  virtual ~PostServiceFeedbackPNRequest();

  PostServiceFeedbackPNRequest(const PostServiceFeedbackPNRequest& from);
  PostServiceFeedbackPNRequest(PostServiceFeedbackPNRequest&& from) noexcept
    : PostServiceFeedbackPNRequest() {
    *this = ::std::move(from);
  }

  inline PostServiceFeedbackPNRequest& operator=(const PostServiceFeedbackPNRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostServiceFeedbackPNRequest& operator=(PostServiceFeedbackPNRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostServiceFeedbackPNRequest& default_instance();

  static inline const PostServiceFeedbackPNRequest* internal_default_instance() {
    return reinterpret_cast<const PostServiceFeedbackPNRequest*>(
               &_PostServiceFeedbackPNRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PostServiceFeedbackPNRequest& a, PostServiceFeedbackPNRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostServiceFeedbackPNRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostServiceFeedbackPNRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostServiceFeedbackPNRequest* New() const final {
    return CreateMaybeMessage<PostServiceFeedbackPNRequest>(nullptr);
  }

  PostServiceFeedbackPNRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostServiceFeedbackPNRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostServiceFeedbackPNRequest& from);
  void MergeFrom(const PostServiceFeedbackPNRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostServiceFeedbackPNRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest";
  }
  protected:
  explicit PostServiceFeedbackPNRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kExternalTypeFieldNumber = 4,
    kExternalIdFieldNumber = 5,
    kFeatureFieldNumber = 6,
    kActorFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kNamespaceFieldNumber = 7,
  };
  // string serviceName = 3;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string externalType = 4;
  void clear_externaltype();
  const std::string& externaltype() const;
  void set_externaltype(const std::string& value);
  void set_externaltype(std::string&& value);
  void set_externaltype(const char* value);
  void set_externaltype(const char* value, size_t size);
  std::string* mutable_externaltype();
  std::string* release_externaltype();
  void set_allocated_externaltype(std::string* externaltype);
  private:
  const std::string& _internal_externaltype() const;
  void _internal_set_externaltype(const std::string& value);
  std::string* _internal_mutable_externaltype();
  public:

  // string externalId = 5;
  void clear_externalid();
  const std::string& externalid() const;
  void set_externalid(const std::string& value);
  void set_externalid(std::string&& value);
  void set_externalid(const char* value);
  void set_externalid(const char* value, size_t size);
  std::string* mutable_externalid();
  std::string* release_externalid();
  void set_allocated_externalid(std::string* externalid);
  private:
  const std::string& _internal_externalid() const;
  void _internal_set_externalid(const std::string& value);
  std::string* _internal_mutable_externalid();
  public:

  // string feature = 6;
  void clear_feature();
  const std::string& feature() const;
  void set_feature(const std::string& value);
  void set_feature(std::string&& value);
  void set_feature(const char* value);
  void set_feature(const char* value, size_t size);
  std::string* mutable_feature();
  std::string* release_feature();
  void set_allocated_feature(std::string* feature);
  private:
  const std::string& _internal_feature() const;
  void _internal_set_feature(const std::string& value);
  std::string* _internal_mutable_feature();
  public:

  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 2;
  void clear_languagecode();
  ::farm::nurture::core::contracts::common::LanguageCode languagecode() const;
  void set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_languagecode() const;
  void _internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // .farm.nurture.core.contracts.feedback.Namespace namespace = 7;
  void clear_namespace_();
  ::farm::nurture::core::contracts::feedback::Namespace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value);
  private:
  ::farm::nurture::core::contracts::feedback::Namespace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externaltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int languagecode_;
  int namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PostPusaSprayPopUpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest) */ {
 public:
  inline PostPusaSprayPopUpRequest() : PostPusaSprayPopUpRequest(nullptr) {}
  virtual ~PostPusaSprayPopUpRequest();

  PostPusaSprayPopUpRequest(const PostPusaSprayPopUpRequest& from);
  PostPusaSprayPopUpRequest(PostPusaSprayPopUpRequest&& from) noexcept
    : PostPusaSprayPopUpRequest() {
    *this = ::std::move(from);
  }

  inline PostPusaSprayPopUpRequest& operator=(const PostPusaSprayPopUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostPusaSprayPopUpRequest& operator=(PostPusaSprayPopUpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostPusaSprayPopUpRequest& default_instance();

  static inline const PostPusaSprayPopUpRequest* internal_default_instance() {
    return reinterpret_cast<const PostPusaSprayPopUpRequest*>(
               &_PostPusaSprayPopUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PostPusaSprayPopUpRequest& a, PostPusaSprayPopUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostPusaSprayPopUpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostPusaSprayPopUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostPusaSprayPopUpRequest* New() const final {
    return CreateMaybeMessage<PostPusaSprayPopUpRequest>(nullptr);
  }

  PostPusaSprayPopUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostPusaSprayPopUpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostPusaSprayPopUpRequest& from);
  void MergeFrom(const PostPusaSprayPopUpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostPusaSprayPopUpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest";
  }
  protected:
  explicit PostPusaSprayPopUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kExternalTypeFieldNumber = 4,
    kExternalIdFieldNumber = 5,
    kActorFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kNamespaceFieldNumber = 7,
    kEventIdFieldNumber = 8,
    kFarmIdFieldNumber = 9,
  };
  // string serviceName = 3;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string externalType = 4;
  void clear_externaltype();
  const std::string& externaltype() const;
  void set_externaltype(const std::string& value);
  void set_externaltype(std::string&& value);
  void set_externaltype(const char* value);
  void set_externaltype(const char* value, size_t size);
  std::string* mutable_externaltype();
  std::string* release_externaltype();
  void set_allocated_externaltype(std::string* externaltype);
  private:
  const std::string& _internal_externaltype() const;
  void _internal_set_externaltype(const std::string& value);
  std::string* _internal_mutable_externaltype();
  public:

  // string externalId = 5;
  void clear_externalid();
  const std::string& externalid() const;
  void set_externalid(const std::string& value);
  void set_externalid(std::string&& value);
  void set_externalid(const char* value);
  void set_externalid(const char* value, size_t size);
  std::string* mutable_externalid();
  std::string* release_externalid();
  void set_allocated_externalid(std::string* externalid);
  private:
  const std::string& _internal_externalid() const;
  void _internal_set_externalid(const std::string& value);
  std::string* _internal_mutable_externalid();
  public:

  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 2;
  void clear_languagecode();
  ::farm::nurture::core::contracts::common::LanguageCode languagecode() const;
  void set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_languagecode() const;
  void _internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // .farm.nurture.core.contracts.feedback.Namespace namespace = 7;
  void clear_namespace_();
  ::farm::nurture::core::contracts::feedback::Namespace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value);
  private:
  ::farm::nurture::core::contracts::feedback::Namespace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value);
  public:

  // int64 eventId = 8;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int64 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 farmId = 9;
  void clear_farmid();
  ::PROTOBUF_NAMESPACE_ID::int64 farmid() const;
  void set_farmid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_farmid() const;
  void _internal_set_farmid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externaltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externalid_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int languagecode_;
  int namespace__;
  ::PROTOBUF_NAMESPACE_ID::int64 eventid_;
  ::PROTOBUF_NAMESPACE_ID::int64 farmid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PostServiceFeedbackPNResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNResponse) */ {
 public:
  inline PostServiceFeedbackPNResponse() : PostServiceFeedbackPNResponse(nullptr) {}
  virtual ~PostServiceFeedbackPNResponse();

  PostServiceFeedbackPNResponse(const PostServiceFeedbackPNResponse& from);
  PostServiceFeedbackPNResponse(PostServiceFeedbackPNResponse&& from) noexcept
    : PostServiceFeedbackPNResponse() {
    *this = ::std::move(from);
  }

  inline PostServiceFeedbackPNResponse& operator=(const PostServiceFeedbackPNResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostServiceFeedbackPNResponse& operator=(PostServiceFeedbackPNResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostServiceFeedbackPNResponse& default_instance();

  static inline const PostServiceFeedbackPNResponse* internal_default_instance() {
    return reinterpret_cast<const PostServiceFeedbackPNResponse*>(
               &_PostServiceFeedbackPNResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PostServiceFeedbackPNResponse& a, PostServiceFeedbackPNResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostServiceFeedbackPNResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostServiceFeedbackPNResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostServiceFeedbackPNResponse* New() const final {
    return CreateMaybeMessage<PostServiceFeedbackPNResponse>(nullptr);
  }

  PostServiceFeedbackPNResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostServiceFeedbackPNResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostServiceFeedbackPNResponse& from);
  void MergeFrom(const PostServiceFeedbackPNResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostServiceFeedbackPNResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNResponse";
  }
  protected:
  explicit PostServiceFeedbackPNResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PostPusaSprayPopUpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpResponse) */ {
 public:
  inline PostPusaSprayPopUpResponse() : PostPusaSprayPopUpResponse(nullptr) {}
  virtual ~PostPusaSprayPopUpResponse();

  PostPusaSprayPopUpResponse(const PostPusaSprayPopUpResponse& from);
  PostPusaSprayPopUpResponse(PostPusaSprayPopUpResponse&& from) noexcept
    : PostPusaSprayPopUpResponse() {
    *this = ::std::move(from);
  }

  inline PostPusaSprayPopUpResponse& operator=(const PostPusaSprayPopUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostPusaSprayPopUpResponse& operator=(PostPusaSprayPopUpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostPusaSprayPopUpResponse& default_instance();

  static inline const PostPusaSprayPopUpResponse* internal_default_instance() {
    return reinterpret_cast<const PostPusaSprayPopUpResponse*>(
               &_PostPusaSprayPopUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PostPusaSprayPopUpResponse& a, PostPusaSprayPopUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostPusaSprayPopUpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostPusaSprayPopUpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostPusaSprayPopUpResponse* New() const final {
    return CreateMaybeMessage<PostPusaSprayPopUpResponse>(nullptr);
  }

  PostPusaSprayPopUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostPusaSprayPopUpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostPusaSprayPopUpResponse& from);
  void MergeFrom(const PostPusaSprayPopUpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostPusaSprayPopUpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpResponse";
  }
  protected:
  explicit PostPusaSprayPopUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteUserJourneyCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest) */ {
 public:
  inline ExecuteUserJourneyCampaignRequest() : ExecuteUserJourneyCampaignRequest(nullptr) {}
  virtual ~ExecuteUserJourneyCampaignRequest();

  ExecuteUserJourneyCampaignRequest(const ExecuteUserJourneyCampaignRequest& from);
  ExecuteUserJourneyCampaignRequest(ExecuteUserJourneyCampaignRequest&& from) noexcept
    : ExecuteUserJourneyCampaignRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteUserJourneyCampaignRequest& operator=(const ExecuteUserJourneyCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteUserJourneyCampaignRequest& operator=(ExecuteUserJourneyCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteUserJourneyCampaignRequest& default_instance();

  static inline const ExecuteUserJourneyCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteUserJourneyCampaignRequest*>(
               &_ExecuteUserJourneyCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ExecuteUserJourneyCampaignRequest& a, ExecuteUserJourneyCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteUserJourneyCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteUserJourneyCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteUserJourneyCampaignRequest* New() const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignRequest>(nullptr);
  }

  ExecuteUserJourneyCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteUserJourneyCampaignRequest& from);
  void MergeFrom(const ExecuteUserJourneyCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteUserJourneyCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest";
  }
  protected:
  explicit ExecuteUserJourneyCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceIdFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kWaitDurationFieldNumber = 5,
    kCampaignIdFieldNumber = 2,
    kEngagementVertexIdFieldNumber = 3,
  };
  // string referenceId = 4;
  void clear_referenceid();
  const std::string& referenceid() const;
  void set_referenceid(const std::string& value);
  void set_referenceid(std::string&& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  std::string* mutable_referenceid();
  std::string* release_referenceid();
  void set_allocated_referenceid(std::string* referenceid);
  private:
  const std::string& _internal_referenceid() const;
  void _internal_set_referenceid(const std::string& value);
  std::string* _internal_mutable_referenceid();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .google.protobuf.Duration waitDuration = 5;
  bool has_waitduration() const;
  private:
  bool _internal_has_waitduration() const;
  public:
  void clear_waitduration();
  const PROTOBUF_NAMESPACE_ID::Duration& waitduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_waitduration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_waitduration();
  void set_allocated_waitduration(PROTOBUF_NAMESPACE_ID::Duration* waitduration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_waitduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_waitduration();
  public:
  void unsafe_arena_set_allocated_waitduration(
      PROTOBUF_NAMESPACE_ID::Duration* waitduration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_waitduration();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 engagementVertexId = 3;
  void clear_engagementvertexid();
  ::PROTOBUF_NAMESPACE_ID::int64 engagementvertexid() const;
  void set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_engagementvertexid() const;
  void _internal_set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referenceid_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  PROTOBUF_NAMESPACE_ID::Duration* waitduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int64 engagementvertexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteUserJourneyCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse) */ {
 public:
  inline ExecuteUserJourneyCampaignResponse() : ExecuteUserJourneyCampaignResponse(nullptr) {}
  virtual ~ExecuteUserJourneyCampaignResponse();

  ExecuteUserJourneyCampaignResponse(const ExecuteUserJourneyCampaignResponse& from);
  ExecuteUserJourneyCampaignResponse(ExecuteUserJourneyCampaignResponse&& from) noexcept
    : ExecuteUserJourneyCampaignResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteUserJourneyCampaignResponse& operator=(const ExecuteUserJourneyCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteUserJourneyCampaignResponse& operator=(ExecuteUserJourneyCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteUserJourneyCampaignResponse& default_instance();

  static inline const ExecuteUserJourneyCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteUserJourneyCampaignResponse*>(
               &_ExecuteUserJourneyCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExecuteUserJourneyCampaignResponse& a, ExecuteUserJourneyCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteUserJourneyCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteUserJourneyCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteUserJourneyCampaignResponse* New() const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignResponse>(nullptr);
  }

  ExecuteUserJourneyCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteUserJourneyCampaignResponse& from);
  void MergeFrom(const ExecuteUserJourneyCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteUserJourneyCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse";
  }
  protected:
  explicit ExecuteUserJourneyCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest) */ {
 public:
  inline ExecuteCampaignRequest() : ExecuteCampaignRequest(nullptr) {}
  virtual ~ExecuteCampaignRequest();

  ExecuteCampaignRequest(const ExecuteCampaignRequest& from);
  ExecuteCampaignRequest(ExecuteCampaignRequest&& from) noexcept
    : ExecuteCampaignRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteCampaignRequest& operator=(const ExecuteCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCampaignRequest& operator=(ExecuteCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCampaignRequest& default_instance();

  static inline const ExecuteCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteCampaignRequest*>(
               &_ExecuteCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ExecuteCampaignRequest& a, ExecuteCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCampaignRequest* New() const final {
    return CreateMaybeMessage<ExecuteCampaignRequest>(nullptr);
  }

  ExecuteCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCampaignRequest& from);
  void MergeFrom(const ExecuteCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest";
  }
  protected:
  explicit ExecuteCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInactionDurationFieldNumber = 3,
    kCampaignIdFieldNumber = 1,
    kCampaignScheduleTypeFieldNumber = 2,
  };
  // .google.protobuf.Duration inactionDuration = 3;
  bool has_inactionduration() const;
  private:
  bool _internal_has_inactionduration() const;
  public:
  void clear_inactionduration();
  const PROTOBUF_NAMESPACE_ID::Duration& inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_inactionduration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_inactionduration();
  void set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_inactionduration();
  public:
  void unsafe_arena_set_allocated_inactionduration(
      PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_inactionduration();

  // int64 campaign_id = 1;
  void clear_campaign_id();
  ::PROTOBUF_NAMESPACE_ID::int64 campaign_id() const;
  void set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaign_id() const;
  void _internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 2;
  void clear_campaignscheduletype();
  ::farm::nurture::core::contracts::common::CampaignScheduleType campaignscheduletype() const;
  void set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  private:
  ::farm::nurture::core::contracts::common::CampaignScheduleType _internal_campaignscheduletype() const;
  void _internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* inactionduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaign_id_;
  int campaignscheduletype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse) */ {
 public:
  inline ExecuteCampaignResponse() : ExecuteCampaignResponse(nullptr) {}
  virtual ~ExecuteCampaignResponse();

  ExecuteCampaignResponse(const ExecuteCampaignResponse& from);
  ExecuteCampaignResponse(ExecuteCampaignResponse&& from) noexcept
    : ExecuteCampaignResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteCampaignResponse& operator=(const ExecuteCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCampaignResponse& operator=(ExecuteCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCampaignResponse& default_instance();

  static inline const ExecuteCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteCampaignResponse*>(
               &_ExecuteCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExecuteCampaignResponse& a, ExecuteCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCampaignResponse* New() const final {
    return CreateMaybeMessage<ExecuteCampaignResponse>(nullptr);
  }

  ExecuteCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCampaignResponse& from);
  void MergeFrom(const ExecuteCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse";
  }
  protected:
  explicit ExecuteCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class RefreshUserContentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest) */ {
 public:
  inline RefreshUserContentRequest() : RefreshUserContentRequest(nullptr) {}
  virtual ~RefreshUserContentRequest();

  RefreshUserContentRequest(const RefreshUserContentRequest& from);
  RefreshUserContentRequest(RefreshUserContentRequest&& from) noexcept
    : RefreshUserContentRequest() {
    *this = ::std::move(from);
  }

  inline RefreshUserContentRequest& operator=(const RefreshUserContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshUserContentRequest& operator=(RefreshUserContentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshUserContentRequest& default_instance();

  static inline const RefreshUserContentRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshUserContentRequest*>(
               &_RefreshUserContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RefreshUserContentRequest& a, RefreshUserContentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshUserContentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshUserContentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshUserContentRequest* New() const final {
    return CreateMaybeMessage<RefreshUserContentRequest>(nullptr);
  }

  RefreshUserContentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshUserContentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshUserContentRequest& from);
  void MergeFrom(const RefreshUserContentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshUserContentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest";
  }
  protected:
  explicit RefreshUserContentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 2,
    kActorFieldNumber = 1,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
  };
  // repeated .farm.nurture.core.contracts.common.LanguageCode languageCodes = 2;
  int languagecodes_size() const;
  private:
  int _internal_languagecodes_size() const;
  public:
  void clear_languagecodes();
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_languagecodes(int index) const;
  void _internal_add_languagecodes(::farm::nurture::core::contracts::common::LanguageCode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_languagecodes();
  public:
  ::farm::nurture::core::contracts::common::LanguageCode languagecodes(int index) const;
  void set_languagecodes(int index, ::farm::nurture::core::contracts::common::LanguageCode value);
  void add_languagecodes(::farm::nurture::core::contracts::common::LanguageCode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& languagecodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_languagecodes();

  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> languagecodes_;
  mutable std::atomic<int> _languagecodes_cached_byte_size_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class RefreshUserContentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse) */ {
 public:
  inline RefreshUserContentResponse() : RefreshUserContentResponse(nullptr) {}
  virtual ~RefreshUserContentResponse();

  RefreshUserContentResponse(const RefreshUserContentResponse& from);
  RefreshUserContentResponse(RefreshUserContentResponse&& from) noexcept
    : RefreshUserContentResponse() {
    *this = ::std::move(from);
  }

  inline RefreshUserContentResponse& operator=(const RefreshUserContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshUserContentResponse& operator=(RefreshUserContentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshUserContentResponse& default_instance();

  static inline const RefreshUserContentResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshUserContentResponse*>(
               &_RefreshUserContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RefreshUserContentResponse& a, RefreshUserContentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshUserContentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshUserContentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshUserContentResponse* New() const final {
    return CreateMaybeMessage<RefreshUserContentResponse>(nullptr);
  }

  RefreshUserContentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshUserContentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshUserContentResponse& from);
  void MergeFrom(const RefreshUserContentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshUserContentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse";
  }
  protected:
  explicit RefreshUserContentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentIdsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 contentIds = 2;
  int contentids_size() const;
  private:
  int _internal_contentids_size() const;
  public:
  void clear_contentids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_contentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_contentids() const;
  void _internal_add_contentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_contentids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 contentids(int index) const;
  void set_contentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_contentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      contentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_contentids();

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > contentids_;
  mutable std::atomic<int> _contentids_cached_byte_size_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PreventiveMaintenanceTriggerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerRequest) */ {
 public:
  inline PreventiveMaintenanceTriggerRequest() : PreventiveMaintenanceTriggerRequest(nullptr) {}
  virtual ~PreventiveMaintenanceTriggerRequest();

  PreventiveMaintenanceTriggerRequest(const PreventiveMaintenanceTriggerRequest& from);
  PreventiveMaintenanceTriggerRequest(PreventiveMaintenanceTriggerRequest&& from) noexcept
    : PreventiveMaintenanceTriggerRequest() {
    *this = ::std::move(from);
  }

  inline PreventiveMaintenanceTriggerRequest& operator=(const PreventiveMaintenanceTriggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreventiveMaintenanceTriggerRequest& operator=(PreventiveMaintenanceTriggerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreventiveMaintenanceTriggerRequest& default_instance();

  static inline const PreventiveMaintenanceTriggerRequest* internal_default_instance() {
    return reinterpret_cast<const PreventiveMaintenanceTriggerRequest*>(
               &_PreventiveMaintenanceTriggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PreventiveMaintenanceTriggerRequest& a, PreventiveMaintenanceTriggerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreventiveMaintenanceTriggerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreventiveMaintenanceTriggerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreventiveMaintenanceTriggerRequest* New() const final {
    return CreateMaybeMessage<PreventiveMaintenanceTriggerRequest>(nullptr);
  }

  PreventiveMaintenanceTriggerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreventiveMaintenanceTriggerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreventiveMaintenanceTriggerRequest& from);
  void MergeFrom(const PreventiveMaintenanceTriggerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreventiveMaintenanceTriggerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerRequest";
  }
  protected:
  explicit PreventiveMaintenanceTriggerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class PreventiveMaintenanceTriggerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerResponse) */ {
 public:
  inline PreventiveMaintenanceTriggerResponse() : PreventiveMaintenanceTriggerResponse(nullptr) {}
  virtual ~PreventiveMaintenanceTriggerResponse();

  PreventiveMaintenanceTriggerResponse(const PreventiveMaintenanceTriggerResponse& from);
  PreventiveMaintenanceTriggerResponse(PreventiveMaintenanceTriggerResponse&& from) noexcept
    : PreventiveMaintenanceTriggerResponse() {
    *this = ::std::move(from);
  }

  inline PreventiveMaintenanceTriggerResponse& operator=(const PreventiveMaintenanceTriggerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreventiveMaintenanceTriggerResponse& operator=(PreventiveMaintenanceTriggerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreventiveMaintenanceTriggerResponse& default_instance();

  static inline const PreventiveMaintenanceTriggerResponse* internal_default_instance() {
    return reinterpret_cast<const PreventiveMaintenanceTriggerResponse*>(
               &_PreventiveMaintenanceTriggerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PreventiveMaintenanceTriggerResponse& a, PreventiveMaintenanceTriggerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreventiveMaintenanceTriggerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreventiveMaintenanceTriggerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreventiveMaintenanceTriggerResponse* New() const final {
    return CreateMaybeMessage<PreventiveMaintenanceTriggerResponse>(nullptr);
  }

  PreventiveMaintenanceTriggerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreventiveMaintenanceTriggerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreventiveMaintenanceTriggerResponse& from);
  void MergeFrom(const PreventiveMaintenanceTriggerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreventiveMaintenanceTriggerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerResponse";
  }
  protected:
  explicit PreventiveMaintenanceTriggerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class UpdateActorsMachinePreventiveMaintenanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest) */ {
 public:
  inline UpdateActorsMachinePreventiveMaintenanceRequest() : UpdateActorsMachinePreventiveMaintenanceRequest(nullptr) {}
  virtual ~UpdateActorsMachinePreventiveMaintenanceRequest();

  UpdateActorsMachinePreventiveMaintenanceRequest(const UpdateActorsMachinePreventiveMaintenanceRequest& from);
  UpdateActorsMachinePreventiveMaintenanceRequest(UpdateActorsMachinePreventiveMaintenanceRequest&& from) noexcept
    : UpdateActorsMachinePreventiveMaintenanceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateActorsMachinePreventiveMaintenanceRequest& operator=(const UpdateActorsMachinePreventiveMaintenanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateActorsMachinePreventiveMaintenanceRequest& operator=(UpdateActorsMachinePreventiveMaintenanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateActorsMachinePreventiveMaintenanceRequest& default_instance();

  static inline const UpdateActorsMachinePreventiveMaintenanceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateActorsMachinePreventiveMaintenanceRequest*>(
               &_UpdateActorsMachinePreventiveMaintenanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateActorsMachinePreventiveMaintenanceRequest& a, UpdateActorsMachinePreventiveMaintenanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateActorsMachinePreventiveMaintenanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateActorsMachinePreventiveMaintenanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateActorsMachinePreventiveMaintenanceRequest* New() const final {
    return CreateMaybeMessage<UpdateActorsMachinePreventiveMaintenanceRequest>(nullptr);
  }

  UpdateActorsMachinePreventiveMaintenanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateActorsMachinePreventiveMaintenanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateActorsMachinePreventiveMaintenanceRequest& from);
  void MergeFrom(const UpdateActorsMachinePreventiveMaintenanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateActorsMachinePreventiveMaintenanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest";
  }
  protected:
  explicit UpdateActorsMachinePreventiveMaintenanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorDetailsFieldNumber = 1,
    kMachineIdFieldNumber = 3,
    kPreventiveMaintenanceIdFieldNumber = 2,
    kPmStatusFieldNumber = 5,
    kMachinePreventiveMaintenanceIdFieldNumber = 4,
  };
  // repeated .farm.nurture.core.contracts.common.ActorID actorDetails = 1;
  int actordetails_size() const;
  private:
  int _internal_actordetails_size() const;
  public:
  void clear_actordetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actordetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ActorID >*
      mutable_actordetails();
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actordetails(int index) const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_add_actordetails();
  public:
  const ::farm::nurture::core::contracts::common::ActorID& actordetails(int index) const;
  ::farm::nurture::core::contracts::common::ActorID* add_actordetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ActorID >&
      actordetails() const;

  // int64 machineId = 3;
  void clear_machineid();
  ::PROTOBUF_NAMESPACE_ID::int64 machineid() const;
  void set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machineid() const;
  void _internal_set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 preventiveMaintenanceId = 2;
  void clear_preventivemaintenanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 preventivemaintenanceid() const;
  void set_preventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preventivemaintenanceid() const;
  void _internal_set_preventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.ms.PreventiveMaintenanceStatus pmStatus = 5;
  void clear_pmstatus();
  ::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus pmstatus() const;
  void set_pmstatus(::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus value);
  private:
  ::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus _internal_pmstatus() const;
  void _internal_set_pmstatus(::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus value);
  public:

  // int64 machinePreventiveMaintenanceId = 4;
  void clear_machinepreventivemaintenanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 machinepreventivemaintenanceid() const;
  void set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machinepreventivemaintenanceid() const;
  void _internal_set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ActorID > actordetails_;
  ::PROTOBUF_NAMESPACE_ID::int64 machineid_;
  ::PROTOBUF_NAMESPACE_ID::int32 preventivemaintenanceid_;
  int pmstatus_;
  ::PROTOBUF_NAMESPACE_ID::int64 machinepreventivemaintenanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class UpdateActorsMachinePreventiveMaintenanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceResponse) */ {
 public:
  inline UpdateActorsMachinePreventiveMaintenanceResponse() : UpdateActorsMachinePreventiveMaintenanceResponse(nullptr) {}
  virtual ~UpdateActorsMachinePreventiveMaintenanceResponse();

  UpdateActorsMachinePreventiveMaintenanceResponse(const UpdateActorsMachinePreventiveMaintenanceResponse& from);
  UpdateActorsMachinePreventiveMaintenanceResponse(UpdateActorsMachinePreventiveMaintenanceResponse&& from) noexcept
    : UpdateActorsMachinePreventiveMaintenanceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateActorsMachinePreventiveMaintenanceResponse& operator=(const UpdateActorsMachinePreventiveMaintenanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateActorsMachinePreventiveMaintenanceResponse& operator=(UpdateActorsMachinePreventiveMaintenanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateActorsMachinePreventiveMaintenanceResponse& default_instance();

  static inline const UpdateActorsMachinePreventiveMaintenanceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateActorsMachinePreventiveMaintenanceResponse*>(
               &_UpdateActorsMachinePreventiveMaintenanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateActorsMachinePreventiveMaintenanceResponse& a, UpdateActorsMachinePreventiveMaintenanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateActorsMachinePreventiveMaintenanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateActorsMachinePreventiveMaintenanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateActorsMachinePreventiveMaintenanceResponse* New() const final {
    return CreateMaybeMessage<UpdateActorsMachinePreventiveMaintenanceResponse>(nullptr);
  }

  UpdateActorsMachinePreventiveMaintenanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateActorsMachinePreventiveMaintenanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateActorsMachinePreventiveMaintenanceResponse& from);
  void MergeFrom(const UpdateActorsMachinePreventiveMaintenanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateActorsMachinePreventiveMaintenanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceResponse";
  }
  protected:
  explicit UpdateActorsMachinePreventiveMaintenanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class RescheduleMachinePreventiveMaintenanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest) */ {
 public:
  inline RescheduleMachinePreventiveMaintenanceRequest() : RescheduleMachinePreventiveMaintenanceRequest(nullptr) {}
  virtual ~RescheduleMachinePreventiveMaintenanceRequest();

  RescheduleMachinePreventiveMaintenanceRequest(const RescheduleMachinePreventiveMaintenanceRequest& from);
  RescheduleMachinePreventiveMaintenanceRequest(RescheduleMachinePreventiveMaintenanceRequest&& from) noexcept
    : RescheduleMachinePreventiveMaintenanceRequest() {
    *this = ::std::move(from);
  }

  inline RescheduleMachinePreventiveMaintenanceRequest& operator=(const RescheduleMachinePreventiveMaintenanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RescheduleMachinePreventiveMaintenanceRequest& operator=(RescheduleMachinePreventiveMaintenanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RescheduleMachinePreventiveMaintenanceRequest& default_instance();

  static inline const RescheduleMachinePreventiveMaintenanceRequest* internal_default_instance() {
    return reinterpret_cast<const RescheduleMachinePreventiveMaintenanceRequest*>(
               &_RescheduleMachinePreventiveMaintenanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RescheduleMachinePreventiveMaintenanceRequest& a, RescheduleMachinePreventiveMaintenanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RescheduleMachinePreventiveMaintenanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RescheduleMachinePreventiveMaintenanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RescheduleMachinePreventiveMaintenanceRequest* New() const final {
    return CreateMaybeMessage<RescheduleMachinePreventiveMaintenanceRequest>(nullptr);
  }

  RescheduleMachinePreventiveMaintenanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RescheduleMachinePreventiveMaintenanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RescheduleMachinePreventiveMaintenanceRequest& from);
  void MergeFrom(const RescheduleMachinePreventiveMaintenanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RescheduleMachinePreventiveMaintenanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest";
  }
  protected:
  explicit RescheduleMachinePreventiveMaintenanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
    kDateFieldNumber = 2,
    kMachinePreventiveMaintenanceIdFieldNumber = 3,
  };
  // int64 machineId = 1;
  void clear_machineid();
  ::PROTOBUF_NAMESPACE_ID::int64 machineid() const;
  void set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machineid() const;
  void _internal_set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 date = 2;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 machinePreventiveMaintenanceId = 3;
  void clear_machinepreventivemaintenanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 machinepreventivemaintenanceid() const;
  void set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_machinepreventivemaintenanceid() const;
  void _internal_set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 machineid_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  ::PROTOBUF_NAMESPACE_ID::int64 machinepreventivemaintenanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class RescheduleMachinePreventiveMaintenanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceResponse) */ {
 public:
  inline RescheduleMachinePreventiveMaintenanceResponse() : RescheduleMachinePreventiveMaintenanceResponse(nullptr) {}
  virtual ~RescheduleMachinePreventiveMaintenanceResponse();

  RescheduleMachinePreventiveMaintenanceResponse(const RescheduleMachinePreventiveMaintenanceResponse& from);
  RescheduleMachinePreventiveMaintenanceResponse(RescheduleMachinePreventiveMaintenanceResponse&& from) noexcept
    : RescheduleMachinePreventiveMaintenanceResponse() {
    *this = ::std::move(from);
  }

  inline RescheduleMachinePreventiveMaintenanceResponse& operator=(const RescheduleMachinePreventiveMaintenanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RescheduleMachinePreventiveMaintenanceResponse& operator=(RescheduleMachinePreventiveMaintenanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RescheduleMachinePreventiveMaintenanceResponse& default_instance();

  static inline const RescheduleMachinePreventiveMaintenanceResponse* internal_default_instance() {
    return reinterpret_cast<const RescheduleMachinePreventiveMaintenanceResponse*>(
               &_RescheduleMachinePreventiveMaintenanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RescheduleMachinePreventiveMaintenanceResponse& a, RescheduleMachinePreventiveMaintenanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RescheduleMachinePreventiveMaintenanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RescheduleMachinePreventiveMaintenanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RescheduleMachinePreventiveMaintenanceResponse* New() const final {
    return CreateMaybeMessage<RescheduleMachinePreventiveMaintenanceResponse>(nullptr);
  }

  RescheduleMachinePreventiveMaintenanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RescheduleMachinePreventiveMaintenanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RescheduleMachinePreventiveMaintenanceResponse& from);
  void MergeFrom(const RescheduleMachinePreventiveMaintenanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RescheduleMachinePreventiveMaintenanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceResponse";
  }
  protected:
  explicit RescheduleMachinePreventiveMaintenanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class HandoverOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest) */ {
 public:
  inline HandoverOtpRequest() : HandoverOtpRequest(nullptr) {}
  virtual ~HandoverOtpRequest();

  HandoverOtpRequest(const HandoverOtpRequest& from);
  HandoverOtpRequest(HandoverOtpRequest&& from) noexcept
    : HandoverOtpRequest() {
    *this = ::std::move(from);
  }

  inline HandoverOtpRequest& operator=(const HandoverOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverOtpRequest& operator=(HandoverOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandoverOtpRequest& default_instance();

  static inline const HandoverOtpRequest* internal_default_instance() {
    return reinterpret_cast<const HandoverOtpRequest*>(
               &_HandoverOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(HandoverOtpRequest& a, HandoverOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandoverOtpRequest* New() const final {
    return CreateMaybeMessage<HandoverOtpRequest>(nullptr);
  }

  HandoverOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandoverOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandoverOtpRequest& from);
  void MergeFrom(const HandoverOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest";
  }
  protected:
  explicit HandoverOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtpFieldNumber = 1,
    kMobileNumberFieldNumber = 3,
    kActorDetailsFieldNumber = 2,
  };
  // string otp = 1;
  void clear_otp();
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);
  private:
  const std::string& _internal_otp() const;
  void _internal_set_otp(const std::string& value);
  std::string* _internal_mutable_otp();
  public:

  // string mobileNumber = 3;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.ActorID actorDetails = 2;
  bool has_actordetails() const;
  private:
  bool _internal_has_actordetails() const;
  public:
  void clear_actordetails();
  const ::farm::nurture::core::contracts::common::ActorID& actordetails() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actordetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actordetails();
  void set_allocated_actordetails(::farm::nurture::core::contracts::common::ActorID* actordetails);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actordetails() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actordetails();
  public:
  void unsafe_arena_set_allocated_actordetails(
      ::farm::nurture::core::contracts::common::ActorID* actordetails);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actordetails();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::ActorID* actordetails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class HandoverOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse) */ {
 public:
  inline HandoverOtpResponse() : HandoverOtpResponse(nullptr) {}
  virtual ~HandoverOtpResponse();

  HandoverOtpResponse(const HandoverOtpResponse& from);
  HandoverOtpResponse(HandoverOtpResponse&& from) noexcept
    : HandoverOtpResponse() {
    *this = ::std::move(from);
  }

  inline HandoverOtpResponse& operator=(const HandoverOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverOtpResponse& operator=(HandoverOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandoverOtpResponse& default_instance();

  static inline const HandoverOtpResponse* internal_default_instance() {
    return reinterpret_cast<const HandoverOtpResponse*>(
               &_HandoverOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HandoverOtpResponse& a, HandoverOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandoverOtpResponse* New() const final {
    return CreateMaybeMessage<HandoverOtpResponse>(nullptr);
  }

  HandoverOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandoverOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandoverOtpResponse& from);
  void MergeFrom(const HandoverOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse";
  }
  protected:
  explicit HandoverOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class Attributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.Attributes) */ {
 public:
  inline Attributes() : Attributes(nullptr) {}
  virtual ~Attributes();

  Attributes(const Attributes& from);
  Attributes(Attributes&& from) noexcept
    : Attributes() {
    *this = ::std::move(from);
  }

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attributes& operator=(Attributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attributes& default_instance();

  static inline const Attributes* internal_default_instance() {
    return reinterpret_cast<const Attributes*>(
               &_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Attributes& a, Attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(Attributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attributes* New() const final {
    return CreateMaybeMessage<Attributes>(nullptr);
  }

  Attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.Attributes";
  }
  protected:
  explicit Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.Attributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class OfferRewardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest) */ {
 public:
  inline OfferRewardRequest() : OfferRewardRequest(nullptr) {}
  virtual ~OfferRewardRequest();

  OfferRewardRequest(const OfferRewardRequest& from);
  OfferRewardRequest(OfferRewardRequest&& from) noexcept
    : OfferRewardRequest() {
    *this = ::std::move(from);
  }

  inline OfferRewardRequest& operator=(const OfferRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferRewardRequest& operator=(OfferRewardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferRewardRequest& default_instance();

  static inline const OfferRewardRequest* internal_default_instance() {
    return reinterpret_cast<const OfferRewardRequest*>(
               &_OfferRewardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OfferRewardRequest& a, OfferRewardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OfferRewardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfferRewardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfferRewardRequest* New() const final {
    return CreateMaybeMessage<OfferRewardRequest>(nullptr);
  }

  OfferRewardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferRewardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferRewardRequest& from);
  void MergeFrom(const OfferRewardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferRewardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest";
  }
  protected:
  explicit OfferRewardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 15,
    kSourceFieldNumber = 7,
    kSourceReferenceIdFieldNumber = 8,
    kCorrectionIdFieldNumber = 9,
    kParentCorrectionIdFieldNumber = 10,
    kTitleKeyFieldNumber = 11,
    kDescriptionKeyFieldNumber = 12,
    kUserDetailsFieldNumber = 2,
    kAllottedTimeFieldNumber = 6,
    kValidFromFieldNumber = 13,
    kValidToFieldNumber = 14,
    kCreatedAtFieldNumber = 18,
    kUpdatedAtFieldNumber = 19,
    kIdFieldNumber = 1,
    kUserActionTypeFieldNumber = 3,
    kRewardTypeFieldNumber = 4,
    kRewardPointsFieldNumber = 5,
    kStatusFieldNumber = 16,
  };
  // repeated .farm.nurture.core.contracts.workflows.generalgo.Attributes attributes = 15;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >*
      mutable_attributes();
  private:
  const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& _internal_attributes(int index) const;
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* _internal_add_attributes();
  public:
  const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& attributes(int index) const;
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >&
      attributes() const;

  // string source = 7;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string sourceReferenceId = 8;
  void clear_sourcereferenceid();
  const std::string& sourcereferenceid() const;
  void set_sourcereferenceid(const std::string& value);
  void set_sourcereferenceid(std::string&& value);
  void set_sourcereferenceid(const char* value);
  void set_sourcereferenceid(const char* value, size_t size);
  std::string* mutable_sourcereferenceid();
  std::string* release_sourcereferenceid();
  void set_allocated_sourcereferenceid(std::string* sourcereferenceid);
  private:
  const std::string& _internal_sourcereferenceid() const;
  void _internal_set_sourcereferenceid(const std::string& value);
  std::string* _internal_mutable_sourcereferenceid();
  public:

  // string correctionId = 9;
  void clear_correctionid();
  const std::string& correctionid() const;
  void set_correctionid(const std::string& value);
  void set_correctionid(std::string&& value);
  void set_correctionid(const char* value);
  void set_correctionid(const char* value, size_t size);
  std::string* mutable_correctionid();
  std::string* release_correctionid();
  void set_allocated_correctionid(std::string* correctionid);
  private:
  const std::string& _internal_correctionid() const;
  void _internal_set_correctionid(const std::string& value);
  std::string* _internal_mutable_correctionid();
  public:

  // string parentCorrectionId = 10;
  void clear_parentcorrectionid();
  const std::string& parentcorrectionid() const;
  void set_parentcorrectionid(const std::string& value);
  void set_parentcorrectionid(std::string&& value);
  void set_parentcorrectionid(const char* value);
  void set_parentcorrectionid(const char* value, size_t size);
  std::string* mutable_parentcorrectionid();
  std::string* release_parentcorrectionid();
  void set_allocated_parentcorrectionid(std::string* parentcorrectionid);
  private:
  const std::string& _internal_parentcorrectionid() const;
  void _internal_set_parentcorrectionid(const std::string& value);
  std::string* _internal_mutable_parentcorrectionid();
  public:

  // string titleKey = 11;
  void clear_titlekey();
  const std::string& titlekey() const;
  void set_titlekey(const std::string& value);
  void set_titlekey(std::string&& value);
  void set_titlekey(const char* value);
  void set_titlekey(const char* value, size_t size);
  std::string* mutable_titlekey();
  std::string* release_titlekey();
  void set_allocated_titlekey(std::string* titlekey);
  private:
  const std::string& _internal_titlekey() const;
  void _internal_set_titlekey(const std::string& value);
  std::string* _internal_mutable_titlekey();
  public:

  // string descriptionKey = 12;
  void clear_descriptionkey();
  const std::string& descriptionkey() const;
  void set_descriptionkey(const std::string& value);
  void set_descriptionkey(std::string&& value);
  void set_descriptionkey(const char* value);
  void set_descriptionkey(const char* value, size_t size);
  std::string* mutable_descriptionkey();
  std::string* release_descriptionkey();
  void set_allocated_descriptionkey(std::string* descriptionkey);
  private:
  const std::string& _internal_descriptionkey() const;
  void _internal_set_descriptionkey(const std::string& value);
  std::string* _internal_mutable_descriptionkey();
  public:

  // .farm.nurture.core.contracts.common.ActorID userDetails = 2;
  bool has_userdetails() const;
  private:
  bool _internal_has_userdetails() const;
  public:
  void clear_userdetails();
  const ::farm::nurture::core::contracts::common::ActorID& userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* release_userdetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_userdetails();
  void set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_userdetails();
  public:
  void unsafe_arena_set_allocated_userdetails(
      ::farm::nurture::core::contracts::common::ActorID* userdetails);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_userdetails();

  // .google.protobuf.Timestamp allottedTime = 6;
  bool has_allottedtime() const;
  private:
  bool _internal_has_allottedtime() const;
  public:
  void clear_allottedtime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& allottedtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_allottedtime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_allottedtime();
  void set_allocated_allottedtime(PROTOBUF_NAMESPACE_ID::Timestamp* allottedtime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_allottedtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_allottedtime();
  public:
  void unsafe_arena_set_allocated_allottedtime(
      PROTOBUF_NAMESPACE_ID::Timestamp* allottedtime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_allottedtime();

  // .google.protobuf.Timestamp validFrom = 13;
  bool has_validfrom() const;
  private:
  bool _internal_has_validfrom() const;
  public:
  void clear_validfrom();
  const PROTOBUF_NAMESPACE_ID::Timestamp& validfrom() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_validfrom();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_validfrom();
  void set_allocated_validfrom(PROTOBUF_NAMESPACE_ID::Timestamp* validfrom);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_validfrom() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_validfrom();
  public:
  void unsafe_arena_set_allocated_validfrom(
      PROTOBUF_NAMESPACE_ID::Timestamp* validfrom);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_validfrom();

  // .google.protobuf.Timestamp validTo = 14;
  bool has_validto() const;
  private:
  bool _internal_has_validto() const;
  public:
  void clear_validto();
  const PROTOBUF_NAMESPACE_ID::Timestamp& validto() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_validto();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_validto();
  void set_allocated_validto(PROTOBUF_NAMESPACE_ID::Timestamp* validto);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_validto() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_validto();
  public:
  void unsafe_arena_set_allocated_validto(
      PROTOBUF_NAMESPACE_ID::Timestamp* validto);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_validto();

  // .google.protobuf.Timestamp createdAt = 18;
  bool has_createdat() const;
  private:
  bool _internal_has_createdat() const;
  public:
  void clear_createdat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_createdat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createdat();
  void set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createdat();
  public:
  void unsafe_arena_set_allocated_createdat(
      PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createdat();

  // .google.protobuf.Timestamp updatedAt = 19;
  bool has_updatedat() const;
  private:
  bool _internal_has_updatedat() const;
  public:
  void clear_updatedat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updatedat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updatedat();
  void set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updatedat();
  public:
  void unsafe_arena_set_allocated_updatedat(
      PROTOBUF_NAMESPACE_ID::Timestamp* updatedat);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updatedat();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.UserActionType userActionType = 3;
  void clear_useractiontype();
  ::farm::nurture::core::contracts::common::UserActionType useractiontype() const;
  void set_useractiontype(::farm::nurture::core::contracts::common::UserActionType value);
  private:
  ::farm::nurture::core::contracts::common::UserActionType _internal_useractiontype() const;
  void _internal_set_useractiontype(::farm::nurture::core::contracts::common::UserActionType value);
  public:

  // .farm.nurture.core.contracts.common.RewardType rewardType = 4;
  void clear_rewardtype();
  ::farm::nurture::core::contracts::common::RewardType rewardtype() const;
  void set_rewardtype(::farm::nurture::core::contracts::common::RewardType value);
  private:
  ::farm::nurture::core::contracts::common::RewardType _internal_rewardtype() const;
  void _internal_set_rewardtype(::farm::nurture::core::contracts::common::RewardType value);
  public:

  // int32 rewardPoints = 5;
  void clear_rewardpoints();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardpoints() const;
  void set_rewardpoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardpoints() const;
  void _internal_set_rewardpoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.workflows.generalgo.Status status = 16;
  void clear_status();
  ::farm::nurture::core::contracts::workflows::generalgo::Status status() const;
  void set_status(::farm::nurture::core::contracts::workflows::generalgo::Status value);
  private:
  ::farm::nurture::core::contracts::workflows::generalgo::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::workflows::generalgo::Status value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcereferenceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correctionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentcorrectionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr titlekey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptionkey_;
  ::farm::nurture::core::contracts::common::ActorID* userdetails_;
  PROTOBUF_NAMESPACE_ID::Timestamp* allottedtime_;
  PROTOBUF_NAMESPACE_ID::Timestamp* validfrom_;
  PROTOBUF_NAMESPACE_ID::Timestamp* validto_;
  PROTOBUF_NAMESPACE_ID::Timestamp* createdat_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int useractiontype_;
  int rewardtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardpoints_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class OfferRewardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.OfferRewardResponse) */ {
 public:
  inline OfferRewardResponse() : OfferRewardResponse(nullptr) {}
  virtual ~OfferRewardResponse();

  OfferRewardResponse(const OfferRewardResponse& from);
  OfferRewardResponse(OfferRewardResponse&& from) noexcept
    : OfferRewardResponse() {
    *this = ::std::move(from);
  }

  inline OfferRewardResponse& operator=(const OfferRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferRewardResponse& operator=(OfferRewardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferRewardResponse& default_instance();

  static inline const OfferRewardResponse* internal_default_instance() {
    return reinterpret_cast<const OfferRewardResponse*>(
               &_OfferRewardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(OfferRewardResponse& a, OfferRewardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OfferRewardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfferRewardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfferRewardResponse* New() const final {
    return CreateMaybeMessage<OfferRewardResponse>(nullptr);
  }

  OfferRewardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferRewardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferRewardResponse& from);
  void MergeFrom(const OfferRewardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferRewardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.OfferRewardResponse";
  }
  protected:
  explicit OfferRewardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.OfferRewardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class DiscountedSprayServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest) */ {
 public:
  inline DiscountedSprayServiceRequest() : DiscountedSprayServiceRequest(nullptr) {}
  virtual ~DiscountedSprayServiceRequest();

  DiscountedSprayServiceRequest(const DiscountedSprayServiceRequest& from);
  DiscountedSprayServiceRequest(DiscountedSprayServiceRequest&& from) noexcept
    : DiscountedSprayServiceRequest() {
    *this = ::std::move(from);
  }

  inline DiscountedSprayServiceRequest& operator=(const DiscountedSprayServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscountedSprayServiceRequest& operator=(DiscountedSprayServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscountedSprayServiceRequest& default_instance();

  static inline const DiscountedSprayServiceRequest* internal_default_instance() {
    return reinterpret_cast<const DiscountedSprayServiceRequest*>(
               &_DiscountedSprayServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DiscountedSprayServiceRequest& a, DiscountedSprayServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscountedSprayServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscountedSprayServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscountedSprayServiceRequest* New() const final {
    return CreateMaybeMessage<DiscountedSprayServiceRequest>(nullptr);
  }

  DiscountedSprayServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscountedSprayServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscountedSprayServiceRequest& from);
  void MergeFrom(const DiscountedSprayServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscountedSprayServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest";
  }
  protected:
  explicit DiscountedSprayServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDetailsFieldNumber = 1,
    kBookingIdFieldNumber = 2,
    kServiceIdFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.ActorID userDetails = 1;
  bool has_userdetails() const;
  private:
  bool _internal_has_userdetails() const;
  public:
  void clear_userdetails();
  const ::farm::nurture::core::contracts::common::ActorID& userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* release_userdetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_userdetails();
  void set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_userdetails();
  public:
  void unsafe_arena_set_allocated_userdetails(
      ::farm::nurture::core::contracts::common::ActorID* userdetails);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_userdetails();

  // int64 bookingId = 2;
  void clear_bookingid();
  ::PROTOBUF_NAMESPACE_ID::int64 bookingid() const;
  void set_bookingid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bookingid() const;
  void _internal_set_bookingid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serviceId = 3;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::ActorID* userdetails_;
  ::PROTOBUF_NAMESPACE_ID::int64 bookingid_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class OfferInsuranceRewardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest) */ {
 public:
  inline OfferInsuranceRewardRequest() : OfferInsuranceRewardRequest(nullptr) {}
  virtual ~OfferInsuranceRewardRequest();

  OfferInsuranceRewardRequest(const OfferInsuranceRewardRequest& from);
  OfferInsuranceRewardRequest(OfferInsuranceRewardRequest&& from) noexcept
    : OfferInsuranceRewardRequest() {
    *this = ::std::move(from);
  }

  inline OfferInsuranceRewardRequest& operator=(const OfferInsuranceRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferInsuranceRewardRequest& operator=(OfferInsuranceRewardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferInsuranceRewardRequest& default_instance();

  static inline const OfferInsuranceRewardRequest* internal_default_instance() {
    return reinterpret_cast<const OfferInsuranceRewardRequest*>(
               &_OfferInsuranceRewardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OfferInsuranceRewardRequest& a, OfferInsuranceRewardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OfferInsuranceRewardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfferInsuranceRewardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfferInsuranceRewardRequest* New() const final {
    return CreateMaybeMessage<OfferInsuranceRewardRequest>(nullptr);
  }

  OfferInsuranceRewardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferInsuranceRewardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferInsuranceRewardRequest& from);
  void MergeFrom(const OfferInsuranceRewardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferInsuranceRewardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest";
  }
  protected:
  explicit OfferInsuranceRewardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeQuantitiesFieldNumber = 4,
    kAttributesFieldNumber = 7,
    kUserDetailsFieldNumber = 1,
    kLocationFieldNumber = 2,
    kPaymentMethodFieldNumber = 3,
    kLanguageCodeFieldNumber = 6,
    kOfferIdFieldNumber = 5,
    kUserRewardIdFieldNumber = 8,
    kRewardTypeFieldNumber = 9,
  };
  // repeated int64 schemeQuantities = 4;
  int schemequantities_size() const;
  private:
  int _internal_schemequantities_size() const;
  public:
  void clear_schemequantities();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_schemequantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_schemequantities() const;
  void _internal_add_schemequantities(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_schemequantities();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 schemequantities(int index) const;
  void set_schemequantities(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_schemequantities(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      schemequantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_schemequantities();

  // repeated .farm.nurture.core.contracts.workflows.generalgo.Attributes attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >*
      mutable_attributes();
  private:
  const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& _internal_attributes(int index) const;
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* _internal_add_attributes();
  public:
  const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& attributes(int index) const;
  ::farm::nurture::core::contracts::workflows::generalgo::Attributes* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >&
      attributes() const;

  // .farm.nurture.core.contracts.common.ActorID userDetails = 1;
  bool has_userdetails() const;
  private:
  bool _internal_has_userdetails() const;
  public:
  void clear_userdetails();
  const ::farm::nurture::core::contracts::common::ActorID& userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* release_userdetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_userdetails();
  void set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_userdetails() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_userdetails();
  public:
  void unsafe_arena_set_allocated_userdetails(
      ::farm::nurture::core::contracts::common::ActorID* userdetails);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_userdetails();

  // .farm.nurture.core.contracts.common.Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::farm::nurture::core::contracts::common::Location& location() const;
  ::farm::nurture::core::contracts::common::Location* release_location();
  ::farm::nurture::core::contracts::common::Location* mutable_location();
  void set_allocated_location(::farm::nurture::core::contracts::common::Location* location);
  private:
  const ::farm::nurture::core::contracts::common::Location& _internal_location() const;
  ::farm::nurture::core::contracts::common::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::farm::nurture::core::contracts::common::Location* location);
  ::farm::nurture::core::contracts::common::Location* unsafe_arena_release_location();

  // .farm.nurture.core.contracts.common.PaymentMethod paymentMethod = 3;
  void clear_paymentmethod();
  ::farm::nurture::core::contracts::common::PaymentMethod paymentmethod() const;
  void set_paymentmethod(::farm::nurture::core::contracts::common::PaymentMethod value);
  private:
  ::farm::nurture::core::contracts::common::PaymentMethod _internal_paymentmethod() const;
  void _internal_set_paymentmethod(::farm::nurture::core::contracts::common::PaymentMethod value);
  public:

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 6;
  void clear_languagecode();
  ::farm::nurture::core::contracts::common::LanguageCode languagecode() const;
  void set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_languagecode() const;
  void _internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // int64 offerId = 5;
  void clear_offerid();
  ::PROTOBUF_NAMESPACE_ID::int64 offerid() const;
  void set_offerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offerid() const;
  void _internal_set_offerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userRewardId = 8;
  void clear_userrewardid();
  ::PROTOBUF_NAMESPACE_ID::int64 userrewardid() const;
  void set_userrewardid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userrewardid() const;
  void _internal_set_userrewardid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.RewardType rewardType = 9;
  void clear_rewardtype();
  ::farm::nurture::core::contracts::common::RewardType rewardtype() const;
  void set_rewardtype(::farm::nurture::core::contracts::common::RewardType value);
  private:
  ::farm::nurture::core::contracts::common::RewardType _internal_rewardtype() const;
  void _internal_set_rewardtype(::farm::nurture::core::contracts::common::RewardType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > schemequantities_;
  mutable std::atomic<int> _schemequantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes > attributes_;
  ::farm::nurture::core::contracts::common::ActorID* userdetails_;
  ::farm::nurture::core::contracts::common::Location* location_;
  int paymentmethod_;
  int languagecode_;
  ::PROTOBUF_NAMESPACE_ID::int64 offerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userrewardid_;
  int rewardtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class OfferInsuranceRewardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardResponse) */ {
 public:
  inline OfferInsuranceRewardResponse() : OfferInsuranceRewardResponse(nullptr) {}
  virtual ~OfferInsuranceRewardResponse();

  OfferInsuranceRewardResponse(const OfferInsuranceRewardResponse& from);
  OfferInsuranceRewardResponse(OfferInsuranceRewardResponse&& from) noexcept
    : OfferInsuranceRewardResponse() {
    *this = ::std::move(from);
  }

  inline OfferInsuranceRewardResponse& operator=(const OfferInsuranceRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferInsuranceRewardResponse& operator=(OfferInsuranceRewardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferInsuranceRewardResponse& default_instance();

  static inline const OfferInsuranceRewardResponse* internal_default_instance() {
    return reinterpret_cast<const OfferInsuranceRewardResponse*>(
               &_OfferInsuranceRewardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(OfferInsuranceRewardResponse& a, OfferInsuranceRewardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OfferInsuranceRewardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfferInsuranceRewardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfferInsuranceRewardResponse* New() const final {
    return CreateMaybeMessage<OfferInsuranceRewardResponse>(nullptr);
  }

  OfferInsuranceRewardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferInsuranceRewardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferInsuranceRewardResponse& from);
  void MergeFrom(const OfferInsuranceRewardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferInsuranceRewardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardResponse";
  }
  protected:
  explicit OfferInsuranceRewardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest) */ {
 public:
  inline CreatePartitionsRequest() : CreatePartitionsRequest(nullptr) {}
  virtual ~CreatePartitionsRequest();

  CreatePartitionsRequest(const CreatePartitionsRequest& from);
  CreatePartitionsRequest(CreatePartitionsRequest&& from) noexcept
    : CreatePartitionsRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionsRequest& operator=(const CreatePartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionsRequest& operator=(CreatePartitionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionsRequest& default_instance();

  static inline const CreatePartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionsRequest*>(
               &_CreatePartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CreatePartitionsRequest& a, CreatePartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionsRequest* New() const final {
    return CreateMaybeMessage<CreatePartitionsRequest>(nullptr);
  }

  CreatePartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionsRequest& from);
  void MergeFrom(const CreatePartitionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest";
  }
  protected:
  explicit CreatePartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kDatabaseNameFieldNumber = 2,
    kBucketFieldNumber = 3,
    kNumberOfDaysFieldNumber = 4,
  };
  // string tableName = 1;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // string databaseName = 2;
  void clear_databasename();
  const std::string& databasename() const;
  void set_databasename(const std::string& value);
  void set_databasename(std::string&& value);
  void set_databasename(const char* value);
  void set_databasename(const char* value, size_t size);
  std::string* mutable_databasename();
  std::string* release_databasename();
  void set_allocated_databasename(std::string* databasename);
  private:
  const std::string& _internal_databasename() const;
  void _internal_set_databasename(const std::string& value);
  std::string* _internal_mutable_databasename();
  public:

  // string bucket = 3;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // int64 numberOfDays = 4;
  void clear_numberofdays();
  ::PROTOBUF_NAMESPACE_ID::int64 numberofdays() const;
  void set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_numberofdays() const;
  void _internal_set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr databasename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofdays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse) */ {
 public:
  inline CreatePartitionsResponse() : CreatePartitionsResponse(nullptr) {}
  virtual ~CreatePartitionsResponse();

  CreatePartitionsResponse(const CreatePartitionsResponse& from);
  CreatePartitionsResponse(CreatePartitionsResponse&& from) noexcept
    : CreatePartitionsResponse() {
    *this = ::std::move(from);
  }

  inline CreatePartitionsResponse& operator=(const CreatePartitionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionsResponse& operator=(CreatePartitionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionsResponse& default_instance();

  static inline const CreatePartitionsResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionsResponse*>(
               &_CreatePartitionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CreatePartitionsResponse& a, CreatePartitionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionsResponse* New() const final {
    return CreateMaybeMessage<CreatePartitionsResponse>(nullptr);
  }

  CreatePartitionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionsResponse& from);
  void MergeFrom(const CreatePartitionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse";
  }
  protected:
  explicit CreatePartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class TriggerF2FPointExpiryCronRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest) */ {
 public:
  inline TriggerF2FPointExpiryCronRequest() : TriggerF2FPointExpiryCronRequest(nullptr) {}
  virtual ~TriggerF2FPointExpiryCronRequest();

  TriggerF2FPointExpiryCronRequest(const TriggerF2FPointExpiryCronRequest& from);
  TriggerF2FPointExpiryCronRequest(TriggerF2FPointExpiryCronRequest&& from) noexcept
    : TriggerF2FPointExpiryCronRequest() {
    *this = ::std::move(from);
  }

  inline TriggerF2FPointExpiryCronRequest& operator=(const TriggerF2FPointExpiryCronRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerF2FPointExpiryCronRequest& operator=(TriggerF2FPointExpiryCronRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerF2FPointExpiryCronRequest& default_instance();

  static inline const TriggerF2FPointExpiryCronRequest* internal_default_instance() {
    return reinterpret_cast<const TriggerF2FPointExpiryCronRequest*>(
               &_TriggerF2FPointExpiryCronRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TriggerF2FPointExpiryCronRequest& a, TriggerF2FPointExpiryCronRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerF2FPointExpiryCronRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerF2FPointExpiryCronRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerF2FPointExpiryCronRequest* New() const final {
    return CreateMaybeMessage<TriggerF2FPointExpiryCronRequest>(nullptr);
  }

  TriggerF2FPointExpiryCronRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerF2FPointExpiryCronRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerF2FPointExpiryCronRequest& from);
  void MergeFrom(const TriggerF2FPointExpiryCronRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerF2FPointExpiryCronRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest";
  }
  protected:
  explicit TriggerF2FPointExpiryCronRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCronExpFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kExpiryPointsFieldNumber = 4,
  };
  // string cronExp = 1;
  void clear_cronexp();
  const std::string& cronexp() const;
  void set_cronexp(const std::string& value);
  void set_cronexp(std::string&& value);
  void set_cronexp(const char* value);
  void set_cronexp(const char* value, size_t size);
  std::string* mutable_cronexp();
  std::string* release_cronexp();
  void set_allocated_cronexp(std::string* cronexp);
  private:
  const std::string& _internal_cronexp() const;
  void _internal_set_cronexp(const std::string& value);
  std::string* _internal_mutable_cronexp();
  public:

  // int64 segmentId = 2;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentid() const;
  void _internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiryPoints = 4;
  void clear_expirypoints();
  ::PROTOBUF_NAMESPACE_ID::int64 expirypoints() const;
  void set_expirypoints(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expirypoints() const;
  void _internal_set_expirypoints(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cronexp_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expirypoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class TriggerF2FPointExpiryCronResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronResponse) */ {
 public:
  inline TriggerF2FPointExpiryCronResponse() : TriggerF2FPointExpiryCronResponse(nullptr) {}
  virtual ~TriggerF2FPointExpiryCronResponse();

  TriggerF2FPointExpiryCronResponse(const TriggerF2FPointExpiryCronResponse& from);
  TriggerF2FPointExpiryCronResponse(TriggerF2FPointExpiryCronResponse&& from) noexcept
    : TriggerF2FPointExpiryCronResponse() {
    *this = ::std::move(from);
  }

  inline TriggerF2FPointExpiryCronResponse& operator=(const TriggerF2FPointExpiryCronResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerF2FPointExpiryCronResponse& operator=(TriggerF2FPointExpiryCronResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerF2FPointExpiryCronResponse& default_instance();

  static inline const TriggerF2FPointExpiryCronResponse* internal_default_instance() {
    return reinterpret_cast<const TriggerF2FPointExpiryCronResponse*>(
               &_TriggerF2FPointExpiryCronResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TriggerF2FPointExpiryCronResponse& a, TriggerF2FPointExpiryCronResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerF2FPointExpiryCronResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerF2FPointExpiryCronResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerF2FPointExpiryCronResponse* New() const final {
    return CreateMaybeMessage<TriggerF2FPointExpiryCronResponse>(nullptr);
  }

  TriggerF2FPointExpiryCronResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerF2FPointExpiryCronResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerF2FPointExpiryCronResponse& from);
  void MergeFrom(const TriggerF2FPointExpiryCronResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerF2FPointExpiryCronResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronResponse";
  }
  protected:
  explicit TriggerF2FPointExpiryCronResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class InsurancePurchaseEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest) */ {
 public:
  inline InsurancePurchaseEventRequest() : InsurancePurchaseEventRequest(nullptr) {}
  virtual ~InsurancePurchaseEventRequest();

  InsurancePurchaseEventRequest(const InsurancePurchaseEventRequest& from);
  InsurancePurchaseEventRequest(InsurancePurchaseEventRequest&& from) noexcept
    : InsurancePurchaseEventRequest() {
    *this = ::std::move(from);
  }

  inline InsurancePurchaseEventRequest& operator=(const InsurancePurchaseEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsurancePurchaseEventRequest& operator=(InsurancePurchaseEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsurancePurchaseEventRequest& default_instance();

  static inline const InsurancePurchaseEventRequest* internal_default_instance() {
    return reinterpret_cast<const InsurancePurchaseEventRequest*>(
               &_InsurancePurchaseEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InsurancePurchaseEventRequest& a, InsurancePurchaseEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsurancePurchaseEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsurancePurchaseEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsurancePurchaseEventRequest* New() const final {
    return CreateMaybeMessage<InsurancePurchaseEventRequest>(nullptr);
  }

  InsurancePurchaseEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsurancePurchaseEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsurancePurchaseEventRequest& from);
  void MergeFrom(const InsurancePurchaseEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsurancePurchaseEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest";
  }
  protected:
  explicit InsurancePurchaseEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kUserSchemeIdFieldNumber = 2,
    kServiceTypeFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.ActorID actorId = 1;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // int64 userSchemeId = 2;
  void clear_userschemeid();
  ::PROTOBUF_NAMESPACE_ID::int64 userschemeid() const;
  void set_userschemeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userschemeid() const;
  void _internal_set_userschemeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.InsuranceService.ServiceType serviceType = 3;
  void clear_servicetype();
  ::farm::nurture::core::contracts::InsuranceService::ServiceType servicetype() const;
  void set_servicetype(::farm::nurture::core::contracts::InsuranceService::ServiceType value);
  private:
  ::farm::nurture::core::contracts::InsuranceService::ServiceType _internal_servicetype() const;
  void _internal_set_servicetype(::farm::nurture::core::contracts::InsuranceService::ServiceType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userschemeid_;
  int servicetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class InsurancePurchaseEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventResponse) */ {
 public:
  inline InsurancePurchaseEventResponse() : InsurancePurchaseEventResponse(nullptr) {}
  virtual ~InsurancePurchaseEventResponse();

  InsurancePurchaseEventResponse(const InsurancePurchaseEventResponse& from);
  InsurancePurchaseEventResponse(InsurancePurchaseEventResponse&& from) noexcept
    : InsurancePurchaseEventResponse() {
    *this = ::std::move(from);
  }

  inline InsurancePurchaseEventResponse& operator=(const InsurancePurchaseEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsurancePurchaseEventResponse& operator=(InsurancePurchaseEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsurancePurchaseEventResponse& default_instance();

  static inline const InsurancePurchaseEventResponse* internal_default_instance() {
    return reinterpret_cast<const InsurancePurchaseEventResponse*>(
               &_InsurancePurchaseEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(InsurancePurchaseEventResponse& a, InsurancePurchaseEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsurancePurchaseEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsurancePurchaseEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsurancePurchaseEventResponse* New() const final {
    return CreateMaybeMessage<InsurancePurchaseEventResponse>(nullptr);
  }

  InsurancePurchaseEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsurancePurchaseEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsurancePurchaseEventResponse& from);
  void MergeFrom(const InsurancePurchaseEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsurancePurchaseEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventResponse";
  }
  protected:
  explicit InsurancePurchaseEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClearStaleCreatedOrderRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ClearStaleCreatedOrderRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ClearStaleCreatedOrderRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ClearStaleCreatedOrderRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ClearStaleCreatedOrderRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ClearStaleCreatedOrderRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ClearStaleCreatedOrderRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ClearStaleCreatedOrderRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ClearStaleCreatedOrderRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ClearStaleCreatedOrderRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ClearStaleCreatedOrderRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderRequest.requestHeaders)
}

// -------------------------------------------------------------------

// ClearStaleCreatedOrderResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ClearStaleCreatedOrderResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ClearStaleCreatedOrderResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ClearStaleCreatedOrderResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderResponse.status)
  return _internal_status();
}
inline void ClearStaleCreatedOrderResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ClearStaleCreatedOrderResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ClearStaleCreatedOrderResponse.status)
}

// -------------------------------------------------------------------

// ScoreComputationRequest

// int64 scoring_id = 1;
inline void ScoreComputationRequest::clear_scoring_id() {
  scoring_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScoreComputationRequest::_internal_scoring_id() const {
  return scoring_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScoreComputationRequest::scoring_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationRequest.scoring_id)
  return _internal_scoring_id();
}
inline void ScoreComputationRequest::_internal_set_scoring_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scoring_id_ = value;
}
inline void ScoreComputationRequest::set_scoring_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scoring_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationRequest.scoring_id)
}

// -------------------------------------------------------------------

// ScoreComputationResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ScoreComputationResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ScoreComputationResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ScoreComputationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationResponse.status)
  return _internal_status();
}
inline void ScoreComputationResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ScoreComputationResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ScoreComputationResponse.status)
}

// -------------------------------------------------------------------

// IotComputationRequest

// -------------------------------------------------------------------

// IotComputationResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void IotComputationResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus IotComputationResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus IotComputationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.IotComputationResponse.status)
  return _internal_status();
}
inline void IotComputationResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void IotComputationResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.IotComputationResponse.status)
}

// -------------------------------------------------------------------

// PostServiceFeedbackPNRequest

// .farm.nurture.core.contracts.common.ActorID actor = 1;
inline bool PostServiceFeedbackPNRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool PostServiceFeedbackPNRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& PostServiceFeedbackPNRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& PostServiceFeedbackPNRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.actor)
  return _internal_actor();
}
inline void PostServiceFeedbackPNRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* PostServiceFeedbackPNRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostServiceFeedbackPNRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostServiceFeedbackPNRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostServiceFeedbackPNRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.actor)
  return _internal_mutable_actor();
}
inline void PostServiceFeedbackPNRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.actor)
}

// .farm.nurture.core.contracts.common.LanguageCode languageCode = 2;
inline void PostServiceFeedbackPNRequest::clear_languagecode() {
  languagecode_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode PostServiceFeedbackPNRequest::_internal_languagecode() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(languagecode_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode PostServiceFeedbackPNRequest::languagecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.languageCode)
  return _internal_languagecode();
}
inline void PostServiceFeedbackPNRequest::_internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  languagecode_ = value;
}
inline void PostServiceFeedbackPNRequest::set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_languagecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.languageCode)
}

// string serviceName = 3;
inline void PostServiceFeedbackPNRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& PostServiceFeedbackPNRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
  return _internal_servicename();
}
inline void PostServiceFeedbackPNRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
}
inline std::string* PostServiceFeedbackPNRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& PostServiceFeedbackPNRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void PostServiceFeedbackPNRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostServiceFeedbackPNRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
}
inline void PostServiceFeedbackPNRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
}
inline void PostServiceFeedbackPNRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
}
inline std::string* PostServiceFeedbackPNRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostServiceFeedbackPNRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostServiceFeedbackPNRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.serviceName)
}

// string externalType = 4;
inline void PostServiceFeedbackPNRequest::clear_externaltype() {
  externaltype_.ClearToEmpty();
}
inline const std::string& PostServiceFeedbackPNRequest::externaltype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
  return _internal_externaltype();
}
inline void PostServiceFeedbackPNRequest::set_externaltype(const std::string& value) {
  _internal_set_externaltype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
}
inline std::string* PostServiceFeedbackPNRequest::mutable_externaltype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
  return _internal_mutable_externaltype();
}
inline const std::string& PostServiceFeedbackPNRequest::_internal_externaltype() const {
  return externaltype_.Get();
}
inline void PostServiceFeedbackPNRequest::_internal_set_externaltype(const std::string& value) {
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostServiceFeedbackPNRequest::set_externaltype(std::string&& value) {
  
  externaltype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
}
inline void PostServiceFeedbackPNRequest::set_externaltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
}
inline void PostServiceFeedbackPNRequest::set_externaltype(const char* value,
    size_t size) {
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
}
inline std::string* PostServiceFeedbackPNRequest::_internal_mutable_externaltype() {
  
  return externaltype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostServiceFeedbackPNRequest::release_externaltype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
  return externaltype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostServiceFeedbackPNRequest::set_allocated_externaltype(std::string* externaltype) {
  if (externaltype != nullptr) {
    
  } else {
    
  }
  externaltype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externaltype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalType)
}

// string externalId = 5;
inline void PostServiceFeedbackPNRequest::clear_externalid() {
  externalid_.ClearToEmpty();
}
inline const std::string& PostServiceFeedbackPNRequest::externalid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
  return _internal_externalid();
}
inline void PostServiceFeedbackPNRequest::set_externalid(const std::string& value) {
  _internal_set_externalid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
}
inline std::string* PostServiceFeedbackPNRequest::mutable_externalid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
  return _internal_mutable_externalid();
}
inline const std::string& PostServiceFeedbackPNRequest::_internal_externalid() const {
  return externalid_.Get();
}
inline void PostServiceFeedbackPNRequest::_internal_set_externalid(const std::string& value) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostServiceFeedbackPNRequest::set_externalid(std::string&& value) {
  
  externalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
}
inline void PostServiceFeedbackPNRequest::set_externalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
}
inline void PostServiceFeedbackPNRequest::set_externalid(const char* value,
    size_t size) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
}
inline std::string* PostServiceFeedbackPNRequest::_internal_mutable_externalid() {
  
  return externalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostServiceFeedbackPNRequest::release_externalid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
  return externalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostServiceFeedbackPNRequest::set_allocated_externalid(std::string* externalid) {
  if (externalid != nullptr) {
    
  } else {
    
  }
  externalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.externalId)
}

// string feature = 6;
inline void PostServiceFeedbackPNRequest::clear_feature() {
  feature_.ClearToEmpty();
}
inline const std::string& PostServiceFeedbackPNRequest::feature() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
  return _internal_feature();
}
inline void PostServiceFeedbackPNRequest::set_feature(const std::string& value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
}
inline std::string* PostServiceFeedbackPNRequest::mutable_feature() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
  return _internal_mutable_feature();
}
inline const std::string& PostServiceFeedbackPNRequest::_internal_feature() const {
  return feature_.Get();
}
inline void PostServiceFeedbackPNRequest::_internal_set_feature(const std::string& value) {
  
  feature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostServiceFeedbackPNRequest::set_feature(std::string&& value) {
  
  feature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
}
inline void PostServiceFeedbackPNRequest::set_feature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
}
inline void PostServiceFeedbackPNRequest::set_feature(const char* value,
    size_t size) {
  
  feature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
}
inline std::string* PostServiceFeedbackPNRequest::_internal_mutable_feature() {
  
  return feature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostServiceFeedbackPNRequest::release_feature() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
  return feature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostServiceFeedbackPNRequest::set_allocated_feature(std::string* feature) {
  if (feature != nullptr) {
    
  } else {
    
  }
  feature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.feature)
}

// .farm.nurture.core.contracts.feedback.Namespace namespace = 7;
inline void PostServiceFeedbackPNRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::feedback::Namespace PostServiceFeedbackPNRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::feedback::Namespace >(namespace__);
}
inline ::farm::nurture::core::contracts::feedback::Namespace PostServiceFeedbackPNRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.namespace)
  return _internal_namespace_();
}
inline void PostServiceFeedbackPNRequest::_internal_set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value) {
  
  namespace__ = value;
}
inline void PostServiceFeedbackPNRequest::set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNRequest.namespace)
}

// -------------------------------------------------------------------

// PostPusaSprayPopUpRequest

// .farm.nurture.core.contracts.common.ActorID actor = 1;
inline bool PostPusaSprayPopUpRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool PostPusaSprayPopUpRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& PostPusaSprayPopUpRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& PostPusaSprayPopUpRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.actor)
  return _internal_actor();
}
inline void PostPusaSprayPopUpRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* PostPusaSprayPopUpRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostPusaSprayPopUpRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostPusaSprayPopUpRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* PostPusaSprayPopUpRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.actor)
  return _internal_mutable_actor();
}
inline void PostPusaSprayPopUpRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.actor)
}

// .farm.nurture.core.contracts.common.LanguageCode languageCode = 2;
inline void PostPusaSprayPopUpRequest::clear_languagecode() {
  languagecode_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode PostPusaSprayPopUpRequest::_internal_languagecode() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(languagecode_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode PostPusaSprayPopUpRequest::languagecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.languageCode)
  return _internal_languagecode();
}
inline void PostPusaSprayPopUpRequest::_internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  languagecode_ = value;
}
inline void PostPusaSprayPopUpRequest::set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_languagecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.languageCode)
}

// string serviceName = 3;
inline void PostPusaSprayPopUpRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& PostPusaSprayPopUpRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
  return _internal_servicename();
}
inline void PostPusaSprayPopUpRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
}
inline std::string* PostPusaSprayPopUpRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& PostPusaSprayPopUpRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void PostPusaSprayPopUpRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostPusaSprayPopUpRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
}
inline void PostPusaSprayPopUpRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
}
inline void PostPusaSprayPopUpRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
}
inline std::string* PostPusaSprayPopUpRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostPusaSprayPopUpRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostPusaSprayPopUpRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.serviceName)
}

// string externalType = 4;
inline void PostPusaSprayPopUpRequest::clear_externaltype() {
  externaltype_.ClearToEmpty();
}
inline const std::string& PostPusaSprayPopUpRequest::externaltype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
  return _internal_externaltype();
}
inline void PostPusaSprayPopUpRequest::set_externaltype(const std::string& value) {
  _internal_set_externaltype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
}
inline std::string* PostPusaSprayPopUpRequest::mutable_externaltype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
  return _internal_mutable_externaltype();
}
inline const std::string& PostPusaSprayPopUpRequest::_internal_externaltype() const {
  return externaltype_.Get();
}
inline void PostPusaSprayPopUpRequest::_internal_set_externaltype(const std::string& value) {
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostPusaSprayPopUpRequest::set_externaltype(std::string&& value) {
  
  externaltype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
}
inline void PostPusaSprayPopUpRequest::set_externaltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
}
inline void PostPusaSprayPopUpRequest::set_externaltype(const char* value,
    size_t size) {
  
  externaltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
}
inline std::string* PostPusaSprayPopUpRequest::_internal_mutable_externaltype() {
  
  return externaltype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostPusaSprayPopUpRequest::release_externaltype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
  return externaltype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostPusaSprayPopUpRequest::set_allocated_externaltype(std::string* externaltype) {
  if (externaltype != nullptr) {
    
  } else {
    
  }
  externaltype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externaltype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalType)
}

// string externalId = 5;
inline void PostPusaSprayPopUpRequest::clear_externalid() {
  externalid_.ClearToEmpty();
}
inline const std::string& PostPusaSprayPopUpRequest::externalid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
  return _internal_externalid();
}
inline void PostPusaSprayPopUpRequest::set_externalid(const std::string& value) {
  _internal_set_externalid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
}
inline std::string* PostPusaSprayPopUpRequest::mutable_externalid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
  return _internal_mutable_externalid();
}
inline const std::string& PostPusaSprayPopUpRequest::_internal_externalid() const {
  return externalid_.Get();
}
inline void PostPusaSprayPopUpRequest::_internal_set_externalid(const std::string& value) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PostPusaSprayPopUpRequest::set_externalid(std::string&& value) {
  
  externalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
}
inline void PostPusaSprayPopUpRequest::set_externalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
}
inline void PostPusaSprayPopUpRequest::set_externalid(const char* value,
    size_t size) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
}
inline std::string* PostPusaSprayPopUpRequest::_internal_mutable_externalid() {
  
  return externalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PostPusaSprayPopUpRequest::release_externalid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
  return externalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostPusaSprayPopUpRequest::set_allocated_externalid(std::string* externalid) {
  if (externalid != nullptr) {
    
  } else {
    
  }
  externalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.externalId)
}

// .farm.nurture.core.contracts.feedback.Namespace namespace = 7;
inline void PostPusaSprayPopUpRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::feedback::Namespace PostPusaSprayPopUpRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::feedback::Namespace >(namespace__);
}
inline ::farm::nurture::core::contracts::feedback::Namespace PostPusaSprayPopUpRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.namespace)
  return _internal_namespace_();
}
inline void PostPusaSprayPopUpRequest::_internal_set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value) {
  
  namespace__ = value;
}
inline void PostPusaSprayPopUpRequest::set_namespace_(::farm::nurture::core::contracts::feedback::Namespace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.namespace)
}

// int64 eventId = 8;
inline void PostPusaSprayPopUpRequest::clear_eventid() {
  eventid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PostPusaSprayPopUpRequest::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PostPusaSprayPopUpRequest::eventid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.eventId)
  return _internal_eventid();
}
inline void PostPusaSprayPopUpRequest::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eventid_ = value;
}
inline void PostPusaSprayPopUpRequest::set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.eventId)
}

// int64 farmId = 9;
inline void PostPusaSprayPopUpRequest::clear_farmid() {
  farmid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PostPusaSprayPopUpRequest::_internal_farmid() const {
  return farmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PostPusaSprayPopUpRequest::farmid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.farmId)
  return _internal_farmid();
}
inline void PostPusaSprayPopUpRequest::_internal_set_farmid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  farmid_ = value;
}
inline void PostPusaSprayPopUpRequest::set_farmid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_farmid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpRequest.farmId)
}

// -------------------------------------------------------------------

// PostServiceFeedbackPNResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void PostServiceFeedbackPNResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PostServiceFeedbackPNResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PostServiceFeedbackPNResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNResponse.status)
  return _internal_status();
}
inline void PostServiceFeedbackPNResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void PostServiceFeedbackPNResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostServiceFeedbackPNResponse.status)
}

// -------------------------------------------------------------------

// PostPusaSprayPopUpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void PostPusaSprayPopUpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PostPusaSprayPopUpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PostPusaSprayPopUpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpResponse.status)
  return _internal_status();
}
inline void PostPusaSprayPopUpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void PostPusaSprayPopUpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PostPusaSprayPopUpResponse.status)
}

// -------------------------------------------------------------------

// ExecuteUserJourneyCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ExecuteUserJourneyCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ExecuteUserJourneyCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ExecuteUserJourneyCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ExecuteUserJourneyCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ExecuteUserJourneyCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void ExecuteUserJourneyCampaignRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.campaignId)
  return _internal_campaignid();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void ExecuteUserJourneyCampaignRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.campaignId)
}

// int64 engagementVertexId = 3;
inline void ExecuteUserJourneyCampaignRequest::clear_engagementvertexid() {
  engagementvertexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::_internal_engagementvertexid() const {
  return engagementvertexid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::engagementvertexid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.engagementVertexId)
  return _internal_engagementvertexid();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  engagementvertexid_ = value;
}
inline void ExecuteUserJourneyCampaignRequest::set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_engagementvertexid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.engagementVertexId)
}

// string referenceId = 4;
inline void ExecuteUserJourneyCampaignRequest::clear_referenceid() {
  referenceid_.ClearToEmpty();
}
inline const std::string& ExecuteUserJourneyCampaignRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return _internal_referenceid();
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const std::string& value) {
  _internal_set_referenceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline std::string* ExecuteUserJourneyCampaignRequest::mutable_referenceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return _internal_mutable_referenceid();
}
inline const std::string& ExecuteUserJourneyCampaignRequest::_internal_referenceid() const {
  return referenceid_.Get();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_referenceid(const std::string& value) {
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(std::string&& value) {
  
  referenceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const char* value,
    size_t size) {
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline std::string* ExecuteUserJourneyCampaignRequest::_internal_mutable_referenceid() {
  
  return referenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteUserJourneyCampaignRequest::release_referenceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return referenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_referenceid(std::string* referenceid) {
  if (referenceid != nullptr) {
    
  } else {
    
  }
  referenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referenceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}

// .google.protobuf.Duration waitDuration = 5;
inline bool ExecuteUserJourneyCampaignRequest::_internal_has_waitduration() const {
  return this != internal_default_instance() && waitduration_ != nullptr;
}
inline bool ExecuteUserJourneyCampaignRequest::has_waitduration() const {
  return _internal_has_waitduration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteUserJourneyCampaignRequest::_internal_waitduration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = waitduration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteUserJourneyCampaignRequest::waitduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  return _internal_waitduration();
}
inline void ExecuteUserJourneyCampaignRequest::unsafe_arena_set_allocated_waitduration(
    PROTOBUF_NAMESPACE_ID::Duration* waitduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration_);
  }
  waitduration_ = waitduration;
  if (waitduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::release_waitduration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = waitduration_;
  waitduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::unsafe_arena_release_waitduration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = waitduration_;
  waitduration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::_internal_mutable_waitduration() {
  
  if (waitduration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    waitduration_ = p;
  }
  return waitduration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::mutable_waitduration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  return _internal_mutable_waitduration();
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_waitduration(PROTOBUF_NAMESPACE_ID::Duration* waitduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration_);
  }
  if (waitduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration)->GetArena();
    if (message_arena != submessage_arena) {
      waitduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waitduration, submessage_arena);
    }
    
  } else {
    
  }
  waitduration_ = waitduration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
}

// -------------------------------------------------------------------

// ExecuteUserJourneyCampaignResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ExecuteUserJourneyCampaignResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteUserJourneyCampaignResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteUserJourneyCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse.status)
  return _internal_status();
}
inline void ExecuteUserJourneyCampaignResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ExecuteUserJourneyCampaignResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse.status)
}

// -------------------------------------------------------------------

// ExecuteCampaignRequest

// int64 campaign_id = 1;
inline void ExecuteCampaignRequest::clear_campaign_id() {
  campaign_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteCampaignRequest::_internal_campaign_id() const {
  return campaign_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteCampaignRequest::campaign_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaign_id)
  return _internal_campaign_id();
}
inline void ExecuteCampaignRequest::_internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaign_id_ = value;
}
inline void ExecuteCampaignRequest::set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaign_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaign_id)
}

// .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 2;
inline void ExecuteCampaignRequest::clear_campaignscheduletype() {
  campaignscheduletype_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType ExecuteCampaignRequest::_internal_campaignscheduletype() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignScheduleType >(campaignscheduletype_);
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType ExecuteCampaignRequest::campaignscheduletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaignScheduleType)
  return _internal_campaignscheduletype();
}
inline void ExecuteCampaignRequest::_internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  
  campaignscheduletype_ = value;
}
inline void ExecuteCampaignRequest::set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  _internal_set_campaignscheduletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaignScheduleType)
}

// .google.protobuf.Duration inactionDuration = 3;
inline bool ExecuteCampaignRequest::_internal_has_inactionduration() const {
  return this != internal_default_instance() && inactionduration_ != nullptr;
}
inline bool ExecuteCampaignRequest::has_inactionduration() const {
  return _internal_has_inactionduration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteCampaignRequest::_internal_inactionduration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = inactionduration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteCampaignRequest::inactionduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  return _internal_inactionduration();
}
inline void ExecuteCampaignRequest::unsafe_arena_set_allocated_inactionduration(
    PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  inactionduration_ = inactionduration;
  if (inactionduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::release_inactionduration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::unsafe_arena_release_inactionduration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::_internal_mutable_inactionduration() {
  
  if (inactionduration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    inactionduration_ = p;
  }
  return inactionduration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::mutable_inactionduration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  return _internal_mutable_inactionduration();
}
inline void ExecuteCampaignRequest::set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  if (inactionduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration)->GetArena();
    if (message_arena != submessage_arena) {
      inactionduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactionduration, submessage_arena);
    }
    
  } else {
    
  }
  inactionduration_ = inactionduration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
}

// -------------------------------------------------------------------

// ExecuteCampaignResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ExecuteCampaignResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteCampaignResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse.status)
  return _internal_status();
}
inline void ExecuteCampaignResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ExecuteCampaignResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse.status)
}

// -------------------------------------------------------------------

// RefreshUserContentRequest

// .farm.nurture.core.contracts.common.ActorID actor = 1;
inline bool RefreshUserContentRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool RefreshUserContentRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& RefreshUserContentRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& RefreshUserContentRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.actor)
  return _internal_actor();
}
inline void RefreshUserContentRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshUserContentRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshUserContentRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshUserContentRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshUserContentRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.actor)
  return _internal_mutable_actor();
}
inline void RefreshUserContentRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.actor)
}

// repeated .farm.nurture.core.contracts.common.LanguageCode languageCodes = 2;
inline int RefreshUserContentRequest::_internal_languagecodes_size() const {
  return languagecodes_.size();
}
inline int RefreshUserContentRequest::languagecodes_size() const {
  return _internal_languagecodes_size();
}
inline void RefreshUserContentRequest::clear_languagecodes() {
  languagecodes_.Clear();
}
inline ::farm::nurture::core::contracts::common::LanguageCode RefreshUserContentRequest::_internal_languagecodes(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(languagecodes_.Get(index));
}
inline ::farm::nurture::core::contracts::common::LanguageCode RefreshUserContentRequest::languagecodes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.languageCodes)
  return _internal_languagecodes(index);
}
inline void RefreshUserContentRequest::set_languagecodes(int index, ::farm::nurture::core::contracts::common::LanguageCode value) {
  languagecodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.languageCodes)
}
inline void RefreshUserContentRequest::_internal_add_languagecodes(::farm::nurture::core::contracts::common::LanguageCode value) {
  languagecodes_.Add(value);
}
inline void RefreshUserContentRequest::add_languagecodes(::farm::nurture::core::contracts::common::LanguageCode value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.languageCodes)
  _internal_add_languagecodes(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
RefreshUserContentRequest::languagecodes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.languageCodes)
  return languagecodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RefreshUserContentRequest::_internal_mutable_languagecodes() {
  return &languagecodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RefreshUserContentRequest::mutable_languagecodes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.languageCodes)
  return _internal_mutable_languagecodes();
}

// double latitude = 6;
inline void RefreshUserContentRequest::clear_latitude() {
  latitude_ = 0;
}
inline double RefreshUserContentRequest::_internal_latitude() const {
  return latitude_;
}
inline double RefreshUserContentRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.latitude)
  return _internal_latitude();
}
inline void RefreshUserContentRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void RefreshUserContentRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.latitude)
}

// double longitude = 7;
inline void RefreshUserContentRequest::clear_longitude() {
  longitude_ = 0;
}
inline double RefreshUserContentRequest::_internal_longitude() const {
  return longitude_;
}
inline double RefreshUserContentRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.longitude)
  return _internal_longitude();
}
inline void RefreshUserContentRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void RefreshUserContentRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentRequest.longitude)
}

// -------------------------------------------------------------------

// RefreshUserContentResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void RefreshUserContentResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RefreshUserContentResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RefreshUserContentResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.status)
  return _internal_status();
}
inline void RefreshUserContentResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void RefreshUserContentResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.status)
}

// repeated int64 contentIds = 2;
inline int RefreshUserContentResponse::_internal_contentids_size() const {
  return contentids_.size();
}
inline int RefreshUserContentResponse::contentids_size() const {
  return _internal_contentids_size();
}
inline void RefreshUserContentResponse::clear_contentids() {
  contentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefreshUserContentResponse::_internal_contentids(int index) const {
  return contentids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefreshUserContentResponse::contentids(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.contentIds)
  return _internal_contentids(index);
}
inline void RefreshUserContentResponse::set_contentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  contentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.contentIds)
}
inline void RefreshUserContentResponse::_internal_add_contentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  contentids_.Add(value);
}
inline void RefreshUserContentResponse::add_contentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_contentids(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.contentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RefreshUserContentResponse::_internal_contentids() const {
  return contentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RefreshUserContentResponse::contentids() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.contentIds)
  return _internal_contentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RefreshUserContentResponse::_internal_mutable_contentids() {
  return &contentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RefreshUserContentResponse::mutable_contentids() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.RefreshUserContentResponse.contentIds)
  return _internal_mutable_contentids();
}

// -------------------------------------------------------------------

// PreventiveMaintenanceTriggerRequest

// -------------------------------------------------------------------

// PreventiveMaintenanceTriggerResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void PreventiveMaintenanceTriggerResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PreventiveMaintenanceTriggerResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus PreventiveMaintenanceTriggerResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerResponse.status)
  return _internal_status();
}
inline void PreventiveMaintenanceTriggerResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void PreventiveMaintenanceTriggerResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.PreventiveMaintenanceTriggerResponse.status)
}

// -------------------------------------------------------------------

// UpdateActorsMachinePreventiveMaintenanceRequest

// repeated .farm.nurture.core.contracts.common.ActorID actorDetails = 1;
inline int UpdateActorsMachinePreventiveMaintenanceRequest::_internal_actordetails_size() const {
  return actordetails_.size();
}
inline int UpdateActorsMachinePreventiveMaintenanceRequest::actordetails_size() const {
  return _internal_actordetails_size();
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorsMachinePreventiveMaintenanceRequest::mutable_actordetails(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.actorDetails)
  return actordetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ActorID >*
UpdateActorsMachinePreventiveMaintenanceRequest::mutable_actordetails() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.actorDetails)
  return &actordetails_;
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateActorsMachinePreventiveMaintenanceRequest::_internal_actordetails(int index) const {
  return actordetails_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateActorsMachinePreventiveMaintenanceRequest::actordetails(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.actorDetails)
  return _internal_actordetails(index);
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorsMachinePreventiveMaintenanceRequest::_internal_add_actordetails() {
  return actordetails_.Add();
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorsMachinePreventiveMaintenanceRequest::add_actordetails() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.actorDetails)
  return _internal_add_actordetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ActorID >&
UpdateActorsMachinePreventiveMaintenanceRequest::actordetails() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.actorDetails)
  return actordetails_;
}

// int32 preventiveMaintenanceId = 2;
inline void UpdateActorsMachinePreventiveMaintenanceRequest::clear_preventivemaintenanceid() {
  preventivemaintenanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorsMachinePreventiveMaintenanceRequest::_internal_preventivemaintenanceid() const {
  return preventivemaintenanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorsMachinePreventiveMaintenanceRequest::preventivemaintenanceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.preventiveMaintenanceId)
  return _internal_preventivemaintenanceid();
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::_internal_set_preventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  preventivemaintenanceid_ = value;
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::set_preventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preventivemaintenanceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.preventiveMaintenanceId)
}

// int64 machineId = 3;
inline void UpdateActorsMachinePreventiveMaintenanceRequest::clear_machineid() {
  machineid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorsMachinePreventiveMaintenanceRequest::_internal_machineid() const {
  return machineid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorsMachinePreventiveMaintenanceRequest::machineid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.machineId)
  return _internal_machineid();
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::_internal_set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machineid_ = value;
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machineid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.machineId)
}

// int64 machinePreventiveMaintenanceId = 4;
inline void UpdateActorsMachinePreventiveMaintenanceRequest::clear_machinepreventivemaintenanceid() {
  machinepreventivemaintenanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorsMachinePreventiveMaintenanceRequest::_internal_machinepreventivemaintenanceid() const {
  return machinepreventivemaintenanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorsMachinePreventiveMaintenanceRequest::machinepreventivemaintenanceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.machinePreventiveMaintenanceId)
  return _internal_machinepreventivemaintenanceid();
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::_internal_set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machinepreventivemaintenanceid_ = value;
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machinepreventivemaintenanceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.machinePreventiveMaintenanceId)
}

// .farm.nurture.core.contracts.ms.PreventiveMaintenanceStatus pmStatus = 5;
inline void UpdateActorsMachinePreventiveMaintenanceRequest::clear_pmstatus() {
  pmstatus_ = 0;
}
inline ::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus UpdateActorsMachinePreventiveMaintenanceRequest::_internal_pmstatus() const {
  return static_cast< ::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus >(pmstatus_);
}
inline ::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus UpdateActorsMachinePreventiveMaintenanceRequest::pmstatus() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.pmStatus)
  return _internal_pmstatus();
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::_internal_set_pmstatus(::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus value) {
  
  pmstatus_ = value;
}
inline void UpdateActorsMachinePreventiveMaintenanceRequest::set_pmstatus(::farm::nurture::core::contracts::ms::PreventiveMaintenanceStatus value) {
  _internal_set_pmstatus(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceRequest.pmStatus)
}

// -------------------------------------------------------------------

// UpdateActorsMachinePreventiveMaintenanceResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void UpdateActorsMachinePreventiveMaintenanceResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus UpdateActorsMachinePreventiveMaintenanceResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus UpdateActorsMachinePreventiveMaintenanceResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceResponse.status)
  return _internal_status();
}
inline void UpdateActorsMachinePreventiveMaintenanceResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void UpdateActorsMachinePreventiveMaintenanceResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.UpdateActorsMachinePreventiveMaintenanceResponse.status)
}

// -------------------------------------------------------------------

// RescheduleMachinePreventiveMaintenanceRequest

// int64 machineId = 1;
inline void RescheduleMachinePreventiveMaintenanceRequest::clear_machineid() {
  machineid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::_internal_machineid() const {
  return machineid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::machineid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.machineId)
  return _internal_machineid();
}
inline void RescheduleMachinePreventiveMaintenanceRequest::_internal_set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machineid_ = value;
}
inline void RescheduleMachinePreventiveMaintenanceRequest::set_machineid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machineid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.machineId)
}

// int64 date = 2;
inline void RescheduleMachinePreventiveMaintenanceRequest::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::date() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.date)
  return _internal_date();
}
inline void RescheduleMachinePreventiveMaintenanceRequest::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void RescheduleMachinePreventiveMaintenanceRequest::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.date)
}

// int64 machinePreventiveMaintenanceId = 3;
inline void RescheduleMachinePreventiveMaintenanceRequest::clear_machinepreventivemaintenanceid() {
  machinepreventivemaintenanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::_internal_machinepreventivemaintenanceid() const {
  return machinepreventivemaintenanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RescheduleMachinePreventiveMaintenanceRequest::machinepreventivemaintenanceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.machinePreventiveMaintenanceId)
  return _internal_machinepreventivemaintenanceid();
}
inline void RescheduleMachinePreventiveMaintenanceRequest::_internal_set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  machinepreventivemaintenanceid_ = value;
}
inline void RescheduleMachinePreventiveMaintenanceRequest::set_machinepreventivemaintenanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_machinepreventivemaintenanceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceRequest.machinePreventiveMaintenanceId)
}

// -------------------------------------------------------------------

// RescheduleMachinePreventiveMaintenanceResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void RescheduleMachinePreventiveMaintenanceResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RescheduleMachinePreventiveMaintenanceResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RescheduleMachinePreventiveMaintenanceResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceResponse.status)
  return _internal_status();
}
inline void RescheduleMachinePreventiveMaintenanceResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void RescheduleMachinePreventiveMaintenanceResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.RescheduleMachinePreventiveMaintenanceResponse.status)
}

// -------------------------------------------------------------------

// HandoverOtpRequest

// string otp = 1;
inline void HandoverOtpRequest::clear_otp() {
  otp_.ClearToEmpty();
}
inline const std::string& HandoverOtpRequest::otp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return _internal_otp();
}
inline void HandoverOtpRequest::set_otp(const std::string& value) {
  _internal_set_otp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline std::string* HandoverOtpRequest::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return _internal_mutable_otp();
}
inline const std::string& HandoverOtpRequest::_internal_otp() const {
  return otp_.Get();
}
inline void HandoverOtpRequest::_internal_set_otp(const std::string& value) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandoverOtpRequest::set_otp(std::string&& value) {
  
  otp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline void HandoverOtpRequest::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline void HandoverOtpRequest::set_otp(const char* value,
    size_t size) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline std::string* HandoverOtpRequest::_internal_mutable_otp() {
  
  return otp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandoverOtpRequest::release_otp() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return otp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandoverOtpRequest::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}

// .farm.nurture.core.contracts.common.ActorID actorDetails = 2;
inline bool HandoverOtpRequest::_internal_has_actordetails() const {
  return this != internal_default_instance() && actordetails_ != nullptr;
}
inline bool HandoverOtpRequest::has_actordetails() const {
  return _internal_has_actordetails();
}
inline const ::farm::nurture::core::contracts::common::ActorID& HandoverOtpRequest::_internal_actordetails() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actordetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& HandoverOtpRequest::actordetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  return _internal_actordetails();
}
inline void HandoverOtpRequest::unsafe_arena_set_allocated_actordetails(
    ::farm::nurture::core::contracts::common::ActorID* actordetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails_);
  }
  actordetails_ = actordetails;
  if (actordetails) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::release_actordetails() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actordetails_;
  actordetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::unsafe_arena_release_actordetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actordetails_;
  actordetails_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::_internal_mutable_actordetails() {
  
  if (actordetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actordetails_ = p;
  }
  return actordetails_;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::mutable_actordetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  return _internal_mutable_actordetails();
}
inline void HandoverOtpRequest::set_allocated_actordetails(::farm::nurture::core::contracts::common::ActorID* actordetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails_);
  }
  if (actordetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails)->GetArena();
    if (message_arena != submessage_arena) {
      actordetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actordetails, submessage_arena);
    }
    
  } else {
    
  }
  actordetails_ = actordetails;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
}

// string mobileNumber = 3;
inline void HandoverOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& HandoverOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void HandoverOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline std::string* HandoverOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& HandoverOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void HandoverOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandoverOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline void HandoverOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline void HandoverOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline std::string* HandoverOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandoverOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandoverOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}

// -------------------------------------------------------------------

// HandoverOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void HandoverOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus HandoverOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus HandoverOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse.status)
  return _internal_status();
}
inline void HandoverOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void HandoverOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse.status)
}

// -------------------------------------------------------------------

// Attributes

// string key = 1;
inline void Attributes::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Attributes::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
  return _internal_key();
}
inline void Attributes::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
}
inline std::string* Attributes::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
  return _internal_mutable_key();
}
inline const std::string& Attributes::_internal_key() const {
  return key_.Get();
}
inline void Attributes::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attributes::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
}
inline void Attributes::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
}
inline void Attributes::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
}
inline std::string* Attributes::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attributes::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attributes::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.Attributes.key)
}

// string value = 2;
inline void Attributes::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Attributes::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
  return _internal_value();
}
inline void Attributes::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
}
inline std::string* Attributes::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
  return _internal_mutable_value();
}
inline const std::string& Attributes::_internal_value() const {
  return value_.Get();
}
inline void Attributes::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attributes::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
}
inline void Attributes::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
}
inline void Attributes::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
}
inline std::string* Attributes::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attributes::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attributes::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.Attributes.value)
}

// -------------------------------------------------------------------

// OfferRewardRequest

// int64 id = 1;
inline void OfferRewardRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferRewardRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferRewardRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.id)
  return _internal_id();
}
inline void OfferRewardRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void OfferRewardRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.id)
}

// .farm.nurture.core.contracts.common.ActorID userDetails = 2;
inline bool OfferRewardRequest::_internal_has_userdetails() const {
  return this != internal_default_instance() && userdetails_ != nullptr;
}
inline bool OfferRewardRequest::has_userdetails() const {
  return _internal_has_userdetails();
}
inline const ::farm::nurture::core::contracts::common::ActorID& OfferRewardRequest::_internal_userdetails() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = userdetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& OfferRewardRequest::userdetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userDetails)
  return _internal_userdetails();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_userdetails(
    ::farm::nurture::core::contracts::common::ActorID* userdetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  userdetails_ = userdetails;
  if (userdetails) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userDetails)
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferRewardRequest::release_userdetails() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferRewardRequest::unsafe_arena_release_userdetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userDetails)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferRewardRequest::_internal_mutable_userdetails() {
  
  if (userdetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    userdetails_ = p;
  }
  return userdetails_;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferRewardRequest::mutable_userdetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userDetails)
  return _internal_mutable_userdetails();
}
inline void OfferRewardRequest::set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  if (userdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails)->GetArena();
    if (message_arena != submessage_arena) {
      userdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdetails, submessage_arena);
    }
    
  } else {
    
  }
  userdetails_ = userdetails;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userDetails)
}

// .farm.nurture.core.contracts.common.UserActionType userActionType = 3;
inline void OfferRewardRequest::clear_useractiontype() {
  useractiontype_ = 0;
}
inline ::farm::nurture::core::contracts::common::UserActionType OfferRewardRequest::_internal_useractiontype() const {
  return static_cast< ::farm::nurture::core::contracts::common::UserActionType >(useractiontype_);
}
inline ::farm::nurture::core::contracts::common::UserActionType OfferRewardRequest::useractiontype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userActionType)
  return _internal_useractiontype();
}
inline void OfferRewardRequest::_internal_set_useractiontype(::farm::nurture::core::contracts::common::UserActionType value) {
  
  useractiontype_ = value;
}
inline void OfferRewardRequest::set_useractiontype(::farm::nurture::core::contracts::common::UserActionType value) {
  _internal_set_useractiontype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.userActionType)
}

// .farm.nurture.core.contracts.common.RewardType rewardType = 4;
inline void OfferRewardRequest::clear_rewardtype() {
  rewardtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::RewardType OfferRewardRequest::_internal_rewardtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::RewardType >(rewardtype_);
}
inline ::farm::nurture::core::contracts::common::RewardType OfferRewardRequest::rewardtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.rewardType)
  return _internal_rewardtype();
}
inline void OfferRewardRequest::_internal_set_rewardtype(::farm::nurture::core::contracts::common::RewardType value) {
  
  rewardtype_ = value;
}
inline void OfferRewardRequest::set_rewardtype(::farm::nurture::core::contracts::common::RewardType value) {
  _internal_set_rewardtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.rewardType)
}

// int32 rewardPoints = 5;
inline void OfferRewardRequest::clear_rewardpoints() {
  rewardpoints_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfferRewardRequest::_internal_rewardpoints() const {
  return rewardpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfferRewardRequest::rewardpoints() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.rewardPoints)
  return _internal_rewardpoints();
}
inline void OfferRewardRequest::_internal_set_rewardpoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardpoints_ = value;
}
inline void OfferRewardRequest::set_rewardpoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardpoints(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.rewardPoints)
}

// .google.protobuf.Timestamp allottedTime = 6;
inline bool OfferRewardRequest::_internal_has_allottedtime() const {
  return this != internal_default_instance() && allottedtime_ != nullptr;
}
inline bool OfferRewardRequest::has_allottedtime() const {
  return _internal_has_allottedtime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::_internal_allottedtime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = allottedtime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::allottedtime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.allottedTime)
  return _internal_allottedtime();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_allottedtime(
    PROTOBUF_NAMESPACE_ID::Timestamp* allottedtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allottedtime_);
  }
  allottedtime_ = allottedtime;
  if (allottedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.allottedTime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::release_allottedtime() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allottedtime_;
  allottedtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::unsafe_arena_release_allottedtime() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.allottedTime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allottedtime_;
  allottedtime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::_internal_mutable_allottedtime() {
  
  if (allottedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    allottedtime_ = p;
  }
  return allottedtime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::mutable_allottedtime() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.allottedTime)
  return _internal_mutable_allottedtime();
}
inline void OfferRewardRequest::set_allocated_allottedtime(PROTOBUF_NAMESPACE_ID::Timestamp* allottedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allottedtime_);
  }
  if (allottedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allottedtime)->GetArena();
    if (message_arena != submessage_arena) {
      allottedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allottedtime, submessage_arena);
    }
    
  } else {
    
  }
  allottedtime_ = allottedtime;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.allottedTime)
}

// string source = 7;
inline void OfferRewardRequest::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::source() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
  return _internal_source();
}
inline void OfferRewardRequest::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
}
inline std::string* OfferRewardRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
  return _internal_mutable_source();
}
inline const std::string& OfferRewardRequest::_internal_source() const {
  return source_.Get();
}
inline void OfferRewardRequest::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
}
inline void OfferRewardRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
}
inline void OfferRewardRequest::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
}
inline std::string* OfferRewardRequest::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_source() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.source)
}

// string sourceReferenceId = 8;
inline void OfferRewardRequest::clear_sourcereferenceid() {
  sourcereferenceid_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::sourcereferenceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
  return _internal_sourcereferenceid();
}
inline void OfferRewardRequest::set_sourcereferenceid(const std::string& value) {
  _internal_set_sourcereferenceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
}
inline std::string* OfferRewardRequest::mutable_sourcereferenceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
  return _internal_mutable_sourcereferenceid();
}
inline const std::string& OfferRewardRequest::_internal_sourcereferenceid() const {
  return sourcereferenceid_.Get();
}
inline void OfferRewardRequest::_internal_set_sourcereferenceid(const std::string& value) {
  
  sourcereferenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_sourcereferenceid(std::string&& value) {
  
  sourcereferenceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
}
inline void OfferRewardRequest::set_sourcereferenceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcereferenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
}
inline void OfferRewardRequest::set_sourcereferenceid(const char* value,
    size_t size) {
  
  sourcereferenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
}
inline std::string* OfferRewardRequest::_internal_mutable_sourcereferenceid() {
  
  return sourcereferenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_sourcereferenceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
  return sourcereferenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_sourcereferenceid(std::string* sourcereferenceid) {
  if (sourcereferenceid != nullptr) {
    
  } else {
    
  }
  sourcereferenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcereferenceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.sourceReferenceId)
}

// string correctionId = 9;
inline void OfferRewardRequest::clear_correctionid() {
  correctionid_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::correctionid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
  return _internal_correctionid();
}
inline void OfferRewardRequest::set_correctionid(const std::string& value) {
  _internal_set_correctionid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
}
inline std::string* OfferRewardRequest::mutable_correctionid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
  return _internal_mutable_correctionid();
}
inline const std::string& OfferRewardRequest::_internal_correctionid() const {
  return correctionid_.Get();
}
inline void OfferRewardRequest::_internal_set_correctionid(const std::string& value) {
  
  correctionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_correctionid(std::string&& value) {
  
  correctionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
}
inline void OfferRewardRequest::set_correctionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correctionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
}
inline void OfferRewardRequest::set_correctionid(const char* value,
    size_t size) {
  
  correctionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
}
inline std::string* OfferRewardRequest::_internal_mutable_correctionid() {
  
  return correctionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_correctionid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
  return correctionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_correctionid(std::string* correctionid) {
  if (correctionid != nullptr) {
    
  } else {
    
  }
  correctionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correctionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.correctionId)
}

// string parentCorrectionId = 10;
inline void OfferRewardRequest::clear_parentcorrectionid() {
  parentcorrectionid_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::parentcorrectionid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
  return _internal_parentcorrectionid();
}
inline void OfferRewardRequest::set_parentcorrectionid(const std::string& value) {
  _internal_set_parentcorrectionid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
}
inline std::string* OfferRewardRequest::mutable_parentcorrectionid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
  return _internal_mutable_parentcorrectionid();
}
inline const std::string& OfferRewardRequest::_internal_parentcorrectionid() const {
  return parentcorrectionid_.Get();
}
inline void OfferRewardRequest::_internal_set_parentcorrectionid(const std::string& value) {
  
  parentcorrectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_parentcorrectionid(std::string&& value) {
  
  parentcorrectionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
}
inline void OfferRewardRequest::set_parentcorrectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentcorrectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
}
inline void OfferRewardRequest::set_parentcorrectionid(const char* value,
    size_t size) {
  
  parentcorrectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
}
inline std::string* OfferRewardRequest::_internal_mutable_parentcorrectionid() {
  
  return parentcorrectionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_parentcorrectionid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
  return parentcorrectionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_parentcorrectionid(std::string* parentcorrectionid) {
  if (parentcorrectionid != nullptr) {
    
  } else {
    
  }
  parentcorrectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentcorrectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.parentCorrectionId)
}

// string titleKey = 11;
inline void OfferRewardRequest::clear_titlekey() {
  titlekey_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::titlekey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
  return _internal_titlekey();
}
inline void OfferRewardRequest::set_titlekey(const std::string& value) {
  _internal_set_titlekey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
}
inline std::string* OfferRewardRequest::mutable_titlekey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
  return _internal_mutable_titlekey();
}
inline const std::string& OfferRewardRequest::_internal_titlekey() const {
  return titlekey_.Get();
}
inline void OfferRewardRequest::_internal_set_titlekey(const std::string& value) {
  
  titlekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_titlekey(std::string&& value) {
  
  titlekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
}
inline void OfferRewardRequest::set_titlekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  titlekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
}
inline void OfferRewardRequest::set_titlekey(const char* value,
    size_t size) {
  
  titlekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
}
inline std::string* OfferRewardRequest::_internal_mutable_titlekey() {
  
  return titlekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_titlekey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
  return titlekey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_titlekey(std::string* titlekey) {
  if (titlekey != nullptr) {
    
  } else {
    
  }
  titlekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), titlekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.titleKey)
}

// string descriptionKey = 12;
inline void OfferRewardRequest::clear_descriptionkey() {
  descriptionkey_.ClearToEmpty();
}
inline const std::string& OfferRewardRequest::descriptionkey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
  return _internal_descriptionkey();
}
inline void OfferRewardRequest::set_descriptionkey(const std::string& value) {
  _internal_set_descriptionkey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
}
inline std::string* OfferRewardRequest::mutable_descriptionkey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
  return _internal_mutable_descriptionkey();
}
inline const std::string& OfferRewardRequest::_internal_descriptionkey() const {
  return descriptionkey_.Get();
}
inline void OfferRewardRequest::_internal_set_descriptionkey(const std::string& value) {
  
  descriptionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OfferRewardRequest::set_descriptionkey(std::string&& value) {
  
  descriptionkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
}
inline void OfferRewardRequest::set_descriptionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
}
inline void OfferRewardRequest::set_descriptionkey(const char* value,
    size_t size) {
  
  descriptionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
}
inline std::string* OfferRewardRequest::_internal_mutable_descriptionkey() {
  
  return descriptionkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OfferRewardRequest::release_descriptionkey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
  return descriptionkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfferRewardRequest::set_allocated_descriptionkey(std::string* descriptionkey) {
  if (descriptionkey != nullptr) {
    
  } else {
    
  }
  descriptionkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptionkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.descriptionKey)
}

// .google.protobuf.Timestamp validFrom = 13;
inline bool OfferRewardRequest::_internal_has_validfrom() const {
  return this != internal_default_instance() && validfrom_ != nullptr;
}
inline bool OfferRewardRequest::has_validfrom() const {
  return _internal_has_validfrom();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::_internal_validfrom() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = validfrom_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::validfrom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validFrom)
  return _internal_validfrom();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_validfrom(
    PROTOBUF_NAMESPACE_ID::Timestamp* validfrom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validfrom_);
  }
  validfrom_ = validfrom;
  if (validfrom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validFrom)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::release_validfrom() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = validfrom_;
  validfrom_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::unsafe_arena_release_validfrom() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validFrom)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = validfrom_;
  validfrom_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::_internal_mutable_validfrom() {
  
  if (validfrom_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    validfrom_ = p;
  }
  return validfrom_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::mutable_validfrom() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validFrom)
  return _internal_mutable_validfrom();
}
inline void OfferRewardRequest::set_allocated_validfrom(PROTOBUF_NAMESPACE_ID::Timestamp* validfrom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validfrom_);
  }
  if (validfrom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validfrom)->GetArena();
    if (message_arena != submessage_arena) {
      validfrom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validfrom, submessage_arena);
    }
    
  } else {
    
  }
  validfrom_ = validfrom;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validFrom)
}

// .google.protobuf.Timestamp validTo = 14;
inline bool OfferRewardRequest::_internal_has_validto() const {
  return this != internal_default_instance() && validto_ != nullptr;
}
inline bool OfferRewardRequest::has_validto() const {
  return _internal_has_validto();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::_internal_validto() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = validto_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::validto() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validTo)
  return _internal_validto();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_validto(
    PROTOBUF_NAMESPACE_ID::Timestamp* validto) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validto_);
  }
  validto_ = validto;
  if (validto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validTo)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::release_validto() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = validto_;
  validto_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::unsafe_arena_release_validto() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validTo)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = validto_;
  validto_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::_internal_mutable_validto() {
  
  if (validto_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    validto_ = p;
  }
  return validto_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::mutable_validto() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validTo)
  return _internal_mutable_validto();
}
inline void OfferRewardRequest::set_allocated_validto(PROTOBUF_NAMESPACE_ID::Timestamp* validto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validto_);
  }
  if (validto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validto)->GetArena();
    if (message_arena != submessage_arena) {
      validto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validto, submessage_arena);
    }
    
  } else {
    
  }
  validto_ = validto;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.validTo)
}

// repeated .farm.nurture.core.contracts.workflows.generalgo.Attributes attributes = 15;
inline int OfferRewardRequest::_internal_attributes_size() const {
  return attributes_.size();
}
inline int OfferRewardRequest::attributes_size() const {
  return _internal_attributes_size();
}
inline void OfferRewardRequest::clear_attributes() {
  attributes_.Clear();
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferRewardRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >*
OfferRewardRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.attributes)
  return &attributes_;
}
inline const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& OfferRewardRequest::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& OfferRewardRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.attributes)
  return _internal_attributes(index);
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferRewardRequest::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferRewardRequest::add_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >&
OfferRewardRequest::attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.attributes)
  return attributes_;
}

// .farm.nurture.core.contracts.workflows.generalgo.Status status = 16;
inline void OfferRewardRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Status OfferRewardRequest::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::workflows::generalgo::Status >(status_);
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Status OfferRewardRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.status)
  return _internal_status();
}
inline void OfferRewardRequest::_internal_set_status(::farm::nurture::core::contracts::workflows::generalgo::Status value) {
  
  status_ = value;
}
inline void OfferRewardRequest::set_status(::farm::nurture::core::contracts::workflows::generalgo::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.status)
}

// .google.protobuf.Timestamp createdAt = 18;
inline bool OfferRewardRequest::_internal_has_createdat() const {
  return this != internal_default_instance() && createdat_ != nullptr;
}
inline bool OfferRewardRequest::has_createdat() const {
  return _internal_has_createdat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::_internal_createdat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = createdat_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.createdAt)
  return _internal_createdat();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_createdat(
    PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  createdat_ = createdat;
  if (createdat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.createdAt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::release_createdat() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::unsafe_arena_release_createdat() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.createdAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::_internal_mutable_createdat() {
  
  if (createdat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    createdat_ = p;
  }
  return createdat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.createdAt)
  return _internal_mutable_createdat();
}
inline void OfferRewardRequest::set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  if (createdat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat)->GetArena();
    if (message_arena != submessage_arena) {
      createdat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdat, submessage_arena);
    }
    
  } else {
    
  }
  createdat_ = createdat;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.createdAt)
}

// .google.protobuf.Timestamp updatedAt = 19;
inline bool OfferRewardRequest::_internal_has_updatedat() const {
  return this != internal_default_instance() && updatedat_ != nullptr;
}
inline bool OfferRewardRequest::has_updatedat() const {
  return _internal_has_updatedat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::_internal_updatedat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updatedat_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OfferRewardRequest::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.updatedAt)
  return _internal_updatedat();
}
inline void OfferRewardRequest::unsafe_arena_set_allocated_updatedat(
    PROTOBUF_NAMESPACE_ID::Timestamp* updatedat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat_);
  }
  updatedat_ = updatedat;
  if (updatedat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.updatedAt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::release_updatedat() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updatedat_;
  updatedat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::unsafe_arena_release_updatedat() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.updatedAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updatedat_;
  updatedat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::_internal_mutable_updatedat() {
  
  if (updatedat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updatedat_ = p;
  }
  return updatedat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OfferRewardRequest::mutable_updatedat() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.updatedAt)
  return _internal_mutable_updatedat();
}
inline void OfferRewardRequest::set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat_);
  }
  if (updatedat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat)->GetArena();
    if (message_arena != submessage_arena) {
      updatedat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedat, submessage_arena);
    }
    
  } else {
    
  }
  updatedat_ = updatedat;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferRewardRequest.updatedAt)
}

// -------------------------------------------------------------------

// OfferRewardResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void OfferRewardResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OfferRewardResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OfferRewardResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferRewardResponse.status)
  return _internal_status();
}
inline void OfferRewardResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void OfferRewardResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferRewardResponse.status)
}

// -------------------------------------------------------------------

// DiscountedSprayServiceRequest

// .farm.nurture.core.contracts.common.ActorID userDetails = 1;
inline bool DiscountedSprayServiceRequest::_internal_has_userdetails() const {
  return this != internal_default_instance() && userdetails_ != nullptr;
}
inline bool DiscountedSprayServiceRequest::has_userdetails() const {
  return _internal_has_userdetails();
}
inline const ::farm::nurture::core::contracts::common::ActorID& DiscountedSprayServiceRequest::_internal_userdetails() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = userdetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& DiscountedSprayServiceRequest::userdetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.userDetails)
  return _internal_userdetails();
}
inline void DiscountedSprayServiceRequest::unsafe_arena_set_allocated_userdetails(
    ::farm::nurture::core::contracts::common::ActorID* userdetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  userdetails_ = userdetails;
  if (userdetails) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.userDetails)
}
inline ::farm::nurture::core::contracts::common::ActorID* DiscountedSprayServiceRequest::release_userdetails() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DiscountedSprayServiceRequest::unsafe_arena_release_userdetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.userDetails)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DiscountedSprayServiceRequest::_internal_mutable_userdetails() {
  
  if (userdetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    userdetails_ = p;
  }
  return userdetails_;
}
inline ::farm::nurture::core::contracts::common::ActorID* DiscountedSprayServiceRequest::mutable_userdetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.userDetails)
  return _internal_mutable_userdetails();
}
inline void DiscountedSprayServiceRequest::set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  if (userdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails)->GetArena();
    if (message_arena != submessage_arena) {
      userdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdetails, submessage_arena);
    }
    
  } else {
    
  }
  userdetails_ = userdetails;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.userDetails)
}

// int64 bookingId = 2;
inline void DiscountedSprayServiceRequest::clear_bookingid() {
  bookingid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiscountedSprayServiceRequest::_internal_bookingid() const {
  return bookingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiscountedSprayServiceRequest::bookingid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.bookingId)
  return _internal_bookingid();
}
inline void DiscountedSprayServiceRequest::_internal_set_bookingid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bookingid_ = value;
}
inline void DiscountedSprayServiceRequest::set_bookingid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bookingid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.bookingId)
}

// int64 serviceId = 3;
inline void DiscountedSprayServiceRequest::clear_serviceid() {
  serviceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiscountedSprayServiceRequest::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiscountedSprayServiceRequest::serviceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.serviceId)
  return _internal_serviceid();
}
inline void DiscountedSprayServiceRequest::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serviceid_ = value;
}
inline void DiscountedSprayServiceRequest::set_serviceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.DiscountedSprayServiceRequest.serviceId)
}

// -------------------------------------------------------------------

// OfferInsuranceRewardRequest

// .farm.nurture.core.contracts.common.ActorID userDetails = 1;
inline bool OfferInsuranceRewardRequest::_internal_has_userdetails() const {
  return this != internal_default_instance() && userdetails_ != nullptr;
}
inline bool OfferInsuranceRewardRequest::has_userdetails() const {
  return _internal_has_userdetails();
}
inline const ::farm::nurture::core::contracts::common::ActorID& OfferInsuranceRewardRequest::_internal_userdetails() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = userdetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& OfferInsuranceRewardRequest::userdetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userDetails)
  return _internal_userdetails();
}
inline void OfferInsuranceRewardRequest::unsafe_arena_set_allocated_userdetails(
    ::farm::nurture::core::contracts::common::ActorID* userdetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  userdetails_ = userdetails;
  if (userdetails) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userDetails)
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferInsuranceRewardRequest::release_userdetails() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferInsuranceRewardRequest::unsafe_arena_release_userdetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userDetails)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = userdetails_;
  userdetails_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferInsuranceRewardRequest::_internal_mutable_userdetails() {
  
  if (userdetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    userdetails_ = p;
  }
  return userdetails_;
}
inline ::farm::nurture::core::contracts::common::ActorID* OfferInsuranceRewardRequest::mutable_userdetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userDetails)
  return _internal_mutable_userdetails();
}
inline void OfferInsuranceRewardRequest::set_allocated_userdetails(::farm::nurture::core::contracts::common::ActorID* userdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails_);
  }
  if (userdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdetails)->GetArena();
    if (message_arena != submessage_arena) {
      userdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdetails, submessage_arena);
    }
    
  } else {
    
  }
  userdetails_ = userdetails;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userDetails)
}

// .farm.nurture.core.contracts.common.Location location = 2;
inline bool OfferInsuranceRewardRequest::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool OfferInsuranceRewardRequest::has_location() const {
  return _internal_has_location();
}
inline const ::farm::nurture::core::contracts::common::Location& OfferInsuranceRewardRequest::_internal_location() const {
  const ::farm::nurture::core::contracts::common::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Location&>(
      ::farm::nurture::core::contracts::common::_Location_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Location& OfferInsuranceRewardRequest::location() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.location)
  return _internal_location();
}
inline void OfferInsuranceRewardRequest::unsafe_arena_set_allocated_location(
    ::farm::nurture::core::contracts::common::Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.location)
}
inline ::farm::nurture::core::contracts::common::Location* OfferInsuranceRewardRequest::release_location() {
  
  ::farm::nurture::core::contracts::common::Location* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Location* OfferInsuranceRewardRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.location)
  
  ::farm::nurture::core::contracts::common::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Location* OfferInsuranceRewardRequest::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::farm::nurture::core::contracts::common::Location* OfferInsuranceRewardRequest::mutable_location() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.location)
  return _internal_mutable_location();
}
inline void OfferInsuranceRewardRequest::set_allocated_location(::farm::nurture::core::contracts::common::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.location)
}

// .farm.nurture.core.contracts.common.PaymentMethod paymentMethod = 3;
inline void OfferInsuranceRewardRequest::clear_paymentmethod() {
  paymentmethod_ = 0;
}
inline ::farm::nurture::core::contracts::common::PaymentMethod OfferInsuranceRewardRequest::_internal_paymentmethod() const {
  return static_cast< ::farm::nurture::core::contracts::common::PaymentMethod >(paymentmethod_);
}
inline ::farm::nurture::core::contracts::common::PaymentMethod OfferInsuranceRewardRequest::paymentmethod() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.paymentMethod)
  return _internal_paymentmethod();
}
inline void OfferInsuranceRewardRequest::_internal_set_paymentmethod(::farm::nurture::core::contracts::common::PaymentMethod value) {
  
  paymentmethod_ = value;
}
inline void OfferInsuranceRewardRequest::set_paymentmethod(::farm::nurture::core::contracts::common::PaymentMethod value) {
  _internal_set_paymentmethod(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.paymentMethod)
}

// repeated int64 schemeQuantities = 4;
inline int OfferInsuranceRewardRequest::_internal_schemequantities_size() const {
  return schemequantities_.size();
}
inline int OfferInsuranceRewardRequest::schemequantities_size() const {
  return _internal_schemequantities_size();
}
inline void OfferInsuranceRewardRequest::clear_schemequantities() {
  schemequantities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::_internal_schemequantities(int index) const {
  return schemequantities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::schemequantities(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.schemeQuantities)
  return _internal_schemequantities(index);
}
inline void OfferInsuranceRewardRequest::set_schemequantities(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  schemequantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.schemeQuantities)
}
inline void OfferInsuranceRewardRequest::_internal_add_schemequantities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  schemequantities_.Add(value);
}
inline void OfferInsuranceRewardRequest::add_schemequantities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_schemequantities(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.schemeQuantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OfferInsuranceRewardRequest::_internal_schemequantities() const {
  return schemequantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OfferInsuranceRewardRequest::schemequantities() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.schemeQuantities)
  return _internal_schemequantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OfferInsuranceRewardRequest::_internal_mutable_schemequantities() {
  return &schemequantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OfferInsuranceRewardRequest::mutable_schemequantities() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.schemeQuantities)
  return _internal_mutable_schemequantities();
}

// int64 offerId = 5;
inline void OfferInsuranceRewardRequest::clear_offerid() {
  offerid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::_internal_offerid() const {
  return offerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::offerid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.offerId)
  return _internal_offerid();
}
inline void OfferInsuranceRewardRequest::_internal_set_offerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offerid_ = value;
}
inline void OfferInsuranceRewardRequest::set_offerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offerid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.offerId)
}

// .farm.nurture.core.contracts.common.LanguageCode languageCode = 6;
inline void OfferInsuranceRewardRequest::clear_languagecode() {
  languagecode_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode OfferInsuranceRewardRequest::_internal_languagecode() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(languagecode_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode OfferInsuranceRewardRequest::languagecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.languageCode)
  return _internal_languagecode();
}
inline void OfferInsuranceRewardRequest::_internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  languagecode_ = value;
}
inline void OfferInsuranceRewardRequest::set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_languagecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.languageCode)
}

// repeated .farm.nurture.core.contracts.workflows.generalgo.Attributes attributes = 7;
inline int OfferInsuranceRewardRequest::_internal_attributes_size() const {
  return attributes_.size();
}
inline int OfferInsuranceRewardRequest::attributes_size() const {
  return _internal_attributes_size();
}
inline void OfferInsuranceRewardRequest::clear_attributes() {
  attributes_.Clear();
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferInsuranceRewardRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >*
OfferInsuranceRewardRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.attributes)
  return &attributes_;
}
inline const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& OfferInsuranceRewardRequest::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::workflows::generalgo::Attributes& OfferInsuranceRewardRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.attributes)
  return _internal_attributes(index);
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferInsuranceRewardRequest::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::farm::nurture::core::contracts::workflows::generalgo::Attributes* OfferInsuranceRewardRequest::add_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::workflows::generalgo::Attributes >&
OfferInsuranceRewardRequest::attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.attributes)
  return attributes_;
}

// int64 userRewardId = 8;
inline void OfferInsuranceRewardRequest::clear_userrewardid() {
  userrewardid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::_internal_userrewardid() const {
  return userrewardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OfferInsuranceRewardRequest::userrewardid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userRewardId)
  return _internal_userrewardid();
}
inline void OfferInsuranceRewardRequest::_internal_set_userrewardid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userrewardid_ = value;
}
inline void OfferInsuranceRewardRequest::set_userrewardid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userrewardid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.userRewardId)
}

// .farm.nurture.core.contracts.common.RewardType rewardType = 9;
inline void OfferInsuranceRewardRequest::clear_rewardtype() {
  rewardtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::RewardType OfferInsuranceRewardRequest::_internal_rewardtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::RewardType >(rewardtype_);
}
inline ::farm::nurture::core::contracts::common::RewardType OfferInsuranceRewardRequest::rewardtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.rewardType)
  return _internal_rewardtype();
}
inline void OfferInsuranceRewardRequest::_internal_set_rewardtype(::farm::nurture::core::contracts::common::RewardType value) {
  
  rewardtype_ = value;
}
inline void OfferInsuranceRewardRequest::set_rewardtype(::farm::nurture::core::contracts::common::RewardType value) {
  _internal_set_rewardtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardRequest.rewardType)
}

// -------------------------------------------------------------------

// OfferInsuranceRewardResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void OfferInsuranceRewardResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OfferInsuranceRewardResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OfferInsuranceRewardResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardResponse.status)
  return _internal_status();
}
inline void OfferInsuranceRewardResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void OfferInsuranceRewardResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.OfferInsuranceRewardResponse.status)
}

// -------------------------------------------------------------------

// CreatePartitionsRequest

// string tableName = 1;
inline void CreatePartitionsRequest::clear_tablename() {
  tablename_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::tablename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return _internal_tablename();
}
inline void CreatePartitionsRequest::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline std::string* CreatePartitionsRequest::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& CreatePartitionsRequest::_internal_tablename() const {
  return tablename_.Get();
}
inline void CreatePartitionsRequest::_internal_set_tablename(const std::string& value) {
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_tablename(std::string&& value) {
  
  tablename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline void CreatePartitionsRequest::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline void CreatePartitionsRequest::set_tablename(const char* value,
    size_t size) {
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_tablename() {
  
  return tablename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_tablename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return tablename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}

// string databaseName = 2;
inline void CreatePartitionsRequest::clear_databasename() {
  databasename_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::databasename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return _internal_databasename();
}
inline void CreatePartitionsRequest::set_databasename(const std::string& value) {
  _internal_set_databasename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline std::string* CreatePartitionsRequest::mutable_databasename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return _internal_mutable_databasename();
}
inline const std::string& CreatePartitionsRequest::_internal_databasename() const {
  return databasename_.Get();
}
inline void CreatePartitionsRequest::_internal_set_databasename(const std::string& value) {
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_databasename(std::string&& value) {
  
  databasename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline void CreatePartitionsRequest::set_databasename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline void CreatePartitionsRequest::set_databasename(const char* value,
    size_t size) {
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_databasename() {
  
  return databasename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_databasename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return databasename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_databasename(std::string* databasename) {
  if (databasename != nullptr) {
    
  } else {
    
  }
  databasename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), databasename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}

// string bucket = 3;
inline void CreatePartitionsRequest::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::bucket() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return _internal_bucket();
}
inline void CreatePartitionsRequest::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline std::string* CreatePartitionsRequest::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& CreatePartitionsRequest::_internal_bucket() const {
  return bucket_.Get();
}
inline void CreatePartitionsRequest::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_bucket(std::string&& value) {
  
  bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline void CreatePartitionsRequest::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline void CreatePartitionsRequest::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}

// int64 numberOfDays = 4;
inline void CreatePartitionsRequest::clear_numberofdays() {
  numberofdays_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionsRequest::_internal_numberofdays() const {
  return numberofdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionsRequest::numberofdays() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.numberOfDays)
  return _internal_numberofdays();
}
inline void CreatePartitionsRequest::_internal_set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numberofdays_ = value;
}
inline void CreatePartitionsRequest::set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_numberofdays(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.numberOfDays)
}

// -------------------------------------------------------------------

// CreatePartitionsResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void CreatePartitionsResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus CreatePartitionsResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus CreatePartitionsResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse.status)
  return _internal_status();
}
inline void CreatePartitionsResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void CreatePartitionsResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse.status)
}

// -------------------------------------------------------------------

// TriggerF2FPointExpiryCronRequest

// string cronExp = 1;
inline void TriggerF2FPointExpiryCronRequest::clear_cronexp() {
  cronexp_.ClearToEmpty();
}
inline const std::string& TriggerF2FPointExpiryCronRequest::cronexp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
  return _internal_cronexp();
}
inline void TriggerF2FPointExpiryCronRequest::set_cronexp(const std::string& value) {
  _internal_set_cronexp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
}
inline std::string* TriggerF2FPointExpiryCronRequest::mutable_cronexp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
  return _internal_mutable_cronexp();
}
inline const std::string& TriggerF2FPointExpiryCronRequest::_internal_cronexp() const {
  return cronexp_.Get();
}
inline void TriggerF2FPointExpiryCronRequest::_internal_set_cronexp(const std::string& value) {
  
  cronexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TriggerF2FPointExpiryCronRequest::set_cronexp(std::string&& value) {
  
  cronexp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
}
inline void TriggerF2FPointExpiryCronRequest::set_cronexp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cronexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
}
inline void TriggerF2FPointExpiryCronRequest::set_cronexp(const char* value,
    size_t size) {
  
  cronexp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
}
inline std::string* TriggerF2FPointExpiryCronRequest::_internal_mutable_cronexp() {
  
  return cronexp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TriggerF2FPointExpiryCronRequest::release_cronexp() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
  return cronexp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TriggerF2FPointExpiryCronRequest::set_allocated_cronexp(std::string* cronexp) {
  if (cronexp != nullptr) {
    
  } else {
    
  }
  cronexp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cronexp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.cronExp)
}

// int64 segmentId = 2;
inline void TriggerF2FPointExpiryCronRequest::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerF2FPointExpiryCronRequest::_internal_segmentid() const {
  return segmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerF2FPointExpiryCronRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.segmentId)
  return _internal_segmentid();
}
inline void TriggerF2FPointExpiryCronRequest::_internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
}
inline void TriggerF2FPointExpiryCronRequest::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.segmentId)
}

// int64 expiryPoints = 4;
inline void TriggerF2FPointExpiryCronRequest::clear_expirypoints() {
  expirypoints_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerF2FPointExpiryCronRequest::_internal_expirypoints() const {
  return expirypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerF2FPointExpiryCronRequest::expirypoints() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.expiryPoints)
  return _internal_expirypoints();
}
inline void TriggerF2FPointExpiryCronRequest::_internal_set_expirypoints(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expirypoints_ = value;
}
inline void TriggerF2FPointExpiryCronRequest::set_expirypoints(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expirypoints(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronRequest.expiryPoints)
}

// -------------------------------------------------------------------

// TriggerF2FPointExpiryCronResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void TriggerF2FPointExpiryCronResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus TriggerF2FPointExpiryCronResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus TriggerF2FPointExpiryCronResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronResponse.status)
  return _internal_status();
}
inline void TriggerF2FPointExpiryCronResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void TriggerF2FPointExpiryCronResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.TriggerF2FPointExpiryCronResponse.status)
}

// -------------------------------------------------------------------

// InsurancePurchaseEventRequest

// .farm.nurture.core.contracts.common.ActorID actorId = 1;
inline bool InsurancePurchaseEventRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool InsurancePurchaseEventRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& InsurancePurchaseEventRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& InsurancePurchaseEventRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.actorId)
  return _internal_actorid();
}
inline void InsurancePurchaseEventRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* InsurancePurchaseEventRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* InsurancePurchaseEventRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* InsurancePurchaseEventRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* InsurancePurchaseEventRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.actorId)
  return _internal_mutable_actorid();
}
inline void InsurancePurchaseEventRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.actorId)
}

// int64 userSchemeId = 2;
inline void InsurancePurchaseEventRequest::clear_userschemeid() {
  userschemeid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsurancePurchaseEventRequest::_internal_userschemeid() const {
  return userschemeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsurancePurchaseEventRequest::userschemeid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.userSchemeId)
  return _internal_userschemeid();
}
inline void InsurancePurchaseEventRequest::_internal_set_userschemeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userschemeid_ = value;
}
inline void InsurancePurchaseEventRequest::set_userschemeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userschemeid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.userSchemeId)
}

// .farm.nurture.core.contracts.InsuranceService.ServiceType serviceType = 3;
inline void InsurancePurchaseEventRequest::clear_servicetype() {
  servicetype_ = 0;
}
inline ::farm::nurture::core::contracts::InsuranceService::ServiceType InsurancePurchaseEventRequest::_internal_servicetype() const {
  return static_cast< ::farm::nurture::core::contracts::InsuranceService::ServiceType >(servicetype_);
}
inline ::farm::nurture::core::contracts::InsuranceService::ServiceType InsurancePurchaseEventRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.serviceType)
  return _internal_servicetype();
}
inline void InsurancePurchaseEventRequest::_internal_set_servicetype(::farm::nurture::core::contracts::InsuranceService::ServiceType value) {
  
  servicetype_ = value;
}
inline void InsurancePurchaseEventRequest::set_servicetype(::farm::nurture::core::contracts::InsuranceService::ServiceType value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventRequest.serviceType)
}

// -------------------------------------------------------------------

// InsurancePurchaseEventResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void InsurancePurchaseEventResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus InsurancePurchaseEventResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus InsurancePurchaseEventResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventResponse.status)
  return _internal_status();
}
inline void InsurancePurchaseEventResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void InsurancePurchaseEventResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.InsurancePurchaseEventResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generalgo
}  // namespace workflows
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::farm::nurture::core::contracts::workflows::generalgo::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::workflows::generalgo::Status>() {
  return ::farm::nurture::core::contracts::workflows::generalgo::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
