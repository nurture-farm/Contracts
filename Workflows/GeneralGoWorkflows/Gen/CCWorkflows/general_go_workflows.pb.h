// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Workflows/GeneralGoWorkflows/general_go_workflows.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/entities.pb.h"
#include "Common/headers.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace workflows {
namespace generalgo {
class CreatePartitionsRequest;
class CreatePartitionsRequestDefaultTypeInternal;
extern CreatePartitionsRequestDefaultTypeInternal _CreatePartitionsRequest_default_instance_;
class CreatePartitionsResponse;
class CreatePartitionsResponseDefaultTypeInternal;
extern CreatePartitionsResponseDefaultTypeInternal _CreatePartitionsResponse_default_instance_;
class ExecuteCampaignRequest;
class ExecuteCampaignRequestDefaultTypeInternal;
extern ExecuteCampaignRequestDefaultTypeInternal _ExecuteCampaignRequest_default_instance_;
class ExecuteCampaignResponse;
class ExecuteCampaignResponseDefaultTypeInternal;
extern ExecuteCampaignResponseDefaultTypeInternal _ExecuteCampaignResponse_default_instance_;
class ExecuteUserJourneyCampaignRequest;
class ExecuteUserJourneyCampaignRequestDefaultTypeInternal;
extern ExecuteUserJourneyCampaignRequestDefaultTypeInternal _ExecuteUserJourneyCampaignRequest_default_instance_;
class ExecuteUserJourneyCampaignResponse;
class ExecuteUserJourneyCampaignResponseDefaultTypeInternal;
extern ExecuteUserJourneyCampaignResponseDefaultTypeInternal _ExecuteUserJourneyCampaignResponse_default_instance_;
class HandoverOtpRequest;
class HandoverOtpRequestDefaultTypeInternal;
extern HandoverOtpRequestDefaultTypeInternal _HandoverOtpRequest_default_instance_;
class HandoverOtpResponse;
class HandoverOtpResponseDefaultTypeInternal;
extern HandoverOtpResponseDefaultTypeInternal _HandoverOtpResponse_default_instance_;
}  // namespace generalgo
}  // namespace workflows
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpRequest>(Arena*);
template<> ::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::workflows::generalgo::HandoverOtpResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace workflows {
namespace generalgo {

// ===================================================================

class ExecuteUserJourneyCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest) */ {
 public:
  inline ExecuteUserJourneyCampaignRequest() : ExecuteUserJourneyCampaignRequest(nullptr) {}
  virtual ~ExecuteUserJourneyCampaignRequest();

  ExecuteUserJourneyCampaignRequest(const ExecuteUserJourneyCampaignRequest& from);
  ExecuteUserJourneyCampaignRequest(ExecuteUserJourneyCampaignRequest&& from) noexcept
    : ExecuteUserJourneyCampaignRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteUserJourneyCampaignRequest& operator=(const ExecuteUserJourneyCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteUserJourneyCampaignRequest& operator=(ExecuteUserJourneyCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteUserJourneyCampaignRequest& default_instance();

  static inline const ExecuteUserJourneyCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteUserJourneyCampaignRequest*>(
               &_ExecuteUserJourneyCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecuteUserJourneyCampaignRequest& a, ExecuteUserJourneyCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteUserJourneyCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteUserJourneyCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteUserJourneyCampaignRequest* New() const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignRequest>(nullptr);
  }

  ExecuteUserJourneyCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteUserJourneyCampaignRequest& from);
  void MergeFrom(const ExecuteUserJourneyCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteUserJourneyCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest";
  }
  protected:
  explicit ExecuteUserJourneyCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceIdFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kWaitDurationFieldNumber = 5,
    kCampaignIdFieldNumber = 2,
    kEngagementVertexIdFieldNumber = 3,
    kUnusedFieldNumber = 6,
  };
  // string referenceId = 4;
  void clear_referenceid();
  const std::string& referenceid() const;
  void set_referenceid(const std::string& value);
  void set_referenceid(std::string&& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  std::string* mutable_referenceid();
  std::string* release_referenceid();
  void set_allocated_referenceid(std::string* referenceid);
  private:
  const std::string& _internal_referenceid() const;
  void _internal_set_referenceid(const std::string& value);
  std::string* _internal_mutable_referenceid();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .google.protobuf.Duration waitDuration = 5;
  bool has_waitduration() const;
  private:
  bool _internal_has_waitduration() const;
  public:
  void clear_waitduration();
  const PROTOBUF_NAMESPACE_ID::Duration& waitduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_waitduration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_waitduration();
  void set_allocated_waitduration(PROTOBUF_NAMESPACE_ID::Duration* waitduration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_waitduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_waitduration();
  public:
  void unsafe_arena_set_allocated_waitduration(
      PROTOBUF_NAMESPACE_ID::Duration* waitduration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_waitduration();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 engagementVertexId = 3;
  void clear_engagementvertexid();
  ::PROTOBUF_NAMESPACE_ID::int64 engagementvertexid() const;
  void set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_engagementvertexid() const;
  void _internal_set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unused = 6;
  void clear_unused();
  ::PROTOBUF_NAMESPACE_ID::int64 unused() const;
  void set_unused(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unused() const;
  void _internal_set_unused(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referenceid_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  PROTOBUF_NAMESPACE_ID::Duration* waitduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int64 engagementvertexid_;
  ::PROTOBUF_NAMESPACE_ID::int64 unused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteUserJourneyCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse) */ {
 public:
  inline ExecuteUserJourneyCampaignResponse() : ExecuteUserJourneyCampaignResponse(nullptr) {}
  virtual ~ExecuteUserJourneyCampaignResponse();

  ExecuteUserJourneyCampaignResponse(const ExecuteUserJourneyCampaignResponse& from);
  ExecuteUserJourneyCampaignResponse(ExecuteUserJourneyCampaignResponse&& from) noexcept
    : ExecuteUserJourneyCampaignResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteUserJourneyCampaignResponse& operator=(const ExecuteUserJourneyCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteUserJourneyCampaignResponse& operator=(ExecuteUserJourneyCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteUserJourneyCampaignResponse& default_instance();

  static inline const ExecuteUserJourneyCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteUserJourneyCampaignResponse*>(
               &_ExecuteUserJourneyCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExecuteUserJourneyCampaignResponse& a, ExecuteUserJourneyCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteUserJourneyCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteUserJourneyCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteUserJourneyCampaignResponse* New() const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignResponse>(nullptr);
  }

  ExecuteUserJourneyCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteUserJourneyCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteUserJourneyCampaignResponse& from);
  void MergeFrom(const ExecuteUserJourneyCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteUserJourneyCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse";
  }
  protected:
  explicit ExecuteUserJourneyCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest) */ {
 public:
  inline ExecuteCampaignRequest() : ExecuteCampaignRequest(nullptr) {}
  virtual ~ExecuteCampaignRequest();

  ExecuteCampaignRequest(const ExecuteCampaignRequest& from);
  ExecuteCampaignRequest(ExecuteCampaignRequest&& from) noexcept
    : ExecuteCampaignRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteCampaignRequest& operator=(const ExecuteCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCampaignRequest& operator=(ExecuteCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCampaignRequest& default_instance();

  static inline const ExecuteCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteCampaignRequest*>(
               &_ExecuteCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExecuteCampaignRequest& a, ExecuteCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCampaignRequest* New() const final {
    return CreateMaybeMessage<ExecuteCampaignRequest>(nullptr);
  }

  ExecuteCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCampaignRequest& from);
  void MergeFrom(const ExecuteCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest";
  }
  protected:
  explicit ExecuteCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInactionDurationFieldNumber = 3,
    kCampaignIdFieldNumber = 1,
    kCampaignScheduleTypeFieldNumber = 2,
  };
  // .google.protobuf.Duration inactionDuration = 3;
  bool has_inactionduration() const;
  private:
  bool _internal_has_inactionduration() const;
  public:
  void clear_inactionduration();
  const PROTOBUF_NAMESPACE_ID::Duration& inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_inactionduration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_inactionduration();
  void set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_inactionduration();
  public:
  void unsafe_arena_set_allocated_inactionduration(
      PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_inactionduration();

  // int64 campaign_id = 1;
  void clear_campaign_id();
  ::PROTOBUF_NAMESPACE_ID::int64 campaign_id() const;
  void set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaign_id() const;
  void _internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 2;
  void clear_campaignscheduletype();
  ::farm::nurture::core::contracts::common::CampaignScheduleType campaignscheduletype() const;
  void set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  private:
  ::farm::nurture::core::contracts::common::CampaignScheduleType _internal_campaignscheduletype() const;
  void _internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* inactionduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaign_id_;
  int campaignscheduletype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse) */ {
 public:
  inline ExecuteCampaignResponse() : ExecuteCampaignResponse(nullptr) {}
  virtual ~ExecuteCampaignResponse();

  ExecuteCampaignResponse(const ExecuteCampaignResponse& from);
  ExecuteCampaignResponse(ExecuteCampaignResponse&& from) noexcept
    : ExecuteCampaignResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteCampaignResponse& operator=(const ExecuteCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCampaignResponse& operator=(ExecuteCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCampaignResponse& default_instance();

  static inline const ExecuteCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteCampaignResponse*>(
               &_ExecuteCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteCampaignResponse& a, ExecuteCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCampaignResponse* New() const final {
    return CreateMaybeMessage<ExecuteCampaignResponse>(nullptr);
  }

  ExecuteCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCampaignResponse& from);
  void MergeFrom(const ExecuteCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse";
  }
  protected:
  explicit ExecuteCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest) */ {
 public:
  inline CreatePartitionsRequest() : CreatePartitionsRequest(nullptr) {}
  virtual ~CreatePartitionsRequest();

  CreatePartitionsRequest(const CreatePartitionsRequest& from);
  CreatePartitionsRequest(CreatePartitionsRequest&& from) noexcept
    : CreatePartitionsRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionsRequest& operator=(const CreatePartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionsRequest& operator=(CreatePartitionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionsRequest& default_instance();

  static inline const CreatePartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionsRequest*>(
               &_CreatePartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreatePartitionsRequest& a, CreatePartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionsRequest* New() const final {
    return CreateMaybeMessage<CreatePartitionsRequest>(nullptr);
  }

  CreatePartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionsRequest& from);
  void MergeFrom(const CreatePartitionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest";
  }
  protected:
  explicit CreatePartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kDatabaseNameFieldNumber = 2,
    kBucketFieldNumber = 3,
    kNumberOfDaysFieldNumber = 4,
  };
  // string tableName = 1;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // string databaseName = 2;
  void clear_databasename();
  const std::string& databasename() const;
  void set_databasename(const std::string& value);
  void set_databasename(std::string&& value);
  void set_databasename(const char* value);
  void set_databasename(const char* value, size_t size);
  std::string* mutable_databasename();
  std::string* release_databasename();
  void set_allocated_databasename(std::string* databasename);
  private:
  const std::string& _internal_databasename() const;
  void _internal_set_databasename(const std::string& value);
  std::string* _internal_mutable_databasename();
  public:

  // string bucket = 3;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // int64 numberOfDays = 4;
  void clear_numberofdays();
  ::PROTOBUF_NAMESPACE_ID::int64 numberofdays() const;
  void set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_numberofdays() const;
  void _internal_set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr databasename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofdays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse) */ {
 public:
  inline CreatePartitionsResponse() : CreatePartitionsResponse(nullptr) {}
  virtual ~CreatePartitionsResponse();

  CreatePartitionsResponse(const CreatePartitionsResponse& from);
  CreatePartitionsResponse(CreatePartitionsResponse&& from) noexcept
    : CreatePartitionsResponse() {
    *this = ::std::move(from);
  }

  inline CreatePartitionsResponse& operator=(const CreatePartitionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionsResponse& operator=(CreatePartitionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionsResponse& default_instance();

  static inline const CreatePartitionsResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionsResponse*>(
               &_CreatePartitionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreatePartitionsResponse& a, CreatePartitionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionsResponse* New() const final {
    return CreateMaybeMessage<CreatePartitionsResponse>(nullptr);
  }

  CreatePartitionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionsResponse& from);
  void MergeFrom(const CreatePartitionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse";
  }
  protected:
  explicit CreatePartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class HandoverOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest) */ {
 public:
  inline HandoverOtpRequest() : HandoverOtpRequest(nullptr) {}
  virtual ~HandoverOtpRequest();

  HandoverOtpRequest(const HandoverOtpRequest& from);
  HandoverOtpRequest(HandoverOtpRequest&& from) noexcept
    : HandoverOtpRequest() {
    *this = ::std::move(from);
  }

  inline HandoverOtpRequest& operator=(const HandoverOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverOtpRequest& operator=(HandoverOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandoverOtpRequest& default_instance();

  static inline const HandoverOtpRequest* internal_default_instance() {
    return reinterpret_cast<const HandoverOtpRequest*>(
               &_HandoverOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HandoverOtpRequest& a, HandoverOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandoverOtpRequest* New() const final {
    return CreateMaybeMessage<HandoverOtpRequest>(nullptr);
  }

  HandoverOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandoverOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandoverOtpRequest& from);
  void MergeFrom(const HandoverOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest";
  }
  protected:
  explicit HandoverOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtpFieldNumber = 1,
    kMobileNumberFieldNumber = 3,
    kActorDetailsFieldNumber = 2,
  };
  // string otp = 1;
  void clear_otp();
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);
  private:
  const std::string& _internal_otp() const;
  void _internal_set_otp(const std::string& value);
  std::string* _internal_mutable_otp();
  public:

  // string mobileNumber = 3;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.ActorID actorDetails = 2;
  bool has_actordetails() const;
  private:
  bool _internal_has_actordetails() const;
  public:
  void clear_actordetails();
  const ::farm::nurture::core::contracts::common::ActorID& actordetails() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actordetails();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actordetails();
  void set_allocated_actordetails(::farm::nurture::core::contracts::common::ActorID* actordetails);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actordetails() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actordetails();
  public:
  void unsafe_arena_set_allocated_actordetails(
      ::farm::nurture::core::contracts::common::ActorID* actordetails);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actordetails();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::ActorID* actordetails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// -------------------------------------------------------------------

class HandoverOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse) */ {
 public:
  inline HandoverOtpResponse() : HandoverOtpResponse(nullptr) {}
  virtual ~HandoverOtpResponse();

  HandoverOtpResponse(const HandoverOtpResponse& from);
  HandoverOtpResponse(HandoverOtpResponse&& from) noexcept
    : HandoverOtpResponse() {
    *this = ::std::move(from);
  }

  inline HandoverOtpResponse& operator=(const HandoverOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverOtpResponse& operator=(HandoverOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandoverOtpResponse& default_instance();

  static inline const HandoverOtpResponse* internal_default_instance() {
    return reinterpret_cast<const HandoverOtpResponse*>(
               &_HandoverOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HandoverOtpResponse& a, HandoverOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandoverOtpResponse* New() const final {
    return CreateMaybeMessage<HandoverOtpResponse>(nullptr);
  }

  HandoverOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandoverOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandoverOtpResponse& from);
  void MergeFrom(const HandoverOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse";
  }
  protected:
  explicit HandoverOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto);
    return ::descriptor_table_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecuteUserJourneyCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ExecuteUserJourneyCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ExecuteUserJourneyCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ExecuteUserJourneyCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ExecuteUserJourneyCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ExecuteUserJourneyCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ExecuteUserJourneyCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void ExecuteUserJourneyCampaignRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.campaignId)
  return _internal_campaignid();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void ExecuteUserJourneyCampaignRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.campaignId)
}

// int64 engagementVertexId = 3;
inline void ExecuteUserJourneyCampaignRequest::clear_engagementvertexid() {
  engagementvertexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::_internal_engagementvertexid() const {
  return engagementvertexid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::engagementvertexid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.engagementVertexId)
  return _internal_engagementvertexid();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  engagementvertexid_ = value;
}
inline void ExecuteUserJourneyCampaignRequest::set_engagementvertexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_engagementvertexid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.engagementVertexId)
}

// string referenceId = 4;
inline void ExecuteUserJourneyCampaignRequest::clear_referenceid() {
  referenceid_.ClearToEmpty();
}
inline const std::string& ExecuteUserJourneyCampaignRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return _internal_referenceid();
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const std::string& value) {
  _internal_set_referenceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline std::string* ExecuteUserJourneyCampaignRequest::mutable_referenceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return _internal_mutable_referenceid();
}
inline const std::string& ExecuteUserJourneyCampaignRequest::_internal_referenceid() const {
  return referenceid_.Get();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_referenceid(const std::string& value) {
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(std::string&& value) {
  
  referenceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline void ExecuteUserJourneyCampaignRequest::set_referenceid(const char* value,
    size_t size) {
  
  referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}
inline std::string* ExecuteUserJourneyCampaignRequest::_internal_mutable_referenceid() {
  
  return referenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteUserJourneyCampaignRequest::release_referenceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
  return referenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_referenceid(std::string* referenceid) {
  if (referenceid != nullptr) {
    
  } else {
    
  }
  referenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referenceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.referenceId)
}

// .google.protobuf.Duration waitDuration = 5;
inline bool ExecuteUserJourneyCampaignRequest::_internal_has_waitduration() const {
  return this != internal_default_instance() && waitduration_ != nullptr;
}
inline bool ExecuteUserJourneyCampaignRequest::has_waitduration() const {
  return _internal_has_waitduration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteUserJourneyCampaignRequest::_internal_waitduration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = waitduration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteUserJourneyCampaignRequest::waitduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  return _internal_waitduration();
}
inline void ExecuteUserJourneyCampaignRequest::unsafe_arena_set_allocated_waitduration(
    PROTOBUF_NAMESPACE_ID::Duration* waitduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration_);
  }
  waitduration_ = waitduration;
  if (waitduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::release_waitduration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = waitduration_;
  waitduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::unsafe_arena_release_waitduration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = waitduration_;
  waitduration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::_internal_mutable_waitduration() {
  
  if (waitduration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    waitduration_ = p;
  }
  return waitduration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteUserJourneyCampaignRequest::mutable_waitduration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
  return _internal_mutable_waitduration();
}
inline void ExecuteUserJourneyCampaignRequest::set_allocated_waitduration(PROTOBUF_NAMESPACE_ID::Duration* waitduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration_);
  }
  if (waitduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waitduration)->GetArena();
    if (message_arena != submessage_arena) {
      waitduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waitduration, submessage_arena);
    }
    
  } else {
    
  }
  waitduration_ = waitduration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.waitDuration)
}

// int64 unused = 6;
inline void ExecuteUserJourneyCampaignRequest::clear_unused() {
  unused_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::_internal_unused() const {
  return unused_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteUserJourneyCampaignRequest::unused() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.unused)
  return _internal_unused();
}
inline void ExecuteUserJourneyCampaignRequest::_internal_set_unused(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unused_ = value;
}
inline void ExecuteUserJourneyCampaignRequest::set_unused(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unused(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignRequest.unused)
}

// -------------------------------------------------------------------

// ExecuteUserJourneyCampaignResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ExecuteUserJourneyCampaignResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteUserJourneyCampaignResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteUserJourneyCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse.status)
  return _internal_status();
}
inline void ExecuteUserJourneyCampaignResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ExecuteUserJourneyCampaignResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteUserJourneyCampaignResponse.status)
}

// -------------------------------------------------------------------

// ExecuteCampaignRequest

// int64 campaign_id = 1;
inline void ExecuteCampaignRequest::clear_campaign_id() {
  campaign_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteCampaignRequest::_internal_campaign_id() const {
  return campaign_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecuteCampaignRequest::campaign_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaign_id)
  return _internal_campaign_id();
}
inline void ExecuteCampaignRequest::_internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaign_id_ = value;
}
inline void ExecuteCampaignRequest::set_campaign_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaign_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaign_id)
}

// .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 2;
inline void ExecuteCampaignRequest::clear_campaignscheduletype() {
  campaignscheduletype_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType ExecuteCampaignRequest::_internal_campaignscheduletype() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignScheduleType >(campaignscheduletype_);
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType ExecuteCampaignRequest::campaignscheduletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaignScheduleType)
  return _internal_campaignscheduletype();
}
inline void ExecuteCampaignRequest::_internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  
  campaignscheduletype_ = value;
}
inline void ExecuteCampaignRequest::set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  _internal_set_campaignscheduletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.campaignScheduleType)
}

// .google.protobuf.Duration inactionDuration = 3;
inline bool ExecuteCampaignRequest::_internal_has_inactionduration() const {
  return this != internal_default_instance() && inactionduration_ != nullptr;
}
inline bool ExecuteCampaignRequest::has_inactionduration() const {
  return _internal_has_inactionduration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteCampaignRequest::_internal_inactionduration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = inactionduration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ExecuteCampaignRequest::inactionduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  return _internal_inactionduration();
}
inline void ExecuteCampaignRequest::unsafe_arena_set_allocated_inactionduration(
    PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  inactionduration_ = inactionduration;
  if (inactionduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::release_inactionduration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::unsafe_arena_release_inactionduration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::_internal_mutable_inactionduration() {
  
  if (inactionduration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    inactionduration_ = p;
  }
  return inactionduration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ExecuteCampaignRequest::mutable_inactionduration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
  return _internal_mutable_inactionduration();
}
inline void ExecuteCampaignRequest::set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  if (inactionduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration)->GetArena();
    if (message_arena != submessage_arena) {
      inactionduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactionduration, submessage_arena);
    }
    
  } else {
    
  }
  inactionduration_ = inactionduration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignRequest.inactionDuration)
}

// -------------------------------------------------------------------

// ExecuteCampaignResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ExecuteCampaignResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteCampaignResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ExecuteCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse.status)
  return _internal_status();
}
inline void ExecuteCampaignResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ExecuteCampaignResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.ExecuteCampaignResponse.status)
}

// -------------------------------------------------------------------

// CreatePartitionsRequest

// string tableName = 1;
inline void CreatePartitionsRequest::clear_tablename() {
  tablename_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::tablename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return _internal_tablename();
}
inline void CreatePartitionsRequest::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline std::string* CreatePartitionsRequest::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& CreatePartitionsRequest::_internal_tablename() const {
  return tablename_.Get();
}
inline void CreatePartitionsRequest::_internal_set_tablename(const std::string& value) {
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_tablename(std::string&& value) {
  
  tablename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline void CreatePartitionsRequest::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline void CreatePartitionsRequest::set_tablename(const char* value,
    size_t size) {
  
  tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_tablename() {
  
  return tablename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_tablename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
  return tablename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.tableName)
}

// string databaseName = 2;
inline void CreatePartitionsRequest::clear_databasename() {
  databasename_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::databasename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return _internal_databasename();
}
inline void CreatePartitionsRequest::set_databasename(const std::string& value) {
  _internal_set_databasename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline std::string* CreatePartitionsRequest::mutable_databasename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return _internal_mutable_databasename();
}
inline const std::string& CreatePartitionsRequest::_internal_databasename() const {
  return databasename_.Get();
}
inline void CreatePartitionsRequest::_internal_set_databasename(const std::string& value) {
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_databasename(std::string&& value) {
  
  databasename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline void CreatePartitionsRequest::set_databasename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline void CreatePartitionsRequest::set_databasename(const char* value,
    size_t size) {
  
  databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_databasename() {
  
  return databasename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_databasename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
  return databasename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_databasename(std::string* databasename) {
  if (databasename != nullptr) {
    
  } else {
    
  }
  databasename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), databasename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.databaseName)
}

// string bucket = 3;
inline void CreatePartitionsRequest::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& CreatePartitionsRequest::bucket() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return _internal_bucket();
}
inline void CreatePartitionsRequest::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline std::string* CreatePartitionsRequest::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& CreatePartitionsRequest::_internal_bucket() const {
  return bucket_.Get();
}
inline void CreatePartitionsRequest::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreatePartitionsRequest::set_bucket(std::string&& value) {
  
  bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline void CreatePartitionsRequest::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline void CreatePartitionsRequest::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}
inline std::string* CreatePartitionsRequest::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreatePartitionsRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionsRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.bucket)
}

// int64 numberOfDays = 4;
inline void CreatePartitionsRequest::clear_numberofdays() {
  numberofdays_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionsRequest::_internal_numberofdays() const {
  return numberofdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionsRequest::numberofdays() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.numberOfDays)
  return _internal_numberofdays();
}
inline void CreatePartitionsRequest::_internal_set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numberofdays_ = value;
}
inline void CreatePartitionsRequest::set_numberofdays(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_numberofdays(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsRequest.numberOfDays)
}

// -------------------------------------------------------------------

// CreatePartitionsResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void CreatePartitionsResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus CreatePartitionsResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus CreatePartitionsResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse.status)
  return _internal_status();
}
inline void CreatePartitionsResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void CreatePartitionsResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.CreatePartitionsResponse.status)
}

// -------------------------------------------------------------------

// HandoverOtpRequest

// string otp = 1;
inline void HandoverOtpRequest::clear_otp() {
  otp_.ClearToEmpty();
}
inline const std::string& HandoverOtpRequest::otp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return _internal_otp();
}
inline void HandoverOtpRequest::set_otp(const std::string& value) {
  _internal_set_otp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline std::string* HandoverOtpRequest::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return _internal_mutable_otp();
}
inline const std::string& HandoverOtpRequest::_internal_otp() const {
  return otp_.Get();
}
inline void HandoverOtpRequest::_internal_set_otp(const std::string& value) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandoverOtpRequest::set_otp(std::string&& value) {
  
  otp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline void HandoverOtpRequest::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline void HandoverOtpRequest::set_otp(const char* value,
    size_t size) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}
inline std::string* HandoverOtpRequest::_internal_mutable_otp() {
  
  return otp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandoverOtpRequest::release_otp() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
  return otp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandoverOtpRequest::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.otp)
}

// .farm.nurture.core.contracts.common.ActorID actorDetails = 2;
inline bool HandoverOtpRequest::_internal_has_actordetails() const {
  return this != internal_default_instance() && actordetails_ != nullptr;
}
inline bool HandoverOtpRequest::has_actordetails() const {
  return _internal_has_actordetails();
}
inline const ::farm::nurture::core::contracts::common::ActorID& HandoverOtpRequest::_internal_actordetails() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actordetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& HandoverOtpRequest::actordetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  return _internal_actordetails();
}
inline void HandoverOtpRequest::unsafe_arena_set_allocated_actordetails(
    ::farm::nurture::core::contracts::common::ActorID* actordetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails_);
  }
  actordetails_ = actordetails;
  if (actordetails) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::release_actordetails() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actordetails_;
  actordetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::unsafe_arena_release_actordetails() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actordetails_;
  actordetails_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::_internal_mutable_actordetails() {
  
  if (actordetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actordetails_ = p;
  }
  return actordetails_;
}
inline ::farm::nurture::core::contracts::common::ActorID* HandoverOtpRequest::mutable_actordetails() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
  return _internal_mutable_actordetails();
}
inline void HandoverOtpRequest::set_allocated_actordetails(::farm::nurture::core::contracts::common::ActorID* actordetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails_);
  }
  if (actordetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actordetails)->GetArena();
    if (message_arena != submessage_arena) {
      actordetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actordetails, submessage_arena);
    }
    
  } else {
    
  }
  actordetails_ = actordetails;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.actorDetails)
}

// string mobileNumber = 3;
inline void HandoverOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& HandoverOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void HandoverOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline std::string* HandoverOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& HandoverOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void HandoverOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandoverOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline void HandoverOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline void HandoverOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}
inline std::string* HandoverOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandoverOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandoverOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpRequest.mobileNumber)
}

// -------------------------------------------------------------------

// HandoverOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void HandoverOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus HandoverOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus HandoverOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse.status)
  return _internal_status();
}
inline void HandoverOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void HandoverOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.workflows.generalgo.HandoverOtpResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generalgo
}  // namespace workflows
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto
