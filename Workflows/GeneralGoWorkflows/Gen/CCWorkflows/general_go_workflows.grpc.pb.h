// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Workflows/GeneralGoWorkflows/general_go_workflows.proto
#ifndef GRPC_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto__INCLUDED
#define GRPC_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto__INCLUDED

#include "Workflows/GeneralGoWorkflows/general_go_workflows.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace workflows {
namespace generalgo {

class GeneralGoWorkflows final {
 public:
  static constexpr char const* service_full_name() {
    return "farm.nurture.core.contracts.workflows.generalgo.GeneralGoWorkflows";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>> AsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>>(AsyncExecuteCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>> PrepareAsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>>(PrepareAsyncExecuteCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>> AsyncExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>>(AsyncExecuteUserJourneyCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>> PrepareAsyncExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>>(PrepareAsyncExecuteUserJourneyCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>> AsyncCreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>>(AsyncCreatePartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>> PrepareAsyncCreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>>(PrepareAsyncCreatePartitionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* AsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* PrepareAsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* AsyncExecuteUserJourneyCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* PrepareAsyncExecuteUserJourneyCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* AsyncCreatePartitionsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* PrepareAsyncCreatePartitionsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>> AsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>>(AsyncExecuteCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>> PrepareAsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>>(PrepareAsyncExecuteCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>> AsyncExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>>(AsyncExecuteUserJourneyCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>> PrepareAsyncExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>>(PrepareAsyncExecuteUserJourneyCampaignRaw(context, request, cq));
    }
    ::grpc::Status CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>> AsyncCreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>>(AsyncCreatePartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>> PrepareAsyncCreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>>(PrepareAsyncCreatePartitionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteUserJourneyCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePartitions(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* AsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* PrepareAsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* AsyncExecuteUserJourneyCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* PrepareAsyncExecuteUserJourneyCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* AsyncCreatePartitionsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* PrepareAsyncCreatePartitionsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteUserJourneyCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePartitions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExecuteCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response);
    virtual ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response);
    virtual ::grpc::Status CreatePartitions(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUserJourneyCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePartitions(::grpc::ServerContext* context, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteCampaign<WithAsyncMethod_ExecuteUserJourneyCampaign<WithAsyncMethod_CreatePartitions<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* response) { return this->ExecuteCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* response) { return this->ExecuteUserJourneyCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteUserJourneyCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUserJourneyCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* request, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* response) { return this->CreatePartitions(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePartitions(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteCampaign<WithCallbackMethod_ExecuteUserJourneyCampaign<WithCallbackMethod_CreatePartitions<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUserJourneyCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePartitions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteUserJourneyCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUserJourneyCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePartitions(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* streamer) {
                       return this->StreamedExecuteCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignRequest,::farm::nurture::core::contracts::workflows::generalgo::ExecuteCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteUserJourneyCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteUserJourneyCampaign() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* streamer) {
                       return this->StreamedExecuteUserJourneyCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteUserJourneyCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteUserJourneyCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteUserJourneyCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignRequest,::farm::nurture::core::contracts::workflows::generalgo::ExecuteUserJourneyCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePartitions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* streamer) {
                       return this->StreamedCreatePartitions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePartitions(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest* /*request*/, ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePartitions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsRequest,::farm::nurture::core::contracts::workflows::generalgo::CreatePartitionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteCampaign<WithStreamedUnaryMethod_ExecuteUserJourneyCampaign<WithStreamedUnaryMethod_CreatePartitions<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteCampaign<WithStreamedUnaryMethod_ExecuteUserJourneyCampaign<WithStreamedUnaryMethod_CreatePartitions<Service > > > StreamedService;
};

}  // namespace generalgo
}  // namespace workflows
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm


#endif  // GRPC_Workflows_2fGeneralGoWorkflows_2fgeneral_5fgo_5fworkflows_2eproto__INCLUDED
