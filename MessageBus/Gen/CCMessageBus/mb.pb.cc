// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBus/mb.proto

#include "MessageBus/mb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2futils_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStatusResult_Common_2futils_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace mb {
class MessageBusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBusRequest> _instance;
} _MessageBusRequest_default_instance_;
class MessageBusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBusResponse> _instance;
} _MessageBusResponse_default_instance_;
}  // namespace mb
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_MessageBusRequest_MessageBus_2fmb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::mb::_MessageBusRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::mb::MessageBusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageBusRequest_MessageBus_2fmb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageBusRequest_MessageBus_2fmb_2eproto}, {}};

static void InitDefaultsscc_info_MessageBusResponse_MessageBus_2fmb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::mb::_MessageBusResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::mb::MessageBusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageBusResponse_MessageBus_2fmb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageBusResponse_MessageBus_2fmb_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MessageBus_2fmb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MessageBus_2fmb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MessageBus_2fmb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MessageBus_2fmb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusRequest, trace_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusRequest, tenant_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusRequest, message_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusRequest, storage_filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::mb::MessageBusResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::mb::MessageBusRequest)},
  { 9, -1, sizeof(::farm::nurture::core::contracts::mb::MessageBusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::mb::_MessageBusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::mb::_MessageBusResponse_default_instance_),
};

const char descriptor_table_protodef_MessageBus_2fmb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MessageBus/mb.proto\022\036farm.nurture.core"
  ".contracts.mb\032\022Common/utils.proto\"c\n\021Mes"
  "sageBusRequest\022\020\n\010trace_id\030\001 \001(\t\022\021\n\ttena"
  "nt_id\030\002 \001(\t\022\017\n\007message\030\003 \001(\014\022\030\n\020storage_"
  "filepath\030\004 \001(\t\"]\n\022MessageBusResponse\022G\n\006"
  "status\030\001 \001(\01327.farm.nurture.core.contrac"
  "ts.common.RequestStatusResult2}\n\nMessage"
  "Bus\022o\n\006Upload\0221.farm.nurture.core.contra"
  "cts.mb.MessageBusRequest\0322.farm.nurture."
  "core.contracts.mb.MessageBusResponseBO\n\036"
  "farm.nurture.core.contracts.mbP\001Z+code.n"
  "urture.farm/Core/Contracts/MessageBusb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MessageBus_2fmb_2eproto_deps[1] = {
  &::descriptor_table_Common_2futils_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MessageBus_2fmb_2eproto_sccs[2] = {
  &scc_info_MessageBusRequest_MessageBus_2fmb_2eproto.base,
  &scc_info_MessageBusResponse_MessageBus_2fmb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MessageBus_2fmb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageBus_2fmb_2eproto = {
  false, false, descriptor_table_protodef_MessageBus_2fmb_2eproto, "MessageBus/mb.proto", 485,
  &descriptor_table_MessageBus_2fmb_2eproto_once, descriptor_table_MessageBus_2fmb_2eproto_sccs, descriptor_table_MessageBus_2fmb_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_MessageBus_2fmb_2eproto::offsets,
  file_level_metadata_MessageBus_2fmb_2eproto, 2, file_level_enum_descriptors_MessageBus_2fmb_2eproto, file_level_service_descriptors_MessageBus_2fmb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MessageBus_2fmb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MessageBus_2fmb_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace mb {

// ===================================================================

class MessageBusRequest::_Internal {
 public:
};

MessageBusRequest::MessageBusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.mb.MessageBusRequest)
}
MessageBusRequest::MessageBusRequest(const MessageBusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  tenant_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenant_id().empty()) {
    tenant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenant_id(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  storage_filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storage_filepath().empty()) {
    storage_filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storage_filepath(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.mb.MessageBusRequest)
}

void MessageBusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBusRequest_MessageBus_2fmb_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenant_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageBusRequest::~MessageBusRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.mb.MessageBusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageBusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenant_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageBusRequest::ArenaDtor(void* object) {
  MessageBusRequest* _this = reinterpret_cast< MessageBusRequest* >(object);
  (void)_this;
}
void MessageBusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageBusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBusRequest& MessageBusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBusRequest_MessageBus_2fmb_2eproto.base);
  return *internal_default_instance();
}


void MessageBusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmpty();
  tenant_id_.ClearToEmpty();
  message_.ClearToEmpty();
  storage_filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageBusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.mb.MessageBusRequest.trace_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tenant_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tenant_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string storage_filepath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_storage_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.mb.MessageBusRequest.trace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // string tenant_id = 2;
  if (this->tenant_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenant_id().data(), static_cast<int>(this->_internal_tenant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tenant_id(), target);
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // string storage_filepath = 4;
  if (this->storage_filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storage_filepath().data(), static_cast<int>(this->_internal_storage_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_storage_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.mb.MessageBusRequest)
  return target;
}

size_t MessageBusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string tenant_id = 2;
  if (this->tenant_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenant_id());
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // string storage_filepath = 4;
  if (this->storage_filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storage_filepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.mb.MessageBusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.mb.MessageBusRequest)
    MergeFrom(*source);
  }
}

void MessageBusRequest::MergeFrom(const MessageBusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.tenant_id().size() > 0) {
    _internal_set_tenant_id(from._internal_tenant_id());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.storage_filepath().size() > 0) {
    _internal_set_storage_filepath(from._internal_storage_filepath());
  }
}

void MessageBusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBusRequest::CopyFrom(const MessageBusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.mb.MessageBusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBusRequest::IsInitialized() const {
  return true;
}

void MessageBusRequest::InternalSwap(MessageBusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tenant_id_.Swap(&other->tenant_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_filepath_.Swap(&other->storage_filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageBusResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const MessageBusResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
MessageBusResponse::_Internal::status(const MessageBusResponse* msg) {
  return *msg->status_;
}
void MessageBusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MessageBusResponse::MessageBusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.mb.MessageBusResponse)
}
MessageBusResponse::MessageBusResponse(const MessageBusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.mb.MessageBusResponse)
}

void MessageBusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBusResponse_MessageBus_2fmb_2eproto.base);
  status_ = nullptr;
}

MessageBusResponse::~MessageBusResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.mb.MessageBusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageBusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MessageBusResponse::ArenaDtor(void* object) {
  MessageBusResponse* _this = reinterpret_cast< MessageBusResponse* >(object);
  (void)_this;
}
void MessageBusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageBusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBusResponse& MessageBusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBusResponse_MessageBus_2fmb_2eproto.base);
  return *internal_default_instance();
}


void MessageBusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageBusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.mb.MessageBusResponse)
  return target;
}

size_t MessageBusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.mb.MessageBusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.mb.MessageBusResponse)
    MergeFrom(*source);
  }
}

void MessageBusResponse::MergeFrom(const MessageBusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
}

void MessageBusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBusResponse::CopyFrom(const MessageBusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.mb.MessageBusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBusResponse::IsInitialized() const {
  return true;
}

void MessageBusResponse::InternalSwap(MessageBusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mb
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::mb::MessageBusRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::mb::MessageBusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::mb::MessageBusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::mb::MessageBusResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::mb::MessageBusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::mb::MessageBusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
