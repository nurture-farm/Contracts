// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBus/mb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageBus_2fmb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageBus_2fmb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/utils.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageBus_2fmb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageBus_2fmb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageBus_2fmb_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace mb {
class MessageBusRequest;
class MessageBusRequestDefaultTypeInternal;
extern MessageBusRequestDefaultTypeInternal _MessageBusRequest_default_instance_;
class MessageBusResponse;
class MessageBusResponseDefaultTypeInternal;
extern MessageBusResponseDefaultTypeInternal _MessageBusResponse_default_instance_;
}  // namespace mb
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::mb::MessageBusRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::mb::MessageBusRequest>(Arena*);
template<> ::farm::nurture::core::contracts::mb::MessageBusResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::mb::MessageBusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace mb {

// ===================================================================

class MessageBusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.mb.MessageBusRequest) */ {
 public:
  inline MessageBusRequest() : MessageBusRequest(nullptr) {}
  virtual ~MessageBusRequest();

  MessageBusRequest(const MessageBusRequest& from);
  MessageBusRequest(MessageBusRequest&& from) noexcept
    : MessageBusRequest() {
    *this = ::std::move(from);
  }

  inline MessageBusRequest& operator=(const MessageBusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBusRequest& operator=(MessageBusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBusRequest& default_instance();

  static inline const MessageBusRequest* internal_default_instance() {
    return reinterpret_cast<const MessageBusRequest*>(
               &_MessageBusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageBusRequest& a, MessageBusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBusRequest* New() const final {
    return CreateMaybeMessage<MessageBusRequest>(nullptr);
  }

  MessageBusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBusRequest& from);
  void MergeFrom(const MessageBusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.mb.MessageBusRequest";
  }
  protected:
  explicit MessageBusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBus_2fmb_2eproto);
    return ::descriptor_table_MessageBus_2fmb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kTenantIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kStorageFilepathFieldNumber = 4,
  };
  // string trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // string tenant_id = 2;
  void clear_tenant_id();
  const std::string& tenant_id() const;
  void set_tenant_id(const std::string& value);
  void set_tenant_id(std::string&& value);
  void set_tenant_id(const char* value);
  void set_tenant_id(const char* value, size_t size);
  std::string* mutable_tenant_id();
  std::string* release_tenant_id();
  void set_allocated_tenant_id(std::string* tenant_id);
  private:
  const std::string& _internal_tenant_id() const;
  void _internal_set_tenant_id(const std::string& value);
  std::string* _internal_mutable_tenant_id();
  public:

  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string storage_filepath = 4;
  void clear_storage_filepath();
  const std::string& storage_filepath() const;
  void set_storage_filepath(const std::string& value);
  void set_storage_filepath(std::string&& value);
  void set_storage_filepath(const char* value);
  void set_storage_filepath(const char* value, size_t size);
  std::string* mutable_storage_filepath();
  std::string* release_storage_filepath();
  void set_allocated_storage_filepath(std::string* storage_filepath);
  private:
  const std::string& _internal_storage_filepath() const;
  void _internal_set_storage_filepath(const std::string& value);
  std::string* _internal_mutable_storage_filepath();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.mb.MessageBusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_filepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBus_2fmb_2eproto;
};
// -------------------------------------------------------------------

class MessageBusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.mb.MessageBusResponse) */ {
 public:
  inline MessageBusResponse() : MessageBusResponse(nullptr) {}
  virtual ~MessageBusResponse();

  MessageBusResponse(const MessageBusResponse& from);
  MessageBusResponse(MessageBusResponse&& from) noexcept
    : MessageBusResponse() {
    *this = ::std::move(from);
  }

  inline MessageBusResponse& operator=(const MessageBusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBusResponse& operator=(MessageBusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBusResponse& default_instance();

  static inline const MessageBusResponse* internal_default_instance() {
    return reinterpret_cast<const MessageBusResponse*>(
               &_MessageBusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageBusResponse& a, MessageBusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBusResponse* New() const final {
    return CreateMaybeMessage<MessageBusResponse>(nullptr);
  }

  MessageBusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBusResponse& from);
  void MergeFrom(const MessageBusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.mb.MessageBusResponse";
  }
  protected:
  explicit MessageBusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBus_2fmb_2eproto);
    return ::descriptor_table_MessageBus_2fmb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.mb.MessageBusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBus_2fmb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageBusRequest

// string trace_id = 1;
inline void MessageBusRequest::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& MessageBusRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
  return _internal_trace_id();
}
inline void MessageBusRequest::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
}
inline std::string* MessageBusRequest::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& MessageBusRequest::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void MessageBusRequest::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageBusRequest::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
}
inline void MessageBusRequest::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
}
inline void MessageBusRequest::set_trace_id(const char* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
}
inline std::string* MessageBusRequest::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageBusRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageBusRequest::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.mb.MessageBusRequest.trace_id)
}

// string tenant_id = 2;
inline void MessageBusRequest::clear_tenant_id() {
  tenant_id_.ClearToEmpty();
}
inline const std::string& MessageBusRequest::tenant_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
  return _internal_tenant_id();
}
inline void MessageBusRequest::set_tenant_id(const std::string& value) {
  _internal_set_tenant_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
}
inline std::string* MessageBusRequest::mutable_tenant_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
  return _internal_mutable_tenant_id();
}
inline const std::string& MessageBusRequest::_internal_tenant_id() const {
  return tenant_id_.Get();
}
inline void MessageBusRequest::_internal_set_tenant_id(const std::string& value) {
  
  tenant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageBusRequest::set_tenant_id(std::string&& value) {
  
  tenant_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
}
inline void MessageBusRequest::set_tenant_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tenant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
}
inline void MessageBusRequest::set_tenant_id(const char* value,
    size_t size) {
  
  tenant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
}
inline std::string* MessageBusRequest::_internal_mutable_tenant_id() {
  
  return tenant_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageBusRequest::release_tenant_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
  return tenant_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageBusRequest::set_allocated_tenant_id(std::string* tenant_id) {
  if (tenant_id != nullptr) {
    
  } else {
    
  }
  tenant_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tenant_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.mb.MessageBusRequest.tenant_id)
}

// bytes message = 3;
inline void MessageBusRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& MessageBusRequest::message() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.mb.MessageBusRequest.message)
  return _internal_message();
}
inline void MessageBusRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.mb.MessageBusRequest.message)
}
inline std::string* MessageBusRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.mb.MessageBusRequest.message)
  return _internal_mutable_message();
}
inline const std::string& MessageBusRequest::_internal_message() const {
  return message_.Get();
}
inline void MessageBusRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageBusRequest::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.mb.MessageBusRequest.message)
}
inline void MessageBusRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.mb.MessageBusRequest.message)
}
inline void MessageBusRequest::set_message(const void* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.mb.MessageBusRequest.message)
}
inline std::string* MessageBusRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageBusRequest::release_message() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.mb.MessageBusRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageBusRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.mb.MessageBusRequest.message)
}

// string storage_filepath = 4;
inline void MessageBusRequest::clear_storage_filepath() {
  storage_filepath_.ClearToEmpty();
}
inline const std::string& MessageBusRequest::storage_filepath() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
  return _internal_storage_filepath();
}
inline void MessageBusRequest::set_storage_filepath(const std::string& value) {
  _internal_set_storage_filepath(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
}
inline std::string* MessageBusRequest::mutable_storage_filepath() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
  return _internal_mutable_storage_filepath();
}
inline const std::string& MessageBusRequest::_internal_storage_filepath() const {
  return storage_filepath_.Get();
}
inline void MessageBusRequest::_internal_set_storage_filepath(const std::string& value) {
  
  storage_filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageBusRequest::set_storage_filepath(std::string&& value) {
  
  storage_filepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
}
inline void MessageBusRequest::set_storage_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
}
inline void MessageBusRequest::set_storage_filepath(const char* value,
    size_t size) {
  
  storage_filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
}
inline std::string* MessageBusRequest::_internal_mutable_storage_filepath() {
  
  return storage_filepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageBusRequest::release_storage_filepath() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
  return storage_filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageBusRequest::set_allocated_storage_filepath(std::string* storage_filepath) {
  if (storage_filepath != nullptr) {
    
  } else {
    
  }
  storage_filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.mb.MessageBusRequest.storage_filepath)
}

// -------------------------------------------------------------------

// MessageBusResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool MessageBusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MessageBusResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MessageBusResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MessageBusResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.mb.MessageBusResponse.status)
  return _internal_status();
}
inline void MessageBusResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.mb.MessageBusResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MessageBusResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MessageBusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.mb.MessageBusResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MessageBusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MessageBusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.mb.MessageBusResponse.status)
  return _internal_mutable_status();
}
inline void MessageBusResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.mb.MessageBusResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mb
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageBus_2fmb_2eproto
