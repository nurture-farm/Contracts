// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: EventPortal/event_portal.proto

package EventPortal

import (
	GoCommon "code.nurture.farm/Core/Contracts/Common/Gen/GoCommon"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FilterEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Namespace      GoCommon.NameSpace       `protobuf:"varint,3,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Name           string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PageNumber     int32                    `protobuf:"varint,5,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Limit          int32                    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilterEventsRequest) Reset() {
	*x = FilterEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventsRequest) ProtoMessage() {}

func (x *FilterEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventsRequest.ProtoReflect.Descriptor instead.
func (*FilterEventsRequest) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{0}
}

func (x *FilterEventsRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FilterEventsRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FilterEventsRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *FilterEventsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterEventsRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FilterEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilterEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Record  []*FilterEventsResponseRecord `protobuf:"bytes,4,rep,name=record,proto3" json:"record,omitempty"`
}

func (x *FilterEventsResponse) Reset() {
	*x = FilterEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventsResponse) ProtoMessage() {}

func (x *FilterEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventsResponse.ProtoReflect.Descriptor instead.
func (*FilterEventsResponse) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{1}
}

func (x *FilterEventsResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterEventsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FilterEventsResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FilterEventsResponse) GetRecord() []*FilterEventsResponseRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type FilterEventsResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace GoCommon.NameSpace `protobuf:"varint,2,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Name      string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Index     int32              `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FilterEventsResponseRecord) Reset() {
	*x = FilterEventsResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventsResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventsResponseRecord) ProtoMessage() {}

func (x *FilterEventsResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventsResponseRecord.ProtoReflect.Descriptor instead.
func (*FilterEventsResponseRecord) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{2}
}

func (x *FilterEventsResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterEventsResponseRecord) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *FilterEventsResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterEventsResponseRecord) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type FilterEventPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	EventId        int64                    `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	PageNumber     int32                    `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Limit          int32                    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilterEventPropertiesRequest) Reset() {
	*x = FilterEventPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventPropertiesRequest) ProtoMessage() {}

func (x *FilterEventPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventPropertiesRequest.ProtoReflect.Descriptor instead.
func (*FilterEventPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{3}
}

func (x *FilterEventPropertiesRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FilterEventPropertiesRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *FilterEventPropertiesRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FilterEventPropertiesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilterEventPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count           int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs         []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	EventProperties []*EventProperty              `protobuf:"bytes,4,rep,name=eventProperties,proto3" json:"eventProperties,omitempty"`
}

func (x *FilterEventPropertiesResponse) Reset() {
	*x = FilterEventPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventPropertiesResponse) ProtoMessage() {}

func (x *FilterEventPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventPropertiesResponse.ProtoReflect.Descriptor instead.
func (*FilterEventPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{4}
}

func (x *FilterEventPropertiesResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterEventPropertiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FilterEventPropertiesResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FilterEventPropertiesResponse) GetEventProperties() []*EventProperty {
	if x != nil {
		return x.EventProperties
	}
	return nil
}

type EventProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventPropertyType      GoCommon.EventPropertyType `protobuf:"varint,1,opt,name=eventPropertyType,proto3,enum=farm.nurture.core.contracts.common.EventPropertyType" json:"eventPropertyType,omitempty"`
	Id                     int64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EventParameterMetadata *EventParameterMetadata    `protobuf:"bytes,4,opt,name=eventParameterMetadata,proto3" json:"eventParameterMetadata,omitempty"`
}

func (x *EventProperty) Reset() {
	*x = EventProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProperty) ProtoMessage() {}

func (x *EventProperty) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProperty.ProtoReflect.Descriptor instead.
func (*EventProperty) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{5}
}

func (x *EventProperty) GetEventPropertyType() GoCommon.EventPropertyType {
	if x != nil {
		return x.EventPropertyType
	}
	return GoCommon.EventPropertyType_NO_EVENT_PROPERTY_TYPE
}

func (x *EventProperty) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventProperty) GetEventParameterMetadata() *EventParameterMetadata {
	if x != nil {
		return x.EventParameterMetadata
	}
	return nil
}

type EventParameterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventParameterValues *EventParameterValues `protobuf:"bytes,1,opt,name=EventParameterValues,proto3" json:"EventParameterValues,omitempty"`
}

func (x *EventParameterMetadata) Reset() {
	*x = EventParameterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParameterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParameterMetadata) ProtoMessage() {}

func (x *EventParameterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParameterMetadata.ProtoReflect.Descriptor instead.
func (*EventParameterMetadata) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{6}
}

func (x *EventParameterMetadata) GetEventParameterValues() *EventParameterValues {
	if x != nil {
		return x.EventParameterValues
	}
	return nil
}

type EventParameterValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EventParameterValues) Reset() {
	*x = EventParameterValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParameterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParameterValues) ProtoMessage() {}

func (x *EventParameterValues) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParameterValues.ProtoReflect.Descriptor instead.
func (*EventParameterValues) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{7}
}

func (x *EventParameterValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FindEventPropertyByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *GoCommon.RequestHeaders   `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	EventId           int64                      `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name              string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EventPropertyType GoCommon.EventPropertyType `protobuf:"varint,4,opt,name=eventPropertyType,proto3,enum=farm.nurture.core.contracts.common.EventPropertyType" json:"eventPropertyType,omitempty"`
}

func (x *FindEventPropertyByIdRequest) Reset() {
	*x = FindEventPropertyByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPropertyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPropertyByIdRequest) ProtoMessage() {}

func (x *FindEventPropertyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPropertyByIdRequest.ProtoReflect.Descriptor instead.
func (*FindEventPropertyByIdRequest) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{8}
}

func (x *FindEventPropertyByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindEventPropertyByIdRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *FindEventPropertyByIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindEventPropertyByIdRequest) GetEventPropertyType() GoCommon.EventPropertyType {
	if x != nil {
		return x.EventPropertyType
	}
	return GoCommon.EventPropertyType_NO_EVENT_PROPERTY_TYPE
}

type FindEventPropertyByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Attribs                     []*GoCommon.Attribs           `protobuf:"bytes,2,rep,name=attribs,proto3" json:"attribs,omitempty"`
	FindEventPropertyByIdRecord *FindEventPropertyByIdRecord  `protobuf:"bytes,3,opt,name=findEventPropertyByIdRecord,proto3" json:"findEventPropertyByIdRecord,omitempty"`
}

func (x *FindEventPropertyByIdResponse) Reset() {
	*x = FindEventPropertyByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPropertyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPropertyByIdResponse) ProtoMessage() {}

func (x *FindEventPropertyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPropertyByIdResponse.ProtoReflect.Descriptor instead.
func (*FindEventPropertyByIdResponse) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{9}
}

func (x *FindEventPropertyByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindEventPropertyByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindEventPropertyByIdResponse) GetFindEventPropertyByIdRecord() *FindEventPropertyByIdRecord {
	if x != nil {
		return x.FindEventPropertyByIdRecord
	}
	return nil
}

type FindEventPropertyByIdRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventPropertyType      GoCommon.EventPropertyType `protobuf:"varint,1,opt,name=eventPropertyType,proto3,enum=farm.nurture.core.contracts.common.EventPropertyType" json:"eventPropertyType,omitempty"`
	EventParameterMetadata *EventParameterMetadata    `protobuf:"bytes,3,opt,name=eventParameterMetadata,proto3" json:"eventParameterMetadata,omitempty"`
}

func (x *FindEventPropertyByIdRecord) Reset() {
	*x = FindEventPropertyByIdRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPropertyByIdRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPropertyByIdRecord) ProtoMessage() {}

func (x *FindEventPropertyByIdRecord) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPropertyByIdRecord.ProtoReflect.Descriptor instead.
func (*FindEventPropertyByIdRecord) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{10}
}

func (x *FindEventPropertyByIdRecord) GetEventPropertyType() GoCommon.EventPropertyType {
	if x != nil {
		return x.EventPropertyType
	}
	return GoCommon.EventPropertyType_NO_EVENT_PROPERTY_TYPE
}

func (x *FindEventPropertyByIdRecord) GetEventParameterMetadata() *EventParameterMetadata {
	if x != nil {
		return x.EventParameterMetadata
	}
	return nil
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Actor          *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	Attributes     []*GoCommon.Attribs      `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	EventTime      *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventType      GoCommon.EventType       `protobuf:"varint,5,opt,name=event_type,json=eventType,proto3,enum=farm.nurture.core.contracts.common.EventType" json:"event_type,omitempty"`
	EventName      string                   `protobuf:"bytes,6,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{11}
}

func (x *EventRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *EventRequest) GetActor() *GoCommon.ActorID {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *EventRequest) GetAttributes() []*GoCommon.Attribs {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EventRequest) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *EventRequest) GetEventType() GoCommon.EventType {
	if x != nil {
		return x.EventType
	}
	return GoCommon.EventType_NO_WORKFLOW
}

func (x *EventRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count  int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EventPortal_event_portal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_EventPortal_event_portal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_EventPortal_event_portal_proto_rawDescGZIP(), []int{12}
}

func (x *EventResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EventResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_EventPortal_event_portal_proto protoreflect.FileDescriptor

var file_EventPortal_event_portal_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x27, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb0, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xca, 0x01, 0x0a,
	0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x1d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x63, 0x0a,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8b, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x14, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2e, 0x0a,
	0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8d, 0x02,
	0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x02,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xfb, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x63, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2,
	0x03, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4b,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x88, 0x05, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x7e, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x13,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x51, 0x0a, 0x1f, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43,
	0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_EventPortal_event_portal_proto_rawDescOnce sync.Once
	file_EventPortal_event_portal_proto_rawDescData = file_EventPortal_event_portal_proto_rawDesc
)

func file_EventPortal_event_portal_proto_rawDescGZIP() []byte {
	file_EventPortal_event_portal_proto_rawDescOnce.Do(func() {
		file_EventPortal_event_portal_proto_rawDescData = protoimpl.X.CompressGZIP(file_EventPortal_event_portal_proto_rawDescData)
	})
	return file_EventPortal_event_portal_proto_rawDescData
}

var file_EventPortal_event_portal_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_EventPortal_event_portal_proto_goTypes = []interface{}{
	(*FilterEventsRequest)(nil),           // 0: farm.nurture.core.contracts.EventPortal.FilterEventsRequest
	(*FilterEventsResponse)(nil),          // 1: farm.nurture.core.contracts.EventPortal.FilterEventsResponse
	(*FilterEventsResponseRecord)(nil),    // 2: farm.nurture.core.contracts.EventPortal.FilterEventsResponseRecord
	(*FilterEventPropertiesRequest)(nil),  // 3: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesRequest
	(*FilterEventPropertiesResponse)(nil), // 4: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesResponse
	(*EventProperty)(nil),                 // 5: farm.nurture.core.contracts.EventPortal.EventProperty
	(*EventParameterMetadata)(nil),        // 6: farm.nurture.core.contracts.EventPortal.EventParameterMetadata
	(*EventParameterValues)(nil),          // 7: farm.nurture.core.contracts.EventPortal.EventParameterValues
	(*FindEventPropertyByIdRequest)(nil),  // 8: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRequest
	(*FindEventPropertyByIdResponse)(nil), // 9: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdResponse
	(*FindEventPropertyByIdRecord)(nil),   // 10: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRecord
	(*EventRequest)(nil),                  // 11: farm.nurture.core.contracts.EventPortal.EventRequest
	(*EventResponse)(nil),                 // 12: farm.nurture.core.contracts.EventPortal.EventResponse
	(*GoCommon.RequestHeaders)(nil),       // 13: farm.nurture.core.contracts.common.RequestHeaders
	(GoCommon.NameSpace)(0),               // 14: farm.nurture.core.contracts.common.NameSpace
	(*GoCommon.RequestStatusResult)(nil),  // 15: farm.nurture.core.contracts.common.RequestStatusResult
	(*GoCommon.Attribs)(nil),              // 16: farm.nurture.core.contracts.common.Attribs
	(GoCommon.EventPropertyType)(0),       // 17: farm.nurture.core.contracts.common.EventPropertyType
	(*GoCommon.ActorID)(nil),              // 18: farm.nurture.core.contracts.common.ActorID
	(*timestamppb.Timestamp)(nil),         // 19: google.protobuf.Timestamp
	(GoCommon.EventType)(0),               // 20: farm.nurture.core.contracts.common.EventType
}
var file_EventPortal_event_portal_proto_depIdxs = []int32{
	13, // 0: farm.nurture.core.contracts.EventPortal.FilterEventsRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	14, // 1: farm.nurture.core.contracts.EventPortal.FilterEventsRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	15, // 2: farm.nurture.core.contracts.EventPortal.FilterEventsResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	16, // 3: farm.nurture.core.contracts.EventPortal.FilterEventsResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	2,  // 4: farm.nurture.core.contracts.EventPortal.FilterEventsResponse.record:type_name -> farm.nurture.core.contracts.EventPortal.FilterEventsResponseRecord
	14, // 5: farm.nurture.core.contracts.EventPortal.FilterEventsResponseRecord.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	13, // 6: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	15, // 7: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	16, // 8: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	5,  // 9: farm.nurture.core.contracts.EventPortal.FilterEventPropertiesResponse.eventProperties:type_name -> farm.nurture.core.contracts.EventPortal.EventProperty
	17, // 10: farm.nurture.core.contracts.EventPortal.EventProperty.eventPropertyType:type_name -> farm.nurture.core.contracts.common.EventPropertyType
	6,  // 11: farm.nurture.core.contracts.EventPortal.EventProperty.eventParameterMetadata:type_name -> farm.nurture.core.contracts.EventPortal.EventParameterMetadata
	7,  // 12: farm.nurture.core.contracts.EventPortal.EventParameterMetadata.EventParameterValues:type_name -> farm.nurture.core.contracts.EventPortal.EventParameterValues
	13, // 13: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	17, // 14: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRequest.eventPropertyType:type_name -> farm.nurture.core.contracts.common.EventPropertyType
	15, // 15: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	16, // 16: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	10, // 17: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdResponse.findEventPropertyByIdRecord:type_name -> farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRecord
	17, // 18: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRecord.eventPropertyType:type_name -> farm.nurture.core.contracts.common.EventPropertyType
	6,  // 19: farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRecord.eventParameterMetadata:type_name -> farm.nurture.core.contracts.EventPortal.EventParameterMetadata
	13, // 20: farm.nurture.core.contracts.EventPortal.EventRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	18, // 21: farm.nurture.core.contracts.EventPortal.EventRequest.actor:type_name -> farm.nurture.core.contracts.common.ActorID
	16, // 22: farm.nurture.core.contracts.EventPortal.EventRequest.attributes:type_name -> farm.nurture.core.contracts.common.Attribs
	19, // 23: farm.nurture.core.contracts.EventPortal.EventRequest.event_time:type_name -> google.protobuf.Timestamp
	20, // 24: farm.nurture.core.contracts.EventPortal.EventRequest.event_type:type_name -> farm.nurture.core.contracts.common.EventType
	15, // 25: farm.nurture.core.contracts.EventPortal.EventResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	11, // 26: farm.nurture.core.contracts.EventPortal.EventPortal.uploadEvent:input_type -> farm.nurture.core.contracts.EventPortal.EventRequest
	0,  // 27: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFilterEvents:input_type -> farm.nurture.core.contracts.EventPortal.FilterEventsRequest
	3,  // 28: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFilterEventProperties:input_type -> farm.nurture.core.contracts.EventPortal.FilterEventPropertiesRequest
	8,  // 29: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFindEventPropertyById:input_type -> farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdRequest
	12, // 30: farm.nurture.core.contracts.EventPortal.EventPortal.uploadEvent:output_type -> farm.nurture.core.contracts.EventPortal.EventResponse
	1,  // 31: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFilterEvents:output_type -> farm.nurture.core.contracts.EventPortal.FilterEventsResponse
	4,  // 32: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFilterEventProperties:output_type -> farm.nurture.core.contracts.EventPortal.FilterEventPropertiesResponse
	9,  // 33: farm.nurture.core.contracts.EventPortal.EventPortal.ExecuteFindEventPropertyById:output_type -> farm.nurture.core.contracts.EventPortal.FindEventPropertyByIdResponse
	30, // [30:34] is the sub-list for method output_type
	26, // [26:30] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_EventPortal_event_portal_proto_init() }
func file_EventPortal_event_portal_proto_init() {
	if File_EventPortal_event_portal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_EventPortal_event_portal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventsResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParameterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParameterValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPropertyByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPropertyByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPropertyByIdRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_EventPortal_event_portal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_EventPortal_event_portal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_EventPortal_event_portal_proto_goTypes,
		DependencyIndexes: file_EventPortal_event_portal_proto_depIdxs,
		MessageInfos:      file_EventPortal_event_portal_proto_msgTypes,
	}.Build()
	File_EventPortal_event_portal_proto = out.File
	file_EventPortal_event_portal_proto_rawDesc = nil
	file_EventPortal_event_portal_proto_goTypes = nil
	file_EventPortal_event_portal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventPortalClient is the client API for EventPortal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventPortalClient interface {
	UploadEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	ExecuteFilterEvents(ctx context.Context, in *FilterEventsRequest, opts ...grpc.CallOption) (*FilterEventsResponse, error)
	ExecuteFilterEventProperties(ctx context.Context, in *FilterEventPropertiesRequest, opts ...grpc.CallOption) (*FilterEventPropertiesResponse, error)
	ExecuteFindEventPropertyById(ctx context.Context, in *FindEventPropertyByIdRequest, opts ...grpc.CallOption) (*FindEventPropertyByIdResponse, error)
}

type eventPortalClient struct {
	cc grpc.ClientConnInterface
}

func NewEventPortalClient(cc grpc.ClientConnInterface) EventPortalClient {
	return &eventPortalClient{cc}
}

func (c *eventPortalClient) UploadEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.EventPortal.EventPortal/uploadEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPortalClient) ExecuteFilterEvents(ctx context.Context, in *FilterEventsRequest, opts ...grpc.CallOption) (*FilterEventsResponse, error) {
	out := new(FilterEventsResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFilterEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPortalClient) ExecuteFilterEventProperties(ctx context.Context, in *FilterEventPropertiesRequest, opts ...grpc.CallOption) (*FilterEventPropertiesResponse, error) {
	out := new(FilterEventPropertiesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFilterEventProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPortalClient) ExecuteFindEventPropertyById(ctx context.Context, in *FindEventPropertyByIdRequest, opts ...grpc.CallOption) (*FindEventPropertyByIdResponse, error) {
	out := new(FindEventPropertyByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFindEventPropertyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventPortalServer is the server API for EventPortal service.
type EventPortalServer interface {
	UploadEvent(context.Context, *EventRequest) (*EventResponse, error)
	ExecuteFilterEvents(context.Context, *FilterEventsRequest) (*FilterEventsResponse, error)
	ExecuteFilterEventProperties(context.Context, *FilterEventPropertiesRequest) (*FilterEventPropertiesResponse, error)
	ExecuteFindEventPropertyById(context.Context, *FindEventPropertyByIdRequest) (*FindEventPropertyByIdResponse, error)
}

// UnimplementedEventPortalServer can be embedded to have forward compatible implementations.
type UnimplementedEventPortalServer struct {
}

func (*UnimplementedEventPortalServer) UploadEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEvent not implemented")
}
func (*UnimplementedEventPortalServer) ExecuteFilterEvents(context.Context, *FilterEventsRequest) (*FilterEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFilterEvents not implemented")
}
func (*UnimplementedEventPortalServer) ExecuteFilterEventProperties(context.Context, *FilterEventPropertiesRequest) (*FilterEventPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFilterEventProperties not implemented")
}
func (*UnimplementedEventPortalServer) ExecuteFindEventPropertyById(context.Context, *FindEventPropertyByIdRequest) (*FindEventPropertyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindEventPropertyById not implemented")
}

func RegisterEventPortalServer(s *grpc.Server, srv EventPortalServer) {
	s.RegisterService(&_EventPortal_serviceDesc, srv)
}

func _EventPortal_UploadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPortalServer).UploadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.EventPortal.EventPortal/UploadEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPortalServer).UploadEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPortal_ExecuteFilterEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPortalServer).ExecuteFilterEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFilterEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPortalServer).ExecuteFilterEvents(ctx, req.(*FilterEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPortal_ExecuteFilterEventProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterEventPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPortalServer).ExecuteFilterEventProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFilterEventProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPortalServer).ExecuteFilterEventProperties(ctx, req.(*FilterEventPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPortal_ExecuteFindEventPropertyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventPropertyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPortalServer).ExecuteFindEventPropertyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.EventPortal.EventPortal/ExecuteFindEventPropertyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPortalServer).ExecuteFindEventPropertyById(ctx, req.(*FindEventPropertyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventPortal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.core.contracts.EventPortal.EventPortal",
	HandlerType: (*EventPortalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadEvent",
			Handler:    _EventPortal_UploadEvent_Handler,
		},
		{
			MethodName: "ExecuteFilterEvents",
			Handler:    _EventPortal_ExecuteFilterEvents_Handler,
		},
		{
			MethodName: "ExecuteFilterEventProperties",
			Handler:    _EventPortal_ExecuteFilterEventProperties_Handler,
		},
		{
			MethodName: "ExecuteFindEventPropertyById",
			Handler:    _EventPortal_ExecuteFindEventPropertyById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventPortal/event_portal.proto",
}
