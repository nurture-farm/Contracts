// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: Common/geo_enums.proto

package Common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProjectionType int32

const (
	ProjectionType_WEB_MERCATOR            ProjectionType = 0
	ProjectionType_ROBINSON                ProjectionType = 1
	ProjectionType_STEREOGRAPHIC           ProjectionType = 2
	ProjectionType_LAMBERT_CONFORMAL_CONIC ProjectionType = 3
	ProjectionType_TRANSVERSE_MERCATOR     ProjectionType = 4
)

// Enum value maps for ProjectionType.
var (
	ProjectionType_name = map[int32]string{
		0: "WEB_MERCATOR",
		1: "ROBINSON",
		2: "STEREOGRAPHIC",
		3: "LAMBERT_CONFORMAL_CONIC",
		4: "TRANSVERSE_MERCATOR",
	}
	ProjectionType_value = map[string]int32{
		"WEB_MERCATOR":            0,
		"ROBINSON":                1,
		"STEREOGRAPHIC":           2,
		"LAMBERT_CONFORMAL_CONIC": 3,
		"TRANSVERSE_MERCATOR":     4,
	}
)

func (x ProjectionType) Enum() *ProjectionType {
	p := new(ProjectionType)
	*p = x
	return p
}

func (x ProjectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[0].Descriptor()
}

func (ProjectionType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[0]
}

func (x ProjectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectionType.Descriptor instead.
func (ProjectionType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{0}
}

type PlaceNamespace int32

const (
	PlaceNamespace_POLITICAL_NAMESPACE PlaceNamespace = 0
	PlaceNamespace_MACHINE_NAMESPACE   PlaceNamespace = 1
	PlaceNamespace_HIERARCHICAL        PlaceNamespace = 2
	PlaceNamespace_FARMS               PlaceNamespace = 3
	PlaceNamespace_PIPE_LOCATION       PlaceNamespace = 4
	PlaceNamespace_IOT_PINGS           PlaceNamespace = 5
	PlaceNamespace_SENTINEL_VH         PlaceNamespace = 6
)

// Enum value maps for PlaceNamespace.
var (
	PlaceNamespace_name = map[int32]string{
		0: "POLITICAL_NAMESPACE",
		1: "MACHINE_NAMESPACE",
		2: "HIERARCHICAL",
		3: "FARMS",
		4: "PIPE_LOCATION",
		5: "IOT_PINGS",
		6: "SENTINEL_VH",
	}
	PlaceNamespace_value = map[string]int32{
		"POLITICAL_NAMESPACE": 0,
		"MACHINE_NAMESPACE":   1,
		"HIERARCHICAL":        2,
		"FARMS":               3,
		"PIPE_LOCATION":       4,
		"IOT_PINGS":           5,
		"SENTINEL_VH":         6,
	}
)

func (x PlaceNamespace) Enum() *PlaceNamespace {
	p := new(PlaceNamespace)
	*p = x
	return p
}

func (x PlaceNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[1].Descriptor()
}

func (PlaceNamespace) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[1]
}

func (x PlaceNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceNamespace.Descriptor instead.
func (PlaceNamespace) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{1}
}

type PlaceType int32

const (
	PlaceType_INVALID_PLACE_TYPE PlaceType = 0
	PlaceType_FARM_TYPE          PlaceType = 1
)

// Enum value maps for PlaceType.
var (
	PlaceType_name = map[int32]string{
		0: "INVALID_PLACE_TYPE",
		1: "FARM_TYPE",
	}
	PlaceType_value = map[string]int32{
		"INVALID_PLACE_TYPE": 0,
		"FARM_TYPE":          1,
	}
)

func (x PlaceType) Enum() *PlaceType {
	p := new(PlaceType)
	*p = x
	return p
}

func (x PlaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[2].Descriptor()
}

func (PlaceType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[2]
}

func (x PlaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceType.Descriptor instead.
func (PlaceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{2}
}

type TemporalResolutionType int32

const (
	TemporalResolutionType_NO_TEMPORAL_RESOLUTION_TYPE TemporalResolutionType = 0
	TemporalResolutionType_GREGORIAN_CALENDAR          TemporalResolutionType = 1
	TemporalResolutionType_INDIAN_CROP_CALENDAR        TemporalResolutionType = 2
)

// Enum value maps for TemporalResolutionType.
var (
	TemporalResolutionType_name = map[int32]string{
		0: "NO_TEMPORAL_RESOLUTION_TYPE",
		1: "GREGORIAN_CALENDAR",
		2: "INDIAN_CROP_CALENDAR",
	}
	TemporalResolutionType_value = map[string]int32{
		"NO_TEMPORAL_RESOLUTION_TYPE": 0,
		"GREGORIAN_CALENDAR":          1,
		"INDIAN_CROP_CALENDAR":        2,
	}
)

func (x TemporalResolutionType) Enum() *TemporalResolutionType {
	p := new(TemporalResolutionType)
	*p = x
	return p
}

func (x TemporalResolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemporalResolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[3].Descriptor()
}

func (TemporalResolutionType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[3]
}

func (x TemporalResolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemporalResolutionType.Descriptor instead.
func (TemporalResolutionType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{3}
}

type DataType int32

const (
	DataType_NO_DATA       DataType = 0
	DataType_CROP          DataType = 100
	DataType_BURNING_EVENT DataType = 200
	DataType_TILLING_EVENT DataType = 300
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:   "NO_DATA",
		100: "CROP",
		200: "BURNING_EVENT",
		300: "TILLING_EVENT",
	}
	DataType_value = map[string]int32{
		"NO_DATA":       0,
		"CROP":          100,
		"BURNING_EVENT": 200,
		"TILLING_EVENT": 300,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[4].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[4]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{4}
}

type GeometryType int32

const (
	GeometryType_INVALID_GEOMETRY_TYPE GeometryType = 0
	GeometryType_MULTIPOLYGON          GeometryType = 1
	GeometryType_POLYLINE              GeometryType = 2
	GeometryType_POINT                 GeometryType = 3
	GeometryType_POLYGON               GeometryType = 4
)

// Enum value maps for GeometryType.
var (
	GeometryType_name = map[int32]string{
		0: "INVALID_GEOMETRY_TYPE",
		1: "MULTIPOLYGON",
		2: "POLYLINE",
		3: "POINT",
		4: "POLYGON",
	}
	GeometryType_value = map[string]int32{
		"INVALID_GEOMETRY_TYPE": 0,
		"MULTIPOLYGON":          1,
		"POLYLINE":              2,
		"POINT":                 3,
		"POLYGON":               4,
	}
)

func (x GeometryType) Enum() *GeometryType {
	p := new(GeometryType)
	*p = x
	return p
}

func (x GeometryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeometryType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[5].Descriptor()
}

func (GeometryType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[5]
}

func (x GeometryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeometryType.Descriptor instead.
func (GeometryType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{5}
}

type DataPropertyType int32

const (
	DataPropertyType_NO_TYPE    DataPropertyType = 0
	DataPropertyType_CROP_YIELD DataPropertyType = 100
	DataPropertyType_CROP_NAME  DataPropertyType = 101
	DataPropertyType_CROP_TYPE  DataPropertyType = 102
)

// Enum value maps for DataPropertyType.
var (
	DataPropertyType_name = map[int32]string{
		0:   "NO_TYPE",
		100: "CROP_YIELD",
		101: "CROP_NAME",
		102: "CROP_TYPE",
	}
	DataPropertyType_value = map[string]int32{
		"NO_TYPE":    0,
		"CROP_YIELD": 100,
		"CROP_NAME":  101,
		"CROP_TYPE":  102,
	}
)

func (x DataPropertyType) Enum() *DataPropertyType {
	p := new(DataPropertyType)
	*p = x
	return p
}

func (x DataPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[6].Descriptor()
}

func (DataPropertyType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[6]
}

func (x DataPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPropertyType.Descriptor instead.
func (DataPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{6}
}

type TemporalResolutionLevel int32

const (
	TemporalResolutionLevel_NO_TEMP_RESOLUTION_LEVEL TemporalResolutionLevel = 0
)

// Enum value maps for TemporalResolutionLevel.
var (
	TemporalResolutionLevel_name = map[int32]string{
		0: "NO_TEMP_RESOLUTION_LEVEL",
	}
	TemporalResolutionLevel_value = map[string]int32{
		"NO_TEMP_RESOLUTION_LEVEL": 0,
	}
)

func (x TemporalResolutionLevel) Enum() *TemporalResolutionLevel {
	p := new(TemporalResolutionLevel)
	*p = x
	return p
}

func (x TemporalResolutionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemporalResolutionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[7].Descriptor()
}

func (TemporalResolutionLevel) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[7]
}

func (x TemporalResolutionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemporalResolutionLevel.Descriptor instead.
func (TemporalResolutionLevel) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{7}
}

type DataPropCategoryType int32

const (
	DataPropCategoryType_NO_DATA_PROP_CATEGORY_TYPE DataPropCategoryType = 0
)

// Enum value maps for DataPropCategoryType.
var (
	DataPropCategoryType_name = map[int32]string{
		0: "NO_DATA_PROP_CATEGORY_TYPE",
	}
	DataPropCategoryType_value = map[string]int32{
		"NO_DATA_PROP_CATEGORY_TYPE": 0,
	}
)

func (x DataPropCategoryType) Enum() *DataPropCategoryType {
	p := new(DataPropCategoryType)
	*p = x
	return p
}

func (x DataPropCategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPropCategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[8].Descriptor()
}

func (DataPropCategoryType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[8]
}

func (x DataPropCategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPropCategoryType.Descriptor instead.
func (DataPropCategoryType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{8}
}

type GeoStatusResult int32

const (
	GeoStatusResult_GEO_STATUS_SUCCESS GeoStatusResult = 0
	GeoStatusResult_NO_GEOMETRY_FOUND  GeoStatusResult = 1
	GeoStatusResult_NO_PIPE_FOUND      GeoStatusResult = 2
)

// Enum value maps for GeoStatusResult.
var (
	GeoStatusResult_name = map[int32]string{
		0: "GEO_STATUS_SUCCESS",
		1: "NO_GEOMETRY_FOUND",
		2: "NO_PIPE_FOUND",
	}
	GeoStatusResult_value = map[string]int32{
		"GEO_STATUS_SUCCESS": 0,
		"NO_GEOMETRY_FOUND":  1,
		"NO_PIPE_FOUND":      2,
	}
)

func (x GeoStatusResult) Enum() *GeoStatusResult {
	p := new(GeoStatusResult)
	*p = x
	return p
}

func (x GeoStatusResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoStatusResult) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[9].Descriptor()
}

func (GeoStatusResult) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[9]
}

func (x GeoStatusResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoStatusResult.Descriptor instead.
func (GeoStatusResult) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{9}
}

type UI_CLIENT int32

const (
	UI_CLIENT_NO_UI_CLIENT              UI_CLIENT = 0
	UI_CLIENT_DESKTOP_WEB_UI_CLIENT     UI_CLIENT = 1
	UI_CLIENT_ANDROID_TAB_WEB_UI_CLIENT UI_CLIENT = 2
	UI_CLIENT_ANDROID_WEB_UI_CLIENT     UI_CLIENT = 3
	UI_CLIENT_IOS_WEB_UI_CLIENT         UI_CLIENT = 4
	UI_CLIENT_IOS_TAB_WEB_UI_CLIENT     UI_CLIENT = 5
)

// Enum value maps for UI_CLIENT.
var (
	UI_CLIENT_name = map[int32]string{
		0: "NO_UI_CLIENT",
		1: "DESKTOP_WEB_UI_CLIENT",
		2: "ANDROID_TAB_WEB_UI_CLIENT",
		3: "ANDROID_WEB_UI_CLIENT",
		4: "IOS_WEB_UI_CLIENT",
		5: "IOS_TAB_WEB_UI_CLIENT",
	}
	UI_CLIENT_value = map[string]int32{
		"NO_UI_CLIENT":              0,
		"DESKTOP_WEB_UI_CLIENT":     1,
		"ANDROID_TAB_WEB_UI_CLIENT": 2,
		"ANDROID_WEB_UI_CLIENT":     3,
		"IOS_WEB_UI_CLIENT":         4,
		"IOS_TAB_WEB_UI_CLIENT":     5,
	}
)

func (x UI_CLIENT) Enum() *UI_CLIENT {
	p := new(UI_CLIENT)
	*p = x
	return p
}

func (x UI_CLIENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UI_CLIENT) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[10].Descriptor()
}

func (UI_CLIENT) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[10]
}

func (x UI_CLIENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UI_CLIENT.Descriptor instead.
func (UI_CLIENT) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{10}
}

type PlaceSourceType int32

const (
	PlaceSourceType_NO_SOURCE_TYPE        PlaceSourceType = 0
	PlaceSourceType_SATELLITE_FARM        PlaceSourceType = 1
	PlaceSourceType_IOT_FARM              PlaceSourceType = 2
	PlaceSourceType_POLITICAL_FARM        PlaceSourceType = 3
	PlaceSourceType_USER_FARM             PlaceSourceType = 4
	PlaceSourceType_AWD_SOUTH_2021        PlaceSourceType = 5
	PlaceSourceType_PIPE_INSTALLATION_SRC PlaceSourceType = 6
	PlaceSourceType_INSIDE_BUND_SRC       PlaceSourceType = 7
	PlaceSourceType_AERATION_EVENT_1_SRC  PlaceSourceType = 8
	PlaceSourceType_AERATION_EVENT_2_SRC  PlaceSourceType = 9
	PlaceSourceType_AERATION_EVENT_3_SRC  PlaceSourceType = 10
	PlaceSourceType_USER_FARM_AWD         PlaceSourceType = 11
	PlaceSourceType_USER_FARM_SBB         PlaceSourceType = 12
	PlaceSourceType_IOT_GATEWAY_TYPE      PlaceSourceType = 13
	PlaceSourceType_AERATION_1            PlaceSourceType = 14
	PlaceSourceType_AERATION_2            PlaceSourceType = 15
	PlaceSourceType_AERATION_3            PlaceSourceType = 16
	PlaceSourceType_SENTINEL_1_L2A        PlaceSourceType = 17
	PlaceSourceType_MACHINE_BATCH_SPRAY   PlaceSourceType = 18
)

// Enum value maps for PlaceSourceType.
var (
	PlaceSourceType_name = map[int32]string{
		0:  "NO_SOURCE_TYPE",
		1:  "SATELLITE_FARM",
		2:  "IOT_FARM",
		3:  "POLITICAL_FARM",
		4:  "USER_FARM",
		5:  "AWD_SOUTH_2021",
		6:  "PIPE_INSTALLATION_SRC",
		7:  "INSIDE_BUND_SRC",
		8:  "AERATION_EVENT_1_SRC",
		9:  "AERATION_EVENT_2_SRC",
		10: "AERATION_EVENT_3_SRC",
		11: "USER_FARM_AWD",
		12: "USER_FARM_SBB",
		13: "IOT_GATEWAY_TYPE",
		14: "AERATION_1",
		15: "AERATION_2",
		16: "AERATION_3",
		17: "SENTINEL_1_L2A",
		18: "MACHINE_BATCH_SPRAY",
	}
	PlaceSourceType_value = map[string]int32{
		"NO_SOURCE_TYPE":        0,
		"SATELLITE_FARM":        1,
		"IOT_FARM":              2,
		"POLITICAL_FARM":        3,
		"USER_FARM":             4,
		"AWD_SOUTH_2021":        5,
		"PIPE_INSTALLATION_SRC": 6,
		"INSIDE_BUND_SRC":       7,
		"AERATION_EVENT_1_SRC":  8,
		"AERATION_EVENT_2_SRC":  9,
		"AERATION_EVENT_3_SRC":  10,
		"USER_FARM_AWD":         11,
		"USER_FARM_SBB":         12,
		"IOT_GATEWAY_TYPE":      13,
		"AERATION_1":            14,
		"AERATION_2":            15,
		"AERATION_3":            16,
		"SENTINEL_1_L2A":        17,
		"MACHINE_BATCH_SPRAY":   18,
	}
)

func (x PlaceSourceType) Enum() *PlaceSourceType {
	p := new(PlaceSourceType)
	*p = x
	return p
}

func (x PlaceSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[11].Descriptor()
}

func (PlaceSourceType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[11]
}

func (x PlaceSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceSourceType.Descriptor instead.
func (PlaceSourceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{11}
}

type PlaceVisibleType int32

const (
	PlaceVisibleType_NO_VISIBLE_TYPE            PlaceVisibleType = 0
	PlaceVisibleType_VILLAGE_FARM               PlaceVisibleType = 1
	PlaceVisibleType_DISTRICT_FARM              PlaceVisibleType = 2
	PlaceVisibleType_PIPE                       PlaceVisibleType = 3
	PlaceVisibleType_PUSA_SPRAY_PROGRAM_TYPE    PlaceVisibleType = 4
	PlaceVisibleType_AWD_PROGRAM_TYPE           PlaceVisibleType = 5
	PlaceVisibleType_DSR_PROGRAM_TYPE           PlaceVisibleType = 6
	PlaceVisibleType_GROUNDNUT_PROGRAM_TYPE     PlaceVisibleType = 7
	PlaceVisibleType_CRM_PROGRAM_TYPE           PlaceVisibleType = 8
	PlaceVisibleType_TRADE_PROGRAM_TYPE         PlaceVisibleType = 9
	PlaceVisibleType_AWD_22_KHARIF_PROGRAM_TYPE PlaceVisibleType = 10
	PlaceVisibleType_CRM_22_KHARIF_PROGRAM_TYPE PlaceVisibleType = 11
	PlaceVisibleType_DSR_22_KHARIF_PROGRAM_TYPE PlaceVisibleType = 12
	PlaceVisibleType_POINT_TYPE                 PlaceVisibleType = 13
	PlaceVisibleType_PRUNED_POINT_TYPE          PlaceVisibleType = 14
	PlaceVisibleType_POLYGON_TYPE               PlaceVisibleType = 15
)

// Enum value maps for PlaceVisibleType.
var (
	PlaceVisibleType_name = map[int32]string{
		0:  "NO_VISIBLE_TYPE",
		1:  "VILLAGE_FARM",
		2:  "DISTRICT_FARM",
		3:  "PIPE",
		4:  "PUSA_SPRAY_PROGRAM_TYPE",
		5:  "AWD_PROGRAM_TYPE",
		6:  "DSR_PROGRAM_TYPE",
		7:  "GROUNDNUT_PROGRAM_TYPE",
		8:  "CRM_PROGRAM_TYPE",
		9:  "TRADE_PROGRAM_TYPE",
		10: "AWD_22_KHARIF_PROGRAM_TYPE",
		11: "CRM_22_KHARIF_PROGRAM_TYPE",
		12: "DSR_22_KHARIF_PROGRAM_TYPE",
		13: "POINT_TYPE",
		14: "PRUNED_POINT_TYPE",
		15: "POLYGON_TYPE",
	}
	PlaceVisibleType_value = map[string]int32{
		"NO_VISIBLE_TYPE":            0,
		"VILLAGE_FARM":               1,
		"DISTRICT_FARM":              2,
		"PIPE":                       3,
		"PUSA_SPRAY_PROGRAM_TYPE":    4,
		"AWD_PROGRAM_TYPE":           5,
		"DSR_PROGRAM_TYPE":           6,
		"GROUNDNUT_PROGRAM_TYPE":     7,
		"CRM_PROGRAM_TYPE":           8,
		"TRADE_PROGRAM_TYPE":         9,
		"AWD_22_KHARIF_PROGRAM_TYPE": 10,
		"CRM_22_KHARIF_PROGRAM_TYPE": 11,
		"DSR_22_KHARIF_PROGRAM_TYPE": 12,
		"POINT_TYPE":                 13,
		"PRUNED_POINT_TYPE":          14,
		"POLYGON_TYPE":               15,
	}
)

func (x PlaceVisibleType) Enum() *PlaceVisibleType {
	p := new(PlaceVisibleType)
	*p = x
	return p
}

func (x PlaceVisibleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceVisibleType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[12].Descriptor()
}

func (PlaceVisibleType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[12]
}

func (x PlaceVisibleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceVisibleType.Descriptor instead.
func (PlaceVisibleType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{12}
}

type PlaceTagProperty int32

const (
	PlaceTagProperty_NO_PLACE_TAG_PROPERTY    PlaceTagProperty = 0
	PlaceTagProperty_NAME                     PlaceTagProperty = 1
	PlaceTagProperty_TITLE                    PlaceTagProperty = 2
	PlaceTagProperty_COLOR                    PlaceTagProperty = 3
	PlaceTagProperty_COUNT                    PlaceTagProperty = 4
	PlaceTagProperty_ACRES                    PlaceTagProperty = 5
	PlaceTagProperty_EVENT_ID                 PlaceTagProperty = 6
	PlaceTagProperty_FARMER_NAME              PlaceTagProperty = 7
	PlaceTagProperty_FARMER_MOBILE            PlaceTagProperty = 8
	PlaceTagProperty_REGION_NAME              PlaceTagProperty = 9
	PlaceTagProperty_TEHSIL_NAME              PlaceTagProperty = 11
	PlaceTagProperty_VILLAGE_NAME             PlaceTagProperty = 12
	PlaceTagProperty_SOWING_DATE              PlaceTagProperty = 13
	PlaceTagProperty_VARIETY                  PlaceTagProperty = 14
	PlaceTagProperty_S3_MOBILE                PlaceTagProperty = 15
	PlaceTagProperty_S3_NAME                  PlaceTagProperty = 16
	PlaceTagProperty_APPROVAL_STATUS          PlaceTagProperty = 17
	PlaceTagProperty_STATUS                   PlaceTagProperty = 18
	PlaceTagProperty_FARM_ID                  PlaceTagProperty = 19
	PlaceTagProperty_FARMER_ID                PlaceTagProperty = 20
	PlaceTagProperty_PLACE_ID                 PlaceTagProperty = 21
	PlaceTagProperty_CONTENT_ID               PlaceTagProperty = 22
	PlaceTagProperty_UGDN                     PlaceTagProperty = 23
	PlaceTagProperty_GEOFENCE_SOURCE          PlaceTagProperty = 24
	PlaceTagProperty_SPRAYER_STATUS           PlaceTagProperty = 25
	PlaceTagProperty_ENGINE_STATUS            PlaceTagProperty = 26
	PlaceTagProperty_KHARIF_2022_STATUS       PlaceTagProperty = 27
	PlaceTagProperty_RABI_2022_STATUS         PlaceTagProperty = 28
	PlaceTagProperty_RABI_2022_PLACE_ID       PlaceTagProperty = 29
	PlaceTagProperty_RABI_2022_PLACE_NS       PlaceTagProperty = 30
	PlaceTagProperty_RABI_2022_PLACE_SRC      PlaceTagProperty = 31
	PlaceTagProperty_RABI_2022_PLACE_VIS      PlaceTagProperty = 32
	PlaceTagProperty_PORTAL_EDIT              PlaceTagProperty = 33
	PlaceTagProperty_KHARIF_22_PORTAL_EDIT    PlaceTagProperty = 34
	PlaceTagProperty_RABI_22_PORTAL_EDIT      PlaceTagProperty = 35
	PlaceTagProperty_AWD_RABI_22_NSV_PLACE_ID PlaceTagProperty = 36
)

// Enum value maps for PlaceTagProperty.
var (
	PlaceTagProperty_name = map[int32]string{
		0:  "NO_PLACE_TAG_PROPERTY",
		1:  "NAME",
		2:  "TITLE",
		3:  "COLOR",
		4:  "COUNT",
		5:  "ACRES",
		6:  "EVENT_ID",
		7:  "FARMER_NAME",
		8:  "FARMER_MOBILE",
		9:  "REGION_NAME",
		11: "TEHSIL_NAME",
		12: "VILLAGE_NAME",
		13: "SOWING_DATE",
		14: "VARIETY",
		15: "S3_MOBILE",
		16: "S3_NAME",
		17: "APPROVAL_STATUS",
		18: "STATUS",
		19: "FARM_ID",
		20: "FARMER_ID",
		21: "PLACE_ID",
		22: "CONTENT_ID",
		23: "UGDN",
		24: "GEOFENCE_SOURCE",
		25: "SPRAYER_STATUS",
		26: "ENGINE_STATUS",
		27: "KHARIF_2022_STATUS",
		28: "RABI_2022_STATUS",
		29: "RABI_2022_PLACE_ID",
		30: "RABI_2022_PLACE_NS",
		31: "RABI_2022_PLACE_SRC",
		32: "RABI_2022_PLACE_VIS",
		33: "PORTAL_EDIT",
		34: "KHARIF_22_PORTAL_EDIT",
		35: "RABI_22_PORTAL_EDIT",
		36: "AWD_RABI_22_NSV_PLACE_ID",
	}
	PlaceTagProperty_value = map[string]int32{
		"NO_PLACE_TAG_PROPERTY":    0,
		"NAME":                     1,
		"TITLE":                    2,
		"COLOR":                    3,
		"COUNT":                    4,
		"ACRES":                    5,
		"EVENT_ID":                 6,
		"FARMER_NAME":              7,
		"FARMER_MOBILE":            8,
		"REGION_NAME":              9,
		"TEHSIL_NAME":              11,
		"VILLAGE_NAME":             12,
		"SOWING_DATE":              13,
		"VARIETY":                  14,
		"S3_MOBILE":                15,
		"S3_NAME":                  16,
		"APPROVAL_STATUS":          17,
		"STATUS":                   18,
		"FARM_ID":                  19,
		"FARMER_ID":                20,
		"PLACE_ID":                 21,
		"CONTENT_ID":               22,
		"UGDN":                     23,
		"GEOFENCE_SOURCE":          24,
		"SPRAYER_STATUS":           25,
		"ENGINE_STATUS":            26,
		"KHARIF_2022_STATUS":       27,
		"RABI_2022_STATUS":         28,
		"RABI_2022_PLACE_ID":       29,
		"RABI_2022_PLACE_NS":       30,
		"RABI_2022_PLACE_SRC":      31,
		"RABI_2022_PLACE_VIS":      32,
		"PORTAL_EDIT":              33,
		"KHARIF_22_PORTAL_EDIT":    34,
		"RABI_22_PORTAL_EDIT":      35,
		"AWD_RABI_22_NSV_PLACE_ID": 36,
	}
)

func (x PlaceTagProperty) Enum() *PlaceTagProperty {
	p := new(PlaceTagProperty)
	*p = x
	return p
}

func (x PlaceTagProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceTagProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[13].Descriptor()
}

func (PlaceTagProperty) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[13]
}

func (x PlaceTagProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceTagProperty.Descriptor instead.
func (PlaceTagProperty) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{13}
}

type PlaceTagName int32

const (
	PlaceTagName_NO_PLACE_TAG            PlaceTagName = 0
	PlaceTagName_FARM_NAME               PlaceTagName = 1
	PlaceTagName_POPULATION              PlaceTagName = 2
	PlaceTagName_DISTRICT_NAME           PlaceTagName = 4
	PlaceTagName_AWD_PIPE                PlaceTagName = 5
	PlaceTagName_AWD_AERATION            PlaceTagName = 6
	PlaceTagName_AWD_BUND                PlaceTagName = 7
	PlaceTagName_Actor                   PlaceTagName = 8
	PlaceTagName_TagName_FARMER          PlaceTagName = 9
	PlaceTagName_PROGRAM                 PlaceTagName = 10
	PlaceTagName_TagName_FARM            PlaceTagName = 11
	PlaceTagName_PARENT                  PlaceTagName = 12
	PlaceTagName_TagName_APPROVAL_STATUS PlaceTagName = 13
	PlaceTagName_CONTENT_METADATA        PlaceTagName = 14
	PlaceTagName_REFERRAL                PlaceTagName = 15
	PlaceTagName_GEOFENCE                PlaceTagName = 16
	PlaceTagName_PINGS                   PlaceTagName = 17
	PlaceTagName_LOCKS                   PlaceTagName = 18
)

// Enum value maps for PlaceTagName.
var (
	PlaceTagName_name = map[int32]string{
		0:  "NO_PLACE_TAG",
		1:  "FARM_NAME",
		2:  "POPULATION",
		4:  "DISTRICT_NAME",
		5:  "AWD_PIPE",
		6:  "AWD_AERATION",
		7:  "AWD_BUND",
		8:  "Actor",
		9:  "TagName_FARMER",
		10: "PROGRAM",
		11: "TagName_FARM",
		12: "PARENT",
		13: "TagName_APPROVAL_STATUS",
		14: "CONTENT_METADATA",
		15: "REFERRAL",
		16: "GEOFENCE",
		17: "PINGS",
		18: "LOCKS",
	}
	PlaceTagName_value = map[string]int32{
		"NO_PLACE_TAG":            0,
		"FARM_NAME":               1,
		"POPULATION":              2,
		"DISTRICT_NAME":           4,
		"AWD_PIPE":                5,
		"AWD_AERATION":            6,
		"AWD_BUND":                7,
		"Actor":                   8,
		"TagName_FARMER":          9,
		"PROGRAM":                 10,
		"TagName_FARM":            11,
		"PARENT":                  12,
		"TagName_APPROVAL_STATUS": 13,
		"CONTENT_METADATA":        14,
		"REFERRAL":                15,
		"GEOFENCE":                16,
		"PINGS":                   17,
		"LOCKS":                   18,
	}
)

func (x PlaceTagName) Enum() *PlaceTagName {
	p := new(PlaceTagName)
	*p = x
	return p
}

func (x PlaceTagName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceTagName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[14].Descriptor()
}

func (PlaceTagName) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[14]
}

func (x PlaceTagName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceTagName.Descriptor instead.
func (PlaceTagName) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{14}
}

type GeometryRepresentationType int32

const (
	GeometryRepresentationType_WKB      GeometryRepresentationType = 0
	GeometryRepresentationType_WKT      GeometryRepresentationType = 1
	GeometryRepresentationType_GEO_JSON GeometryRepresentationType = 2
)

// Enum value maps for GeometryRepresentationType.
var (
	GeometryRepresentationType_name = map[int32]string{
		0: "WKB",
		1: "WKT",
		2: "GEO_JSON",
	}
	GeometryRepresentationType_value = map[string]int32{
		"WKB":      0,
		"WKT":      1,
		"GEO_JSON": 2,
	}
)

func (x GeometryRepresentationType) Enum() *GeometryRepresentationType {
	p := new(GeometryRepresentationType)
	*p = x
	return p
}

func (x GeometryRepresentationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeometryRepresentationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[15].Descriptor()
}

func (GeometryRepresentationType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[15]
}

func (x GeometryRepresentationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeometryRepresentationType.Descriptor instead.
func (GeometryRepresentationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{15}
}

type ValidationResponseCode int32

const (
	ValidationResponseCode_NO_CODE                                         ValidationResponseCode = 0
	ValidationResponseCode_TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_CODE          ValidationResponseCode = 4001
	ValidationResponseCode_TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_CODE          ValidationResponseCode = 4002
	ValidationResponseCode_TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_CODE      ValidationResponseCode = 4003
	ValidationResponseCode_PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_CODE ValidationResponseCode = 4004
	ValidationResponseCode_PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_CODE ValidationResponseCode = 4005
	ValidationResponseCode_PICTURE_TOO_FAR_FROM_GEOFENCE_CODE              ValidationResponseCode = 4006
	ValidationResponseCode_NO_PIPE_INSTALLED_CODE                          ValidationResponseCode = 4007
	ValidationResponseCode_POINT_OUTSIDE_POLYGON_CODE                      ValidationResponseCode = 4008
	ValidationResponseCode_MORE_POINT_INSIDE_POLYGON_CODE                  ValidationResponseCode = 4009
	ValidationResponseCode_POINT_INSIDE_POLYGON_CODE                       ValidationResponseCode = 4010
)

// Enum value maps for ValidationResponseCode.
var (
	ValidationResponseCode_name = map[int32]string{
		0:    "NO_CODE",
		4001: "TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_CODE",
		4002: "TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_CODE",
		4003: "TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_CODE",
		4004: "PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_CODE",
		4005: "PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_CODE",
		4006: "PICTURE_TOO_FAR_FROM_GEOFENCE_CODE",
		4007: "NO_PIPE_INSTALLED_CODE",
		4008: "POINT_OUTSIDE_POLYGON_CODE",
		4009: "MORE_POINT_INSIDE_POLYGON_CODE",
		4010: "POINT_INSIDE_POLYGON_CODE",
	}
	ValidationResponseCode_value = map[string]int32{
		"NO_CODE":                                         0,
		"TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_CODE":          4001,
		"TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_CODE":          4002,
		"TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_CODE":      4003,
		"PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_CODE": 4004,
		"PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_CODE": 4005,
		"PICTURE_TOO_FAR_FROM_GEOFENCE_CODE":              4006,
		"NO_PIPE_INSTALLED_CODE":                          4007,
		"POINT_OUTSIDE_POLYGON_CODE":                      4008,
		"MORE_POINT_INSIDE_POLYGON_CODE":                  4009,
		"POINT_INSIDE_POLYGON_CODE":                       4010,
	}
)

func (x ValidationResponseCode) Enum() *ValidationResponseCode {
	p := new(ValidationResponseCode)
	*p = x
	return p
}

func (x ValidationResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[16].Descriptor()
}

func (ValidationResponseCode) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[16]
}

func (x ValidationResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationResponseCode.Descriptor instead.
func (ValidationResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{16}
}

type ValidationResponseMsg int32

const (
	ValidationResponseMsg_NO_MESSAGE                                     ValidationResponseMsg = 0
	ValidationResponseMsg_TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_MSG          ValidationResponseMsg = 1
	ValidationResponseMsg_TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_MSG          ValidationResponseMsg = 2
	ValidationResponseMsg_TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_MSG      ValidationResponseMsg = 3
	ValidationResponseMsg_PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_MSG ValidationResponseMsg = 4
	ValidationResponseMsg_PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_MSG ValidationResponseMsg = 5
	ValidationResponseMsg_PICTURE_TOO_FAR_FROM_FENCE_MSG                 ValidationResponseMsg = 6
	ValidationResponseMsg_NO_PIPE_INSTALLED_MSG                          ValidationResponseMsg = 7
	ValidationResponseMsg_POINT_OUTSIDE_POLYGON_MSG                      ValidationResponseMsg = 8
	ValidationResponseMsg_MORE_POINT_INSIDE_POLYGON_MSG                  ValidationResponseMsg = 9
	ValidationResponseMsg_POINT_INSIDE_POLYGON_MSG                       ValidationResponseMsg = 10
)

// Enum value maps for ValidationResponseMsg.
var (
	ValidationResponseMsg_name = map[int32]string{
		0:  "NO_MESSAGE",
		1:  "TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_MSG",
		2:  "TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_MSG",
		3:  "TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_MSG",
		4:  "PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_MSG",
		5:  "PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_MSG",
		6:  "PICTURE_TOO_FAR_FROM_FENCE_MSG",
		7:  "NO_PIPE_INSTALLED_MSG",
		8:  "POINT_OUTSIDE_POLYGON_MSG",
		9:  "MORE_POINT_INSIDE_POLYGON_MSG",
		10: "POINT_INSIDE_POLYGON_MSG",
	}
	ValidationResponseMsg_value = map[string]int32{
		"NO_MESSAGE":                                     0,
		"TOO_CLOSE_TO_ANOTHER_PIPE_PICTURE_MSG":          1,
		"TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_MSG":          2,
		"TOO_CLOSE_TO_ANOTHER_AERATION_PICTURE_MSG":      3,
		"PICTURE_LOCATION_LIES_INSIDE_ANOTHER_FENCE_MSG": 4,
		"PICTURE_LOCATION_NOT_LIES_INSIDE_ANY_FENCE_MSG": 5,
		"PICTURE_TOO_FAR_FROM_FENCE_MSG":                 6,
		"NO_PIPE_INSTALLED_MSG":                          7,
		"POINT_OUTSIDE_POLYGON_MSG":                      8,
		"MORE_POINT_INSIDE_POLYGON_MSG":                  9,
		"POINT_INSIDE_POLYGON_MSG":                       10,
	}
)

func (x ValidationResponseMsg) Enum() *ValidationResponseMsg {
	p := new(ValidationResponseMsg)
	*p = x
	return p
}

func (x ValidationResponseMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationResponseMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[17].Descriptor()
}

func (ValidationResponseMsg) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[17]
}

func (x ValidationResponseMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationResponseMsg.Descriptor instead.
func (ValidationResponseMsg) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{17}
}

type GeoResponseStatus int32

const (
	GeoResponseStatus_NO_RESPONSE        GeoResponseStatus = 0
	GeoResponseStatus_FAILED_TO_VALIDATE GeoResponseStatus = 1
	GeoResponseStatus_FAILED_TO_INSERT   GeoResponseStatus = 2
)

// Enum value maps for GeoResponseStatus.
var (
	GeoResponseStatus_name = map[int32]string{
		0: "NO_RESPONSE",
		1: "FAILED_TO_VALIDATE",
		2: "FAILED_TO_INSERT",
	}
	GeoResponseStatus_value = map[string]int32{
		"NO_RESPONSE":        0,
		"FAILED_TO_VALIDATE": 1,
		"FAILED_TO_INSERT":   2,
	}
)

func (x GeoResponseStatus) Enum() *GeoResponseStatus {
	p := new(GeoResponseStatus)
	*p = x
	return p
}

func (x GeoResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[18].Descriptor()
}

func (GeoResponseStatus) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[18]
}

func (x GeoResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoResponseStatus.Descriptor instead.
func (GeoResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{18}
}

type GeoValidationType int32

const (
	GeoValidationType_NO_GEO_VALIDATION_TYPE              GeoValidationType = 0
	GeoValidationType_POINT_PROXIMITY_VALIDATION          GeoValidationType = 1
	GeoValidationType_GEOMETRY_INSIDE_GEOMETRY_VALIDATION GeoValidationType = 2
	GeoValidationType_GEOMETRY_OVERLAP_VALIDATION         GeoValidationType = 3
	GeoValidationType_GEOMETRY_EXISTENCE_VALIDATION       GeoValidationType = 4
)

// Enum value maps for GeoValidationType.
var (
	GeoValidationType_name = map[int32]string{
		0: "NO_GEO_VALIDATION_TYPE",
		1: "POINT_PROXIMITY_VALIDATION",
		2: "GEOMETRY_INSIDE_GEOMETRY_VALIDATION",
		3: "GEOMETRY_OVERLAP_VALIDATION",
		4: "GEOMETRY_EXISTENCE_VALIDATION",
	}
	GeoValidationType_value = map[string]int32{
		"NO_GEO_VALIDATION_TYPE":              0,
		"POINT_PROXIMITY_VALIDATION":          1,
		"GEOMETRY_INSIDE_GEOMETRY_VALIDATION": 2,
		"GEOMETRY_OVERLAP_VALIDATION":         3,
		"GEOMETRY_EXISTENCE_VALIDATION":       4,
	}
)

func (x GeoValidationType) Enum() *GeoValidationType {
	p := new(GeoValidationType)
	*p = x
	return p
}

func (x GeoValidationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoValidationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[19].Descriptor()
}

func (GeoValidationType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[19]
}

func (x GeoValidationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoValidationType.Descriptor instead.
func (GeoValidationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{19}
}

type GeoValidationName int32

const (
	GeoValidationName_NO_GEO_VALIDATION_NAME                           GeoValidationName = 0
	GeoValidationName_POINT_X_WITHIN_K_METRES_FROM_POINT_Y             GeoValidationName = 1
	GeoValidationName_POINT_X_LEAST_K_METRES_FROM_POINT_Y              GeoValidationName = 2
	GeoValidationName_POINT_X_WITHIN_K_METRES_FROM_POLYGON_Y           GeoValidationName = 3
	GeoValidationName_POINT_X_LEAST_K_METRES_FROM_POLYGON_Y            GeoValidationName = 4
	GeoValidationName_POINT_X_ALONE_LIES_INSIDE_POLYGON_Y              GeoValidationName = 5
	GeoValidationName_POLYGON_X_INSIDE_POLYGON_Y                       GeoValidationName = 6
	GeoValidationName_POINT_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS        GeoValidationName = 7
	GeoValidationName_POLYGON_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS      GeoValidationName = 8
	GeoValidationName_GEOMETRY_X_OVERLAPS_GEOMETRY_Y                   GeoValidationName = 9
	GeoValidationName_GEOMETRY_X_OVERLAPS_ANY_TARGET_SET_OF_GEOMETRIES GeoValidationName = 10
	GeoValidationName_GEOMETRY_X_EXISTS_IN_RESPECTIVE_DATASET          GeoValidationName = 11
)

// Enum value maps for GeoValidationName.
var (
	GeoValidationName_name = map[int32]string{
		0:  "NO_GEO_VALIDATION_NAME",
		1:  "POINT_X_WITHIN_K_METRES_FROM_POINT_Y",
		2:  "POINT_X_LEAST_K_METRES_FROM_POINT_Y",
		3:  "POINT_X_WITHIN_K_METRES_FROM_POLYGON_Y",
		4:  "POINT_X_LEAST_K_METRES_FROM_POLYGON_Y",
		5:  "POINT_X_ALONE_LIES_INSIDE_POLYGON_Y",
		6:  "POLYGON_X_INSIDE_POLYGON_Y",
		7:  "POINT_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS",
		8:  "POLYGON_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS",
		9:  "GEOMETRY_X_OVERLAPS_GEOMETRY_Y",
		10: "GEOMETRY_X_OVERLAPS_ANY_TARGET_SET_OF_GEOMETRIES",
		11: "GEOMETRY_X_EXISTS_IN_RESPECTIVE_DATASET",
	}
	GeoValidationName_value = map[string]int32{
		"NO_GEO_VALIDATION_NAME":                           0,
		"POINT_X_WITHIN_K_METRES_FROM_POINT_Y":             1,
		"POINT_X_LEAST_K_METRES_FROM_POINT_Y":              2,
		"POINT_X_WITHIN_K_METRES_FROM_POLYGON_Y":           3,
		"POINT_X_LEAST_K_METRES_FROM_POLYGON_Y":            4,
		"POINT_X_ALONE_LIES_INSIDE_POLYGON_Y":              5,
		"POLYGON_X_INSIDE_POLYGON_Y":                       6,
		"POINT_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS":        7,
		"POLYGON_X_INSIDE_ANY_TARGET_SET_OF_POLYGONS":      8,
		"GEOMETRY_X_OVERLAPS_GEOMETRY_Y":                   9,
		"GEOMETRY_X_OVERLAPS_ANY_TARGET_SET_OF_GEOMETRIES": 10,
		"GEOMETRY_X_EXISTS_IN_RESPECTIVE_DATASET":          11,
	}
)

func (x GeoValidationName) Enum() *GeoValidationName {
	p := new(GeoValidationName)
	*p = x
	return p
}

func (x GeoValidationName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoValidationName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[20].Descriptor()
}

func (GeoValidationName) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[20]
}

func (x GeoValidationName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoValidationName.Descriptor instead.
func (GeoValidationName) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{20}
}

type AssertionType int32

const (
	AssertionType_DEFAULT_ASSERTION_TYPE AssertionType = 0
	AssertionType_ASSERT_TRUE            AssertionType = 1
	AssertionType_ASSERT_FALSE           AssertionType = 2
	AssertionType_ASSERT_EQUALS          AssertionType = 3
)

// Enum value maps for AssertionType.
var (
	AssertionType_name = map[int32]string{
		0: "DEFAULT_ASSERTION_TYPE",
		1: "ASSERT_TRUE",
		2: "ASSERT_FALSE",
		3: "ASSERT_EQUALS",
	}
	AssertionType_value = map[string]int32{
		"DEFAULT_ASSERTION_TYPE": 0,
		"ASSERT_TRUE":            1,
		"ASSERT_FALSE":           2,
		"ASSERT_EQUALS":          3,
	}
)

func (x AssertionType) Enum() *AssertionType {
	p := new(AssertionType)
	*p = x
	return p
}

func (x AssertionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[21].Descriptor()
}

func (AssertionType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[21]
}

func (x AssertionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionType.Descriptor instead.
func (AssertionType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{21}
}

type GeoDataSource int32

const (
	GeoDataSource_NO_FARM_TYPE    GeoDataSource = 0
	GeoDataSource_USER_FARM_DATA  GeoDataSource = 1
	GeoDataSource_USER_POINT_DATA GeoDataSource = 2
)

// Enum value maps for GeoDataSource.
var (
	GeoDataSource_name = map[int32]string{
		0: "NO_FARM_TYPE",
		1: "USER_FARM_DATA",
		2: "USER_POINT_DATA",
	}
	GeoDataSource_value = map[string]int32{
		"NO_FARM_TYPE":    0,
		"USER_FARM_DATA":  1,
		"USER_POINT_DATA": 2,
	}
)

func (x GeoDataSource) Enum() *GeoDataSource {
	p := new(GeoDataSource)
	*p = x
	return p
}

func (x GeoDataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoDataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[22].Descriptor()
}

func (GeoDataSource) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[22]
}

func (x GeoDataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoDataSource.Descriptor instead.
func (GeoDataSource) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{22}
}

type FilterKey int32

const (
	FilterKey_NO_KEY         FilterKey = 0
	FilterKey_TAG_ID         FilterKey = 1
	FilterKey_PLACE_Id       FilterKey = 2
	FilterKey_TAG_NAME       FilterKey = 3
	FilterKey_TAG_KEY        FilterKey = 4
	FilterKey_TAG_VALUE      FilterKey = 5
	FilterKey_TILE_KEY       FilterKey = 6
	FilterKey_REFERENCE_TYPE FilterKey = 7
	FilterKey_ATTRIBUTE      FilterKey = 8
	FilterKey_ATTRIBUTE_KEY  FilterKey = 9
)

// Enum value maps for FilterKey.
var (
	FilterKey_name = map[int32]string{
		0: "NO_KEY",
		1: "TAG_ID",
		2: "PLACE_Id",
		3: "TAG_NAME",
		4: "TAG_KEY",
		5: "TAG_VALUE",
		6: "TILE_KEY",
		7: "REFERENCE_TYPE",
		8: "ATTRIBUTE",
		9: "ATTRIBUTE_KEY",
	}
	FilterKey_value = map[string]int32{
		"NO_KEY":         0,
		"TAG_ID":         1,
		"PLACE_Id":       2,
		"TAG_NAME":       3,
		"TAG_KEY":        4,
		"TAG_VALUE":      5,
		"TILE_KEY":       6,
		"REFERENCE_TYPE": 7,
		"ATTRIBUTE":      8,
		"ATTRIBUTE_KEY":  9,
	}
)

func (x FilterKey) Enum() *FilterKey {
	p := new(FilterKey)
	*p = x
	return p
}

func (x FilterKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterKey) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[23].Descriptor()
}

func (FilterKey) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[23]
}

func (x FilterKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterKey.Descriptor instead.
func (FilterKey) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{23}
}

type ReferenceType int32

const (
	ReferenceType_NO_ENTITY_TYPE    ReferenceType = 0
	ReferenceType_DEVICE_REF_TYPE   ReferenceType = 1
	ReferenceType_MACHINE_REF_TYPE  ReferenceType = 2
	ReferenceType_USER              ReferenceType = 3
	ReferenceType_FARM_REF_TYPE     ReferenceType = 4
	ReferenceType_OPERATOR_REF_TYPE ReferenceType = 5
	ReferenceType_PARENT_REF_TYPE   ReferenceType = 6
)

// Enum value maps for ReferenceType.
var (
	ReferenceType_name = map[int32]string{
		0: "NO_ENTITY_TYPE",
		1: "DEVICE_REF_TYPE",
		2: "MACHINE_REF_TYPE",
		3: "USER",
		4: "FARM_REF_TYPE",
		5: "OPERATOR_REF_TYPE",
		6: "PARENT_REF_TYPE",
	}
	ReferenceType_value = map[string]int32{
		"NO_ENTITY_TYPE":    0,
		"DEVICE_REF_TYPE":   1,
		"MACHINE_REF_TYPE":  2,
		"USER":              3,
		"FARM_REF_TYPE":     4,
		"OPERATOR_REF_TYPE": 5,
		"PARENT_REF_TYPE":   6,
	}
)

func (x ReferenceType) Enum() *ReferenceType {
	p := new(ReferenceType)
	*p = x
	return p
}

func (x ReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[24].Descriptor()
}

func (ReferenceType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[24]
}

func (x ReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceType.Descriptor instead.
func (ReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{24}
}

type AttributeKey int32

const (
	AttributeKey_NO_ATTRIBUTE_KEY         AttributeKey = 0
	AttributeKey_ID                       AttributeKey = 1
	AttributeKey_ATT_NAME                 AttributeKey = 2
	AttributeKey_SERIAL_NO                AttributeKey = 3
	AttributeKey_MACHINE_ID               AttributeKey = 4
	AttributeKey_DEVICE_ID                AttributeKey = 5
	AttributeKey_ACRE_SPRAYED             AttributeKey = 6
	AttributeKey_ADDRESS                  AttributeKey = 7
	AttributeKey_FARM_ID_ATTRIBUTE_KEY    AttributeKey = 8
	AttributeKey_FUEL_TYPE                AttributeKey = 9
	AttributeKey_LAND_ACRES               AttributeKey = 10
	AttributeKey_MACHINE_NUMBER           AttributeKey = 11
	AttributeKey_PHONE_NO                 AttributeKey = 12
	AttributeKey_RABI_22_CONTENT_ID_ATT   AttributeKey = 13
	AttributeKey_KHARIF_22_CONTENT_ID_ATT AttributeKey = 14
)

// Enum value maps for AttributeKey.
var (
	AttributeKey_name = map[int32]string{
		0:  "NO_ATTRIBUTE_KEY",
		1:  "ID",
		2:  "ATT_NAME",
		3:  "SERIAL_NO",
		4:  "MACHINE_ID",
		5:  "DEVICE_ID",
		6:  "ACRE_SPRAYED",
		7:  "ADDRESS",
		8:  "FARM_ID_ATTRIBUTE_KEY",
		9:  "FUEL_TYPE",
		10: "LAND_ACRES",
		11: "MACHINE_NUMBER",
		12: "PHONE_NO",
		13: "RABI_22_CONTENT_ID_ATT",
		14: "KHARIF_22_CONTENT_ID_ATT",
	}
	AttributeKey_value = map[string]int32{
		"NO_ATTRIBUTE_KEY":         0,
		"ID":                       1,
		"ATT_NAME":                 2,
		"SERIAL_NO":                3,
		"MACHINE_ID":               4,
		"DEVICE_ID":                5,
		"ACRE_SPRAYED":             6,
		"ADDRESS":                  7,
		"FARM_ID_ATTRIBUTE_KEY":    8,
		"FUEL_TYPE":                9,
		"LAND_ACRES":               10,
		"MACHINE_NUMBER":           11,
		"PHONE_NO":                 12,
		"RABI_22_CONTENT_ID_ATT":   13,
		"KHARIF_22_CONTENT_ID_ATT": 14,
	}
)

func (x AttributeKey) Enum() *AttributeKey {
	p := new(AttributeKey)
	*p = x
	return p
}

func (x AttributeKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeKey) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[25].Descriptor()
}

func (AttributeKey) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[25]
}

func (x AttributeKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeKey.Descriptor instead.
func (AttributeKey) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{25}
}

type ServiceName int32

const (
	ServiceName_NO_SERVICE_NAME   ServiceName = 0
	ServiceName_MAPS_VECTOR_STORE ServiceName = 1
	ServiceName_MAPS_PLACES_STORE ServiceName = 2
	ServiceName_MAPS_RASTER_INDEX ServiceName = 3
)

// Enum value maps for ServiceName.
var (
	ServiceName_name = map[int32]string{
		0: "NO_SERVICE_NAME",
		1: "MAPS_VECTOR_STORE",
		2: "MAPS_PLACES_STORE",
		3: "MAPS_RASTER_INDEX",
	}
	ServiceName_value = map[string]int32{
		"NO_SERVICE_NAME":   0,
		"MAPS_VECTOR_STORE": 1,
		"MAPS_PLACES_STORE": 2,
		"MAPS_RASTER_INDEX": 3,
	}
)

func (x ServiceName) Enum() *ServiceName {
	p := new(ServiceName)
	*p = x
	return p
}

func (x ServiceName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[26].Descriptor()
}

func (ServiceName) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[26]
}

func (x ServiceName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceName.Descriptor instead.
func (ServiceName) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{26}
}

type ValueType int32

const (
	ValueType_NO_VALUE_TYPE           ValueType = 0
	ValueType_VALUE_TYPE_DOUBLE       ValueType = 1
	ValueType_VALUE_TYPE_STRING       ValueType = 2
	ValueType_VALUE_TYPE_BOOLEAN      ValueType = 3
	ValueType_VALUE_TYPE_INT64        ValueType = 4
	ValueType_VALUE_TYPE_INT32        ValueType = 5
	ValueType_VALUE_TYPE_NSV_PLACE_ID ValueType = 6
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "NO_VALUE_TYPE",
		1: "VALUE_TYPE_DOUBLE",
		2: "VALUE_TYPE_STRING",
		3: "VALUE_TYPE_BOOLEAN",
		4: "VALUE_TYPE_INT64",
		5: "VALUE_TYPE_INT32",
		6: "VALUE_TYPE_NSV_PLACE_ID",
	}
	ValueType_value = map[string]int32{
		"NO_VALUE_TYPE":           0,
		"VALUE_TYPE_DOUBLE":       1,
		"VALUE_TYPE_STRING":       2,
		"VALUE_TYPE_BOOLEAN":      3,
		"VALUE_TYPE_INT64":        4,
		"VALUE_TYPE_INT32":        5,
		"VALUE_TYPE_NSV_PLACE_ID": 6,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[27].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[27]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{27}
}

type ValidationName int32

const (
	ValidationName_NO_VALIDATION                ValidationName = 0
	ValidationName_AERATION_EVENT_VALIDATION    ValidationName = 1
	ValidationName_PIPE_INSTALLATION_VALIDATION ValidationName = 2
	ValidationName_INSIDE_BUND_VALIDATION       ValidationName = 3
	ValidationName_INSIDE_GEOFENCE_VALIDATION   ValidationName = 4
)

// Enum value maps for ValidationName.
var (
	ValidationName_name = map[int32]string{
		0: "NO_VALIDATION",
		1: "AERATION_EVENT_VALIDATION",
		2: "PIPE_INSTALLATION_VALIDATION",
		3: "INSIDE_BUND_VALIDATION",
		4: "INSIDE_GEOFENCE_VALIDATION",
	}
	ValidationName_value = map[string]int32{
		"NO_VALIDATION":                0,
		"AERATION_EVENT_VALIDATION":    1,
		"PIPE_INSTALLATION_VALIDATION": 2,
		"INSIDE_BUND_VALIDATION":       3,
		"INSIDE_GEOFENCE_VALIDATION":   4,
	}
)

func (x ValidationName) Enum() *ValidationName {
	p := new(ValidationName)
	*p = x
	return p
}

func (x ValidationName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[28].Descriptor()
}

func (ValidationName) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[28]
}

func (x ValidationName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationName.Descriptor instead.
func (ValidationName) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{28}
}

type ValidationType int32

const (
	ValidationType_NO_VALIDATION_TYPE  ValidationType = 0
	ValidationType_VALIDATION_TYPE_DSR ValidationType = 1
	ValidationType_VALIDATION_TYPE_AWD ValidationType = 2
)

// Enum value maps for ValidationType.
var (
	ValidationType_name = map[int32]string{
		0: "NO_VALIDATION_TYPE",
		1: "VALIDATION_TYPE_DSR",
		2: "VALIDATION_TYPE_AWD",
	}
	ValidationType_value = map[string]int32{
		"NO_VALIDATION_TYPE":  0,
		"VALIDATION_TYPE_DSR": 1,
		"VALIDATION_TYPE_AWD": 2,
	}
)

func (x ValidationType) Enum() *ValidationType {
	p := new(ValidationType)
	*p = x
	return p
}

func (x ValidationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[29].Descriptor()
}

func (ValidationType) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[29]
}

func (x ValidationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationType.Descriptor instead.
func (ValidationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{29}
}

type HealthParameters int32

const (
	HealthParameters_SYSTEM_HEALTH   HealthParameters = 0
	HealthParameters_DB_HEALTH       HealthParameters = 1
	HealthParameters_CACHE_HEALTH    HealthParameters = 2
	HealthParameters_UPSTREAM_HEALTH HealthParameters = 3
)

// Enum value maps for HealthParameters.
var (
	HealthParameters_name = map[int32]string{
		0: "SYSTEM_HEALTH",
		1: "DB_HEALTH",
		2: "CACHE_HEALTH",
		3: "UPSTREAM_HEALTH",
	}
	HealthParameters_value = map[string]int32{
		"SYSTEM_HEALTH":   0,
		"DB_HEALTH":       1,
		"CACHE_HEALTH":    2,
		"UPSTREAM_HEALTH": 3,
	}
)

func (x HealthParameters) Enum() *HealthParameters {
	p := new(HealthParameters)
	*p = x
	return p
}

func (x HealthParameters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthParameters) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[30].Descriptor()
}

func (HealthParameters) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[30]
}

func (x HealthParameters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthParameters.Descriptor instead.
func (HealthParameters) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{30}
}

type CloudStore int32

const (
	CloudStore_NO_Cloud_Store          CloudStore = 0
	CloudStore_S3_Cloud_Store          CloudStore = 1
	CloudStore_Cloud_Front_Cloud_Store CloudStore = 2
)

// Enum value maps for CloudStore.
var (
	CloudStore_name = map[int32]string{
		0: "NO_Cloud_Store",
		1: "S3_Cloud_Store",
		2: "Cloud_Front_Cloud_Store",
	}
	CloudStore_value = map[string]int32{
		"NO_Cloud_Store":          0,
		"S3_Cloud_Store":          1,
		"Cloud_Front_Cloud_Store": 2,
	}
)

func (x CloudStore) Enum() *CloudStore {
	p := new(CloudStore)
	*p = x
	return p
}

func (x CloudStore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudStore) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[31].Descriptor()
}

func (CloudStore) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[31]
}

func (x CloudStore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudStore.Descriptor instead.
func (CloudStore) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{31}
}

type UrlBuilder int32

const (
	UrlBuilder_NO_URL_BUILDER UrlBuilder = 0
	UrlBuilder_URL_BUILDER_1  UrlBuilder = 1
)

// Enum value maps for UrlBuilder.
var (
	UrlBuilder_name = map[int32]string{
		0: "NO_URL_BUILDER",
		1: "URL_BUILDER_1",
	}
	UrlBuilder_value = map[string]int32{
		"NO_URL_BUILDER": 0,
		"URL_BUILDER_1":  1,
	}
)

func (x UrlBuilder) Enum() *UrlBuilder {
	p := new(UrlBuilder)
	*p = x
	return p
}

func (x UrlBuilder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UrlBuilder) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[32].Descriptor()
}

func (UrlBuilder) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[32]
}

func (x UrlBuilder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UrlBuilder.Descriptor instead.
func (UrlBuilder) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{32}
}

type Satellite int32

const (
	Satellite_NO_SATELLITE Satellite = 0
	Satellite_SATELLITE_S1 Satellite = 1
)

// Enum value maps for Satellite.
var (
	Satellite_name = map[int32]string{
		0: "NO_SATELLITE",
		1: "SATELLITE_S1",
	}
	Satellite_value = map[string]int32{
		"NO_SATELLITE": 0,
		"SATELLITE_S1": 1,
	}
)

func (x Satellite) Enum() *Satellite {
	p := new(Satellite)
	*p = x
	return p
}

func (x Satellite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Satellite) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[33].Descriptor()
}

func (Satellite) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[33]
}

func (x Satellite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Satellite.Descriptor instead.
func (Satellite) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{33}
}

type Band int32

const (
	Band_NO_BAND Band = 0
	Band_BAND_VH Band = 1
	Band_BAND_VV Band = 2
)

// Enum value maps for Band.
var (
	Band_name = map[int32]string{
		0: "NO_BAND",
		1: "BAND_VH",
		2: "BAND_VV",
	}
	Band_value = map[string]int32{
		"NO_BAND": 0,
		"BAND_VH": 1,
		"BAND_VV": 2,
	}
)

func (x Band) Enum() *Band {
	p := new(Band)
	*p = x
	return p
}

func (x Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Band) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[34].Descriptor()
}

func (Band) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[34]
}

func (x Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Band.Descriptor instead.
func (Band) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{34}
}

type AppName int32

const (
	AppName_NO_APP_NAME  AppName = 0
	AppName_APP_NAME_AWD AppName = 1
	AppName_APP_NAME_CRM AppName = 2
	AppName_APP_NAME_DSR AppName = 3
)

// Enum value maps for AppName.
var (
	AppName_name = map[int32]string{
		0: "NO_APP_NAME",
		1: "APP_NAME_AWD",
		2: "APP_NAME_CRM",
		3: "APP_NAME_DSR",
	}
	AppName_value = map[string]int32{
		"NO_APP_NAME":  0,
		"APP_NAME_AWD": 1,
		"APP_NAME_CRM": 2,
		"APP_NAME_DSR": 3,
	}
)

func (x AppName) Enum() *AppName {
	p := new(AppName)
	*p = x
	return p
}

func (x AppName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_geo_enums_proto_enumTypes[35].Descriptor()
}

func (AppName) Type() protoreflect.EnumType {
	return &file_Common_geo_enums_proto_enumTypes[35]
}

func (x AppName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppName.Descriptor instead.
func (AppName) EnumDescriptor() ([]byte, []int) {
	return file_Common_geo_enums_proto_rawDescGZIP(), []int{35}
}

var File_Common_geo_enums_proto protoreflect.FileDescriptor

var file_Common_geo_enums_proto_rawDesc = []byte{
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2a, 0x79, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x45, 0x42, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x4d, 0x42, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x52,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x90, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f,
	0x4c, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49,
	0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x41, 0x52, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f,
	0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e,
	0x54, 0x49, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x48, 0x10, 0x06, 0x2a, 0x32, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x2a, 0x6b,
	0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x45,
	0x47, 0x4f, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x4f, 0x50,
	0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x4f, 0x50, 0x10, 0x64, 0x12, 0x12,
	0x0a, 0x0d, 0x42, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0xac, 0x02, 0x2a, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x4c, 0x59, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52,
	0x4f, 0x50, 0x5f, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52,
	0x4f, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52, 0x4f,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x66, 0x2a, 0x37, 0x0a, 0x17, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10,
	0x00, 0x2a, 0x36, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x2a, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x47, 0x45, 0x4f, 0x4d, 0x45,
	0x54, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xa4,
	0x01, 0x0a, 0x09, 0x55, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x5f, 0x55, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x49,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x49, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4f, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55,
	0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4f,
	0x53, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x49, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0x95, 0x03, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4c, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x57, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f,
	0x32, 0x30, 0x32, 0x31, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x52, 0x43, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x52, 0x43, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x31, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x32, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x33, 0x5f, 0x53,
	0x52, 0x43, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x5f, 0x41, 0x57, 0x44, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x42, 0x42, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4f,
	0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x0f,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x33, 0x10, 0x10,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x4c, 0x5f, 0x31, 0x5f, 0x4c,
	0x32, 0x41, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x10, 0x12, 0x2a, 0x82, 0x03,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x4c, 0x4c, 0x41,
	0x47, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x49, 0x50, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53,
	0x50, 0x52, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x57, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x53, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x4e, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x57, 0x44,
	0x5f, 0x32, 0x32, 0x5f, 0x4b, 0x48, 0x41, 0x52, 0x49, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x4d,
	0x5f, 0x32, 0x32, 0x5f, 0x4b, 0x48, 0x41, 0x52, 0x49, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x53, 0x52,
	0x5f, 0x32, 0x32, 0x5f, 0x4b, 0x48, 0x41, 0x52, 0x49, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x55,
	0x4e, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0e,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x0f, 0x2a, 0x97, 0x05, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x43, 0x52, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4d, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x45, 0x48, 0x53, 0x49, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x49, 0x4c, 0x4c, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x33, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x33, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x11, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x52,
	0x4d, 0x5f, 0x49, 0x44, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x47, 0x44, 0x4e, 0x10, 0x17, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x52, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x48, 0x41,
	0x52, 0x49, 0x46, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x1b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x42, 0x49, 0x5f,
	0x32, 0x30, 0x32, 0x32, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x1d, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x5f, 0x4e, 0x53, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x42, 0x49, 0x5f,
	0x32, 0x30, 0x32, 0x32, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x1f,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x48,
	0x41, 0x52, 0x49, 0x46, 0x5f, 0x32, 0x32, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x32,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x23, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x57, 0x44, 0x5f, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x32, 0x5f, 0x4e, 0x53,
	0x56, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x24, 0x2a, 0xaf, 0x02, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x57, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x57, 0x44, 0x5f, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x57, 0x44, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45,
	0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x12, 0x2a, 0x3c,
	0x0a, 0x1a, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x57, 0x4b, 0x42, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x45, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xc8, 0x03, 0x0a,
	0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x26, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa1,
	0x1f, 0x12, 0x2b, 0x0a, 0x26, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x5f, 0x50,
	0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa2, 0x1f, 0x12, 0x2f,
	0x0a, 0x2a, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41,
	0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa3, 0x1f, 0x12,
	0x34, 0x0a, 0x2f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0xa4, 0x1f, 0x12, 0x34, 0x0a, 0x2f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x49,
	0x45, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x46, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa5, 0x1f, 0x12, 0x27, 0x0a, 0x22, 0x50,
	0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xa6, 0x1f, 0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa7,
	0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xa8, 0x1f, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xa9, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xaa, 0x1f, 0x2a, 0xb3, 0x03, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x50,
	0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x4f, 0x4f, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x41, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x49,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x4e, 0x59, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41,
	0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50,
	0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x2a, 0x52, 0x0a,
	0x11, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x2a, 0xbc, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x47, 0x45,
	0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x58, 0x49, 0x4d, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x2a, 0x89, 0x04, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x47, 0x45, 0x4f,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x49, 0x4e, 0x5f, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x59, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4b, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x59, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x45, 0x53,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x59, 0x10,
	0x03, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58, 0x5f, 0x4c, 0x45, 0x41,
	0x53, 0x54, 0x5f, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x59, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58, 0x5f, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49,
	0x45, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f,
	0x4e, 0x5f, 0x59, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e,
	0x5f, 0x58, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f,
	0x4e, 0x5f, 0x59, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x58,
	0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f,
	0x4e, 0x53, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f,
	0x58, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47,
	0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52,
	0x59, 0x5f, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x53, 0x5f, 0x47, 0x45, 0x4f,
	0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x59, 0x10, 0x09, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x45, 0x4f,
	0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x53,
	0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0x0a, 0x12,
	0x2b, 0x0a, 0x27, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x58, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x0b, 0x2a, 0x61, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x53,
	0x45, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x53,
	0x53, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x2a,
	0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x09,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x64, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x41, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x41, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41,
	0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4c,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x09, 0x2a, 0x97, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4d,
	0x5f, 0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x2a, 0x9d, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e,
	0x4f, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x52, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x0c, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x41, 0x42, 0x49, 0x5f, 0x32, 0x32, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x48, 0x41,
	0x52, 0x49, 0x46, 0x5f, 0x32, 0x32, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x54, 0x54, 0x10, 0x0e, 0x2a, 0x67, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x41, 0x50, 0x53, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x50, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x50,
	0x53, 0x5f, 0x52, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x03,
	0x2a, 0xad, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x53, 0x56, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x06,
	0x2a, 0xa0, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45,
	0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x53, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x57, 0x44, 0x10, 0x02, 0x2a,
	0x5b, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x42, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x0a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x33, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x02, 0x2a,
	0x33, 0x0a, 0x0a, 0x55, 0x72, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x4f, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x52, 0x4c, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52,
	0x5f, 0x31, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45,
	0x5f, 0x53, 0x31, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x56, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x56, 0x56, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x57, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x52, 0x4d, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x53, 0x52, 0x10, 0x03, 0x42, 0x58, 0x0a, 0x28, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa0, 0x01, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Common_geo_enums_proto_rawDescOnce sync.Once
	file_Common_geo_enums_proto_rawDescData = file_Common_geo_enums_proto_rawDesc
)

func file_Common_geo_enums_proto_rawDescGZIP() []byte {
	file_Common_geo_enums_proto_rawDescOnce.Do(func() {
		file_Common_geo_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_geo_enums_proto_rawDescData)
	})
	return file_Common_geo_enums_proto_rawDescData
}

var file_Common_geo_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 36)
var file_Common_geo_enums_proto_goTypes = []interface{}{
	(ProjectionType)(0),             // 0: farm.nurture.core.contracts.common.ProjectionType
	(PlaceNamespace)(0),             // 1: farm.nurture.core.contracts.common.PlaceNamespace
	(PlaceType)(0),                  // 2: farm.nurture.core.contracts.common.PlaceType
	(TemporalResolutionType)(0),     // 3: farm.nurture.core.contracts.common.TemporalResolutionType
	(DataType)(0),                   // 4: farm.nurture.core.contracts.common.DataType
	(GeometryType)(0),               // 5: farm.nurture.core.contracts.common.GeometryType
	(DataPropertyType)(0),           // 6: farm.nurture.core.contracts.common.DataPropertyType
	(TemporalResolutionLevel)(0),    // 7: farm.nurture.core.contracts.common.TemporalResolutionLevel
	(DataPropCategoryType)(0),       // 8: farm.nurture.core.contracts.common.DataPropCategoryType
	(GeoStatusResult)(0),            // 9: farm.nurture.core.contracts.common.GeoStatusResult
	(UI_CLIENT)(0),                  // 10: farm.nurture.core.contracts.common.UI_CLIENT
	(PlaceSourceType)(0),            // 11: farm.nurture.core.contracts.common.PlaceSourceType
	(PlaceVisibleType)(0),           // 12: farm.nurture.core.contracts.common.PlaceVisibleType
	(PlaceTagProperty)(0),           // 13: farm.nurture.core.contracts.common.PlaceTagProperty
	(PlaceTagName)(0),               // 14: farm.nurture.core.contracts.common.PlaceTagName
	(GeometryRepresentationType)(0), // 15: farm.nurture.core.contracts.common.GeometryRepresentationType
	(ValidationResponseCode)(0),     // 16: farm.nurture.core.contracts.common.ValidationResponseCode
	(ValidationResponseMsg)(0),      // 17: farm.nurture.core.contracts.common.ValidationResponseMsg
	(GeoResponseStatus)(0),          // 18: farm.nurture.core.contracts.common.GeoResponseStatus
	(GeoValidationType)(0),          // 19: farm.nurture.core.contracts.common.GeoValidationType
	(GeoValidationName)(0),          // 20: farm.nurture.core.contracts.common.GeoValidationName
	(AssertionType)(0),              // 21: farm.nurture.core.contracts.common.AssertionType
	(GeoDataSource)(0),              // 22: farm.nurture.core.contracts.common.GeoDataSource
	(FilterKey)(0),                  // 23: farm.nurture.core.contracts.common.FilterKey
	(ReferenceType)(0),              // 24: farm.nurture.core.contracts.common.ReferenceType
	(AttributeKey)(0),               // 25: farm.nurture.core.contracts.common.AttributeKey
	(ServiceName)(0),                // 26: farm.nurture.core.contracts.common.ServiceName
	(ValueType)(0),                  // 27: farm.nurture.core.contracts.common.ValueType
	(ValidationName)(0),             // 28: farm.nurture.core.contracts.common.ValidationName
	(ValidationType)(0),             // 29: farm.nurture.core.contracts.common.ValidationType
	(HealthParameters)(0),           // 30: farm.nurture.core.contracts.common.HealthParameters
	(CloudStore)(0),                 // 31: farm.nurture.core.contracts.common.CloudStore
	(UrlBuilder)(0),                 // 32: farm.nurture.core.contracts.common.UrlBuilder
	(Satellite)(0),                  // 33: farm.nurture.core.contracts.common.Satellite
	(Band)(0),                       // 34: farm.nurture.core.contracts.common.Band
	(AppName)(0),                    // 35: farm.nurture.core.contracts.common.AppName
}
var file_Common_geo_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Common_geo_enums_proto_init() }
func file_Common_geo_enums_proto_init() {
	if File_Common_geo_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_geo_enums_proto_rawDesc,
			NumEnums:      36,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_geo_enums_proto_goTypes,
		DependencyIndexes: file_Common_geo_enums_proto_depIdxs,
		EnumInfos:         file_Common_geo_enums_proto_enumTypes,
	}.Build()
	File_Common_geo_enums_proto = out.File
	file_Common_geo_enums_proto_rawDesc = nil
	file_Common_geo_enums_proto_goTypes = nil
	file_Common_geo_enums_proto_depIdxs = nil
}
