// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: Common/geo_common.proto

package Common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlaceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceTagName          string           `protobuf:"bytes,1,opt,name=placeTagName,proto3" json:"placeTagName,omitempty"`
	PlaceTagPropertyName  string           `protobuf:"bytes,2,opt,name=placeTagPropertyName,proto3" json:"placeTagPropertyName,omitempty"`
	PlaceTagPropertyValue string           `protobuf:"bytes,3,opt,name=placeTagPropertyValue,proto3" json:"placeTagPropertyValue,omitempty"`
	TagName               PlaceTagName     `protobuf:"varint,4,opt,name=TagName,proto3,enum=farm.nurture.core.contracts.common.PlaceTagName" json:"TagName,omitempty"`
	TagPropertyKey        PlaceTagProperty `protobuf:"varint,5,opt,name=TagPropertyKey,proto3,enum=farm.nurture.core.contracts.common.PlaceTagProperty" json:"TagPropertyKey,omitempty"`
	TagPropertyValue      string           `protobuf:"bytes,6,opt,name=TagPropertyValue,proto3" json:"TagPropertyValue,omitempty"`
	PlaceTagId            int64            `protobuf:"varint,7,opt,name=PlaceTagId,proto3" json:"PlaceTagId,omitempty"`
	Value                 *PlaceTagValue   `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlaceTag) Reset() {
	*x = PlaceTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceTag) ProtoMessage() {}

func (x *PlaceTag) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceTag.ProtoReflect.Descriptor instead.
func (*PlaceTag) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{0}
}

func (x *PlaceTag) GetPlaceTagName() string {
	if x != nil {
		return x.PlaceTagName
	}
	return ""
}

func (x *PlaceTag) GetPlaceTagPropertyName() string {
	if x != nil {
		return x.PlaceTagPropertyName
	}
	return ""
}

func (x *PlaceTag) GetPlaceTagPropertyValue() string {
	if x != nil {
		return x.PlaceTagPropertyValue
	}
	return ""
}

func (x *PlaceTag) GetTagName() PlaceTagName {
	if x != nil {
		return x.TagName
	}
	return PlaceTagName_NO_PLACE_TAG
}

func (x *PlaceTag) GetTagPropertyKey() PlaceTagProperty {
	if x != nil {
		return x.TagPropertyKey
	}
	return PlaceTagProperty_NO_PLACE_TAG_PROPERTY
}

func (x *PlaceTag) GetTagPropertyValue() string {
	if x != nil {
		return x.TagPropertyValue
	}
	return ""
}

func (x *PlaceTag) GetPlaceTagId() int64 {
	if x != nil {
		return x.PlaceTagId
	}
	return 0
}

func (x *PlaceTag) GetValue() *PlaceTagValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg     ValidationResponseMsg  `protobuf:"varint,1,opt,name=msg,proto3,enum=farm.nurture.core.contracts.common.ValidationResponseMsg" json:"msg,omitempty"`
	ValCode ValidationResponseCode `protobuf:"varint,2,opt,name=valCode,proto3,enum=farm.nurture.core.contracts.common.ValidationResponseCode" json:"valCode,omitempty"`
	Dsc     string                 `protobuf:"bytes,3,opt,name=dsc,proto3" json:"dsc,omitempty"`
	Valid   bool                   `protobuf:"varint,4,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidationResponse) Reset() {
	*x = ValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResponse) ProtoMessage() {}

func (x *ValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResponse.ProtoReflect.Descriptor instead.
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationResponse) GetMsg() ValidationResponseMsg {
	if x != nil {
		return x.Msg
	}
	return ValidationResponseMsg_NO_MESSAGE
}

func (x *ValidationResponse) GetValCode() ValidationResponseCode {
	if x != nil {
		return x.ValCode
	}
	return ValidationResponseCode_NO_CODE
}

func (x *ValidationResponse) GetDsc() string {
	if x != nil {
		return x.Dsc
	}
	return ""
}

func (x *ValidationResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GeoPlaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry                   string                     `protobuf:"bytes,1,opt,name=geometry,proto3" json:"geometry,omitempty"`
	PlaceId                    int64                      `protobuf:"varint,2,opt,name=PlaceId,proto3" json:"PlaceId,omitempty"`
	GeometryRepresentationType GeometryRepresentationType `protobuf:"varint,3,opt,name=geometryRepresentationType,proto3,enum=farm.nurture.core.contracts.common.GeometryRepresentationType" json:"geometryRepresentationType,omitempty"`
	PlaceTags                  []*PlaceTag                `protobuf:"bytes,4,rep,name=PlaceTags,proto3" json:"PlaceTags,omitempty"`
}

func (x *GeoPlaces) Reset() {
	*x = GeoPlaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPlaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPlaces) ProtoMessage() {}

func (x *GeoPlaces) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPlaces.ProtoReflect.Descriptor instead.
func (*GeoPlaces) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{2}
}

func (x *GeoPlaces) GetGeometry() string {
	if x != nil {
		return x.Geometry
	}
	return ""
}

func (x *GeoPlaces) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *GeoPlaces) GetGeometryRepresentationType() GeometryRepresentationType {
	if x != nil {
		return x.GeometryRepresentationType
	}
	return GeometryRepresentationType_WKB
}

func (x *GeoPlaces) GetPlaceTags() []*PlaceTag {
	if x != nil {
		return x.PlaceTags
	}
	return nil
}

type ValidationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VldtRs         *ValidationResponse `protobuf:"bytes,1,opt,name=vldtRs,proto3" json:"vldtRs,omitempty"`
	Valid          bool                `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	ValidationType GeoValidationType   `protobuf:"varint,3,opt,name=validationType,proto3,enum=farm.nurture.core.contracts.common.GeoValidationType" json:"validationType,omitempty"`
	ValidationName GeoValidationName   `protobuf:"varint,4,opt,name=validationName,proto3,enum=farm.nurture.core.contracts.common.GeoValidationName" json:"validationName,omitempty"`
	AssertType     AssertionType       `protobuf:"varint,5,opt,name=assertType,proto3,enum=farm.nurture.core.contracts.common.AssertionType" json:"assertType,omitempty"`
	Places         []*GeoPlaces        `protobuf:"bytes,6,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *ValidationResults) Reset() {
	*x = ValidationResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResults) ProtoMessage() {}

func (x *ValidationResults) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResults.ProtoReflect.Descriptor instead.
func (*ValidationResults) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationResults) GetVldtRs() *ValidationResponse {
	if x != nil {
		return x.VldtRs
	}
	return nil
}

func (x *ValidationResults) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidationResults) GetValidationType() GeoValidationType {
	if x != nil {
		return x.ValidationType
	}
	return GeoValidationType_NO_GEO_VALIDATION_TYPE
}

func (x *ValidationResults) GetValidationName() GeoValidationName {
	if x != nil {
		return x.ValidationName
	}
	return GeoValidationName_NO_GEO_VALIDATION_NAME
}

func (x *ValidationResults) GetAssertType() AssertionType {
	if x != nil {
		return x.AssertType
	}
	return AssertionType_DEFAULT_ASSERTION_TYPE
}

func (x *ValidationResults) GetPlaces() []*GeoPlaces {
	if x != nil {
		return x.Places
	}
	return nil
}

type GeometryToValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlcSrcType            PlaceSourceType            `protobuf:"varint,1,opt,name=PlcSrcType,proto3,enum=farm.nurture.core.contracts.common.PlaceSourceType" json:"PlcSrcType,omitempty"`
	PlcNmspce             PlaceNamespace             `protobuf:"varint,2,opt,name=PlcNmspce,proto3,enum=farm.nurture.core.contracts.common.PlaceNamespace" json:"PlcNmspce,omitempty"`
	PlcVsble              PlaceVisibleType           `protobuf:"varint,3,opt,name=PlcVsble,proto3,enum=farm.nurture.core.contracts.common.PlaceVisibleType" json:"PlcVsble,omitempty"`
	Version               string                     `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	AuditRequired         bool                       `protobuf:"varint,5,opt,name=AuditRequired,proto3" json:"AuditRequired,omitempty"`
	MinZoom               int32                      `protobuf:"varint,6,opt,name=MinZoom,proto3" json:"MinZoom,omitempty"`
	MaxZoom               int32                      `protobuf:"varint,7,opt,name=MaxZoom,proto3" json:"MaxZoom,omitempty"`
	UiClient              UI_CLIENT                  `protobuf:"varint,9,opt,name=UiClient,proto3,enum=farm.nurture.core.contracts.common.UI_CLIENT" json:"UiClient,omitempty"`
	ValidationsApplicable []*ValidationsApplicable   `protobuf:"bytes,10,rep,name=validationsApplicable,proto3" json:"validationsApplicable,omitempty"`
	GmRprType             GeometryRepresentationType `protobuf:"varint,15,opt,name=gmRprType,proto3,enum=farm.nurture.core.contracts.common.GeometryRepresentationType" json:"gmRprType,omitempty"`
	Gmt                   string                     `protobuf:"bytes,16,opt,name=gmt,proto3" json:"gmt,omitempty"`
	ThresholdDistance     int32                      `protobuf:"varint,17,opt,name=thresholdDistance,proto3" json:"thresholdDistance,omitempty"`
	PlcIds                []int64                    `protobuf:"varint,18,rep,packed,name=plcIds,proto3" json:"plcIds,omitempty"`
}

func (x *GeometryToValidate) Reset() {
	*x = GeometryToValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryToValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryToValidate) ProtoMessage() {}

func (x *GeometryToValidate) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryToValidate.ProtoReflect.Descriptor instead.
func (*GeometryToValidate) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{4}
}

func (x *GeometryToValidate) GetPlcSrcType() PlaceSourceType {
	if x != nil {
		return x.PlcSrcType
	}
	return PlaceSourceType_NO_SOURCE_TYPE
}

func (x *GeometryToValidate) GetPlcNmspce() PlaceNamespace {
	if x != nil {
		return x.PlcNmspce
	}
	return PlaceNamespace_POLITICAL_NAMESPACE
}

func (x *GeometryToValidate) GetPlcVsble() PlaceVisibleType {
	if x != nil {
		return x.PlcVsble
	}
	return PlaceVisibleType_NO_VISIBLE_TYPE
}

func (x *GeometryToValidate) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GeometryToValidate) GetAuditRequired() bool {
	if x != nil {
		return x.AuditRequired
	}
	return false
}

func (x *GeometryToValidate) GetMinZoom() int32 {
	if x != nil {
		return x.MinZoom
	}
	return 0
}

func (x *GeometryToValidate) GetMaxZoom() int32 {
	if x != nil {
		return x.MaxZoom
	}
	return 0
}

func (x *GeometryToValidate) GetUiClient() UI_CLIENT {
	if x != nil {
		return x.UiClient
	}
	return UI_CLIENT_NO_UI_CLIENT
}

func (x *GeometryToValidate) GetValidationsApplicable() []*ValidationsApplicable {
	if x != nil {
		return x.ValidationsApplicable
	}
	return nil
}

func (x *GeometryToValidate) GetGmRprType() GeometryRepresentationType {
	if x != nil {
		return x.GmRprType
	}
	return GeometryRepresentationType_WKB
}

func (x *GeometryToValidate) GetGmt() string {
	if x != nil {
		return x.Gmt
	}
	return ""
}

func (x *GeometryToValidate) GetThresholdDistance() int32 {
	if x != nil {
		return x.ThresholdDistance
	}
	return 0
}

func (x *GeometryToValidate) GetPlcIds() []int64 {
	if x != nil {
		return x.PlcIds
	}
	return nil
}

type ValidationsApplicable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationType GeoValidationType `protobuf:"varint,1,opt,name=validationType,proto3,enum=farm.nurture.core.contracts.common.GeoValidationType" json:"validationType,omitempty"`
	ValidationName GeoValidationName `protobuf:"varint,2,opt,name=validationName,proto3,enum=farm.nurture.core.contracts.common.GeoValidationName" json:"validationName,omitempty"`
	AssertType     AssertionType     `protobuf:"varint,3,opt,name=assertType,proto3,enum=farm.nurture.core.contracts.common.AssertionType" json:"assertType,omitempty"`
}

func (x *ValidationsApplicable) Reset() {
	*x = ValidationsApplicable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationsApplicable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationsApplicable) ProtoMessage() {}

func (x *ValidationsApplicable) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationsApplicable.ProtoReflect.Descriptor instead.
func (*ValidationsApplicable) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{5}
}

func (x *ValidationsApplicable) GetValidationType() GeoValidationType {
	if x != nil {
		return x.ValidationType
	}
	return GeoValidationType_NO_GEO_VALIDATION_TYPE
}

func (x *ValidationsApplicable) GetValidationName() GeoValidationName {
	if x != nil {
		return x.ValidationName
	}
	return GeoValidationName_NO_GEO_VALIDATION_NAME
}

func (x *ValidationsApplicable) GetAssertType() AssertionType {
	if x != nil {
		return x.AssertType
	}
	return AssertionType_DEFAULT_ASSERTION_TYPE
}

type FilterArguments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceIds       []int64            `protobuf:"varint,1,rep,packed,name=placeIds,proto3" json:"placeIds,omitempty"`
	PlaceTagIds    []int64            `protobuf:"varint,2,rep,packed,name=placeTagIds,proto3" json:"placeTagIds,omitempty"`
	TagNames       []PlaceTagName     `protobuf:"varint,3,rep,packed,name=tagNames,proto3,enum=farm.nurture.core.contracts.common.PlaceTagName" json:"tagNames,omitempty"`
	TagProperties  []PlaceTagProperty `protobuf:"varint,4,rep,packed,name=tagProperties,proto3,enum=farm.nurture.core.contracts.common.PlaceTagProperty" json:"tagProperties,omitempty"`
	StringValues   []string           `protobuf:"bytes,5,rep,name=StringValues,proto3" json:"StringValues,omitempty"`
	ReferenceTypes []ReferenceType    `protobuf:"varint,6,rep,packed,name=reference_types,json=referenceTypes,proto3,enum=farm.nurture.core.contracts.common.ReferenceType" json:"reference_types,omitempty"`
	AttributeKeys  []AttributeKey     `protobuf:"varint,7,rep,packed,name=attribute_keys,json=attributeKeys,proto3,enum=farm.nurture.core.contracts.common.AttributeKey" json:"attribute_keys,omitempty"`
	Values         []*Value           `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FilterArguments) Reset() {
	*x = FilterArguments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterArguments) ProtoMessage() {}

func (x *FilterArguments) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterArguments.ProtoReflect.Descriptor instead.
func (*FilterArguments) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{6}
}

func (x *FilterArguments) GetPlaceIds() []int64 {
	if x != nil {
		return x.PlaceIds
	}
	return nil
}

func (x *FilterArguments) GetPlaceTagIds() []int64 {
	if x != nil {
		return x.PlaceTagIds
	}
	return nil
}

func (x *FilterArguments) GetTagNames() []PlaceTagName {
	if x != nil {
		return x.TagNames
	}
	return nil
}

func (x *FilterArguments) GetTagProperties() []PlaceTagProperty {
	if x != nil {
		return x.TagProperties
	}
	return nil
}

func (x *FilterArguments) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *FilterArguments) GetReferenceTypes() []ReferenceType {
	if x != nil {
		return x.ReferenceTypes
	}
	return nil
}

func (x *FilterArguments) GetAttributeKeys() []AttributeKey {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *FilterArguments) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCondition     *BaseConditions `protobuf:"bytes,1,opt,name=baseCondition,proto3" json:"baseCondition,omitempty"`
	CombiningOperator LogicOperator   `protobuf:"varint,2,opt,name=combiningOperator,proto3,enum=farm.nurture.core.contracts.common.LogicOperator" json:"combiningOperator,omitempty"`
	Conditions        []*Filter       `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{7}
}

func (x *Filter) GetBaseCondition() *BaseConditions {
	if x != nil {
		return x.BaseCondition
	}
	return nil
}

func (x *Filter) GetCombiningOperator() LogicOperator {
	if x != nil {
		return x.CombiningOperator
	}
	return LogicOperator_NO_VALUE
}

func (x *Filter) GetConditions() []*Filter {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type BaseConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterKey FilterKey           `protobuf:"varint,1,opt,name=filterKey,proto3,enum=farm.nurture.core.contracts.common.FilterKey" json:"filterKey,omitempty"`
	Operator  ComparisonCheckType `protobuf:"varint,2,opt,name=operator,proto3,enum=farm.nurture.core.contracts.common.ComparisonCheckType" json:"operator,omitempty"`
	Argument  *FilterArguments    `protobuf:"bytes,3,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *BaseConditions) Reset() {
	*x = BaseConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseConditions) ProtoMessage() {}

func (x *BaseConditions) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseConditions.ProtoReflect.Descriptor instead.
func (*BaseConditions) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{8}
}

func (x *BaseConditions) GetFilterKey() FilterKey {
	if x != nil {
		return x.FilterKey
	}
	return FilterKey_NO_KEY
}

func (x *BaseConditions) GetOperator() ComparisonCheckType {
	if x != nil {
		return x.Operator
	}
	return ComparisonCheckType_NO_COMPARISON_CHECK_TYPE
}

func (x *BaseConditions) GetArgument() *FilterArguments {
	if x != nil {
		return x.Argument
	}
	return nil
}

type ReferenceAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceType ReferenceType `protobuf:"varint,1,opt,name=reference_type,json=referenceType,proto3,enum=farm.nurture.core.contracts.common.ReferenceType" json:"reference_type,omitempty"`
	Attributes    []*Attribute  `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ReferenceAttribute) Reset() {
	*x = ReferenceAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceAttribute) ProtoMessage() {}

func (x *ReferenceAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceAttribute.ProtoReflect.Descriptor instead.
func (*ReferenceAttribute) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{9}
}

func (x *ReferenceAttribute) GetReferenceType() ReferenceType {
	if x != nil {
		return x.ReferenceType
	}
	return ReferenceType_NO_ENTITY_TYPE
}

func (x *ReferenceAttribute) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ZoomRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinZoom int32 `protobuf:"varint,1,opt,name=minZoom,proto3" json:"minZoom,omitempty"`
	MaxZoom int32 `protobuf:"varint,2,opt,name=maxZoom,proto3" json:"maxZoom,omitempty"`
}

func (x *ZoomRange) Reset() {
	*x = ZoomRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomRange) ProtoMessage() {}

func (x *ZoomRange) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomRange.ProtoReflect.Descriptor instead.
func (*ZoomRange) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{10}
}

func (x *ZoomRange) GetMinZoom() int32 {
	if x != nil {
		return x.MinZoom
	}
	return 0
}

func (x *ZoomRange) GetMaxZoom() int32 {
	if x != nil {
		return x.MaxZoom
	}
	return 0
}

type MapTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zoom  int32 `protobuf:"varint,1,opt,name=zoom,proto3" json:"zoom,omitempty"`
	TileX int64 `protobuf:"varint,2,opt,name=tileX,proto3" json:"tileX,omitempty"`
	TileY int64 `protobuf:"varint,3,opt,name=tileY,proto3" json:"tileY,omitempty"`
}

func (x *MapTile) Reset() {
	*x = MapTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTile) ProtoMessage() {}

func (x *MapTile) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTile.ProtoReflect.Descriptor instead.
func (*MapTile) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{11}
}

func (x *MapTile) GetZoom() int32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *MapTile) GetTileX() int64 {
	if x != nil {
		return x.TileX
	}
	return 0
}

func (x *MapTile) GetTileY() int64 {
	if x != nil {
		return x.TileY
	}
	return 0
}

type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    PlaceNamespace   `protobuf:"varint,1,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.PlaceNamespace" json:"namespace,omitempty"`
	SourceType   PlaceSourceType  `protobuf:"varint,2,opt,name=sourceType,proto3,enum=farm.nurture.core.contracts.common.PlaceSourceType" json:"sourceType,omitempty"`
	VisibleType  PlaceVisibleType `protobuf:"varint,3,opt,name=visibleType,proto3,enum=farm.nurture.core.contracts.common.PlaceVisibleType" json:"visibleType,omitempty"`
	ModelVersion string           `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	ZoomHints    *ZoomRange       `protobuf:"bytes,5,opt,name=zoom_hints,json=zoomHints,proto3" json:"zoom_hints,omitempty"`
	Client       UI_CLIENT        `protobuf:"varint,6,opt,name=client,proto3,enum=farm.nurture.core.contracts.common.UI_CLIENT" json:"client,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{12}
}

func (x *Environment) GetNamespace() PlaceNamespace {
	if x != nil {
		return x.Namespace
	}
	return PlaceNamespace_POLITICAL_NAMESPACE
}

func (x *Environment) GetSourceType() PlaceSourceType {
	if x != nil {
		return x.SourceType
	}
	return PlaceSourceType_NO_SOURCE_TYPE
}

func (x *Environment) GetVisibleType() PlaceVisibleType {
	if x != nil {
		return x.VisibleType
	}
	return PlaceVisibleType_NO_VISIBLE_TYPE
}

func (x *Environment) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *Environment) GetZoomHints() *ZoomRange {
	if x != nil {
		return x.ZoomHints
	}
	return nil
}

func (x *Environment) GetClient() UI_CLIENT {
	if x != nil {
		return x.Client
	}
	return UI_CLIENT_NO_UI_CLIENT
}

type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry            string                     `protobuf:"bytes,1,opt,name=geometry,proto3" json:"geometry,omitempty"`
	RepresentationType  GeometryRepresentationType `protobuf:"varint,2,opt,name=representation_type,json=representationType,proto3,enum=farm.nurture.core.contracts.common.GeometryRepresentationType" json:"representation_type,omitempty"`
	Tags                []*PlaceTag                `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	ReferenceAttributes []*ReferenceAttribute      `protobuf:"bytes,4,rep,name=reference_attributes,json=referenceAttributes,proto3" json:"reference_attributes,omitempty"`
	TimeRange           *TimeRange                 `protobuf:"bytes,5,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	PlaceId             int64                      `protobuf:"varint,6,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	SourceId            int64                      `protobuf:"varint,7,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Version             int64                      `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Deleted             bool                       `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Overlap             bool                       `protobuf:"varint,10,opt,name=overlap,proto3" json:"overlap,omitempty"`
	SourceIdStr         string                     `protobuf:"bytes,11,opt,name=source_id_str,json=sourceIdStr,proto3" json:"source_id_str,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{13}
}

func (x *Place) GetGeometry() string {
	if x != nil {
		return x.Geometry
	}
	return ""
}

func (x *Place) GetRepresentationType() GeometryRepresentationType {
	if x != nil {
		return x.RepresentationType
	}
	return GeometryRepresentationType_WKB
}

func (x *Place) GetTags() []*PlaceTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Place) GetReferenceAttributes() []*ReferenceAttribute {
	if x != nil {
		return x.ReferenceAttributes
	}
	return nil
}

func (x *Place) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *Place) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *Place) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *Place) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Place) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Place) GetOverlap() bool {
	if x != nil {
		return x.Overlap
	}
	return false
}

func (x *Place) GetSourceIdStr() string {
	if x != nil {
		return x.SourceIdStr
	}
	return ""
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   AttributeKey `protobuf:"varint,1,opt,name=key,proto3,enum=farm.nurture.core.contracts.common.AttributeKey" json:"key,omitempty"`
	Value *Value       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{14}
}

func (x *Attribute) GetKey() AttributeKey {
	if x != nil {
		return x.Key
	}
	return AttributeKey_NO_ATTRIBUTE_KEY
}

func (x *Attribute) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType   ValueType `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=farm.nurture.core.contracts.common.ValueType" json:"value_type,omitempty"`
	NumberValue float64   `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3" json:"number_value,omitempty"`
	StringValue string    `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool      `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	Int64Value  int64     `protobuf:"varint,5,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Int32Value  int32     `protobuf:"varint,6,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{15}
}

func (x *Value) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_NO_VALUE_TYPE
}

func (x *Value) GetNumberValue() float64 {
	if x != nil {
		return x.NumberValue
	}
	return 0
}

func (x *Value) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *Value) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *Value) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckOverlap bool `protobuf:"varint,1,opt,name=check_overlap,json=checkOverlap,proto3" json:"check_overlap,omitempty"`
	GetDetails   bool `protobuf:"varint,2,opt,name=get_details,json=getDetails,proto3" json:"get_details,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{16}
}

func (x *Options) GetCheckOverlap() bool {
	if x != nil {
		return x.CheckOverlap
	}
	return false
}

func (x *Options) GetGetDetails() bool {
	if x != nil {
		return x.GetDetails
	}
	return false
}

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgdnID int64 `protobuf:"varint,1,opt,name=ugdnID,proto3" json:"ugdnID,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{17}
}

func (x *UserContext) GetUgdnID() int64 {
	if x != nil {
		return x.UgdnID
	}
	return 0
}

type PlacesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId                   string                     `protobuf:"bytes,1,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	Geometry                   string                     `protobuf:"bytes,2,opt,name=geometry,proto3" json:"geometry,omitempty"`
	PlaceId                    int64                      `protobuf:"varint,3,opt,name=PlaceId,proto3" json:"PlaceId,omitempty"`
	GeometryRepresentationType GeometryRepresentationType `protobuf:"varint,4,opt,name=geometryRepresentationType,proto3,enum=farm.nurture.core.contracts.common.GeometryRepresentationType" json:"geometryRepresentationType,omitempty"`
	PlaceTags                  []*PlaceTag                `protobuf:"bytes,5,rep,name=PlaceTags,proto3" json:"PlaceTags,omitempty"`
	PlaceSourceType            PlaceSourceType            `protobuf:"varint,6,opt,name=place_source_type,json=placeSourceType,proto3,enum=farm.nurture.core.contracts.common.PlaceSourceType" json:"place_source_type,omitempty"`
	PlaceNameSpace             PlaceNamespace             `protobuf:"varint,7,opt,name=place_name_space,json=placeNameSpace,proto3,enum=farm.nurture.core.contracts.common.PlaceNamespace" json:"place_name_space,omitempty"`
	PlaceVisibleType           PlaceVisibleType           `protobuf:"varint,8,opt,name=place_visible_type,json=placeVisibleType,proto3,enum=farm.nurture.core.contracts.common.PlaceVisibleType" json:"place_visible_type,omitempty"`
	GeometryType               GeometryType               `protobuf:"varint,9,opt,name=geometry_type,json=geometryType,proto3,enum=farm.nurture.core.contracts.common.GeometryType" json:"geometry_type,omitempty"`
}

func (x *PlacesData) Reset() {
	*x = PlacesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacesData) ProtoMessage() {}

func (x *PlacesData) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacesData.ProtoReflect.Descriptor instead.
func (*PlacesData) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{18}
}

func (x *PlacesData) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *PlacesData) GetGeometry() string {
	if x != nil {
		return x.Geometry
	}
	return ""
}

func (x *PlacesData) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *PlacesData) GetGeometryRepresentationType() GeometryRepresentationType {
	if x != nil {
		return x.GeometryRepresentationType
	}
	return GeometryRepresentationType_WKB
}

func (x *PlacesData) GetPlaceTags() []*PlaceTag {
	if x != nil {
		return x.PlaceTags
	}
	return nil
}

func (x *PlacesData) GetPlaceSourceType() PlaceSourceType {
	if x != nil {
		return x.PlaceSourceType
	}
	return PlaceSourceType_NO_SOURCE_TYPE
}

func (x *PlacesData) GetPlaceNameSpace() PlaceNamespace {
	if x != nil {
		return x.PlaceNameSpace
	}
	return PlaceNamespace_POLITICAL_NAMESPACE
}

func (x *PlacesData) GetPlaceVisibleType() PlaceVisibleType {
	if x != nil {
		return x.PlaceVisibleType
	}
	return PlaceVisibleType_NO_VISIBLE_TYPE
}

func (x *PlacesData) GetGeometryType() GeometryType {
	if x != nil {
		return x.GeometryType
	}
	return GeometryType_INVALID_GEOMETRY_TYPE
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditRequired bool        `protobuf:"varint,1,opt,name=audit_required,json=auditRequired,proto3" json:"audit_required,omitempty"`
	Overlap       bool        `protobuf:"varint,2,opt,name=overlap,proto3" json:"overlap,omitempty"`
	SoftDelete    bool        `protobuf:"varint,3,opt,name=soft_delete,json=softDelete,proto3" json:"soft_delete,omitempty"`
	ServiceName   ServiceName `protobuf:"varint,4,opt,name=service_name,json=serviceName,proto3,enum=farm.nurture.core.contracts.common.ServiceName" json:"service_name,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{19}
}

func (x *Configuration) GetAuditRequired() bool {
	if x != nil {
		return x.AuditRequired
	}
	return false
}

func (x *Configuration) GetOverlap() bool {
	if x != nil {
		return x.Overlap
	}
	return false
}

func (x *Configuration) GetSoftDelete() bool {
	if x != nil {
		return x.SoftDelete
	}
	return false
}

func (x *Configuration) GetServiceName() ServiceName {
	if x != nil {
		return x.ServiceName
	}
	return ServiceName_NO_SERVICE_NAME
}

type TileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env       *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	MapTiles  []*MapTile   `protobuf:"bytes,2,rep,name=mapTiles,proto3" json:"mapTiles,omitempty"`
	TagFilter *Filter      `protobuf:"bytes,3,opt,name=tag_filter,json=tagFilter,proto3" json:"tag_filter,omitempty"`
}

func (x *TileRequest) Reset() {
	*x = TileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileRequest) ProtoMessage() {}

func (x *TileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileRequest.ProtoReflect.Descriptor instead.
func (*TileRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{20}
}

func (x *TileRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TileRequest) GetMapTiles() []*MapTile {
	if x != nil {
		return x.MapTiles
	}
	return nil
}

func (x *TileRequest) GetTagFilter() *Filter {
	if x != nil {
		return x.TagFilter
	}
	return nil
}

type TileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env    *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Places []*Place     `protobuf:"bytes,2,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *TileResponse) Reset() {
	*x = TileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileResponse) ProtoMessage() {}

func (x *TileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileResponse.ProtoReflect.Descriptor instead.
func (*TileResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{21}
}

func (x *TileResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TileResponse) GetPlaces() []*Place {
	if x != nil {
		return x.Places
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env     *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Places  []*Place     `protobuf:"bytes,2,rep,name=places,proto3" json:"places,omitempty"`
	Options *Options     `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateRequest) GetPlaces() []*Place {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *UpdateRequest) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env                *Environment         `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	UpdatedPlaces      []*Place             `protobuf:"bytes,2,rep,name=updated_places,json=updatedPlaces,proto3" json:"updated_places,omitempty"`
	UpdatedPlacesCount int64                `protobuf:"varint,3,opt,name=updated_places_count,json=updatedPlacesCount,proto3" json:"updated_places_count,omitempty"`
	PlacesWithOverlaps []*OverlappingPlaces `protobuf:"bytes,4,rep,name=places_with_overlaps,json=placesWithOverlaps,proto3" json:"places_with_overlaps,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateResponse) GetUpdatedPlaces() []*Place {
	if x != nil {
		return x.UpdatedPlaces
	}
	return nil
}

func (x *UpdateResponse) GetUpdatedPlacesCount() int64 {
	if x != nil {
		return x.UpdatedPlacesCount
	}
	return 0
}

func (x *UpdateResponse) GetPlacesWithOverlaps() []*OverlappingPlaces {
	if x != nil {
		return x.PlacesWithOverlaps
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env      *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	PlaceIds []int64      `protobuf:"varint,2,rep,packed,name=place_ids,json=placeIds,proto3" json:"place_ids,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *DeleteRequest) GetPlaceIds() []int64 {
	if x != nil {
		return x.PlaceIds
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env           *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	DeletedCount  int64        `protobuf:"varint,2,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
	DeletedPlaces []*Place     `protobuf:"bytes,3,rep,name=deleted_places,json=deletedPlaces,proto3" json:"deleted_places,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *DeleteResponse) GetDeletedCount() int64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

func (x *DeleteResponse) GetDeletedPlaces() []*Place {
	if x != nil {
		return x.DeletedPlaces
	}
	return nil
}

type InsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env       *Environment `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Options   *Options     `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	Places    []*Place     `protobuf:"bytes,3,rep,name=places,proto3" json:"places,omitempty"`
	TagFilter *Filter      `protobuf:"bytes,4,opt,name=tag_filter,json=tagFilter,proto3" json:"tag_filter,omitempty"`
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{26}
}

func (x *InsertRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *InsertRequest) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InsertRequest) GetPlaces() []*Place {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *InsertRequest) GetTagFilter() *Filter {
	if x != nil {
		return x.TagFilter
	}
	return nil
}

type InsertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env                     *Environment         `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	InsertedOrUpdatedPlaces []*Place             `protobuf:"bytes,2,rep,name=inserted_or_updated_places,json=insertedOrUpdatedPlaces,proto3" json:"inserted_or_updated_places,omitempty"`
	InsertedOrUpdatedCount  int64                `protobuf:"varint,3,opt,name=inserted_or_updated_count,json=insertedOrUpdatedCount,proto3" json:"inserted_or_updated_count,omitempty"`
	PlacesWithOverlaps      []*OverlappingPlaces `protobuf:"bytes,4,rep,name=places_with_overlaps,json=placesWithOverlaps,proto3" json:"places_with_overlaps,omitempty"`
}

func (x *InsertResponse) Reset() {
	*x = InsertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertResponse) ProtoMessage() {}

func (x *InsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertResponse.ProtoReflect.Descriptor instead.
func (*InsertResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{27}
}

func (x *InsertResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *InsertResponse) GetInsertedOrUpdatedPlaces() []*Place {
	if x != nil {
		return x.InsertedOrUpdatedPlaces
	}
	return nil
}

func (x *InsertResponse) GetInsertedOrUpdatedCount() int64 {
	if x != nil {
		return x.InsertedOrUpdatedCount
	}
	return 0
}

func (x *InsertResponse) GetPlacesWithOverlaps() []*OverlappingPlaces {
	if x != nil {
		return x.PlacesWithOverlaps
	}
	return nil
}

type LatLng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *LatLng) Reset() {
	*x = LatLng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLng) ProtoMessage() {}

func (x *LatLng) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLng.ProtoReflect.Descriptor instead.
func (*LatLng) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{28}
}

func (x *LatLng) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *LatLng) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type UpdateReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env        *Environment      `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	References []*PlaceReference `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
	Options    *Options          `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *UpdateReferenceRequest) Reset() {
	*x = UpdateReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferenceRequest) ProtoMessage() {}

func (x *UpdateReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateReferenceRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateReferenceRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateReferenceRequest) GetReferences() []*PlaceReference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *UpdateReferenceRequest) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type UpdateReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env              *Environment             `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	UpdateRefResults []*UpdateReferenceResult `protobuf:"bytes,2,rep,name=update_ref_results,json=updateRefResults,proto3" json:"update_ref_results,omitempty"`
}

func (x *UpdateReferenceResponse) Reset() {
	*x = UpdateReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferenceResponse) ProtoMessage() {}

func (x *UpdateReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateReferenceResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateReferenceResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateReferenceResponse) GetUpdateRefResults() []*UpdateReferenceResult {
	if x != nil {
		return x.UpdateRefResults
	}
	return nil
}

type UpdateReferenceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedPlace          *Place `protobuf:"bytes,1,opt,name=updated_place,json=updatedPlace,proto3" json:"updated_place,omitempty"`
	NewRefsCount          int32  `protobuf:"varint,2,opt,name=new_refs_count,json=newRefsCount,proto3" json:"new_refs_count,omitempty"`
	AppendedRefsCount     int32  `protobuf:"varint,3,opt,name=appended_refs_count,json=appendedRefsCount,proto3" json:"appended_refs_count,omitempty"`
	AddedRefValuesCount   int32  `protobuf:"varint,4,opt,name=added_ref_values_count,json=addedRefValuesCount,proto3" json:"added_ref_values_count,omitempty"`
	DeletedRefsCount      int32  `protobuf:"varint,5,opt,name=deleted_refs_count,json=deletedRefsCount,proto3" json:"deleted_refs_count,omitempty"`
	DeletedRefValuesCount int32  `protobuf:"varint,6,opt,name=deleted_ref_values_count,json=deletedRefValuesCount,proto3" json:"deleted_ref_values_count,omitempty"`
}

func (x *UpdateReferenceResult) Reset() {
	*x = UpdateReferenceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferenceResult) ProtoMessage() {}

func (x *UpdateReferenceResult) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferenceResult.ProtoReflect.Descriptor instead.
func (*UpdateReferenceResult) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateReferenceResult) GetUpdatedPlace() *Place {
	if x != nil {
		return x.UpdatedPlace
	}
	return nil
}

func (x *UpdateReferenceResult) GetNewRefsCount() int32 {
	if x != nil {
		return x.NewRefsCount
	}
	return 0
}

func (x *UpdateReferenceResult) GetAppendedRefsCount() int32 {
	if x != nil {
		return x.AppendedRefsCount
	}
	return 0
}

func (x *UpdateReferenceResult) GetAddedRefValuesCount() int32 {
	if x != nil {
		return x.AddedRefValuesCount
	}
	return 0
}

func (x *UpdateReferenceResult) GetDeletedRefsCount() int32 {
	if x != nil {
		return x.DeletedRefsCount
	}
	return 0
}

func (x *UpdateReferenceResult) GetDeletedRefValuesCount() int32 {
	if x != nil {
		return x.DeletedRefValuesCount
	}
	return 0
}

type PlaceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceId          int64                 `protobuf:"varint,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	ReplaceRefValues []*ReferenceAttribute `protobuf:"bytes,2,rep,name=replace_ref_values,json=replaceRefValues,proto3" json:"replace_ref_values,omitempty"`
	DeleteReferences []*ReferenceAttribute `protobuf:"bytes,3,rep,name=delete_references,json=deleteReferences,proto3" json:"delete_references,omitempty"`
	DeleteRefValues  []*ReferenceAttribute `protobuf:"bytes,4,rep,name=delete_ref_values,json=deleteRefValues,proto3" json:"delete_ref_values,omitempty"`
	AppendRefValues  []*ReferenceAttribute `protobuf:"bytes,5,rep,name=append_ref_values,json=appendRefValues,proto3" json:"append_ref_values,omitempty"`
}

func (x *PlaceReference) Reset() {
	*x = PlaceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceReference) ProtoMessage() {}

func (x *PlaceReference) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceReference.ProtoReflect.Descriptor instead.
func (*PlaceReference) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{32}
}

func (x *PlaceReference) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *PlaceReference) GetReplaceRefValues() []*ReferenceAttribute {
	if x != nil {
		return x.ReplaceRefValues
	}
	return nil
}

func (x *PlaceReference) GetDeleteReferences() []*ReferenceAttribute {
	if x != nil {
		return x.DeleteReferences
	}
	return nil
}

func (x *PlaceReference) GetDeleteRefValues() []*ReferenceAttribute {
	if x != nil {
		return x.DeleteRefValues
	}
	return nil
}

func (x *PlaceReference) GetAppendRefValues() []*ReferenceAttribute {
	if x != nil {
		return x.AppendRefValues
	}
	return nil
}

type UpdateTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env     *Environment       `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Tags    []*UpdatePlaceTags `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Options *Options           `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *UpdateTagsRequest) Reset() {
	*x = UpdateTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagsRequest) ProtoMessage() {}

func (x *UpdateTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagsRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateTagsRequest) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateTagsRequest) GetTags() []*UpdatePlaceTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateTagsRequest) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type UpdatePlaceTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceId          int64       `protobuf:"varint,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	ReplaceTagValues []*PlaceTag `protobuf:"bytes,2,rep,name=replace_tag_values,json=replaceTagValues,proto3" json:"replace_tag_values,omitempty"`
	DeleteTags       []*PlaceTag `protobuf:"bytes,3,rep,name=delete_tags,json=deleteTags,proto3" json:"delete_tags,omitempty"`
	DeleteTagValues  []*PlaceTag `protobuf:"bytes,4,rep,name=delete_tag_values,json=deleteTagValues,proto3" json:"delete_tag_values,omitempty"`
	AppendTagValues  []*PlaceTag `protobuf:"bytes,5,rep,name=append_tag_values,json=appendTagValues,proto3" json:"append_tag_values,omitempty"`
}

func (x *UpdatePlaceTags) Reset() {
	*x = UpdatePlaceTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlaceTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaceTags) ProtoMessage() {}

func (x *UpdatePlaceTags) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaceTags.ProtoReflect.Descriptor instead.
func (*UpdatePlaceTags) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{34}
}

func (x *UpdatePlaceTags) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *UpdatePlaceTags) GetReplaceTagValues() []*PlaceTag {
	if x != nil {
		return x.ReplaceTagValues
	}
	return nil
}

func (x *UpdatePlaceTags) GetDeleteTags() []*PlaceTag {
	if x != nil {
		return x.DeleteTags
	}
	return nil
}

func (x *UpdatePlaceTags) GetDeleteTagValues() []*PlaceTag {
	if x != nil {
		return x.DeleteTagValues
	}
	return nil
}

func (x *UpdatePlaceTags) GetAppendTagValues() []*PlaceTag {
	if x != nil {
		return x.AppendTagValues
	}
	return nil
}

type UpdateTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env              *Environment       `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	UpdateTagResults []*UpdateTagResult `protobuf:"bytes,2,rep,name=update_tag_results,json=updateTagResults,proto3" json:"update_tag_results,omitempty"`
}

func (x *UpdateTagsResponse) Reset() {
	*x = UpdateTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagsResponse) ProtoMessage() {}

func (x *UpdateTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagsResponse.ProtoReflect.Descriptor instead.
func (*UpdateTagsResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateTagsResponse) GetEnv() *Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateTagsResponse) GetUpdateTagResults() []*UpdateTagResult {
	if x != nil {
		return x.UpdateTagResults
	}
	return nil
}

type UpdateTagResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedPlace          *Place `protobuf:"bytes,1,opt,name=updated_place,json=updatedPlace,proto3" json:"updated_place,omitempty"`
	NewTagsCount          int32  `protobuf:"varint,2,opt,name=new_tags_count,json=newTagsCount,proto3" json:"new_tags_count,omitempty"`
	AppendedTagsCount     int32  `protobuf:"varint,3,opt,name=appended_tags_count,json=appendedTagsCount,proto3" json:"appended_tags_count,omitempty"`
	AddedTagValuesCount   int32  `protobuf:"varint,4,opt,name=added_tag_values_count,json=addedTagValuesCount,proto3" json:"added_tag_values_count,omitempty"`
	DeletedTagsCount      int32  `protobuf:"varint,5,opt,name=deleted_tags_count,json=deletedTagsCount,proto3" json:"deleted_tags_count,omitempty"`
	DeletedTagValuesCount int32  `protobuf:"varint,6,opt,name=deleted_tag_values_count,json=deletedTagValuesCount,proto3" json:"deleted_tag_values_count,omitempty"`
}

func (x *UpdateTagResult) Reset() {
	*x = UpdateTagResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResult) ProtoMessage() {}

func (x *UpdateTagResult) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResult.ProtoReflect.Descriptor instead.
func (*UpdateTagResult) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateTagResult) GetUpdatedPlace() *Place {
	if x != nil {
		return x.UpdatedPlace
	}
	return nil
}

func (x *UpdateTagResult) GetNewTagsCount() int32 {
	if x != nil {
		return x.NewTagsCount
	}
	return 0
}

func (x *UpdateTagResult) GetAppendedTagsCount() int32 {
	if x != nil {
		return x.AppendedTagsCount
	}
	return 0
}

func (x *UpdateTagResult) GetAddedTagValuesCount() int32 {
	if x != nil {
		return x.AddedTagValuesCount
	}
	return 0
}

func (x *UpdateTagResult) GetDeletedTagsCount() int32 {
	if x != nil {
		return x.DeletedTagsCount
	}
	return 0
}

func (x *UpdateTagResult) GetDeletedTagValuesCount() int32 {
	if x != nil {
		return x.DeletedTagValuesCount
	}
	return 0
}

type PlaceTagValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType        ValueType     `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=farm.nurture.core.contracts.common.ValueType" json:"value_type,omitempty"`
	FloatValues      []float64     `protobuf:"fixed64,2,rep,packed,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	StringValues     []string      `protobuf:"bytes,3,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	BoolValues       []bool        `protobuf:"varint,4,rep,packed,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
	Int64Values      []int64       `protobuf:"varint,5,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Int32Values      []int32       `protobuf:"varint,6,rep,packed,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	NsvPlaceIdValues []*NSVPlaceId `protobuf:"bytes,7,rep,name=nsv_place_id_values,json=nsvPlaceIdValues,proto3" json:"nsv_place_id_values,omitempty"`
}

func (x *PlaceTagValue) Reset() {
	*x = PlaceTagValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceTagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceTagValue) ProtoMessage() {}

func (x *PlaceTagValue) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceTagValue.ProtoReflect.Descriptor instead.
func (*PlaceTagValue) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{37}
}

func (x *PlaceTagValue) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_NO_VALUE_TYPE
}

func (x *PlaceTagValue) GetFloatValues() []float64 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *PlaceTagValue) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *PlaceTagValue) GetBoolValues() []bool {
	if x != nil {
		return x.BoolValues
	}
	return nil
}

func (x *PlaceTagValue) GetInt64Values() []int64 {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *PlaceTagValue) GetInt32Values() []int32 {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *PlaceTagValue) GetNsvPlaceIdValues() []*NSVPlaceId {
	if x != nil {
		return x.NsvPlaceIdValues
	}
	return nil
}

type OverlappingPlace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceId              int64  `protobuf:"varint,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	SourceId             string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	IntersectingGeometry string `protobuf:"bytes,3,opt,name=intersecting_geometry,json=intersectingGeometry,proto3" json:"intersecting_geometry,omitempty"`
}

func (x *OverlappingPlace) Reset() {
	*x = OverlappingPlace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlappingPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlappingPlace) ProtoMessage() {}

func (x *OverlappingPlace) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlappingPlace.ProtoReflect.Descriptor instead.
func (*OverlappingPlace) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{38}
}

func (x *OverlappingPlace) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *OverlappingPlace) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *OverlappingPlace) GetIntersectingGeometry() string {
	if x != nil {
		return x.IntersectingGeometry
	}
	return ""
}

type OverlappingPlaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceId  int64               `protobuf:"varint,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	SourceId string              `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Overlaps []*OverlappingPlace `protobuf:"bytes,3,rep,name=overlaps,proto3" json:"overlaps,omitempty"`
}

func (x *OverlappingPlaces) Reset() {
	*x = OverlappingPlaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlappingPlaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlappingPlaces) ProtoMessage() {}

func (x *OverlappingPlaces) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlappingPlaces.ProtoReflect.Descriptor instead.
func (*OverlappingPlaces) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{39}
}

func (x *OverlappingPlaces) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *OverlappingPlaces) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *OverlappingPlaces) GetOverlaps() []*OverlappingPlace {
	if x != nil {
		return x.Overlaps
	}
	return nil
}

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name ValidationName `protobuf:"varint,1,opt,name=name,proto3,enum=farm.nurture.core.contracts.common.ValidationName" json:"name,omitempty"`
	Type ValidationType `protobuf:"varint,2,opt,name=type,proto3,enum=farm.nurture.core.contracts.common.ValidationType" json:"type,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{40}
}

func (x *Validation) GetName() ValidationName {
	if x != nil {
		return x.Name
	}
	return ValidationName_NO_VALIDATION
}

func (x *Validation) GetType() ValidationType {
	if x != nil {
		return x.Type
	}
	return ValidationType_NO_VALIDATION_TYPE
}

type RasterDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment *Environment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	MapTiles    []*MapTile   `protobuf:"bytes,2,rep,name=map_tiles,json=mapTiles,proto3" json:"map_tiles,omitempty"`
	TimeSlot    *TimeSlot    `protobuf:"bytes,3,opt,name=time_slot,json=timeSlot,proto3" json:"time_slot,omitempty"`
}

func (x *RasterDataRequest) Reset() {
	*x = RasterDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterDataRequest) ProtoMessage() {}

func (x *RasterDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterDataRequest.ProtoReflect.Descriptor instead.
func (*RasterDataRequest) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{41}
}

func (x *RasterDataRequest) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *RasterDataRequest) GetMapTiles() []*MapTile {
	if x != nil {
		return x.MapTiles
	}
	return nil
}

func (x *RasterDataRequest) GetTimeSlot() *TimeSlot {
	if x != nil {
		return x.TimeSlot
	}
	return nil
}

type RasterDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment   *Environment              `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	PreSignedUrls []*MapTilesToPreSignedUrl `protobuf:"bytes,2,rep,name=pre_signed_urls,json=preSignedUrls,proto3" json:"pre_signed_urls,omitempty"`
}

func (x *RasterDataResponse) Reset() {
	*x = RasterDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterDataResponse) ProtoMessage() {}

func (x *RasterDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterDataResponse.ProtoReflect.Descriptor instead.
func (*RasterDataResponse) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{42}
}

func (x *RasterDataResponse) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *RasterDataResponse) GetPreSignedUrls() []*MapTilesToPreSignedUrl {
	if x != nil {
		return x.PreSignedUrls
	}
	return nil
}

type MapTilesToPreSignedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTile      *MapTile `protobuf:"bytes,1,opt,name=map_tile,json=mapTile,proto3" json:"map_tile,omitempty"`
	PreSignedUrl string   `protobuf:"bytes,2,opt,name=pre_signed_url,json=preSignedUrl,proto3" json:"pre_signed_url,omitempty"`
}

func (x *MapTilesToPreSignedUrl) Reset() {
	*x = MapTilesToPreSignedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTilesToPreSignedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTilesToPreSignedUrl) ProtoMessage() {}

func (x *MapTilesToPreSignedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTilesToPreSignedUrl.ProtoReflect.Descriptor instead.
func (*MapTilesToPreSignedUrl) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{43}
}

func (x *MapTilesToPreSignedUrl) GetMapTile() *MapTile {
	if x != nil {
		return x.MapTile
	}
	return nil
}

func (x *MapTilesToPreSignedUrl) GetPreSignedUrl() string {
	if x != nil {
		return x.PreSignedUrl
	}
	return ""
}

type RegisterSourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudStore    CloudStore `protobuf:"varint,1,opt,name=cloudStore,proto3,enum=farm.nurture.core.contracts.common.CloudStore" json:"cloudStore,omitempty"`
	UrlBuilder    UrlBuilder `protobuf:"varint,2,opt,name=url_builder,json=urlBuilder,proto3,enum=farm.nurture.core.contracts.common.UrlBuilder" json:"url_builder,omitempty"`
	Satellite     Satellite  `protobuf:"varint,3,opt,name=satellite,proto3,enum=farm.nurture.core.contracts.common.Satellite" json:"satellite,omitempty"`
	Band          Band       `protobuf:"varint,4,opt,name=band,proto3,enum=farm.nurture.core.contracts.common.Band" json:"band,omitempty"`
	ValidTime     *TimeRange `protobuf:"bytes,5,opt,name=valid_time,json=validTime,proto3" json:"valid_time,omitempty"`
	BaseDirectory string     `protobuf:"bytes,6,opt,name=base_directory,json=baseDirectory,proto3" json:"base_directory,omitempty"`
	DateRange     *TimeRange `protobuf:"bytes,7,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
}

func (x *RegisterSourceConfig) Reset() {
	*x = RegisterSourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSourceConfig) ProtoMessage() {}

func (x *RegisterSourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSourceConfig.ProtoReflect.Descriptor instead.
func (*RegisterSourceConfig) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{44}
}

func (x *RegisterSourceConfig) GetCloudStore() CloudStore {
	if x != nil {
		return x.CloudStore
	}
	return CloudStore_NO_Cloud_Store
}

func (x *RegisterSourceConfig) GetUrlBuilder() UrlBuilder {
	if x != nil {
		return x.UrlBuilder
	}
	return UrlBuilder_NO_URL_BUILDER
}

func (x *RegisterSourceConfig) GetSatellite() Satellite {
	if x != nil {
		return x.Satellite
	}
	return Satellite_NO_SATELLITE
}

func (x *RegisterSourceConfig) GetBand() Band {
	if x != nil {
		return x.Band
	}
	return Band_NO_BAND
}

func (x *RegisterSourceConfig) GetValidTime() *TimeRange {
	if x != nil {
		return x.ValidTime
	}
	return nil
}

func (x *RegisterSourceConfig) GetBaseDirectory() string {
	if x != nil {
		return x.BaseDirectory
	}
	return ""
}

func (x *RegisterSourceConfig) GetDateRange() *TimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

type NSVPlaceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceNamespace   PlaceNamespace   `protobuf:"varint,1,opt,name=PlaceNamespace,proto3,enum=farm.nurture.core.contracts.common.PlaceNamespace" json:"PlaceNamespace,omitempty"`
	PlaceSourceType  PlaceSourceType  `protobuf:"varint,2,opt,name=PlaceSourceType,proto3,enum=farm.nurture.core.contracts.common.PlaceSourceType" json:"PlaceSourceType,omitempty"`
	PlaceVisibleType PlaceVisibleType `protobuf:"varint,3,opt,name=PlaceVisibleType,proto3,enum=farm.nurture.core.contracts.common.PlaceVisibleType" json:"PlaceVisibleType,omitempty"`
	PlaceId          int64            `protobuf:"varint,4,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
}

func (x *NSVPlaceId) Reset() {
	*x = NSVPlaceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_geo_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NSVPlaceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NSVPlaceId) ProtoMessage() {}

func (x *NSVPlaceId) ProtoReflect() protoreflect.Message {
	mi := &file_Common_geo_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NSVPlaceId.ProtoReflect.Descriptor instead.
func (*NSVPlaceId) Descriptor() ([]byte, []int) {
	return file_Common_geo_common_proto_rawDescGZIP(), []int{45}
}

func (x *NSVPlaceId) GetPlaceNamespace() PlaceNamespace {
	if x != nil {
		return x.PlaceNamespace
	}
	return PlaceNamespace_POLITICAL_NAMESPACE
}

func (x *NSVPlaceId) GetPlaceSourceType() PlaceSourceType {
	if x != nil {
		return x.PlaceSourceType
	}
	return PlaceSourceType_NO_SOURCE_TYPE
}

func (x *NSVPlaceId) GetPlaceVisibleType() PlaceVisibleType {
	if x != nil {
		return x.PlaceVisibleType
	}
	return PlaceVisibleType_NO_VISIBLE_TYPE
}

func (x *NSVPlaceId) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

var File_Common_geo_common_proto protoreflect.FileDescriptor

var file_Common_geo_common_proto_rawDesc = []byte{
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x16, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x03, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x07,
	0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0e, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x12,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x54, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x76, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x8d, 0x02,
	0x0a, 0x09, 0x47, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x7e, 0x0a, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0xd1, 0x03,
	0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x6c, 0x64, 0x74, 0x52, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x76, 0x6c, 0x64,
	0x74, 0x52, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x22, 0xf3, 0x05, 0x0a, 0x12, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x50, 0x6c, 0x63, 0x53,
	0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x50, 0x6c, 0x63, 0x53, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x50, 0x6c, 0x63, 0x4e, 0x6d, 0x73, 0x70, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x50, 0x6c, 0x63, 0x4e, 0x6d, 0x73, 0x70, 0x63, 0x65, 0x12,
	0x50, 0x0a, 0x08, 0x50, 0x6c, 0x63, 0x56, 0x73, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6c, 0x63, 0x56, 0x73, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61,
	0x78, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x08, 0x55, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x52, 0x08, 0x55, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x6f, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x5c, 0x0a, 0x09, 0x67, 0x6d, 0x52, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x6d, 0x52, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x6d, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x6d,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x63, 0x49, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x6c, 0x63, 0x49, 0x64, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x0d, 0x74, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x02, 0x0a,
	0x0e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x4f, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x3f, 0x0a, 0x09, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x5a,
	0x6f, 0x6f, 0x6d, 0x22, 0x49, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x7a, 0x6f,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6c, 0x65,
	0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x59, 0x22, 0xc6,
	0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x52,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb9, 0x04, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x6f, 0x0a,
	0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x67, 0x64, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x67, 0x64, 0x6e, 0x49, 0x44, 0x22, 0xa4, 0x05,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x7e,
	0x0a, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f,
	0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x0b, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x47, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x08,
	0x6d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x41, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x50, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x22, 0x6f, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xca, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x61, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x61, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xdf, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x66, 0x0a, 0x1a, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a,
	0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x22, 0x2c, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6e, 0x67, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x52, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x67, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x66, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x66, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xbe, 0x03, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x64, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x47, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x61, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xeb, 0x02, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x6e,
	0x73, 0x76, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x53,
	0x56, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x10, 0x6e, 0x73, 0x76, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x10, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x11,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x52,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x54, 0x69,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x22,
	0x85, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x75,
	0x72, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x09, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x04,
	0x62, 0x61, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x4e, 0x53, 0x56, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x60, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x53,
	0x0a, 0x22, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x66, 0x61, 0x72, 0x6d, 0x2f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0xa0, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Common_geo_common_proto_rawDescOnce sync.Once
	file_Common_geo_common_proto_rawDescData = file_Common_geo_common_proto_rawDesc
)

func file_Common_geo_common_proto_rawDescGZIP() []byte {
	file_Common_geo_common_proto_rawDescOnce.Do(func() {
		file_Common_geo_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_geo_common_proto_rawDescData)
	})
	return file_Common_geo_common_proto_rawDescData
}

var file_Common_geo_common_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_Common_geo_common_proto_goTypes = []interface{}{
	(*PlaceTag)(nil),                // 0: farm.nurture.core.contracts.common.PlaceTag
	(*ValidationResponse)(nil),      // 1: farm.nurture.core.contracts.common.ValidationResponse
	(*GeoPlaces)(nil),               // 2: farm.nurture.core.contracts.common.GeoPlaces
	(*ValidationResults)(nil),       // 3: farm.nurture.core.contracts.common.ValidationResults
	(*GeometryToValidate)(nil),      // 4: farm.nurture.core.contracts.common.GeometryToValidate
	(*ValidationsApplicable)(nil),   // 5: farm.nurture.core.contracts.common.ValidationsApplicable
	(*FilterArguments)(nil),         // 6: farm.nurture.core.contracts.common.FilterArguments
	(*Filter)(nil),                  // 7: farm.nurture.core.contracts.common.Filter
	(*BaseConditions)(nil),          // 8: farm.nurture.core.contracts.common.BaseConditions
	(*ReferenceAttribute)(nil),      // 9: farm.nurture.core.contracts.common.ReferenceAttribute
	(*ZoomRange)(nil),               // 10: farm.nurture.core.contracts.common.ZoomRange
	(*MapTile)(nil),                 // 11: farm.nurture.core.contracts.common.MapTile
	(*Environment)(nil),             // 12: farm.nurture.core.contracts.common.Environment
	(*Place)(nil),                   // 13: farm.nurture.core.contracts.common.Place
	(*Attribute)(nil),               // 14: farm.nurture.core.contracts.common.Attribute
	(*Value)(nil),                   // 15: farm.nurture.core.contracts.common.Value
	(*Options)(nil),                 // 16: farm.nurture.core.contracts.common.Options
	(*UserContext)(nil),             // 17: farm.nurture.core.contracts.common.UserContext
	(*PlacesData)(nil),              // 18: farm.nurture.core.contracts.common.PlacesData
	(*Configuration)(nil),           // 19: farm.nurture.core.contracts.common.Configuration
	(*TileRequest)(nil),             // 20: farm.nurture.core.contracts.common.TileRequest
	(*TileResponse)(nil),            // 21: farm.nurture.core.contracts.common.TileResponse
	(*UpdateRequest)(nil),           // 22: farm.nurture.core.contracts.common.UpdateRequest
	(*UpdateResponse)(nil),          // 23: farm.nurture.core.contracts.common.UpdateResponse
	(*DeleteRequest)(nil),           // 24: farm.nurture.core.contracts.common.DeleteRequest
	(*DeleteResponse)(nil),          // 25: farm.nurture.core.contracts.common.DeleteResponse
	(*InsertRequest)(nil),           // 26: farm.nurture.core.contracts.common.InsertRequest
	(*InsertResponse)(nil),          // 27: farm.nurture.core.contracts.common.InsertResponse
	(*LatLng)(nil),                  // 28: farm.nurture.core.contracts.common.LatLng
	(*UpdateReferenceRequest)(nil),  // 29: farm.nurture.core.contracts.common.UpdateReferenceRequest
	(*UpdateReferenceResponse)(nil), // 30: farm.nurture.core.contracts.common.UpdateReferenceResponse
	(*UpdateReferenceResult)(nil),   // 31: farm.nurture.core.contracts.common.UpdateReferenceResult
	(*PlaceReference)(nil),          // 32: farm.nurture.core.contracts.common.PlaceReference
	(*UpdateTagsRequest)(nil),       // 33: farm.nurture.core.contracts.common.UpdateTagsRequest
	(*UpdatePlaceTags)(nil),         // 34: farm.nurture.core.contracts.common.UpdatePlaceTags
	(*UpdateTagsResponse)(nil),      // 35: farm.nurture.core.contracts.common.UpdateTagsResponse
	(*UpdateTagResult)(nil),         // 36: farm.nurture.core.contracts.common.UpdateTagResult
	(*PlaceTagValue)(nil),           // 37: farm.nurture.core.contracts.common.PlaceTagValue
	(*OverlappingPlace)(nil),        // 38: farm.nurture.core.contracts.common.OverlappingPlace
	(*OverlappingPlaces)(nil),       // 39: farm.nurture.core.contracts.common.OverlappingPlaces
	(*Validation)(nil),              // 40: farm.nurture.core.contracts.common.Validation
	(*RasterDataRequest)(nil),       // 41: farm.nurture.core.contracts.common.RasterDataRequest
	(*RasterDataResponse)(nil),      // 42: farm.nurture.core.contracts.common.RasterDataResponse
	(*MapTilesToPreSignedUrl)(nil),  // 43: farm.nurture.core.contracts.common.MapTilesToPreSignedUrl
	(*RegisterSourceConfig)(nil),    // 44: farm.nurture.core.contracts.common.RegisterSourceConfig
	(*NSVPlaceId)(nil),              // 45: farm.nurture.core.contracts.common.NSVPlaceId
	(PlaceTagName)(0),               // 46: farm.nurture.core.contracts.common.PlaceTagName
	(PlaceTagProperty)(0),           // 47: farm.nurture.core.contracts.common.PlaceTagProperty
	(ValidationResponseMsg)(0),      // 48: farm.nurture.core.contracts.common.ValidationResponseMsg
	(ValidationResponseCode)(0),     // 49: farm.nurture.core.contracts.common.ValidationResponseCode
	(GeometryRepresentationType)(0), // 50: farm.nurture.core.contracts.common.GeometryRepresentationType
	(GeoValidationType)(0),          // 51: farm.nurture.core.contracts.common.GeoValidationType
	(GeoValidationName)(0),          // 52: farm.nurture.core.contracts.common.GeoValidationName
	(AssertionType)(0),              // 53: farm.nurture.core.contracts.common.AssertionType
	(PlaceSourceType)(0),            // 54: farm.nurture.core.contracts.common.PlaceSourceType
	(PlaceNamespace)(0),             // 55: farm.nurture.core.contracts.common.PlaceNamespace
	(PlaceVisibleType)(0),           // 56: farm.nurture.core.contracts.common.PlaceVisibleType
	(UI_CLIENT)(0),                  // 57: farm.nurture.core.contracts.common.UI_CLIENT
	(ReferenceType)(0),              // 58: farm.nurture.core.contracts.common.ReferenceType
	(AttributeKey)(0),               // 59: farm.nurture.core.contracts.common.AttributeKey
	(LogicOperator)(0),              // 60: farm.nurture.core.contracts.common.LogicOperator
	(FilterKey)(0),                  // 61: farm.nurture.core.contracts.common.FilterKey
	(ComparisonCheckType)(0),        // 62: farm.nurture.core.contracts.common.ComparisonCheckType
	(*TimeRange)(nil),               // 63: farm.nurture.core.contracts.common.TimeRange
	(ValueType)(0),                  // 64: farm.nurture.core.contracts.common.ValueType
	(GeometryType)(0),               // 65: farm.nurture.core.contracts.common.GeometryType
	(ServiceName)(0),                // 66: farm.nurture.core.contracts.common.ServiceName
	(ValidationName)(0),             // 67: farm.nurture.core.contracts.common.ValidationName
	(ValidationType)(0),             // 68: farm.nurture.core.contracts.common.ValidationType
	(*TimeSlot)(nil),                // 69: farm.nurture.core.contracts.common.TimeSlot
	(CloudStore)(0),                 // 70: farm.nurture.core.contracts.common.CloudStore
	(UrlBuilder)(0),                 // 71: farm.nurture.core.contracts.common.UrlBuilder
	(Satellite)(0),                  // 72: farm.nurture.core.contracts.common.Satellite
	(Band)(0),                       // 73: farm.nurture.core.contracts.common.Band
}
var file_Common_geo_common_proto_depIdxs = []int32{
	46,  // 0: farm.nurture.core.contracts.common.PlaceTag.TagName:type_name -> farm.nurture.core.contracts.common.PlaceTagName
	47,  // 1: farm.nurture.core.contracts.common.PlaceTag.TagPropertyKey:type_name -> farm.nurture.core.contracts.common.PlaceTagProperty
	37,  // 2: farm.nurture.core.contracts.common.PlaceTag.value:type_name -> farm.nurture.core.contracts.common.PlaceTagValue
	48,  // 3: farm.nurture.core.contracts.common.ValidationResponse.msg:type_name -> farm.nurture.core.contracts.common.ValidationResponseMsg
	49,  // 4: farm.nurture.core.contracts.common.ValidationResponse.valCode:type_name -> farm.nurture.core.contracts.common.ValidationResponseCode
	50,  // 5: farm.nurture.core.contracts.common.GeoPlaces.geometryRepresentationType:type_name -> farm.nurture.core.contracts.common.GeometryRepresentationType
	0,   // 6: farm.nurture.core.contracts.common.GeoPlaces.PlaceTags:type_name -> farm.nurture.core.contracts.common.PlaceTag
	1,   // 7: farm.nurture.core.contracts.common.ValidationResults.vldtRs:type_name -> farm.nurture.core.contracts.common.ValidationResponse
	51,  // 8: farm.nurture.core.contracts.common.ValidationResults.validationType:type_name -> farm.nurture.core.contracts.common.GeoValidationType
	52,  // 9: farm.nurture.core.contracts.common.ValidationResults.validationName:type_name -> farm.nurture.core.contracts.common.GeoValidationName
	53,  // 10: farm.nurture.core.contracts.common.ValidationResults.assertType:type_name -> farm.nurture.core.contracts.common.AssertionType
	2,   // 11: farm.nurture.core.contracts.common.ValidationResults.places:type_name -> farm.nurture.core.contracts.common.GeoPlaces
	54,  // 12: farm.nurture.core.contracts.common.GeometryToValidate.PlcSrcType:type_name -> farm.nurture.core.contracts.common.PlaceSourceType
	55,  // 13: farm.nurture.core.contracts.common.GeometryToValidate.PlcNmspce:type_name -> farm.nurture.core.contracts.common.PlaceNamespace
	56,  // 14: farm.nurture.core.contracts.common.GeometryToValidate.PlcVsble:type_name -> farm.nurture.core.contracts.common.PlaceVisibleType
	57,  // 15: farm.nurture.core.contracts.common.GeometryToValidate.UiClient:type_name -> farm.nurture.core.contracts.common.UI_CLIENT
	5,   // 16: farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable:type_name -> farm.nurture.core.contracts.common.ValidationsApplicable
	50,  // 17: farm.nurture.core.contracts.common.GeometryToValidate.gmRprType:type_name -> farm.nurture.core.contracts.common.GeometryRepresentationType
	51,  // 18: farm.nurture.core.contracts.common.ValidationsApplicable.validationType:type_name -> farm.nurture.core.contracts.common.GeoValidationType
	52,  // 19: farm.nurture.core.contracts.common.ValidationsApplicable.validationName:type_name -> farm.nurture.core.contracts.common.GeoValidationName
	53,  // 20: farm.nurture.core.contracts.common.ValidationsApplicable.assertType:type_name -> farm.nurture.core.contracts.common.AssertionType
	46,  // 21: farm.nurture.core.contracts.common.FilterArguments.tagNames:type_name -> farm.nurture.core.contracts.common.PlaceTagName
	47,  // 22: farm.nurture.core.contracts.common.FilterArguments.tagProperties:type_name -> farm.nurture.core.contracts.common.PlaceTagProperty
	58,  // 23: farm.nurture.core.contracts.common.FilterArguments.reference_types:type_name -> farm.nurture.core.contracts.common.ReferenceType
	59,  // 24: farm.nurture.core.contracts.common.FilterArguments.attribute_keys:type_name -> farm.nurture.core.contracts.common.AttributeKey
	15,  // 25: farm.nurture.core.contracts.common.FilterArguments.values:type_name -> farm.nurture.core.contracts.common.Value
	8,   // 26: farm.nurture.core.contracts.common.Filter.baseCondition:type_name -> farm.nurture.core.contracts.common.BaseConditions
	60,  // 27: farm.nurture.core.contracts.common.Filter.combiningOperator:type_name -> farm.nurture.core.contracts.common.LogicOperator
	7,   // 28: farm.nurture.core.contracts.common.Filter.conditions:type_name -> farm.nurture.core.contracts.common.Filter
	61,  // 29: farm.nurture.core.contracts.common.BaseConditions.filterKey:type_name -> farm.nurture.core.contracts.common.FilterKey
	62,  // 30: farm.nurture.core.contracts.common.BaseConditions.operator:type_name -> farm.nurture.core.contracts.common.ComparisonCheckType
	6,   // 31: farm.nurture.core.contracts.common.BaseConditions.argument:type_name -> farm.nurture.core.contracts.common.FilterArguments
	58,  // 32: farm.nurture.core.contracts.common.ReferenceAttribute.reference_type:type_name -> farm.nurture.core.contracts.common.ReferenceType
	14,  // 33: farm.nurture.core.contracts.common.ReferenceAttribute.attributes:type_name -> farm.nurture.core.contracts.common.Attribute
	55,  // 34: farm.nurture.core.contracts.common.Environment.namespace:type_name -> farm.nurture.core.contracts.common.PlaceNamespace
	54,  // 35: farm.nurture.core.contracts.common.Environment.sourceType:type_name -> farm.nurture.core.contracts.common.PlaceSourceType
	56,  // 36: farm.nurture.core.contracts.common.Environment.visibleType:type_name -> farm.nurture.core.contracts.common.PlaceVisibleType
	10,  // 37: farm.nurture.core.contracts.common.Environment.zoom_hints:type_name -> farm.nurture.core.contracts.common.ZoomRange
	57,  // 38: farm.nurture.core.contracts.common.Environment.client:type_name -> farm.nurture.core.contracts.common.UI_CLIENT
	50,  // 39: farm.nurture.core.contracts.common.Place.representation_type:type_name -> farm.nurture.core.contracts.common.GeometryRepresentationType
	0,   // 40: farm.nurture.core.contracts.common.Place.tags:type_name -> farm.nurture.core.contracts.common.PlaceTag
	9,   // 41: farm.nurture.core.contracts.common.Place.reference_attributes:type_name -> farm.nurture.core.contracts.common.ReferenceAttribute
	63,  // 42: farm.nurture.core.contracts.common.Place.time_range:type_name -> farm.nurture.core.contracts.common.TimeRange
	59,  // 43: farm.nurture.core.contracts.common.Attribute.key:type_name -> farm.nurture.core.contracts.common.AttributeKey
	15,  // 44: farm.nurture.core.contracts.common.Attribute.value:type_name -> farm.nurture.core.contracts.common.Value
	64,  // 45: farm.nurture.core.contracts.common.Value.value_type:type_name -> farm.nurture.core.contracts.common.ValueType
	50,  // 46: farm.nurture.core.contracts.common.PlacesData.geometryRepresentationType:type_name -> farm.nurture.core.contracts.common.GeometryRepresentationType
	0,   // 47: farm.nurture.core.contracts.common.PlacesData.PlaceTags:type_name -> farm.nurture.core.contracts.common.PlaceTag
	54,  // 48: farm.nurture.core.contracts.common.PlacesData.place_source_type:type_name -> farm.nurture.core.contracts.common.PlaceSourceType
	55,  // 49: farm.nurture.core.contracts.common.PlacesData.place_name_space:type_name -> farm.nurture.core.contracts.common.PlaceNamespace
	56,  // 50: farm.nurture.core.contracts.common.PlacesData.place_visible_type:type_name -> farm.nurture.core.contracts.common.PlaceVisibleType
	65,  // 51: farm.nurture.core.contracts.common.PlacesData.geometry_type:type_name -> farm.nurture.core.contracts.common.GeometryType
	66,  // 52: farm.nurture.core.contracts.common.Configuration.service_name:type_name -> farm.nurture.core.contracts.common.ServiceName
	12,  // 53: farm.nurture.core.contracts.common.TileRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	11,  // 54: farm.nurture.core.contracts.common.TileRequest.mapTiles:type_name -> farm.nurture.core.contracts.common.MapTile
	7,   // 55: farm.nurture.core.contracts.common.TileRequest.tag_filter:type_name -> farm.nurture.core.contracts.common.Filter
	12,  // 56: farm.nurture.core.contracts.common.TileResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	13,  // 57: farm.nurture.core.contracts.common.TileResponse.places:type_name -> farm.nurture.core.contracts.common.Place
	12,  // 58: farm.nurture.core.contracts.common.UpdateRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	13,  // 59: farm.nurture.core.contracts.common.UpdateRequest.places:type_name -> farm.nurture.core.contracts.common.Place
	16,  // 60: farm.nurture.core.contracts.common.UpdateRequest.options:type_name -> farm.nurture.core.contracts.common.Options
	12,  // 61: farm.nurture.core.contracts.common.UpdateResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	13,  // 62: farm.nurture.core.contracts.common.UpdateResponse.updated_places:type_name -> farm.nurture.core.contracts.common.Place
	39,  // 63: farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps:type_name -> farm.nurture.core.contracts.common.OverlappingPlaces
	12,  // 64: farm.nurture.core.contracts.common.DeleteRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	12,  // 65: farm.nurture.core.contracts.common.DeleteResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	13,  // 66: farm.nurture.core.contracts.common.DeleteResponse.deleted_places:type_name -> farm.nurture.core.contracts.common.Place
	12,  // 67: farm.nurture.core.contracts.common.InsertRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	16,  // 68: farm.nurture.core.contracts.common.InsertRequest.options:type_name -> farm.nurture.core.contracts.common.Options
	13,  // 69: farm.nurture.core.contracts.common.InsertRequest.places:type_name -> farm.nurture.core.contracts.common.Place
	7,   // 70: farm.nurture.core.contracts.common.InsertRequest.tag_filter:type_name -> farm.nurture.core.contracts.common.Filter
	12,  // 71: farm.nurture.core.contracts.common.InsertResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	13,  // 72: farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places:type_name -> farm.nurture.core.contracts.common.Place
	39,  // 73: farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps:type_name -> farm.nurture.core.contracts.common.OverlappingPlaces
	12,  // 74: farm.nurture.core.contracts.common.UpdateReferenceRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	32,  // 75: farm.nurture.core.contracts.common.UpdateReferenceRequest.references:type_name -> farm.nurture.core.contracts.common.PlaceReference
	16,  // 76: farm.nurture.core.contracts.common.UpdateReferenceRequest.options:type_name -> farm.nurture.core.contracts.common.Options
	12,  // 77: farm.nurture.core.contracts.common.UpdateReferenceResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	31,  // 78: farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results:type_name -> farm.nurture.core.contracts.common.UpdateReferenceResult
	13,  // 79: farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place:type_name -> farm.nurture.core.contracts.common.Place
	9,   // 80: farm.nurture.core.contracts.common.PlaceReference.replace_ref_values:type_name -> farm.nurture.core.contracts.common.ReferenceAttribute
	9,   // 81: farm.nurture.core.contracts.common.PlaceReference.delete_references:type_name -> farm.nurture.core.contracts.common.ReferenceAttribute
	9,   // 82: farm.nurture.core.contracts.common.PlaceReference.delete_ref_values:type_name -> farm.nurture.core.contracts.common.ReferenceAttribute
	9,   // 83: farm.nurture.core.contracts.common.PlaceReference.append_ref_values:type_name -> farm.nurture.core.contracts.common.ReferenceAttribute
	12,  // 84: farm.nurture.core.contracts.common.UpdateTagsRequest.env:type_name -> farm.nurture.core.contracts.common.Environment
	34,  // 85: farm.nurture.core.contracts.common.UpdateTagsRequest.tags:type_name -> farm.nurture.core.contracts.common.UpdatePlaceTags
	16,  // 86: farm.nurture.core.contracts.common.UpdateTagsRequest.options:type_name -> farm.nurture.core.contracts.common.Options
	0,   // 87: farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values:type_name -> farm.nurture.core.contracts.common.PlaceTag
	0,   // 88: farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags:type_name -> farm.nurture.core.contracts.common.PlaceTag
	0,   // 89: farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values:type_name -> farm.nurture.core.contracts.common.PlaceTag
	0,   // 90: farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values:type_name -> farm.nurture.core.contracts.common.PlaceTag
	12,  // 91: farm.nurture.core.contracts.common.UpdateTagsResponse.env:type_name -> farm.nurture.core.contracts.common.Environment
	36,  // 92: farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results:type_name -> farm.nurture.core.contracts.common.UpdateTagResult
	13,  // 93: farm.nurture.core.contracts.common.UpdateTagResult.updated_place:type_name -> farm.nurture.core.contracts.common.Place
	64,  // 94: farm.nurture.core.contracts.common.PlaceTagValue.value_type:type_name -> farm.nurture.core.contracts.common.ValueType
	45,  // 95: farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values:type_name -> farm.nurture.core.contracts.common.NSVPlaceId
	38,  // 96: farm.nurture.core.contracts.common.OverlappingPlaces.overlaps:type_name -> farm.nurture.core.contracts.common.OverlappingPlace
	67,  // 97: farm.nurture.core.contracts.common.Validation.name:type_name -> farm.nurture.core.contracts.common.ValidationName
	68,  // 98: farm.nurture.core.contracts.common.Validation.type:type_name -> farm.nurture.core.contracts.common.ValidationType
	12,  // 99: farm.nurture.core.contracts.common.RasterDataRequest.environment:type_name -> farm.nurture.core.contracts.common.Environment
	11,  // 100: farm.nurture.core.contracts.common.RasterDataRequest.map_tiles:type_name -> farm.nurture.core.contracts.common.MapTile
	69,  // 101: farm.nurture.core.contracts.common.RasterDataRequest.time_slot:type_name -> farm.nurture.core.contracts.common.TimeSlot
	12,  // 102: farm.nurture.core.contracts.common.RasterDataResponse.environment:type_name -> farm.nurture.core.contracts.common.Environment
	43,  // 103: farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls:type_name -> farm.nurture.core.contracts.common.MapTilesToPreSignedUrl
	11,  // 104: farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile:type_name -> farm.nurture.core.contracts.common.MapTile
	70,  // 105: farm.nurture.core.contracts.common.RegisterSourceConfig.cloudStore:type_name -> farm.nurture.core.contracts.common.CloudStore
	71,  // 106: farm.nurture.core.contracts.common.RegisterSourceConfig.url_builder:type_name -> farm.nurture.core.contracts.common.UrlBuilder
	72,  // 107: farm.nurture.core.contracts.common.RegisterSourceConfig.satellite:type_name -> farm.nurture.core.contracts.common.Satellite
	73,  // 108: farm.nurture.core.contracts.common.RegisterSourceConfig.band:type_name -> farm.nurture.core.contracts.common.Band
	63,  // 109: farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time:type_name -> farm.nurture.core.contracts.common.TimeRange
	63,  // 110: farm.nurture.core.contracts.common.RegisterSourceConfig.date_range:type_name -> farm.nurture.core.contracts.common.TimeRange
	55,  // 111: farm.nurture.core.contracts.common.NSVPlaceId.PlaceNamespace:type_name -> farm.nurture.core.contracts.common.PlaceNamespace
	54,  // 112: farm.nurture.core.contracts.common.NSVPlaceId.PlaceSourceType:type_name -> farm.nurture.core.contracts.common.PlaceSourceType
	56,  // 113: farm.nurture.core.contracts.common.NSVPlaceId.PlaceVisibleType:type_name -> farm.nurture.core.contracts.common.PlaceVisibleType
	114, // [114:114] is the sub-list for method output_type
	114, // [114:114] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_Common_geo_common_proto_init() }
func file_Common_geo_common_proto_init() {
	if File_Common_geo_common_proto != nil {
		return
	}
	file_Common_geo_enums_proto_init()
	file_Common_enums_proto_init()
	file_Common_time_slot_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Common_geo_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPlaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryToValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationsApplicable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterArguments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferenceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlaceTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceTagValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlappingPlace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlappingPlaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTilesToPreSignedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_geo_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NSVPlaceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_geo_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_geo_common_proto_goTypes,
		DependencyIndexes: file_Common_geo_common_proto_depIdxs,
		MessageInfos:      file_Common_geo_common_proto_msgTypes,
	}.Build()
	File_Common_geo_common_proto = out.File
	file_Common_geo_common_proto_rawDesc = nil
	file_Common_geo_common_proto_goTypes = nil
	file_Common_geo_common_proto_depIdxs = nil
}
