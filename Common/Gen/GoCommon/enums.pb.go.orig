// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: Common/enums.proto

package Common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventType int32

const (
	EventType_NO_WORKFLOW EventType = 0
	EventType_EVENT       EventType = 1
	EventType_SERVICE     EventType = 2
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "NO_WORKFLOW",
		1: "EVENT",
		2: "SERVICE",
	}
	EventType_value = map[string]int32{
		"NO_WORKFLOW": 0,
		"EVENT":       1,
		"SERVICE":     2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{0}
}

type BookingType int32

const (
	BookingType_NO_BOOKING                           BookingType = 0
	BookingType_FARM_SERVICE                         BookingType = 1
	BookingType_VISIT_FARMER                         BookingType = 2
	BookingType_SOIL_TESTING_BOOKING                 BookingType = 3
	BookingType_ORCHID_BOOKING                       BookingType = 4
	BookingType_PUSA_SPRAY_BOOKING                   BookingType = 5
	BookingType_GROUNDNUT_HARVEST_BOOKING            BookingType = 6
	BookingType_SEED_TREATMENT_BOOKING               BookingType = 7
	BookingType_POTATO_PLANTER_BOOKING               BookingType = 8
	BookingType_CULTIVATOR_BOOKING                   BookingType = 9
	BookingType_DISC_HARROW_BOOKING                  BookingType = 10
	BookingType_ROTAVATOR_BOOKING                    BookingType = 11
	BookingType_MB_PLOUGH_BOOKING                    BookingType = 12
	BookingType_TRACK_TYPE_COMBINE_HARVESTER_BOOKING BookingType = 13
	BookingType_COMBINE_HARVESTER_BOOKING            BookingType = 14
	BookingType_SEED_DRILL_BOOKING                   BookingType = 15
)

// Enum value maps for BookingType.
var (
	BookingType_name = map[int32]string{
		0:  "NO_BOOKING",
		1:  "FARM_SERVICE",
		2:  "VISIT_FARMER",
		3:  "SOIL_TESTING_BOOKING",
		4:  "ORCHID_BOOKING",
		5:  "PUSA_SPRAY_BOOKING",
		6:  "GROUNDNUT_HARVEST_BOOKING",
		7:  "SEED_TREATMENT_BOOKING",
		8:  "POTATO_PLANTER_BOOKING",
		9:  "CULTIVATOR_BOOKING",
		10: "DISC_HARROW_BOOKING",
		11: "ROTAVATOR_BOOKING",
		12: "MB_PLOUGH_BOOKING",
		13: "TRACK_TYPE_COMBINE_HARVESTER_BOOKING",
		14: "COMBINE_HARVESTER_BOOKING",
		15: "SEED_DRILL_BOOKING",
	}
	BookingType_value = map[string]int32{
		"NO_BOOKING":                           0,
		"FARM_SERVICE":                         1,
		"VISIT_FARMER":                         2,
		"SOIL_TESTING_BOOKING":                 3,
		"ORCHID_BOOKING":                       4,
		"PUSA_SPRAY_BOOKING":                   5,
		"GROUNDNUT_HARVEST_BOOKING":            6,
		"SEED_TREATMENT_BOOKING":               7,
		"POTATO_PLANTER_BOOKING":               8,
		"CULTIVATOR_BOOKING":                   9,
		"DISC_HARROW_BOOKING":                  10,
		"ROTAVATOR_BOOKING":                    11,
		"MB_PLOUGH_BOOKING":                    12,
		"TRACK_TYPE_COMBINE_HARVESTER_BOOKING": 13,
		"COMBINE_HARVESTER_BOOKING":            14,
		"SEED_DRILL_BOOKING":                   15,
	}
)

func (x BookingType) Enum() *BookingType {
	p := new(BookingType)
	*p = x
	return p
}

func (x BookingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[1].Descriptor()
}

func (BookingType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[1]
}

func (x BookingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingType.Descriptor instead.
func (BookingType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{1}
}

type ServiceType int32

const (
	ServiceType_NO_SERVICE                           ServiceType = 0
	ServiceType_SOWING                               ServiceType = 1
	ServiceType_SPRAYING                             ServiceType = 2
	ServiceType_HARVESTING                           ServiceType = 3
	ServiceType_SOIL_SAMPLE_COLLECTION               ServiceType = 4
	ServiceType_SOIL_TESTING_SERVICE                 ServiceType = 5
	ServiceType_PUSA_SPRAY_SERVICE                   ServiceType = 6
	ServiceType_GROUNDNUT_HARVEST_SERVICE            ServiceType = 7
	ServiceType_SEED_TREATMENT_SERVICE               ServiceType = 8
	ServiceType_POTATO_PLANTER_SERVICE               ServiceType = 9
	ServiceType_CULTIVATOR_SERVICE                   ServiceType = 10
	ServiceType_DISC_HARROW_SERVICE                  ServiceType = 11
	ServiceType_ROTAVATOR_SERVICE                    ServiceType = 12
	ServiceType_MB_PLOUGH_SERVICE                    ServiceType = 13
	ServiceType_TRACK_TYPE_COMBINE_HARVESTER_SERVICE ServiceType = 14
	ServiceType_COMBINE_HARVESTER_SERVICE            ServiceType = 15
	ServiceType_SEED_DRILL_SERVICE                   ServiceType = 16
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0:  "NO_SERVICE",
		1:  "SOWING",
		2:  "SPRAYING",
		3:  "HARVESTING",
		4:  "SOIL_SAMPLE_COLLECTION",
		5:  "SOIL_TESTING_SERVICE",
		6:  "PUSA_SPRAY_SERVICE",
		7:  "GROUNDNUT_HARVEST_SERVICE",
		8:  "SEED_TREATMENT_SERVICE",
		9:  "POTATO_PLANTER_SERVICE",
		10: "CULTIVATOR_SERVICE",
		11: "DISC_HARROW_SERVICE",
		12: "ROTAVATOR_SERVICE",
		13: "MB_PLOUGH_SERVICE",
		14: "TRACK_TYPE_COMBINE_HARVESTER_SERVICE",
		15: "COMBINE_HARVESTER_SERVICE",
		16: "SEED_DRILL_SERVICE",
	}
	ServiceType_value = map[string]int32{
		"NO_SERVICE":                           0,
		"SOWING":                               1,
		"SPRAYING":                             2,
		"HARVESTING":                           3,
		"SOIL_SAMPLE_COLLECTION":               4,
		"SOIL_TESTING_SERVICE":                 5,
		"PUSA_SPRAY_SERVICE":                   6,
		"GROUNDNUT_HARVEST_SERVICE":            7,
		"SEED_TREATMENT_SERVICE":               8,
		"POTATO_PLANTER_SERVICE":               9,
		"CULTIVATOR_SERVICE":                   10,
		"DISC_HARROW_SERVICE":                  11,
		"ROTAVATOR_SERVICE":                    12,
		"MB_PLOUGH_SERVICE":                    13,
		"TRACK_TYPE_COMBINE_HARVESTER_SERVICE": 14,
		"COMBINE_HARVESTER_SERVICE":            15,
		"SEED_DRILL_SERVICE":                   16,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[2].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[2]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{2}
}

type WorkType int32

const (
	WorkType_NO_WORK_TYPE                           WorkType = 0
	WorkType_OPERATOR_SOIL_SAMPLE_COLLECTION        WorkType = 1
	WorkType_OPTICS_SOIL_TESTING                    WorkType = 2
	WorkType_TRACTOR_SPRAY                          WorkType = 3
	WorkType_DRONE_SPRAY                            WorkType = 4
	WorkType_VERTICAL_SPRAY                         WorkType = 6
	WorkType_HARVEST_WORK                           WorkType = 7
	WorkType_HARVESTER_DRIVING_WORK                 WorkType = 8
	WorkType_TRACTOR_PUSA_SPRAY                     WorkType = 9
	WorkType_SEED_TREATMENT_WORK_TYPE               WorkType = 10
	WorkType_POTATO_PLANTER_WORK_TYPE               WorkType = 11
	WorkType_CULTIVATOR_WORK_TYPE                   WorkType = 12
	WorkType_DISC_HARROW_WORK_TYPE                  WorkType = 13
	WorkType_ROTAVATOR_WORK_TYPE                    WorkType = 14
	WorkType_MB_PLOUGH_WORK_TYPE                    WorkType = 15
	WorkType_TRACK_TYPE_COMBINE_HARVESTER_WORK_TYPE WorkType = 16
	WorkType_COMBINE_HARVESTER_WORK_TYPE            WorkType = 17
	WorkType_SEED_DRILL_WORK_TYPE                   WorkType = 18
)

// Enum value maps for WorkType.
var (
	WorkType_name = map[int32]string{
		0:  "NO_WORK_TYPE",
		1:  "OPERATOR_SOIL_SAMPLE_COLLECTION",
		2:  "OPTICS_SOIL_TESTING",
		3:  "TRACTOR_SPRAY",
		4:  "DRONE_SPRAY",
		6:  "VERTICAL_SPRAY",
		7:  "HARVEST_WORK",
		8:  "HARVESTER_DRIVING_WORK",
		9:  "TRACTOR_PUSA_SPRAY",
		10: "SEED_TREATMENT_WORK_TYPE",
		11: "POTATO_PLANTER_WORK_TYPE",
		12: "CULTIVATOR_WORK_TYPE",
		13: "DISC_HARROW_WORK_TYPE",
		14: "ROTAVATOR_WORK_TYPE",
		15: "MB_PLOUGH_WORK_TYPE",
		16: "TRACK_TYPE_COMBINE_HARVESTER_WORK_TYPE",
		17: "COMBINE_HARVESTER_WORK_TYPE",
		18: "SEED_DRILL_WORK_TYPE",
	}
	WorkType_value = map[string]int32{
		"NO_WORK_TYPE":                           0,
		"OPERATOR_SOIL_SAMPLE_COLLECTION":        1,
		"OPTICS_SOIL_TESTING":                    2,
		"TRACTOR_SPRAY":                          3,
		"DRONE_SPRAY":                            4,
		"VERTICAL_SPRAY":                         6,
		"HARVEST_WORK":                           7,
		"HARVESTER_DRIVING_WORK":                 8,
		"TRACTOR_PUSA_SPRAY":                     9,
		"SEED_TREATMENT_WORK_TYPE":               10,
		"POTATO_PLANTER_WORK_TYPE":               11,
		"CULTIVATOR_WORK_TYPE":                   12,
		"DISC_HARROW_WORK_TYPE":                  13,
		"ROTAVATOR_WORK_TYPE":                    14,
		"MB_PLOUGH_WORK_TYPE":                    15,
		"TRACK_TYPE_COMBINE_HARVESTER_WORK_TYPE": 16,
		"COMBINE_HARVESTER_WORK_TYPE":            17,
		"SEED_DRILL_WORK_TYPE":                   18,
	}
)

func (x WorkType) Enum() *WorkType {
	p := new(WorkType)
	*p = x
	return p
}

func (x WorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[3].Descriptor()
}

func (WorkType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[3]
}

func (x WorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkType.Descriptor instead.
func (WorkType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{3}
}

type WorkClass int32

const (
	WorkClass_NO_WORK_CLASS        WorkClass = 0
	WorkClass_INDIAN_TRACTOR_SPRAY WorkClass = 1
)

// Enum value maps for WorkClass.
var (
	WorkClass_name = map[int32]string{
		0: "NO_WORK_CLASS",
		1: "INDIAN_TRACTOR_SPRAY",
	}
	WorkClass_value = map[string]int32{
		"NO_WORK_CLASS":        0,
		"INDIAN_TRACTOR_SPRAY": 1,
	}
)

func (x WorkClass) Enum() *WorkClass {
	p := new(WorkClass)
	*p = x
	return p
}

func (x WorkClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkClass) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[4].Descriptor()
}

func (WorkClass) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[4]
}

func (x WorkClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkClass.Descriptor instead.
func (WorkClass) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{4}
}

type ServiceClass int32

const (
	ServiceClass_NO_SERVICE_CLASS         ServiceClass = 0
	ServiceClass_OPERATOR_MACHINE_SERVICE ServiceClass = 1
)

// Enum value maps for ServiceClass.
var (
	ServiceClass_name = map[int32]string{
		0: "NO_SERVICE_CLASS",
		1: "OPERATOR_MACHINE_SERVICE",
	}
	ServiceClass_value = map[string]int32{
		"NO_SERVICE_CLASS":         0,
		"OPERATOR_MACHINE_SERVICE": 1,
	}
)

func (x ServiceClass) Enum() *ServiceClass {
	p := new(ServiceClass)
	*p = x
	return p
}

func (x ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[5].Descriptor()
}

func (ServiceClass) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[5]
}

func (x ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceClass.Descriptor instead.
func (ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{5}
}

type UnitType int32

const (
	UnitType_NO_UNIT_TYPE UnitType = 0
	UnitType_UNIT_ACRES   UnitType = 1
	UnitType_UNIT_LITERS  UnitType = 2
)

// Enum value maps for UnitType.
var (
	UnitType_name = map[int32]string{
		0: "NO_UNIT_TYPE",
		1: "UNIT_ACRES",
		2: "UNIT_LITERS",
	}
	UnitType_value = map[string]int32{
		"NO_UNIT_TYPE": 0,
		"UNIT_ACRES":   1,
		"UNIT_LITERS":  2,
	}
)

func (x UnitType) Enum() *UnitType {
	p := new(UnitType)
	*p = x
	return p
}

func (x UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[6].Descriptor()
}

func (UnitType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[6]
}

func (x UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitType.Descriptor instead.
func (UnitType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{6}
}

type ProductSKUClass int32

const (
	ProductSKUClass_PRODUCT_NO_CLASS ProductSKUClass = 0
)

// Enum value maps for ProductSKUClass.
var (
	ProductSKUClass_name = map[int32]string{
		0: "PRODUCT_NO_CLASS",
	}
	ProductSKUClass_value = map[string]int32{
		"PRODUCT_NO_CLASS": 0,
	}
)

func (x ProductSKUClass) Enum() *ProductSKUClass {
	p := new(ProductSKUClass)
	*p = x
	return p
}

func (x ProductSKUClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSKUClass) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[7].Descriptor()
}

func (ProductSKUClass) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[7]
}

func (x ProductSKUClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSKUClass.Descriptor instead.
func (ProductSKUClass) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{7}
}

type ProductSKUType int32

const (
	ProductSKUType_PRODUCT_NO_TYPE ProductSKUType = 0
)

// Enum value maps for ProductSKUType.
var (
	ProductSKUType_name = map[int32]string{
		0: "PRODUCT_NO_TYPE",
	}
	ProductSKUType_value = map[string]int32{
		"PRODUCT_NO_TYPE": 0,
	}
)

func (x ProductSKUType) Enum() *ProductSKUType {
	p := new(ProductSKUType)
	*p = x
	return p
}

func (x ProductSKUType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSKUType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[8].Descriptor()
}

func (ProductSKUType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[8]
}

func (x ProductSKUType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSKUType.Descriptor instead.
func (ProductSKUType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{8}
}

type VisitType int32

const (
	VisitType_NO_EVENT            VisitType = 0
	VisitType_SOIL_TESTING        VisitType = 1
	VisitType_CROP_TESTING        VisitType = 2
	VisitType_FARMER_REGISTRATION VisitType = 3
	VisitType_FARMER_DEMO         VisitType = 4
)

// Enum value maps for VisitType.
var (
	VisitType_name = map[int32]string{
		0: "NO_EVENT",
		1: "SOIL_TESTING",
		2: "CROP_TESTING",
		3: "FARMER_REGISTRATION",
		4: "FARMER_DEMO",
	}
	VisitType_value = map[string]int32{
		"NO_EVENT":            0,
		"SOIL_TESTING":        1,
		"CROP_TESTING":        2,
		"FARMER_REGISTRATION": 3,
		"FARMER_DEMO":         4,
	}
)

func (x VisitType) Enum() *VisitType {
	p := new(VisitType)
	*p = x
	return p
}

func (x VisitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisitType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[9].Descriptor()
}

func (VisitType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[9]
}

func (x VisitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisitType.Descriptor instead.
func (VisitType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{9}
}

type EventReason int32

const (
	EventReason_NO_EVENT_REASON EventReason = 0
	EventReason_HERBICIDE       EventReason = 1
	EventReason_PESTICIDE       EventReason = 2
	EventReason_WEATHER         EventReason = 3
)

// Enum value maps for EventReason.
var (
	EventReason_name = map[int32]string{
		0: "NO_EVENT_REASON",
		1: "HERBICIDE",
		2: "PESTICIDE",
		3: "WEATHER",
	}
	EventReason_value = map[string]int32{
		"NO_EVENT_REASON": 0,
		"HERBICIDE":       1,
		"PESTICIDE":       2,
		"WEATHER":         3,
	}
)

func (x EventReason) Enum() *EventReason {
	p := new(EventReason)
	*p = x
	return p
}

func (x EventReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[10].Descriptor()
}

func (EventReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[10]
}

func (x EventReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventReason.Descriptor instead.
func (EventReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{10}
}

type EventUpdateType int32

const (
	EventUpdateType_NO_UPDATE                                EventUpdateType = 0
	EventUpdateType_EVENT_UPDATE_MODIFY                      EventUpdateType = 2
	EventUpdateType_EVENT_UPDATE_CANCEL                      EventUpdateType = 3
	EventUpdateType_EVENT_UPDATE_OPERATOR_ACCEPT             EventUpdateType = 4
	EventUpdateType_EVENT_UPDATE_OPERATOR_DENY               EventUpdateType = 5
	EventUpdateType_EVENT_UPDATE_SCHEDULE_TIME               EventUpdateType = 1
	EventUpdateType_EVENT_UPDATE_SCHEDULE_AREA               EventUpdateType = 6
	EventUpdateType_EVENT_UPDATE_SCHEDULE_AREA_TIME          EventUpdateType = 12
	EventUpdateType_EVENT_UPDATE_REQUEST_TIME                EventUpdateType = 18
	EventUpdateType_EVENT_UPDATE_REQUEST_AREA                EventUpdateType = 19
	EventUpdateType_EVENT_UPDATE_REQUEST_AREA_TIME           EventUpdateType = 20
	EventUpdateType_EVENT_UPDATE_ACTOR_ASSIGNED              EventUpdateType = 7
	EventUpdateType_EVENT_UPDATE_ACTOR_REMOVED               EventUpdateType = 8
	EventUpdateType_EVENT_UPDATE_SERVICE_AREA                EventUpdateType = 9
	EventUpdateType_EVENT_UPDATE_SERVICE_AREA_TIME           EventUpdateType = 10
	EventUpdateType_EVENT_UPDATE_SERVICE_TIME                EventUpdateType = 11
	EventUpdateType_EVENT_UPDATE_SERVICE_START               EventUpdateType = 13
	EventUpdateType_EVENT_UPDATE_SERVICE_PAUSE               EventUpdateType = 14
	EventUpdateType_EVENT_UPDATE_SERVICE_RESUME              EventUpdateType = 15
	EventUpdateType_EVENT_UPDATE_SERVICE_DONE                EventUpdateType = 16
	EventUpdateType_EVENT_UPDATE_SERVICE_COMPLETED           EventUpdateType = 17
	EventUpdateType_EVENT_UPDATE_CAP_AVAILABLE               EventUpdateType = 21
	EventUpdateType_EVENT_UPDATE_CAP_UNAVAILABLE             EventUpdateType = 22
	EventUpdateType_EVENT_UPDATE_SAMPLE_COLLECTION_COMPLETED EventUpdateType = 23
	EventUpdateType_EVENT_UPDATE_DELIVERY_COMPLETED          EventUpdateType = 24
	EventUpdateType_EVENT_UPDATE_FARM_SCAN_COMPLETED         EventUpdateType = 25
	EventUpdateType_EVENT_UPDATE_PAYMENT_COLLECTED           EventUpdateType = 26
	EventUpdateType_EVENT_UPDATE_SERVICE_STOPPED             EventUpdateType = 27
)

// Enum value maps for EventUpdateType.
var (
	EventUpdateType_name = map[int32]string{
		0:  "NO_UPDATE",
		2:  "EVENT_UPDATE_MODIFY",
		3:  "EVENT_UPDATE_CANCEL",
		4:  "EVENT_UPDATE_OPERATOR_ACCEPT",
		5:  "EVENT_UPDATE_OPERATOR_DENY",
		1:  "EVENT_UPDATE_SCHEDULE_TIME",
		6:  "EVENT_UPDATE_SCHEDULE_AREA",
		12: "EVENT_UPDATE_SCHEDULE_AREA_TIME",
		18: "EVENT_UPDATE_REQUEST_TIME",
		19: "EVENT_UPDATE_REQUEST_AREA",
		20: "EVENT_UPDATE_REQUEST_AREA_TIME",
		7:  "EVENT_UPDATE_ACTOR_ASSIGNED",
		8:  "EVENT_UPDATE_ACTOR_REMOVED",
		9:  "EVENT_UPDATE_SERVICE_AREA",
		10: "EVENT_UPDATE_SERVICE_AREA_TIME",
		11: "EVENT_UPDATE_SERVICE_TIME",
		13: "EVENT_UPDATE_SERVICE_START",
		14: "EVENT_UPDATE_SERVICE_PAUSE",
		15: "EVENT_UPDATE_SERVICE_RESUME",
		16: "EVENT_UPDATE_SERVICE_DONE",
		17: "EVENT_UPDATE_SERVICE_COMPLETED",
		21: "EVENT_UPDATE_CAP_AVAILABLE",
		22: "EVENT_UPDATE_CAP_UNAVAILABLE",
		23: "EVENT_UPDATE_SAMPLE_COLLECTION_COMPLETED",
		24: "EVENT_UPDATE_DELIVERY_COMPLETED",
		25: "EVENT_UPDATE_FARM_SCAN_COMPLETED",
		26: "EVENT_UPDATE_PAYMENT_COLLECTED",
		27: "EVENT_UPDATE_SERVICE_STOPPED",
	}
	EventUpdateType_value = map[string]int32{
		"NO_UPDATE":                                0,
		"EVENT_UPDATE_MODIFY":                      2,
		"EVENT_UPDATE_CANCEL":                      3,
		"EVENT_UPDATE_OPERATOR_ACCEPT":             4,
		"EVENT_UPDATE_OPERATOR_DENY":               5,
		"EVENT_UPDATE_SCHEDULE_TIME":               1,
		"EVENT_UPDATE_SCHEDULE_AREA":               6,
		"EVENT_UPDATE_SCHEDULE_AREA_TIME":          12,
		"EVENT_UPDATE_REQUEST_TIME":                18,
		"EVENT_UPDATE_REQUEST_AREA":                19,
		"EVENT_UPDATE_REQUEST_AREA_TIME":           20,
		"EVENT_UPDATE_ACTOR_ASSIGNED":              7,
		"EVENT_UPDATE_ACTOR_REMOVED":               8,
		"EVENT_UPDATE_SERVICE_AREA":                9,
		"EVENT_UPDATE_SERVICE_AREA_TIME":           10,
		"EVENT_UPDATE_SERVICE_TIME":                11,
		"EVENT_UPDATE_SERVICE_START":               13,
		"EVENT_UPDATE_SERVICE_PAUSE":               14,
		"EVENT_UPDATE_SERVICE_RESUME":              15,
		"EVENT_UPDATE_SERVICE_DONE":                16,
		"EVENT_UPDATE_SERVICE_COMPLETED":           17,
		"EVENT_UPDATE_CAP_AVAILABLE":               21,
		"EVENT_UPDATE_CAP_UNAVAILABLE":             22,
		"EVENT_UPDATE_SAMPLE_COLLECTION_COMPLETED": 23,
		"EVENT_UPDATE_DELIVERY_COMPLETED":          24,
		"EVENT_UPDATE_FARM_SCAN_COMPLETED":         25,
		"EVENT_UPDATE_PAYMENT_COLLECTED":           26,
		"EVENT_UPDATE_SERVICE_STOPPED":             27,
	}
)

func (x EventUpdateType) Enum() *EventUpdateType {
	p := new(EventUpdateType)
	*p = x
	return p
}

func (x EventUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[11].Descriptor()
}

func (EventUpdateType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[11]
}

func (x EventUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventUpdateType.Descriptor instead.
func (EventUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{11}
}

type ActorType int32

const (
	ActorType_NO_ACTOR                               ActorType = 0
	ActorType_FARMER                                 ActorType = 1
	ActorType_OPERATOR                               ActorType = 2
	ActorType_FIELD_OFFICER                          ActorType = 3
	ActorType_BUSINESS_DEVELOPMENT_OFFICER           ActorType = 4
	ActorType_SUPPORT_AGENT                          ActorType = 5
	ActorType_ADARSH_KRISHI_CENTER                   ActorType = 6
	ActorType_EXTENSION_OFFICER                      ActorType = 7
	ActorType_EXTENSION_MANAGER                      ActorType = 8
	ActorType_CLUSTER_HEAD                           ActorType = 9
	ActorType_MACHINE                                ActorType = 10
	ActorType_SYSTEM                                 ActorType = 42
	ActorType_RETAILER                               ActorType = 14
	ActorType_TECHNICIAN                             ActorType = 15
	ActorType_COORDINATOR                            ActorType = 16
	ActorType_ASSISTANT_STATE_MANAGER                ActorType = 17
	ActorType_TEST_ACTOR                             ActorType = 18
	ActorType_LAB_TECHNICIAN                         ActorType = 19
	ActorType_GROWER                                 ActorType = 20
	ActorType_SERVICE_BOOKING_INSIGHTS               ActorType = 101
	ActorType_SHAKTIMAN_ADMIN                        ActorType = 102
	ActorType_CLUSTER_INCHARGE                       ActorType = 103
	ActorType_TERRITORY_MANAGER                      ActorType = 104
	ActorType_ZONAL_MARKETING_MANAGER                ActorType = 105
	ActorType_ZONAL_SALES_MANAGER                    ActorType = 106
	ActorType_ZONAL_SERVICE_MANAGER                  ActorType = 107
	ActorType_ASSISTANT_BUSINESS_DEVELOPMENT_OFFICER ActorType = 108
	ActorType_ASSISTANT_ADMIN                        ActorType = 109
	ActorType_RETAILER_OFFICER                       ActorType = 110
	ActorType_ADMIN_EMPLOYEE                         ActorType = 111
	ActorType_UNIMART_ADMIN                          ActorType = 112
	ActorType_SBU_HEAD                               ActorType = 113
	ActorType_PARTNER                                ActorType = 114
	ActorType_UNIMART_F3_FO                          ActorType = 115
	ActorType_UNIMART_INTERN                         ActorType = 116
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0:   "NO_ACTOR",
		1:   "FARMER",
		2:   "OPERATOR",
		3:   "FIELD_OFFICER",
		4:   "BUSINESS_DEVELOPMENT_OFFICER",
		5:   "SUPPORT_AGENT",
		6:   "ADARSH_KRISHI_CENTER",
		7:   "EXTENSION_OFFICER",
		8:   "EXTENSION_MANAGER",
		9:   "CLUSTER_HEAD",
		10:  "MACHINE",
		42:  "SYSTEM",
		14:  "RETAILER",
		15:  "TECHNICIAN",
		16:  "COORDINATOR",
		17:  "ASSISTANT_STATE_MANAGER",
		18:  "TEST_ACTOR",
		19:  "LAB_TECHNICIAN",
		20:  "GROWER",
		101: "SERVICE_BOOKING_INSIGHTS",
		102: "SHAKTIMAN_ADMIN",
		103: "CLUSTER_INCHARGE",
		104: "TERRITORY_MANAGER",
		105: "ZONAL_MARKETING_MANAGER",
		106: "ZONAL_SALES_MANAGER",
		107: "ZONAL_SERVICE_MANAGER",
		108: "ASSISTANT_BUSINESS_DEVELOPMENT_OFFICER",
		109: "ASSISTANT_ADMIN",
		110: "RETAILER_OFFICER",
		111: "ADMIN_EMPLOYEE",
		112: "UNIMART_ADMIN",
		113: "SBU_HEAD",
		114: "PARTNER",
		115: "UNIMART_F3_FO",
		116: "UNIMART_INTERN",
	}
	ActorType_value = map[string]int32{
		"NO_ACTOR":                               0,
		"FARMER":                                 1,
		"OPERATOR":                               2,
		"FIELD_OFFICER":                          3,
		"BUSINESS_DEVELOPMENT_OFFICER":           4,
		"SUPPORT_AGENT":                          5,
		"ADARSH_KRISHI_CENTER":                   6,
		"EXTENSION_OFFICER":                      7,
		"EXTENSION_MANAGER":                      8,
		"CLUSTER_HEAD":                           9,
		"MACHINE":                                10,
		"SYSTEM":                                 42,
		"RETAILER":                               14,
		"TECHNICIAN":                             15,
		"COORDINATOR":                            16,
		"ASSISTANT_STATE_MANAGER":                17,
		"TEST_ACTOR":                             18,
		"LAB_TECHNICIAN":                         19,
		"GROWER":                                 20,
		"SERVICE_BOOKING_INSIGHTS":               101,
		"SHAKTIMAN_ADMIN":                        102,
		"CLUSTER_INCHARGE":                       103,
		"TERRITORY_MANAGER":                      104,
		"ZONAL_MARKETING_MANAGER":                105,
		"ZONAL_SALES_MANAGER":                    106,
		"ZONAL_SERVICE_MANAGER":                  107,
		"ASSISTANT_BUSINESS_DEVELOPMENT_OFFICER": 108,
		"ASSISTANT_ADMIN":                        109,
		"RETAILER_OFFICER":                       110,
		"ADMIN_EMPLOYEE":                         111,
		"UNIMART_ADMIN":                          112,
		"SBU_HEAD":                               113,
		"PARTNER":                                114,
		"UNIMART_F3_FO":                          115,
		"UNIMART_INTERN":                         116,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[12].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[12]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{12}
}

type BookingSource int32

const (
	BookingSource_NO_BOOKING_SOURCE    BookingSource = 0
	BookingSource_FARMER_APP           BookingSource = 1
	BookingSource_OPERATOR_APP         BookingSource = 2
	BookingSource_AKC_PORTAL           BookingSource = 3
	BookingSource_TEST_PROBE_SOURCE    BookingSource = 4
	BookingSource_RETAIL_APP           BookingSource = 5
	BookingSource_ADMIN_APP            BookingSource = 6
	BookingSource_SYSTEM_AUTO_CREATION BookingSource = 7
)

// Enum value maps for BookingSource.
var (
	BookingSource_name = map[int32]string{
		0: "NO_BOOKING_SOURCE",
		1: "FARMER_APP",
		2: "OPERATOR_APP",
		3: "AKC_PORTAL",
		4: "TEST_PROBE_SOURCE",
		5: "RETAIL_APP",
		6: "ADMIN_APP",
		7: "SYSTEM_AUTO_CREATION",
	}
	BookingSource_value = map[string]int32{
		"NO_BOOKING_SOURCE":    0,
		"FARMER_APP":           1,
		"OPERATOR_APP":         2,
		"AKC_PORTAL":           3,
		"TEST_PROBE_SOURCE":    4,
		"RETAIL_APP":           5,
		"ADMIN_APP":            6,
		"SYSTEM_AUTO_CREATION": 7,
	}
)

func (x BookingSource) Enum() *BookingSource {
	p := new(BookingSource)
	*p = x
	return p
}

func (x BookingSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingSource) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[13].Descriptor()
}

func (BookingSource) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[13]
}

func (x BookingSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingSource.Descriptor instead.
func (BookingSource) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{13}
}

type ClientType int32

const (
	ClientType_NO_CLIENT_TYPE        ClientType = 0
	ClientType_CLIENT_FARMER_APP     ClientType = 1
	ClientType_CLIENT_OPERATOR_APP   ClientType = 2
	ClientType_CLIENT_ADMIN_APP      ClientType = 3
	ClientType_CLIENT_TECHNICIAN_APP ClientType = 4
	ClientType_CLIENT_AKC_PORTAL     ClientType = 5
	ClientType_CLIENT_SYS_ALLOCATION ClientType = 6
	ClientType_CLIENT_CAPTAIN        ClientType = 7
	ClientType_CLIENT_MDM            ClientType = 8
	ClientType_CLIENT_RETAIL_APP     ClientType = 9
	ClientType_CLIENT_PARTNER_APP    ClientType = 10
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0:  "NO_CLIENT_TYPE",
		1:  "CLIENT_FARMER_APP",
		2:  "CLIENT_OPERATOR_APP",
		3:  "CLIENT_ADMIN_APP",
		4:  "CLIENT_TECHNICIAN_APP",
		5:  "CLIENT_AKC_PORTAL",
		6:  "CLIENT_SYS_ALLOCATION",
		7:  "CLIENT_CAPTAIN",
		8:  "CLIENT_MDM",
		9:  "CLIENT_RETAIL_APP",
		10: "CLIENT_PARTNER_APP",
	}
	ClientType_value = map[string]int32{
		"NO_CLIENT_TYPE":        0,
		"CLIENT_FARMER_APP":     1,
		"CLIENT_OPERATOR_APP":   2,
		"CLIENT_ADMIN_APP":      3,
		"CLIENT_TECHNICIAN_APP": 4,
		"CLIENT_AKC_PORTAL":     5,
		"CLIENT_SYS_ALLOCATION": 6,
		"CLIENT_CAPTAIN":        7,
		"CLIENT_MDM":            8,
		"CLIENT_RETAIL_APP":     9,
		"CLIENT_PARTNER_APP":    10,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[14].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[14]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{14}
}

type BookingStatusReason int32

const (
	BookingStatusReason_NO_BOOKING_STATUS_REASON BookingStatusReason = 0
	BookingStatusReason_SOME_SERVICES_COMPLETED  BookingStatusReason = 5
	BookingStatusReason_ALL_SERVICES_COMPLETED   BookingStatusReason = 1
	BookingStatusReason_SOME_SERVICES_CANCELLED  BookingStatusReason = 2
	BookingStatusReason_ALL_SERVICES_CANCELLED   BookingStatusReason = 3
	BookingStatusReason_SOME_SERVICES_REJECTED   BookingStatusReason = 4
)

// Enum value maps for BookingStatusReason.
var (
	BookingStatusReason_name = map[int32]string{
		0: "NO_BOOKING_STATUS_REASON",
		5: "SOME_SERVICES_COMPLETED",
		1: "ALL_SERVICES_COMPLETED",
		2: "SOME_SERVICES_CANCELLED",
		3: "ALL_SERVICES_CANCELLED",
		4: "SOME_SERVICES_REJECTED",
	}
	BookingStatusReason_value = map[string]int32{
		"NO_BOOKING_STATUS_REASON": 0,
		"SOME_SERVICES_COMPLETED":  5,
		"ALL_SERVICES_COMPLETED":   1,
		"SOME_SERVICES_CANCELLED":  2,
		"ALL_SERVICES_CANCELLED":   3,
		"SOME_SERVICES_REJECTED":   4,
	}
)

func (x BookingStatusReason) Enum() *BookingStatusReason {
	p := new(BookingStatusReason)
	*p = x
	return p
}

func (x BookingStatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingStatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[15].Descriptor()
}

func (BookingStatusReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[15]
}

func (x BookingStatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingStatusReason.Descriptor instead.
func (BookingStatusReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{15}
}

type BookingStatus int32

const (
	BookingStatus_NO_BOOKING_STATUS           BookingStatus = 0
	BookingStatus_BOOKING_CREATED             BookingStatus = 1
	BookingStatus_BOOKING_PARTIALLY_COMPLETED BookingStatus = 2
	BookingStatus_BOOKING_CANCELLED           BookingStatus = 3
	BookingStatus_BOOKING_COMPLETED           BookingStatus = 4
	BookingStatus_BOOKING_EXPIRED             BookingStatus = 5
)

// Enum value maps for BookingStatus.
var (
	BookingStatus_name = map[int32]string{
		0: "NO_BOOKING_STATUS",
		1: "BOOKING_CREATED",
		2: "BOOKING_PARTIALLY_COMPLETED",
		3: "BOOKING_CANCELLED",
		4: "BOOKING_COMPLETED",
		5: "BOOKING_EXPIRED",
	}
	BookingStatus_value = map[string]int32{
		"NO_BOOKING_STATUS":           0,
		"BOOKING_CREATED":             1,
		"BOOKING_PARTIALLY_COMPLETED": 2,
		"BOOKING_CANCELLED":           3,
		"BOOKING_COMPLETED":           4,
		"BOOKING_EXPIRED":             5,
	}
)

func (x BookingStatus) Enum() *BookingStatus {
	p := new(BookingStatus)
	*p = x
	return p
}

func (x BookingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[16].Descriptor()
}

func (BookingStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[16]
}

func (x BookingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingStatus.Descriptor instead.
func (BookingStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{16}
}

type WorkflowStatus int32

const (
	WorkflowStatus_NO_STATUS                   WorkflowStatus = 0
	WorkflowStatus_CREATED                     WorkflowStatus = 10
	WorkflowStatus_ACCEPTED                    WorkflowStatus = 15
	WorkflowStatus_CONFIRMED                   WorkflowStatus = 20
	WorkflowStatus_ASSIGNED                    WorkflowStatus = 30
	WorkflowStatus_SCHEDULED                   WorkflowStatus = 40
	WorkflowStatus_DISPATCHED                  WorkflowStatus = 50
	WorkflowStatus_STARTED                     WorkflowStatus = 60
	WorkflowStatus_COMPLETED                   WorkflowStatus = 80
	WorkflowStatus_SERVICE_PAUSED              WorkflowStatus = 200
	WorkflowStatus_SERVICE_BREAK               WorkflowStatus = 220
	WorkflowStatus_SAMPLE_COLLECTION_COMPLETED WorkflowStatus = 251
	WorkflowStatus_DELIVERY_COMPLETED          WorkflowStatus = 252
	WorkflowStatus_FARM_SCAN_COMPLETED         WorkflowStatus = 253
	WorkflowStatus_PAYMENT_COLLECTED           WorkflowStatus = 254
	WorkflowStatus_SUSPENDED                   WorkflowStatus = 300
	WorkflowStatus_CANCELLED                   WorkflowStatus = 320
	WorkflowStatus_REJECTED                    WorkflowStatus = 420
	WorkflowStatus_RESUMED                     WorkflowStatus = 421
	WorkflowStatus_STOPPED                     WorkflowStatus = 422
)

// Enum value maps for WorkflowStatus.
var (
	WorkflowStatus_name = map[int32]string{
		0:   "NO_STATUS",
		10:  "CREATED",
		15:  "ACCEPTED",
		20:  "CONFIRMED",
		30:  "ASSIGNED",
		40:  "SCHEDULED",
		50:  "DISPATCHED",
		60:  "STARTED",
		80:  "COMPLETED",
		200: "SERVICE_PAUSED",
		220: "SERVICE_BREAK",
		251: "SAMPLE_COLLECTION_COMPLETED",
		252: "DELIVERY_COMPLETED",
		253: "FARM_SCAN_COMPLETED",
		254: "PAYMENT_COLLECTED",
		300: "SUSPENDED",
		320: "CANCELLED",
		420: "REJECTED",
		421: "RESUMED",
		422: "STOPPED",
	}
	WorkflowStatus_value = map[string]int32{
		"NO_STATUS":                   0,
		"CREATED":                     10,
		"ACCEPTED":                    15,
		"CONFIRMED":                   20,
		"ASSIGNED":                    30,
		"SCHEDULED":                   40,
		"DISPATCHED":                  50,
		"STARTED":                     60,
		"COMPLETED":                   80,
		"SERVICE_PAUSED":              200,
		"SERVICE_BREAK":               220,
		"SAMPLE_COLLECTION_COMPLETED": 251,
		"DELIVERY_COMPLETED":          252,
		"FARM_SCAN_COMPLETED":         253,
		"PAYMENT_COLLECTED":           254,
		"SUSPENDED":                   300,
		"CANCELLED":                   320,
		"REJECTED":                    420,
		"RESUMED":                     421,
		"STOPPED":                     422,
	}
)

func (x WorkflowStatus) Enum() *WorkflowStatus {
	p := new(WorkflowStatus)
	*p = x
	return p
}

func (x WorkflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[17].Descriptor()
}

func (WorkflowStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[17]
}

func (x WorkflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatus.Descriptor instead.
func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{17}
}

type WorkflowStatusReason int32

const (
	WorkflowStatusReason_NO_WORKFLOW_REASON                                WorkflowStatusReason = 0
	WorkflowStatusReason_REASON_SERVICE_TASK_DONE                          WorkflowStatusReason = 1
	WorkflowStatusReason_REASON_SERVICE_CANCELLED                          WorkflowStatusReason = 34
	WorkflowStatusReason_REASON_MACHINE_BREAKDOWN                          WorkflowStatusReason = 2
	WorkflowStatusReason_REASON_CUSTOMER_NOT_READY                         WorkflowStatusReason = 3
	WorkflowStatusReason_REASON_PRODUCT_NOT_MATCHED                        WorkflowStatusReason = 4
	WorkflowStatusReason_REASON_ACTOR_ALLOTMENT                            WorkflowStatusReason = 5
	WorkflowStatusReason_REASON_PRODUCT_SKU_ATTACHED                       WorkflowStatusReason = 6
	WorkflowStatusReason_REASON_OPERATOR_REMOVED                           WorkflowStatusReason = 7
	WorkflowStatusReason_REASON_MACHINE_REMOVED                            WorkflowStatusReason = 8
	WorkflowStatusReason_REASON_PRODUCT_SKU_ATTACHMENT_REMOVED             WorkflowStatusReason = 9
	WorkflowStatusReason_REASON_ACTOR_REMOVED                              WorkflowStatusReason = 10
	WorkflowStatusReason_REASON_TASK_STARTED                               WorkflowStatusReason = 11
	WorkflowStatusReason_REASON_TASK_PAUSED                                WorkflowStatusReason = 12
	WorkflowStatusReason_REASON_TASK_RESUMED                               WorkflowStatusReason = 13
	WorkflowStatusReason_REASON_OPERATOR_FARMER_CONFIRMED                  WorkflowStatusReason = 14
	WorkflowStatusReason_REASON_ACTOR_ON_WAY                               WorkflowStatusReason = 15
	WorkflowStatusReason_REASON_LACK_OF_WATER                              WorkflowStatusReason = 16
	WorkflowStatusReason_REASON_BAD_WEATHER                                WorkflowStatusReason = 17
	WorkflowStatusReason_REASON_PESTICIDE_ON_CROP                          WorkflowStatusReason = 18
	WorkflowStatusReason_REASON_HERBICIDE_ON_CROP                          WorkflowStatusReason = 19
	WorkflowStatusReason_REASON_LAND_NOT_FOUND                             WorkflowStatusReason = 20
	WorkflowStatusReason_REASON_CROP_NOT_FOUND                             WorkflowStatusReason = 21
	WorkflowStatusReason_REASON_BOOKING_CREATED                            WorkflowStatusReason = 22
	WorkflowStatusReason_REASON_BOOKING_CANCELLED                          WorkflowStatusReason = 32
	WorkflowStatusReason_REASON_BOOKING_COMPLETED                          WorkflowStatusReason = 33
	WorkflowStatusReason_REASON_TASK_GROUP_REMOVED                         WorkflowStatusReason = 23
	WorkflowStatusReason_REASON_TASK_GROUP_ADDED                           WorkflowStatusReason = 24
	WorkflowStatusReason_REASON_TASK_GROUP_UPDATED                         WorkflowStatusReason = 25
	WorkflowStatusReason_REASON_CAPACITY_AVAILABLE                         WorkflowStatusReason = 26
	WorkflowStatusReason_REASON_CAPACITY_UNAVAILABLE                       WorkflowStatusReason = 27
	WorkflowStatusReason_REASON_CAPACITY_EVICTED                           WorkflowStatusReason = 36
	WorkflowStatusReason_REASON_PLANNER_ALLOC_AVAILABLE                    WorkflowStatusReason = 28
	WorkflowStatusReason_REASON_PLANNER_ALLOC_UNAVAILABLE                  WorkflowStatusReason = 29
	WorkflowStatusReason_REASON_PLANNER_DAILY_ALLOTMENT                    WorkflowStatusReason = 30
	WorkflowStatusReason_REASON_MANUAL_ALLOTMENT                           WorkflowStatusReason = 31
	WorkflowStatusReason_REASON_UPDATE_FAILED                              WorkflowStatusReason = 37
	WorkflowStatusReason_REASON_UNALLOTTED_FAILED                          WorkflowStatusReason = 38
	WorkflowStatusReason_REASON_EVICTION_DUE_TO_HIGH_DEMAND                WorkflowStatusReason = 50
	WorkflowStatusReason_REASON_EDIT_LIMIT_CROSSED                         WorkflowStatusReason = 39
	WorkflowStatusReason_REASON_BAD_REQUEST                                WorkflowStatusReason = 40
	WorkflowStatusReason_REASON_BAD_INPUT_REQUEST_TIME                     WorkflowStatusReason = 41
	WorkflowStatusReason_REASON_BAD_INPUT_REQUEST_AREA                     WorkflowStatusReason = 42
	WorkflowStatusReason_REASON_BAD_INPUT_SERVICE_AREA                     WorkflowStatusReason = 43
	WorkflowStatusReason_REASON_MACHINE_PREVENTIVE_MAINTENANCE             WorkflowStatusReason = 44
	WorkflowStatusReason_REASON_MACHINE_PREVENTIVE_MAINTENANCE_RESCHEDULED WorkflowStatusReason = 45
	WorkflowStatusReason_REASON_NO_SUPPLY_PRESENT                          WorkflowStatusReason = 71
	WorkflowStatusReason_REASON_MISSING_REQUIRED_ACTORS                    WorkflowStatusReason = 72
	WorkflowStatusReason_REASON_SUPPLY_IN_BREAKDOWN                        WorkflowStatusReason = 73
	WorkflowStatusReason_REASON_SUPPLY_CALENDAR_FULL                       WorkflowStatusReason = 74
	WorkflowStatusReason_REASON_SUPPLY_GROUP_INVALID_SKILL_SET_IDS         WorkflowStatusReason = 75
	WorkflowStatusReason_REASON_MACHINE_CAME_LATE                          WorkflowStatusReason = 81
	WorkflowStatusReason_REASON_OPERATOR_NOT_REACHABLE                     WorkflowStatusReason = 82
	WorkflowStatusReason_REASON_PRODUCT_NOT_AVAILABLE                      WorkflowStatusReason = 83
	WorkflowStatusReason_REASON_REQUEST_EXPIRED                            WorkflowStatusReason = 84
	WorkflowStatusReason_REASON_FAR_LOCATION                               WorkflowStatusReason = 91
	WorkflowStatusReason_REASON_TASK_STOPPED                               WorkflowStatusReason = 101
)

// Enum value maps for WorkflowStatusReason.
var (
	WorkflowStatusReason_name = map[int32]string{
		0:   "NO_WORKFLOW_REASON",
		1:   "REASON_SERVICE_TASK_DONE",
		34:  "REASON_SERVICE_CANCELLED",
		2:   "REASON_MACHINE_BREAKDOWN",
		3:   "REASON_CUSTOMER_NOT_READY",
		4:   "REASON_PRODUCT_NOT_MATCHED",
		5:   "REASON_ACTOR_ALLOTMENT",
		6:   "REASON_PRODUCT_SKU_ATTACHED",
		7:   "REASON_OPERATOR_REMOVED",
		8:   "REASON_MACHINE_REMOVED",
		9:   "REASON_PRODUCT_SKU_ATTACHMENT_REMOVED",
		10:  "REASON_ACTOR_REMOVED",
		11:  "REASON_TASK_STARTED",
		12:  "REASON_TASK_PAUSED",
		13:  "REASON_TASK_RESUMED",
		14:  "REASON_OPERATOR_FARMER_CONFIRMED",
		15:  "REASON_ACTOR_ON_WAY",
		16:  "REASON_LACK_OF_WATER",
		17:  "REASON_BAD_WEATHER",
		18:  "REASON_PESTICIDE_ON_CROP",
		19:  "REASON_HERBICIDE_ON_CROP",
		20:  "REASON_LAND_NOT_FOUND",
		21:  "REASON_CROP_NOT_FOUND",
		22:  "REASON_BOOKING_CREATED",
		32:  "REASON_BOOKING_CANCELLED",
		33:  "REASON_BOOKING_COMPLETED",
		23:  "REASON_TASK_GROUP_REMOVED",
		24:  "REASON_TASK_GROUP_ADDED",
		25:  "REASON_TASK_GROUP_UPDATED",
		26:  "REASON_CAPACITY_AVAILABLE",
		27:  "REASON_CAPACITY_UNAVAILABLE",
		36:  "REASON_CAPACITY_EVICTED",
		28:  "REASON_PLANNER_ALLOC_AVAILABLE",
		29:  "REASON_PLANNER_ALLOC_UNAVAILABLE",
		30:  "REASON_PLANNER_DAILY_ALLOTMENT",
		31:  "REASON_MANUAL_ALLOTMENT",
		37:  "REASON_UPDATE_FAILED",
		38:  "REASON_UNALLOTTED_FAILED",
		50:  "REASON_EVICTION_DUE_TO_HIGH_DEMAND",
		39:  "REASON_EDIT_LIMIT_CROSSED",
		40:  "REASON_BAD_REQUEST",
		41:  "REASON_BAD_INPUT_REQUEST_TIME",
		42:  "REASON_BAD_INPUT_REQUEST_AREA",
		43:  "REASON_BAD_INPUT_SERVICE_AREA",
		44:  "REASON_MACHINE_PREVENTIVE_MAINTENANCE",
		45:  "REASON_MACHINE_PREVENTIVE_MAINTENANCE_RESCHEDULED",
		71:  "REASON_NO_SUPPLY_PRESENT",
		72:  "REASON_MISSING_REQUIRED_ACTORS",
		73:  "REASON_SUPPLY_IN_BREAKDOWN",
		74:  "REASON_SUPPLY_CALENDAR_FULL",
		75:  "REASON_SUPPLY_GROUP_INVALID_SKILL_SET_IDS",
		81:  "REASON_MACHINE_CAME_LATE",
		82:  "REASON_OPERATOR_NOT_REACHABLE",
		83:  "REASON_PRODUCT_NOT_AVAILABLE",
		84:  "REASON_REQUEST_EXPIRED",
		91:  "REASON_FAR_LOCATION",
		101: "REASON_TASK_STOPPED",
	}
	WorkflowStatusReason_value = map[string]int32{
		"NO_WORKFLOW_REASON":                                0,
		"REASON_SERVICE_TASK_DONE":                          1,
		"REASON_SERVICE_CANCELLED":                          34,
		"REASON_MACHINE_BREAKDOWN":                          2,
		"REASON_CUSTOMER_NOT_READY":                         3,
		"REASON_PRODUCT_NOT_MATCHED":                        4,
		"REASON_ACTOR_ALLOTMENT":                            5,
		"REASON_PRODUCT_SKU_ATTACHED":                       6,
		"REASON_OPERATOR_REMOVED":                           7,
		"REASON_MACHINE_REMOVED":                            8,
		"REASON_PRODUCT_SKU_ATTACHMENT_REMOVED":             9,
		"REASON_ACTOR_REMOVED":                              10,
		"REASON_TASK_STARTED":                               11,
		"REASON_TASK_PAUSED":                                12,
		"REASON_TASK_RESUMED":                               13,
		"REASON_OPERATOR_FARMER_CONFIRMED":                  14,
		"REASON_ACTOR_ON_WAY":                               15,
		"REASON_LACK_OF_WATER":                              16,
		"REASON_BAD_WEATHER":                                17,
		"REASON_PESTICIDE_ON_CROP":                          18,
		"REASON_HERBICIDE_ON_CROP":                          19,
		"REASON_LAND_NOT_FOUND":                             20,
		"REASON_CROP_NOT_FOUND":                             21,
		"REASON_BOOKING_CREATED":                            22,
		"REASON_BOOKING_CANCELLED":                          32,
		"REASON_BOOKING_COMPLETED":                          33,
		"REASON_TASK_GROUP_REMOVED":                         23,
		"REASON_TASK_GROUP_ADDED":                           24,
		"REASON_TASK_GROUP_UPDATED":                         25,
		"REASON_CAPACITY_AVAILABLE":                         26,
		"REASON_CAPACITY_UNAVAILABLE":                       27,
		"REASON_CAPACITY_EVICTED":                           36,
		"REASON_PLANNER_ALLOC_AVAILABLE":                    28,
		"REASON_PLANNER_ALLOC_UNAVAILABLE":                  29,
		"REASON_PLANNER_DAILY_ALLOTMENT":                    30,
		"REASON_MANUAL_ALLOTMENT":                           31,
		"REASON_UPDATE_FAILED":                              37,
		"REASON_UNALLOTTED_FAILED":                          38,
		"REASON_EVICTION_DUE_TO_HIGH_DEMAND":                50,
		"REASON_EDIT_LIMIT_CROSSED":                         39,
		"REASON_BAD_REQUEST":                                40,
		"REASON_BAD_INPUT_REQUEST_TIME":                     41,
		"REASON_BAD_INPUT_REQUEST_AREA":                     42,
		"REASON_BAD_INPUT_SERVICE_AREA":                     43,
		"REASON_MACHINE_PREVENTIVE_MAINTENANCE":             44,
		"REASON_MACHINE_PREVENTIVE_MAINTENANCE_RESCHEDULED": 45,
		"REASON_NO_SUPPLY_PRESENT":                          71,
		"REASON_MISSING_REQUIRED_ACTORS":                    72,
		"REASON_SUPPLY_IN_BREAKDOWN":                        73,
		"REASON_SUPPLY_CALENDAR_FULL":                       74,
		"REASON_SUPPLY_GROUP_INVALID_SKILL_SET_IDS":         75,
		"REASON_MACHINE_CAME_LATE":                          81,
		"REASON_OPERATOR_NOT_REACHABLE":                     82,
		"REASON_PRODUCT_NOT_AVAILABLE":                      83,
		"REASON_REQUEST_EXPIRED":                            84,
		"REASON_FAR_LOCATION":                               91,
		"REASON_TASK_STOPPED":                               101,
	}
)

func (x WorkflowStatusReason) Enum() *WorkflowStatusReason {
	p := new(WorkflowStatusReason)
	*p = x
	return p
}

func (x WorkflowStatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[18].Descriptor()
}

func (WorkflowStatusReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[18]
}

func (x WorkflowStatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatusReason.Descriptor instead.
func (WorkflowStatusReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{18}
}

type ActorAllotmentStatus int32

const (
	ActorAllotmentStatus_NO_ALLOT_STATUS              ActorAllotmentStatus = 0
	ActorAllotmentStatus_ACTOR_ASSIGNED               ActorAllotmentStatus = 1
	ActorAllotmentStatus_ACTOR_REMOVED                ActorAllotmentStatus = 10
	ActorAllotmentStatus_ACTOR_REMOVED_BEFORE_ON_WAY  ActorAllotmentStatus = 11
	ActorAllotmentStatus_ACTOR_ON_WAY                 ActorAllotmentStatus = 2
	ActorAllotmentStatus_ACTOR_REMOVED_BEFORE_STARTED ActorAllotmentStatus = 12
	ActorAllotmentStatus_ACTOR_STARTED                ActorAllotmentStatus = 4
	ActorAllotmentStatus_ACTOR_REMOVED_AFTER_START    ActorAllotmentStatus = 15
	ActorAllotmentStatus_ACTOR_PAUSED                 ActorAllotmentStatus = 5
	ActorAllotmentStatus_ACTOR_DONE                   ActorAllotmentStatus = 6
)

// Enum value maps for ActorAllotmentStatus.
var (
	ActorAllotmentStatus_name = map[int32]string{
		0:  "NO_ALLOT_STATUS",
		1:  "ACTOR_ASSIGNED",
		10: "ACTOR_REMOVED",
		11: "ACTOR_REMOVED_BEFORE_ON_WAY",
		2:  "ACTOR_ON_WAY",
		12: "ACTOR_REMOVED_BEFORE_STARTED",
		4:  "ACTOR_STARTED",
		15: "ACTOR_REMOVED_AFTER_START",
		5:  "ACTOR_PAUSED",
		6:  "ACTOR_DONE",
	}
	ActorAllotmentStatus_value = map[string]int32{
		"NO_ALLOT_STATUS":              0,
		"ACTOR_ASSIGNED":               1,
		"ACTOR_REMOVED":                10,
		"ACTOR_REMOVED_BEFORE_ON_WAY":  11,
		"ACTOR_ON_WAY":                 2,
		"ACTOR_REMOVED_BEFORE_STARTED": 12,
		"ACTOR_STARTED":                4,
		"ACTOR_REMOVED_AFTER_START":    15,
		"ACTOR_PAUSED":                 5,
		"ACTOR_DONE":                   6,
	}
)

func (x ActorAllotmentStatus) Enum() *ActorAllotmentStatus {
	p := new(ActorAllotmentStatus)
	*p = x
	return p
}

func (x ActorAllotmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorAllotmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[19].Descriptor()
}

func (ActorAllotmentStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[19]
}

func (x ActorAllotmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorAllotmentStatus.Descriptor instead.
func (ActorAllotmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{19}
}

type ActorAllotmentStatusReason int32

const (
	ActorAllotmentStatusReason_NO_ALLOT_STATUS_REASON       ActorAllotmentStatusReason = 0
	ActorAllotmentStatusReason_OPERATOR_ASSIGNED            ActorAllotmentStatusReason = 1
	ActorAllotmentStatusReason_AKC_ASSIGNED                 ActorAllotmentStatusReason = 2
	ActorAllotmentStatusReason_ACTOR_REASSIGNED             ActorAllotmentStatusReason = 3
	ActorAllotmentStatusReason_SERVICE_TASK_COMPLETED       ActorAllotmentStatusReason = 4
	ActorAllotmentStatusReason_SERVICE_ACTOR_PART_DONE      ActorAllotmentStatusReason = 5
	ActorAllotmentStatusReason_OPERATOR_ON_WAY              ActorAllotmentStatusReason = 6
	ActorAllotmentStatusReason_OPERATOR_STARTED             ActorAllotmentStatusReason = 7
	ActorAllotmentStatusReason_OPERATOR_PAUSED_FOR_WATER    ActorAllotmentStatusReason = 8
	ActorAllotmentStatusReason_OPERATOR_CANCELLED           ActorAllotmentStatusReason = 9
	ActorAllotmentStatusReason_FARMER_CANCELLED             ActorAllotmentStatusReason = 10
	ActorAllotmentStatusReason_OPERATOR_OR_FARMER_CANCELLED ActorAllotmentStatusReason = 11
	ActorAllotmentStatusReason_SUPPLY_UNAVAILABLE           ActorAllotmentStatusReason = 12
)

// Enum value maps for ActorAllotmentStatusReason.
var (
	ActorAllotmentStatusReason_name = map[int32]string{
		0:  "NO_ALLOT_STATUS_REASON",
		1:  "OPERATOR_ASSIGNED",
		2:  "AKC_ASSIGNED",
		3:  "ACTOR_REASSIGNED",
		4:  "SERVICE_TASK_COMPLETED",
		5:  "SERVICE_ACTOR_PART_DONE",
		6:  "OPERATOR_ON_WAY",
		7:  "OPERATOR_STARTED",
		8:  "OPERATOR_PAUSED_FOR_WATER",
		9:  "OPERATOR_CANCELLED",
		10: "FARMER_CANCELLED",
		11: "OPERATOR_OR_FARMER_CANCELLED",
		12: "SUPPLY_UNAVAILABLE",
	}
	ActorAllotmentStatusReason_value = map[string]int32{
		"NO_ALLOT_STATUS_REASON":       0,
		"OPERATOR_ASSIGNED":            1,
		"AKC_ASSIGNED":                 2,
		"ACTOR_REASSIGNED":             3,
		"SERVICE_TASK_COMPLETED":       4,
		"SERVICE_ACTOR_PART_DONE":      5,
		"OPERATOR_ON_WAY":              6,
		"OPERATOR_STARTED":             7,
		"OPERATOR_PAUSED_FOR_WATER":    8,
		"OPERATOR_CANCELLED":           9,
		"FARMER_CANCELLED":             10,
		"OPERATOR_OR_FARMER_CANCELLED": 11,
		"SUPPLY_UNAVAILABLE":           12,
	}
)

func (x ActorAllotmentStatusReason) Enum() *ActorAllotmentStatusReason {
	p := new(ActorAllotmentStatusReason)
	*p = x
	return p
}

func (x ActorAllotmentStatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorAllotmentStatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[20].Descriptor()
}

func (ActorAllotmentStatusReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[20]
}

func (x ActorAllotmentStatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorAllotmentStatusReason.Descriptor instead.
func (ActorAllotmentStatusReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{20}
}

type ProductSKUPurchaseChannel int32

const (
	ProductSKUPurchaseChannel_NO_PURCHASE_CHANNEL       ProductSKUPurchaseChannel = 0
	ProductSKUPurchaseChannel_PURCHASE_CHANNEL_UNKNOWN  ProductSKUPurchaseChannel = 1
	ProductSKUPurchaseChannel_PURCHASE_FROM_DEALER      ProductSKUPurchaseChannel = 2
	ProductSKUPurchaseChannel_PURCHASE_FROM_OPERATOR    ProductSKUPurchaseChannel = 3
	ProductSKUPurchaseChannel_PURCHASE_FROM_THIRD_PARTY ProductSKUPurchaseChannel = 4
)

// Enum value maps for ProductSKUPurchaseChannel.
var (
	ProductSKUPurchaseChannel_name = map[int32]string{
		0: "NO_PURCHASE_CHANNEL",
		1: "PURCHASE_CHANNEL_UNKNOWN",
		2: "PURCHASE_FROM_DEALER",
		3: "PURCHASE_FROM_OPERATOR",
		4: "PURCHASE_FROM_THIRD_PARTY",
	}
	ProductSKUPurchaseChannel_value = map[string]int32{
		"NO_PURCHASE_CHANNEL":       0,
		"PURCHASE_CHANNEL_UNKNOWN":  1,
		"PURCHASE_FROM_DEALER":      2,
		"PURCHASE_FROM_OPERATOR":    3,
		"PURCHASE_FROM_THIRD_PARTY": 4,
	}
)

func (x ProductSKUPurchaseChannel) Enum() *ProductSKUPurchaseChannel {
	p := new(ProductSKUPurchaseChannel)
	*p = x
	return p
}

func (x ProductSKUPurchaseChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSKUPurchaseChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[21].Descriptor()
}

func (ProductSKUPurchaseChannel) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[21]
}

func (x ProductSKUPurchaseChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSKUPurchaseChannel.Descriptor instead.
func (ProductSKUPurchaseChannel) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{21}
}

type ProductSKUDomain int32

const (
	ProductSKUDomain_NO_SKU_DOMAIN ProductSKUDomain = 0
	ProductSKUDomain_DOMAIN_UPL    ProductSKUDomain = 1
)

// Enum value maps for ProductSKUDomain.
var (
	ProductSKUDomain_name = map[int32]string{
		0: "NO_SKU_DOMAIN",
		1: "DOMAIN_UPL",
	}
	ProductSKUDomain_value = map[string]int32{
		"NO_SKU_DOMAIN": 0,
		"DOMAIN_UPL":    1,
	}
)

func (x ProductSKUDomain) Enum() *ProductSKUDomain {
	p := new(ProductSKUDomain)
	*p = x
	return p
}

func (x ProductSKUDomain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSKUDomain) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[22].Descriptor()
}

func (ProductSKUDomain) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[22]
}

func (x ProductSKUDomain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSKUDomain.Descriptor instead.
func (ProductSKUDomain) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{22}
}

type ProductAttachmentStatus int32

const (
	ProductAttachmentStatus_NO_ATTACHMENT_STATUS ProductAttachmentStatus = 0
	ProductAttachmentStatus_VERIFIED_SUCCESS     ProductAttachmentStatus = 1
	ProductAttachmentStatus_FAKE_PRODUCT         ProductAttachmentStatus = 2
)

// Enum value maps for ProductAttachmentStatus.
var (
	ProductAttachmentStatus_name = map[int32]string{
		0: "NO_ATTACHMENT_STATUS",
		1: "VERIFIED_SUCCESS",
		2: "FAKE_PRODUCT",
	}
	ProductAttachmentStatus_value = map[string]int32{
		"NO_ATTACHMENT_STATUS": 0,
		"VERIFIED_SUCCESS":     1,
		"FAKE_PRODUCT":         2,
	}
)

func (x ProductAttachmentStatus) Enum() *ProductAttachmentStatus {
	p := new(ProductAttachmentStatus)
	*p = x
	return p
}

func (x ProductAttachmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductAttachmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[23].Descriptor()
}

func (ProductAttachmentStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[23]
}

func (x ProductAttachmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductAttachmentStatus.Descriptor instead.
func (ProductAttachmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{23}
}

type Currency int32

const (
	Currency_NO_CURRENCY_KNOWN Currency = 0
	Currency_INR               Currency = 1
	Currency_USD               Currency = 2
	Currency_CAD               Currency = 3
	Currency_AUD               Currency = 4
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "NO_CURRENCY_KNOWN",
		1: "INR",
		2: "USD",
		3: "CAD",
		4: "AUD",
	}
	Currency_value = map[string]int32{
		"NO_CURRENCY_KNOWN": 0,
		"INR":               1,
		"USD":               2,
		"CAD":               3,
		"AUD":               4,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[24].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[24]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{24}
}

type TaskStatus int32

const (
	TaskStatus_NO_TASK_STATUS   TaskStatus = 0
	TaskStatus_TASK_CREATED     TaskStatus = 1
	TaskStatus_TASK_STARTED     TaskStatus = 2
	TaskStatus_TASK_COMPLETED   TaskStatus = 3
	TaskStatus_PARENT_CANCELLED TaskStatus = 10
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0:  "NO_TASK_STATUS",
		1:  "TASK_CREATED",
		2:  "TASK_STARTED",
		3:  "TASK_COMPLETED",
		10: "PARENT_CANCELLED",
	}
	TaskStatus_value = map[string]int32{
		"NO_TASK_STATUS":   0,
		"TASK_CREATED":     1,
		"TASK_STARTED":     2,
		"TASK_COMPLETED":   3,
		"PARENT_CANCELLED": 10,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[25].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[25]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{25}
}

type RequestStatus int32

const (
	RequestStatus_NO_REQUEST_STATUS     RequestStatus = 0
	RequestStatus_SUCCESS               RequestStatus = 200
	RequestStatus_BAD_INPUT             RequestStatus = 400
	RequestStatus_NOT_FOUND             RequestStatus = 404
	RequestStatus_REQUEST_NOT_FULFILLED RequestStatus = 412
	RequestStatus_INTERNAL_ERROR        RequestStatus = 500
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0:   "NO_REQUEST_STATUS",
		200: "SUCCESS",
		400: "BAD_INPUT",
		404: "NOT_FOUND",
		412: "REQUEST_NOT_FULFILLED",
		500: "INTERNAL_ERROR",
	}
	RequestStatus_value = map[string]int32{
		"NO_REQUEST_STATUS":     0,
		"SUCCESS":               200,
		"BAD_INPUT":             400,
		"NOT_FOUND":             404,
		"REQUEST_NOT_FULFILLED": 412,
		"INTERNAL_ERROR":        500,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[26].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[26]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{26}
}

type RequestStatusReason int32

const (
	RequestStatusReason_NO_REQUEST_STATUS_REASON                RequestStatusReason = 0
	RequestStatusReason_DB_NOT_FOUND_ERROR                      RequestStatusReason = 4000
	RequestStatusReason_DB_DUPLICATE_KEY_ERROR                  RequestStatusReason = 4001
	RequestStatusReason_DB_INTERNAL_ERROR                       RequestStatusReason = 5000
	RequestStatusReason_REQUEST_PREPARE_FAILED                  RequestStatusReason = 6000
	RequestStatusReason_RESPONSE_READ_FAILED                    RequestStatusReason = 7000
	RequestStatusReason_JSON_PARSE_FAILED                       RequestStatusReason = 7001
	RequestStatusReason_WORKFLOW_CLOSED                         RequestStatusReason = 8000
	RequestStatusReason_DB_CREATE_BOOKING_ERROR                 RequestStatusReason = 50000
	RequestStatusReason_DB_CREATE_SERVICE_ERROR                 RequestStatusReason = 50001
	RequestStatusReason_DB_CREATE_BOOKING_SERVICE_ERROR         RequestStatusReason = 50002
	RequestStatusReason_DB_UPDATE_BOOKING_ERROR                 RequestStatusReason = 50100
	RequestStatusReason_DB_UPDATE_SERVICE_ERROR                 RequestStatusReason = 50101
	RequestStatusReason_DB_UPDATE_BOOKING_SERVICE_ERROR         RequestStatusReason = 50102
	RequestStatusReason_DB_GET_BOOKING_ERROR                    RequestStatusReason = 50200
	RequestStatusReason_DB_GET_SERVICE_ERROR                    RequestStatusReason = 50201
	RequestStatusReason_DB_GET_BOOKING_SERVICE_ERROR            RequestStatusReason = 50202
	RequestStatusReason_REWARDS_BACKEND_CALL_FAILED             RequestStatusReason = 50304
	RequestStatusReason_COMMUNICATION_CALL_FAILED               RequestStatusReason = 50401
	RequestStatusReason_SAM_CALL_FAILED                         RequestStatusReason = 50501
	RequestStatusReason_BN_CALL_FAILED                          RequestStatusReason = 50601
	RequestStatusReason_AFS_CALL_FAILED                         RequestStatusReason = 50701
	RequestStatusReason_PE_CALL_FAILED                          RequestStatusReason = 50801
	RequestStatusReason_LMS_CALL_FAILED                         RequestStatusReason = 50901
	RequestStatusReason_FARM_SERVICE_CALL_FAILED                RequestStatusReason = 51001
	RequestStatusReason_CROP_MODEL_CALL_FAILED                  RequestStatusReason = 51101
	RequestStatusReason_SUPPLY_WORKFLOWS_CALL_FAILED            RequestStatusReason = 51201
	RequestStatusReason_BOOKING_WORKFLOWS_CALL_FAILED           RequestStatusReason = 51202
	RequestStatusReason_PT_GET_SCORE_FAILED                     RequestStatusReason = 60000
	RequestStatusReason_PT_SCORE_CALCULATION_FAILED             RequestStatusReason = 60001
	RequestStatusReason_CAPACITY_UNAVAILABLE                    RequestStatusReason = 70000
	RequestStatusReason_NO_SUPPLY_AVAILABLE                     RequestStatusReason = 70001
	RequestStatusReason_REVERSE_TRANSACTION_EVENT_NOT_FOUND     RequestStatusReason = 80000
	RequestStatusReason_REQUEST_CHANGE_VALIDITY_FAILED          RequestStatusReason = 100000
	RequestStatusReason_REQUEST_TIME_VALIDITY_FAILED            RequestStatusReason = 1000001
	RequestStatusReason_REQUEST_AREA_VALIDITY_FAILED            RequestStatusReason = 1000002
	RequestStatusReason_REQUEST_AREA_IS_LOW                     RequestStatusReason = 1000003
	RequestStatusReason_REQUEST_TIME_IS_PAST                    RequestStatusReason = 1000004
	RequestStatusReason_REQUEST_TIME_IS_TOO_FUTURE              RequestStatusReason = 1000005
	RequestStatusReason_REQUEST_CHANGE_FAILED                   RequestStatusReason = 1000006
	RequestStatusReason_REQUEST_UPDATE_FAILED                   RequestStatusReason = 1000007
	RequestStatusReason_REQUEST_COMPLETE_FAILED                 RequestStatusReason = 100008
	RequestStatusReason_REQUEST_CANCEL_FAILED                   RequestStatusReason = 100009
	RequestStatusReason_REQUEST_SERVICE_AREA_EMPTY              RequestStatusReason = 1000010
	RequestStatusReason_REQUEST_SERVICE_AREA_ID_EMPTY           RequestStatusReason = 1000011
	RequestStatusReason_REQUEST_SERVICE_AREA_NS_EMPTY           RequestStatusReason = 1000012
	RequestStatusReason_REQUEST_DUPLICATE_TRANSACTION           RequestStatusReason = 1100001
	RequestStatusReason_REQUEST_INSUFFICIENT_FUNDS              RequestStatusReason = 1100002
	RequestStatusReason_CASHBACK_REQUEST_MONTHLY_LIMIT_EXCEEDED RequestStatusReason = 1100003
)

// Enum value maps for RequestStatusReason.
var (
	RequestStatusReason_name = map[int32]string{
		0:       "NO_REQUEST_STATUS_REASON",
		4000:    "DB_NOT_FOUND_ERROR",
		4001:    "DB_DUPLICATE_KEY_ERROR",
		5000:    "DB_INTERNAL_ERROR",
		6000:    "REQUEST_PREPARE_FAILED",
		7000:    "RESPONSE_READ_FAILED",
		7001:    "JSON_PARSE_FAILED",
		8000:    "WORKFLOW_CLOSED",
		50000:   "DB_CREATE_BOOKING_ERROR",
		50001:   "DB_CREATE_SERVICE_ERROR",
		50002:   "DB_CREATE_BOOKING_SERVICE_ERROR",
		50100:   "DB_UPDATE_BOOKING_ERROR",
		50101:   "DB_UPDATE_SERVICE_ERROR",
		50102:   "DB_UPDATE_BOOKING_SERVICE_ERROR",
		50200:   "DB_GET_BOOKING_ERROR",
		50201:   "DB_GET_SERVICE_ERROR",
		50202:   "DB_GET_BOOKING_SERVICE_ERROR",
		50304:   "REWARDS_BACKEND_CALL_FAILED",
		50401:   "COMMUNICATION_CALL_FAILED",
		50501:   "SAM_CALL_FAILED",
		50601:   "BN_CALL_FAILED",
		50701:   "AFS_CALL_FAILED",
		50801:   "PE_CALL_FAILED",
		50901:   "LMS_CALL_FAILED",
		51001:   "FARM_SERVICE_CALL_FAILED",
		51101:   "CROP_MODEL_CALL_FAILED",
		51201:   "SUPPLY_WORKFLOWS_CALL_FAILED",
		51202:   "BOOKING_WORKFLOWS_CALL_FAILED",
		60000:   "PT_GET_SCORE_FAILED",
		60001:   "PT_SCORE_CALCULATION_FAILED",
		70000:   "CAPACITY_UNAVAILABLE",
		70001:   "NO_SUPPLY_AVAILABLE",
		80000:   "REVERSE_TRANSACTION_EVENT_NOT_FOUND",
		100000:  "REQUEST_CHANGE_VALIDITY_FAILED",
		1000001: "REQUEST_TIME_VALIDITY_FAILED",
		1000002: "REQUEST_AREA_VALIDITY_FAILED",
		1000003: "REQUEST_AREA_IS_LOW",
		1000004: "REQUEST_TIME_IS_PAST",
		1000005: "REQUEST_TIME_IS_TOO_FUTURE",
		1000006: "REQUEST_CHANGE_FAILED",
		1000007: "REQUEST_UPDATE_FAILED",
		100008:  "REQUEST_COMPLETE_FAILED",
		100009:  "REQUEST_CANCEL_FAILED",
		1000010: "REQUEST_SERVICE_AREA_EMPTY",
		1000011: "REQUEST_SERVICE_AREA_ID_EMPTY",
		1000012: "REQUEST_SERVICE_AREA_NS_EMPTY",
		1100001: "REQUEST_DUPLICATE_TRANSACTION",
		1100002: "REQUEST_INSUFFICIENT_FUNDS",
		1100003: "CASHBACK_REQUEST_MONTHLY_LIMIT_EXCEEDED",
	}
	RequestStatusReason_value = map[string]int32{
		"NO_REQUEST_STATUS_REASON":                0,
		"DB_NOT_FOUND_ERROR":                      4000,
		"DB_DUPLICATE_KEY_ERROR":                  4001,
		"DB_INTERNAL_ERROR":                       5000,
		"REQUEST_PREPARE_FAILED":                  6000,
		"RESPONSE_READ_FAILED":                    7000,
		"JSON_PARSE_FAILED":                       7001,
		"WORKFLOW_CLOSED":                         8000,
		"DB_CREATE_BOOKING_ERROR":                 50000,
		"DB_CREATE_SERVICE_ERROR":                 50001,
		"DB_CREATE_BOOKING_SERVICE_ERROR":         50002,
		"DB_UPDATE_BOOKING_ERROR":                 50100,
		"DB_UPDATE_SERVICE_ERROR":                 50101,
		"DB_UPDATE_BOOKING_SERVICE_ERROR":         50102,
		"DB_GET_BOOKING_ERROR":                    50200,
		"DB_GET_SERVICE_ERROR":                    50201,
		"DB_GET_BOOKING_SERVICE_ERROR":            50202,
		"REWARDS_BACKEND_CALL_FAILED":             50304,
		"COMMUNICATION_CALL_FAILED":               50401,
		"SAM_CALL_FAILED":                         50501,
		"BN_CALL_FAILED":                          50601,
		"AFS_CALL_FAILED":                         50701,
		"PE_CALL_FAILED":                          50801,
		"LMS_CALL_FAILED":                         50901,
		"FARM_SERVICE_CALL_FAILED":                51001,
		"CROP_MODEL_CALL_FAILED":                  51101,
		"SUPPLY_WORKFLOWS_CALL_FAILED":            51201,
		"BOOKING_WORKFLOWS_CALL_FAILED":           51202,
		"PT_GET_SCORE_FAILED":                     60000,
		"PT_SCORE_CALCULATION_FAILED":             60001,
		"CAPACITY_UNAVAILABLE":                    70000,
		"NO_SUPPLY_AVAILABLE":                     70001,
		"REVERSE_TRANSACTION_EVENT_NOT_FOUND":     80000,
		"REQUEST_CHANGE_VALIDITY_FAILED":          100000,
		"REQUEST_TIME_VALIDITY_FAILED":            1000001,
		"REQUEST_AREA_VALIDITY_FAILED":            1000002,
		"REQUEST_AREA_IS_LOW":                     1000003,
		"REQUEST_TIME_IS_PAST":                    1000004,
		"REQUEST_TIME_IS_TOO_FUTURE":              1000005,
		"REQUEST_CHANGE_FAILED":                   1000006,
		"REQUEST_UPDATE_FAILED":                   1000007,
		"REQUEST_COMPLETE_FAILED":                 100008,
		"REQUEST_CANCEL_FAILED":                   100009,
		"REQUEST_SERVICE_AREA_EMPTY":              1000010,
		"REQUEST_SERVICE_AREA_ID_EMPTY":           1000011,
		"REQUEST_SERVICE_AREA_NS_EMPTY":           1000012,
		"REQUEST_DUPLICATE_TRANSACTION":           1100001,
		"REQUEST_INSUFFICIENT_FUNDS":              1100002,
		"CASHBACK_REQUEST_MONTHLY_LIMIT_EXCEEDED": 1100003,
	}
)

func (x RequestStatusReason) Enum() *RequestStatusReason {
	p := new(RequestStatusReason)
	*p = x
	return p
}

func (x RequestStatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[27].Descriptor()
}

func (RequestStatusReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[27]
}

func (x RequestStatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatusReason.Descriptor instead.
func (RequestStatusReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{27}
}

type EventReferenceType int32

const (
	EventReferenceType_NO_EVENT_REFERENCE_TYPE EventReferenceType = 0
	EventReferenceType_PACKAGE                 EventReferenceType = 1
	EventReferenceType_SALES                   EventReferenceType = 2
)

// Enum value maps for EventReferenceType.
var (
	EventReferenceType_name = map[int32]string{
		0: "NO_EVENT_REFERENCE_TYPE",
		1: "PACKAGE",
		2: "SALES",
	}
	EventReferenceType_value = map[string]int32{
		"NO_EVENT_REFERENCE_TYPE": 0,
		"PACKAGE":                 1,
		"SALES":                   2,
	}
)

func (x EventReferenceType) Enum() *EventReferenceType {
	p := new(EventReferenceType)
	*p = x
	return p
}

func (x EventReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[28].Descriptor()
}

func (EventReferenceType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[28]
}

func (x EventReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventReferenceType.Descriptor instead.
func (EventReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{28}
}

type DebugLevel int32

const (
	DebugLevel_NO_DEBUG_LEVEL DebugLevel = 0
	DebugLevel_PRODUCTION     DebugLevel = 1
	DebugLevel_GAMMA          DebugLevel = 2
	DebugLevel_BETA           DebugLevel = 3
	DebugLevel_ALPHA          DebugLevel = 4
	DebugLevel_STAGE          DebugLevel = 10
	DebugLevel_DEV            DebugLevel = 20
	DebugLevel_VERBOSE        DebugLevel = 30
)

// Enum value maps for DebugLevel.
var (
	DebugLevel_name = map[int32]string{
		0:  "NO_DEBUG_LEVEL",
		1:  "PRODUCTION",
		2:  "GAMMA",
		3:  "BETA",
		4:  "ALPHA",
		10: "STAGE",
		20: "DEV",
		30: "VERBOSE",
	}
	DebugLevel_value = map[string]int32{
		"NO_DEBUG_LEVEL": 0,
		"PRODUCTION":     1,
		"GAMMA":          2,
		"BETA":           3,
		"ALPHA":          4,
		"STAGE":          10,
		"DEV":            20,
		"VERBOSE":        30,
	}
)

func (x DebugLevel) Enum() *DebugLevel {
	p := new(DebugLevel)
	*p = x
	return p
}

func (x DebugLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[29].Descriptor()
}

func (DebugLevel) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[29]
}

func (x DebugLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugLevel.Descriptor instead.
func (DebugLevel) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{29}
}

type TriggerType int32

const (
	TriggerType_NO_TRIGGER                   TriggerType = 0
	TriggerType_TRIGGER_ALLOTMENT            TriggerType = 1
	TriggerType_TRIGGER_RE_ALLOTMENT         TriggerType = 2
	TriggerType_TRIGGER_CANCEL_ALLOTMENT     TriggerType = 3
	TriggerType_TRIGGER_APP_NOTIFICATION     TriggerType = 10
	TriggerType_TRIGGER_APP_SMS_NOTIFICATION TriggerType = 11
	TriggerType_TRIGGER_SMS                  TriggerType = 12
	TriggerType_TRIGGER_CALL                 TriggerType = 13
	TriggerType_TRIGGER_BOOKING              TriggerType = 20
	TriggerType_TRIGGER_QR_CODE_SCAN         TriggerType = 30
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0:  "NO_TRIGGER",
		1:  "TRIGGER_ALLOTMENT",
		2:  "TRIGGER_RE_ALLOTMENT",
		3:  "TRIGGER_CANCEL_ALLOTMENT",
		10: "TRIGGER_APP_NOTIFICATION",
		11: "TRIGGER_APP_SMS_NOTIFICATION",
		12: "TRIGGER_SMS",
		13: "TRIGGER_CALL",
		20: "TRIGGER_BOOKING",
		30: "TRIGGER_QR_CODE_SCAN",
	}
	TriggerType_value = map[string]int32{
		"NO_TRIGGER":                   0,
		"TRIGGER_ALLOTMENT":            1,
		"TRIGGER_RE_ALLOTMENT":         2,
		"TRIGGER_CANCEL_ALLOTMENT":     3,
		"TRIGGER_APP_NOTIFICATION":     10,
		"TRIGGER_APP_SMS_NOTIFICATION": 11,
		"TRIGGER_SMS":                  12,
		"TRIGGER_CALL":                 13,
		"TRIGGER_BOOKING":              20,
		"TRIGGER_QR_CODE_SCAN":         30,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[30].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[30]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{30}
}

type TriggerSubType int32

const (
	TriggerSubType_NO_TRIGGER_SUB_TYPE TriggerSubType = 0
)

// Enum value maps for TriggerSubType.
var (
	TriggerSubType_name = map[int32]string{
		0: "NO_TRIGGER_SUB_TYPE",
	}
	TriggerSubType_value = map[string]int32{
		"NO_TRIGGER_SUB_TYPE": 0,
	}
)

func (x TriggerSubType) Enum() *TriggerSubType {
	p := new(TriggerSubType)
	*p = x
	return p
}

func (x TriggerSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[31].Descriptor()
}

func (TriggerSubType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[31]
}

func (x TriggerSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerSubType.Descriptor instead.
func (TriggerSubType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{31}
}

type TaskType int32

const (
	TaskType_NO_TASK                   TaskType = 0
	TaskType_ALLOTMENT_TASK            TaskType = 1
	TaskType_RE_ALLOTMENT_TASK         TaskType = 2
	TaskType_CANCEL_ALLOTMENT_TASK     TaskType = 3
	TaskType_APP_NOTIFICATION_TASK     TaskType = 10
	TaskType_APP_SMS_NOTIFICATION_TASK TaskType = 11
	TaskType_SMS_TASK                  TaskType = 12
	TaskType_CALL_TASK                 TaskType = 13
	TaskType_EVENT_CREATION            TaskType = 20
	TaskType_PRODUCT_CONFIRMATION      TaskType = 30
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "NO_TASK",
		1:  "ALLOTMENT_TASK",
		2:  "RE_ALLOTMENT_TASK",
		3:  "CANCEL_ALLOTMENT_TASK",
		10: "APP_NOTIFICATION_TASK",
		11: "APP_SMS_NOTIFICATION_TASK",
		12: "SMS_TASK",
		13: "CALL_TASK",
		20: "EVENT_CREATION",
		30: "PRODUCT_CONFIRMATION",
	}
	TaskType_value = map[string]int32{
		"NO_TASK":                   0,
		"ALLOTMENT_TASK":            1,
		"RE_ALLOTMENT_TASK":         2,
		"CANCEL_ALLOTMENT_TASK":     3,
		"APP_NOTIFICATION_TASK":     10,
		"APP_SMS_NOTIFICATION_TASK": 11,
		"SMS_TASK":                  12,
		"CALL_TASK":                 13,
		"EVENT_CREATION":            20,
		"PRODUCT_CONFIRMATION":      30,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[32].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[32]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{32}
}

type TaskSubType int32

const (
	TaskSubType_NO_TASK_SUB_TYPE TaskSubType = 0
)

// Enum value maps for TaskSubType.
var (
	TaskSubType_name = map[int32]string{
		0: "NO_TASK_SUB_TYPE",
	}
	TaskSubType_value = map[string]int32{
		"NO_TASK_SUB_TYPE": 0,
	}
)

func (x TaskSubType) Enum() *TaskSubType {
	p := new(TaskSubType)
	*p = x
	return p
}

func (x TaskSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[33].Descriptor()
}

func (TaskSubType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[33]
}

func (x TaskSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSubType.Descriptor instead.
func (TaskSubType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{33}
}

type ActorInServiceStatus int32

const (
	ActorInServiceStatus_NO_ACTOR_STATUS ActorInServiceStatus = 0
	ActorInServiceStatus_ENABLED_ACTOR   ActorInServiceStatus = 1
	ActorInServiceStatus_DISABLED_ACTOR  ActorInServiceStatus = 2
)

// Enum value maps for ActorInServiceStatus.
var (
	ActorInServiceStatus_name = map[int32]string{
		0: "NO_ACTOR_STATUS",
		1: "ENABLED_ACTOR",
		2: "DISABLED_ACTOR",
	}
	ActorInServiceStatus_value = map[string]int32{
		"NO_ACTOR_STATUS": 0,
		"ENABLED_ACTOR":   1,
		"DISABLED_ACTOR":  2,
	}
)

func (x ActorInServiceStatus) Enum() *ActorInServiceStatus {
	p := new(ActorInServiceStatus)
	*p = x
	return p
}

func (x ActorInServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorInServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[34].Descriptor()
}

func (ActorInServiceStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[34]
}

func (x ActorInServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorInServiceStatus.Descriptor instead.
func (ActorInServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{34}
}

type SKUProductInServiceStatus int32

const (
	SKUProductInServiceStatus_NO_SKU_PRODUCT_STATUS SKUProductInServiceStatus = 0
	SKUProductInServiceStatus_ENABLED_SKU_PRODUCT   SKUProductInServiceStatus = 1
	SKUProductInServiceStatus_DISABLED_SKU_PRODUCT  SKUProductInServiceStatus = 2
)

// Enum value maps for SKUProductInServiceStatus.
var (
	SKUProductInServiceStatus_name = map[int32]string{
		0: "NO_SKU_PRODUCT_STATUS",
		1: "ENABLED_SKU_PRODUCT",
		2: "DISABLED_SKU_PRODUCT",
	}
	SKUProductInServiceStatus_value = map[string]int32{
		"NO_SKU_PRODUCT_STATUS": 0,
		"ENABLED_SKU_PRODUCT":   1,
		"DISABLED_SKU_PRODUCT":  2,
	}
)

func (x SKUProductInServiceStatus) Enum() *SKUProductInServiceStatus {
	p := new(SKUProductInServiceStatus)
	*p = x
	return p
}

func (x SKUProductInServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SKUProductInServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[35].Descriptor()
}

func (SKUProductInServiceStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[35]
}

func (x SKUProductInServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SKUProductInServiceStatus.Descriptor instead.
func (SKUProductInServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{35}
}

type TaskOperation int32

const (
	TaskOperation_NO_OP           TaskOperation = 0
	TaskOperation_TASK_ADD        TaskOperation = 1
	TaskOperation_TASK_DELETE     TaskOperation = 2
	TaskOperation_TASK_RESCHEDULE TaskOperation = 3
	TaskOperation_TASK_MODIFY     TaskOperation = 4
)

// Enum value maps for TaskOperation.
var (
	TaskOperation_name = map[int32]string{
		0: "NO_OP",
		1: "TASK_ADD",
		2: "TASK_DELETE",
		3: "TASK_RESCHEDULE",
		4: "TASK_MODIFY",
	}
	TaskOperation_value = map[string]int32{
		"NO_OP":           0,
		"TASK_ADD":        1,
		"TASK_DELETE":     2,
		"TASK_RESCHEDULE": 3,
		"TASK_MODIFY":     4,
	}
)

func (x TaskOperation) Enum() *TaskOperation {
	p := new(TaskOperation)
	*p = x
	return p
}

func (x TaskOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[36].Descriptor()
}

func (TaskOperation) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[36]
}

func (x TaskOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskOperation.Descriptor instead.
func (TaskOperation) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{36}
}

type TimeSlotType int32

const (
	TimeSlotType_NO_TIME_SLOT             TimeSlotType = 0
	TimeSlotType_REQUEST_TIME_SLOT        TimeSlotType = 1
	TimeSlotType_SCHEDULE_TIME_SLOT       TimeSlotType = 2
	TimeSlotType_SERVICE_TIME_SLOT        TimeSlotType = 3
	TimeSlotType_CREATED_TIME_SLOT        TimeSlotType = 4
	TimeSlotType_SERVER_UPDATED_TIME_SLOT TimeSlotType = 5
)

// Enum value maps for TimeSlotType.
var (
	TimeSlotType_name = map[int32]string{
		0: "NO_TIME_SLOT",
		1: "REQUEST_TIME_SLOT",
		2: "SCHEDULE_TIME_SLOT",
		3: "SERVICE_TIME_SLOT",
		4: "CREATED_TIME_SLOT",
		5: "SERVER_UPDATED_TIME_SLOT",
	}
	TimeSlotType_value = map[string]int32{
		"NO_TIME_SLOT":             0,
		"REQUEST_TIME_SLOT":        1,
		"SCHEDULE_TIME_SLOT":       2,
		"SERVICE_TIME_SLOT":        3,
		"CREATED_TIME_SLOT":        4,
		"SERVER_UPDATED_TIME_SLOT": 5,
	}
)

func (x TimeSlotType) Enum() *TimeSlotType {
	p := new(TimeSlotType)
	*p = x
	return p
}

func (x TimeSlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[37].Descriptor()
}

func (TimeSlotType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[37]
}

func (x TimeSlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSlotType.Descriptor instead.
func (TimeSlotType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{37}
}

type ServiceAreaNamespace int32

const (
	ServiceAreaNamespace_NO_SERVICE_AREA_NAMESPACE              ServiceAreaNamespace = 0
	ServiceAreaNamespace_COMMON_SPRAYER_NAMESPACE               ServiceAreaNamespace = 1
	ServiceAreaNamespace_VILLAGE_NAMESPACE                      ServiceAreaNamespace = 2
	ServiceAreaNamespace_COMMON_STS_NAMESPACE                   ServiceAreaNamespace = 3
	ServiceAreaNamespace_ORCHID_SPRAYING_NAMESPACE              ServiceAreaNamespace = 4
	ServiceAreaNamespace_PUSA_SPRAYING_NAMESPACE                ServiceAreaNamespace = 5
	ServiceAreaNamespace_GROUNDNUT_HARVESTING_NAMESPACE         ServiceAreaNamespace = 6
	ServiceAreaNamespace_SEED_TREATMENT_NAMESPACE               ServiceAreaNamespace = 7
	ServiceAreaNamespace_POTATO_PLANTER_NAMESPACE               ServiceAreaNamespace = 8
	ServiceAreaNamespace_CULTIVATOR_NAMESPACE                   ServiceAreaNamespace = 9
	ServiceAreaNamespace_DISC_HARROW_NAMESPACE                  ServiceAreaNamespace = 10
	ServiceAreaNamespace_ROTAVATOR_NAMESPACE                    ServiceAreaNamespace = 11
	ServiceAreaNamespace_MB_PLOUGH_NAMESPACE                    ServiceAreaNamespace = 12
	ServiceAreaNamespace_TRACK_TYPE_COMBINE_HARVESTER_NAMESPACE ServiceAreaNamespace = 13
	ServiceAreaNamespace_COMBINE_HARVESTER_NAMESPACE            ServiceAreaNamespace = 14
	ServiceAreaNamespace_SEED_DRILL_NAMESPACE                   ServiceAreaNamespace = 15
)

// Enum value maps for ServiceAreaNamespace.
var (
	ServiceAreaNamespace_name = map[int32]string{
		0:  "NO_SERVICE_AREA_NAMESPACE",
		1:  "COMMON_SPRAYER_NAMESPACE",
		2:  "VILLAGE_NAMESPACE",
		3:  "COMMON_STS_NAMESPACE",
		4:  "ORCHID_SPRAYING_NAMESPACE",
		5:  "PUSA_SPRAYING_NAMESPACE",
		6:  "GROUNDNUT_HARVESTING_NAMESPACE",
		7:  "SEED_TREATMENT_NAMESPACE",
		8:  "POTATO_PLANTER_NAMESPACE",
		9:  "CULTIVATOR_NAMESPACE",
		10: "DISC_HARROW_NAMESPACE",
		11: "ROTAVATOR_NAMESPACE",
		12: "MB_PLOUGH_NAMESPACE",
		13: "TRACK_TYPE_COMBINE_HARVESTER_NAMESPACE",
		14: "COMBINE_HARVESTER_NAMESPACE",
		15: "SEED_DRILL_NAMESPACE",
	}
	ServiceAreaNamespace_value = map[string]int32{
		"NO_SERVICE_AREA_NAMESPACE":              0,
		"COMMON_SPRAYER_NAMESPACE":               1,
		"VILLAGE_NAMESPACE":                      2,
		"COMMON_STS_NAMESPACE":                   3,
		"ORCHID_SPRAYING_NAMESPACE":              4,
		"PUSA_SPRAYING_NAMESPACE":                5,
		"GROUNDNUT_HARVESTING_NAMESPACE":         6,
		"SEED_TREATMENT_NAMESPACE":               7,
		"POTATO_PLANTER_NAMESPACE":               8,
		"CULTIVATOR_NAMESPACE":                   9,
		"DISC_HARROW_NAMESPACE":                  10,
		"ROTAVATOR_NAMESPACE":                    11,
		"MB_PLOUGH_NAMESPACE":                    12,
		"TRACK_TYPE_COMBINE_HARVESTER_NAMESPACE": 13,
		"COMBINE_HARVESTER_NAMESPACE":            14,
		"SEED_DRILL_NAMESPACE":                   15,
	}
)

func (x ServiceAreaNamespace) Enum() *ServiceAreaNamespace {
	p := new(ServiceAreaNamespace)
	*p = x
	return p
}

func (x ServiceAreaNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAreaNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[38].Descriptor()
}

func (ServiceAreaNamespace) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[38]
}

func (x ServiceAreaNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceAreaNamespace.Descriptor instead.
func (ServiceAreaNamespace) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{38}
}

type LocationType int32

const (
	LocationType_NO_LOCATION_TYPE        LocationType = 0
	LocationType_FARM_LOCATION           LocationType = 1
	LocationType_FARMER_LOCATION         LocationType = 2
	LocationType_UNIMART_LOCATION        LocationType = 3
	LocationType_FARMER_VILLAGE_LOCATION LocationType = 4
)

// Enum value maps for LocationType.
var (
	LocationType_name = map[int32]string{
		0: "NO_LOCATION_TYPE",
		1: "FARM_LOCATION",
		2: "FARMER_LOCATION",
		3: "UNIMART_LOCATION",
		4: "FARMER_VILLAGE_LOCATION",
	}
	LocationType_value = map[string]int32{
		"NO_LOCATION_TYPE":        0,
		"FARM_LOCATION":           1,
		"FARMER_LOCATION":         2,
		"UNIMART_LOCATION":        3,
		"FARMER_VILLAGE_LOCATION": 4,
	}
)

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}

func (x LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[39].Descriptor()
}

func (LocationType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[39]
}

func (x LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationType.Descriptor instead.
func (LocationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{39}
}

type BookingAction int32

const (
	BookingAction_NO_BOOKING_ACTION     BookingAction = 0
	BookingAction_BOOKING_ACTION_CANCEL BookingAction = 1
	BookingAction_BOOKING_ACTION_UPDATE BookingAction = 2
)

// Enum value maps for BookingAction.
var (
	BookingAction_name = map[int32]string{
		0: "NO_BOOKING_ACTION",
		1: "BOOKING_ACTION_CANCEL",
		2: "BOOKING_ACTION_UPDATE",
	}
	BookingAction_value = map[string]int32{
		"NO_BOOKING_ACTION":     0,
		"BOOKING_ACTION_CANCEL": 1,
		"BOOKING_ACTION_UPDATE": 2,
	}
)

func (x BookingAction) Enum() *BookingAction {
	p := new(BookingAction)
	*p = x
	return p
}

func (x BookingAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[40].Descriptor()
}

func (BookingAction) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[40]
}

func (x BookingAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingAction.Descriptor instead.
func (BookingAction) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{40}
}

type ServiceAction int32

const (
	ServiceAction_NO_SERVICE_ACTION                                        ServiceAction = 0
	ServiceAction_SERVICE_ACTION_CREATE                                    ServiceAction = 1
	ServiceAction_SERVICE_ACTION_CANCEL                                    ServiceAction = 3
	ServiceAction_SERVICE_ACTION_DETAILS                                   ServiceAction = 4
	ServiceAction_SERVICE_ACTION_RESCHEDULE                                ServiceAction = 5
	ServiceAction_SERVICE_ACTION_FEEDBACK                                  ServiceAction = 6
	ServiceAction_SERVICE_ACTION_ADD_ALLOTMENT                             ServiceAction = 7
	ServiceAction_SERVICE_ACTION_REMOVE_ALLOTMENT                          ServiceAction = 8
	ServiceAction_SERVICE_ACTION_CHANGE_ALLOTMENT                          ServiceAction = 9
	ServiceAction_SERVICE_ACTION_ADD_PRODUCT                               ServiceAction = 14
	ServiceAction_SERVICE_ACTION_REMOVE_PRODUCT                            ServiceAction = 15
	ServiceAction_SERVICE_ACTION_CHANGE_PRODUCT                            ServiceAction = 16
	ServiceAction_SERVICE_ACTION_UPDATE_REQ_SLOT                           ServiceAction = 17
	ServiceAction_SERVICE_ACTION_UPDATE_SCH_SLOT                           ServiceAction = 19
	ServiceAction_SERVICE_ACTION_UPDATE_SER_SLOT                           ServiceAction = 18
	ServiceAction_SERVICE_ACTION_UPDATE_REQ_AREA                           ServiceAction = 20
	ServiceAction_SERVICE_ACTION_UPDATE_SCH_AREA                           ServiceAction = 21
	ServiceAction_SERVICE_ACTION_UPDATE_SER_AREA                           ServiceAction = 22
	ServiceAction_SERVICE_ACTION_ACCEPT                                    ServiceAction = 31
	ServiceAction_SERVICE_ACTION_ADD_ALLOTTED_ACTOR                        ServiceAction = 32
	ServiceAction_SERVICE_ACTION_CHANGE_ALLOTTED_ACTOR                     ServiceAction = 33
	ServiceAction_SERVICE_ACTION_CHANGE_MULTIPLE_ALLOTTED_ACTOR            ServiceAction = 34
	ServiceAction_SERVICE_ACTION_EARLY_UNALLOTMENT                         ServiceAction = 36
	ServiceAction_SERVICE_ACTION_MAKE_ALLOTMENT                            ServiceAction = 37
	ServiceAction_SERVICE_ACTION_REJECT                                    ServiceAction = 38
	ServiceAction_SERVICE_ACTION_REMOVE_ALLOTTED_ACTOR                     ServiceAction = 39
	ServiceAction_SERVICE_ACTION_SERVICE_AREA_TIME_UPDATE                  ServiceAction = 40
	ServiceAction_SERVICE_ACTION_UPDATE_ALLOTTED_ACTOR                     ServiceAction = 41
	ServiceAction_SERVICE_ACTION_UNALLOTTED                                ServiceAction = 42
	ServiceAction_SERVICE_ACTION_SAMPLE_COLLECTION_COMPLETED               ServiceAction = 43
	ServiceAction_SERVICE_ACTION_DELIVERY_COMPLETED                        ServiceAction = 44
	ServiceAction_SERVICE_ACTION_FARM_SCAN_COMPLETED                       ServiceAction = 45
	ServiceAction_SERVICE_ACTION_PAYMENT_COLLECTED                         ServiceAction = 46
	ServiceAction_SERVICE_ACTION_START                                     ServiceAction = 47
	ServiceAction_SERVICE_ACTION_PAUSE                                     ServiceAction = 48
	ServiceAction_SERVICE_ACTION_SUSPEND                                   ServiceAction = 49
	ServiceAction_SERVICE_ACTION_COMPLETE                                  ServiceAction = 50
	ServiceAction_SERVICE_ACTION_EVICTION                                  ServiceAction = 51
	ServiceAction_SERVICE_ACTION_RESUME                                    ServiceAction = 52
	ServiceAction_SERVICE_ACTION_STOP                                      ServiceAction = 53
	ServiceAction_SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ALLOTMENT ServiceAction = 101
	ServiceAction_SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ACCEPT    ServiceAction = 102
)

// Enum value maps for ServiceAction.
var (
	ServiceAction_name = map[int32]string{
		0:   "NO_SERVICE_ACTION",
		1:   "SERVICE_ACTION_CREATE",
		3:   "SERVICE_ACTION_CANCEL",
		4:   "SERVICE_ACTION_DETAILS",
		5:   "SERVICE_ACTION_RESCHEDULE",
		6:   "SERVICE_ACTION_FEEDBACK",
		7:   "SERVICE_ACTION_ADD_ALLOTMENT",
		8:   "SERVICE_ACTION_REMOVE_ALLOTMENT",
		9:   "SERVICE_ACTION_CHANGE_ALLOTMENT",
		14:  "SERVICE_ACTION_ADD_PRODUCT",
		15:  "SERVICE_ACTION_REMOVE_PRODUCT",
		16:  "SERVICE_ACTION_CHANGE_PRODUCT",
		17:  "SERVICE_ACTION_UPDATE_REQ_SLOT",
		19:  "SERVICE_ACTION_UPDATE_SCH_SLOT",
		18:  "SERVICE_ACTION_UPDATE_SER_SLOT",
		20:  "SERVICE_ACTION_UPDATE_REQ_AREA",
		21:  "SERVICE_ACTION_UPDATE_SCH_AREA",
		22:  "SERVICE_ACTION_UPDATE_SER_AREA",
		31:  "SERVICE_ACTION_ACCEPT",
		32:  "SERVICE_ACTION_ADD_ALLOTTED_ACTOR",
		33:  "SERVICE_ACTION_CHANGE_ALLOTTED_ACTOR",
		34:  "SERVICE_ACTION_CHANGE_MULTIPLE_ALLOTTED_ACTOR",
		36:  "SERVICE_ACTION_EARLY_UNALLOTMENT",
		37:  "SERVICE_ACTION_MAKE_ALLOTMENT",
		38:  "SERVICE_ACTION_REJECT",
		39:  "SERVICE_ACTION_REMOVE_ALLOTTED_ACTOR",
		40:  "SERVICE_ACTION_SERVICE_AREA_TIME_UPDATE",
		41:  "SERVICE_ACTION_UPDATE_ALLOTTED_ACTOR",
		42:  "SERVICE_ACTION_UNALLOTTED",
		43:  "SERVICE_ACTION_SAMPLE_COLLECTION_COMPLETED",
		44:  "SERVICE_ACTION_DELIVERY_COMPLETED",
		45:  "SERVICE_ACTION_FARM_SCAN_COMPLETED",
		46:  "SERVICE_ACTION_PAYMENT_COLLECTED",
		47:  "SERVICE_ACTION_START",
		48:  "SERVICE_ACTION_PAUSE",
		49:  "SERVICE_ACTION_SUSPEND",
		50:  "SERVICE_ACTION_COMPLETE",
		51:  "SERVICE_ACTION_EVICTION",
		52:  "SERVICE_ACTION_RESUME",
		53:  "SERVICE_ACTION_STOP",
		101: "SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ALLOTMENT",
		102: "SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ACCEPT",
	}
	ServiceAction_value = map[string]int32{
		"NO_SERVICE_ACTION":                                        0,
		"SERVICE_ACTION_CREATE":                                    1,
		"SERVICE_ACTION_CANCEL":                                    3,
		"SERVICE_ACTION_DETAILS":                                   4,
		"SERVICE_ACTION_RESCHEDULE":                                5,
		"SERVICE_ACTION_FEEDBACK":                                  6,
		"SERVICE_ACTION_ADD_ALLOTMENT":                             7,
		"SERVICE_ACTION_REMOVE_ALLOTMENT":                          8,
		"SERVICE_ACTION_CHANGE_ALLOTMENT":                          9,
		"SERVICE_ACTION_ADD_PRODUCT":                               14,
		"SERVICE_ACTION_REMOVE_PRODUCT":                            15,
		"SERVICE_ACTION_CHANGE_PRODUCT":                            16,
		"SERVICE_ACTION_UPDATE_REQ_SLOT":                           17,
		"SERVICE_ACTION_UPDATE_SCH_SLOT":                           19,
		"SERVICE_ACTION_UPDATE_SER_SLOT":                           18,
		"SERVICE_ACTION_UPDATE_REQ_AREA":                           20,
		"SERVICE_ACTION_UPDATE_SCH_AREA":                           21,
		"SERVICE_ACTION_UPDATE_SER_AREA":                           22,
		"SERVICE_ACTION_ACCEPT":                                    31,
		"SERVICE_ACTION_ADD_ALLOTTED_ACTOR":                        32,
		"SERVICE_ACTION_CHANGE_ALLOTTED_ACTOR":                     33,
		"SERVICE_ACTION_CHANGE_MULTIPLE_ALLOTTED_ACTOR":            34,
		"SERVICE_ACTION_EARLY_UNALLOTMENT":                         36,
		"SERVICE_ACTION_MAKE_ALLOTMENT":                            37,
		"SERVICE_ACTION_REJECT":                                    38,
		"SERVICE_ACTION_REMOVE_ALLOTTED_ACTOR":                     39,
		"SERVICE_ACTION_SERVICE_AREA_TIME_UPDATE":                  40,
		"SERVICE_ACTION_UPDATE_ALLOTTED_ACTOR":                     41,
		"SERVICE_ACTION_UNALLOTTED":                                42,
		"SERVICE_ACTION_SAMPLE_COLLECTION_COMPLETED":               43,
		"SERVICE_ACTION_DELIVERY_COMPLETED":                        44,
		"SERVICE_ACTION_FARM_SCAN_COMPLETED":                       45,
		"SERVICE_ACTION_PAYMENT_COLLECTED":                         46,
		"SERVICE_ACTION_START":                                     47,
		"SERVICE_ACTION_PAUSE":                                     48,
		"SERVICE_ACTION_SUSPEND":                                   49,
		"SERVICE_ACTION_COMPLETE":                                  50,
		"SERVICE_ACTION_EVICTION":                                  51,
		"SERVICE_ACTION_RESUME":                                    52,
		"SERVICE_ACTION_STOP":                                      53,
		"SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ALLOTMENT": 101,
		"SERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_AFTER_ACCEPT":    102,
	}
)

func (x ServiceAction) Enum() *ServiceAction {
	p := new(ServiceAction)
	*p = x
	return p
}

func (x ServiceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[41].Descriptor()
}

func (ServiceAction) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[41]
}

func (x ServiceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceAction.Descriptor instead.
func (ServiceAction) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{41}
}

type CommunicationChannel int32

const (
	CommunicationChannel_NO_CHANNEL       CommunicationChannel = 0
	CommunicationChannel_SMS              CommunicationChannel = 1
	CommunicationChannel_EMAIL            CommunicationChannel = 2
	CommunicationChannel_APP_NOTIFICATION CommunicationChannel = 3
	CommunicationChannel_WHATSAPP         CommunicationChannel = 4
)

// Enum value maps for CommunicationChannel.
var (
	CommunicationChannel_name = map[int32]string{
		0: "NO_CHANNEL",
		1: "SMS",
		2: "EMAIL",
		3: "APP_NOTIFICATION",
		4: "WHATSAPP",
	}
	CommunicationChannel_value = map[string]int32{
		"NO_CHANNEL":       0,
		"SMS":              1,
		"EMAIL":            2,
		"APP_NOTIFICATION": 3,
		"WHATSAPP":         4,
	}
)

func (x CommunicationChannel) Enum() *CommunicationChannel {
	p := new(CommunicationChannel)
	*p = x
	return p
}

func (x CommunicationChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[42].Descriptor()
}

func (CommunicationChannel) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[42]
}

func (x CommunicationChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationChannel.Descriptor instead.
func (CommunicationChannel) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{42}
}

type CommunicationStatus int32

const (
	CommunicationStatus_NO_COMM_STATUS CommunicationStatus = 0
	CommunicationStatus_COMM_ACCEPTED  CommunicationStatus = 1
	CommunicationStatus_COMM_PENDING   CommunicationStatus = 2
	CommunicationStatus_COMM_DELIVERED CommunicationStatus = 3
	CommunicationStatus_COMM_FAILED    CommunicationStatus = 4
)

// Enum value maps for CommunicationStatus.
var (
	CommunicationStatus_name = map[int32]string{
		0: "NO_COMM_STATUS",
		1: "COMM_ACCEPTED",
		2: "COMM_PENDING",
		3: "COMM_DELIVERED",
		4: "COMM_FAILED",
	}
	CommunicationStatus_value = map[string]int32{
		"NO_COMM_STATUS": 0,
		"COMM_ACCEPTED":  1,
		"COMM_PENDING":   2,
		"COMM_DELIVERED": 3,
		"COMM_FAILED":    4,
	}
)

func (x CommunicationStatus) Enum() *CommunicationStatus {
	p := new(CommunicationStatus)
	*p = x
	return p
}

func (x CommunicationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[43].Descriptor()
}

func (CommunicationStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[43]
}

func (x CommunicationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationStatus.Descriptor instead.
func (CommunicationStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{43}
}

type CommunicationFailureCause int32

const (
	CommunicationFailureCause_NO_CAUSE                  CommunicationFailureCause = 0
	CommunicationFailureCause_COMM_OPERATOR_FAILURE     CommunicationFailureCause = 1
	CommunicationFailureCause_COMM_NUMBER_NOT_REACHABLE CommunicationFailureCause = 2
	CommunicationFailureCause_COMM_NUMBER_NOT_EXIST     CommunicationFailureCause = 3
	CommunicationFailureCause_COMM_NUMBER_BLOCKED       CommunicationFailureCause = 4
	CommunicationFailureCause_COMM_SYSTEM_FAILURE       CommunicationFailureCause = 5
)

// Enum value maps for CommunicationFailureCause.
var (
	CommunicationFailureCause_name = map[int32]string{
		0: "NO_CAUSE",
		1: "COMM_OPERATOR_FAILURE",
		2: "COMM_NUMBER_NOT_REACHABLE",
		3: "COMM_NUMBER_NOT_EXIST",
		4: "COMM_NUMBER_BLOCKED",
		5: "COMM_SYSTEM_FAILURE",
	}
	CommunicationFailureCause_value = map[string]int32{
		"NO_CAUSE":                  0,
		"COMM_OPERATOR_FAILURE":     1,
		"COMM_NUMBER_NOT_REACHABLE": 2,
		"COMM_NUMBER_NOT_EXIST":     3,
		"COMM_NUMBER_BLOCKED":       4,
		"COMM_SYSTEM_FAILURE":       5,
	}
)

func (x CommunicationFailureCause) Enum() *CommunicationFailureCause {
	p := new(CommunicationFailureCause)
	*p = x
	return p
}

func (x CommunicationFailureCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationFailureCause) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[44].Descriptor()
}

func (CommunicationFailureCause) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[44]
}

func (x CommunicationFailureCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationFailureCause.Descriptor instead.
func (CommunicationFailureCause) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{44}
}

type ResponseStatus int32

const (
	ResponseStatus_NO_RESPONSE_STATUS    ResponseStatus = 0
	ResponseStatus_SUCCESSFUL            ResponseStatus = 1
	ResponseStatus_ERROR                 ResponseStatus = 2
	ResponseStatus_NOT__FOUND            ResponseStatus = 3
	ResponseStatus_ZERO_RESULTS          ResponseStatus = 4
	ResponseStatus_DUPLICATE             ResponseStatus = 5
	ResponseStatus_LIMIT__EXCEEDED       ResponseStatus = 6
	ResponseStatus_INVALID_REQUEST       ResponseStatus = 7
	ResponseStatus_TEMPORARILY_SUSPENDED ResponseStatus = 8
	ResponseStatus_OVER_USAGE_LIMIT      ResponseStatus = 9
	ResponseStatus_REQUEST_DENIED        ResponseStatus = 10
	ResponseStatus_UNKNOWN_ERROR         ResponseStatus = 11
	ResponseStatus_DB_FAILURE            ResponseStatus = 12
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0:  "NO_RESPONSE_STATUS",
		1:  "SUCCESSFUL",
		2:  "ERROR",
		3:  "NOT__FOUND",
		4:  "ZERO_RESULTS",
		5:  "DUPLICATE",
		6:  "LIMIT__EXCEEDED",
		7:  "INVALID_REQUEST",
		8:  "TEMPORARILY_SUSPENDED",
		9:  "OVER_USAGE_LIMIT",
		10: "REQUEST_DENIED",
		11: "UNKNOWN_ERROR",
		12: "DB_FAILURE",
	}
	ResponseStatus_value = map[string]int32{
		"NO_RESPONSE_STATUS":    0,
		"SUCCESSFUL":            1,
		"ERROR":                 2,
		"NOT__FOUND":            3,
		"ZERO_RESULTS":          4,
		"DUPLICATE":             5,
		"LIMIT__EXCEEDED":       6,
		"INVALID_REQUEST":       7,
		"TEMPORARILY_SUSPENDED": 8,
		"OVER_USAGE_LIMIT":      9,
		"REQUEST_DENIED":        10,
		"UNKNOWN_ERROR":         11,
		"DB_FAILURE":            12,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[45].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[45]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{45}
}

type ResponseStatusCode int32

const (
	ResponseStatusCode_NO_RESPONSE_STATUS_CODE                      ResponseStatusCode = 0
	ResponseStatusCode_OK                                           ResponseStatusCode = 200
	ResponseStatusCode_NO_CONTENT                                   ResponseStatusCode = 204
	ResponseStatusCode_BAD_REQUEST                                  ResponseStatusCode = 400
	ResponseStatusCode_UNAUTHORIZED                                 ResponseStatusCode = 401
	ResponseStatusCode_ENTITY_NOT_FOUND                             ResponseStatusCode = 404
	ResponseStatusCode_GONE                                         ResponseStatusCode = 410
	ResponseStatusCode_INTERNAL_SERVER_ERROR                        ResponseStatusCode = 500
	ResponseStatusCode_SQL_ERROR                                    ResponseStatusCode = 512
	ResponseStatusCode_DUPLICATE_ENTRY                              ResponseStatusCode = 409
	ResponseStatusCode_LIMIT_EXCEEDED                               ResponseStatusCode = 429
	ResponseStatusCode_PROFILE_EXIST_OTP_SENT                       ResponseStatusCode = 1000
	ResponseStatusCode_PROFILE_CREATED_OTP_SENT                     ResponseStatusCode = 1001
	ResponseStatusCode_USER_VALIDATION                              ResponseStatusCode = 1002
	ResponseStatusCode_FARMER_PROFILE_CREATED                       ResponseStatusCode = 1003
	ResponseStatusCode_MULTIPLE_UNIQUE_ACCOUNT_BY_SAME_DEVICE_ERROR ResponseStatusCode = 1004
	ResponseStatusCode_USER_NOT_FOUND                               ResponseStatusCode = 2001
	ResponseStatusCode_INVALID_OTP                                  ResponseStatusCode = 2002
	ResponseStatusCode_OTP_EXPIRED                                  ResponseStatusCode = 2003
	ResponseStatusCode_USER_ALREADY_REGISTERED                      ResponseStatusCode = 2004
	ResponseStatusCode_INACTIVE_USER_REGISTRATION                   ResponseStatusCode = 2005
)

// Enum value maps for ResponseStatusCode.
var (
	ResponseStatusCode_name = map[int32]string{
		0:    "NO_RESPONSE_STATUS_CODE",
		200:  "OK",
		204:  "NO_CONTENT",
		400:  "BAD_REQUEST",
		401:  "UNAUTHORIZED",
		404:  "ENTITY_NOT_FOUND",
		410:  "GONE",
		500:  "INTERNAL_SERVER_ERROR",
		512:  "SQL_ERROR",
		409:  "DUPLICATE_ENTRY",
		429:  "LIMIT_EXCEEDED",
		1000: "PROFILE_EXIST_OTP_SENT",
		1001: "PROFILE_CREATED_OTP_SENT",
		1002: "USER_VALIDATION",
		1003: "FARMER_PROFILE_CREATED",
		1004: "MULTIPLE_UNIQUE_ACCOUNT_BY_SAME_DEVICE_ERROR",
		2001: "USER_NOT_FOUND",
		2002: "INVALID_OTP",
		2003: "OTP_EXPIRED",
		2004: "USER_ALREADY_REGISTERED",
		2005: "INACTIVE_USER_REGISTRATION",
	}
	ResponseStatusCode_value = map[string]int32{
		"NO_RESPONSE_STATUS_CODE":  0,
		"OK":                       200,
		"NO_CONTENT":               204,
		"BAD_REQUEST":              400,
		"UNAUTHORIZED":             401,
		"ENTITY_NOT_FOUND":         404,
		"GONE":                     410,
		"INTERNAL_SERVER_ERROR":    500,
		"SQL_ERROR":                512,
		"DUPLICATE_ENTRY":          409,
		"LIMIT_EXCEEDED":           429,
		"PROFILE_EXIST_OTP_SENT":   1000,
		"PROFILE_CREATED_OTP_SENT": 1001,
		"USER_VALIDATION":          1002,
		"FARMER_PROFILE_CREATED":   1003,
		"MULTIPLE_UNIQUE_ACCOUNT_BY_SAME_DEVICE_ERROR": 1004,
		"USER_NOT_FOUND":             2001,
		"INVALID_OTP":                2002,
		"OTP_EXPIRED":                2003,
		"USER_ALREADY_REGISTERED":    2004,
		"INACTIVE_USER_REGISTRATION": 2005,
	}
)

func (x ResponseStatusCode) Enum() *ResponseStatusCode {
	p := new(ResponseStatusCode)
	*p = x
	return p
}

func (x ResponseStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[46].Descriptor()
}

func (ResponseStatusCode) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[46]
}

func (x ResponseStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatusCode.Descriptor instead.
func (ResponseStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{46}
}

type Status int32

const (
	Status_NO_KNOWN_STATUS Status = 0
	Status_ACTIVE          Status = 1
	Status_INACTIVE        Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "NO_KNOWN_STATUS",
		1: "ACTIVE",
		2: "INACTIVE",
	}
	Status_value = map[string]int32{
		"NO_KNOWN_STATUS": 0,
		"ACTIVE":          1,
		"INACTIVE":        2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[47].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[47]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{47}
}

type FarmCropStatus int32

const (
	FarmCropStatus_NO_FARM_CROP_STATUS FarmCropStatus = 0
	FarmCropStatus_SOWED               FarmCropStatus = 1
	FarmCropStatus_HARVESTED           FarmCropStatus = 2
	FarmCropStatus_DELETED             FarmCropStatus = 3
)

// Enum value maps for FarmCropStatus.
var (
	FarmCropStatus_name = map[int32]string{
		0: "NO_FARM_CROP_STATUS",
		1: "SOWED",
		2: "HARVESTED",
		3: "DELETED",
	}
	FarmCropStatus_value = map[string]int32{
		"NO_FARM_CROP_STATUS": 0,
		"SOWED":               1,
		"HARVESTED":           2,
		"DELETED":             3,
	}
)

func (x FarmCropStatus) Enum() *FarmCropStatus {
	p := new(FarmCropStatus)
	*p = x
	return p
}

func (x FarmCropStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmCropStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[48].Descriptor()
}

func (FarmCropStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[48]
}

func (x FarmCropStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FarmCropStatus.Descriptor instead.
func (FarmCropStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{48}
}

type MediaProvider int32

const (
	MediaProvider_NO_MEDIA_PROVIDER MediaProvider = 0
	MediaProvider_AWS_S3            MediaProvider = 1
)

// Enum value maps for MediaProvider.
var (
	MediaProvider_name = map[int32]string{
		0: "NO_MEDIA_PROVIDER",
		1: "AWS_S3",
	}
	MediaProvider_value = map[string]int32{
		"NO_MEDIA_PROVIDER": 0,
		"AWS_S3":            1,
	}
)

func (x MediaProvider) Enum() *MediaProvider {
	p := new(MediaProvider)
	*p = x
	return p
}

func (x MediaProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[49].Descriptor()
}

func (MediaProvider) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[49]
}

func (x MediaProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaProvider.Descriptor instead.
func (MediaProvider) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{49}
}

type DurationUnit int32

const (
	DurationUnit_NO_DURATION_UNIT DurationUnit = 0
	DurationUnit_DAYS             DurationUnit = 1
	DurationUnit_YEARS            DurationUnit = 2
)

// Enum value maps for DurationUnit.
var (
	DurationUnit_name = map[int32]string{
		0: "NO_DURATION_UNIT",
		1: "DAYS",
		2: "YEARS",
	}
	DurationUnit_value = map[string]int32{
		"NO_DURATION_UNIT": 0,
		"DAYS":             1,
		"YEARS":            2,
	}
)

func (x DurationUnit) Enum() *DurationUnit {
	p := new(DurationUnit)
	*p = x
	return p
}

func (x DurationUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[50].Descriptor()
}

func (DurationUnit) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[50]
}

func (x DurationUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationUnit.Descriptor instead.
func (DurationUnit) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{50}
}

type DurationType int32

const (
	DurationType_NO_DURATION_TYPE DurationType = 0
	DurationType_SHORT            DurationType = 1
	DurationType_MEDIUM           DurationType = 2
	DurationType_LONG             DurationType = 3
)

// Enum value maps for DurationType.
var (
	DurationType_name = map[int32]string{
		0: "NO_DURATION_TYPE",
		1: "SHORT",
		2: "MEDIUM",
		3: "LONG",
	}
	DurationType_value = map[string]int32{
		"NO_DURATION_TYPE": 0,
		"SHORT":            1,
		"MEDIUM":           2,
		"LONG":             3,
	}
)

func (x DurationType) Enum() *DurationType {
	p := new(DurationType)
	*p = x
	return p
}

func (x DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[51].Descriptor()
}

func (DurationType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[51]
}

func (x DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationType.Descriptor instead.
func (DurationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{51}
}

type ScaleType int32

const (
	ScaleType_NO_SCALE_TYPE ScaleType = 0
	ScaleType_BBCH          ScaleType = 1
)

// Enum value maps for ScaleType.
var (
	ScaleType_name = map[int32]string{
		0: "NO_SCALE_TYPE",
		1: "BBCH",
	}
	ScaleType_value = map[string]int32{
		"NO_SCALE_TYPE": 0,
		"BBCH":          1,
	}
)

func (x ScaleType) Enum() *ScaleType {
	p := new(ScaleType)
	*p = x
	return p
}

func (x ScaleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScaleType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[52].Descriptor()
}

func (ScaleType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[52]
}

func (x ScaleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScaleType.Descriptor instead.
func (ScaleType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{52}
}

type LanguageCode int32

const (
	LanguageCode_NO_LANGUAGE_CODE LanguageCode = 0
	LanguageCode_EN_US            LanguageCode = 1
	LanguageCode_HI_IN            LanguageCode = 2
	LanguageCode_GU               LanguageCode = 3
	LanguageCode_PA               LanguageCode = 4
	LanguageCode_KA               LanguageCode = 5
	LanguageCode_TA               LanguageCode = 6
	LanguageCode_TE               LanguageCode = 7
	LanguageCode_BN               LanguageCode = 8
	LanguageCode_MR               LanguageCode = 9
	LanguageCode_ML               LanguageCode = 10
	LanguageCode_KN               LanguageCode = 11
	LanguageCode_OD               LanguageCode = 12
	LanguageCode_PU               LanguageCode = 13
)

// Enum value maps for LanguageCode.
var (
	LanguageCode_name = map[int32]string{
		0:  "NO_LANGUAGE_CODE",
		1:  "EN_US",
		2:  "HI_IN",
		3:  "GU",
		4:  "PA",
		5:  "KA",
		6:  "TA",
		7:  "TE",
		8:  "BN",
		9:  "MR",
		10: "ML",
		11: "KN",
		12: "OD",
		13: "PU",
	}
	LanguageCode_value = map[string]int32{
		"NO_LANGUAGE_CODE": 0,
		"EN_US":            1,
		"HI_IN":            2,
		"GU":               3,
		"PA":               4,
		"KA":               5,
		"TA":               6,
		"TE":               7,
		"BN":               8,
		"MR":               9,
		"ML":               10,
		"KN":               11,
		"OD":               12,
		"PU":               13,
	}
)

func (x LanguageCode) Enum() *LanguageCode {
	p := new(LanguageCode)
	*p = x
	return p
}

func (x LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[53].Descriptor()
}

func (LanguageCode) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[53]
}

func (x LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageCode.Descriptor instead.
func (LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{53}
}

type RewardType int32

const (
	RewardType_NO_REWARD_TYPE         RewardType = 0
	RewardType_REWARD_POINT           RewardType = 1
	RewardType_HEALTH_INSURANCE       RewardType = 2
	RewardType_PRIORITY_SERVICE       RewardType = 3
	RewardType_FIELD_ADVISORY         RewardType = 4
	RewardType_SPRAY_SERVICE_DISCOUNT RewardType = 5
	RewardType_SERVICE_CASHBACK       RewardType = 6
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0: "NO_REWARD_TYPE",
		1: "REWARD_POINT",
		2: "HEALTH_INSURANCE",
		3: "PRIORITY_SERVICE",
		4: "FIELD_ADVISORY",
		5: "SPRAY_SERVICE_DISCOUNT",
		6: "SERVICE_CASHBACK",
	}
	RewardType_value = map[string]int32{
		"NO_REWARD_TYPE":         0,
		"REWARD_POINT":           1,
		"HEALTH_INSURANCE":       2,
		"PRIORITY_SERVICE":       3,
		"FIELD_ADVISORY":         4,
		"SPRAY_SERVICE_DISCOUNT": 5,
		"SERVICE_CASHBACK":       6,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[54].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[54]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{54}
}

type UserActionType int32

const (
	UserActionType_NO_USER_ACTION_TYPE                     UserActionType = 0
	UserActionType_PRODUCT_SCAN_SUCCESS                    UserActionType = 1
	UserActionType_PRODUCT_SCAN_FAILURE                    UserActionType = 2
	UserActionType_REQUESTED_SERVICE                       UserActionType = 3
	UserActionType_CANCELLED_SERVICE                       UserActionType = 4
	UserActionType_COMPLETED_SERVICE                       UserActionType = 5
	UserActionType_PROUCT_SCAN_ZERO_POINTS                 UserActionType = 6
	UserActionType_SIGN_UP                                 UserActionType = 7
	UserActionType_SURVEY_COMPLETED                        UserActionType = 8
	UserActionType_PACKAGE_SIGNUP                          UserActionType = 9
	UserActionType_PARTIAL_REDEMPTION_SERVICE              UserActionType = 10
	UserActionType_FIRST_REWARD_POINT                      UserActionType = 11
	UserActionType_CASHBACK_REQUEST                        UserActionType = 12
	UserActionType_USER_REGISTRATION                       UserActionType = 13
	UserActionType_ADD_FARM                                UserActionType = 14
	UserActionType_ADD_BANK_DETAILS                        UserActionType = 15
	UserActionType_PRODUCT_GROUP_SCAN                      UserActionType = 16
	UserActionType_BOOK_SERVICE                            UserActionType = 17
	UserActionType_PRODUCT_SCAN_NOT_FOUND                  UserActionType = 18
	UserActionType_PRODUCT_SCAN_MONTHLY_LIMIT              UserActionType = 19
	UserActionType_PRODUCT_SCAN_WEEKLY_LIMIT               UserActionType = 20
	UserActionType_PRODUCT_ALREADY_SCANNED                 UserActionType = 21
	UserActionType_PROMOTIONAL_ACTIVITY                    UserActionType = 22
	UserActionType_SEED_TREATMENT_MACHINE_SCAN_FAILURE     UserActionType = 23
	UserActionType_SEED_TREATMENT_MACHINE_SCAN_SUCCESS     UserActionType = 24
	UserActionType_SEED_TREATMENT_MACHINE_SCAN_ZERO_POINTS UserActionType = 25
	UserActionType_SEED_TREATMENT_MACHINE_SCAN_NOT_FOUND   UserActionType = 26
	UserActionType_PRODUCT_SCAN                            UserActionType = 27
	UserActionType_DOCTOR_CALL_REQUEST                     UserActionType = 28
	UserActionType_SEGMENT_CHANGE                          UserActionType = 29
	UserActionType_ORDER_DELIVERED                         UserActionType = 30
)

// Enum value maps for UserActionType.
var (
	UserActionType_name = map[int32]string{
		0:  "NO_USER_ACTION_TYPE",
		1:  "PRODUCT_SCAN_SUCCESS",
		2:  "PRODUCT_SCAN_FAILURE",
		3:  "REQUESTED_SERVICE",
		4:  "CANCELLED_SERVICE",
		5:  "COMPLETED_SERVICE",
		6:  "PROUCT_SCAN_ZERO_POINTS",
		7:  "SIGN_UP",
		8:  "SURVEY_COMPLETED",
		9:  "PACKAGE_SIGNUP",
		10: "PARTIAL_REDEMPTION_SERVICE",
		11: "FIRST_REWARD_POINT",
		12: "CASHBACK_REQUEST",
		13: "USER_REGISTRATION",
		14: "ADD_FARM",
		15: "ADD_BANK_DETAILS",
		16: "PRODUCT_GROUP_SCAN",
		17: "BOOK_SERVICE",
		18: "PRODUCT_SCAN_NOT_FOUND",
		19: "PRODUCT_SCAN_MONTHLY_LIMIT",
		20: "PRODUCT_SCAN_WEEKLY_LIMIT",
		21: "PRODUCT_ALREADY_SCANNED",
		22: "PROMOTIONAL_ACTIVITY",
		23: "SEED_TREATMENT_MACHINE_SCAN_FAILURE",
		24: "SEED_TREATMENT_MACHINE_SCAN_SUCCESS",
		25: "SEED_TREATMENT_MACHINE_SCAN_ZERO_POINTS",
		26: "SEED_TREATMENT_MACHINE_SCAN_NOT_FOUND",
		27: "PRODUCT_SCAN",
		28: "DOCTOR_CALL_REQUEST",
		29: "SEGMENT_CHANGE",
		30: "ORDER_DELIVERED",
	}
	UserActionType_value = map[string]int32{
		"NO_USER_ACTION_TYPE":                     0,
		"PRODUCT_SCAN_SUCCESS":                    1,
		"PRODUCT_SCAN_FAILURE":                    2,
		"REQUESTED_SERVICE":                       3,
		"CANCELLED_SERVICE":                       4,
		"COMPLETED_SERVICE":                       5,
		"PROUCT_SCAN_ZERO_POINTS":                 6,
		"SIGN_UP":                                 7,
		"SURVEY_COMPLETED":                        8,
		"PACKAGE_SIGNUP":                          9,
		"PARTIAL_REDEMPTION_SERVICE":              10,
		"FIRST_REWARD_POINT":                      11,
		"CASHBACK_REQUEST":                        12,
		"USER_REGISTRATION":                       13,
		"ADD_FARM":                                14,
		"ADD_BANK_DETAILS":                        15,
		"PRODUCT_GROUP_SCAN":                      16,
		"BOOK_SERVICE":                            17,
		"PRODUCT_SCAN_NOT_FOUND":                  18,
		"PRODUCT_SCAN_MONTHLY_LIMIT":              19,
		"PRODUCT_SCAN_WEEKLY_LIMIT":               20,
		"PRODUCT_ALREADY_SCANNED":                 21,
		"PROMOTIONAL_ACTIVITY":                    22,
		"SEED_TREATMENT_MACHINE_SCAN_FAILURE":     23,
		"SEED_TREATMENT_MACHINE_SCAN_SUCCESS":     24,
		"SEED_TREATMENT_MACHINE_SCAN_ZERO_POINTS": 25,
		"SEED_TREATMENT_MACHINE_SCAN_NOT_FOUND":   26,
		"PRODUCT_SCAN":                            27,
		"DOCTOR_CALL_REQUEST":                     28,
		"SEGMENT_CHANGE":                          29,
		"ORDER_DELIVERED":                         30,
	}
)

func (x UserActionType) Enum() *UserActionType {
	p := new(UserActionType)
	*p = x
	return p
}

func (x UserActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[55].Descriptor()
}

func (UserActionType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[55]
}

func (x UserActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserActionType.Descriptor instead.
func (UserActionType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{55}
}

type AppID int32

const (
	AppID_NO_APP_ID       AppID = 0
	AppID_NF_SMS          AppID = 1
	AppID_UNIMART         AppID = 2
	AppID_AFS_TECHNICIAN  AppID = 3
	AppID_AFS_ADMIN       AppID = 4
	AppID_AFS_OPERATOR    AppID = 5
	AppID_NF_FARMER       AppID = 6
	AppID_NF_FARMER_IOS   AppID = 7
	AppID_NF_RETAILER     AppID = 8
	AppID_AFS_COORDINATOR AppID = 9
)

// Enum value maps for AppID.
var (
	AppID_name = map[int32]string{
		0: "NO_APP_ID",
		1: "NF_SMS",
		2: "UNIMART",
		3: "AFS_TECHNICIAN",
		4: "AFS_ADMIN",
		5: "AFS_OPERATOR",
		6: "NF_FARMER",
		7: "NF_FARMER_IOS",
		8: "NF_RETAILER",
		9: "AFS_COORDINATOR",
	}
	AppID_value = map[string]int32{
		"NO_APP_ID":       0,
		"NF_SMS":          1,
		"UNIMART":         2,
		"AFS_TECHNICIAN":  3,
		"AFS_ADMIN":       4,
		"AFS_OPERATOR":    5,
		"NF_FARMER":       6,
		"NF_FARMER_IOS":   7,
		"NF_RETAILER":     8,
		"AFS_COORDINATOR": 9,
	}
)

func (x AppID) Enum() *AppID {
	p := new(AppID)
	*p = x
	return p
}

func (x AppID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppID) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[56].Descriptor()
}

func (AppID) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[56]
}

func (x AppID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppID.Descriptor instead.
func (AppID) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{56}
}

type AppType int32

const (
	AppType_NO_APP_TYPE AppType = 0
	AppType_ANDROID     AppType = 1
	AppType_IOS         AppType = 2
)

// Enum value maps for AppType.
var (
	AppType_name = map[int32]string{
		0: "NO_APP_TYPE",
		1: "ANDROID",
		2: "IOS",
	}
	AppType_value = map[string]int32{
		"NO_APP_TYPE": 0,
		"ANDROID":     1,
		"IOS":         2,
	}
)

func (x AppType) Enum() *AppType {
	p := new(AppType)
	*p = x
	return p
}

func (x AppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[57].Descriptor()
}

func (AppType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[57]
}

func (x AppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppType.Descriptor instead.
func (AppType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{57}
}

type HandoverType int32

const (
	HandoverType_NO_HANDOVER_TYPE HandoverType = 0
	HandoverType_INITIATED        HandoverType = 1
	HandoverType_COMPLETE         HandoverType = 2
)

// Enum value maps for HandoverType.
var (
	HandoverType_name = map[int32]string{
		0: "NO_HANDOVER_TYPE",
		1: "INITIATED",
		2: "COMPLETE",
	}
	HandoverType_value = map[string]int32{
		"NO_HANDOVER_TYPE": 0,
		"INITIATED":        1,
		"COMPLETE":         2,
	}
)

func (x HandoverType) Enum() *HandoverType {
	p := new(HandoverType)
	*p = x
	return p
}

func (x HandoverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandoverType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[58].Descriptor()
}

func (HandoverType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[58]
}

func (x HandoverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandoverType.Descriptor instead.
func (HandoverType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{58}
}

type HandoverStatus int32

const (
	HandoverStatus_NO_HANDOVER_STATUS HandoverStatus = 0
	HandoverStatus_SENT               HandoverStatus = 1
	HandoverStatus_VERIFIED           HandoverStatus = 2
)

// Enum value maps for HandoverStatus.
var (
	HandoverStatus_name = map[int32]string{
		0: "NO_HANDOVER_STATUS",
		1: "SENT",
		2: "VERIFIED",
	}
	HandoverStatus_value = map[string]int32{
		"NO_HANDOVER_STATUS": 0,
		"SENT":               1,
		"VERIFIED":           2,
	}
)

func (x HandoverStatus) Enum() *HandoverStatus {
	p := new(HandoverStatus)
	*p = x
	return p
}

func (x HandoverStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandoverStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[59].Descriptor()
}

func (HandoverStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[59]
}

func (x HandoverStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandoverStatus.Descriptor instead.
func (HandoverStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{59}
}

type MachineEventAction int32

const (
	MachineEventAction_NO_MACHINE_EVENT_ACTION     MachineEventAction = 0
	MachineEventAction_MACHINE_EVENT_ACTION_CREATE MachineEventAction = 1
	MachineEventAction_MACHINE_EVENT_ACTION_UPDATE MachineEventAction = 2
)

// Enum value maps for MachineEventAction.
var (
	MachineEventAction_name = map[int32]string{
		0: "NO_MACHINE_EVENT_ACTION",
		1: "MACHINE_EVENT_ACTION_CREATE",
		2: "MACHINE_EVENT_ACTION_UPDATE",
	}
	MachineEventAction_value = map[string]int32{
		"NO_MACHINE_EVENT_ACTION":     0,
		"MACHINE_EVENT_ACTION_CREATE": 1,
		"MACHINE_EVENT_ACTION_UPDATE": 2,
	}
)

func (x MachineEventAction) Enum() *MachineEventAction {
	p := new(MachineEventAction)
	*p = x
	return p
}

func (x MachineEventAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineEventAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[60].Descriptor()
}

func (MachineEventAction) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[60]
}

func (x MachineEventAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineEventAction.Descriptor instead.
func (MachineEventAction) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{60}
}

type ScheduleType int32

const (
	ScheduleType_NO_SCHEDULE_TYPE ScheduleType = 0
	ScheduleType_SCHEDULE         ScheduleType = 1
	ScheduleType_RESCHCEDULE      ScheduleType = 2
)

// Enum value maps for ScheduleType.
var (
	ScheduleType_name = map[int32]string{
		0: "NO_SCHEDULE_TYPE",
		1: "SCHEDULE",
		2: "RESCHCEDULE",
	}
	ScheduleType_value = map[string]int32{
		"NO_SCHEDULE_TYPE": 0,
		"SCHEDULE":         1,
		"RESCHCEDULE":      2,
	}
)

func (x ScheduleType) Enum() *ScheduleType {
	p := new(ScheduleType)
	*p = x
	return p
}

func (x ScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[61].Descriptor()
}

func (ScheduleType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[61]
}

func (x ScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleType.Descriptor instead.
func (ScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{61}
}

type UserStatus int32

const (
	UserStatus_UNREGISTERED               UserStatus = 0
	UserStatus_REGISTERED                 UserStatus = 1
	UserStatus_BLOCKED                    UserStatus = 2
	UserStatus_EMAIL_VERIFICATION_PENDING UserStatus = 3
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "UNREGISTERED",
		1: "REGISTERED",
		2: "BLOCKED",
		3: "EMAIL_VERIFICATION_PENDING",
	}
	UserStatus_value = map[string]int32{
		"UNREGISTERED":               0,
		"REGISTERED":                 1,
		"BLOCKED":                    2,
		"EMAIL_VERIFICATION_PENDING": 3,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[62].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[62]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{62}
}

type Gender int32

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
	Gender_OTHER  Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "MALE",
		1: "FEMALE",
		2: "OTHER",
	}
	Gender_value = map[string]int32{
		"MALE":   0,
		"FEMALE": 1,
		"OTHER":  2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[63].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[63]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{63}
}

type AddressType int32

const (
	AddressType_HOME  AddressType = 0
	AddressType_STORE AddressType = 1
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0: "HOME",
		1: "STORE",
	}
	AddressType_value = map[string]int32{
		"HOME":  0,
		"STORE": 1,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[64].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[64]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{64}
}

type GeographyType int32

const (
	GeographyType_ZONE     GeographyType = 0
	GeographyType_REGION   GeographyType = 1
	GeographyType_DISTRICT GeographyType = 2
	GeographyType_TEHSIL   GeographyType = 3
	GeographyType_VILLAGE  GeographyType = 4
)

// Enum value maps for GeographyType.
var (
	GeographyType_name = map[int32]string{
		0: "ZONE",
		1: "REGION",
		2: "DISTRICT",
		3: "TEHSIL",
		4: "VILLAGE",
	}
	GeographyType_value = map[string]int32{
		"ZONE":     0,
		"REGION":   1,
		"DISTRICT": 2,
		"TEHSIL":   3,
		"VILLAGE":  4,
	}
)

func (x GeographyType) Enum() *GeographyType {
	p := new(GeographyType)
	*p = x
	return p
}

func (x GeographyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeographyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[65].Descriptor()
}

func (GeographyType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[65]
}

func (x GeographyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeographyType.Descriptor instead.
func (GeographyType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{65}
}

type DocumentType int32

const (
	DocumentType_PAN_CARD        DocumentType = 0
	DocumentType_AADHAR_CARD     DocumentType = 1
	DocumentType_PROFILE_PIC     DocumentType = 2
	DocumentType_DRIVING_LICENSE DocumentType = 3
	DocumentType_CANCEL_CHEQUE   DocumentType = 4
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		0: "PAN_CARD",
		1: "AADHAR_CARD",
		2: "PROFILE_PIC",
		3: "DRIVING_LICENSE",
		4: "CANCEL_CHEQUE",
	}
	DocumentType_value = map[string]int32{
		"PAN_CARD":        0,
		"AADHAR_CARD":     1,
		"PROFILE_PIC":     2,
		"DRIVING_LICENSE": 3,
		"CANCEL_CHEQUE":   4,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[66].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[66]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{66}
}

type BookingEligibilityStatus int32

const (
	BookingEligibilityStatus_UNKNOWN_BOOKING_ELIGIBILITY_STATUS BookingEligibilityStatus = 0
	BookingEligibilityStatus_ENABLED                            BookingEligibilityStatus = 1
	BookingEligibilityStatus_DISABLED                           BookingEligibilityStatus = 2
)

// Enum value maps for BookingEligibilityStatus.
var (
	BookingEligibilityStatus_name = map[int32]string{
		0: "UNKNOWN_BOOKING_ELIGIBILITY_STATUS",
		1: "ENABLED",
		2: "DISABLED",
	}
	BookingEligibilityStatus_value = map[string]int32{
		"UNKNOWN_BOOKING_ELIGIBILITY_STATUS": 0,
		"ENABLED":                            1,
		"DISABLED":                           2,
	}
)

func (x BookingEligibilityStatus) Enum() *BookingEligibilityStatus {
	p := new(BookingEligibilityStatus)
	*p = x
	return p
}

func (x BookingEligibilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingEligibilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[67].Descriptor()
}

func (BookingEligibilityStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[67]
}

func (x BookingEligibilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingEligibilityStatus.Descriptor instead.
func (BookingEligibilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{67}
}

type BookingScheduleType int32

const (
	BookingScheduleType_NO_BOOKING_SCHEDULE_TYPE BookingScheduleType = 0
	BookingScheduleType_HOURLY                   BookingScheduleType = 1
	BookingScheduleType_DAILY                    BookingScheduleType = 2
	BookingScheduleType_WEEKLY                   BookingScheduleType = 3
	BookingScheduleType_MONTHLY                  BookingScheduleType = 4
	BookingScheduleType_QUARTERLY                BookingScheduleType = 5
	BookingScheduleType_ANNUALLY                 BookingScheduleType = 6
)

// Enum value maps for BookingScheduleType.
var (
	BookingScheduleType_name = map[int32]string{
		0: "NO_BOOKING_SCHEDULE_TYPE",
		1: "HOURLY",
		2: "DAILY",
		3: "WEEKLY",
		4: "MONTHLY",
		5: "QUARTERLY",
		6: "ANNUALLY",
	}
	BookingScheduleType_value = map[string]int32{
		"NO_BOOKING_SCHEDULE_TYPE": 0,
		"HOURLY":                   1,
		"DAILY":                    2,
		"WEEKLY":                   3,
		"MONTHLY":                  4,
		"QUARTERLY":                5,
		"ANNUALLY":                 6,
	}
)

func (x BookingScheduleType) Enum() *BookingScheduleType {
	p := new(BookingScheduleType)
	*p = x
	return p
}

func (x BookingScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[68].Descriptor()
}

func (BookingScheduleType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[68]
}

func (x BookingScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingScheduleType.Descriptor instead.
func (BookingScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{68}
}

type BookingNameSpace int32

const (
	BookingNameSpace_NO_BOOKING_NAMESPACE BookingNameSpace = 0
	BookingNameSpace_NURTURE_FARM         BookingNameSpace = 1
)

// Enum value maps for BookingNameSpace.
var (
	BookingNameSpace_name = map[int32]string{
		0: "NO_BOOKING_NAMESPACE",
		1: "NURTURE_FARM",
	}
	BookingNameSpace_value = map[string]int32{
		"NO_BOOKING_NAMESPACE": 0,
		"NURTURE_FARM":         1,
	}
)

func (x BookingNameSpace) Enum() *BookingNameSpace {
	p := new(BookingNameSpace)
	*p = x
	return p
}

func (x BookingNameSpace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingNameSpace) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[69].Descriptor()
}

func (BookingNameSpace) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[69]
}

func (x BookingNameSpace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingNameSpace.Descriptor instead.
func (BookingNameSpace) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{69}
}

type BookingClass int32

const (
	BookingClass_NO_BOOKING_CLASS BookingClass = 0
)

// Enum value maps for BookingClass.
var (
	BookingClass_name = map[int32]string{
		0: "NO_BOOKING_CLASS",
	}
	BookingClass_value = map[string]int32{
		"NO_BOOKING_CLASS": 0,
	}
)

func (x BookingClass) Enum() *BookingClass {
	p := new(BookingClass)
	*p = x
	return p
}

func (x BookingClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingClass) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[70].Descriptor()
}

func (BookingClass) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[70]
}

func (x BookingClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingClass.Descriptor instead.
func (BookingClass) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{70}
}

type Language int32

const (
	Language_NO_LANGUAGE Language = 0
	Language_ENGLISH     Language = 1
	Language_HINDI       Language = 2
	Language_GUJARATI    Language = 3
	Language_PUNJABI     Language = 4
	Language_KANNADA     Language = 5
	Language_TAMIL       Language = 6
	Language_TELUGU      Language = 7
	Language_MALAYALAM   Language = 8
	Language_BENGALI     Language = 9
	Language_MARATHI     Language = 10
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "NO_LANGUAGE",
		1:  "ENGLISH",
		2:  "HINDI",
		3:  "GUJARATI",
		4:  "PUNJABI",
		5:  "KANNADA",
		6:  "TAMIL",
		7:  "TELUGU",
		8:  "MALAYALAM",
		9:  "BENGALI",
		10: "MARATHI",
	}
	Language_value = map[string]int32{
		"NO_LANGUAGE": 0,
		"ENGLISH":     1,
		"HINDI":       2,
		"GUJARATI":    3,
		"PUNJABI":     4,
		"KANNADA":     5,
		"TAMIL":       6,
		"TELUGU":      7,
		"MALAYALAM":   8,
		"BENGALI":     9,
		"MARATHI":     10,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[71].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[71]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{71}
}

type Country int32

const (
	Country_NO_COUNTRY Country = 0
	Country_INDIA      Country = 1
	Country_AUSTRALIA  Country = 2
)

// Enum value maps for Country.
var (
	Country_name = map[int32]string{
		0: "NO_COUNTRY",
		1: "INDIA",
		2: "AUSTRALIA",
	}
	Country_value = map[string]int32{
		"NO_COUNTRY": 0,
		"INDIA":      1,
		"AUSTRALIA":  2,
	}
)

func (x Country) Enum() *Country {
	p := new(Country)
	*p = x
	return p
}

func (x Country) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Country) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[72].Descriptor()
}

func (Country) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[72]
}

func (x Country) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Country.Descriptor instead.
func (Country) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{72}
}

type PushNotificationType int32

const (
	PushNotificationType_NO_PUSH_NOTIFICATION_TYPE PushNotificationType = 0
	PushNotificationType_NOTIFICATION              PushNotificationType = 1
	PushNotificationType_DATA                      PushNotificationType = 2
)

// Enum value maps for PushNotificationType.
var (
	PushNotificationType_name = map[int32]string{
		0: "NO_PUSH_NOTIFICATION_TYPE",
		1: "NOTIFICATION",
		2: "DATA",
	}
	PushNotificationType_value = map[string]int32{
		"NO_PUSH_NOTIFICATION_TYPE": 0,
		"NOTIFICATION":              1,
		"DATA":                      2,
	}
)

func (x PushNotificationType) Enum() *PushNotificationType {
	p := new(PushNotificationType)
	*p = x
	return p
}

func (x PushNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[73].Descriptor()
}

func (PushNotificationType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[73]
}

func (x PushNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushNotificationType.Descriptor instead.
func (PushNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{73}
}

type InfoType int32

const (
	InfoType_NO_INFO_TYPE InfoType = 0
	InfoType_BASIC        InfoType = 1
	InfoType_DETAILED     InfoType = 2
)

// Enum value maps for InfoType.
var (
	InfoType_name = map[int32]string{
		0: "NO_INFO_TYPE",
		1: "BASIC",
		2: "DETAILED",
	}
	InfoType_value = map[string]int32{
		"NO_INFO_TYPE": 0,
		"BASIC":        1,
		"DETAILED":     2,
	}
)

func (x InfoType) Enum() *InfoType {
	p := new(InfoType)
	*p = x
	return p
}

func (x InfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[74].Descriptor()
}

func (InfoType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[74]
}

func (x InfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoType.Descriptor instead.
func (InfoType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{74}
}

type DayDurationType int32

const (
	DayDurationType_NO_DAY_DURATION_TYPE DayDurationType = 0
	DayDurationType_DAY                  DayDurationType = 1
	DayDurationType_NIGHT                DayDurationType = 2
)

// Enum value maps for DayDurationType.
var (
	DayDurationType_name = map[int32]string{
		0: "NO_DAY_DURATION_TYPE",
		1: "DAY",
		2: "NIGHT",
	}
	DayDurationType_value = map[string]int32{
		"NO_DAY_DURATION_TYPE": 0,
		"DAY":                  1,
		"NIGHT":                2,
	}
)

func (x DayDurationType) Enum() *DayDurationType {
	p := new(DayDurationType)
	*p = x
	return p
}

func (x DayDurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayDurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[75].Descriptor()
}

func (DayDurationType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[75]
}

func (x DayDurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayDurationType.Descriptor instead.
func (DayDurationType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{75}
}

type DayOfWeek int32

const (
	DayOfWeek_NO_DAY_OF_WEEK DayOfWeek = 0
	DayOfWeek_MONDAY         DayOfWeek = 1
	DayOfWeek_TUESDAY        DayOfWeek = 2
	DayOfWeek_WEDNESDAY      DayOfWeek = 3
	DayOfWeek_THURSDAY       DayOfWeek = 4
	DayOfWeek_FRIDAY         DayOfWeek = 5
	DayOfWeek_SATURDAY       DayOfWeek = 6
	DayOfWeek_SUNDAY         DayOfWeek = 7
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "NO_DAY_OF_WEEK",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	DayOfWeek_value = map[string]int32{
		"NO_DAY_OF_WEEK": 0,
		"MONDAY":         1,
		"TUESDAY":        2,
		"WEDNESDAY":      3,
		"THURSDAY":       4,
		"FRIDAY":         5,
		"SATURDAY":       6,
		"SUNDAY":         7,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[76].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[76]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{76}
}

type WeatherForecastType int32

const (
	WeatherForecastType_NO_WEATHER_FORCECAST_TYPE WeatherForecastType = 0
	WeatherForecastType_DAILY_FORECAST            WeatherForecastType = 1
	WeatherForecastType_HOURLY_FORECAST           WeatherForecastType = 2
	WeatherForecastType_OBSERVATION               WeatherForecastType = 3
	WeatherForecastType_HISTORY_FORECAST          WeatherForecastType = 4
)

// Enum value maps for WeatherForecastType.
var (
	WeatherForecastType_name = map[int32]string{
		0: "NO_WEATHER_FORCECAST_TYPE",
		1: "DAILY_FORECAST",
		2: "HOURLY_FORECAST",
		3: "OBSERVATION",
		4: "HISTORY_FORECAST",
	}
	WeatherForecastType_value = map[string]int32{
		"NO_WEATHER_FORCECAST_TYPE": 0,
		"DAILY_FORECAST":            1,
		"HOURLY_FORECAST":           2,
		"OBSERVATION":               3,
		"HISTORY_FORECAST":          4,
	}
)

func (x WeatherForecastType) Enum() *WeatherForecastType {
	p := new(WeatherForecastType)
	*p = x
	return p
}

func (x WeatherForecastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeatherForecastType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[77].Descriptor()
}

func (WeatherForecastType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[77]
}

func (x WeatherForecastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeatherForecastType.Descriptor instead.
func (WeatherForecastType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{77}
}

type CommunicationState int32

const (
	CommunicationState_NO_COMMUNICATION_STATE CommunicationState = 0
	CommunicationState_VENDOR_UNDELIVERED     CommunicationState = 1
	CommunicationState_VENDOR_DELIVERED       CommunicationState = 2
	CommunicationState_CUSTOMER_UNDELIVERED   CommunicationState = 3
	CommunicationState_CUSTOMER_DELIVERED     CommunicationState = 4
	CommunicationState_PROCESSING_FAILED      CommunicationState = 5
)

// Enum value maps for CommunicationState.
var (
	CommunicationState_name = map[int32]string{
		0: "NO_COMMUNICATION_STATE",
		1: "VENDOR_UNDELIVERED",
		2: "VENDOR_DELIVERED",
		3: "CUSTOMER_UNDELIVERED",
		4: "CUSTOMER_DELIVERED",
		5: "PROCESSING_FAILED",
	}
	CommunicationState_value = map[string]int32{
		"NO_COMMUNICATION_STATE": 0,
		"VENDOR_UNDELIVERED":     1,
		"VENDOR_DELIVERED":       2,
		"CUSTOMER_UNDELIVERED":   3,
		"CUSTOMER_DELIVERED":     4,
		"PROCESSING_FAILED":      5,
	}
)

func (x CommunicationState) Enum() *CommunicationState {
	p := new(CommunicationState)
	*p = x
	return p
}

func (x CommunicationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationState) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[78].Descriptor()
}

func (CommunicationState) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[78]
}

func (x CommunicationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationState.Descriptor instead.
func (CommunicationState) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{78}
}

type NutrientRating int32

const (
	NutrientRating_NO_NUTRIENT_RATING NutrientRating = 0
	NutrientRating_SUFFICIENT         NutrientRating = 1
	NutrientRating_DEFICIENT          NutrientRating = 2
	NutrientRating_EXCESS             NutrientRating = 3
)

// Enum value maps for NutrientRating.
var (
	NutrientRating_name = map[int32]string{
		0: "NO_NUTRIENT_RATING",
		1: "SUFFICIENT",
		2: "DEFICIENT",
		3: "EXCESS",
	}
	NutrientRating_value = map[string]int32{
		"NO_NUTRIENT_RATING": 0,
		"SUFFICIENT":         1,
		"DEFICIENT":          2,
		"EXCESS":             3,
	}
)

func (x NutrientRating) Enum() *NutrientRating {
	p := new(NutrientRating)
	*p = x
	return p
}

func (x NutrientRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NutrientRating) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[79].Descriptor()
}

func (NutrientRating) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[79]
}

func (x NutrientRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NutrientRating.Descriptor instead.
func (NutrientRating) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{79}
}

type CropLandType int32

const (
	CropLandType_NO_CROPLAND_TYPE CropLandType = 0
	CropLandType_IRRIGATED        CropLandType = 1
	CropLandType_NON_IRRIGATED    CropLandType = 2
)

// Enum value maps for CropLandType.
var (
	CropLandType_name = map[int32]string{
		0: "NO_CROPLAND_TYPE",
		1: "IRRIGATED",
		2: "NON_IRRIGATED",
	}
	CropLandType_value = map[string]int32{
		"NO_CROPLAND_TYPE": 0,
		"IRRIGATED":        1,
		"NON_IRRIGATED":    2,
	}
)

func (x CropLandType) Enum() *CropLandType {
	p := new(CropLandType)
	*p = x
	return p
}

func (x CropLandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CropLandType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[80].Descriptor()
}

func (CropLandType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[80]
}

func (x CropLandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CropLandType.Descriptor instead.
func (CropLandType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{80}
}

type SynFertilizerReplacement int32

const (
	SynFertilizerReplacement_NO_SYN_FERTILIZER_REPLACEMENT SynFertilizerReplacement = 0
	SynFertilizerReplacement_BEEF_FEEDLOT                  SynFertilizerReplacement = 1
	SynFertilizerReplacement_CHICKEN_BROILER               SynFertilizerReplacement = 2
	SynFertilizerReplacement_CHICKEN_LAYER                 SynFertilizerReplacement = 3
	SynFertilizerReplacement_DAIRY                         SynFertilizerReplacement = 4
	SynFertilizerReplacement_SHEEP                         SynFertilizerReplacement = 5
	SynFertilizerReplacement_SWINE                         SynFertilizerReplacement = 6
	SynFertilizerReplacement_OTHER_SYN_FERTILIZER          SynFertilizerReplacement = 7
)

// Enum value maps for SynFertilizerReplacement.
var (
	SynFertilizerReplacement_name = map[int32]string{
		0: "NO_SYN_FERTILIZER_REPLACEMENT",
		1: "BEEF_FEEDLOT",
		2: "CHICKEN_BROILER",
		3: "CHICKEN_LAYER",
		4: "DAIRY",
		5: "SHEEP",
		6: "SWINE",
		7: "OTHER_SYN_FERTILIZER",
	}
	SynFertilizerReplacement_value = map[string]int32{
		"NO_SYN_FERTILIZER_REPLACEMENT": 0,
		"BEEF_FEEDLOT":                  1,
		"CHICKEN_BROILER":               2,
		"CHICKEN_LAYER":                 3,
		"DAIRY":                         4,
		"SHEEP":                         5,
		"SWINE":                         6,
		"OTHER_SYN_FERTILIZER":          7,
	}
)

func (x SynFertilizerReplacement) Enum() *SynFertilizerReplacement {
	p := new(SynFertilizerReplacement)
	*p = x
	return p
}

func (x SynFertilizerReplacement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynFertilizerReplacement) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[81].Descriptor()
}

func (SynFertilizerReplacement) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[81]
}

func (x SynFertilizerReplacement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynFertilizerReplacement.Descriptor instead.
func (SynFertilizerReplacement) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{81}
}

type ActivityType int32

const (
	ActivityType_NO_ACTIVITY                               ActivityType = 0
	ActivityType_TILLAGE_REDUCTION                         ActivityType = 1
	ActivityType_SEASONAL_COVER_CROP                       ActivityType = 2
	ActivityType_FERTILIZER_REDUCTION_PERCENTAGE           ActivityType = 3
	ActivityType_N_FERTILIZER_REDUCTION_PERCENTAGE         ActivityType = 4
	ActivityType_SYN_FERTILIZER_REPLACEMENT                ActivityType = 5
	ActivityType_SYN_N_FERTILIZER_REPLACED_WITH_COMPOST_CN ActivityType = 6
	ActivityType_SYN_N_FERTILIZER_REDUCTION_PERCENTAGE     ActivityType = 7
	ActivityType_IMPROVE_FARM_FUEL_EFFICIENCY              ActivityType = 8
)

// Enum value maps for ActivityType.
var (
	ActivityType_name = map[int32]string{
		0: "NO_ACTIVITY",
		1: "TILLAGE_REDUCTION",
		2: "SEASONAL_COVER_CROP",
		3: "FERTILIZER_REDUCTION_PERCENTAGE",
		4: "N_FERTILIZER_REDUCTION_PERCENTAGE",
		5: "SYN_FERTILIZER_REPLACEMENT",
		6: "SYN_N_FERTILIZER_REPLACED_WITH_COMPOST_CN",
		7: "SYN_N_FERTILIZER_REDUCTION_PERCENTAGE",
		8: "IMPROVE_FARM_FUEL_EFFICIENCY",
	}
	ActivityType_value = map[string]int32{
		"NO_ACTIVITY":                               0,
		"TILLAGE_REDUCTION":                         1,
		"SEASONAL_COVER_CROP":                       2,
		"FERTILIZER_REDUCTION_PERCENTAGE":           3,
		"N_FERTILIZER_REDUCTION_PERCENTAGE":         4,
		"SYN_FERTILIZER_REPLACEMENT":                5,
		"SYN_N_FERTILIZER_REPLACED_WITH_COMPOST_CN": 6,
		"SYN_N_FERTILIZER_REDUCTION_PERCENTAGE":     7,
		"IMPROVE_FARM_FUEL_EFFICIENCY":              8,
	}
)

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}

func (x ActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[82].Descriptor()
}

func (ActivityType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[82]
}

func (x ActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityType.Descriptor instead.
func (ActivityType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{82}
}

type TemplateContentType int32

const (
	TemplateContentType_NO_TEMPLATE_CONTENT_TYPE TemplateContentType = 0
	TemplateContentType_STRING                   TemplateContentType = 1
	TemplateContentType_HTML                     TemplateContentType = 2
)

// Enum value maps for TemplateContentType.
var (
	TemplateContentType_name = map[int32]string{
		0: "NO_TEMPLATE_CONTENT_TYPE",
		1: "STRING",
		2: "HTML",
	}
	TemplateContentType_value = map[string]int32{
		"NO_TEMPLATE_CONTENT_TYPE": 0,
		"STRING":                   1,
		"HTML":                     2,
	}
)

func (x TemplateContentType) Enum() *TemplateContentType {
	p := new(TemplateContentType)
	*p = x
	return p
}

func (x TemplateContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[83].Descriptor()
}

func (TemplateContentType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[83]
}

func (x TemplateContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateContentType.Descriptor instead.
func (TemplateContentType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{83}
}

type ResponseOrderType int32

const (
	ResponseOrderType_NO_RESPONSE_ORDER ResponseOrderType = 0
	ResponseOrderType_ASCENDING         ResponseOrderType = 1
	ResponseOrderType_DESCENDING        ResponseOrderType = 2
)

// Enum value maps for ResponseOrderType.
var (
	ResponseOrderType_name = map[int32]string{
		0: "NO_RESPONSE_ORDER",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	ResponseOrderType_value = map[string]int32{
		"NO_RESPONSE_ORDER": 0,
		"ASCENDING":         1,
		"DESCENDING":        2,
	}
)

func (x ResponseOrderType) Enum() *ResponseOrderType {
	p := new(ResponseOrderType)
	*p = x
	return p
}

func (x ResponseOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[84].Descriptor()
}

func (ResponseOrderType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[84]
}

func (x ResponseOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseOrderType.Descriptor instead.
func (ResponseOrderType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{84}
}

type SecretType int32

const (
	SecretType_NO_SECRET SecretType = 0
	SecretType_OTP       SecretType = 1
	SecretType_PASSWORD  SecretType = 2
)

// Enum value maps for SecretType.
var (
	SecretType_name = map[int32]string{
		0: "NO_SECRET",
		1: "OTP",
		2: "PASSWORD",
	}
	SecretType_value = map[string]int32{
		"NO_SECRET": 0,
		"OTP":       1,
		"PASSWORD":  2,
	}
)

func (x SecretType) Enum() *SecretType {
	p := new(SecretType)
	*p = x
	return p
}

func (x SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[85].Descriptor()
}

func (SecretType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[85]
}

func (x SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretType.Descriptor instead.
func (SecretType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{85}
}

type FeatureName int32

const (
	FeatureName_NO_FEATURE                     FeatureName = 0
	FeatureName_DOC_ON_CALL                    FeatureName = 1
	FeatureName_SPRAY_SERVICE_FEATURE          FeatureName = 2
	FeatureName_WEATHER_UPDATES_FEATURE        FeatureName = 3
	FeatureName_MANDI_UPDATES_FEATURE          FeatureName = 4
	FeatureName_PRODUCT_SCAN_FEATURE           FeatureName = 5
	FeatureName_VIDEO_FEED_CREATE_POST_FEATURE FeatureName = 6
)

// Enum value maps for FeatureName.
var (
	FeatureName_name = map[int32]string{
		0: "NO_FEATURE",
		1: "DOC_ON_CALL",
		2: "SPRAY_SERVICE_FEATURE",
		3: "WEATHER_UPDATES_FEATURE",
		4: "MANDI_UPDATES_FEATURE",
		5: "PRODUCT_SCAN_FEATURE",
		6: "VIDEO_FEED_CREATE_POST_FEATURE",
	}
	FeatureName_value = map[string]int32{
		"NO_FEATURE":                     0,
		"DOC_ON_CALL":                    1,
		"SPRAY_SERVICE_FEATURE":          2,
		"WEATHER_UPDATES_FEATURE":        3,
		"MANDI_UPDATES_FEATURE":          4,
		"PRODUCT_SCAN_FEATURE":           5,
		"VIDEO_FEED_CREATE_POST_FEATURE": 6,
	}
)

func (x FeatureName) Enum() *FeatureName {
	p := new(FeatureName)
	*p = x
	return p
}

func (x FeatureName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[86].Descriptor()
}

func (FeatureName) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[86]
}

func (x FeatureName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureName.Descriptor instead.
func (FeatureName) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{86}
}

type OfferKeyName int32

const (
	OfferKeyName_SEGMENT              OfferKeyName = 0
	OfferKeyName_ORDER                OfferKeyName = 1
	OfferKeyName_ORDERITEM            OfferKeyName = 2
	OfferKeyName_USER_PROFILE         OfferKeyName = 3
	OfferKeyName_CONTENT_VERIFICATION OfferKeyName = 4
)

// Enum value maps for OfferKeyName.
var (
	OfferKeyName_name = map[int32]string{
		0: "SEGMENT",
		1: "ORDER",
		2: "ORDERITEM",
		3: "USER_PROFILE",
		4: "CONTENT_VERIFICATION",
	}
	OfferKeyName_value = map[string]int32{
		"SEGMENT":              0,
		"ORDER":                1,
		"ORDERITEM":            2,
		"USER_PROFILE":         3,
		"CONTENT_VERIFICATION": 4,
	}
)

func (x OfferKeyName) Enum() *OfferKeyName {
	p := new(OfferKeyName)
	*p = x
	return p
}

func (x OfferKeyName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfferKeyName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[87].Descriptor()
}

func (OfferKeyName) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[87]
}

func (x OfferKeyName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfferKeyName.Descriptor instead.
func (OfferKeyName) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{87}
}

type OfferServiceKey int32

const (
	OfferServiceKey_SEGMENT_SEGMENT_ID_ORIGINAL             OfferServiceKey = 0
	OfferServiceKey_ORDER_ORDER_AMOUNT_SUM                  OfferServiceKey = 1
	OfferServiceKey_ORDERITEM_TOTAL_PACK_SIZE_SUM           OfferServiceKey = 2
	OfferServiceKey_ORDER_IDENTIFIER_ID_DISTINCT_COUNT      OfferServiceKey = 3
	OfferServiceKey_CONTENT_VERIFICATION_COMBINED_ID_LATEST OfferServiceKey = 4
	OfferServiceKey_ORDER_ORDER_AMOUNT_ORIGINAL             OfferServiceKey = 5
)

// Enum value maps for OfferServiceKey.
var (
	OfferServiceKey_name = map[int32]string{
		0: "SEGMENT_SEGMENT_ID_ORIGINAL",
		1: "ORDER_ORDER_AMOUNT_SUM",
		2: "ORDERITEM_TOTAL_PACK_SIZE_SUM",
		3: "ORDER_IDENTIFIER_ID_DISTINCT_COUNT",
		4: "CONTENT_VERIFICATION_COMBINED_ID_LATEST",
		5: "ORDER_ORDER_AMOUNT_ORIGINAL",
	}
	OfferServiceKey_value = map[string]int32{
		"SEGMENT_SEGMENT_ID_ORIGINAL":             0,
		"ORDER_ORDER_AMOUNT_SUM":                  1,
		"ORDERITEM_TOTAL_PACK_SIZE_SUM":           2,
		"ORDER_IDENTIFIER_ID_DISTINCT_COUNT":      3,
		"CONTENT_VERIFICATION_COMBINED_ID_LATEST": 4,
		"ORDER_ORDER_AMOUNT_ORIGINAL":             5,
	}
)

func (x OfferServiceKey) Enum() *OfferServiceKey {
	p := new(OfferServiceKey)
	*p = x
	return p
}

func (x OfferServiceKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfferServiceKey) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[88].Descriptor()
}

func (OfferServiceKey) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[88]
}

func (x OfferServiceKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfferServiceKey.Descriptor instead.
func (OfferServiceKey) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{88}
}

type OfferMetaKey int32

const (
	OfferMetaKey_ORDER_CREATED_AT_DATE                  OfferMetaKey = 0
	OfferMetaKey_ORDER_PLACED_AT_DATE                   OfferMetaKey = 1
	OfferMetaKey_ORDERITEM_PLACED_AT_DATE               OfferMetaKey = 2
	OfferMetaKey_ORDERITEM_PRODUCT_GROUP_ORIGINAL       OfferMetaKey = 3
	OfferMetaKey_ORDERITEM_IDENTIFIER_ID_LATEST         OfferMetaKey = 4
	OfferMetaKey_CONTENT_VERIFICATION_EVENT_ID_ORIGINAL OfferMetaKey = 5
	OfferMetaKey_ORDER_PAYMENT_TYPE_ORIGINAL            OfferMetaKey = 6
	OfferMetaKey_ORDER_IDENTIFIER_ID_LATEST             OfferMetaKey = 7
)

// Enum value maps for OfferMetaKey.
var (
	OfferMetaKey_name = map[int32]string{
		0: "ORDER_CREATED_AT_DATE",
		1: "ORDER_PLACED_AT_DATE",
		2: "ORDERITEM_PLACED_AT_DATE",
		3: "ORDERITEM_PRODUCT_GROUP_ORIGINAL",
		4: "ORDERITEM_IDENTIFIER_ID_LATEST",
		5: "CONTENT_VERIFICATION_EVENT_ID_ORIGINAL",
		6: "ORDER_PAYMENT_TYPE_ORIGINAL",
		7: "ORDER_IDENTIFIER_ID_LATEST",
	}
	OfferMetaKey_value = map[string]int32{
		"ORDER_CREATED_AT_DATE":                  0,
		"ORDER_PLACED_AT_DATE":                   1,
		"ORDERITEM_PLACED_AT_DATE":               2,
		"ORDERITEM_PRODUCT_GROUP_ORIGINAL":       3,
		"ORDERITEM_IDENTIFIER_ID_LATEST":         4,
		"CONTENT_VERIFICATION_EVENT_ID_ORIGINAL": 5,
		"ORDER_PAYMENT_TYPE_ORIGINAL":            6,
		"ORDER_IDENTIFIER_ID_LATEST":             7,
	}
)

func (x OfferMetaKey) Enum() *OfferMetaKey {
	p := new(OfferMetaKey)
	*p = x
	return p
}

func (x OfferMetaKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfferMetaKey) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[89].Descriptor()
}

func (OfferMetaKey) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[89]
}

func (x OfferMetaKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfferMetaKey.Descriptor instead.
func (OfferMetaKey) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{89}
}

type EngagementKeyName int32

const (
	EngagementKeyName_SEGMENT_TYPE EngagementKeyName = 0
)

// Enum value maps for EngagementKeyName.
var (
	EngagementKeyName_name = map[int32]string{
		0: "SEGMENT_TYPE",
	}
	EngagementKeyName_value = map[string]int32{
		"SEGMENT_TYPE": 0,
	}
)

func (x EngagementKeyName) Enum() *EngagementKeyName {
	p := new(EngagementKeyName)
	*p = x
	return p
}

func (x EngagementKeyName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngagementKeyName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[90].Descriptor()
}

func (EngagementKeyName) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[90]
}

func (x EngagementKeyName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngagementKeyName.Descriptor instead.
func (EngagementKeyName) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{90}
}

type EngagementServiceUserSegmentKey int32

const (
	EngagementServiceUserSegmentKey_USER_PROFILE_USER_ID   EngagementServiceUserSegmentKey = 0
	EngagementServiceUserSegmentKey_USER_PROFILE_CROP_ID   EngagementServiceUserSegmentKey = 1
	EngagementServiceUserSegmentKey_USER_PROFILE_REGION_ID EngagementServiceUserSegmentKey = 2
	EngagementServiceUserSegmentKey_USER_PROFILE_FARM_ID   EngagementServiceUserSegmentKey = 3
	EngagementServiceUserSegmentKey_USER_PROFILE_BANK_ID   EngagementServiceUserSegmentKey = 4
	EngagementServiceUserSegmentKey_USER_PROFILE_NAMESPACE EngagementServiceUserSegmentKey = 5
	EngagementServiceUserSegmentKey_USER_PROFILE_STATE     EngagementServiceUserSegmentKey = 6
	EngagementServiceUserSegmentKey_USER_PROFILE_DISTRICT  EngagementServiceUserSegmentKey = 7
	EngagementServiceUserSegmentKey_USER_PROFILE_TEHSIL    EngagementServiceUserSegmentKey = 8
	EngagementServiceUserSegmentKey_USER_PROFILE_VILLAGE   EngagementServiceUserSegmentKey = 9
	EngagementServiceUserSegmentKey_USER_PROFILE_PINCODE   EngagementServiceUserSegmentKey = 10
	EngagementServiceUserSegmentKey_USER_PROFILE_USER_TYPE EngagementServiceUserSegmentKey = 11
	EngagementServiceUserSegmentKey_USER_PROFILE_USER_GMV  EngagementServiceUserSegmentKey = 12
	EngagementServiceUserSegmentKey_USER_PROFILE_DEPOS     EngagementServiceUserSegmentKey = 13
)

// Enum value maps for EngagementServiceUserSegmentKey.
var (
	EngagementServiceUserSegmentKey_name = map[int32]string{
		0:  "USER_PROFILE_USER_ID",
		1:  "USER_PROFILE_CROP_ID",
		2:  "USER_PROFILE_REGION_ID",
		3:  "USER_PROFILE_FARM_ID",
		4:  "USER_PROFILE_BANK_ID",
		5:  "USER_PROFILE_NAMESPACE",
		6:  "USER_PROFILE_STATE",
		7:  "USER_PROFILE_DISTRICT",
		8:  "USER_PROFILE_TEHSIL",
		9:  "USER_PROFILE_VILLAGE",
		10: "USER_PROFILE_PINCODE",
		11: "USER_PROFILE_USER_TYPE",
		12: "USER_PROFILE_USER_GMV",
		13: "USER_PROFILE_DEPOS",
	}
	EngagementServiceUserSegmentKey_value = map[string]int32{
		"USER_PROFILE_USER_ID":   0,
		"USER_PROFILE_CROP_ID":   1,
		"USER_PROFILE_REGION_ID": 2,
		"USER_PROFILE_FARM_ID":   3,
		"USER_PROFILE_BANK_ID":   4,
		"USER_PROFILE_NAMESPACE": 5,
		"USER_PROFILE_STATE":     6,
		"USER_PROFILE_DISTRICT":  7,
		"USER_PROFILE_TEHSIL":    8,
		"USER_PROFILE_VILLAGE":   9,
		"USER_PROFILE_PINCODE":   10,
		"USER_PROFILE_USER_TYPE": 11,
		"USER_PROFILE_USER_GMV":  12,
		"USER_PROFILE_DEPOS":     13,
	}
)

func (x EngagementServiceUserSegmentKey) Enum() *EngagementServiceUserSegmentKey {
	p := new(EngagementServiceUserSegmentKey)
	*p = x
	return p
}

func (x EngagementServiceUserSegmentKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngagementServiceUserSegmentKey) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[91].Descriptor()
}

func (EngagementServiceUserSegmentKey) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[91]
}

func (x EngagementServiceUserSegmentKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngagementServiceUserSegmentKey.Descriptor instead.
func (EngagementServiceUserSegmentKey) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{91}
}

type ContentMimeType int32

const (
	ContentMimeType_NO_CONTENT_MIME_TYPE ContentMimeType = 0
	ContentMimeType_VIDEO_MP4            ContentMimeType = 1
	ContentMimeType_MIME_TYPE_IMAGE      ContentMimeType = 2
)

// Enum value maps for ContentMimeType.
var (
	ContentMimeType_name = map[int32]string{
		0: "NO_CONTENT_MIME_TYPE",
		1: "VIDEO_MP4",
		2: "MIME_TYPE_IMAGE",
	}
	ContentMimeType_value = map[string]int32{
		"NO_CONTENT_MIME_TYPE": 0,
		"VIDEO_MP4":            1,
		"MIME_TYPE_IMAGE":      2,
	}
)

func (x ContentMimeType) Enum() *ContentMimeType {
	p := new(ContentMimeType)
	*p = x
	return p
}

func (x ContentMimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentMimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[92].Descriptor()
}

func (ContentMimeType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[92]
}

func (x ContentMimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentMimeType.Descriptor instead.
func (ContentMimeType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{92}
}

type UserContentStatus int32

const (
	UserContentStatus_NO_USER_CONTENT_STATUS UserContentStatus = 0
	UserContentStatus_LIKED                  UserContentStatus = 1
	UserContentStatus_DISLIKED               UserContentStatus = 2
)

// Enum value maps for UserContentStatus.
var (
	UserContentStatus_name = map[int32]string{
		0: "NO_USER_CONTENT_STATUS",
		1: "LIKED",
		2: "DISLIKED",
	}
	UserContentStatus_value = map[string]int32{
		"NO_USER_CONTENT_STATUS": 0,
		"LIKED":                  1,
		"DISLIKED":               2,
	}
)

func (x UserContentStatus) Enum() *UserContentStatus {
	p := new(UserContentStatus)
	*p = x
	return p
}

func (x UserContentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserContentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[93].Descriptor()
}

func (UserContentStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[93]
}

func (x UserContentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserContentStatus.Descriptor instead.
func (UserContentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{93}
}

type QuestionType int32

const (
	QuestionType_NO_QUESTION_TYPE     QuestionType = 0
	QuestionType_TEXT                 QuestionType = 1
	QuestionType_NUMERIC              QuestionType = 2
	QuestionType_TEXT_MULTI_CHOICE    QuestionType = 3
	QuestionType_NUMERIC_MULTI_CHOICE QuestionType = 4
	QuestionType_FILL_IN_THE_BLANK    QuestionType = 5
	QuestionType_FILE_UPLOAD          QuestionType = 6
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "NO_QUESTION_TYPE",
		1: "TEXT",
		2: "NUMERIC",
		3: "TEXT_MULTI_CHOICE",
		4: "NUMERIC_MULTI_CHOICE",
		5: "FILL_IN_THE_BLANK",
		6: "FILE_UPLOAD",
	}
	QuestionType_value = map[string]int32{
		"NO_QUESTION_TYPE":     0,
		"TEXT":                 1,
		"NUMERIC":              2,
		"TEXT_MULTI_CHOICE":    3,
		"NUMERIC_MULTI_CHOICE": 4,
		"FILL_IN_THE_BLANK":    5,
		"FILE_UPLOAD":          6,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[94].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[94]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{94}
}

type ComparisonCheckType int32

const (
	ComparisonCheckType_NO_COMPARISON_CHECK_TYPE ComparisonCheckType = 0
	ComparisonCheckType_IN                       ComparisonCheckType = 1
	ComparisonCheckType_BW                       ComparisonCheckType = 2
	ComparisonCheckType_LESS                     ComparisonCheckType = 3
	ComparisonCheckType_GREATER                  ComparisonCheckType = 4
	ComparisonCheckType_LESS_EQUAL               ComparisonCheckType = 5
	ComparisonCheckType_GREATER_EQUAL            ComparisonCheckType = 6
	ComparisonCheckType_EQUAL                    ComparisonCheckType = 7
	ComparisonCheckType_NOT_EQUAL                ComparisonCheckType = 8
)

// Enum value maps for ComparisonCheckType.
var (
	ComparisonCheckType_name = map[int32]string{
		0: "NO_COMPARISON_CHECK_TYPE",
		1: "IN",
		2: "BW",
		3: "LESS",
		4: "GREATER",
		5: "LESS_EQUAL",
		6: "GREATER_EQUAL",
		7: "EQUAL",
		8: "NOT_EQUAL",
	}
	ComparisonCheckType_value = map[string]int32{
		"NO_COMPARISON_CHECK_TYPE": 0,
		"IN":                       1,
		"BW":                       2,
		"LESS":                     3,
		"GREATER":                  4,
		"LESS_EQUAL":               5,
		"GREATER_EQUAL":            6,
		"EQUAL":                    7,
		"NOT_EQUAL":                8,
	}
)

func (x ComparisonCheckType) Enum() *ComparisonCheckType {
	p := new(ComparisonCheckType)
	*p = x
	return p
}

func (x ComparisonCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[95].Descriptor()
}

func (ComparisonCheckType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[95]
}

func (x ComparisonCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonCheckType.Descriptor instead.
func (ComparisonCheckType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{95}
}

type Tenant int32

const (
	Tenant_NO_TENANT Tenant = 0
	Tenant_HFX       Tenant = 1
	Tenant_SEEDHOP   Tenant = 2
)

// Enum value maps for Tenant.
var (
	Tenant_name = map[int32]string{
		0: "NO_TENANT",
		1: "HFX",
		2: "SEEDHOP",
	}
	Tenant_value = map[string]int32{
		"NO_TENANT": 0,
		"HFX":       1,
		"SEEDHOP":   2,
	}
)

func (x Tenant) Enum() *Tenant {
	p := new(Tenant)
	*p = x
	return p
}

func (x Tenant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tenant) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[96].Descriptor()
}

func (Tenant) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[96]
}

func (x Tenant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tenant.Descriptor instead.
func (Tenant) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{96}
}

type MediaType int32

const (
	MediaType_NO_MEDIA_TYPE MediaType = 0
	MediaType_IMAGE         MediaType = 1
	MediaType_DOCUMENT      MediaType = 2
	MediaType_VIDEO         MediaType = 3
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "NO_MEDIA_TYPE",
		1: "IMAGE",
		2: "DOCUMENT",
		3: "VIDEO",
	}
	MediaType_value = map[string]int32{
		"NO_MEDIA_TYPE": 0,
		"IMAGE":         1,
		"DOCUMENT":      2,
		"VIDEO":         3,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[97].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[97]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{97}
}

type MediaAccessType int32

const (
	MediaAccessType_NO_MEDIA_ACCESS_TYPE MediaAccessType = 0
	MediaAccessType_PUBLIC_URL           MediaAccessType = 1
	MediaAccessType_DOCUMENT_ID          MediaAccessType = 2
)

// Enum value maps for MediaAccessType.
var (
	MediaAccessType_name = map[int32]string{
		0: "NO_MEDIA_ACCESS_TYPE",
		1: "PUBLIC_URL",
		2: "DOCUMENT_ID",
	}
	MediaAccessType_value = map[string]int32{
		"NO_MEDIA_ACCESS_TYPE": 0,
		"PUBLIC_URL":           1,
		"DOCUMENT_ID":          2,
	}
)

func (x MediaAccessType) Enum() *MediaAccessType {
	p := new(MediaAccessType)
	*p = x
	return p
}

func (x MediaAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[98].Descriptor()
}

func (MediaAccessType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[98]
}

func (x MediaAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaAccessType.Descriptor instead.
func (MediaAccessType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{98}
}

type DPSource int32

const (
	DPSource_NO_DP_SOURCE DPSource = 0
	DPSource_CLEVERTAP    DPSource = 1
)

// Enum value maps for DPSource.
var (
	DPSource_name = map[int32]string{
		0: "NO_DP_SOURCE",
		1: "CLEVERTAP",
	}
	DPSource_value = map[string]int32{
		"NO_DP_SOURCE": 0,
		"CLEVERTAP":    1,
	}
)

func (x DPSource) Enum() *DPSource {
	p := new(DPSource)
	*p = x
	return p
}

func (x DPSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DPSource) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[99].Descriptor()
}

func (DPSource) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[99]
}

func (x DPSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DPSource.Descriptor instead.
func (DPSource) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{99}
}

type EventSubType int32

const (
	EventSubType_NO_EVENT_SUBTYPE          EventSubType = 0
	EventSubType_CONTENT_MANAGEMENT_SYSTEM EventSubType = 1
)

// Enum value maps for EventSubType.
var (
	EventSubType_name = map[int32]string{
		0: "NO_EVENT_SUBTYPE",
		1: "CONTENT_MANAGEMENT_SYSTEM",
	}
	EventSubType_value = map[string]int32{
		"NO_EVENT_SUBTYPE":          0,
		"CONTENT_MANAGEMENT_SYSTEM": 1,
	}
)

func (x EventSubType) Enum() *EventSubType {
	p := new(EventSubType)
	*p = x
	return p
}

func (x EventSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[100].Descriptor()
}

func (EventSubType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[100]
}

func (x EventSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubType.Descriptor instead.
func (EventSubType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{100}
}

type CultivationPractice int32

const (
	CultivationPractice_NO_CULTIVATION_PRACTICE CultivationPractice = 0
	CultivationPractice_AWD                     CultivationPractice = 1
	CultivationPractice_DSR                     CultivationPractice = 2
	CultivationPractice_TRANSPLANTED            CultivationPractice = 3
)

// Enum value maps for CultivationPractice.
var (
	CultivationPractice_name = map[int32]string{
		0: "NO_CULTIVATION_PRACTICE",
		1: "AWD",
		2: "DSR",
		3: "TRANSPLANTED",
	}
	CultivationPractice_value = map[string]int32{
		"NO_CULTIVATION_PRACTICE": 0,
		"AWD":                     1,
		"DSR":                     2,
		"TRANSPLANTED":            3,
	}
)

func (x CultivationPractice) Enum() *CultivationPractice {
	p := new(CultivationPractice)
	*p = x
	return p
}

func (x CultivationPractice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultivationPractice) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[101].Descriptor()
}

func (CultivationPractice) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[101]
}

func (x CultivationPractice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultivationPractice.Descriptor instead.
func (CultivationPractice) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{101}
}

type PracticeChangeType int32

const (
	PracticeChangeType_NO_PRACTICE             PracticeChangeType = 0
	PracticeChangeType_PC_TILLAGE_REDUCTION    PracticeChangeType = 1
	PracticeChangeType_PC_COVER_CROP_ADDITION  PracticeChangeType = 2
	PracticeChangeType_PC_MANURE_ADDITION      PracticeChangeType = 3
	PracticeChangeType_PC_FERTILIZER_REDUCTION PracticeChangeType = 4
)

// Enum value maps for PracticeChangeType.
var (
	PracticeChangeType_name = map[int32]string{
		0: "NO_PRACTICE",
		1: "PC_TILLAGE_REDUCTION",
		2: "PC_COVER_CROP_ADDITION",
		3: "PC_MANURE_ADDITION",
		4: "PC_FERTILIZER_REDUCTION",
	}
	PracticeChangeType_value = map[string]int32{
		"NO_PRACTICE":             0,
		"PC_TILLAGE_REDUCTION":    1,
		"PC_COVER_CROP_ADDITION":  2,
		"PC_MANURE_ADDITION":      3,
		"PC_FERTILIZER_REDUCTION": 4,
	}
)

func (x PracticeChangeType) Enum() *PracticeChangeType {
	p := new(PracticeChangeType)
	*p = x
	return p
}

func (x PracticeChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PracticeChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[102].Descriptor()
}

func (PracticeChangeType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[102]
}

func (x PracticeChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PracticeChangeType.Descriptor instead.
func (PracticeChangeType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{102}
}

type ApprovalStatus int32

const (
	ApprovalStatus_NO_APPROVAL_STATUS ApprovalStatus = 0
	ApprovalStatus_IN_PROGRESS        ApprovalStatus = 1
	ApprovalStatus_APPROVED           ApprovalStatus = 2
	ApprovalStatus_REJECT             ApprovalStatus = 3
	ApprovalStatus_CONTENT_VERIFIED   ApprovalStatus = 4
	ApprovalStatus_CARE_NEEDED        ApprovalStatus = 5
)

// Enum value maps for ApprovalStatus.
var (
	ApprovalStatus_name = map[int32]string{
		0: "NO_APPROVAL_STATUS",
		1: "IN_PROGRESS",
		2: "APPROVED",
		3: "REJECT",
		4: "CONTENT_VERIFIED",
		5: "CARE_NEEDED",
	}
	ApprovalStatus_value = map[string]int32{
		"NO_APPROVAL_STATUS": 0,
		"IN_PROGRESS":        1,
		"APPROVED":           2,
		"REJECT":             3,
		"CONTENT_VERIFIED":   4,
		"CARE_NEEDED":        5,
	}
)

func (x ApprovalStatus) Enum() *ApprovalStatus {
	p := new(ApprovalStatus)
	*p = x
	return p
}

func (x ApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[103].Descriptor()
}

func (ApprovalStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[103]
}

func (x ApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalStatus.Descriptor instead.
func (ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{103}
}

type ApprovalStatusReason int32

const (
	ApprovalStatusReason_NO_APPROVAL_STATUS_REASON    ApprovalStatusReason = 0
	ApprovalStatusReason_WATER_NOT_DRAINED_TILL_15_CM ApprovalStatusReason = 1
	ApprovalStatusReason_FIELD_IS_STILL_FLOODED       ApprovalStatusReason = 2
	ApprovalStatusReason_IMAGE_NOT_CLEAR              ApprovalStatusReason = 3
	ApprovalStatusReason_OUTSIDE_OF_EVENT_TIMELINE    ApprovalStatusReason = 4
	ApprovalStatusReason_PICTURE_IS_NOT_OF_PIPE       ApprovalStatusReason = 5
	ApprovalStatusReason_OTHERS                       ApprovalStatusReason = 6
)

// Enum value maps for ApprovalStatusReason.
var (
	ApprovalStatusReason_name = map[int32]string{
		0: "NO_APPROVAL_STATUS_REASON",
		1: "WATER_NOT_DRAINED_TILL_15_CM",
		2: "FIELD_IS_STILL_FLOODED",
		3: "IMAGE_NOT_CLEAR",
		4: "OUTSIDE_OF_EVENT_TIMELINE",
		5: "PICTURE_IS_NOT_OF_PIPE",
		6: "OTHERS",
	}
	ApprovalStatusReason_value = map[string]int32{
		"NO_APPROVAL_STATUS_REASON":    0,
		"WATER_NOT_DRAINED_TILL_15_CM": 1,
		"FIELD_IS_STILL_FLOODED":       2,
		"IMAGE_NOT_CLEAR":              3,
		"OUTSIDE_OF_EVENT_TIMELINE":    4,
		"PICTURE_IS_NOT_OF_PIPE":       5,
		"OTHERS":                       6,
	}
)

func (x ApprovalStatusReason) Enum() *ApprovalStatusReason {
	p := new(ApprovalStatusReason)
	*p = x
	return p
}

func (x ApprovalStatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalStatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[104].Descriptor()
}

func (ApprovalStatusReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[104]
}

func (x ApprovalStatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalStatusReason.Descriptor instead.
func (ApprovalStatusReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{104}
}

type ProgramType int32

const (
	ProgramType_NO_PROGRAM_TYPE    ProgramType = 0
	ProgramType_PUSA_SPRAY_PROGRAM ProgramType = 1
	ProgramType_AWD_PROGRAM        ProgramType = 2
	ProgramType_DSR_PROGRAM        ProgramType = 3
	ProgramType_GROUNDNUT_PROGRAM  ProgramType = 4
	ProgramType_CRM_PROGRAM        ProgramType = 5
)

// Enum value maps for ProgramType.
var (
	ProgramType_name = map[int32]string{
		0: "NO_PROGRAM_TYPE",
		1: "PUSA_SPRAY_PROGRAM",
		2: "AWD_PROGRAM",
		3: "DSR_PROGRAM",
		4: "GROUNDNUT_PROGRAM",
		5: "CRM_PROGRAM",
	}
	ProgramType_value = map[string]int32{
		"NO_PROGRAM_TYPE":    0,
		"PUSA_SPRAY_PROGRAM": 1,
		"AWD_PROGRAM":        2,
		"DSR_PROGRAM":        3,
		"GROUNDNUT_PROGRAM":  4,
		"CRM_PROGRAM":        5,
	}
)

func (x ProgramType) Enum() *ProgramType {
	p := new(ProgramType)
	*p = x
	return p
}

func (x ProgramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgramType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[105].Descriptor()
}

func (ProgramType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[105]
}

func (x ProgramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgramType.Descriptor instead.
func (ProgramType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{105}
}

type ProgramStatus int32

const (
	ProgramStatus_NO_PROGRAM_STATUS ProgramStatus = 0
	ProgramStatus_PROGRAM_ENABLED   ProgramStatus = 1
	ProgramStatus_PROGRAM_DISABLED  ProgramStatus = 2
)

// Enum value maps for ProgramStatus.
var (
	ProgramStatus_name = map[int32]string{
		0: "NO_PROGRAM_STATUS",
		1: "PROGRAM_ENABLED",
		2: "PROGRAM_DISABLED",
	}
	ProgramStatus_value = map[string]int32{
		"NO_PROGRAM_STATUS": 0,
		"PROGRAM_ENABLED":   1,
		"PROGRAM_DISABLED":  2,
	}
)

func (x ProgramStatus) Enum() *ProgramStatus {
	p := new(ProgramStatus)
	*p = x
	return p
}

func (x ProgramStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgramStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[106].Descriptor()
}

func (ProgramStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[106]
}

func (x ProgramStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgramStatus.Descriptor instead.
func (ProgramStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{106}
}

type EventName int32

const (
	EventName_NO_EVENT_NAME     EventName = 0
	EventName_DRYING_EVENT_1    EventName = 1
	EventName_DRYING_EVENT_2    EventName = 2
	EventName_REGISTRATION      EventName = 3
	EventName_DETAILS           EventName = 4
	EventName_SOIL_TURNING      EventName = 5
	EventName_ROTAVATOR_USAGE   EventName = 6
	EventName_PIPE_INSTALLATION EventName = 7
)

// Enum value maps for EventName.
var (
	EventName_name = map[int32]string{
		0: "NO_EVENT_NAME",
		1: "DRYING_EVENT_1",
		2: "DRYING_EVENT_2",
		3: "REGISTRATION",
		4: "DETAILS",
		5: "SOIL_TURNING",
		6: "ROTAVATOR_USAGE",
		7: "PIPE_INSTALLATION",
	}
	EventName_value = map[string]int32{
		"NO_EVENT_NAME":     0,
		"DRYING_EVENT_1":    1,
		"DRYING_EVENT_2":    2,
		"REGISTRATION":      3,
		"DETAILS":           4,
		"SOIL_TURNING":      5,
		"ROTAVATOR_USAGE":   6,
		"PIPE_INSTALLATION": 7,
	}
)

func (x EventName) Enum() *EventName {
	p := new(EventName)
	*p = x
	return p
}

func (x EventName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[107].Descriptor()
}

func (EventName) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[107]
}

func (x EventName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventName.Descriptor instead.
func (EventName) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{107}
}

type ProgramPageEventType int32

const (
	ProgramPageEventType_NO_EVENT_TYPE                ProgramPageEventType = 0
	ProgramPageEventType_AWD_DRY_EVENT_1              ProgramPageEventType = 1
	ProgramPageEventType_AWD_DRY_EVENT_2              ProgramPageEventType = 2
	ProgramPageEventType_DSR_DRY_EVENT_1              ProgramPageEventType = 3
	ProgramPageEventType_DSR_DRY_EVENT_2              ProgramPageEventType = 4
	ProgramPageEventType_AWD_DRY_EVENT_3              ProgramPageEventType = 5
	ProgramPageEventType_AWD_DRY_EVENT_4              ProgramPageEventType = 6
	ProgramPageEventType_DSR_DRY_EVENT                ProgramPageEventType = 7
	ProgramPageEventType_CRM_PROGRAM_REGISTRATION     ProgramPageEventType = 8
	ProgramPageEventType_PUSA_SPRAY_DETAILS           ProgramPageEventType = 9
	ProgramPageEventType_DAY_AFTER_PUSA_SPRAY_EVENT   ProgramPageEventType = 10
	ProgramPageEventType_SOIL_TURNING_EVENT           ProgramPageEventType = 11
	ProgramPageEventType_ROTAVATOR_USAGE_DURING_RAINS ProgramPageEventType = 12
	ProgramPageEventType_VIDEO_INFO                   ProgramPageEventType = 13
	ProgramPageEventType_SIGNUP_EVENT                 ProgramPageEventType = 14
	ProgramPageEventType_BEFORE_AERATION_EVENT        ProgramPageEventType = 15
	ProgramPageEventType_GEOTAGGING                   ProgramPageEventType = 16
	ProgramPageEventType_PIPE_INSTALLATION_EVENT      ProgramPageEventType = 17
)

// Enum value maps for ProgramPageEventType.
var (
	ProgramPageEventType_name = map[int32]string{
		0:  "NO_EVENT_TYPE",
		1:  "AWD_DRY_EVENT_1",
		2:  "AWD_DRY_EVENT_2",
		3:  "DSR_DRY_EVENT_1",
		4:  "DSR_DRY_EVENT_2",
		5:  "AWD_DRY_EVENT_3",
		6:  "AWD_DRY_EVENT_4",
		7:  "DSR_DRY_EVENT",
		8:  "CRM_PROGRAM_REGISTRATION",
		9:  "PUSA_SPRAY_DETAILS",
		10: "DAY_AFTER_PUSA_SPRAY_EVENT",
		11: "SOIL_TURNING_EVENT",
		12: "ROTAVATOR_USAGE_DURING_RAINS",
		13: "VIDEO_INFO",
		14: "SIGNUP_EVENT",
		15: "BEFORE_AERATION_EVENT",
		16: "GEOTAGGING",
		17: "PIPE_INSTALLATION_EVENT",
	}
	ProgramPageEventType_value = map[string]int32{
		"NO_EVENT_TYPE":                0,
		"AWD_DRY_EVENT_1":              1,
		"AWD_DRY_EVENT_2":              2,
		"DSR_DRY_EVENT_1":              3,
		"DSR_DRY_EVENT_2":              4,
		"AWD_DRY_EVENT_3":              5,
		"AWD_DRY_EVENT_4":              6,
		"DSR_DRY_EVENT":                7,
		"CRM_PROGRAM_REGISTRATION":     8,
		"PUSA_SPRAY_DETAILS":           9,
		"DAY_AFTER_PUSA_SPRAY_EVENT":   10,
		"SOIL_TURNING_EVENT":           11,
		"ROTAVATOR_USAGE_DURING_RAINS": 12,
		"VIDEO_INFO":                   13,
		"SIGNUP_EVENT":                 14,
		"BEFORE_AERATION_EVENT":        15,
		"GEOTAGGING":                   16,
		"PIPE_INSTALLATION_EVENT":      17,
	}
)

func (x ProgramPageEventType) Enum() *ProgramPageEventType {
	p := new(ProgramPageEventType)
	*p = x
	return p
}

func (x ProgramPageEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgramPageEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[108].Descriptor()
}

func (ProgramPageEventType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[108]
}

func (x ProgramPageEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgramPageEventType.Descriptor instead.
func (ProgramPageEventType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{108}
}

type EventStatus int32

const (
	EventStatus_NO_EVENT_STATUS EventStatus = 0
	EventStatus_EVENT_ENABLED   EventStatus = 1
	EventStatus_EVENT_DISABLED  EventStatus = 2
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "NO_EVENT_STATUS",
		1: "EVENT_ENABLED",
		2: "EVENT_DISABLED",
	}
	EventStatus_value = map[string]int32{
		"NO_EVENT_STATUS": 0,
		"EVENT_ENABLED":   1,
		"EVENT_DISABLED":  2,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[109].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[109]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{109}
}

type ContactType int32

const (
	ContactType_NO_CONTACT_TYPE ContactType = 0
	ContactType_EMAIL_ID        ContactType = 1
	ContactType_MOBILE_NUMBER   ContactType = 2
	ContactType_FCM_TOKEN       ContactType = 3
)

// Enum value maps for ContactType.
var (
	ContactType_name = map[int32]string{
		0: "NO_CONTACT_TYPE",
		1: "EMAIL_ID",
		2: "MOBILE_NUMBER",
		3: "FCM_TOKEN",
	}
	ContactType_value = map[string]int32{
		"NO_CONTACT_TYPE": 0,
		"EMAIL_ID":        1,
		"MOBILE_NUMBER":   2,
		"FCM_TOKEN":       3,
	}
)

func (x ContactType) Enum() *ContactType {
	p := new(ContactType)
	*p = x
	return p
}

func (x ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[110].Descriptor()
}

func (ContactType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[110]
}

func (x ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactType.Descriptor instead.
func (ContactType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{110}
}

type CampaignStatus int32

const (
	CampaignStatus_NO_CAMPAGIN_STATUS CampaignStatus = 0
	CampaignStatus_RUNNING            CampaignStatus = 1
	CampaignStatus_HALTED             CampaignStatus = 2
	CampaignStatus_PRE_INACTION       CampaignStatus = 3
)

// Enum value maps for CampaignStatus.
var (
	CampaignStatus_name = map[int32]string{
		0: "NO_CAMPAGIN_STATUS",
		1: "RUNNING",
		2: "HALTED",
		3: "PRE_INACTION",
	}
	CampaignStatus_value = map[string]int32{
		"NO_CAMPAGIN_STATUS": 0,
		"RUNNING":            1,
		"HALTED":             2,
		"PRE_INACTION":       3,
	}
)

func (x CampaignStatus) Enum() *CampaignStatus {
	p := new(CampaignStatus)
	*p = x
	return p
}

func (x CampaignStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[111].Descriptor()
}

func (CampaignStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[111]
}

func (x CampaignStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignStatus.Descriptor instead.
func (CampaignStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{111}
}

type NameSpace int32

const (
	NameSpace_NO_NAMESPACE    NameSpace = 0
	NameSpace_FARM            NameSpace = 1
	NameSpace_RETAIL          NameSpace = 2
	NameSpace_TRADE           NameSpace = 3
	NameSpace_SUSTAIN         NameSpace = 4
	NameSpace_NURTURE_PARTNER NameSpace = 5
)

// Enum value maps for NameSpace.
var (
	NameSpace_name = map[int32]string{
		0: "NO_NAMESPACE",
		1: "FARM",
		2: "RETAIL",
		3: "TRADE",
		4: "SUSTAIN",
		5: "NURTURE_PARTNER",
	}
	NameSpace_value = map[string]int32{
		"NO_NAMESPACE":    0,
		"FARM":            1,
		"RETAIL":          2,
		"TRADE":           3,
		"SUSTAIN":         4,
		"NURTURE_PARTNER": 5,
	}
)

func (x NameSpace) Enum() *NameSpace {
	p := new(NameSpace)
	*p = x
	return p
}

func (x NameSpace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameSpace) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[112].Descriptor()
}

func (NameSpace) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[112]
}

func (x NameSpace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameSpace.Descriptor instead.
func (NameSpace) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{112}
}

type CampaignQueryType int32

const (
	CampaignQueryType_NO_CAMPAIGN_QUERY_TYPE CampaignQueryType = 0
	CampaignQueryType_ATHENA                 CampaignQueryType = 1
	CampaignQueryType_DATABASE               CampaignQueryType = 2
	CampaignQueryType_USER_LIST              CampaignQueryType = 3
)

// Enum value maps for CampaignQueryType.
var (
	CampaignQueryType_name = map[int32]string{
		0: "NO_CAMPAIGN_QUERY_TYPE",
		1: "ATHENA",
		2: "DATABASE",
		3: "USER_LIST",
	}
	CampaignQueryType_value = map[string]int32{
		"NO_CAMPAIGN_QUERY_TYPE": 0,
		"ATHENA":                 1,
		"DATABASE":               2,
		"USER_LIST":              3,
	}
)

func (x CampaignQueryType) Enum() *CampaignQueryType {
	p := new(CampaignQueryType)
	*p = x
	return p
}

func (x CampaignQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[113].Descriptor()
}

func (CampaignQueryType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[113]
}

func (x CampaignQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignQueryType.Descriptor instead.
func (CampaignQueryType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{113}
}

type ReferralBookingType int32

const (
	ReferralBookingType_REFERRAL_SPRAY_BOOKING      ReferralBookingType = 0
	ReferralBookingType_REFERRAL_PRODUCT_SCAN       ReferralBookingType = 1
	ReferralBookingType_REFERRAL_PROGRAM_ENROLLMENT ReferralBookingType = 2
)

// Enum value maps for ReferralBookingType.
var (
	ReferralBookingType_name = map[int32]string{
		0: "REFERRAL_SPRAY_BOOKING",
		1: "REFERRAL_PRODUCT_SCAN",
		2: "REFERRAL_PROGRAM_ENROLLMENT",
	}
	ReferralBookingType_value = map[string]int32{
		"REFERRAL_SPRAY_BOOKING":      0,
		"REFERRAL_PRODUCT_SCAN":       1,
		"REFERRAL_PROGRAM_ENROLLMENT": 2,
	}
)

func (x ReferralBookingType) Enum() *ReferralBookingType {
	p := new(ReferralBookingType)
	*p = x
	return p
}

func (x ReferralBookingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralBookingType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[114].Descriptor()
}

func (ReferralBookingType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[114]
}

func (x ReferralBookingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralBookingType.Descriptor instead.
func (ReferralBookingType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{114}
}

type ReferralType int32

const (
	ReferralType_NO_REFERRAL       ReferralType = 0
	ReferralType_EXISTING_REFERRAL ReferralType = 1
	ReferralType_CUSTOM_REFERRAL   ReferralType = 2
)

// Enum value maps for ReferralType.
var (
	ReferralType_name = map[int32]string{
		0: "NO_REFERRAL",
		1: "EXISTING_REFERRAL",
		2: "CUSTOM_REFERRAL",
	}
	ReferralType_value = map[string]int32{
		"NO_REFERRAL":       0,
		"EXISTING_REFERRAL": 1,
		"CUSTOM_REFERRAL":   2,
	}
)

func (x ReferralType) Enum() *ReferralType {
	p := new(ReferralType)
	*p = x
	return p
}

func (x ReferralType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[115].Descriptor()
}

func (ReferralType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[115]
}

func (x ReferralType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralType.Descriptor instead.
func (ReferralType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{115}
}

type FormStatus int32

const (
	FormStatus_NO_FORM_STATUS FormStatus = 0
	FormStatus_FS_DRAFT       FormStatus = 1
	FormStatus_FS_COMPLETED   FormStatus = 2
	FormStatus_FS_ACTIVE      FormStatus = 3
	FormStatus_FS_DELETED     FormStatus = 4
)

// Enum value maps for FormStatus.
var (
	FormStatus_name = map[int32]string{
		0: "NO_FORM_STATUS",
		1: "FS_DRAFT",
		2: "FS_COMPLETED",
		3: "FS_ACTIVE",
		4: "FS_DELETED",
	}
	FormStatus_value = map[string]int32{
		"NO_FORM_STATUS": 0,
		"FS_DRAFT":       1,
		"FS_COMPLETED":   2,
		"FS_ACTIVE":      3,
		"FS_DELETED":     4,
	}
)

func (x FormStatus) Enum() *FormStatus {
	p := new(FormStatus)
	*p = x
	return p
}

func (x FormStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[116].Descriptor()
}

func (FormStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[116]
}

func (x FormStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormStatus.Descriptor instead.
func (FormStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{116}
}

type EligibilityStatus int32

const (
	EligibilityStatus_NO_ELIGIBILITY_STATUS EligibilityStatus = 0
	EligibilityStatus_ELIGIBLE              EligibilityStatus = 1
	EligibilityStatus_IN_ELIGIBLE           EligibilityStatus = 2
	EligibilityStatus_UNKNOWN               EligibilityStatus = 3
)

// Enum value maps for EligibilityStatus.
var (
	EligibilityStatus_name = map[int32]string{
		0: "NO_ELIGIBILITY_STATUS",
		1: "ELIGIBLE",
		2: "IN_ELIGIBLE",
		3: "UNKNOWN",
	}
	EligibilityStatus_value = map[string]int32{
		"NO_ELIGIBILITY_STATUS": 0,
		"ELIGIBLE":              1,
		"IN_ELIGIBLE":           2,
		"UNKNOWN":               3,
	}
)

func (x EligibilityStatus) Enum() *EligibilityStatus {
	p := new(EligibilityStatus)
	*p = x
	return p
}

func (x EligibilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[117].Descriptor()
}

func (EligibilityStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[117]
}

func (x EligibilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityStatus.Descriptor instead.
func (EligibilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{117}
}

type ServicesName int32

const (
	ServicesName_PADDY_HARVESTER   ServicesName = 0
	ServicesName_HAPPY_SEEDER      ServicesName = 1
	ServicesName_BAILER            ServicesName = 2
	ServicesName_STUBBLE_CUTTER    ServicesName = 3
	ServicesName_COMBINE_HARVESTER ServicesName = 4
)

// Enum value maps for ServicesName.
var (
	ServicesName_name = map[int32]string{
		0: "PADDY_HARVESTER",
		1: "HAPPY_SEEDER",
		2: "BAILER",
		3: "STUBBLE_CUTTER",
		4: "COMBINE_HARVESTER",
	}
	ServicesName_value = map[string]int32{
		"PADDY_HARVESTER":   0,
		"HAPPY_SEEDER":      1,
		"BAILER":            2,
		"STUBBLE_CUTTER":    3,
		"COMBINE_HARVESTER": 4,
	}
)

func (x ServicesName) Enum() *ServicesName {
	p := new(ServicesName)
	*p = x
	return p
}

func (x ServicesName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicesName) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[118].Descriptor()
}

func (ServicesName) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[118]
}

func (x ServicesName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicesName.Descriptor instead.
func (ServicesName) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{118}
}

type CampaignScheduleType int32

const (
	CampaignScheduleType_NO_CAMPAIGN_SCHEDULE_TYPE CampaignScheduleType = 0
	CampaignScheduleType_INACTION_OVER_TIME        CampaignScheduleType = 1
)

// Enum value maps for CampaignScheduleType.
var (
	CampaignScheduleType_name = map[int32]string{
		0: "NO_CAMPAIGN_SCHEDULE_TYPE",
		1: "INACTION_OVER_TIME",
	}
	CampaignScheduleType_value = map[string]int32{
		"NO_CAMPAIGN_SCHEDULE_TYPE": 0,
		"INACTION_OVER_TIME":        1,
	}
)

func (x CampaignScheduleType) Enum() *CampaignScheduleType {
	p := new(CampaignScheduleType)
	*p = x
	return p
}

func (x CampaignScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[119].Descriptor()
}

func (CampaignScheduleType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[119]
}

func (x CampaignScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignScheduleType.Descriptor instead.
func (CampaignScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{119}
}

type ResourceType int32

const (
	ResourceType_NO_RESOURCE       ResourceType = 0
	ResourceType_FARMER_ONBOARDING ResourceType = 1
	ResourceType_BOOKING           ResourceType = 2
	ResourceType_PROGRAM_SIGNUP    ResourceType = 3
	ResourceType_BANK_DEPOSIT      ResourceType = 4
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "NO_RESOURCE",
		1: "FARMER_ONBOARDING",
		2: "BOOKING",
		3: "PROGRAM_SIGNUP",
		4: "BANK_DEPOSIT",
	}
	ResourceType_value = map[string]int32{
		"NO_RESOURCE":       0,
		"FARMER_ONBOARDING": 1,
		"BOOKING":           2,
		"PROGRAM_SIGNUP":    3,
		"BANK_DEPOSIT":      4,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[120].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[120]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{120}
}

type ResourceAccessType int32

const (
	ResourceAccessType_NO_ACCESS ResourceAccessType = 0
	ResourceAccessType_VIEW      ResourceAccessType = 1
	ResourceAccessType_CREATE    ResourceAccessType = 2
	ResourceAccessType_EDIT      ResourceAccessType = 3
	ResourceAccessType_DELETE    ResourceAccessType = 4
	ResourceAccessType_CANCEL    ResourceAccessType = 5
	ResourceAccessType_REASSIGN  ResourceAccessType = 6
)

// Enum value maps for ResourceAccessType.
var (
	ResourceAccessType_name = map[int32]string{
		0: "NO_ACCESS",
		1: "VIEW",
		2: "CREATE",
		3: "EDIT",
		4: "DELETE",
		5: "CANCEL",
		6: "REASSIGN",
	}
	ResourceAccessType_value = map[string]int32{
		"NO_ACCESS": 0,
		"VIEW":      1,
		"CREATE":    2,
		"EDIT":      3,
		"DELETE":    4,
		"CANCEL":    5,
		"REASSIGN":  6,
	}
)

func (x ResourceAccessType) Enum() *ResourceAccessType {
	p := new(ResourceAccessType)
	*p = x
	return p
}

func (x ResourceAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[121].Descriptor()
}

func (ResourceAccessType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[121]
}

func (x ResourceAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceAccessType.Descriptor instead.
func (ResourceAccessType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{121}
}

type ContentCategory int32

const (
	ContentCategory_NO_CONTENT_CATEGORY   ContentCategory = 0
	ContentCategory_MEDIA_FEED            ContentCategory = 1
	ContentCategory_PROGRAM_EVENT_CONTENT ContentCategory = 2
	ContentCategory_CONTENT_UPLOAD_DEMO   ContentCategory = 3
)

// Enum value maps for ContentCategory.
var (
	ContentCategory_name = map[int32]string{
		0: "NO_CONTENT_CATEGORY",
		1: "MEDIA_FEED",
		2: "PROGRAM_EVENT_CONTENT",
		3: "CONTENT_UPLOAD_DEMO",
	}
	ContentCategory_value = map[string]int32{
		"NO_CONTENT_CATEGORY":   0,
		"MEDIA_FEED":            1,
		"PROGRAM_EVENT_CONTENT": 2,
		"CONTENT_UPLOAD_DEMO":   3,
	}
)

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}

func (x ContentCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[122].Descriptor()
}

func (ContentCategory) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[122]
}

func (x ContentCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentCategory.Descriptor instead.
func (ContentCategory) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{122}
}

type ContentProvider int32

const (
	ContentProvider_NO_CONTENT_PROVIDER ContentProvider = 0
	ContentProvider_YOUTUBE             ContentProvider = 1
	ContentProvider_S3                  ContentProvider = 2
	ContentProvider_BLOBSTORE           ContentProvider = 3
)

// Enum value maps for ContentProvider.
var (
	ContentProvider_name = map[int32]string{
		0: "NO_CONTENT_PROVIDER",
		1: "YOUTUBE",
		2: "S3",
		3: "BLOBSTORE",
	}
	ContentProvider_value = map[string]int32{
		"NO_CONTENT_PROVIDER": 0,
		"YOUTUBE":             1,
		"S3":                  2,
		"BLOBSTORE":           3,
	}
)

func (x ContentProvider) Enum() *ContentProvider {
	p := new(ContentProvider)
	*p = x
	return p
}

func (x ContentProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[123].Descriptor()
}

func (ContentProvider) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[123]
}

func (x ContentProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentProvider.Descriptor instead.
func (ContentProvider) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{123}
}

type PayoutProcessType int32

const (
	PayoutProcessType_NO_PAYOUT_PROCESS_TYPE PayoutProcessType = 0
	PayoutProcessType_REPROCESS              PayoutProcessType = 1
	PayoutProcessType_UPDATE                 PayoutProcessType = 2
)

// Enum value maps for PayoutProcessType.
var (
	PayoutProcessType_name = map[int32]string{
		0: "NO_PAYOUT_PROCESS_TYPE",
		1: "REPROCESS",
		2: "UPDATE",
	}
	PayoutProcessType_value = map[string]int32{
		"NO_PAYOUT_PROCESS_TYPE": 0,
		"REPROCESS":              1,
		"UPDATE":                 2,
	}
)

func (x PayoutProcessType) Enum() *PayoutProcessType {
	p := new(PayoutProcessType)
	*p = x
	return p
}

func (x PayoutProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayoutProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[124].Descriptor()
}

func (PayoutProcessType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[124]
}

func (x PayoutProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayoutProcessType.Descriptor instead.
func (PayoutProcessType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{124}
}

type JobType int32

const (
	JobType_NO_JOB_TYPE                  JobType = 0
	JobType_JOB_TYPE_RETAILER_ONBOARDING JobType = 1
	JobType_JOB_TYPE_ORDER_CREATION      JobType = 2
	JobType_JOB_TYPE_FARMER_ONBOARDING   JobType = 3
	JobType_JOB_TYPE_PRODUCT_SCAN        JobType = 4
	JobType_JOB_TYPE_SERVICE_BOOKING     JobType = 5
	JobType_JOB_TYPE_HEALTH_PACKAGE      JobType = 6
	JobType_JOB_TYPE_AWD_ONBOARDED       JobType = 7
	JobType_JOB_TYPE_DSR_ONBOARDED       JobType = 8
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "NO_JOB_TYPE",
		1: "JOB_TYPE_RETAILER_ONBOARDING",
		2: "JOB_TYPE_ORDER_CREATION",
		3: "JOB_TYPE_FARMER_ONBOARDING",
		4: "JOB_TYPE_PRODUCT_SCAN",
		5: "JOB_TYPE_SERVICE_BOOKING",
		6: "JOB_TYPE_HEALTH_PACKAGE",
		7: "JOB_TYPE_AWD_ONBOARDED",
		8: "JOB_TYPE_DSR_ONBOARDED",
	}
	JobType_value = map[string]int32{
		"NO_JOB_TYPE":                  0,
		"JOB_TYPE_RETAILER_ONBOARDING": 1,
		"JOB_TYPE_ORDER_CREATION":      2,
		"JOB_TYPE_FARMER_ONBOARDING":   3,
		"JOB_TYPE_PRODUCT_SCAN":        4,
		"JOB_TYPE_SERVICE_BOOKING":     5,
		"JOB_TYPE_HEALTH_PACKAGE":      6,
		"JOB_TYPE_AWD_ONBOARDED":       7,
		"JOB_TYPE_DSR_ONBOARDED":       8,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[125].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[125]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{125}
}

type JobStatus int32

const (
	JobStatus_NO_Job_Status        JobStatus = 0
	JobStatus_JOB_STATUS_TO_DO     JobStatus = 1
	JobStatus_JOB_STATUS_STARTED   JobStatus = 2
	JobStatus_JOB_STATUS_PARTIAL   JobStatus = 3
	JobStatus_JOB_STATUS_COMPLETED JobStatus = 4
	JobStatus_JOB_STATUS_CANCELLED JobStatus = 5
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "NO_Job_Status",
		1: "JOB_STATUS_TO_DO",
		2: "JOB_STATUS_STARTED",
		3: "JOB_STATUS_PARTIAL",
		4: "JOB_STATUS_COMPLETED",
		5: "JOB_STATUS_CANCELLED",
	}
	JobStatus_value = map[string]int32{
		"NO_Job_Status":        0,
		"JOB_STATUS_TO_DO":     1,
		"JOB_STATUS_STARTED":   2,
		"JOB_STATUS_PARTIAL":   3,
		"JOB_STATUS_COMPLETED": 4,
		"JOB_STATUS_CANCELLED": 5,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[126].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[126]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{126}
}

type PaymentStatus int32

const (
	PaymentStatus_NO_PAYMENT_STATUS PaymentStatus = 0
	PaymentStatus_PAYMENT_CREATED   PaymentStatus = 1
	PaymentStatus_PAYMENT_PAID      PaymentStatus = 2
	PaymentStatus_PAYMENT_ON_HOLD   PaymentStatus = 3
	PaymentStatus_PAYMENT_VOID      PaymentStatus = 4
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "NO_PAYMENT_STATUS",
		1: "PAYMENT_CREATED",
		2: "PAYMENT_PAID",
		3: "PAYMENT_ON_HOLD",
		4: "PAYMENT_VOID",
	}
	PaymentStatus_value = map[string]int32{
		"NO_PAYMENT_STATUS": 0,
		"PAYMENT_CREATED":   1,
		"PAYMENT_PAID":      2,
		"PAYMENT_ON_HOLD":   3,
		"PAYMENT_VOID":      4,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[127].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[127]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{127}
}

type PaymentReason int32

const (
	PaymentReason_UNKNOWN_PAYMENT_REASON        PaymentReason = 0
	PaymentReason_FARMER_ONBOARDING_PAYMENT     PaymentReason = 1
	PaymentReason_PRODUCT_SCAN_PAYMENT_PAYMENT  PaymentReason = 2
	PaymentReason_FARMER_SPRAY_BOOKING_PAYMENT  PaymentReason = 3
	PaymentReason_RETAILER_ONBOARDING_PAYMENT   PaymentReason = 4
	PaymentReason_RETAILER_FIRST_ORDER_PAYMENT  PaymentReason = 5
	PaymentReason_RETAILER_SECOND_ORDER_PAYMENT PaymentReason = 6
	PaymentReason_RETAILER_ALL_ORDER_PAYMENT    PaymentReason = 7
	PaymentReason_GENERAL_SCHEME_PAYMENT        PaymentReason = 8
)

// Enum value maps for PaymentReason.
var (
	PaymentReason_name = map[int32]string{
		0: "UNKNOWN_PAYMENT_REASON",
		1: "FARMER_ONBOARDING_PAYMENT",
		2: "PRODUCT_SCAN_PAYMENT_PAYMENT",
		3: "FARMER_SPRAY_BOOKING_PAYMENT",
		4: "RETAILER_ONBOARDING_PAYMENT",
		5: "RETAILER_FIRST_ORDER_PAYMENT",
		6: "RETAILER_SECOND_ORDER_PAYMENT",
		7: "RETAILER_ALL_ORDER_PAYMENT",
		8: "GENERAL_SCHEME_PAYMENT",
	}
	PaymentReason_value = map[string]int32{
		"UNKNOWN_PAYMENT_REASON":        0,
		"FARMER_ONBOARDING_PAYMENT":     1,
		"PRODUCT_SCAN_PAYMENT_PAYMENT":  2,
		"FARMER_SPRAY_BOOKING_PAYMENT":  3,
		"RETAILER_ONBOARDING_PAYMENT":   4,
		"RETAILER_FIRST_ORDER_PAYMENT":  5,
		"RETAILER_SECOND_ORDER_PAYMENT": 6,
		"RETAILER_ALL_ORDER_PAYMENT":    7,
		"GENERAL_SCHEME_PAYMENT":        8,
	}
)

func (x PaymentReason) Enum() *PaymentReason {
	p := new(PaymentReason)
	*p = x
	return p
}

func (x PaymentReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentReason) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[128].Descriptor()
}

func (PaymentReason) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[128]
}

func (x PaymentReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentReason.Descriptor instead.
func (PaymentReason) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{128}
}

type SchemeType int32

const (
	SchemeType_SCHEME_TYPE_UNKNOWN             SchemeType = 0
	SchemeType_SCHEME_TYPE_FIXED_PAY_SCHEME    SchemeType = 1
	SchemeType_SCHEME_TYPE_VARIABLE_PAY_SCHEME SchemeType = 2
	SchemeType_SCHEME_TYPE_RECURRING_SCHEME    SchemeType = 3
)

// Enum value maps for SchemeType.
var (
	SchemeType_name = map[int32]string{
		0: "SCHEME_TYPE_UNKNOWN",
		1: "SCHEME_TYPE_FIXED_PAY_SCHEME",
		2: "SCHEME_TYPE_VARIABLE_PAY_SCHEME",
		3: "SCHEME_TYPE_RECURRING_SCHEME",
	}
	SchemeType_value = map[string]int32{
		"SCHEME_TYPE_UNKNOWN":             0,
		"SCHEME_TYPE_FIXED_PAY_SCHEME":    1,
		"SCHEME_TYPE_VARIABLE_PAY_SCHEME": 2,
		"SCHEME_TYPE_RECURRING_SCHEME":    3,
	}
)

func (x SchemeType) Enum() *SchemeType {
	p := new(SchemeType)
	*p = x
	return p
}

func (x SchemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[129].Descriptor()
}

func (SchemeType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[129]
}

func (x SchemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemeType.Descriptor instead.
func (SchemeType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{129}
}

type SchemeWindowType int32

const (
	SchemeWindowType_SCHEME_WINDOW_TYPE_UNKNOWN SchemeWindowType = 0
	SchemeWindowType_SCHEME_WINDOW_TYPE_DAILY   SchemeWindowType = 1
	SchemeWindowType_SCHEME_WINDOW_TYPE_WEEKLY  SchemeWindowType = 2
	SchemeWindowType_SCHEME_WINDOW_TYPE_MONTHLY SchemeWindowType = 3
)

// Enum value maps for SchemeWindowType.
var (
	SchemeWindowType_name = map[int32]string{
		0: "SCHEME_WINDOW_TYPE_UNKNOWN",
		1: "SCHEME_WINDOW_TYPE_DAILY",
		2: "SCHEME_WINDOW_TYPE_WEEKLY",
		3: "SCHEME_WINDOW_TYPE_MONTHLY",
	}
	SchemeWindowType_value = map[string]int32{
		"SCHEME_WINDOW_TYPE_UNKNOWN": 0,
		"SCHEME_WINDOW_TYPE_DAILY":   1,
		"SCHEME_WINDOW_TYPE_WEEKLY":  2,
		"SCHEME_WINDOW_TYPE_MONTHLY": 3,
	}
)

func (x SchemeWindowType) Enum() *SchemeWindowType {
	p := new(SchemeWindowType)
	*p = x
	return p
}

func (x SchemeWindowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemeWindowType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[130].Descriptor()
}

func (SchemeWindowType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[130]
}

func (x SchemeWindowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemeWindowType.Descriptor instead.
func (SchemeWindowType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{130}
}

type PaymentType int32

const (
	PaymentType_PAYMENT_TYPE_UNKNOWN    PaymentType = 0
	PaymentType_PAYMENT_TYPE_FLAT       PaymentType = 1
	PaymentType_PAYMENT_TYPE_PERCENTAGE PaymentType = 2
	PaymentType_PAYMENT_TYPE_PER_UNIT   PaymentType = 3
)

// Enum value maps for PaymentType.
var (
	PaymentType_name = map[int32]string{
		0: "PAYMENT_TYPE_UNKNOWN",
		1: "PAYMENT_TYPE_FLAT",
		2: "PAYMENT_TYPE_PERCENTAGE",
		3: "PAYMENT_TYPE_PER_UNIT",
	}
	PaymentType_value = map[string]int32{
		"PAYMENT_TYPE_UNKNOWN":    0,
		"PAYMENT_TYPE_FLAT":       1,
		"PAYMENT_TYPE_PERCENTAGE": 2,
		"PAYMENT_TYPE_PER_UNIT":   3,
	}
)

func (x PaymentType) Enum() *PaymentType {
	p := new(PaymentType)
	*p = x
	return p
}

func (x PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[131].Descriptor()
}

func (PaymentType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[131]
}

func (x PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentType.Descriptor instead.
func (PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{131}
}

type PerformanceQueryType int32

const (
	PerformanceQueryType_NO_QUERY     PerformanceQueryType = 0
	PerformanceQueryType_QUERY_ATHENA PerformanceQueryType = 1
	PerformanceQueryType_QUERY_MYSQL  PerformanceQueryType = 2
	PerformanceQueryType_QUERY_PRESTO PerformanceQueryType = 3
)

// Enum value maps for PerformanceQueryType.
var (
	PerformanceQueryType_name = map[int32]string{
		0: "NO_QUERY",
		1: "QUERY_ATHENA",
		2: "QUERY_MYSQL",
		3: "QUERY_PRESTO",
	}
	PerformanceQueryType_value = map[string]int32{
		"NO_QUERY":     0,
		"QUERY_ATHENA": 1,
		"QUERY_MYSQL":  2,
		"QUERY_PRESTO": 3,
	}
)

func (x PerformanceQueryType) Enum() *PerformanceQueryType {
	p := new(PerformanceQueryType)
	*p = x
	return p
}

func (x PerformanceQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[132].Descriptor()
}

func (PerformanceQueryType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[132]
}

func (x PerformanceQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceQueryType.Descriptor instead.
func (PerformanceQueryType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{132}
}

type PerformanceQueryMappingType int32

const (
	PerformanceQueryMappingType_NO_QUERY_TYPE     PerformanceQueryMappingType = 0
	PerformanceQueryMappingType_AGGREGATED_VIEW   PerformanceQueryMappingType = 1
	PerformanceQueryMappingType_DETAILED_VIEW     PerformanceQueryMappingType = 2
	PerformanceQueryMappingType_LAST_RUN_AT_QUERY PerformanceQueryMappingType = 3
)

// Enum value maps for PerformanceQueryMappingType.
var (
	PerformanceQueryMappingType_name = map[int32]string{
		0: "NO_QUERY_TYPE",
		1: "AGGREGATED_VIEW",
		2: "DETAILED_VIEW",
		3: "LAST_RUN_AT_QUERY",
	}
	PerformanceQueryMappingType_value = map[string]int32{
		"NO_QUERY_TYPE":     0,
		"AGGREGATED_VIEW":   1,
		"DETAILED_VIEW":     2,
		"LAST_RUN_AT_QUERY": 3,
	}
)

func (x PerformanceQueryMappingType) Enum() *PerformanceQueryMappingType {
	p := new(PerformanceQueryMappingType)
	*p = x
	return p
}

func (x PerformanceQueryMappingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceQueryMappingType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[133].Descriptor()
}

func (PerformanceQueryMappingType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[133]
}

func (x PerformanceQueryMappingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceQueryMappingType.Descriptor instead.
func (PerformanceQueryMappingType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{133}
}

type PerformanceType int32

const (
	PerformanceType_NO_PERFORMANCE_TYPE                  PerformanceType = 0
	PerformanceType_PERFORMANCE_TYPE_RETAILER_ONBOARDING PerformanceType = 1
	PerformanceType_PERFORMANCE_TYPE_FIRST_ORDERS        PerformanceType = 2
	PerformanceType_PERFORMANCE_TYPE_SECOND_ORDERS       PerformanceType = 3
	PerformanceType_PERFORMANCE_TYPE_ALL_ORDERS          PerformanceType = 4
	PerformanceType_PERFORMANCE_TYPE_FARMER_ONBOARDING   PerformanceType = 5
	PerformanceType_PERFORMANCE_TYPE_PRODUCT_SCANS       PerformanceType = 6
	PerformanceType_PERFORMANCE_TYPE_ACRES_SPRAYED       PerformanceType = 7
	PerformanceType_PERFORMANCE_TYPE_HEALTH_PACKAGE      PerformanceType = 8
	PerformanceType_PERFORMANCE_TYPE_AWD_ONBOARDED       PerformanceType = 9
	PerformanceType_PERFORMANCE_TYPE_DSR_ONBOARDED       PerformanceType = 10
)

// Enum value maps for PerformanceType.
var (
	PerformanceType_name = map[int32]string{
		0:  "NO_PERFORMANCE_TYPE",
		1:  "PERFORMANCE_TYPE_RETAILER_ONBOARDING",
		2:  "PERFORMANCE_TYPE_FIRST_ORDERS",
		3:  "PERFORMANCE_TYPE_SECOND_ORDERS",
		4:  "PERFORMANCE_TYPE_ALL_ORDERS",
		5:  "PERFORMANCE_TYPE_FARMER_ONBOARDING",
		6:  "PERFORMANCE_TYPE_PRODUCT_SCANS",
		7:  "PERFORMANCE_TYPE_ACRES_SPRAYED",
		8:  "PERFORMANCE_TYPE_HEALTH_PACKAGE",
		9:  "PERFORMANCE_TYPE_AWD_ONBOARDED",
		10: "PERFORMANCE_TYPE_DSR_ONBOARDED",
	}
	PerformanceType_value = map[string]int32{
		"NO_PERFORMANCE_TYPE":                  0,
		"PERFORMANCE_TYPE_RETAILER_ONBOARDING": 1,
		"PERFORMANCE_TYPE_FIRST_ORDERS":        2,
		"PERFORMANCE_TYPE_SECOND_ORDERS":       3,
		"PERFORMANCE_TYPE_ALL_ORDERS":          4,
		"PERFORMANCE_TYPE_FARMER_ONBOARDING":   5,
		"PERFORMANCE_TYPE_PRODUCT_SCANS":       6,
		"PERFORMANCE_TYPE_ACRES_SPRAYED":       7,
		"PERFORMANCE_TYPE_HEALTH_PACKAGE":      8,
		"PERFORMANCE_TYPE_AWD_ONBOARDED":       9,
		"PERFORMANCE_TYPE_DSR_ONBOARDED":       10,
	}
)

func (x PerformanceType) Enum() *PerformanceType {
	p := new(PerformanceType)
	*p = x
	return p
}

func (x PerformanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[134].Descriptor()
}

func (PerformanceType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[134]
}

func (x PerformanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceType.Descriptor instead.
func (PerformanceType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{134}
}

type ContentDataCategory int32

const (
	ContentDataCategory_PRODUCT_USAGE      ContentDataCategory = 0
	ContentDataCategory_FARMING_TECHNIQUE  ContentDataCategory = 1
	ContentDataCategory_CROP_ADVISORY      ContentDataCategory = 2
	ContentDataCategory_CROP_SELECTION     ContentDataCategory = 3
	ContentDataCategory_AWARENESS          ContentDataCategory = 4
	ContentDataCategory_FARMER_TESTIMONIAL ContentDataCategory = 5
	ContentDataCategory_FARMING_MACHINERY  ContentDataCategory = 6
	ContentDataCategory_CARBON_PROGRAM     ContentDataCategory = 7
	ContentDataCategory_SELFIE_CONTEST     ContentDataCategory = 8
	ContentDataCategory_FARM_DIARY         ContentDataCategory = 9
	ContentDataCategory_OTHERS_CATEGORY    ContentDataCategory = 10
)

// Enum value maps for ContentDataCategory.
var (
	ContentDataCategory_name = map[int32]string{
		0:  "PRODUCT_USAGE",
		1:  "FARMING_TECHNIQUE",
		2:  "CROP_ADVISORY",
		3:  "CROP_SELECTION",
		4:  "AWARENESS",
		5:  "FARMER_TESTIMONIAL",
		6:  "FARMING_MACHINERY",
		7:  "CARBON_PROGRAM",
		8:  "SELFIE_CONTEST",
		9:  "FARM_DIARY",
		10: "OTHERS_CATEGORY",
	}
	ContentDataCategory_value = map[string]int32{
		"PRODUCT_USAGE":      0,
		"FARMING_TECHNIQUE":  1,
		"CROP_ADVISORY":      2,
		"CROP_SELECTION":     3,
		"AWARENESS":          4,
		"FARMER_TESTIMONIAL": 5,
		"FARMING_MACHINERY":  6,
		"CARBON_PROGRAM":     7,
		"SELFIE_CONTEST":     8,
		"FARM_DIARY":         9,
		"OTHERS_CATEGORY":    10,
	}
)

func (x ContentDataCategory) Enum() *ContentDataCategory {
	p := new(ContentDataCategory)
	*p = x
	return p
}

func (x ContentDataCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentDataCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[135].Descriptor()
}

func (ContentDataCategory) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[135]
}

func (x ContentDataCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentDataCategory.Descriptor instead.
func (ContentDataCategory) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{135}
}

type IOTBookingAction int32

const (
	IOTBookingAction_NO_ACTION IOTBookingAction = 0
	IOTBookingAction_START     IOTBookingAction = 1
	IOTBookingAction_STOP      IOTBookingAction = 2
	IOTBookingAction_PAUSE     IOTBookingAction = 3
	IOTBookingAction_RESUME    IOTBookingAction = 4
)

// Enum value maps for IOTBookingAction.
var (
	IOTBookingAction_name = map[int32]string{
		0: "NO_ACTION",
		1: "START",
		2: "STOP",
		3: "PAUSE",
		4: "RESUME",
	}
	IOTBookingAction_value = map[string]int32{
		"NO_ACTION": 0,
		"START":     1,
		"STOP":      2,
		"PAUSE":     3,
		"RESUME":    4,
	}
)

func (x IOTBookingAction) Enum() *IOTBookingAction {
	p := new(IOTBookingAction)
	*p = x
	return p
}

func (x IOTBookingAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOTBookingAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[136].Descriptor()
}

func (IOTBookingAction) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[136]
}

func (x IOTBookingAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IOTBookingAction.Descriptor instead.
func (IOTBookingAction) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{136}
}

type TargetUserWorkflowQueryMappingType int32

const (
	TargetUserWorkflowQueryMappingType_NO_TARGET_USERS_QUERY        TargetUserWorkflowQueryMappingType = 0
	TargetUserWorkflowQueryMappingType_TARGET_USERS_AGGREGATED_VIEW TargetUserWorkflowQueryMappingType = 1
	TargetUserWorkflowQueryMappingType_TARGET_USERS_LIST_VIEW       TargetUserWorkflowQueryMappingType = 2
)

// Enum value maps for TargetUserWorkflowQueryMappingType.
var (
	TargetUserWorkflowQueryMappingType_name = map[int32]string{
		0: "NO_TARGET_USERS_QUERY",
		1: "TARGET_USERS_AGGREGATED_VIEW",
		2: "TARGET_USERS_LIST_VIEW",
	}
	TargetUserWorkflowQueryMappingType_value = map[string]int32{
		"NO_TARGET_USERS_QUERY":        0,
		"TARGET_USERS_AGGREGATED_VIEW": 1,
		"TARGET_USERS_LIST_VIEW":       2,
	}
)

func (x TargetUserWorkflowQueryMappingType) Enum() *TargetUserWorkflowQueryMappingType {
	p := new(TargetUserWorkflowQueryMappingType)
	*p = x
	return p
}

func (x TargetUserWorkflowQueryMappingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetUserWorkflowQueryMappingType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_enums_proto_enumTypes[137].Descriptor()
}

func (TargetUserWorkflowQueryMappingType) Type() protoreflect.EnumType {
	return &file_Common_enums_proto_enumTypes[137]
}

func (x TargetUserWorkflowQueryMappingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetUserWorkflowQueryMappingType.Descriptor instead.
func (TargetUserWorkflowQueryMappingType) EnumDescriptor() ([]byte, []int) {
	return file_Common_enums_proto_rawDescGZIP(), []int{137}
}

var File_Common_enums_proto protoreflect.FileDescriptor

var file_Common_enums_proto_rawDesc = []byte{
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x9e,
	0x03, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x52, 0x43, 0x48, 0x49, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x4e, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x54, 0x41, 0x54, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x5f,
	0x48, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x42, 0x5f, 0x50, 0x4c,
	0x4f, 0x55, 0x47, 0x48, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x28,
	0x0a, 0x24, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x42, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x2a,
	0xac, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x50, 0x52, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x52,
	0x56, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x49,
	0x4c, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x49, 0x4c, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x4e, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x54,
	0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x54, 0x41, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x5f, 0x48,
	0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x42, 0x5f, 0x50, 0x4c, 0x4f,
	0x55, 0x47, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x28, 0x0a,
	0x24, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x42, 0x49,
	0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x10, 0x2a, 0xe2,
	0x03, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x49, 0x4c, 0x5f, 0x53,
	0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x4f, 0x49,
	0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x52, 0x41,
	0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x55, 0x53,
	0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x45,
	0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x54, 0x41, 0x54,
	0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x5f, 0x48, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f,
	0x54, 0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x42, 0x5f, 0x50, 0x4c, 0x4f, 0x55, 0x47, 0x48,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49,
	0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x45,
	0x44, 0x5f, 0x44, 0x52, 0x49, 0x4c, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x12, 0x2a, 0x38, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x10, 0x01, 0x2a, 0x42, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x2a, 0x3d, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x53, 0x10, 0x02,
	0x2a, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x4b, 0x55, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x00, 0x2a, 0x25, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x4b, 0x55, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x2a, 0x67, 0x0a, 0x09, 0x56, 0x69, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x4f, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x52, 0x4d,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x45, 0x52, 0x42, 0x49, 0x43, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x45, 0x53, 0x54, 0x49, 0x43, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xa3, 0x07, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x06, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x50, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x50, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x16, 0x12,
	0x2c, 0x0a, 0x28, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x17, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x1b, 0x2a, 0xed,
	0x05, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x52, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x49, 0x43, 0x45, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x53, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x44, 0x41, 0x52, 0x53, 0x48, 0x5f, 0x4b, 0x52, 0x49, 0x53, 0x48, 0x49, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x2a, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x49, 0x41, 0x4e, 0x10, 0x0f, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x41, 0x42, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x49, 0x41, 0x4e, 0x10, 0x13, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41,
	0x4b, 0x54, 0x49, 0x4d, 0x41, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x66, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x52, 0x52, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x68, 0x12, 0x1b, 0x0a, 0x17, 0x5a,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x69, 0x12, 0x17, 0x0a, 0x13, 0x5a, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10,
	0x6a, 0x12, 0x19, 0x0a, 0x15, 0x5a, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x6b, 0x12, 0x2a, 0x0a, 0x26,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x10, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x6d, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45,
	0x52, 0x10, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x4d, 0x50,
	0x4c, 0x4f, 0x59, 0x45, 0x45, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x41,
	0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x42,
	0x55, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x71, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54,
	0x4e, 0x45, 0x52, 0x10, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x41, 0x52, 0x54,
	0x5f, 0x46, 0x33, 0x5f, 0x46, 0x4f, 0x10, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x4d,
	0x41, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x74, 0x22, 0x04, 0x08, 0x0b,
	0x10, 0x0b, 0x22, 0x04, 0x08, 0x0c, 0x10, 0x0c, 0x22, 0x04, 0x08, 0x0d, 0x10, 0x0d, 0x2a, 0xa8,
	0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x52, 0x4d, 0x45,
	0x52, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4b, 0x43,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x86, 0x02, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x50,
	0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x43,
	0x48, 0x4e, 0x49, 0x43, 0x49, 0x41, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4b, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x59, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49,
	0x4e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x44,
	0x4d, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x10, 0x0a, 0x2a, 0xc1, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f,
	0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4d, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f,
	0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x9f, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xf3, 0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x32, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x3c, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x50, 0x12, 0x13, 0x0a,
	0x0e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x4b, 0x10, 0xdc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xfb, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xfc,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xfd, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0xfe, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0xac, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0xc0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0xa4, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0xa5, 0x03,
	0x12, 0x0c, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0xa6, 0x03, 0x2a, 0x8f,
	0x0e, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x11, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x53, 0x54, 0x49, 0x43, 0x49,
	0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x42, 0x49, 0x43, 0x49, 0x44, 0x45,
	0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x15,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x45, 0x44, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x1a, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x24,
	0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x1c, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x26, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x32, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x45, 0x44, 0x10, 0x27, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x28, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x2a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x2b, 0x12, 0x29, 0x0a, 0x25, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x2c, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x2d, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x47, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x48, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x49, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x4a,
	0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x10, 0x4b, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x51, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x52,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x54, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5b, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x65,
	0x2a, 0xfb, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4f, 0x4e,
	0x5f, 0x57, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x2a, 0xe2,
	0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4b, 0x43, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e,
	0x5f, 0x57, 0x41, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x0c, 0x2a, 0xa7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x4b, 0x55, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55,
	0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x35, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x4b, 0x55, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55,
	0x50, 0x4c, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0x45, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x53, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x55, 0x44, 0x10, 0x04, 0x2a, 0x6e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc8, 0x01, 0x12,
	0x0e, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x90, 0x03, 0x12,
	0x0e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x94, 0x03, 0x12,
	0x1a, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x9c, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03,
	0x2a, 0x88, 0x0c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa0, 0x1f, 0x12,
	0x1b, 0x0a, 0x16, 0x44, 0x42, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa1, 0x1f, 0x12, 0x16, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x88, 0x27, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf0,
	0x2e, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xd8, 0x36, 0x12, 0x16, 0x0a, 0x11,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0xd9, 0x36, 0x12, 0x14, 0x0a, 0x0f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xc0, 0x3e, 0x12, 0x1d, 0x0a, 0x17, 0x44, 0x42,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd0, 0x86, 0x03, 0x12, 0x1d, 0x0a, 0x17, 0x44, 0x42, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xd1, 0x86, 0x03, 0x12, 0x25, 0x0a, 0x1f, 0x44, 0x42, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd2, 0x86, 0x03, 0x12,
	0x1d, 0x0a, 0x17, 0x44, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb4, 0x87, 0x03, 0x12, 0x1d,
	0x0a, 0x17, 0x44, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb5, 0x87, 0x03, 0x12, 0x25, 0x0a,
	0x1f, 0x44, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xb6, 0x87, 0x03, 0x12, 0x1a, 0x0a, 0x14, 0x44, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x98, 0x88, 0x03,
	0x12, 0x1a, 0x0a, 0x14, 0x44, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x99, 0x88, 0x03, 0x12, 0x22, 0x0a, 0x1c,
	0x44, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9a, 0x88, 0x03,
	0x12, 0x21, 0x0a, 0x1b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x80, 0x89, 0x03, 0x12, 0x1f, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0xe1, 0x89, 0x03, 0x12, 0x15, 0x0a, 0x0f, 0x53, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc5, 0x8a, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x42,
	0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa9, 0x8b,
	0x03, 0x12, 0x15, 0x0a, 0x0f, 0x41, 0x46, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x8d, 0x8c, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf1, 0x8c, 0x03, 0x12, 0x15,
	0x0a, 0x0f, 0x4c, 0x4d, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0xd5, 0x8d, 0x03, 0x12, 0x1e, 0x0a, 0x18, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0xb9, 0x8e, 0x03, 0x12, 0x1c, 0x0a, 0x16, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x9d, 0x8f, 0x03, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x81, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x1d, 0x42, 0x4f, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x82, 0x90, 0x03, 0x12, 0x19, 0x0a, 0x13,
	0x50, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0xe0, 0xd4, 0x03, 0x12, 0x21, 0x0a, 0x1b, 0x50, 0x54, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xe1, 0xd4, 0x03, 0x12, 0x1a, 0x0a, 0x14, 0x43, 0x41,
	0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xf0, 0xa2, 0x04, 0x12, 0x19, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf1, 0xa2,
	0x04, 0x12, 0x29, 0x0a, 0x23, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x80, 0xf1, 0x04, 0x12, 0x24, 0x0a, 0x1e,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa0,
	0x8d, 0x06, 0x12, 0x22, 0x0a, 0x1c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0xc1, 0x84, 0x3d, 0x12, 0x22, 0x0a, 0x1c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc2, 0x84, 0x3d, 0x12, 0x19, 0x0a, 0x13, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0xc3, 0x84, 0x3d, 0x12, 0x1a, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x10, 0xc4, 0x84,
	0x3d, 0x12, 0x20, 0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10,
	0xc5, 0x84, 0x3d, 0x12, 0x1b, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc6, 0x84, 0x3d,
	0x12, 0x1b, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc7, 0x84, 0x3d, 0x12, 0x1d, 0x0a,
	0x17, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa8, 0x8d, 0x06, 0x12, 0x1b, 0x0a, 0x15,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa9, 0x8d, 0x06, 0x12, 0x20, 0x0a, 0x1a, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xca, 0x84, 0x3d, 0x12, 0x23, 0x0a, 0x1d, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xcb, 0x84, 0x3d,
	0x12, 0x23, 0x0a, 0x1d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4e, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0xcc, 0x84, 0x3d, 0x12, 0x23, 0x0a, 0x1d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe1, 0x91, 0x43, 0x12, 0x20, 0x0a, 0x1a, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0xe2, 0x91, 0x43, 0x12, 0x2d, 0x0a, 0x27,
	0x43, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xe3, 0x91, 0x43, 0x2a, 0x49, 0x0a, 0x12, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x41, 0x4c, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x4d, 0x4d,
	0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x45, 0x54, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x56, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x1e, 0x2a, 0xfe, 0x01, 0x0a, 0x0b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x14,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x51, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x1e, 0x2a, 0x29, 0x0a, 0x0e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x2a, 0xe2, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0a,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0b, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x4d, 0x53, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0c, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x2a, 0x23, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x2a,
	0x52, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x19, 0x53, 0x4b, 0x55, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x02, 0x2a, 0x5f,
	0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x04, 0x2a,
	0x9b, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x05, 0x2a, 0xee, 0x03,
	0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f,
	0x53, 0x50, 0x52, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x4c, 0x4c, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x43, 0x48, 0x49, 0x44, 0x5f, 0x53,
	0x50, 0x52, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41,
	0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x4e, 0x55, 0x54, 0x5f, 0x48, 0x41,
	0x52, 0x56, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45,
	0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x54, 0x41, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49,
	0x53, 0x43, 0x5f, 0x48, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x42, 0x5f, 0x50, 0x4c, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41,
	0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x48,
	0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x49,
	0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0f, 0x2a, 0x7f,
	0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x52, 0x4d, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x49, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x4c,
	0x4c, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a,
	0x5c, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xe3, 0x0b,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x0e,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x13, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x4f, 0x54,
	0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x16, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x20,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x21, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x22, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x26, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x27, 0x12, 0x2b, 0x0a, 0x27, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x28, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x29, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x2a, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x2b, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x2c, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x2d,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x2f,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x10, 0x31, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x33,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x35, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x65, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x66, 0x22, 0x04, 0x08,
	0x67, 0x10, 0x7d, 0x2a, 0x5e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x4d, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50,
	0x50, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x4d, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xb0, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d,
	0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x2a, 0x86, 0x02, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x42, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x0c, 0x2a, 0x83, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0xc8,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10,
	0xcc, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x90, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x94, 0x03, 0x12, 0x09,
	0x0a, 0x04, 0x47, 0x4f, 0x4e, 0x45, 0x10, 0x9a, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x80, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x99, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xad, 0x03,
	0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0xe8, 0x07, 0x12, 0x1d, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0xe9, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xea, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0xeb, 0x07, 0x12,
	0x31, 0x0a, 0x2c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x51,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xec, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd1, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x50, 0x10, 0xd2, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x4f, 0x54, 0x50,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xd3, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0xd4, 0x0f, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd5, 0x0f, 0x2a, 0x37, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0e, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x72, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x4d,
	0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52,
	0x56, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x33, 0x10, 0x01, 0x2a, 0x39, 0x0a, 0x0c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x45, 0x41,
	0x52, 0x53, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x28, 0x0a, 0x09, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x42, 0x43, 0x48, 0x10, 0x01, 0x2a, 0x92, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x49, 0x5f, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x55, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x41,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x41, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x41,
	0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x45, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x4e,
	0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x52, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4c,
	0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x4e, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x44,
	0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x55, 0x10, 0x0d, 0x2a, 0xa4, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x06, 0x2a, 0xb9, 0x06, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x55, 0x43, 0x54,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x53, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x11, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c,
	0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x16, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x18, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x19, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x4f, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x1e, 0x2a, 0xac, 0x01,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x46, 0x5f, 0x53, 0x4d, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x49, 0x4d, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x46, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x49, 0x41,
	0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x46, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x46, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x46, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52,
	0x5f, 0x49, 0x4f, 0x53, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x46, 0x5f, 0x52, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x46, 0x53, 0x5f, 0x43,
	0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x2a, 0x30, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x2a, 0x41,
	0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0x40, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x73, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x53, 0x43, 0x48, 0x43, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x5b, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x06, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x22, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x45, 0x48, 0x53, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49,
	0x4c, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x04, 0x2a, 0x66, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x4e, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x41, 0x44, 0x48, 0x41, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x49, 0x56, 0x49,
	0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x51, 0x55, 0x45, 0x10, 0x04, 0x2a,
	0x5d, 0x0a, 0x18, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x80,
	0x01, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57,
	0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x4c, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x4c,
	0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10,
	0x06, 0x2a, 0x3e, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10,
	0x01, 0x2a, 0x24, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x00, 0x2a, 0x9b, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x49, 0x4e, 0x44, 0x49, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x55, 0x4a, 0x41, 0x52, 0x41, 0x54, 0x49, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x55, 0x4e, 0x4a, 0x41, 0x42, 0x49, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x41, 0x4e, 0x4e,
	0x41, 0x44, 0x41, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x4d, 0x49, 0x4c, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4c, 0x55, 0x47, 0x55, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x41, 0x4c, 0x41, 0x59, 0x41, 0x4c, 0x41, 0x4d, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x45, 0x4e, 0x47, 0x41, 0x4c, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x52, 0x41,
	0x54, 0x48, 0x49, 0x10, 0x0a, 0x2a, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x49, 0x41, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x55, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x41, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x14, 0x50, 0x75,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x2a, 0x35, 0x0a,
	0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0f, 0x44, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x44, 0x41,
	0x59, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0x7b, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54, 0x55,
	0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59,
	0x10, 0x07, 0x2a, 0x84, 0x01, 0x0a, 0x13, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f,
	0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x2a, 0xa7, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0x53, 0x0a, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x54, 0x52,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x70,
	0x4c, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x43,
	0x52, 0x4f, 0x50, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x52, 0x52, 0x49, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x52, 0x52, 0x49, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0xb2, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x1d, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x45, 0x45, 0x46, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x4c, 0x4f, 0x54,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x42, 0x52,
	0x4f, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x49, 0x43, 0x4b,
	0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41,
	0x49, 0x52, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x45, 0x45, 0x50, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49,
	0x5a, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xb7, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4c, 0x4c, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x43, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x45, 0x52, 0x54, 0x49,
	0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x5f, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x54, 0x49,
	0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x4e, 0x5f, 0x4e, 0x5f, 0x46, 0x45, 0x52,
	0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4e,
	0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4e, 0x5f, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x54,
	0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x46, 0x55,
	0x45, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x08, 0x2a,
	0x49, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x54, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a, 0x0b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x43,
	0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50,
	0x52, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x4e, 0x44, 0x49, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x2a, 0x61, 0x0a, 0x0c, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xe7,
	0x01, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x43, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x98, 0x02, 0x0a, 0x0c, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x07, 0x2a, 0x25, 0x0a, 0x11, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x2a, 0x90, 0x03, 0x0a, 0x1f, 0x45,
	0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x41, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x54, 0x45, 0x48, 0x53, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x4c, 0x4c, 0x41,
	0x47, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x47, 0x4d, 0x56, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x10, 0x0d, 0x2a, 0x4f, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x4d, 0x50, 0x34, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x48,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43,
	0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x06, 0x2a,
	0x97, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x42, 0x57, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x2a, 0x2d, 0x0a, 0x06, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x46, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x45, 0x45, 0x44, 0x48, 0x4f, 0x50, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x0f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x08, 0x44, 0x50,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x50, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x45, 0x56,
	0x45, 0x52, 0x54, 0x41, 0x50, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x13,
	0x43, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x52,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4c, 0x41, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x43, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x43, 0x5f, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x43, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x43,
	0x5f, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x7a, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0xcf, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x31, 0x35, 0x5f, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x53, 0x10, 0x06, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55,
	0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x57, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x4e, 0x55,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x05, 0x2a, 0x51, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0xa3, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x49, 0x4c, 0x5f,
	0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x54,
	0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0xb4, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x50, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57, 0x44, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57, 0x44, 0x5f, 0x44, 0x52,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x53, 0x52, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x31, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x53, 0x52, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57, 0x44, 0x5f, 0x44, 0x52, 0x59,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x33, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57,
	0x44, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x34, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x53, 0x52, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x59, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x53, 0x41, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x49, 0x4c,
	0x5f, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0b,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x53,
	0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x2a, 0x49, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x43, 0x4d, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x2a, 0x60, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x55, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x10, 0x05, 0x2a, 0x58, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x43, 0x41,
	0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54, 0x48, 0x45, 0x4e, 0x41, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x13,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f,
	0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x0c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x53,
	0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x11, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x45, 0x4c,
	0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x44, 0x44, 0x59, 0x5f, 0x48,
	0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x41,
	0x50, 0x50, 0x59, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x55, 0x42,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x14, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x4f, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x01, 0x2a, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x4e,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x04, 0x2a, 0x69, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x06, 0x2a, 0x6e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x4f,
	0x42, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x2a, 0x87, 0x02, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4a,
	0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x57, 0x44, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x53, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x98,
	0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x5f, 0x4a, 0x6f, 0x62, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x74, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x4f, 0x49, 0x44, 0x10, 0x04, 0x2a,
	0xb0, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x08, 0x2a, 0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x45, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x2a, 0x59, 0x0a,
	0x14, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x48,
	0x45, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x59, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x41,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x2a, 0x99, 0x03, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f,
<<<<<<< HEAD
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41,
	0x4e, 0x53, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x50, 0x52, 0x41, 0x59, 0x45, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x57, 0x44, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x52, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xf1, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x43, 0x48,
	0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x4f, 0x50, 0x5f,
	0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x4f, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x57, 0x41, 0x52, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x4f, 0x4e,
	0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x44, 0x49, 0x41,
	0x52, 0x59, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x0a, 0x2a, 0x4d, 0x0a, 0x10, 0x49, 0x4f, 0x54,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x7d, 0x0a, 0x22, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x42, 0x58, 0x0a, 0x28, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa0, 0x01,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
=======
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x57, 0x44, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x52, 0x5f, 0x4f, 0x4e, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xf1, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x45, 0x43, 0x48, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52,
	0x4f, 0x50, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x57, 0x41, 0x52, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x52, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4d, 0x4f, 0x4e, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x44, 0x49, 0x41, 0x52, 0x59, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x0a, 0x2a, 0x4d, 0x0a, 0x10,
	0x49, 0x4f, 0x54, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x7d, 0x0a, 0x22, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x42, 0x58, 0x0a, 0x28, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65,
	0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0xa0, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
>>>>>>> master
}

var (
	file_Common_enums_proto_rawDescOnce sync.Once
	file_Common_enums_proto_rawDescData = file_Common_enums_proto_rawDesc
)

func file_Common_enums_proto_rawDescGZIP() []byte {
	file_Common_enums_proto_rawDescOnce.Do(func() {
		file_Common_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_enums_proto_rawDescData)
	})
	return file_Common_enums_proto_rawDescData
}

var file_Common_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 138)
var file_Common_enums_proto_goTypes = []interface{}{
	(EventType)(0),                          // 0: farm.nurture.core.contracts.common.EventType
	(BookingType)(0),                        // 1: farm.nurture.core.contracts.common.BookingType
	(ServiceType)(0),                        // 2: farm.nurture.core.contracts.common.ServiceType
	(WorkType)(0),                           // 3: farm.nurture.core.contracts.common.WorkType
	(WorkClass)(0),                          // 4: farm.nurture.core.contracts.common.WorkClass
	(ServiceClass)(0),                       // 5: farm.nurture.core.contracts.common.ServiceClass
	(UnitType)(0),                           // 6: farm.nurture.core.contracts.common.UnitType
	(ProductSKUClass)(0),                    // 7: farm.nurture.core.contracts.common.ProductSKUClass
	(ProductSKUType)(0),                     // 8: farm.nurture.core.contracts.common.ProductSKUType
	(VisitType)(0),                          // 9: farm.nurture.core.contracts.common.VisitType
	(EventReason)(0),                        // 10: farm.nurture.core.contracts.common.EventReason
	(EventUpdateType)(0),                    // 11: farm.nurture.core.contracts.common.EventUpdateType
	(ActorType)(0),                          // 12: farm.nurture.core.contracts.common.ActorType
	(BookingSource)(0),                      // 13: farm.nurture.core.contracts.common.BookingSource
	(ClientType)(0),                         // 14: farm.nurture.core.contracts.common.ClientType
	(BookingStatusReason)(0),                // 15: farm.nurture.core.contracts.common.BookingStatusReason
	(BookingStatus)(0),                      // 16: farm.nurture.core.contracts.common.BookingStatus
	(WorkflowStatus)(0),                     // 17: farm.nurture.core.contracts.common.WorkflowStatus
	(WorkflowStatusReason)(0),               // 18: farm.nurture.core.contracts.common.WorkflowStatusReason
	(ActorAllotmentStatus)(0),               // 19: farm.nurture.core.contracts.common.ActorAllotmentStatus
	(ActorAllotmentStatusReason)(0),         // 20: farm.nurture.core.contracts.common.ActorAllotmentStatusReason
	(ProductSKUPurchaseChannel)(0),          // 21: farm.nurture.core.contracts.common.ProductSKUPurchaseChannel
	(ProductSKUDomain)(0),                   // 22: farm.nurture.core.contracts.common.ProductSKUDomain
	(ProductAttachmentStatus)(0),            // 23: farm.nurture.core.contracts.common.ProductAttachmentStatus
	(Currency)(0),                           // 24: farm.nurture.core.contracts.common.Currency
	(TaskStatus)(0),                         // 25: farm.nurture.core.contracts.common.TaskStatus
	(RequestStatus)(0),                      // 26: farm.nurture.core.contracts.common.RequestStatus
	(RequestStatusReason)(0),                // 27: farm.nurture.core.contracts.common.RequestStatusReason
	(EventReferenceType)(0),                 // 28: farm.nurture.core.contracts.common.EventReferenceType
	(DebugLevel)(0),                         // 29: farm.nurture.core.contracts.common.DebugLevel
	(TriggerType)(0),                        // 30: farm.nurture.core.contracts.common.TriggerType
	(TriggerSubType)(0),                     // 31: farm.nurture.core.contracts.common.TriggerSubType
	(TaskType)(0),                           // 32: farm.nurture.core.contracts.common.TaskType
	(TaskSubType)(0),                        // 33: farm.nurture.core.contracts.common.TaskSubType
	(ActorInServiceStatus)(0),               // 34: farm.nurture.core.contracts.common.ActorInServiceStatus
	(SKUProductInServiceStatus)(0),          // 35: farm.nurture.core.contracts.common.SKUProductInServiceStatus
	(TaskOperation)(0),                      // 36: farm.nurture.core.contracts.common.TaskOperation
	(TimeSlotType)(0),                       // 37: farm.nurture.core.contracts.common.TimeSlotType
	(ServiceAreaNamespace)(0),               // 38: farm.nurture.core.contracts.common.ServiceAreaNamespace
	(LocationType)(0),                       // 39: farm.nurture.core.contracts.common.LocationType
	(BookingAction)(0),                      // 40: farm.nurture.core.contracts.common.BookingAction
	(ServiceAction)(0),                      // 41: farm.nurture.core.contracts.common.ServiceAction
	(CommunicationChannel)(0),               // 42: farm.nurture.core.contracts.common.CommunicationChannel
	(CommunicationStatus)(0),                // 43: farm.nurture.core.contracts.common.CommunicationStatus
	(CommunicationFailureCause)(0),          // 44: farm.nurture.core.contracts.common.CommunicationFailureCause
	(ResponseStatus)(0),                     // 45: farm.nurture.core.contracts.common.ResponseStatus
	(ResponseStatusCode)(0),                 // 46: farm.nurture.core.contracts.common.ResponseStatusCode
	(Status)(0),                             // 47: farm.nurture.core.contracts.common.Status
	(FarmCropStatus)(0),                     // 48: farm.nurture.core.contracts.common.FarmCropStatus
	(MediaProvider)(0),                      // 49: farm.nurture.core.contracts.common.MediaProvider
	(DurationUnit)(0),                       // 50: farm.nurture.core.contracts.common.DurationUnit
	(DurationType)(0),                       // 51: farm.nurture.core.contracts.common.DurationType
	(ScaleType)(0),                          // 52: farm.nurture.core.contracts.common.ScaleType
	(LanguageCode)(0),                       // 53: farm.nurture.core.contracts.common.LanguageCode
	(RewardType)(0),                         // 54: farm.nurture.core.contracts.common.RewardType
	(UserActionType)(0),                     // 55: farm.nurture.core.contracts.common.UserActionType
	(AppID)(0),                              // 56: farm.nurture.core.contracts.common.AppID
	(AppType)(0),                            // 57: farm.nurture.core.contracts.common.AppType
	(HandoverType)(0),                       // 58: farm.nurture.core.contracts.common.HandoverType
	(HandoverStatus)(0),                     // 59: farm.nurture.core.contracts.common.HandoverStatus
	(MachineEventAction)(0),                 // 60: farm.nurture.core.contracts.common.MachineEventAction
	(ScheduleType)(0),                       // 61: farm.nurture.core.contracts.common.ScheduleType
	(UserStatus)(0),                         // 62: farm.nurture.core.contracts.common.UserStatus
	(Gender)(0),                             // 63: farm.nurture.core.contracts.common.Gender
	(AddressType)(0),                        // 64: farm.nurture.core.contracts.common.AddressType
	(GeographyType)(0),                      // 65: farm.nurture.core.contracts.common.GeographyType
	(DocumentType)(0),                       // 66: farm.nurture.core.contracts.common.DocumentType
	(BookingEligibilityStatus)(0),           // 67: farm.nurture.core.contracts.common.BookingEligibilityStatus
	(BookingScheduleType)(0),                // 68: farm.nurture.core.contracts.common.BookingScheduleType
	(BookingNameSpace)(0),                   // 69: farm.nurture.core.contracts.common.BookingNameSpace
	(BookingClass)(0),                       // 70: farm.nurture.core.contracts.common.BookingClass
	(Language)(0),                           // 71: farm.nurture.core.contracts.common.Language
	(Country)(0),                            // 72: farm.nurture.core.contracts.common.Country
	(PushNotificationType)(0),               // 73: farm.nurture.core.contracts.common.PushNotificationType
	(InfoType)(0),                           // 74: farm.nurture.core.contracts.common.InfoType
	(DayDurationType)(0),                    // 75: farm.nurture.core.contracts.common.DayDurationType
	(DayOfWeek)(0),                          // 76: farm.nurture.core.contracts.common.DayOfWeek
	(WeatherForecastType)(0),                // 77: farm.nurture.core.contracts.common.WeatherForecastType
	(CommunicationState)(0),                 // 78: farm.nurture.core.contracts.common.CommunicationState
	(NutrientRating)(0),                     // 79: farm.nurture.core.contracts.common.NutrientRating
	(CropLandType)(0),                       // 80: farm.nurture.core.contracts.common.CropLandType
	(SynFertilizerReplacement)(0),           // 81: farm.nurture.core.contracts.common.SynFertilizerReplacement
	(ActivityType)(0),                       // 82: farm.nurture.core.contracts.common.ActivityType
	(TemplateContentType)(0),                // 83: farm.nurture.core.contracts.common.TemplateContentType
	(ResponseOrderType)(0),                  // 84: farm.nurture.core.contracts.common.ResponseOrderType
	(SecretType)(0),                         // 85: farm.nurture.core.contracts.common.SecretType
	(FeatureName)(0),                        // 86: farm.nurture.core.contracts.common.FeatureName
	(OfferKeyName)(0),                       // 87: farm.nurture.core.contracts.common.OfferKeyName
	(OfferServiceKey)(0),                    // 88: farm.nurture.core.contracts.common.OfferServiceKey
	(OfferMetaKey)(0),                       // 89: farm.nurture.core.contracts.common.OfferMetaKey
	(EngagementKeyName)(0),                  // 90: farm.nurture.core.contracts.common.EngagementKeyName
	(EngagementServiceUserSegmentKey)(0),    // 91: farm.nurture.core.contracts.common.EngagementServiceUserSegmentKey
	(ContentMimeType)(0),                    // 92: farm.nurture.core.contracts.common.ContentMimeType
	(UserContentStatus)(0),                  // 93: farm.nurture.core.contracts.common.UserContentStatus
	(QuestionType)(0),                       // 94: farm.nurture.core.contracts.common.QuestionType
	(ComparisonCheckType)(0),                // 95: farm.nurture.core.contracts.common.ComparisonCheckType
	(Tenant)(0),                             // 96: farm.nurture.core.contracts.common.Tenant
	(MediaType)(0),                          // 97: farm.nurture.core.contracts.common.MediaType
	(MediaAccessType)(0),                    // 98: farm.nurture.core.contracts.common.MediaAccessType
	(DPSource)(0),                           // 99: farm.nurture.core.contracts.common.DPSource
	(EventSubType)(0),                       // 100: farm.nurture.core.contracts.common.EventSubType
	(CultivationPractice)(0),                // 101: farm.nurture.core.contracts.common.CultivationPractice
	(PracticeChangeType)(0),                 // 102: farm.nurture.core.contracts.common.PracticeChangeType
	(ApprovalStatus)(0),                     // 103: farm.nurture.core.contracts.common.ApprovalStatus
	(ApprovalStatusReason)(0),               // 104: farm.nurture.core.contracts.common.ApprovalStatusReason
	(ProgramType)(0),                        // 105: farm.nurture.core.contracts.common.ProgramType
	(ProgramStatus)(0),                      // 106: farm.nurture.core.contracts.common.ProgramStatus
	(EventName)(0),                          // 107: farm.nurture.core.contracts.common.EventName
	(ProgramPageEventType)(0),               // 108: farm.nurture.core.contracts.common.ProgramPageEventType
	(EventStatus)(0),                        // 109: farm.nurture.core.contracts.common.EventStatus
	(ContactType)(0),                        // 110: farm.nurture.core.contracts.common.ContactType
	(CampaignStatus)(0),                     // 111: farm.nurture.core.contracts.common.CampaignStatus
	(NameSpace)(0),                          // 112: farm.nurture.core.contracts.common.NameSpace
	(CampaignQueryType)(0),                  // 113: farm.nurture.core.contracts.common.CampaignQueryType
	(ReferralBookingType)(0),                // 114: farm.nurture.core.contracts.common.ReferralBookingType
	(ReferralType)(0),                       // 115: farm.nurture.core.contracts.common.ReferralType
	(FormStatus)(0),                         // 116: farm.nurture.core.contracts.common.FormStatus
	(EligibilityStatus)(0),                  // 117: farm.nurture.core.contracts.common.EligibilityStatus
	(ServicesName)(0),                       // 118: farm.nurture.core.contracts.common.ServicesName
	(CampaignScheduleType)(0),               // 119: farm.nurture.core.contracts.common.CampaignScheduleType
	(ResourceType)(0),                       // 120: farm.nurture.core.contracts.common.ResourceType
	(ResourceAccessType)(0),                 // 121: farm.nurture.core.contracts.common.ResourceAccessType
	(ContentCategory)(0),                    // 122: farm.nurture.core.contracts.common.ContentCategory
	(ContentProvider)(0),                    // 123: farm.nurture.core.contracts.common.ContentProvider
	(PayoutProcessType)(0),                  // 124: farm.nurture.core.contracts.common.PayoutProcessType
	(JobType)(0),                            // 125: farm.nurture.core.contracts.common.JobType
	(JobStatus)(0),                          // 126: farm.nurture.core.contracts.common.JobStatus
	(PaymentStatus)(0),                      // 127: farm.nurture.core.contracts.common.PaymentStatus
	(PaymentReason)(0),                      // 128: farm.nurture.core.contracts.common.PaymentReason
	(SchemeType)(0),                         // 129: farm.nurture.core.contracts.common.SchemeType
	(SchemeWindowType)(0),                   // 130: farm.nurture.core.contracts.common.SchemeWindowType
	(PaymentType)(0),                        // 131: farm.nurture.core.contracts.common.PaymentType
	(PerformanceQueryType)(0),               // 132: farm.nurture.core.contracts.common.PerformanceQueryType
	(PerformanceQueryMappingType)(0),        // 133: farm.nurture.core.contracts.common.PerformanceQueryMappingType
	(PerformanceType)(0),                    // 134: farm.nurture.core.contracts.common.PerformanceType
	(ContentDataCategory)(0),                // 135: farm.nurture.core.contracts.common.ContentDataCategory
	(IOTBookingAction)(0),                   // 136: farm.nurture.core.contracts.common.IOTBookingAction
	(TargetUserWorkflowQueryMappingType)(0), // 137: farm.nurture.core.contracts.common.TargetUserWorkflowQueryMappingType
}
var file_Common_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Common_enums_proto_init() }
func file_Common_enums_proto_init() {
	if File_Common_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_enums_proto_rawDesc,
			NumEnums:      138,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_enums_proto_goTypes,
		DependencyIndexes: file_Common_enums_proto_depIdxs,
		EnumInfos:         file_Common_enums_proto_enumTypes,
	}.Build()
	File_Common_enums_proto = out.File
	file_Common_enums_proto_rawDesc = nil
	file_Common_enums_proto_goTypes = nil
	file_Common_enums_proto_depIdxs = nil
}
