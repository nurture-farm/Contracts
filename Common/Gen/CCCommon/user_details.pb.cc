// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/user_details.proto

#include "Common/user_details.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fuser_5fdetails_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fuser_5fdetails_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class UserPersonalDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserPersonalDetails> _instance;
} _UserPersonalDetails_default_instance_;
class UserFarmAreaDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFarmAreaDetails> _instance;
} _UserFarmAreaDetails_default_instance_;
class UserWithAreaDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserWithAreaDetails> _instance;
} _UserWithAreaDetails_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UserFarmAreaDetails_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UserFarmAreaDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto}, {}};

static void InitDefaultsscc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UserPersonalDetails_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UserPersonalDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto}, {}};

static void InitDefaultsscc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UserWithAreaDetails_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UserWithAreaDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto}, {
      &scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto.base,
      &scc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fuser_5fdetails_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fuser_5fdetails_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fuser_5fdetails_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fuser_5fdetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserPersonalDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserPersonalDetails, first_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserPersonalDetails, last_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserPersonalDetails, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserFarmAreaDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserFarmAreaDetails, acres_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserWithAreaDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserWithAreaDetails, user_personal_details_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserWithAreaDetails, user_farm_area_details_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::UserPersonalDetails)},
  { 8, -1, sizeof(::farm::nurture::core::contracts::common::UserFarmAreaDetails)},
  { 14, -1, sizeof(::farm::nurture::core::contracts::common::UserWithAreaDetails)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UserPersonalDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UserFarmAreaDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UserWithAreaDetails_default_instance_),
};

const char descriptor_table_protodef_Common_2fuser_5fdetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031Common/user_details.proto\022\"farm.nurtur"
  "e.core.contracts.common\"K\n\023UserPersonalD"
  "etails\022\022\n\nfirst_name\030\001 \001(\t\022\021\n\tlast_name\030"
  "\002 \001(\t\022\r\n\005email\030\003 \001(\t\"$\n\023UserFarmAreaDeta"
  "ils\022\r\n\005acres\030\001 \001(\002\"\306\001\n\023UserWithAreaDetai"
  "ls\022V\n\025user_personal_details\030\001 \001(\01327.farm"
  ".nurture.core.contracts.common.UserPerso"
  "nalDetails\022W\n\026user_farm_area_details\030\002 \001"
  "(\01327.farm.nurture.core.contracts.common."
  "UserFarmAreaDetailsBR\n\"farm.nurture.core"
  ".contracts.commonP\001Z\'code.nurture.farm/C"
  "ore/Contracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fuser_5fdetails_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fuser_5fdetails_2eproto_sccs[3] = {
  &scc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto.base,
  &scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto.base,
  &scc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fuser_5fdetails_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fuser_5fdetails_2eproto = {
  false, false, descriptor_table_protodef_Common_2fuser_5fdetails_2eproto, "Common/user_details.proto", 471,
  &descriptor_table_Common_2fuser_5fdetails_2eproto_once, descriptor_table_Common_2fuser_5fdetails_2eproto_sccs, descriptor_table_Common_2fuser_5fdetails_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Common_2fuser_5fdetails_2eproto::offsets,
  file_level_metadata_Common_2fuser_5fdetails_2eproto, 3, file_level_enum_descriptors_Common_2fuser_5fdetails_2eproto, file_level_service_descriptors_Common_2fuser_5fdetails_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fuser_5fdetails_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fuser_5fdetails_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class UserPersonalDetails::_Internal {
 public:
};

UserPersonalDetails::UserPersonalDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UserPersonalDetails)
}
UserPersonalDetails::UserPersonalDetails(const UserPersonalDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArena());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UserPersonalDetails)
}

void UserPersonalDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto.base);
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserPersonalDetails::~UserPersonalDetails() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UserPersonalDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserPersonalDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserPersonalDetails::ArenaDtor(void* object) {
  UserPersonalDetails* _this = reinterpret_cast< UserPersonalDetails* >(object);
  (void)_this;
}
void UserPersonalDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPersonalDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserPersonalDetails& UserPersonalDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserPersonalDetails_Common_2fuser_5fdetails_2eproto.base);
  return *internal_default_instance();
}


void UserPersonalDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPersonalDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string first_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserPersonalDetails.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserPersonalDetails.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserPersonalDetails.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserPersonalDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string first_name = 1;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserPersonalDetails.first_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_first_name(), target);
  }

  // string last_name = 2;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserPersonalDetails.last_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_name(), target);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserPersonalDetails.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UserPersonalDetails)
  return target;
}

size_t UserPersonalDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string first_name = 1;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 2;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPersonalDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPersonalDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserPersonalDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UserPersonalDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UserPersonalDetails)
    MergeFrom(*source);
  }
}

void UserPersonalDetails::MergeFrom(const UserPersonalDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_name().size() > 0) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (from.last_name().size() > 0) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
}

void UserPersonalDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPersonalDetails::CopyFrom(const UserPersonalDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UserPersonalDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPersonalDetails::IsInitialized() const {
  return true;
}

void UserPersonalDetails::InternalSwap(UserPersonalDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPersonalDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserFarmAreaDetails::_Internal {
 public:
};

UserFarmAreaDetails::UserFarmAreaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UserFarmAreaDetails)
}
UserFarmAreaDetails::UserFarmAreaDetails(const UserFarmAreaDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acres_ = from.acres_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UserFarmAreaDetails)
}

void UserFarmAreaDetails::SharedCtor() {
  acres_ = 0;
}

UserFarmAreaDetails::~UserFarmAreaDetails() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFarmAreaDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFarmAreaDetails::ArenaDtor(void* object) {
  UserFarmAreaDetails* _this = reinterpret_cast< UserFarmAreaDetails* >(object);
  (void)_this;
}
void UserFarmAreaDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFarmAreaDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFarmAreaDetails& UserFarmAreaDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFarmAreaDetails_Common_2fuser_5fdetails_2eproto.base);
  return *internal_default_instance();
}


void UserFarmAreaDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acres_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFarmAreaDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float acres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          acres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFarmAreaDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acres = 1;
  if (!(this->acres() <= 0 && this->acres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_acres(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  return target;
}

size_t UserFarmAreaDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acres = 1;
  if (!(this->acres() <= 0 && this->acres() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFarmAreaDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFarmAreaDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFarmAreaDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UserFarmAreaDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UserFarmAreaDetails)
    MergeFrom(*source);
  }
}

void UserFarmAreaDetails::MergeFrom(const UserFarmAreaDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acres() <= 0 && from.acres() >= 0)) {
    _internal_set_acres(from._internal_acres());
  }
}

void UserFarmAreaDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFarmAreaDetails::CopyFrom(const UserFarmAreaDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UserFarmAreaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFarmAreaDetails::IsInitialized() const {
  return true;
}

void UserFarmAreaDetails::InternalSwap(UserFarmAreaDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(acres_, other->acres_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFarmAreaDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserWithAreaDetails::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::UserPersonalDetails& user_personal_details(const UserWithAreaDetails* msg);
  static const ::farm::nurture::core::contracts::common::UserFarmAreaDetails& user_farm_area_details(const UserWithAreaDetails* msg);
};

const ::farm::nurture::core::contracts::common::UserPersonalDetails&
UserWithAreaDetails::_Internal::user_personal_details(const UserWithAreaDetails* msg) {
  return *msg->user_personal_details_;
}
const ::farm::nurture::core::contracts::common::UserFarmAreaDetails&
UserWithAreaDetails::_Internal::user_farm_area_details(const UserWithAreaDetails* msg) {
  return *msg->user_farm_area_details_;
}
UserWithAreaDetails::UserWithAreaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UserWithAreaDetails)
}
UserWithAreaDetails::UserWithAreaDetails(const UserWithAreaDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_personal_details()) {
    user_personal_details_ = new ::farm::nurture::core::contracts::common::UserPersonalDetails(*from.user_personal_details_);
  } else {
    user_personal_details_ = nullptr;
  }
  if (from._internal_has_user_farm_area_details()) {
    user_farm_area_details_ = new ::farm::nurture::core::contracts::common::UserFarmAreaDetails(*from.user_farm_area_details_);
  } else {
    user_farm_area_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UserWithAreaDetails)
}

void UserWithAreaDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_personal_details_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_farm_area_details_) -
      reinterpret_cast<char*>(&user_personal_details_)) + sizeof(user_farm_area_details_));
}

UserWithAreaDetails::~UserWithAreaDetails() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UserWithAreaDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserWithAreaDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_personal_details_;
  if (this != internal_default_instance()) delete user_farm_area_details_;
}

void UserWithAreaDetails::ArenaDtor(void* object) {
  UserWithAreaDetails* _this = reinterpret_cast< UserWithAreaDetails* >(object);
  (void)_this;
}
void UserWithAreaDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserWithAreaDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserWithAreaDetails& UserWithAreaDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserWithAreaDetails_Common_2fuser_5fdetails_2eproto.base);
  return *internal_default_instance();
}


void UserWithAreaDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_personal_details_ != nullptr) {
    delete user_personal_details_;
  }
  user_personal_details_ = nullptr;
  if (GetArena() == nullptr && user_farm_area_details_ != nullptr) {
    delete user_farm_area_details_;
  }
  user_farm_area_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserWithAreaDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.UserPersonalDetails user_personal_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_personal_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.UserFarmAreaDetails user_farm_area_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_farm_area_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserWithAreaDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.UserPersonalDetails user_personal_details = 1;
  if (this->has_user_personal_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_personal_details(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.UserFarmAreaDetails user_farm_area_details = 2;
  if (this->has_user_farm_area_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_farm_area_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UserWithAreaDetails)
  return target;
}

size_t UserWithAreaDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.UserPersonalDetails user_personal_details = 1;
  if (this->has_user_personal_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_personal_details_);
  }

  // .farm.nurture.core.contracts.common.UserFarmAreaDetails user_farm_area_details = 2;
  if (this->has_user_farm_area_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_farm_area_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWithAreaDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWithAreaDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserWithAreaDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UserWithAreaDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UserWithAreaDetails)
    MergeFrom(*source);
  }
}

void UserWithAreaDetails::MergeFrom(const UserWithAreaDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_personal_details()) {
    _internal_mutable_user_personal_details()->::farm::nurture::core::contracts::common::UserPersonalDetails::MergeFrom(from._internal_user_personal_details());
  }
  if (from.has_user_farm_area_details()) {
    _internal_mutable_user_farm_area_details()->::farm::nurture::core::contracts::common::UserFarmAreaDetails::MergeFrom(from._internal_user_farm_area_details());
  }
}

void UserWithAreaDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWithAreaDetails::CopyFrom(const UserWithAreaDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UserWithAreaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWithAreaDetails::IsInitialized() const {
  return true;
}

void UserWithAreaDetails::InternalSwap(UserWithAreaDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserWithAreaDetails, user_farm_area_details_)
      + sizeof(UserWithAreaDetails::user_farm_area_details_)
      - PROTOBUF_FIELD_OFFSET(UserWithAreaDetails, user_personal_details_)>(
          reinterpret_cast<char*>(&user_personal_details_),
          reinterpret_cast<char*>(&other->user_personal_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserWithAreaDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UserPersonalDetails* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UserPersonalDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UserPersonalDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UserFarmAreaDetails* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UserFarmAreaDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UserFarmAreaDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UserWithAreaDetails* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UserWithAreaDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UserWithAreaDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
