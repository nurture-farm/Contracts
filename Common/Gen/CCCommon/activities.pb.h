// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/activities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2factivities_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2factivities_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2factivities_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2factivities_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2factivities_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class ActivityBookingReference;
class ActivityBookingReferenceDefaultTypeInternal;
extern ActivityBookingReferenceDefaultTypeInternal _ActivityBookingReference_default_instance_;
class ActivityLocation;
class ActivityLocationDefaultTypeInternal;
extern ActivityLocationDefaultTypeInternal _ActivityLocation_default_instance_;
class ServiceAreaSpec;
class ServiceAreaSpecDefaultTypeInternal;
extern ServiceAreaSpecDefaultTypeInternal _ServiceAreaSpec_default_instance_;
class SupplyActivitySpec;
class SupplyActivitySpecDefaultTypeInternal;
extern SupplyActivitySpecDefaultTypeInternal _SupplyActivitySpec_default_instance_;
class SupplySpec;
class SupplySpecDefaultTypeInternal;
extern SupplySpecDefaultTypeInternal _SupplySpec_default_instance_;
class SupplyWorkSpec;
class SupplyWorkSpecDefaultTypeInternal;
extern SupplyWorkSpecDefaultTypeInternal _SupplyWorkSpec_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::ActivityBookingReference* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ActivityBookingReference>(Arena*);
template<> ::farm::nurture::core::contracts::common::ActivityLocation* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ActivityLocation>(Arena*);
template<> ::farm::nurture::core::contracts::common::ServiceAreaSpec* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ServiceAreaSpec>(Arena*);
template<> ::farm::nurture::core::contracts::common::SupplyActivitySpec* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::SupplyActivitySpec>(Arena*);
template<> ::farm::nurture::core::contracts::common::SupplySpec* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::SupplySpec>(Arena*);
template<> ::farm::nurture::core::contracts::common::SupplyWorkSpec* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::SupplyWorkSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

enum SupplyTaskType : int {
  NO_TASK_TYPE = 0,
  SPRAY_TASK = 1,
  WATER_FILL_TASK = 2,
  PAUSE_TASK = 3,
  SERVICE_CLOSURE_TASK = 4,
  ON_ROUTE_TASK = 5,
  SupplyTaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupplyTaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupplyTaskType_IsValid(int value);
constexpr SupplyTaskType SupplyTaskType_MIN = NO_TASK_TYPE;
constexpr SupplyTaskType SupplyTaskType_MAX = ON_ROUTE_TASK;
constexpr int SupplyTaskType_ARRAYSIZE = SupplyTaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyTaskType_descriptor();
template<typename T>
inline const std::string& SupplyTaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupplyTaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupplyTaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupplyTaskType_descriptor(), enum_t_value);
}
inline bool SupplyTaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupplyTaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupplyTaskType>(
    SupplyTaskType_descriptor(), name, value);
}
enum SupplyActivityType : int {
  NO_ACTIVITY_TYPE = 0,
  SPRAY_ACTIVITY = 1,
  DRY_RUN_ACTIVITY = 2,
  CALL_FARMER_ACTIVITY = 3,
  MACHINE_SOFTWARE_UPDATE_ACTIVITY = 4,
  SupplyActivityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupplyActivityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupplyActivityType_IsValid(int value);
constexpr SupplyActivityType SupplyActivityType_MIN = NO_ACTIVITY_TYPE;
constexpr SupplyActivityType SupplyActivityType_MAX = MACHINE_SOFTWARE_UPDATE_ACTIVITY;
constexpr int SupplyActivityType_ARRAYSIZE = SupplyActivityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyActivityType_descriptor();
template<typename T>
inline const std::string& SupplyActivityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupplyActivityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupplyActivityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupplyActivityType_descriptor(), enum_t_value);
}
inline bool SupplyActivityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupplyActivityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupplyActivityType>(
    SupplyActivityType_descriptor(), name, value);
}
enum SupplyActivitySubType : int {
  NO_ACTIVITY_SUB_TYPE = 0,
  SupplyActivitySubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupplyActivitySubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupplyActivitySubType_IsValid(int value);
constexpr SupplyActivitySubType SupplyActivitySubType_MIN = NO_ACTIVITY_SUB_TYPE;
constexpr SupplyActivitySubType SupplyActivitySubType_MAX = NO_ACTIVITY_SUB_TYPE;
constexpr int SupplyActivitySubType_ARRAYSIZE = SupplyActivitySubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyActivitySubType_descriptor();
template<typename T>
inline const std::string& SupplyActivitySubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupplyActivitySubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupplyActivitySubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupplyActivitySubType_descriptor(), enum_t_value);
}
inline bool SupplyActivitySubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupplyActivitySubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupplyActivitySubType>(
    SupplyActivitySubType_descriptor(), name, value);
}
enum SupplyGroupType : int {
  NO_SUPPLY_GROUP_TYPE = 0,
  SUPPLY_GROUP_OPERATOR_MACHINE = 1,
  SUPPLY_GROUP_OPERATOR = 2,
  SupplyGroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupplyGroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupplyGroupType_IsValid(int value);
constexpr SupplyGroupType SupplyGroupType_MIN = NO_SUPPLY_GROUP_TYPE;
constexpr SupplyGroupType SupplyGroupType_MAX = SUPPLY_GROUP_OPERATOR;
constexpr int SupplyGroupType_ARRAYSIZE = SupplyGroupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyGroupType_descriptor();
template<typename T>
inline const std::string& SupplyGroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupplyGroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupplyGroupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupplyGroupType_descriptor(), enum_t_value);
}
inline bool SupplyGroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupplyGroupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupplyGroupType>(
    SupplyGroupType_descriptor(), name, value);
}
// ===================================================================

class SupplyActivitySpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.SupplyActivitySpec) */ {
 public:
  inline SupplyActivitySpec() : SupplyActivitySpec(nullptr) {}
  virtual ~SupplyActivitySpec();

  SupplyActivitySpec(const SupplyActivitySpec& from);
  SupplyActivitySpec(SupplyActivitySpec&& from) noexcept
    : SupplyActivitySpec() {
    *this = ::std::move(from);
  }

  inline SupplyActivitySpec& operator=(const SupplyActivitySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplyActivitySpec& operator=(SupplyActivitySpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupplyActivitySpec& default_instance();

  static inline const SupplyActivitySpec* internal_default_instance() {
    return reinterpret_cast<const SupplyActivitySpec*>(
               &_SupplyActivitySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SupplyActivitySpec& a, SupplyActivitySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplyActivitySpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplyActivitySpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupplyActivitySpec* New() const final {
    return CreateMaybeMessage<SupplyActivitySpec>(nullptr);
  }

  SupplyActivitySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupplyActivitySpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupplyActivitySpec& from);
  void MergeFrom(const SupplyActivitySpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplyActivitySpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.SupplyActivitySpec";
  }
  protected:
  explicit SupplyActivitySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityTypeFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  void clear_activity_type();
  ::farm::nurture::core::contracts::common::SupplyActivityType activity_type() const;
  void set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value);
  private:
  ::farm::nurture::core::contracts::common::SupplyActivityType _internal_activity_type() const;
  void _internal_set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value);
  public:

  // .farm.nurture.core.contracts.common.SupplyTaskType task_type = 2;
  void clear_task_type();
  ::farm::nurture::core::contracts::common::SupplyTaskType task_type() const;
  void set_task_type(::farm::nurture::core::contracts::common::SupplyTaskType value);
  private:
  ::farm::nurture::core::contracts::common::SupplyTaskType _internal_task_type() const;
  void _internal_set_task_type(::farm::nurture::core::contracts::common::SupplyTaskType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.SupplyActivitySpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int activity_type_;
  int task_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// -------------------------------------------------------------------

class SupplyWorkSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.SupplyWorkSpec) */ {
 public:
  inline SupplyWorkSpec() : SupplyWorkSpec(nullptr) {}
  virtual ~SupplyWorkSpec();

  SupplyWorkSpec(const SupplyWorkSpec& from);
  SupplyWorkSpec(SupplyWorkSpec&& from) noexcept
    : SupplyWorkSpec() {
    *this = ::std::move(from);
  }

  inline SupplyWorkSpec& operator=(const SupplyWorkSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplyWorkSpec& operator=(SupplyWorkSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupplyWorkSpec& default_instance();

  static inline const SupplyWorkSpec* internal_default_instance() {
    return reinterpret_cast<const SupplyWorkSpec*>(
               &_SupplyWorkSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SupplyWorkSpec& a, SupplyWorkSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplyWorkSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplyWorkSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupplyWorkSpec* New() const final {
    return CreateMaybeMessage<SupplyWorkSpec>(nullptr);
  }

  SupplyWorkSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupplyWorkSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupplyWorkSpec& from);
  void MergeFrom(const SupplyWorkSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplyWorkSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.SupplyWorkSpec";
  }
  protected:
  explicit SupplyWorkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityTypeFieldNumber = 1,
    kActivitySubTypeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  void clear_activity_type();
  ::farm::nurture::core::contracts::common::SupplyActivityType activity_type() const;
  void set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value);
  private:
  ::farm::nurture::core::contracts::common::SupplyActivityType _internal_activity_type() const;
  void _internal_set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value);
  public:

  // .farm.nurture.core.contracts.common.SupplyActivitySubType activity_sub_type = 2;
  void clear_activity_sub_type();
  ::farm::nurture::core::contracts::common::SupplyActivitySubType activity_sub_type() const;
  void set_activity_sub_type(::farm::nurture::core::contracts::common::SupplyActivitySubType value);
  private:
  ::farm::nurture::core::contracts::common::SupplyActivitySubType _internal_activity_sub_type() const;
  void _internal_set_activity_sub_type(::farm::nurture::core::contracts::common::SupplyActivitySubType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.SupplyWorkSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int activity_type_;
  int activity_sub_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// -------------------------------------------------------------------

class ServiceAreaSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ServiceAreaSpec) */ {
 public:
  inline ServiceAreaSpec() : ServiceAreaSpec(nullptr) {}
  virtual ~ServiceAreaSpec();

  ServiceAreaSpec(const ServiceAreaSpec& from);
  ServiceAreaSpec(ServiceAreaSpec&& from) noexcept
    : ServiceAreaSpec() {
    *this = ::std::move(from);
  }

  inline ServiceAreaSpec& operator=(const ServiceAreaSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAreaSpec& operator=(ServiceAreaSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAreaSpec& default_instance();

  static inline const ServiceAreaSpec* internal_default_instance() {
    return reinterpret_cast<const ServiceAreaSpec*>(
               &_ServiceAreaSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceAreaSpec& a, ServiceAreaSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAreaSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceAreaSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceAreaSpec* New() const final {
    return CreateMaybeMessage<ServiceAreaSpec>(nullptr);
  }

  ServiceAreaSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAreaSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAreaSpec& from);
  void MergeFrom(const ServiceAreaSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAreaSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ServiceAreaSpec";
  }
  protected:
  explicit ServiceAreaSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAreaIdFieldNumber = 2,
    kServiceAreaNamespaceFieldNumber = 1,
  };
  // int64 service_area_id = 2;
  void clear_service_area_id();
  ::PROTOBUF_NAMESPACE_ID::int64 service_area_id() const;
  void set_service_area_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_service_area_id() const;
  void _internal_set_service_area_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.ServiceAreaNamespace service_area_namespace = 1;
  void clear_service_area_namespace();
  ::farm::nurture::core::contracts::common::ServiceAreaNamespace service_area_namespace() const;
  void set_service_area_namespace(::farm::nurture::core::contracts::common::ServiceAreaNamespace value);
  private:
  ::farm::nurture::core::contracts::common::ServiceAreaNamespace _internal_service_area_namespace() const;
  void _internal_set_service_area_namespace(::farm::nurture::core::contracts::common::ServiceAreaNamespace value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ServiceAreaSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 service_area_id_;
  int service_area_namespace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// -------------------------------------------------------------------

class SupplySpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.SupplySpec) */ {
 public:
  inline SupplySpec() : SupplySpec(nullptr) {}
  virtual ~SupplySpec();

  SupplySpec(const SupplySpec& from);
  SupplySpec(SupplySpec&& from) noexcept
    : SupplySpec() {
    *this = ::std::move(from);
  }

  inline SupplySpec& operator=(const SupplySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplySpec& operator=(SupplySpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupplySpec& default_instance();

  static inline const SupplySpec* internal_default_instance() {
    return reinterpret_cast<const SupplySpec*>(
               &_SupplySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SupplySpec& a, SupplySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplySpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplySpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupplySpec* New() const final {
    return CreateMaybeMessage<SupplySpec>(nullptr);
  }

  SupplySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupplySpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupplySpec& from);
  void MergeFrom(const SupplySpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplySpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.SupplySpec";
  }
  protected:
  explicit SupplySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 2,
    kActorTypeFieldNumber = 1,
  };
  // int64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  void clear_actor_type();
  ::farm::nurture::core::contracts::common::ActorType actor_type() const;
  void set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  private:
  ::farm::nurture::core::contracts::common::ActorType _internal_actor_type() const;
  void _internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.SupplySpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id_;
  int actor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// -------------------------------------------------------------------

class ActivityLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ActivityLocation) */ {
 public:
  inline ActivityLocation() : ActivityLocation(nullptr) {}
  virtual ~ActivityLocation();

  ActivityLocation(const ActivityLocation& from);
  ActivityLocation(ActivityLocation&& from) noexcept
    : ActivityLocation() {
    *this = ::std::move(from);
  }

  inline ActivityLocation& operator=(const ActivityLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityLocation& operator=(ActivityLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityLocation& default_instance();

  static inline const ActivityLocation* internal_default_instance() {
    return reinterpret_cast<const ActivityLocation*>(
               &_ActivityLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActivityLocation& a, ActivityLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityLocation* New() const final {
    return CreateMaybeMessage<ActivityLocation>(nullptr);
  }

  ActivityLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityLocation& from);
  void MergeFrom(const ActivityLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ActivityLocation";
  }
  protected:
  explicit ActivityLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationClosuresFieldNumber = 6,
    kFarmIdFieldNumber = 2,
    kFarmCropIdFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kLocationTypeFieldNumber = 1,
  };
  // repeated string location_closures = 6;
  int location_closures_size() const;
  private:
  int _internal_location_closures_size() const;
  public:
  void clear_location_closures();
  const std::string& location_closures(int index) const;
  std::string* mutable_location_closures(int index);
  void set_location_closures(int index, const std::string& value);
  void set_location_closures(int index, std::string&& value);
  void set_location_closures(int index, const char* value);
  void set_location_closures(int index, const char* value, size_t size);
  std::string* add_location_closures();
  void add_location_closures(const std::string& value);
  void add_location_closures(std::string&& value);
  void add_location_closures(const char* value);
  void add_location_closures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& location_closures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_location_closures();
  private:
  const std::string& _internal_location_closures(int index) const;
  std::string* _internal_add_location_closures();
  public:

  // int64 farm_id = 2;
  void clear_farm_id();
  ::PROTOBUF_NAMESPACE_ID::int64 farm_id() const;
  void set_farm_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_farm_id() const;
  void _internal_set_farm_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 farm_crop_id = 3;
  void clear_farm_crop_id();
  ::PROTOBUF_NAMESPACE_ID::int64 farm_crop_id() const;
  void set_farm_crop_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_farm_crop_id() const;
  void _internal_set_farm_crop_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // .farm.nurture.core.contracts.common.LocationType location_type = 1;
  void clear_location_type();
  ::farm::nurture::core::contracts::common::LocationType location_type() const;
  void set_location_type(::farm::nurture::core::contracts::common::LocationType value);
  private:
  ::farm::nurture::core::contracts::common::LocationType _internal_location_type() const;
  void _internal_set_location_type(::farm::nurture::core::contracts::common::LocationType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ActivityLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> location_closures_;
  ::PROTOBUF_NAMESPACE_ID::int64 farm_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 farm_crop_id_;
  double latitude_;
  double longitude_;
  int location_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// -------------------------------------------------------------------

class ActivityBookingReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ActivityBookingReference) */ {
 public:
  inline ActivityBookingReference() : ActivityBookingReference(nullptr) {}
  virtual ~ActivityBookingReference();

  ActivityBookingReference(const ActivityBookingReference& from);
  ActivityBookingReference(ActivityBookingReference&& from) noexcept
    : ActivityBookingReference() {
    *this = ::std::move(from);
  }

  inline ActivityBookingReference& operator=(const ActivityBookingReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityBookingReference& operator=(ActivityBookingReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityBookingReference& default_instance();

  static inline const ActivityBookingReference* internal_default_instance() {
    return reinterpret_cast<const ActivityBookingReference*>(
               &_ActivityBookingReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ActivityBookingReference& a, ActivityBookingReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityBookingReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityBookingReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityBookingReference* New() const final {
    return CreateMaybeMessage<ActivityBookingReference>(nullptr);
  }

  ActivityBookingReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityBookingReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityBookingReference& from);
  void MergeFrom(const ActivityBookingReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityBookingReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ActivityBookingReference";
  }
  protected:
  explicit ActivityBookingReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2factivities_2eproto);
    return ::descriptor_table_Common_2factivities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 7,
    kActorTypeFieldNumber = 6,
    kBookingIdFieldNumber = 8,
    kBookingVersionIdFieldNumber = 9,
    kServiceIdFieldNumber = 10,
    kServiceVersionIdFieldNumber = 11,
  };
  // int64 actor_id = 7;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.ActorType actor_type = 6;
  void clear_actor_type();
  ::farm::nurture::core::contracts::common::ActorType actor_type() const;
  void set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  private:
  ::farm::nurture::core::contracts::common::ActorType _internal_actor_type() const;
  void _internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  public:

  // int64 booking_id = 8;
  void clear_booking_id();
  ::PROTOBUF_NAMESPACE_ID::int64 booking_id() const;
  void set_booking_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_booking_id() const;
  void _internal_set_booking_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 booking_version_id = 9;
  void clear_booking_version_id();
  ::PROTOBUF_NAMESPACE_ID::int64 booking_version_id() const;
  void set_booking_version_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_booking_version_id() const;
  void _internal_set_booking_version_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 service_id = 10;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::int64 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 service_version_id = 11;
  void clear_service_version_id();
  ::PROTOBUF_NAMESPACE_ID::int64 service_version_id() const;
  void set_service_version_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_service_version_id() const;
  void _internal_set_service_version_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ActivityBookingReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id_;
  int actor_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 booking_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 booking_version_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 service_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 service_version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2factivities_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SupplyActivitySpec

// .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
inline void SupplyActivitySpec::clear_activity_type() {
  activity_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::SupplyActivityType SupplyActivitySpec::_internal_activity_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::SupplyActivityType >(activity_type_);
}
inline ::farm::nurture::core::contracts::common::SupplyActivityType SupplyActivitySpec::activity_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplyActivitySpec.activity_type)
  return _internal_activity_type();
}
inline void SupplyActivitySpec::_internal_set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value) {
  
  activity_type_ = value;
}
inline void SupplyActivitySpec::set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value) {
  _internal_set_activity_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplyActivitySpec.activity_type)
}

// .farm.nurture.core.contracts.common.SupplyTaskType task_type = 2;
inline void SupplyActivitySpec::clear_task_type() {
  task_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::SupplyTaskType SupplyActivitySpec::_internal_task_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::SupplyTaskType >(task_type_);
}
inline ::farm::nurture::core::contracts::common::SupplyTaskType SupplyActivitySpec::task_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplyActivitySpec.task_type)
  return _internal_task_type();
}
inline void SupplyActivitySpec::_internal_set_task_type(::farm::nurture::core::contracts::common::SupplyTaskType value) {
  
  task_type_ = value;
}
inline void SupplyActivitySpec::set_task_type(::farm::nurture::core::contracts::common::SupplyTaskType value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplyActivitySpec.task_type)
}

// -------------------------------------------------------------------

// SupplyWorkSpec

// .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
inline void SupplyWorkSpec::clear_activity_type() {
  activity_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::SupplyActivityType SupplyWorkSpec::_internal_activity_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::SupplyActivityType >(activity_type_);
}
inline ::farm::nurture::core::contracts::common::SupplyActivityType SupplyWorkSpec::activity_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplyWorkSpec.activity_type)
  return _internal_activity_type();
}
inline void SupplyWorkSpec::_internal_set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value) {
  
  activity_type_ = value;
}
inline void SupplyWorkSpec::set_activity_type(::farm::nurture::core::contracts::common::SupplyActivityType value) {
  _internal_set_activity_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplyWorkSpec.activity_type)
}

// .farm.nurture.core.contracts.common.SupplyActivitySubType activity_sub_type = 2;
inline void SupplyWorkSpec::clear_activity_sub_type() {
  activity_sub_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::SupplyActivitySubType SupplyWorkSpec::_internal_activity_sub_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::SupplyActivitySubType >(activity_sub_type_);
}
inline ::farm::nurture::core::contracts::common::SupplyActivitySubType SupplyWorkSpec::activity_sub_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplyWorkSpec.activity_sub_type)
  return _internal_activity_sub_type();
}
inline void SupplyWorkSpec::_internal_set_activity_sub_type(::farm::nurture::core::contracts::common::SupplyActivitySubType value) {
  
  activity_sub_type_ = value;
}
inline void SupplyWorkSpec::set_activity_sub_type(::farm::nurture::core::contracts::common::SupplyActivitySubType value) {
  _internal_set_activity_sub_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplyWorkSpec.activity_sub_type)
}

// -------------------------------------------------------------------

// ServiceAreaSpec

// .farm.nurture.core.contracts.common.ServiceAreaNamespace service_area_namespace = 1;
inline void ServiceAreaSpec::clear_service_area_namespace() {
  service_area_namespace_ = 0;
}
inline ::farm::nurture::core::contracts::common::ServiceAreaNamespace ServiceAreaSpec::_internal_service_area_namespace() const {
  return static_cast< ::farm::nurture::core::contracts::common::ServiceAreaNamespace >(service_area_namespace_);
}
inline ::farm::nurture::core::contracts::common::ServiceAreaNamespace ServiceAreaSpec::service_area_namespace() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ServiceAreaSpec.service_area_namespace)
  return _internal_service_area_namespace();
}
inline void ServiceAreaSpec::_internal_set_service_area_namespace(::farm::nurture::core::contracts::common::ServiceAreaNamespace value) {
  
  service_area_namespace_ = value;
}
inline void ServiceAreaSpec::set_service_area_namespace(::farm::nurture::core::contracts::common::ServiceAreaNamespace value) {
  _internal_set_service_area_namespace(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ServiceAreaSpec.service_area_namespace)
}

// int64 service_area_id = 2;
inline void ServiceAreaSpec::clear_service_area_id() {
  service_area_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceAreaSpec::_internal_service_area_id() const {
  return service_area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceAreaSpec::service_area_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ServiceAreaSpec.service_area_id)
  return _internal_service_area_id();
}
inline void ServiceAreaSpec::_internal_set_service_area_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  service_area_id_ = value;
}
inline void ServiceAreaSpec::set_service_area_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_service_area_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ServiceAreaSpec.service_area_id)
}

// -------------------------------------------------------------------

// SupplySpec

// .farm.nurture.core.contracts.common.ActorType actor_type = 1;
inline void SupplySpec::clear_actor_type() {
  actor_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ActorType SupplySpec::_internal_actor_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ActorType >(actor_type_);
}
inline ::farm::nurture::core::contracts::common::ActorType SupplySpec::actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplySpec.actor_type)
  return _internal_actor_type();
}
inline void SupplySpec::_internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  
  actor_type_ = value;
}
inline void SupplySpec::set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplySpec.actor_type)
}

// int64 actor_id = 2;
inline void SupplySpec::clear_actor_id() {
  actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SupplySpec::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SupplySpec::actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.SupplySpec.actor_id)
  return _internal_actor_id();
}
inline void SupplySpec::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actor_id_ = value;
}
inline void SupplySpec::set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.SupplySpec.actor_id)
}

// -------------------------------------------------------------------

// ActivityLocation

// .farm.nurture.core.contracts.common.LocationType location_type = 1;
inline void ActivityLocation::clear_location_type() {
  location_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::LocationType ActivityLocation::_internal_location_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::LocationType >(location_type_);
}
inline ::farm::nurture::core::contracts::common::LocationType ActivityLocation::location_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.location_type)
  return _internal_location_type();
}
inline void ActivityLocation::_internal_set_location_type(::farm::nurture::core::contracts::common::LocationType value) {
  
  location_type_ = value;
}
inline void ActivityLocation::set_location_type(::farm::nurture::core::contracts::common::LocationType value) {
  _internal_set_location_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.location_type)
}

// int64 farm_id = 2;
inline void ActivityLocation::clear_farm_id() {
  farm_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityLocation::_internal_farm_id() const {
  return farm_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityLocation::farm_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.farm_id)
  return _internal_farm_id();
}
inline void ActivityLocation::_internal_set_farm_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  farm_id_ = value;
}
inline void ActivityLocation::set_farm_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_farm_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.farm_id)
}

// int64 farm_crop_id = 3;
inline void ActivityLocation::clear_farm_crop_id() {
  farm_crop_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityLocation::_internal_farm_crop_id() const {
  return farm_crop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityLocation::farm_crop_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.farm_crop_id)
  return _internal_farm_crop_id();
}
inline void ActivityLocation::_internal_set_farm_crop_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  farm_crop_id_ = value;
}
inline void ActivityLocation::set_farm_crop_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_farm_crop_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.farm_crop_id)
}

// double latitude = 4;
inline void ActivityLocation::clear_latitude() {
  latitude_ = 0;
}
inline double ActivityLocation::_internal_latitude() const {
  return latitude_;
}
inline double ActivityLocation::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.latitude)
  return _internal_latitude();
}
inline void ActivityLocation::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void ActivityLocation::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.latitude)
}

// double longitude = 5;
inline void ActivityLocation::clear_longitude() {
  longitude_ = 0;
}
inline double ActivityLocation::_internal_longitude() const {
  return longitude_;
}
inline double ActivityLocation::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.longitude)
  return _internal_longitude();
}
inline void ActivityLocation::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void ActivityLocation::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.longitude)
}

// repeated string location_closures = 6;
inline int ActivityLocation::_internal_location_closures_size() const {
  return location_closures_.size();
}
inline int ActivityLocation::location_closures_size() const {
  return _internal_location_closures_size();
}
inline void ActivityLocation::clear_location_closures() {
  location_closures_.Clear();
}
inline std::string* ActivityLocation::add_location_closures() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  return _internal_add_location_closures();
}
inline const std::string& ActivityLocation::_internal_location_closures(int index) const {
  return location_closures_.Get(index);
}
inline const std::string& ActivityLocation::location_closures(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  return _internal_location_closures(index);
}
inline std::string* ActivityLocation::mutable_location_closures(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  return location_closures_.Mutable(index);
}
inline void ActivityLocation::set_location_closures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  location_closures_.Mutable(index)->assign(value);
}
inline void ActivityLocation::set_location_closures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  location_closures_.Mutable(index)->assign(std::move(value));
}
inline void ActivityLocation::set_location_closures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  location_closures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline void ActivityLocation::set_location_closures(int index, const char* value, size_t size) {
  location_closures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline std::string* ActivityLocation::_internal_add_location_closures() {
  return location_closures_.Add();
}
inline void ActivityLocation::add_location_closures(const std::string& value) {
  location_closures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline void ActivityLocation::add_location_closures(std::string&& value) {
  location_closures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline void ActivityLocation::add_location_closures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  location_closures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline void ActivityLocation::add_location_closures(const char* value, size_t size) {
  location_closures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActivityLocation::location_closures() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  return location_closures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActivityLocation::mutable_location_closures() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.ActivityLocation.location_closures)
  return &location_closures_;
}

// -------------------------------------------------------------------

// ActivityBookingReference

// .farm.nurture.core.contracts.common.ActorType actor_type = 6;
inline void ActivityBookingReference::clear_actor_type() {
  actor_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ActorType ActivityBookingReference::_internal_actor_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ActorType >(actor_type_);
}
inline ::farm::nurture::core::contracts::common::ActorType ActivityBookingReference::actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.actor_type)
  return _internal_actor_type();
}
inline void ActivityBookingReference::_internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  
  actor_type_ = value;
}
inline void ActivityBookingReference::set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.actor_type)
}

// int64 actor_id = 7;
inline void ActivityBookingReference::clear_actor_id() {
  actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.actor_id)
  return _internal_actor_id();
}
inline void ActivityBookingReference::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actor_id_ = value;
}
inline void ActivityBookingReference::set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.actor_id)
}

// int64 booking_id = 8;
inline void ActivityBookingReference::clear_booking_id() {
  booking_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::_internal_booking_id() const {
  return booking_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::booking_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.booking_id)
  return _internal_booking_id();
}
inline void ActivityBookingReference::_internal_set_booking_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  booking_id_ = value;
}
inline void ActivityBookingReference::set_booking_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_booking_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.booking_id)
}

// int64 booking_version_id = 9;
inline void ActivityBookingReference::clear_booking_version_id() {
  booking_version_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::_internal_booking_version_id() const {
  return booking_version_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::booking_version_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.booking_version_id)
  return _internal_booking_version_id();
}
inline void ActivityBookingReference::_internal_set_booking_version_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  booking_version_id_ = value;
}
inline void ActivityBookingReference::set_booking_version_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_booking_version_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.booking_version_id)
}

// int64 service_id = 10;
inline void ActivityBookingReference::clear_service_id() {
  service_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::service_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.service_id)
  return _internal_service_id();
}
inline void ActivityBookingReference::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  service_id_ = value;
}
inline void ActivityBookingReference::set_service_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.service_id)
}

// int64 service_version_id = 11;
inline void ActivityBookingReference::clear_service_version_id() {
  service_version_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::_internal_service_version_id() const {
  return service_version_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityBookingReference::service_version_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActivityBookingReference.service_version_id)
  return _internal_service_version_id();
}
inline void ActivityBookingReference::_internal_set_service_version_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  service_version_id_ = value;
}
inline void ActivityBookingReference::set_service_version_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_service_version_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActivityBookingReference.service_version_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::SupplyTaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::SupplyTaskType>() {
  return ::farm::nurture::core::contracts::common::SupplyTaskType_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::SupplyActivityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::SupplyActivityType>() {
  return ::farm::nurture::core::contracts::common::SupplyActivityType_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::SupplyActivitySubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::SupplyActivitySubType>() {
  return ::farm::nurture::core::contracts::common::SupplyActivitySubType_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::SupplyGroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::SupplyGroupType>() {
  return ::farm::nurture::core::contracts::common::SupplyGroupType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2factivities_2eproto
