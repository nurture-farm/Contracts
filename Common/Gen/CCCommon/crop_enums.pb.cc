// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/crop_enums.proto

#include "Common/crop_enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2fcrop_5fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2fcrop_5fenums_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fcrop_5fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fcrop_5fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2fcrop_5fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Common/crop_enums.proto\022\"farm.nurture."
  "core.contracts.common*\332\003\n\nCropSeason\022\022\n\016"
  "NO_CROP_SEASON\020\000\022\020\n\013KHARIF_2020\020\311\001\022\016\n\tRA"
  "BI_2020\020\312\001\022\020\n\013KHARIF_2021\020\323\001\022\016\n\tRABI_202"
  "1\020\324\001\022\020\n\013KHARIF_2022\020\335\001\022\016\n\tRABI_2022\020\336\001\022\020"
  "\n\013KHARIF_2023\020\347\001\022\016\n\tRABI_2023\020\350\001\022\020\n\013KHAR"
  "IF_2024\020\361\001\022\016\n\tRABI_2024\020\362\001\022\020\n\013KHARIF_202"
  "5\020\373\001\022\016\n\tRABI_2025\020\374\001\022\020\n\013KHARIF_2026\020\205\002\022\016"
  "\n\tRABI_2026\020\206\002\022\020\n\013KHARIF_2027\020\217\002\022\016\n\tRABI"
  "_2027\020\220\002\022\020\n\013KHARIF_2028\020\231\002\022\016\n\tRABI_2028\020"
  "\232\002\022\020\n\013KHARIF_2029\020\243\002\022\016\n\tRABI_2029\020\244\002\022\020\n\013"
  "KHARIF_2030\020\255\002\022\016\n\tRABI_2030\020\256\002\022\020\n\013KHARIF"
  "_2031\020\267\002\022\016\n\tRABI_2031\020\270\002\022\020\n\013KHARIF_2032\020"
  "\301\002\022\016\n\tRABI_2033\020\302\002BX\n(farm.nurture.core."
  "contracts.common.enumsP\001Z\'code.nurture.f"
  "arm/Core/Contracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fcrop_5fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fcrop_5fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fcrop_5fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fcrop_5fenums_2eproto = {
  false, false, descriptor_table_protodef_Common_2fcrop_5fenums_2eproto, "Common/crop_enums.proto", 636,
  &descriptor_table_Common_2fcrop_5fenums_2eproto_once, descriptor_table_Common_2fcrop_5fenums_2eproto_sccs, descriptor_table_Common_2fcrop_5fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2fcrop_5fenums_2eproto::offsets,
  file_level_metadata_Common_2fcrop_5fenums_2eproto, 0, file_level_enum_descriptors_Common_2fcrop_5fenums_2eproto, file_level_service_descriptors_Common_2fcrop_5fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fcrop_5fenums_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fcrop_5fenums_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropSeason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fcrop_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fcrop_5fenums_2eproto[0];
}
bool CropSeason_IsValid(int value) {
  switch (value) {
    case 0:
    case 201:
    case 202:
    case 211:
    case 212:
    case 221:
    case 222:
    case 231:
    case 232:
    case 241:
    case 242:
    case 251:
    case 252:
    case 261:
    case 262:
    case 271:
    case 272:
    case 281:
    case 282:
    case 291:
    case 292:
    case 301:
    case 302:
    case 311:
    case 312:
    case 321:
    case 322:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
