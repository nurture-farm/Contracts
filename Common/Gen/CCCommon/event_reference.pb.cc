// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/event_reference.proto

#include "Common/event_reference.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class EventReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventReference> _instance;
} _EventReference_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_EventReference_Common_2fevent_5freference_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_EventReference_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::EventReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventReference_Common_2fevent_5freference_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventReference_Common_2fevent_5freference_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fevent_5freference_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fevent_5freference_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fevent_5freference_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fevent_5freference_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, event_reference_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, referred_actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, referred_actor_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, reference_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::EventReference, reference_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::EventReference)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_EventReference_default_instance_),
};

const char descriptor_table_protodef_Common_2fevent_5freference_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034Common/event_reference.proto\022\"farm.nur"
  "ture.core.contracts.common\032\022Common/enums"
  ".proto\032\037google/protobuf/timestamp.proto\""
  "\231\002\n\016EventReference\022T\n\024event_reference_ty"
  "pe\030\001 \001(\01626.farm.nurture.core.contracts.c"
  "ommon.EventReferenceType\022J\n\023referred_act"
  "or_type\030\002 \001(\0162-.farm.nurture.core.contra"
  "cts.common.ActorType\022\031\n\021referred_actor_i"
  "d\030\003 \001(\003\0222\n\016reference_time\030\004 \001(\0132\032.google"
  ".protobuf.Timestamp\022\026\n\016reference_code\030\005 "
  "\001(\tBR\n\"farm.nurture.core.contracts.commo"
  "nP\001Z\'code.nurture.farm/Core/Contracts/Co"
  "mmon\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fevent_5freference_2eproto_deps[2] = {
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fevent_5freference_2eproto_sccs[1] = {
  &scc_info_EventReference_Common_2fevent_5freference_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fevent_5freference_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fevent_5freference_2eproto = {
  false, false, descriptor_table_protodef_Common_2fevent_5freference_2eproto, "Common/event_reference.proto", 495,
  &descriptor_table_Common_2fevent_5freference_2eproto_once, descriptor_table_Common_2fevent_5freference_2eproto_sccs, descriptor_table_Common_2fevent_5freference_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Common_2fevent_5freference_2eproto::offsets,
  file_level_metadata_Common_2fevent_5freference_2eproto, 1, file_level_enum_descriptors_Common_2fevent_5freference_2eproto, file_level_service_descriptors_Common_2fevent_5freference_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fevent_5freference_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fevent_5freference_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class EventReference::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time(const EventReference* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EventReference::_Internal::reference_time(const EventReference* msg) {
  return *msg->reference_time_;
}
void EventReference::clear_reference_time() {
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
}
EventReference::EventReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.EventReference)
}
EventReference::EventReference(const EventReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_code().empty()) {
    reference_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_code(), 
      GetArena());
  }
  if (from._internal_has_reference_time()) {
    reference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reference_time_);
  } else {
    reference_time_ = nullptr;
  }
  ::memcpy(&event_reference_type_, &from.event_reference_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&referred_actor_id_) -
    reinterpret_cast<char*>(&event_reference_type_)) + sizeof(referred_actor_id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.EventReference)
}

void EventReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventReference_Common_2fevent_5freference_2eproto.base);
  reference_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reference_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&referred_actor_id_) -
      reinterpret_cast<char*>(&reference_time_)) + sizeof(referred_actor_id_));
}

EventReference::~EventReference() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.EventReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_time_;
}

void EventReference::ArenaDtor(void* object) {
  EventReference* _this = reinterpret_cast< EventReference* >(object);
  (void)_this;
}
void EventReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventReference& EventReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventReference_Common_2fevent_5freference_2eproto.base);
  return *internal_default_instance();
}


void EventReference::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.EventReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_code_.ClearToEmpty();
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
  ::memset(&event_reference_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&referred_actor_id_) -
      reinterpret_cast<char*>(&event_reference_type_)) + sizeof(referred_actor_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.EventReferenceType event_reference_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_reference_type(static_cast<::farm::nurture::core::contracts::common::EventReferenceType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorType referred_actor_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_referred_actor_type(static_cast<::farm::nurture::core::contracts::common::ActorType>(val));
        } else goto handle_unusual;
        continue;
      // int64 referred_actor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          referred_actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reference_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reference_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.EventReference.reference_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.EventReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.EventReferenceType event_reference_type = 1;
  if (this->event_reference_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_reference_type(), target);
  }

  // .farm.nurture.core.contracts.common.ActorType referred_actor_type = 2;
  if (this->referred_actor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_referred_actor_type(), target);
  }

  // int64 referred_actor_id = 3;
  if (this->referred_actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_referred_actor_id(), target);
  }

  // .google.protobuf.Timestamp reference_time = 4;
  if (this->has_reference_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reference_time(this), target, stream);
  }

  // string reference_code = 5;
  if (this->reference_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_code().data(), static_cast<int>(this->_internal_reference_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.EventReference.reference_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reference_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.EventReference)
  return target;
}

size_t EventReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.EventReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_code = 5;
  if (this->reference_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_code());
  }

  // .google.protobuf.Timestamp reference_time = 4;
  if (this->has_reference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_time_);
  }

  // .farm.nurture.core.contracts.common.EventReferenceType event_reference_type = 1;
  if (this->event_reference_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_reference_type());
  }

  // .farm.nurture.core.contracts.common.ActorType referred_actor_type = 2;
  if (this->referred_actor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_referred_actor_type());
  }

  // int64 referred_actor_id = 3;
  if (this->referred_actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_referred_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.EventReference)
  GOOGLE_DCHECK_NE(&from, this);
  const EventReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.EventReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.EventReference)
    MergeFrom(*source);
  }
}

void EventReference::MergeFrom(const EventReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.EventReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_code().size() > 0) {
    _internal_set_reference_code(from._internal_reference_code());
  }
  if (from.has_reference_time()) {
    _internal_mutable_reference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_reference_time());
  }
  if (from.event_reference_type() != 0) {
    _internal_set_event_reference_type(from._internal_event_reference_type());
  }
  if (from.referred_actor_type() != 0) {
    _internal_set_referred_actor_type(from._internal_referred_actor_type());
  }
  if (from.referred_actor_id() != 0) {
    _internal_set_referred_actor_id(from._internal_referred_actor_id());
  }
}

void EventReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.EventReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventReference::CopyFrom(const EventReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.EventReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventReference::IsInitialized() const {
  return true;
}

void EventReference::InternalSwap(EventReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_code_.Swap(&other->reference_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventReference, referred_actor_id_)
      + sizeof(EventReference::referred_actor_id_)
      - PROTOBUF_FIELD_OFFSET(EventReference, reference_time_)>(
          reinterpret_cast<char*>(&reference_time_),
          reinterpret_cast<char*>(&other->reference_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventReference::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::EventReference* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::EventReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::EventReference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
