// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/event_reference.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fevent_5freference_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fevent_5freference_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fevent_5freference_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fevent_5freference_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fevent_5freference_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class EventReference;
class EventReferenceDefaultTypeInternal;
extern EventReferenceDefaultTypeInternal _EventReference_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::EventReference* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::EventReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class EventReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.EventReference) */ {
 public:
  inline EventReference() : EventReference(nullptr) {}
  virtual ~EventReference();

  EventReference(const EventReference& from);
  EventReference(EventReference&& from) noexcept
    : EventReference() {
    *this = ::std::move(from);
  }

  inline EventReference& operator=(const EventReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventReference& operator=(EventReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventReference& default_instance();

  static inline const EventReference* internal_default_instance() {
    return reinterpret_cast<const EventReference*>(
               &_EventReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventReference& a, EventReference& b) {
    a.Swap(&b);
  }
  inline void Swap(EventReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventReference* New() const final {
    return CreateMaybeMessage<EventReference>(nullptr);
  }

  EventReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventReference& from);
  void MergeFrom(const EventReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.EventReference";
  }
  protected:
  explicit EventReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fevent_5freference_2eproto);
    return ::descriptor_table_Common_2fevent_5freference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceCodeFieldNumber = 5,
    kReferenceTimeFieldNumber = 4,
    kEventReferenceTypeFieldNumber = 1,
    kReferredActorTypeFieldNumber = 2,
    kReferredActorIdFieldNumber = 3,
  };
  // string reference_code = 5;
  void clear_reference_code();
  const std::string& reference_code() const;
  void set_reference_code(const std::string& value);
  void set_reference_code(std::string&& value);
  void set_reference_code(const char* value);
  void set_reference_code(const char* value, size_t size);
  std::string* mutable_reference_code();
  std::string* release_reference_code();
  void set_allocated_reference_code(std::string* reference_code);
  private:
  const std::string& _internal_reference_code() const;
  void _internal_set_reference_code(const std::string& value);
  std::string* _internal_mutable_reference_code();
  public:

  // .google.protobuf.Timestamp reference_time = 4;
  bool has_reference_time() const;
  private:
  bool _internal_has_reference_time() const;
  public:
  void clear_reference_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_time();
  public:
  void unsafe_arena_set_allocated_reference_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_time();

  // .farm.nurture.core.contracts.common.EventReferenceType event_reference_type = 1;
  void clear_event_reference_type();
  ::farm::nurture::core::contracts::common::EventReferenceType event_reference_type() const;
  void set_event_reference_type(::farm::nurture::core::contracts::common::EventReferenceType value);
  private:
  ::farm::nurture::core::contracts::common::EventReferenceType _internal_event_reference_type() const;
  void _internal_set_event_reference_type(::farm::nurture::core::contracts::common::EventReferenceType value);
  public:

  // .farm.nurture.core.contracts.common.ActorType referred_actor_type = 2;
  void clear_referred_actor_type();
  ::farm::nurture::core::contracts::common::ActorType referred_actor_type() const;
  void set_referred_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  private:
  ::farm::nurture::core::contracts::common::ActorType _internal_referred_actor_type() const;
  void _internal_set_referred_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  public:

  // int64 referred_actor_id = 3;
  void clear_referred_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 referred_actor_id() const;
  void set_referred_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_referred_actor_id() const;
  void _internal_set_referred_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.EventReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_code_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reference_time_;
  int event_reference_type_;
  int referred_actor_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 referred_actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fevent_5freference_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventReference

// .farm.nurture.core.contracts.common.EventReferenceType event_reference_type = 1;
inline void EventReference::clear_event_reference_type() {
  event_reference_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::EventReferenceType EventReference::_internal_event_reference_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::EventReferenceType >(event_reference_type_);
}
inline ::farm::nurture::core::contracts::common::EventReferenceType EventReference::event_reference_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.EventReference.event_reference_type)
  return _internal_event_reference_type();
}
inline void EventReference::_internal_set_event_reference_type(::farm::nurture::core::contracts::common::EventReferenceType value) {
  
  event_reference_type_ = value;
}
inline void EventReference::set_event_reference_type(::farm::nurture::core::contracts::common::EventReferenceType value) {
  _internal_set_event_reference_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.EventReference.event_reference_type)
}

// .farm.nurture.core.contracts.common.ActorType referred_actor_type = 2;
inline void EventReference::clear_referred_actor_type() {
  referred_actor_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ActorType EventReference::_internal_referred_actor_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ActorType >(referred_actor_type_);
}
inline ::farm::nurture::core::contracts::common::ActorType EventReference::referred_actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.EventReference.referred_actor_type)
  return _internal_referred_actor_type();
}
inline void EventReference::_internal_set_referred_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  
  referred_actor_type_ = value;
}
inline void EventReference::set_referred_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  _internal_set_referred_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.EventReference.referred_actor_type)
}

// int64 referred_actor_id = 3;
inline void EventReference::clear_referred_actor_id() {
  referred_actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventReference::_internal_referred_actor_id() const {
  return referred_actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventReference::referred_actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.EventReference.referred_actor_id)
  return _internal_referred_actor_id();
}
inline void EventReference::_internal_set_referred_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  referred_actor_id_ = value;
}
inline void EventReference::set_referred_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_referred_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.EventReference.referred_actor_id)
}

// .google.protobuf.Timestamp reference_time = 4;
inline bool EventReference::_internal_has_reference_time() const {
  return this != internal_default_instance() && reference_time_ != nullptr;
}
inline bool EventReference::has_reference_time() const {
  return _internal_has_reference_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventReference::_internal_reference_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reference_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventReference::reference_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.EventReference.reference_time)
  return _internal_reference_time();
}
inline void EventReference::unsafe_arena_set_allocated_reference_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  reference_time_ = reference_time;
  if (reference_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.EventReference.reference_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventReference::release_reference_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventReference::unsafe_arena_release_reference_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.EventReference.reference_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventReference::_internal_mutable_reference_time() {
  
  if (reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reference_time_ = p;
  }
  return reference_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventReference::mutable_reference_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.EventReference.reference_time)
  return _internal_mutable_reference_time();
}
inline void EventReference::set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  if (reference_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time)->GetArena();
    if (message_arena != submessage_arena) {
      reference_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_time, submessage_arena);
    }
    
  } else {
    
  }
  reference_time_ = reference_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.EventReference.reference_time)
}

// string reference_code = 5;
inline void EventReference::clear_reference_code() {
  reference_code_.ClearToEmpty();
}
inline const std::string& EventReference::reference_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.EventReference.reference_code)
  return _internal_reference_code();
}
inline void EventReference::set_reference_code(const std::string& value) {
  _internal_set_reference_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.EventReference.reference_code)
}
inline std::string* EventReference::mutable_reference_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.EventReference.reference_code)
  return _internal_mutable_reference_code();
}
inline const std::string& EventReference::_internal_reference_code() const {
  return reference_code_.Get();
}
inline void EventReference::_internal_set_reference_code(const std::string& value) {
  
  reference_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EventReference::set_reference_code(std::string&& value) {
  
  reference_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.EventReference.reference_code)
}
inline void EventReference::set_reference_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.EventReference.reference_code)
}
inline void EventReference::set_reference_code(const char* value,
    size_t size) {
  
  reference_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.EventReference.reference_code)
}
inline std::string* EventReference::_internal_mutable_reference_code() {
  
  return reference_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EventReference::release_reference_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.EventReference.reference_code)
  return reference_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventReference::set_allocated_reference_code(std::string* reference_code) {
  if (reference_code != nullptr) {
    
  } else {
    
  }
  reference_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.EventReference.reference_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fevent_5freference_2eproto
