// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/guaranteed_amount_to_premium.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class Discount;
class DiscountDefaultTypeInternal;
extern DiscountDefaultTypeInternal _Discount_default_instance_;
class GuaranteedAmountToPremium;
class GuaranteedAmountToPremiumDefaultTypeInternal;
extern GuaranteedAmountToPremiumDefaultTypeInternal _GuaranteedAmountToPremium_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::Discount* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Discount>(Arena*);
template<> ::farm::nurture::core::contracts::common::GuaranteedAmountToPremium* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::GuaranteedAmountToPremium>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class GuaranteedAmountToPremium PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.GuaranteedAmountToPremium) */ {
 public:
  inline GuaranteedAmountToPremium() : GuaranteedAmountToPremium(nullptr) {}
  virtual ~GuaranteedAmountToPremium();

  GuaranteedAmountToPremium(const GuaranteedAmountToPremium& from);
  GuaranteedAmountToPremium(GuaranteedAmountToPremium&& from) noexcept
    : GuaranteedAmountToPremium() {
    *this = ::std::move(from);
  }

  inline GuaranteedAmountToPremium& operator=(const GuaranteedAmountToPremium& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuaranteedAmountToPremium& operator=(GuaranteedAmountToPremium&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuaranteedAmountToPremium& default_instance();

  static inline const GuaranteedAmountToPremium* internal_default_instance() {
    return reinterpret_cast<const GuaranteedAmountToPremium*>(
               &_GuaranteedAmountToPremium_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GuaranteedAmountToPremium& a, GuaranteedAmountToPremium& b) {
    a.Swap(&b);
  }
  inline void Swap(GuaranteedAmountToPremium* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuaranteedAmountToPremium* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuaranteedAmountToPremium* New() const final {
    return CreateMaybeMessage<GuaranteedAmountToPremium>(nullptr);
  }

  GuaranteedAmountToPremium* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuaranteedAmountToPremium>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuaranteedAmountToPremium& from);
  void MergeFrom(const GuaranteedAmountToPremium& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuaranteedAmountToPremium* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.GuaranteedAmountToPremium";
  }
  protected:
  explicit GuaranteedAmountToPremium(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto);
    return ::descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscountFieldNumber = 2,
    kGuaranteedAmountFieldNumber = 1,
    kPremiumAmountFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.Discount discount = 2;
  bool has_discount() const;
  private:
  bool _internal_has_discount() const;
  public:
  void clear_discount();
  const ::farm::nurture::core::contracts::common::Discount& discount() const;
  ::farm::nurture::core::contracts::common::Discount* release_discount();
  ::farm::nurture::core::contracts::common::Discount* mutable_discount();
  void set_allocated_discount(::farm::nurture::core::contracts::common::Discount* discount);
  private:
  const ::farm::nurture::core::contracts::common::Discount& _internal_discount() const;
  ::farm::nurture::core::contracts::common::Discount* _internal_mutable_discount();
  public:
  void unsafe_arena_set_allocated_discount(
      ::farm::nurture::core::contracts::common::Discount* discount);
  ::farm::nurture::core::contracts::common::Discount* unsafe_arena_release_discount();

  // double guaranteedAmount = 1;
  void clear_guaranteedamount();
  double guaranteedamount() const;
  void set_guaranteedamount(double value);
  private:
  double _internal_guaranteedamount() const;
  void _internal_set_guaranteedamount(double value);
  public:

  // double premiumAmount = 3;
  void clear_premiumamount();
  double premiumamount() const;
  void set_premiumamount(double value);
  private:
  double _internal_premiumamount() const;
  void _internal_set_premiumamount(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::Discount* discount_;
  double guaranteedamount_;
  double premiumamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto;
};
// -------------------------------------------------------------------

class Discount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Discount) */ {
 public:
  inline Discount() : Discount(nullptr) {}
  virtual ~Discount();

  Discount(const Discount& from);
  Discount(Discount&& from) noexcept
    : Discount() {
    *this = ::std::move(from);
  }

  inline Discount& operator=(const Discount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Discount& operator=(Discount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Discount& default_instance();

  static inline const Discount* internal_default_instance() {
    return reinterpret_cast<const Discount*>(
               &_Discount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Discount& a, Discount& b) {
    a.Swap(&b);
  }
  inline void Swap(Discount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Discount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Discount* New() const final {
    return CreateMaybeMessage<Discount>(nullptr);
  }

  Discount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Discount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Discount& from);
  void MergeFrom(const Discount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Discount";
  }
  protected:
  explicit Discount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto);
    return ::descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDiscountedPriceFieldNumber = 2,
    kDiscountInPercentageFieldNumber = 3,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double discountedPrice = 2;
  void clear_discountedprice();
  double discountedprice() const;
  void set_discountedprice(double value);
  private:
  double _internal_discountedprice() const;
  void _internal_set_discountedprice(double value);
  public:

  // double discountInPercentage = 3;
  void clear_discountinpercentage();
  double discountinpercentage() const;
  void set_discountinpercentage(double value);
  private:
  double _internal_discountinpercentage() const;
  void _internal_set_discountinpercentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Discount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double discountedprice_;
  double discountinpercentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GuaranteedAmountToPremium

// double guaranteedAmount = 1;
inline void GuaranteedAmountToPremium::clear_guaranteedamount() {
  guaranteedamount_ = 0;
}
inline double GuaranteedAmountToPremium::_internal_guaranteedamount() const {
  return guaranteedamount_;
}
inline double GuaranteedAmountToPremium::guaranteedamount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.guaranteedAmount)
  return _internal_guaranteedamount();
}
inline void GuaranteedAmountToPremium::_internal_set_guaranteedamount(double value) {
  
  guaranteedamount_ = value;
}
inline void GuaranteedAmountToPremium::set_guaranteedamount(double value) {
  _internal_set_guaranteedamount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.guaranteedAmount)
}

// .farm.nurture.core.contracts.common.Discount discount = 2;
inline bool GuaranteedAmountToPremium::_internal_has_discount() const {
  return this != internal_default_instance() && discount_ != nullptr;
}
inline bool GuaranteedAmountToPremium::has_discount() const {
  return _internal_has_discount();
}
inline void GuaranteedAmountToPremium::clear_discount() {
  if (GetArena() == nullptr && discount_ != nullptr) {
    delete discount_;
  }
  discount_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Discount& GuaranteedAmountToPremium::_internal_discount() const {
  const ::farm::nurture::core::contracts::common::Discount* p = discount_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Discount&>(
      ::farm::nurture::core::contracts::common::_Discount_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Discount& GuaranteedAmountToPremium::discount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.discount)
  return _internal_discount();
}
inline void GuaranteedAmountToPremium::unsafe_arena_set_allocated_discount(
    ::farm::nurture::core::contracts::common::Discount* discount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discount_);
  }
  discount_ = discount;
  if (discount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.discount)
}
inline ::farm::nurture::core::contracts::common::Discount* GuaranteedAmountToPremium::release_discount() {
  
  ::farm::nurture::core::contracts::common::Discount* temp = discount_;
  discount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Discount* GuaranteedAmountToPremium::unsafe_arena_release_discount() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.discount)
  
  ::farm::nurture::core::contracts::common::Discount* temp = discount_;
  discount_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Discount* GuaranteedAmountToPremium::_internal_mutable_discount() {
  
  if (discount_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Discount>(GetArena());
    discount_ = p;
  }
  return discount_;
}
inline ::farm::nurture::core::contracts::common::Discount* GuaranteedAmountToPremium::mutable_discount() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.discount)
  return _internal_mutable_discount();
}
inline void GuaranteedAmountToPremium::set_allocated_discount(::farm::nurture::core::contracts::common::Discount* discount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete discount_;
  }
  if (discount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discount);
    if (message_arena != submessage_arena) {
      discount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discount, submessage_arena);
    }
    
  } else {
    
  }
  discount_ = discount;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.discount)
}

// double premiumAmount = 3;
inline void GuaranteedAmountToPremium::clear_premiumamount() {
  premiumamount_ = 0;
}
inline double GuaranteedAmountToPremium::_internal_premiumamount() const {
  return premiumamount_;
}
inline double GuaranteedAmountToPremium::premiumamount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.premiumAmount)
  return _internal_premiumamount();
}
inline void GuaranteedAmountToPremium::_internal_set_premiumamount(double value) {
  
  premiumamount_ = value;
}
inline void GuaranteedAmountToPremium::set_premiumamount(double value) {
  _internal_set_premiumamount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GuaranteedAmountToPremium.premiumAmount)
}

// -------------------------------------------------------------------

// Discount

// int64 id = 1;
inline void Discount::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Discount::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Discount::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Discount.id)
  return _internal_id();
}
inline void Discount::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Discount::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Discount.id)
}

// double discountedPrice = 2;
inline void Discount::clear_discountedprice() {
  discountedprice_ = 0;
}
inline double Discount::_internal_discountedprice() const {
  return discountedprice_;
}
inline double Discount::discountedprice() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Discount.discountedPrice)
  return _internal_discountedprice();
}
inline void Discount::_internal_set_discountedprice(double value) {
  
  discountedprice_ = value;
}
inline void Discount::set_discountedprice(double value) {
  _internal_set_discountedprice(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Discount.discountedPrice)
}

// double discountInPercentage = 3;
inline void Discount::clear_discountinpercentage() {
  discountinpercentage_ = 0;
}
inline double Discount::_internal_discountinpercentage() const {
  return discountinpercentage_;
}
inline double Discount::discountinpercentage() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Discount.discountInPercentage)
  return _internal_discountinpercentage();
}
inline void Discount::_internal_set_discountinpercentage(double value) {
  
  discountinpercentage_ = value;
}
inline void Discount::set_discountinpercentage(double value) {
  _internal_set_discountinpercentage(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Discount.discountInPercentage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto
