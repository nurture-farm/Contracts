// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/headers.proto

#include "Common/headers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActorEventTrace_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppNameType_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class RequestHeadersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeaders> _instance;
} _RequestHeaders_default_instance_;
class AttribsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribs> _instance;
} _Attribs_default_instance_;
class DataPlatformMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPlatformMessage> _instance;
} _DataPlatformMessage_default_instance_;
class AppNameTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppNameType> _instance;
} _AppNameType_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_AppNameType_Common_2fheaders_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_AppNameType_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::AppNameType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppNameType_Common_2fheaders_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppNameType_Common_2fheaders_2eproto}, {}};

static void InitDefaultsscc_info_Attribs_Common_2fheaders_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Attribs_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Attribs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Attribs_Common_2fheaders_2eproto}, {}};

static void InitDefaultsscc_info_DataPlatformMessage_Common_2fheaders_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_DataPlatformMessage_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::DataPlatformMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DataPlatformMessage_Common_2fheaders_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DataPlatformMessage_Common_2fheaders_2eproto}, {
      &scc_info_AppNameType_Common_2fheaders_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_RequestHeaders_Common_2fheaders_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::RequestHeaders();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeaders_Common_2fheaders_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestHeaders_Common_2fheaders_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_ActorEventTrace_Common_2fentities_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fheaders_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fheaders_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fheaders_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fheaders_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, clientid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, tracingid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, tracedetails_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, i18n_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, accuracy_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, experimentid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, languagecode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, securitytoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, prefferedusername_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, language_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, country_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, authtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, apptoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, updatedbyevent_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, apptype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, appversion_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, sessionid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, user_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RequestHeaders, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribs, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribs, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, eventname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, externalid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, dpsource_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, versioncode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, versionname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, osversion_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, appnametype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, eventtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, sessionid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, eventdata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, eventsubtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DataPlatformMessage, eventindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::AppNameType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::AppNameType, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::AppNameType, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::RequestHeaders)},
  { 28, -1, sizeof(::farm::nurture::core::contracts::common::Attribs)},
  { 35, -1, sizeof(::farm::nurture::core::contracts::common::DataPlatformMessage)},
  { 55, -1, sizeof(::farm::nurture::core::contracts::common::AppNameType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Attribs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_DataPlatformMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_AppNameType_default_instance_),
};

const char descriptor_table_protodef_Common_2fheaders_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024Common/headers.proto\022\"farm.nurture.cor"
  "e.contracts.common\032\022Common/enums.proto\032\025"
  "Common/entities.proto\032\037google/protobuf/t"
  "imestamp.proto\"\301\006\n\016RequestHeaders\022\020\n\010cli"
  "entId\030\001 \001(\t\022\021\n\ttracingId\030\002 \001(\t\022\024\n\014traceD"
  "etails\030\003 \001(\010\022\014\n\004i18N\030\004 \001(\t\022\020\n\010latitude\030\005"
  " \001(\002\022\021\n\tlongitude\030\006 \001(\002\022\020\n\010accuracy\030\007 \001("
  "\002\022\024\n\014experimentId\030\010 \001(\t\022F\n\014languageCode\030"
  "\t \001(\01620.farm.nurture.core.contracts.comm"
  "on.LanguageCode\022\025\n\rsecurityToken\030\n \001(\t\022<"
  "\n\007attribs\030\013 \003(\0132+.farm.nurture.core.cont"
  "racts.common.Attribs\022\031\n\021prefferedUserNam"
  "e\030\014 \001(\t\022>\n\010language\030\r \001(\0162,.farm.nurture"
  ".core.contracts.common.Language\022<\n\007count"
  "ry\030\016 \001(\0162+.farm.nurture.core.contracts.c"
  "ommon.Country\022\021\n\tauthToken\030\017 \001(\t\022\020\n\010appT"
  "oken\030\020 \001(\t\022K\n\016updatedByEvent\030\021 \001(\01323.far"
  "m.nurture.core.contracts.common.ActorEve"
  "ntTrace\022<\n\007appType\030\022 \001(\0162+.farm.nurture."
  "core.contracts.common.AppType\022\022\n\nappVers"
  "ion\030\023 \001(\003\022\021\n\tsessionId\030\024 \001(\t\022\?\n\007appName\030"
  "\025 \001(\0162..farm.nurture.core.contracts.comm"
  "on.ClientType\0229\n\004user\030\026 \001(\0132+.farm.nurtu"
  "re.core.contracts.common.ActorID\022\020\n\010devi"
  "ceId\030\027 \001(\t\"%\n\007Attribs\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t\"\360\004\n\023DataPlatformMessage\022\021\n\teve"
  "ntName\030\001 \001(\t\022\022\n\nexternalId\030\002 \001(\t\022>\n\010dpSo"
  "urce\030\003 \001(\0162,.farm.nurture.core.contracts"
  ".common.DPSource\022\023\n\013versionCode\030\004 \001(\005\022\023\n"
  "\013versionName\030\005 \001(\t\022\021\n\tosVersion\030\006 \001(\t\022D\n"
  "\013appNameType\030\007 \001(\0132/.farm.nurture.core.c"
  "ontracts.common.AppNameType\022@\n\teventType"
  "\030\010 \001(\0162-.farm.nurture.core.contracts.com"
  "mon.EventType\022\021\n\tsessionId\030\t \001(\003\022-\n\ttime"
  "stamp\030\n \001(\0132\032.google.protobuf.Timestamp\022"
  ":\n\005actor\030\013 \001(\0132+.farm.nurture.core.contr"
  "acts.common.ActorID\022\021\n\teventData\030\014 \001(\014\022F"
  "\n\014eventSubType\030\r \001(\01620.farm.nurture.core"
  ".contracts.common.EventSubType\022@\n\tnamesp"
  "ace\030\016 \001(\0162-.farm.nurture.core.contracts."
  "common.NameSpace\022\022\n\neventIndex\030\017 \001(\005\")\n\013"
  "AppNameType\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\tB"
  "R\n\"farm.nurture.core.contracts.commonP\001Z"
  "\'code.nurture.farm/Core/Contracts/Common"
  "\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fheaders_2eproto_deps[3] = {
  &::descriptor_table_Common_2fentities_2eproto,
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fheaders_2eproto_sccs[4] = {
  &scc_info_AppNameType_Common_2fheaders_2eproto.base,
  &scc_info_Attribs_Common_2fheaders_2eproto.base,
  &scc_info_DataPlatformMessage_Common_2fheaders_2eproto.base,
  &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fheaders_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fheaders_2eproto = {
  false, false, descriptor_table_protodef_Common_2fheaders_2eproto, "Common/headers.proto", 1771,
  &descriptor_table_Common_2fheaders_2eproto_once, descriptor_table_Common_2fheaders_2eproto_sccs, descriptor_table_Common_2fheaders_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_Common_2fheaders_2eproto::offsets,
  file_level_metadata_Common_2fheaders_2eproto, 4, file_level_enum_descriptors_Common_2fheaders_2eproto, file_level_service_descriptors_Common_2fheaders_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fheaders_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fheaders_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class RequestHeaders::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorEventTrace& updatedbyevent(const RequestHeaders* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& user(const RequestHeaders* msg);
};

const ::farm::nurture::core::contracts::common::ActorEventTrace&
RequestHeaders::_Internal::updatedbyevent(const RequestHeaders* msg) {
  return *msg->updatedbyevent_;
}
const ::farm::nurture::core::contracts::common::ActorID&
RequestHeaders::_Internal::user(const RequestHeaders* msg) {
  return *msg->user_;
}
void RequestHeaders::clear_updatedbyevent() {
  if (GetArena() == nullptr && updatedbyevent_ != nullptr) {
    delete updatedbyevent_;
  }
  updatedbyevent_ = nullptr;
}
void RequestHeaders::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
RequestHeaders::RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.RequestHeaders)
}
RequestHeaders::RequestHeaders(const RequestHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  tracingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tracingid().empty()) {
    tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracingid(), 
      GetArena());
  }
  i18n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_i18n().empty()) {
    i18n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_i18n(), 
      GetArena());
  }
  experimentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_experimentid().empty()) {
    experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_experimentid(), 
      GetArena());
  }
  securitytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_securitytoken().empty()) {
    securitytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_securitytoken(), 
      GetArena());
  }
  prefferedusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefferedusername().empty()) {
    prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefferedusername(), 
      GetArena());
  }
  authtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authtoken().empty()) {
    authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authtoken(), 
      GetArena());
  }
  apptoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apptoken().empty()) {
    apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apptoken(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  if (from._internal_has_updatedbyevent()) {
    updatedbyevent_ = new ::farm::nurture::core::contracts::common::ActorEventTrace(*from.updatedbyevent_);
  } else {
    updatedbyevent_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::farm::nurture::core::contracts::common::ActorID(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&tracedetails_, &from.tracedetails_,
    static_cast<size_t>(reinterpret_cast<char*>(&appname_) -
    reinterpret_cast<char*>(&tracedetails_)) + sizeof(appname_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.RequestHeaders)
}

void RequestHeaders::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestHeaders_Common_2fheaders_2eproto.base);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i18n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  experimentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefferedusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updatedbyevent_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&appname_) -
      reinterpret_cast<char*>(&updatedbyevent_)) + sizeof(appname_));
}

RequestHeaders::~RequestHeaders() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.RequestHeaders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracingid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i18n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  experimentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefferedusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updatedbyevent_;
  if (this != internal_default_instance()) delete user_;
}

void RequestHeaders::ArenaDtor(void* object) {
  RequestHeaders* _this = reinterpret_cast< RequestHeaders* >(object);
  (void)_this;
}
void RequestHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeaders& RequestHeaders::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeaders_Common_2fheaders_2eproto.base);
  return *internal_default_instance();
}


void RequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.RequestHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  clientid_.ClearToEmpty();
  tracingid_.ClearToEmpty();
  i18n_.ClearToEmpty();
  experimentid_.ClearToEmpty();
  securitytoken_.ClearToEmpty();
  prefferedusername_.ClearToEmpty();
  authtoken_.ClearToEmpty();
  apptoken_.ClearToEmpty();
  sessionid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  if (GetArena() == nullptr && updatedbyevent_ != nullptr) {
    delete updatedbyevent_;
  }
  updatedbyevent_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&tracedetails_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appname_) -
      reinterpret_cast<char*>(&tracedetails_)) + sizeof(appname_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tracingId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tracingid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.tracingId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool traceDetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tracedetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i18N = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i18n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.i18N"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accuracy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string experimentId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_experimentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.experimentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode languageCode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_languagecode(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // string securityToken = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_securitytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.securityToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string prefferedUserName = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_prefferedusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Language language = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::farm::nurture::core::contracts::common::Language>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Country country = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_country(static_cast<::farm::nurture::core::contracts::common::Country>(val));
        } else goto handle_unusual;
        continue;
      // string authToken = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_authtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.authToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appToken = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_apptoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.appToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorEventTrace updatedByEvent = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedbyevent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AppType appType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apptype(static_cast<::farm::nurture::core::contracts::common::AppType>(val));
        } else goto handle_unusual;
        continue;
      // int64 appVersion = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          appversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sessionId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.sessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType appName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appname(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID user = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RequestHeaders.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeaders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.RequestHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string tracingId = 2;
  if (this->tracingid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracingid().data(), static_cast<int>(this->_internal_tracingid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.tracingId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tracingid(), target);
  }

  // bool traceDetails = 3;
  if (this->tracedetails() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tracedetails(), target);
  }

  // string i18N = 4;
  if (this->i18n().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i18n().data(), static_cast<int>(this->_internal_i18n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.i18N");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i18n(), target);
  }

  // float latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_latitude(), target);
  }

  // float longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_longitude(), target);
  }

  // float accuracy = 7;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_accuracy(), target);
  }

  // string experimentId = 8;
  if (this->experimentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_experimentid().data(), static_cast<int>(this->_internal_experimentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.experimentId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_experimentid(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 9;
  if (this->languagecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_languagecode(), target);
  }

  // string securityToken = 10;
  if (this->securitytoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitytoken().data(), static_cast<int>(this->_internal_securitytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.securityToken");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_securitytoken(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_attribs(i), target, stream);
  }

  // string prefferedUserName = 12;
  if (this->prefferedusername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefferedusername().data(), static_cast<int>(this->_internal_prefferedusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_prefferedusername(), target);
  }

  // .farm.nurture.core.contracts.common.Language language = 13;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_language(), target);
  }

  // .farm.nurture.core.contracts.common.Country country = 14;
  if (this->country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_country(), target);
  }

  // string authToken = 15;
  if (this->authtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authtoken().data(), static_cast<int>(this->_internal_authtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.authToken");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_authtoken(), target);
  }

  // string appToken = 16;
  if (this->apptoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apptoken().data(), static_cast<int>(this->_internal_apptoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.appToken");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_apptoken(), target);
  }

  // .farm.nurture.core.contracts.common.ActorEventTrace updatedByEvent = 17;
  if (this->has_updatedbyevent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::updatedbyevent(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.AppType appType = 18;
  if (this->apptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_apptype(), target);
  }

  // int64 appVersion = 19;
  if (this->appversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_appversion(), target);
  }

  // string sessionId = 20;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.sessionId");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_sessionid(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType appName = 21;
  if (this->appname() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_appname(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 22;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::user(this), target, stream);
  }

  // string deviceId = 23;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RequestHeaders.deviceId");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.RequestHeaders)
  return target;
}

size_t RequestHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.RequestHeaders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 11;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clientId = 1;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string tracingId = 2;
  if (this->tracingid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracingid());
  }

  // string i18N = 4;
  if (this->i18n().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_i18n());
  }

  // string experimentId = 8;
  if (this->experimentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_experimentid());
  }

  // string securityToken = 10;
  if (this->securitytoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitytoken());
  }

  // string prefferedUserName = 12;
  if (this->prefferedusername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefferedusername());
  }

  // string authToken = 15;
  if (this->authtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authtoken());
  }

  // string appToken = 16;
  if (this->apptoken().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apptoken());
  }

  // string sessionId = 20;
  if (this->sessionid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string deviceId = 23;
  if (this->deviceid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // .farm.nurture.core.contracts.common.ActorEventTrace updatedByEvent = 17;
  if (this->has_updatedbyevent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedbyevent_);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 22;
  if (this->has_user()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // bool traceDetails = 3;
  if (this->tracedetails() != 0) {
    total_size += 1 + 1;
  }

  // float latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float accuracy = 7;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 9;
  if (this->languagecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_languagecode());
  }

  // .farm.nurture.core.contracts.common.Language language = 13;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // .farm.nurture.core.contracts.common.Country country = 14;
  if (this->country() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_country());
  }

  // .farm.nurture.core.contracts.common.AppType appType = 18;
  if (this->apptype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apptype());
  }

  // int64 appVersion = 19;
  if (this->appversion() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_appversion());
  }

  // .farm.nurture.core.contracts.common.ClientType appName = 21;
  if (this->appname() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_appname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeaders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeaders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.RequestHeaders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.RequestHeaders)
    MergeFrom(*source);
  }
}

void RequestHeaders::MergeFrom(const RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.tracingid().size() > 0) {
    _internal_set_tracingid(from._internal_tracingid());
  }
  if (from.i18n().size() > 0) {
    _internal_set_i18n(from._internal_i18n());
  }
  if (from.experimentid().size() > 0) {
    _internal_set_experimentid(from._internal_experimentid());
  }
  if (from.securitytoken().size() > 0) {
    _internal_set_securitytoken(from._internal_securitytoken());
  }
  if (from.prefferedusername().size() > 0) {
    _internal_set_prefferedusername(from._internal_prefferedusername());
  }
  if (from.authtoken().size() > 0) {
    _internal_set_authtoken(from._internal_authtoken());
  }
  if (from.apptoken().size() > 0) {
    _internal_set_apptoken(from._internal_apptoken());
  }
  if (from.sessionid().size() > 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.has_updatedbyevent()) {
    _internal_mutable_updatedbyevent()->::farm::nurture::core::contracts::common::ActorEventTrace::MergeFrom(from._internal_updatedbyevent());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_user());
  }
  if (from.tracedetails() != 0) {
    _internal_set_tracedetails(from._internal_tracedetails());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.accuracy() <= 0 && from.accuracy() >= 0)) {
    _internal_set_accuracy(from._internal_accuracy());
  }
  if (from.languagecode() != 0) {
    _internal_set_languagecode(from._internal_languagecode());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.country() != 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.apptype() != 0) {
    _internal_set_apptype(from._internal_apptype());
  }
  if (from.appversion() != 0) {
    _internal_set_appversion(from._internal_appversion());
  }
  if (from.appname() != 0) {
    _internal_set_appname(from._internal_appname());
  }
}

void RequestHeaders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeaders::CopyFrom(const RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeaders::IsInitialized() const {
  return true;
}

void RequestHeaders::InternalSwap(RequestHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tracingid_.Swap(&other->tracingid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i18n_.Swap(&other->i18n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  experimentid_.Swap(&other->experimentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securitytoken_.Swap(&other->securitytoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefferedusername_.Swap(&other->prefferedusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authtoken_.Swap(&other->authtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apptoken_.Swap(&other->apptoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeaders, appname_)
      + sizeof(RequestHeaders::appname_)
      - PROTOBUF_FIELD_OFFSET(RequestHeaders, updatedbyevent_)>(
          reinterpret_cast<char*>(&updatedbyevent_),
          reinterpret_cast<char*>(&other->updatedbyevent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Attribs::_Internal {
 public:
};

Attribs::Attribs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Attribs)
}
Attribs::Attribs(const Attribs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Attribs)
}

void Attribs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribs_Common_2fheaders_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Attribs::~Attribs() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Attribs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attribs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attribs::ArenaDtor(void* object) {
  Attribs* _this = reinterpret_cast< Attribs* >(object);
  (void)_this;
}
void Attribs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attribs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribs& Attribs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribs_Common_2fheaders_2eproto.base);
  return *internal_default_instance();
}


void Attribs::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Attribs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Attribs.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Attribs.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Attribs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Attribs.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Attribs.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Attribs)
  return target;
}

size_t Attribs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Attribs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Attribs)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Attribs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Attribs)
    MergeFrom(*source);
  }
}

void Attribs::MergeFrom(const Attribs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Attribs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Attribs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Attribs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribs::CopyFrom(const Attribs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Attribs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribs::IsInitialized() const {
  return true;
}

void Attribs::InternalSwap(Attribs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPlatformMessage::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::AppNameType& appnametype(const DataPlatformMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const DataPlatformMessage* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const DataPlatformMessage* msg);
};

const ::farm::nurture::core::contracts::common::AppNameType&
DataPlatformMessage::_Internal::appnametype(const DataPlatformMessage* msg) {
  return *msg->appnametype_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DataPlatformMessage::_Internal::timestamp(const DataPlatformMessage* msg) {
  return *msg->timestamp_;
}
const ::farm::nurture::core::contracts::common::ActorID&
DataPlatformMessage::_Internal::actor(const DataPlatformMessage* msg) {
  return *msg->actor_;
}
void DataPlatformMessage::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void DataPlatformMessage::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
DataPlatformMessage::DataPlatformMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.DataPlatformMessage)
}
DataPlatformMessage::DataPlatformMessage(const DataPlatformMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eventname().empty()) {
    eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eventname(), 
      GetArena());
  }
  externalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_externalid().empty()) {
    externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_externalid(), 
      GetArena());
  }
  versionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_versionname().empty()) {
    versionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_versionname(), 
      GetArena());
  }
  osversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_osversion().empty()) {
    osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_osversion(), 
      GetArena());
  }
  eventdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eventdata().empty()) {
    eventdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eventdata(), 
      GetArena());
  }
  if (from._internal_has_appnametype()) {
    appnametype_ = new ::farm::nurture::core::contracts::common::AppNameType(*from.appnametype_);
  } else {
    appnametype_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  ::memcpy(&dpsource_, &from.dpsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventindex_) -
    reinterpret_cast<char*>(&dpsource_)) + sizeof(eventindex_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.DataPlatformMessage)
}

void DataPlatformMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPlatformMessage_Common_2fheaders_2eproto.base);
  eventname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  externalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&appnametype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&eventindex_) -
      reinterpret_cast<char*>(&appnametype_)) + sizeof(eventindex_));
}

DataPlatformMessage::~DataPlatformMessage() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.DataPlatformMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPlatformMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  eventname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  externalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete appnametype_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete actor_;
}

void DataPlatformMessage::ArenaDtor(void* object) {
  DataPlatformMessage* _this = reinterpret_cast< DataPlatformMessage* >(object);
  (void)_this;
}
void DataPlatformMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPlatformMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPlatformMessage& DataPlatformMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPlatformMessage_Common_2fheaders_2eproto.base);
  return *internal_default_instance();
}


void DataPlatformMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventname_.ClearToEmpty();
  externalid_.ClearToEmpty();
  versionname_.ClearToEmpty();
  osversion_.ClearToEmpty();
  eventdata_.ClearToEmpty();
  if (GetArena() == nullptr && appnametype_ != nullptr) {
    delete appnametype_;
  }
  appnametype_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  ::memset(&dpsource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventindex_) -
      reinterpret_cast<char*>(&dpsource_)) + sizeof(eventindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPlatformMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string eventName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_eventname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DataPlatformMessage.eventName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string externalId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_externalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DataPlatformMessage.externalId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.DPSource dpSource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dpsource(static_cast<::farm::nurture::core::contracts::common::DPSource>(val));
        } else goto handle_unusual;
        continue;
      // int32 versionCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          versioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string versionName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_versionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DataPlatformMessage.versionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string osVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_osversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DataPlatformMessage.osVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AppNameType appNameType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_appnametype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.EventType eventType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::farm::nurture::core::contracts::common::EventType>(val));
        } else goto handle_unusual;
        continue;
      // int64 sessionId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes eventData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_eventdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.EventSubType eventSubType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventsubtype(static_cast<::farm::nurture::core::contracts::common::EventSubType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace namespace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      // int32 eventIndex = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          eventindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPlatformMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string eventName = 1;
  if (this->eventname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventname().data(), static_cast<int>(this->_internal_eventname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DataPlatformMessage.eventName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_eventname(), target);
  }

  // string externalId = 2;
  if (this->externalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_externalid().data(), static_cast<int>(this->_internal_externalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DataPlatformMessage.externalId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_externalid(), target);
  }

  // .farm.nurture.core.contracts.common.DPSource dpSource = 3;
  if (this->dpsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dpsource(), target);
  }

  // int32 versionCode = 4;
  if (this->versioncode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_versioncode(), target);
  }

  // string versionName = 5;
  if (this->versionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_versionname().data(), static_cast<int>(this->_internal_versionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DataPlatformMessage.versionName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_versionname(), target);
  }

  // string osVersion = 6;
  if (this->osversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_osversion().data(), static_cast<int>(this->_internal_osversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DataPlatformMessage.osVersion");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_osversion(), target);
  }

  // .farm.nurture.core.contracts.common.AppNameType appNameType = 7;
  if (this->has_appnametype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::appnametype(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.EventType eventType = 8;
  if (this->eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_eventtype(), target);
  }

  // int64 sessionId = 9;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_sessionid(), target);
  }

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::timestamp(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 11;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::actor(this), target, stream);
  }

  // bytes eventData = 12;
  if (this->eventdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_eventdata(), target);
  }

  // .farm.nurture.core.contracts.common.EventSubType eventSubType = 13;
  if (this->eventsubtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_eventsubtype(), target);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 14;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_namespace_(), target);
  }

  // int32 eventIndex = 15;
  if (this->eventindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_eventindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.DataPlatformMessage)
  return target;
}

size_t DataPlatformMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string eventName = 1;
  if (this->eventname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventname());
  }

  // string externalId = 2;
  if (this->externalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_externalid());
  }

  // string versionName = 5;
  if (this->versionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_versionname());
  }

  // string osVersion = 6;
  if (this->osversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_osversion());
  }

  // bytes eventData = 12;
  if (this->eventdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_eventdata());
  }

  // .farm.nurture.core.contracts.common.AppNameType appNameType = 7;
  if (this->has_appnametype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *appnametype_);
  }

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 11;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .farm.nurture.core.contracts.common.DPSource dpSource = 3;
  if (this->dpsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dpsource());
  }

  // int32 versionCode = 4;
  if (this->versioncode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_versioncode());
  }

  // int64 sessionId = 9;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionid());
  }

  // .farm.nurture.core.contracts.common.EventType eventType = 8;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  // .farm.nurture.core.contracts.common.EventSubType eventSubType = 13;
  if (this->eventsubtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventsubtype());
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 14;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  // int32 eventIndex = 15;
  if (this->eventindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPlatformMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPlatformMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPlatformMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.DataPlatformMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.DataPlatformMessage)
    MergeFrom(*source);
  }
}

void DataPlatformMessage::MergeFrom(const DataPlatformMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eventname().size() > 0) {
    _internal_set_eventname(from._internal_eventname());
  }
  if (from.externalid().size() > 0) {
    _internal_set_externalid(from._internal_externalid());
  }
  if (from.versionname().size() > 0) {
    _internal_set_versionname(from._internal_versionname());
  }
  if (from.osversion().size() > 0) {
    _internal_set_osversion(from._internal_osversion());
  }
  if (from.eventdata().size() > 0) {
    _internal_set_eventdata(from._internal_eventdata());
  }
  if (from.has_appnametype()) {
    _internal_mutable_appnametype()->::farm::nurture::core::contracts::common::AppNameType::MergeFrom(from._internal_appnametype());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.dpsource() != 0) {
    _internal_set_dpsource(from._internal_dpsource());
  }
  if (from.versioncode() != 0) {
    _internal_set_versioncode(from._internal_versioncode());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  if (from.eventsubtype() != 0) {
    _internal_set_eventsubtype(from._internal_eventsubtype());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.eventindex() != 0) {
    _internal_set_eventindex(from._internal_eventindex());
  }
}

void DataPlatformMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPlatformMessage::CopyFrom(const DataPlatformMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.DataPlatformMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPlatformMessage::IsInitialized() const {
  return true;
}

void DataPlatformMessage::InternalSwap(DataPlatformMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  eventname_.Swap(&other->eventname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  externalid_.Swap(&other->externalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  versionname_.Swap(&other->versionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  osversion_.Swap(&other->osversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eventdata_.Swap(&other->eventdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPlatformMessage, eventindex_)
      + sizeof(DataPlatformMessage::eventindex_)
      - PROTOBUF_FIELD_OFFSET(DataPlatformMessage, appnametype_)>(
          reinterpret_cast<char*>(&appnametype_),
          reinterpret_cast<char*>(&other->appnametype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPlatformMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppNameType::_Internal {
 public:
};

AppNameType::AppNameType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.AppNameType)
}
AppNameType::AppNameType(const AppNameType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.AppNameType)
}

void AppNameType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppNameType_Common_2fheaders_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppNameType::~AppNameType() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.AppNameType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppNameType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppNameType::ArenaDtor(void* object) {
  AppNameType* _this = reinterpret_cast< AppNameType* >(object);
  (void)_this;
}
void AppNameType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppNameType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppNameType& AppNameType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppNameType_Common_2fheaders_2eproto.base);
  return *internal_default_instance();
}


void AppNameType::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.AppNameType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppNameType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.AppNameType.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.AppNameType.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppNameType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.AppNameType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.AppNameType.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.AppNameType.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.AppNameType)
  return target;
}

size_t AppNameType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.AppNameType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppNameType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.AppNameType)
  GOOGLE_DCHECK_NE(&from, this);
  const AppNameType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppNameType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.AppNameType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.AppNameType)
    MergeFrom(*source);
  }
}

void AppNameType::MergeFrom(const AppNameType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.AppNameType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void AppNameType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.AppNameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppNameType::CopyFrom(const AppNameType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.AppNameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppNameType::IsInitialized() const {
  return true;
}

void AppNameType::InternalSwap(AppNameType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppNameType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::RequestHeaders* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::RequestHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::RequestHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Attribs* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Attribs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Attribs >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::DataPlatformMessage* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::DataPlatformMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::DataPlatformMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::AppNameType* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::AppNameType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::AppNameType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
