// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/tags.proto

#include "Common/tags.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2ftags_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2ftags_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2ftags_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2ftags_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2ftags_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Common/tags.proto\022\"farm.nurture.core.c"
  "ontracts.common*\254\001\n\nReleaseTag\022\022\n\016NO_REL"
  "EASE_TAG\020\000\022\032\n\026RELEASE_TAG_2020_06_01\020\001\022\032"
  "\n\026RELEASE_TAG_2020_08_01\020\002\022\032\n\026RELEASE_TA"
  "G_2020_11_28\020\003\022\032\n\026RELEASE_TAG_2021_12_12"
  "\020\n\022\032\n\026RELEASE_TAG_2021_04_01\020\017BR\n\"farm.n"
  "urture.core.contracts.commonP\001Z\'code.nur"
  "ture.farm/Core/Contracts/Common\240\001\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2ftags_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2ftags_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2ftags_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2ftags_2eproto = {
  false, false, descriptor_table_protodef_Common_2ftags_2eproto, "Common/tags.proto", 322,
  &descriptor_table_Common_2ftags_2eproto_once, descriptor_table_Common_2ftags_2eproto_sccs, descriptor_table_Common_2ftags_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2ftags_2eproto::offsets,
  file_level_metadata_Common_2ftags_2eproto, 0, file_level_enum_descriptors_Common_2ftags_2eproto, file_level_service_descriptors_Common_2ftags_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2ftags_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2ftags_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReleaseTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2ftags_2eproto);
  return file_level_enum_descriptors_Common_2ftags_2eproto[0];
}
bool ReleaseTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 15:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
