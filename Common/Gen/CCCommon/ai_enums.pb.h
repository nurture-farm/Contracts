// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/ai_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fai_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fai_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fai_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fai_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fai_5fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

enum SpectraSource : int {
  NO_SPECTRA_SOURCE = 0,
  SIWARE_SPECTRA_SOURCE = 1,
  PURESCAN_SPECTRA_SOURCE = 2,
  SpectraSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpectraSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpectraSource_IsValid(int value);
constexpr SpectraSource SpectraSource_MIN = NO_SPECTRA_SOURCE;
constexpr SpectraSource SpectraSource_MAX = PURESCAN_SPECTRA_SOURCE;
constexpr int SpectraSource_ARRAYSIZE = SpectraSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpectraSource_descriptor();
template<typename T>
inline const std::string& SpectraSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpectraSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpectraSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpectraSource_descriptor(), enum_t_value);
}
inline bool SpectraSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpectraSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpectraSource>(
    SpectraSource_descriptor(), name, value);
}
enum Categories : int {
  CATEGORY_LOW = 0,
  CATEGORY_MEDIUM = 1,
  CATEGORY_HIGH = 2,
  ALKALINE = 100,
  ACIDIC = 101,
  NEUTRAL = 102,
  Categories_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Categories_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Categories_IsValid(int value);
constexpr Categories Categories_MIN = CATEGORY_LOW;
constexpr Categories Categories_MAX = NEUTRAL;
constexpr int Categories_ARRAYSIZE = Categories_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Categories_descriptor();
template<typename T>
inline const std::string& Categories_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Categories>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Categories_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Categories_descriptor(), enum_t_value);
}
inline bool Categories_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Categories* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Categories>(
    Categories_descriptor(), name, value);
}
enum BoundStatus : int {
  NO_BOUND_STATUS = 0,
  OUT_OF_BOUNDS = 1,
  BOUND_STATUS_SUCCESS = 2,
  BoundStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BoundStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BoundStatus_IsValid(int value);
constexpr BoundStatus BoundStatus_MIN = NO_BOUND_STATUS;
constexpr BoundStatus BoundStatus_MAX = BOUND_STATUS_SUCCESS;
constexpr int BoundStatus_ARRAYSIZE = BoundStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundStatus_descriptor();
template<typename T>
inline const std::string& BoundStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoundStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoundStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoundStatus_descriptor(), enum_t_value);
}
inline bool BoundStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoundStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoundStatus>(
    BoundStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::SpectraSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::SpectraSource>() {
  return ::farm::nurture::core::contracts::common::SpectraSource_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::Categories> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::Categories>() {
  return ::farm::nurture::core::contracts::common::Categories_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::core::contracts::common::BoundStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::core::contracts::common::BoundStatus>() {
  return ::farm::nurture::core::contracts::common::BoundStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fai_5fenums_2eproto
