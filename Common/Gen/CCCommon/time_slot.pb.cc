// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/time_slot.proto

#include "Common/time_slot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2ftime_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalTime_Common_2ftime_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class LocalTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalTime> _instance;
} _LocalTime_default_instance_;
class TimeIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeInterval> _instance;
} _TimeInterval_default_instance_;
class TimeSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSlot> _instance;
} _TimeSlot_default_instance_;
class DateSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateSlot> _instance;
} _DateSlot_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_DateSlot_Common_2ftime_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_DateSlot_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::DateSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateSlot_Common_2ftime_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DateSlot_Common_2ftime_5fslot_2eproto}, {}};

static void InitDefaultsscc_info_LocalTime_Common_2ftime_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_LocalTime_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::LocalTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalTime_Common_2ftime_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalTime_Common_2ftime_5fslot_2eproto}, {}};

static void InitDefaultsscc_info_TimeInterval_Common_2ftime_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_TimeInterval_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::TimeInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeInterval_Common_2ftime_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeInterval_Common_2ftime_5fslot_2eproto}, {
      &scc_info_LocalTime_Common_2ftime_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_TimeRange_Common_2ftime_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_TimeRange_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::TimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_Common_2ftime_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeRange_Common_2ftime_5fslot_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_TimeSlot_Common_2ftime_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_TimeSlot_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::TimeSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSlot_Common_2ftime_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TimeSlot_Common_2ftime_5fslot_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2ftime_5fslot_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2ftime_5fslot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2ftime_5fslot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2ftime_5fslot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocalTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocalTime, date_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocalTime, hour_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocalTime, minute_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocalTime, seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeInterval, timezone_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeInterval, start_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeInterval, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeSlot, start_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeSlot, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DateSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DateSlot, start_date_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DateSlot, end_date_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DateSlot, time_zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeRange, starttime_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TimeRange, endtime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::LocalTime)},
  { 9, -1, sizeof(::farm::nurture::core::contracts::common::TimeInterval)},
  { 17, -1, sizeof(::farm::nurture::core::contracts::common::TimeSlot)},
  { 24, -1, sizeof(::farm::nurture::core::contracts::common::DateSlot)},
  { 32, -1, sizeof(::farm::nurture::core::contracts::common::TimeRange)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_LocalTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_TimeInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_TimeSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_DateSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_TimeRange_default_instance_),
};

const char descriptor_table_protodef_Common_2ftime_5fslot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026Common/time_slot.proto\022\"farm.nurture.c"
  "ore.contracts.common\032\037google/protobuf/ti"
  "mestamp.proto\032\036google/protobuf/duration."
  "proto\"H\n\tLocalTime\022\014\n\004date\030\001 \001(\t\022\014\n\004hour"
  "\030\002 \001(\005\022\016\n\006minute\030\003 \001(\005\022\017\n\007seconds\030\004 \001(\005\""
  "\244\001\n\014TimeInterval\022\020\n\010timezone\030\001 \001(\t\022A\n\nst"
  "art_time\030\002 \001(\0132-.farm.nurture.core.contr"
  "acts.common.LocalTime\022\?\n\010end_time\030\003 \001(\0132"
  "-.farm.nurture.core.contracts.common.Loc"
  "alTime\"g\n\010TimeSlot\022.\n\nstart_time\030\001 \001(\0132\032"
  ".google.protobuf.Timestamp\022+\n\010duration\030\002"
  " \001(\0132\031.google.protobuf.Duration\"C\n\010DateS"
  "lot\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end_date\030\002 \001("
  "\t\022\021\n\ttime_zone\030\003 \001(\t\"g\n\tTimeRange\022-\n\tsta"
  "rtTime\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "\022+\n\007endTime\030\002 \001(\0132\032.google.protobuf.Time"
  "stampBS\n\"farm.nurture.core.contracts.com"
  "monP\001Z(github.com/nurture-farm/Contracts"
  "/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2ftime_5fslot_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2ftime_5fslot_2eproto_sccs[5] = {
  &scc_info_DateSlot_Common_2ftime_5fslot_2eproto.base,
  &scc_info_LocalTime_Common_2ftime_5fslot_2eproto.base,
  &scc_info_TimeInterval_Common_2ftime_5fslot_2eproto.base,
  &scc_info_TimeRange_Common_2ftime_5fslot_2eproto.base,
  &scc_info_TimeSlot_Common_2ftime_5fslot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2ftime_5fslot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2ftime_5fslot_2eproto = {
  false, false, descriptor_table_protodef_Common_2ftime_5fslot_2eproto, "Common/time_slot.proto", 738,
  &descriptor_table_Common_2ftime_5fslot_2eproto_once, descriptor_table_Common_2ftime_5fslot_2eproto_sccs, descriptor_table_Common_2ftime_5fslot_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_Common_2ftime_5fslot_2eproto::offsets,
  file_level_metadata_Common_2ftime_5fslot_2eproto, 5, file_level_enum_descriptors_Common_2ftime_5fslot_2eproto, file_level_service_descriptors_Common_2ftime_5fslot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2ftime_5fslot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2ftime_5fslot_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class LocalTime::_Internal {
 public:
};

LocalTime::LocalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.LocalTime)
}
LocalTime::LocalTime(const LocalTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArena());
  }
  ::memcpy(&hour_, &from.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.LocalTime)
}

void LocalTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalTime_Common_2ftime_5fslot_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hour_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(seconds_));
}

LocalTime::~LocalTime() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.LocalTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocalTime::ArenaDtor(void* object) {
  LocalTime* _this = reinterpret_cast< LocalTime* >(object);
  (void)_this;
}
void LocalTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTime& LocalTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalTime_Common_2ftime_5fslot_2eproto.base);
  return *internal_default_instance();
}


void LocalTime::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.LocalTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmpty();
  ::memset(&hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.LocalTime.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.LocalTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.LocalTime.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  // int32 hour = 2;
  if (this->hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hour(), target);
  }

  // int32 minute = 3;
  if (this->minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minute(), target);
  }

  // int32 seconds = 4;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.LocalTime)
  return target;
}

size_t LocalTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.LocalTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // int32 hour = 2;
  if (this->hour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  // int32 minute = 3;
  if (this->minute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());
  }

  // int32 seconds = 4;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.LocalTime)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.LocalTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.LocalTime)
    MergeFrom(*source);
  }
}

void LocalTime::MergeFrom(const LocalTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.LocalTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from.minute() != 0) {
    _internal_set_minute(from._internal_minute());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
}

void LocalTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.LocalTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTime::CopyFrom(const LocalTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.LocalTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTime::IsInitialized() const {
  return true;
}

void LocalTime::InternalSwap(LocalTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTime, seconds_)
      + sizeof(LocalTime::seconds_)
      - PROTOBUF_FIELD_OFFSET(LocalTime, hour_)>(
          reinterpret_cast<char*>(&hour_),
          reinterpret_cast<char*>(&other->hour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeInterval::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::LocalTime& start_time(const TimeInterval* msg);
  static const ::farm::nurture::core::contracts::common::LocalTime& end_time(const TimeInterval* msg);
};

const ::farm::nurture::core::contracts::common::LocalTime&
TimeInterval::_Internal::start_time(const TimeInterval* msg) {
  return *msg->start_time_;
}
const ::farm::nurture::core::contracts::common::LocalTime&
TimeInterval::_Internal::end_time(const TimeInterval* msg) {
  return *msg->end_time_;
}
TimeInterval::TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.TimeInterval)
}
TimeInterval::TimeInterval(const TimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timezone(), 
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::farm::nurture::core::contracts::common::LocalTime(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::farm::nurture::core::contracts::common::LocalTime(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.TimeInterval)
}

void TimeInterval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeInterval_Common_2ftime_5fslot_2eproto.base);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.TimeInterval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void TimeInterval::ArenaDtor(void* object) {
  TimeInterval* _this = reinterpret_cast< TimeInterval* >(object);
  (void)_this;
}
void TimeInterval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeInterval& TimeInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeInterval_Common_2ftime_5fslot_2eproto.base);
  return *internal_default_instance();
}


void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.TimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timezone_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string timezone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.TimeInterval.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LocalTime start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LocalTime end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.TimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timezone = 1;
  if (this->timezone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.TimeInterval.timezone");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timezone(), target);
  }

  // .farm.nurture.core.contracts.common.LocalTime start_time = 2;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.LocalTime end_time = 3;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.TimeInterval)
  return target;
}

size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.TimeInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timezone = 1;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // .farm.nurture.core.contracts.common.LocalTime start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .farm.nurture.core.contracts.common.LocalTime end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.TimeInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.TimeInterval)
    MergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timezone().size() > 0) {
    _internal_set_timezone(from._internal_timezone());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->::farm::nurture::core::contracts::common::LocalTime::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->::farm::nurture::core::contracts::common::LocalTime::MergeFrom(from._internal_end_time());
  }
}

void TimeInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {
  return true;
}

void TimeInterval::InternalSwap(TimeInterval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeInterval, end_time_)
      + sizeof(TimeInterval::end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeInterval, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeSlot::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeSlot* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const TimeSlot* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSlot::_Internal::start_time(const TimeSlot* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TimeSlot::_Internal::duration(const TimeSlot* msg) {
  return *msg->duration_;
}
void TimeSlot::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void TimeSlot::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
TimeSlot::TimeSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.TimeSlot)
}
TimeSlot::TimeSlot(const TimeSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.TimeSlot)
}

void TimeSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSlot_Common_2ftime_5fslot_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(duration_));
}

TimeSlot::~TimeSlot() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.TimeSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete duration_;
}

void TimeSlot::ArenaDtor(void* object) {
  TimeSlot* _this = reinterpret_cast< TimeSlot* >(object);
  (void)_this;
}
void TimeSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSlot& TimeSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSlot_Common_2ftime_5fslot_2eproto.base);
  return *internal_default_instance();
}


void TimeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.TimeSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.TimeSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.TimeSlot)
  return target;
}

size_t TimeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.TimeSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.TimeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.TimeSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.TimeSlot)
    MergeFrom(*source);
  }
}

void TimeSlot::MergeFrom(const TimeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.TimeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
}

void TimeSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.TimeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSlot::CopyFrom(const TimeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.TimeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSlot::IsInitialized() const {
  return true;
}

void TimeSlot::InternalSwap(TimeSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSlot, duration_)
      + sizeof(TimeSlot::duration_)
      - PROTOBUF_FIELD_OFFSET(TimeSlot, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DateSlot::_Internal {
 public:
};

DateSlot::DateSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.DateSlot)
}
DateSlot::DateSlot(const DateSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArena());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArena());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.DateSlot)
}

void DateSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DateSlot_Common_2ftime_5fslot_2eproto.base);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DateSlot::~DateSlot() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.DateSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DateSlot::ArenaDtor(void* object) {
  DateSlot* _this = reinterpret_cast< DateSlot* >(object);
  (void)_this;
}
void DateSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateSlot& DateSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateSlot_Common_2ftime_5fslot_2eproto.base);
  return *internal_default_instance();
}


void DateSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.DateSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DateSlot.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DateSlot.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.DateSlot.time_zone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.DateSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DateSlot.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DateSlot.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // string time_zone = 3;
  if (this->time_zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.DateSlot.time_zone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_zone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.DateSlot)
  return target;
}

size_t DateSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.DateSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // string time_zone = 3;
  if (this->time_zone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.DateSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const DateSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.DateSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.DateSlot)
    MergeFrom(*source);
  }
}

void DateSlot::MergeFrom(const DateSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.DateSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_date().size() > 0) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (from.end_date().size() > 0) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from.time_zone().size() > 0) {
    _internal_set_time_zone(from._internal_time_zone());
  }
}

void DateSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.DateSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateSlot::CopyFrom(const DateSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.DateSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateSlot::IsInitialized() const {
  return true;
}

void DateSlot::InternalSwap(DateSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_zone_.Swap(&other->time_zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DateSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeRange::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const TimeRange* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& endtime(const TimeRange* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::starttime(const TimeRange* msg) {
  return *msg->starttime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::endtime(const TimeRange* msg) {
  return *msg->endtime_;
}
void TimeRange::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
void TimeRange::clear_endtime() {
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    starttime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  if (from._internal_has_endtime()) {
    endtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.TimeRange)
}

void TimeRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeRange_Common_2ftime_5fslot_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.TimeRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete endtime_;
}

void TimeRange::ArenaDtor(void* object) {
  TimeRange* _this = reinterpret_cast< TimeRange* >(object);
  (void)_this;
}
void TimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRange_Common_2ftime_5fslot_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp endTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp startTime = 1;
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::starttime(this), target, stream);
  }

  // .google.protobuf.Timestamp endTime = 2;
  if (this->has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.TimeRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp startTime = 1;
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .google.protobuf.Timestamp endTime = 2;
  if (this->has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.TimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_starttime()) {
    _internal_mutable_starttime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from.has_endtime()) {
    _internal_mutable_endtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_endtime());
  }
}

void TimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, endtime_)
      + sizeof(TimeRange::endtime_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::LocalTime* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::LocalTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::LocalTime >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::TimeInterval* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::TimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::TimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::TimeSlot* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::TimeSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::TimeSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::DateSlot* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::DateSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::DateSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::TimeRange* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::TimeRange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
