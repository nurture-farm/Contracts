// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/activities.proto

#include "Common/activities.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class SupplyActivitySpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplyActivitySpec> _instance;
} _SupplyActivitySpec_default_instance_;
class SupplyWorkSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplyWorkSpec> _instance;
} _SupplyWorkSpec_default_instance_;
class ServiceAreaSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceAreaSpec> _instance;
} _ServiceAreaSpec_default_instance_;
class SupplySpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplySpec> _instance;
} _SupplySpec_default_instance_;
class ActivityLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityLocation> _instance;
} _ActivityLocation_default_instance_;
class ActivityBookingReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityBookingReference> _instance;
} _ActivityBookingReference_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_ActivityBookingReference_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ActivityBookingReference_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ActivityBookingReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityBookingReference_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivityBookingReference_Common_2factivities_2eproto}, {}};

static void InitDefaultsscc_info_ActivityLocation_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ActivityLocation_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ActivityLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityLocation_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivityLocation_Common_2factivities_2eproto}, {}};

static void InitDefaultsscc_info_ServiceAreaSpec_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ServiceAreaSpec_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ServiceAreaSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceAreaSpec_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceAreaSpec_Common_2factivities_2eproto}, {}};

static void InitDefaultsscc_info_SupplyActivitySpec_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_SupplyActivitySpec_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::SupplyActivitySpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupplyActivitySpec_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SupplyActivitySpec_Common_2factivities_2eproto}, {}};

static void InitDefaultsscc_info_SupplySpec_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_SupplySpec_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::SupplySpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupplySpec_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SupplySpec_Common_2factivities_2eproto}, {}};

static void InitDefaultsscc_info_SupplyWorkSpec_Common_2factivities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_SupplyWorkSpec_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::SupplyWorkSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupplyWorkSpec_Common_2factivities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SupplyWorkSpec_Common_2factivities_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2factivities_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2factivities_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2factivities_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2factivities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyActivitySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyActivitySpec, activity_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyActivitySpec, task_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyWorkSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyWorkSpec, activity_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplyWorkSpec, activity_sub_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ServiceAreaSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ServiceAreaSpec, service_area_namespace_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ServiceAreaSpec, service_area_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplySpec, actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::SupplySpec, actor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, location_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, farm_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, farm_crop_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityLocation, location_closures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, actor_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, booking_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, booking_version_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, service_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActivityBookingReference, service_version_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::SupplyActivitySpec)},
  { 7, -1, sizeof(::farm::nurture::core::contracts::common::SupplyWorkSpec)},
  { 14, -1, sizeof(::farm::nurture::core::contracts::common::ServiceAreaSpec)},
  { 21, -1, sizeof(::farm::nurture::core::contracts::common::SupplySpec)},
  { 28, -1, sizeof(::farm::nurture::core::contracts::common::ActivityLocation)},
  { 39, -1, sizeof(::farm::nurture::core::contracts::common::ActivityBookingReference)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_SupplyActivitySpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_SupplyWorkSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ServiceAreaSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_SupplySpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ActivityLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ActivityBookingReference_default_instance_),
};

const char descriptor_table_protodef_Common_2factivities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Common/activities.proto\022\"farm.nurture."
  "core.contracts.common\032\022Common/enums.prot"
  "o\"\252\001\n\022SupplyActivitySpec\022M\n\ractivity_typ"
  "e\030\001 \001(\01626.farm.nurture.core.contracts.co"
  "mmon.SupplyActivityType\022E\n\ttask_type\030\002 \001"
  "(\01622.farm.nurture.core.contracts.common."
  "SupplyTaskType\"\265\001\n\016SupplyWorkSpec\022M\n\ract"
  "ivity_type\030\001 \001(\01626.farm.nurture.core.con"
  "tracts.common.SupplyActivityType\022T\n\021acti"
  "vity_sub_type\030\002 \001(\01629.farm.nurture.core."
  "contracts.common.SupplyActivitySubType\"\204"
  "\001\n\017ServiceAreaSpec\022X\n\026service_area_names"
  "pace\030\001 \001(\01628.farm.nurture.core.contracts"
  ".common.ServiceAreaNamespace\022\027\n\017service_"
  "area_id\030\002 \001(\003\"a\n\nSupplySpec\022A\n\nactor_typ"
  "e\030\001 \001(\0162-.farm.nurture.core.contracts.co"
  "mmon.ActorType\022\020\n\010actor_id\030\002 \001(\003\"\302\001\n\020Act"
  "ivityLocation\022G\n\rlocation_type\030\001 \001(\01620.f"
  "arm.nurture.core.contracts.common.Locati"
  "onType\022\017\n\007farm_id\030\002 \001(\003\022\024\n\014farm_crop_id\030"
  "\003 \001(\003\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlongitude\030\005 \001"
  "(\001\022\031\n\021location_closures\030\006 \003(\t\"\317\001\n\030Activi"
  "tyBookingReference\022A\n\nactor_type\030\006 \001(\0162-"
  ".farm.nurture.core.contracts.common.Acto"
  "rType\022\020\n\010actor_id\030\007 \001(\003\022\022\n\nbooking_id\030\010 "
  "\001(\003\022\032\n\022booking_version_id\030\t \001(\003\022\022\n\nservi"
  "ce_id\030\n \001(\003\022\032\n\022service_version_id\030\013 \001(\003*"
  "\204\001\n\016SupplyTaskType\022\020\n\014NO_TASK_TYPE\020\000\022\016\n\n"
  "SPRAY_TASK\020\001\022\023\n\017WATER_FILL_TASK\020\002\022\016\n\nPAU"
  "SE_TASK\020\003\022\030\n\024SERVICE_CLOSURE_TASK\020\004\022\021\n\rO"
  "N_ROUTE_TASK\020\005*\224\001\n\022SupplyActivityType\022\024\n"
  "\020NO_ACTIVITY_TYPE\020\000\022\022\n\016SPRAY_ACTIVITY\020\001\022"
  "\024\n\020DRY_RUN_ACTIVITY\020\002\022\030\n\024CALL_FARMER_ACT"
  "IVITY\020\003\022$\n MACHINE_SOFTWARE_UPDATE_ACTIV"
  "ITY\020\004*1\n\025SupplyActivitySubType\022\030\n\024NO_ACT"
  "IVITY_SUB_TYPE\020\000*i\n\017SupplyGroupType\022\030\n\024N"
  "O_SUPPLY_GROUP_TYPE\020\000\022!\n\035SUPPLY_GROUP_OP"
  "ERATOR_MACHINE\020\001\022\031\n\025SUPPLY_GROUP_OPERATO"
  "R\020\002B[\n+farm.nurture.core.contracts.commo"
  "n.servicesP\001Z\'code.nurture.farm/Core/Con"
  "tracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2factivities_2eproto_deps[1] = {
  &::descriptor_table_Common_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2factivities_2eproto_sccs[6] = {
  &scc_info_ActivityBookingReference_Common_2factivities_2eproto.base,
  &scc_info_ActivityLocation_Common_2factivities_2eproto.base,
  &scc_info_ServiceAreaSpec_Common_2factivities_2eproto.base,
  &scc_info_SupplyActivitySpec_Common_2factivities_2eproto.base,
  &scc_info_SupplySpec_Common_2factivities_2eproto.base,
  &scc_info_SupplyWorkSpec_Common_2factivities_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2factivities_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2factivities_2eproto = {
  false, false, descriptor_table_protodef_Common_2factivities_2eproto, "Common/activities.proto", 1624,
  &descriptor_table_Common_2factivities_2eproto_once, descriptor_table_Common_2factivities_2eproto_sccs, descriptor_table_Common_2factivities_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Common_2factivities_2eproto::offsets,
  file_level_metadata_Common_2factivities_2eproto, 6, file_level_enum_descriptors_Common_2factivities_2eproto, file_level_service_descriptors_Common_2factivities_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2factivities_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2factivities_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2factivities_2eproto);
  return file_level_enum_descriptors_Common_2factivities_2eproto[0];
}
bool SupplyTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyActivityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2factivities_2eproto);
  return file_level_enum_descriptors_Common_2factivities_2eproto[1];
}
bool SupplyActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyActivitySubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2factivities_2eproto);
  return file_level_enum_descriptors_Common_2factivities_2eproto[2];
}
bool SupplyActivitySubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplyGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2factivities_2eproto);
  return file_level_enum_descriptors_Common_2factivities_2eproto[3];
}
bool SupplyGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SupplyActivitySpec::_Internal {
 public:
};

SupplyActivitySpec::SupplyActivitySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.SupplyActivitySpec)
}
SupplyActivitySpec::SupplyActivitySpec(const SupplyActivitySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activity_type_, &from.activity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_type_) -
    reinterpret_cast<char*>(&activity_type_)) + sizeof(task_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.SupplyActivitySpec)
}

void SupplyActivitySpec::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&activity_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&task_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(task_type_));
}

SupplyActivitySpec::~SupplyActivitySpec() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.SupplyActivitySpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplyActivitySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SupplyActivitySpec::ArenaDtor(void* object) {
  SupplyActivitySpec* _this = reinterpret_cast< SupplyActivitySpec* >(object);
  (void)_this;
}
void SupplyActivitySpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplyActivitySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplyActivitySpec& SupplyActivitySpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplyActivitySpec_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void SupplyActivitySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&activity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(task_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplyActivitySpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activity_type(static_cast<::farm::nurture::core::contracts::common::SupplyActivityType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SupplyTaskType task_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_task_type(static_cast<::farm::nurture::core::contracts::common::SupplyTaskType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplyActivitySpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activity_type(), target);
  }

  // .farm.nurture.core.contracts.common.SupplyTaskType task_type = 2;
  if (this->task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_task_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.SupplyActivitySpec)
  return target;
}

size_t SupplyActivitySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_type());
  }

  // .farm.nurture.core.contracts.common.SupplyTaskType task_type = 2;
  if (this->task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplyActivitySpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplyActivitySpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplyActivitySpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.SupplyActivitySpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.SupplyActivitySpec)
    MergeFrom(*source);
  }
}

void SupplyActivitySpec::MergeFrom(const SupplyActivitySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_type() != 0) {
    _internal_set_activity_type(from._internal_activity_type());
  }
  if (from.task_type() != 0) {
    _internal_set_task_type(from._internal_task_type());
  }
}

void SupplyActivitySpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplyActivitySpec::CopyFrom(const SupplyActivitySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.SupplyActivitySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplyActivitySpec::IsInitialized() const {
  return true;
}

void SupplyActivitySpec::InternalSwap(SupplyActivitySpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupplyActivitySpec, task_type_)
      + sizeof(SupplyActivitySpec::task_type_)
      - PROTOBUF_FIELD_OFFSET(SupplyActivitySpec, activity_type_)>(
          reinterpret_cast<char*>(&activity_type_),
          reinterpret_cast<char*>(&other->activity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplyActivitySpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SupplyWorkSpec::_Internal {
 public:
};

SupplyWorkSpec::SupplyWorkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.SupplyWorkSpec)
}
SupplyWorkSpec::SupplyWorkSpec(const SupplyWorkSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activity_type_, &from.activity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_sub_type_) -
    reinterpret_cast<char*>(&activity_type_)) + sizeof(activity_sub_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.SupplyWorkSpec)
}

void SupplyWorkSpec::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&activity_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activity_sub_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(activity_sub_type_));
}

SupplyWorkSpec::~SupplyWorkSpec() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.SupplyWorkSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplyWorkSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SupplyWorkSpec::ArenaDtor(void* object) {
  SupplyWorkSpec* _this = reinterpret_cast< SupplyWorkSpec* >(object);
  (void)_this;
}
void SupplyWorkSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplyWorkSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplyWorkSpec& SupplyWorkSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplyWorkSpec_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void SupplyWorkSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&activity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_sub_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(activity_sub_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplyWorkSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activity_type(static_cast<::farm::nurture::core::contracts::common::SupplyActivityType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SupplyActivitySubType activity_sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activity_sub_type(static_cast<::farm::nurture::core::contracts::common::SupplyActivitySubType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplyWorkSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activity_type(), target);
  }

  // .farm.nurture.core.contracts.common.SupplyActivitySubType activity_sub_type = 2;
  if (this->activity_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_activity_sub_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.SupplyWorkSpec)
  return target;
}

size_t SupplyWorkSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.SupplyActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_type());
  }

  // .farm.nurture.core.contracts.common.SupplyActivitySubType activity_sub_type = 2;
  if (this->activity_sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity_sub_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplyWorkSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplyWorkSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplyWorkSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.SupplyWorkSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.SupplyWorkSpec)
    MergeFrom(*source);
  }
}

void SupplyWorkSpec::MergeFrom(const SupplyWorkSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_type() != 0) {
    _internal_set_activity_type(from._internal_activity_type());
  }
  if (from.activity_sub_type() != 0) {
    _internal_set_activity_sub_type(from._internal_activity_sub_type());
  }
}

void SupplyWorkSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplyWorkSpec::CopyFrom(const SupplyWorkSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.SupplyWorkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplyWorkSpec::IsInitialized() const {
  return true;
}

void SupplyWorkSpec::InternalSwap(SupplyWorkSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupplyWorkSpec, activity_sub_type_)
      + sizeof(SupplyWorkSpec::activity_sub_type_)
      - PROTOBUF_FIELD_OFFSET(SupplyWorkSpec, activity_type_)>(
          reinterpret_cast<char*>(&activity_type_),
          reinterpret_cast<char*>(&other->activity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplyWorkSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceAreaSpec::_Internal {
 public:
};

ServiceAreaSpec::ServiceAreaSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ServiceAreaSpec)
}
ServiceAreaSpec::ServiceAreaSpec(const ServiceAreaSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&service_area_id_, &from.service_area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_area_namespace_) -
    reinterpret_cast<char*>(&service_area_id_)) + sizeof(service_area_namespace_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ServiceAreaSpec)
}

void ServiceAreaSpec::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&service_area_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&service_area_namespace_) -
      reinterpret_cast<char*>(&service_area_id_)) + sizeof(service_area_namespace_));
}

ServiceAreaSpec::~ServiceAreaSpec() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ServiceAreaSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceAreaSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServiceAreaSpec::ArenaDtor(void* object) {
  ServiceAreaSpec* _this = reinterpret_cast< ServiceAreaSpec* >(object);
  (void)_this;
}
void ServiceAreaSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceAreaSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceAreaSpec& ServiceAreaSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceAreaSpec_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void ServiceAreaSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&service_area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_area_namespace_) -
      reinterpret_cast<char*>(&service_area_id_)) + sizeof(service_area_namespace_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceAreaSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ServiceAreaNamespace service_area_namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service_area_namespace(static_cast<::farm::nurture::core::contracts::common::ServiceAreaNamespace>(val));
        } else goto handle_unusual;
        continue;
      // int64 service_area_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceAreaSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ServiceAreaNamespace service_area_namespace = 1;
  if (this->service_area_namespace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_service_area_namespace(), target);
  }

  // int64 service_area_id = 2;
  if (this->service_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_service_area_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ServiceAreaSpec)
  return target;
}

size_t ServiceAreaSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 service_area_id = 2;
  if (this->service_area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_service_area_id());
  }

  // .farm.nurture.core.contracts.common.ServiceAreaNamespace service_area_namespace = 1;
  if (this->service_area_namespace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_area_namespace());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceAreaSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAreaSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceAreaSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ServiceAreaSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ServiceAreaSpec)
    MergeFrom(*source);
  }
}

void ServiceAreaSpec::MergeFrom(const ServiceAreaSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_area_id() != 0) {
    _internal_set_service_area_id(from._internal_service_area_id());
  }
  if (from.service_area_namespace() != 0) {
    _internal_set_service_area_namespace(from._internal_service_area_namespace());
  }
}

void ServiceAreaSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAreaSpec::CopyFrom(const ServiceAreaSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ServiceAreaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAreaSpec::IsInitialized() const {
  return true;
}

void ServiceAreaSpec::InternalSwap(ServiceAreaSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceAreaSpec, service_area_namespace_)
      + sizeof(ServiceAreaSpec::service_area_namespace_)
      - PROTOBUF_FIELD_OFFSET(ServiceAreaSpec, service_area_id_)>(
          reinterpret_cast<char*>(&service_area_id_),
          reinterpret_cast<char*>(&other->service_area_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceAreaSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SupplySpec::_Internal {
 public:
};

SupplySpec::SupplySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.SupplySpec)
}
SupplySpec::SupplySpec(const SupplySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actor_type_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.SupplySpec)
}

void SupplySpec::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actor_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&actor_type_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
}

SupplySpec::~SupplySpec() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.SupplySpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SupplySpec::ArenaDtor(void* object) {
  SupplySpec* _this = reinterpret_cast< SupplySpec* >(object);
  (void)_this;
}
void SupplySpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplySpec& SupplySpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplySpec_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void SupplySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.SupplySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_type_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplySpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actor_type(static_cast<::farm::nurture::core::contracts::common::ActorType>(val));
        } else goto handle_unusual;
        continue;
      // int64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplySpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.SupplySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  if (this->actor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actor_type(), target);
  }

  // int64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_actor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.SupplySpec)
  return target;
}

size_t SupplySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.SupplySpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_actor_id());
  }

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  if (this->actor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actor_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplySpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.SupplySpec)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplySpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplySpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.SupplySpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.SupplySpec)
    MergeFrom(*source);
  }
}

void SupplySpec::MergeFrom(const SupplySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.SupplySpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.actor_type() != 0) {
    _internal_set_actor_type(from._internal_actor_type());
  }
}

void SupplySpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.SupplySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplySpec::CopyFrom(const SupplySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.SupplySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplySpec::IsInitialized() const {
  return true;
}

void SupplySpec::InternalSwap(SupplySpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupplySpec, actor_type_)
      + sizeof(SupplySpec::actor_type_)
      - PROTOBUF_FIELD_OFFSET(SupplySpec, actor_id_)>(
          reinterpret_cast<char*>(&actor_id_),
          reinterpret_cast<char*>(&other->actor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplySpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivityLocation::_Internal {
 public:
};

ActivityLocation::ActivityLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  location_closures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ActivityLocation)
}
ActivityLocation::ActivityLocation(const ActivityLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      location_closures_(from.location_closures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&farm_id_, &from.farm_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_type_) -
    reinterpret_cast<char*>(&farm_id_)) + sizeof(location_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ActivityLocation)
}

void ActivityLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityLocation_Common_2factivities_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&farm_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&location_type_) -
      reinterpret_cast<char*>(&farm_id_)) + sizeof(location_type_));
}

ActivityLocation::~ActivityLocation() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ActivityLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivityLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActivityLocation::ArenaDtor(void* object) {
  ActivityLocation* _this = reinterpret_cast< ActivityLocation* >(object);
  (void)_this;
}
void ActivityLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityLocation& ActivityLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityLocation_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void ActivityLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ActivityLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_closures_.Clear();
  ::memset(&farm_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_type_) -
      reinterpret_cast<char*>(&farm_id_)) + sizeof(location_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.LocationType location_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_location_type(static_cast<::farm::nurture::core::contracts::common::LocationType>(val));
        } else goto handle_unusual;
        continue;
      // int64 farm_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          farm_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 farm_crop_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          farm_crop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string location_closures = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_location_closures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.ActivityLocation.location_closures"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ActivityLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.LocationType location_type = 1;
  if (this->location_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_location_type(), target);
  }

  // int64 farm_id = 2;
  if (this->farm_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_farm_id(), target);
  }

  // int64 farm_crop_id = 3;
  if (this->farm_crop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_farm_crop_id(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // repeated string location_closures = 6;
  for (int i = 0, n = this->_internal_location_closures_size(); i < n; i++) {
    const auto& s = this->_internal_location_closures(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.ActivityLocation.location_closures");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ActivityLocation)
  return target;
}

size_t ActivityLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ActivityLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string location_closures = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(location_closures_.size());
  for (int i = 0, n = location_closures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      location_closures_.Get(i));
  }

  // int64 farm_id = 2;
  if (this->farm_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_farm_id());
  }

  // int64 farm_crop_id = 3;
  if (this->farm_crop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_farm_crop_id());
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.core.contracts.common.LocationType location_type = 1;
  if (this->location_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ActivityLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ActivityLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ActivityLocation)
    MergeFrom(*source);
  }
}

void ActivityLocation::MergeFrom(const ActivityLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ActivityLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_closures_.MergeFrom(from.location_closures_);
  if (from.farm_id() != 0) {
    _internal_set_farm_id(from._internal_farm_id());
  }
  if (from.farm_crop_id() != 0) {
    _internal_set_farm_crop_id(from._internal_farm_crop_id());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.location_type() != 0) {
    _internal_set_location_type(from._internal_location_type());
  }
}

void ActivityLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ActivityLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityLocation::CopyFrom(const ActivityLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ActivityLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLocation::IsInitialized() const {
  return true;
}

void ActivityLocation::InternalSwap(ActivityLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  location_closures_.InternalSwap(&other->location_closures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityLocation, location_type_)
      + sizeof(ActivityLocation::location_type_)
      - PROTOBUF_FIELD_OFFSET(ActivityLocation, farm_id_)>(
          reinterpret_cast<char*>(&farm_id_),
          reinterpret_cast<char*>(&other->farm_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivityBookingReference::_Internal {
 public:
};

ActivityBookingReference::ActivityBookingReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ActivityBookingReference)
}
ActivityBookingReference::ActivityBookingReference(const ActivityBookingReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_version_id_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(service_version_id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ActivityBookingReference)
}

void ActivityBookingReference::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actor_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&service_version_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(service_version_id_));
}

ActivityBookingReference::~ActivityBookingReference() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ActivityBookingReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivityBookingReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActivityBookingReference::ArenaDtor(void* object) {
  ActivityBookingReference* _this = reinterpret_cast< ActivityBookingReference* >(object);
  (void)_this;
}
void ActivityBookingReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityBookingReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityBookingReference& ActivityBookingReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityBookingReference_Common_2factivities_2eproto.base);
  return *internal_default_instance();
}


void ActivityBookingReference::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_version_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(service_version_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityBookingReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ActorType actor_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actor_type(static_cast<::farm::nurture::core::contracts::common::ActorType>(val));
        } else goto handle_unusual;
        continue;
      // int64 actor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 booking_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          booking_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 booking_version_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          booking_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 service_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 service_version_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          service_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityBookingReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ActorType actor_type = 6;
  if (this->actor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_actor_type(), target);
  }

  // int64 actor_id = 7;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_actor_id(), target);
  }

  // int64 booking_id = 8;
  if (this->booking_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_booking_id(), target);
  }

  // int64 booking_version_id = 9;
  if (this->booking_version_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_booking_version_id(), target);
  }

  // int64 service_id = 10;
  if (this->service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_service_id(), target);
  }

  // int64 service_version_id = 11;
  if (this->service_version_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_service_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ActivityBookingReference)
  return target;
}

size_t ActivityBookingReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 actor_id = 7;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_actor_id());
  }

  // .farm.nurture.core.contracts.common.ActorType actor_type = 6;
  if (this->actor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actor_type());
  }

  // int64 booking_id = 8;
  if (this->booking_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_booking_id());
  }

  // int64 booking_version_id = 9;
  if (this->booking_version_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_booking_version_id());
  }

  // int64 service_id = 10;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_service_id());
  }

  // int64 service_version_id = 11;
  if (this->service_version_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_service_version_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityBookingReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityBookingReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityBookingReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ActivityBookingReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ActivityBookingReference)
    MergeFrom(*source);
  }
}

void ActivityBookingReference::MergeFrom(const ActivityBookingReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.actor_type() != 0) {
    _internal_set_actor_type(from._internal_actor_type());
  }
  if (from.booking_id() != 0) {
    _internal_set_booking_id(from._internal_booking_id());
  }
  if (from.booking_version_id() != 0) {
    _internal_set_booking_version_id(from._internal_booking_version_id());
  }
  if (from.service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (from.service_version_id() != 0) {
    _internal_set_service_version_id(from._internal_service_version_id());
  }
}

void ActivityBookingReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityBookingReference::CopyFrom(const ActivityBookingReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ActivityBookingReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityBookingReference::IsInitialized() const {
  return true;
}

void ActivityBookingReference::InternalSwap(ActivityBookingReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityBookingReference, service_version_id_)
      + sizeof(ActivityBookingReference::service_version_id_)
      - PROTOBUF_FIELD_OFFSET(ActivityBookingReference, actor_id_)>(
          reinterpret_cast<char*>(&actor_id_),
          reinterpret_cast<char*>(&other->actor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityBookingReference::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::SupplyActivitySpec* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::SupplyActivitySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::SupplyActivitySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::SupplyWorkSpec* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::SupplyWorkSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::SupplyWorkSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ServiceAreaSpec* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ServiceAreaSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ServiceAreaSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::SupplySpec* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::SupplySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::SupplySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ActivityLocation* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ActivityLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ActivityLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ActivityBookingReference* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ActivityBookingReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ActivityBookingReference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
