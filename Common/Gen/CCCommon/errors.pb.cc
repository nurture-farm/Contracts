// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/errors.proto

#include "Common/errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2ferrors_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2ferrors_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2ferrors_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2ferrors_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Common/errors.proto\022\"farm.nurture.core"
  ".contracts.common*\315\001\n\tErrorCode\022\021\n\rNO_ER"
  "ROR_CODE\020\000\022\023\n\016DATABASE_ERROR\020\350\007\022\027\n\022SAM_D"
  "ATABASE_ERROR\020\351\007\022\026\n\021BN_DATABASE_ERROR\020\352\007"
  "\022\027\n\022SCM_DATABASE_ERROR\020\353\007\022\035\n\030PT_INTERNAL"
  "_SERVER_ERROR\020\321\017\022\037\n\032PT_SCORE_CALCULATION"
  "_ERROR\020\322\017\"\006\010\362\007\020\317\017\"\006\010\323\017\020\267\027BR\n\"farm.nurtur"
  "e.core.contracts.commonP\001Z\'code.nurture."
  "farm/Core/Contracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2ferrors_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2ferrors_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2ferrors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2ferrors_2eproto = {
  false, false, descriptor_table_protodef_Common_2ferrors_2eproto, "Common/errors.proto", 357,
  &descriptor_table_Common_2ferrors_2eproto_once, descriptor_table_Common_2ferrors_2eproto_sccs, descriptor_table_Common_2ferrors_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2ferrors_2eproto::offsets,
  file_level_metadata_Common_2ferrors_2eproto, 0, file_level_enum_descriptors_Common_2ferrors_2eproto, file_level_service_descriptors_Common_2ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2ferrors_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2ferrors_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2ferrors_2eproto);
  return file_level_enum_descriptors_Common_2ferrors_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 2001:
    case 2002:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
