// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/utils.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2futils_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2futils_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/headers.pb.h"
#include "Common/errors.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2futils_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2futils_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2futils_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class RequestStatusResult;
class RequestStatusResultDefaultTypeInternal;
extern RequestStatusResultDefaultTypeInternal _RequestStatusResult_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::RequestStatusResult* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(Arena*);
template<> ::farm::nurture::core::contracts::common::Row* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class RequestStatusResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RequestStatusResult) */ {
 public:
  inline RequestStatusResult() : RequestStatusResult(nullptr) {}
  virtual ~RequestStatusResult();

  RequestStatusResult(const RequestStatusResult& from);
  RequestStatusResult(RequestStatusResult&& from) noexcept
    : RequestStatusResult() {
    *this = ::std::move(from);
  }

  inline RequestStatusResult& operator=(const RequestStatusResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestStatusResult& operator=(RequestStatusResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestStatusResult& default_instance();

  static inline const RequestStatusResult* internal_default_instance() {
    return reinterpret_cast<const RequestStatusResult*>(
               &_RequestStatusResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestStatusResult& a, RequestStatusResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestStatusResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestStatusResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestStatusResult* New() const final {
    return CreateMaybeMessage<RequestStatusResult>(nullptr);
  }

  RequestStatusResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestStatusResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestStatusResult& from);
  void MergeFrom(const RequestStatusResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStatusResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RequestStatusResult";
  }
  protected:
  explicit RequestStatusResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2futils_2eproto);
    return ::descriptor_table_Common_2futils_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonsFieldNumber = 6,
    kErrorMessagesFieldNumber = 7,
    kStatusFieldNumber = 1,
    kStatusReasonFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kInternalErrorCodeFieldNumber = 8,
  };
  // repeated string reasons = 6;
  int reasons_size() const;
  private:
  int _internal_reasons_size() const;
  public:
  void clear_reasons();
  const std::string& reasons(int index) const;
  std::string* mutable_reasons(int index);
  void set_reasons(int index, const std::string& value);
  void set_reasons(int index, std::string&& value);
  void set_reasons(int index, const char* value);
  void set_reasons(int index, const char* value, size_t size);
  std::string* add_reasons();
  void add_reasons(const std::string& value);
  void add_reasons(std::string&& value);
  void add_reasons(const char* value);
  void add_reasons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reasons();
  private:
  const std::string& _internal_reasons(int index) const;
  std::string* _internal_add_reasons();
  public:

  // repeated string error_messages = 7;
  int error_messages_size() const;
  private:
  int _internal_error_messages_size() const;
  public:
  void clear_error_messages();
  const std::string& error_messages(int index) const;
  std::string* mutable_error_messages(int index);
  void set_error_messages(int index, const std::string& value);
  void set_error_messages(int index, std::string&& value);
  void set_error_messages(int index, const char* value);
  void set_error_messages(int index, const char* value, size_t size);
  std::string* add_error_messages();
  void add_error_messages(const std::string& value);
  void add_error_messages(std::string&& value);
  void add_error_messages(const char* value);
  void add_error_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_messages();
  private:
  const std::string& _internal_error_messages(int index) const;
  std::string* _internal_add_error_messages();
  public:

  // .farm.nurture.core.contracts.common.RequestStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::RequestStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::RequestStatus value);
  private:
  ::farm::nurture::core::contracts::common::RequestStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::RequestStatus value);
  public:

  // .farm.nurture.core.contracts.common.RequestStatusReason status_reason = 2;
  void clear_status_reason();
  ::farm::nurture::core::contracts::common::RequestStatusReason status_reason() const;
  void set_status_reason(::farm::nurture::core::contracts::common::RequestStatusReason value);
  private:
  ::farm::nurture::core::contracts::common::RequestStatusReason _internal_status_reason() const;
  void _internal_set_status_reason(::farm::nurture::core::contracts::common::RequestStatusReason value);
  public:

  // .farm.nurture.core.contracts.common.ErrorCode error_code = 3;
  void clear_error_code();
  ::farm::nurture::core::contracts::common::ErrorCode error_code() const;
  void set_error_code(::farm::nurture::core::contracts::common::ErrorCode value);
  private:
  ::farm::nurture::core::contracts::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::farm::nurture::core::contracts::common::ErrorCode value);
  public:

  // int32 internal_error_code = 8;
  void clear_internal_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_error_code() const;
  void set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_error_code() const;
  void _internal_set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RequestStatusResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reasons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_messages_;
  int status_;
  int status_reason_;
  int error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2futils_2eproto;
};
// -------------------------------------------------------------------

class Row PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  virtual ~Row();

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Row& default_instance();

  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2futils_2eproto);
    return ::descriptor_table_Common_2futils_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2futils_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestStatusResult

// .farm.nurture.core.contracts.common.RequestStatus status = 1;
inline void RequestStatusResult::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::RequestStatus RequestStatusResult::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::RequestStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::RequestStatus RequestStatusResult::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.status)
  return _internal_status();
}
inline void RequestStatusResult::_internal_set_status(::farm::nurture::core::contracts::common::RequestStatus value) {
  
  status_ = value;
}
inline void RequestStatusResult::set_status(::farm::nurture::core::contracts::common::RequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.status)
}

// .farm.nurture.core.contracts.common.RequestStatusReason status_reason = 2;
inline void RequestStatusResult::clear_status_reason() {
  status_reason_ = 0;
}
inline ::farm::nurture::core::contracts::common::RequestStatusReason RequestStatusResult::_internal_status_reason() const {
  return static_cast< ::farm::nurture::core::contracts::common::RequestStatusReason >(status_reason_);
}
inline ::farm::nurture::core::contracts::common::RequestStatusReason RequestStatusResult::status_reason() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.status_reason)
  return _internal_status_reason();
}
inline void RequestStatusResult::_internal_set_status_reason(::farm::nurture::core::contracts::common::RequestStatusReason value) {
  
  status_reason_ = value;
}
inline void RequestStatusResult::set_status_reason(::farm::nurture::core::contracts::common::RequestStatusReason value) {
  _internal_set_status_reason(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.status_reason)
}

// .farm.nurture.core.contracts.common.ErrorCode error_code = 3;
inline void RequestStatusResult::clear_error_code() {
  error_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ErrorCode RequestStatusResult::_internal_error_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ErrorCode >(error_code_);
}
inline ::farm::nurture::core::contracts::common::ErrorCode RequestStatusResult::error_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.error_code)
  return _internal_error_code();
}
inline void RequestStatusResult::_internal_set_error_code(::farm::nurture::core::contracts::common::ErrorCode value) {
  
  error_code_ = value;
}
inline void RequestStatusResult::set_error_code(::farm::nurture::core::contracts::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.error_code)
}

// repeated string reasons = 6;
inline int RequestStatusResult::_internal_reasons_size() const {
  return reasons_.size();
}
inline int RequestStatusResult::reasons_size() const {
  return _internal_reasons_size();
}
inline void RequestStatusResult::clear_reasons() {
  reasons_.Clear();
}
inline std::string* RequestStatusResult::add_reasons() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  return _internal_add_reasons();
}
inline const std::string& RequestStatusResult::_internal_reasons(int index) const {
  return reasons_.Get(index);
}
inline const std::string& RequestStatusResult::reasons(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  return _internal_reasons(index);
}
inline std::string* RequestStatusResult::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  return reasons_.Mutable(index);
}
inline void RequestStatusResult::set_reasons(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  reasons_.Mutable(index)->assign(value);
}
inline void RequestStatusResult::set_reasons(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  reasons_.Mutable(index)->assign(std::move(value));
}
inline void RequestStatusResult::set_reasons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline void RequestStatusResult::set_reasons(int index, const char* value, size_t size) {
  reasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline std::string* RequestStatusResult::_internal_add_reasons() {
  return reasons_.Add();
}
inline void RequestStatusResult::add_reasons(const std::string& value) {
  reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline void RequestStatusResult::add_reasons(std::string&& value) {
  reasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline void RequestStatusResult::add_reasons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline void RequestStatusResult::add_reasons(const char* value, size_t size) {
  reasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestStatusResult::reasons() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  return reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestStatusResult::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.RequestStatusResult.reasons)
  return &reasons_;
}

// repeated string error_messages = 7;
inline int RequestStatusResult::_internal_error_messages_size() const {
  return error_messages_.size();
}
inline int RequestStatusResult::error_messages_size() const {
  return _internal_error_messages_size();
}
inline void RequestStatusResult::clear_error_messages() {
  error_messages_.Clear();
}
inline std::string* RequestStatusResult::add_error_messages() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  return _internal_add_error_messages();
}
inline const std::string& RequestStatusResult::_internal_error_messages(int index) const {
  return error_messages_.Get(index);
}
inline const std::string& RequestStatusResult::error_messages(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  return _internal_error_messages(index);
}
inline std::string* RequestStatusResult::mutable_error_messages(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  return error_messages_.Mutable(index);
}
inline void RequestStatusResult::set_error_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  error_messages_.Mutable(index)->assign(value);
}
inline void RequestStatusResult::set_error_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  error_messages_.Mutable(index)->assign(std::move(value));
}
inline void RequestStatusResult::set_error_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline void RequestStatusResult::set_error_messages(int index, const char* value, size_t size) {
  error_messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline std::string* RequestStatusResult::_internal_add_error_messages() {
  return error_messages_.Add();
}
inline void RequestStatusResult::add_error_messages(const std::string& value) {
  error_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline void RequestStatusResult::add_error_messages(std::string&& value) {
  error_messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline void RequestStatusResult::add_error_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline void RequestStatusResult::add_error_messages(const char* value, size_t size) {
  error_messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestStatusResult::error_messages() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  return error_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestStatusResult::mutable_error_messages() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.RequestStatusResult.error_messages)
  return &error_messages_;
}

// int32 internal_error_code = 8;
inline void RequestStatusResult::clear_internal_error_code() {
  internal_error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestStatusResult::_internal_internal_error_code() const {
  return internal_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestStatusResult::internal_error_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestStatusResult.internal_error_code)
  return _internal_internal_error_code();
}
inline void RequestStatusResult::_internal_set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  internal_error_code_ = value;
}
inline void RequestStatusResult::set_internal_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_error_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestStatusResult.internal_error_code)
}

// -------------------------------------------------------------------

// Row

// repeated string data = 1;
inline int Row::_internal_data_size() const {
  return data_.size();
}
inline int Row::data_size() const {
  return _internal_data_size();
}
inline void Row::clear_data() {
  data_.Clear();
}
inline std::string* Row::add_data() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.Row.data)
  return _internal_add_data();
}
inline const std::string& Row::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& Row::data(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Row.data)
  return _internal_data(index);
}
inline std::string* Row::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Row.data)
  return data_.Mutable(index);
}
inline void Row::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Row.data)
  data_.Mutable(index)->assign(value);
}
inline void Row::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Row.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void Row::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Row.data)
}
inline void Row::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Row.data)
}
inline std::string* Row::_internal_add_data() {
  return data_.Add();
}
inline void Row::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.Row.data)
}
inline void Row::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.Row.data)
}
inline void Row::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.Row.data)
}
inline void Row::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.Row.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Row::data() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.Row.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Row::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.Row.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2futils_2eproto
