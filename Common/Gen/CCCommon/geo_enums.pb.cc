// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/geo_enums.proto

#include "Common/geo_enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2fgeo_5fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fgeo_5fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fgeo_5fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2fgeo_5fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026Common/geo_enums.proto\022\"farm.nurture.c"
  "ore.contracts.common*y\n\016ProjectionType\022\020"
  "\n\014WEB_MERCATOR\020\000\022\014\n\010ROBINSON\020\001\022\021\n\rSTEREO"
  "GRAPHIC\020\002\022\033\n\027LAMBERT_CONFORMAL_CONIC\020\003\022\027"
  "\n\023TRANSVERSE_MERCATOR\020\004*\220\001\n\016PlaceNamespa"
  "ce\022\027\n\023POLITICAL_NAMESPACE\020\000\022\025\n\021MACHINE_N"
  "AMESPACE\020\001\022\020\n\014HIERARCHICAL\020\002\022\t\n\005FARMS\020\003\022"
  "\021\n\rPIPE_LOCATION\020\004\022\r\n\tIOT_PINGS\020\005\022\017\n\013SEN"
  "TINEL_VH\020\006*2\n\tPlaceType\022\026\n\022INVALID_PLACE"
  "_TYPE\020\000\022\r\n\tFARM_TYPE\020\001*k\n\026TemporalResolu"
  "tionType\022\037\n\033NO_TEMPORAL_RESOLUTION_TYPE\020"
  "\000\022\026\n\022GREGORIAN_CALENDAR\020\001\022\030\n\024INDIAN_CROP"
  "_CALENDAR\020\002*I\n\010DataType\022\013\n\007NO_DATA\020\000\022\010\n\004"
  "CROP\020d\022\022\n\rBURNING_EVENT\020\310\001\022\022\n\rTILLING_EV"
  "ENT\020\254\002*a\n\014GeometryType\022\031\n\025INVALID_GEOMET"
  "RY_TYPE\020\000\022\020\n\014MULTIPOLYGON\020\001\022\014\n\010POLYLINE\020"
  "\002\022\t\n\005POINT\020\003\022\013\n\007POLYGON\020\004*M\n\020DataPropert"
  "yType\022\013\n\007NO_TYPE\020\000\022\016\n\nCROP_YIELD\020d\022\r\n\tCR"
  "OP_NAME\020e\022\r\n\tCROP_TYPE\020f*7\n\027TemporalReso"
  "lutionLevel\022\034\n\030NO_TEMP_RESOLUTION_LEVEL\020"
  "\000*6\n\024DataPropCategoryType\022\036\n\032NO_DATA_PRO"
  "P_CATEGORY_TYPE\020\000*S\n\017GeoStatusResult\022\026\n\022"
  "GEO_STATUS_SUCCESS\020\000\022\025\n\021NO_GEOMETRY_FOUN"
  "D\020\001\022\021\n\rNO_PIPE_FOUND\020\002*\244\001\n\tUI_CLIENT\022\020\n\014"
  "NO_UI_CLIENT\020\000\022\031\n\025DESKTOP_WEB_UI_CLIENT\020"
  "\001\022\035\n\031ANDROID_TAB_WEB_UI_CLIENT\020\002\022\031\n\025ANDR"
  "OID_WEB_UI_CLIENT\020\003\022\025\n\021IOS_WEB_UI_CLIENT"
  "\020\004\022\031\n\025IOS_TAB_WEB_UI_CLIENT\020\005*\374\002\n\017PlaceS"
  "ourceType\022\022\n\016NO_SOURCE_TYPE\020\000\022\022\n\016SATELLI"
  "TE_FARM\020\001\022\014\n\010IOT_FARM\020\002\022\022\n\016POLITICAL_FAR"
  "M\020\003\022\r\n\tUSER_FARM\020\004\022\022\n\016AWD_SOUTH_2021\020\005\022\031"
  "\n\025PIPE_INSTALLATION_SRC\020\006\022\023\n\017INSIDE_BUND"
  "_SRC\020\007\022\030\n\024AERATION_EVENT_1_SRC\020\010\022\030\n\024AERA"
  "TION_EVENT_2_SRC\020\t\022\030\n\024AERATION_EVENT_3_S"
  "RC\020\n\022\021\n\rUSER_FARM_AWD\020\013\022\021\n\rUSER_FARM_SBB"
  "\020\014\022\024\n\020IOT_GATEWAY_TYPE\020\r\022\016\n\nAERATION_1\020\016"
  "\022\016\n\nAERATION_2\020\017\022\016\n\nAERATION_3\020\020\022\022\n\016SENT"
  "INEL_1_L2A\020\021*\202\003\n\020PlaceVisibleType\022\023\n\017NO_"
  "VISIBLE_TYPE\020\000\022\020\n\014VILLAGE_FARM\020\001\022\021\n\rDIST"
  "RICT_FARM\020\002\022\010\n\004PIPE\020\003\022\033\n\027PUSA_SPRAY_PROG"
  "RAM_TYPE\020\004\022\024\n\020AWD_PROGRAM_TYPE\020\005\022\024\n\020DSR_"
  "PROGRAM_TYPE\020\006\022\032\n\026GROUNDNUT_PROGRAM_TYPE"
  "\020\007\022\024\n\020CRM_PROGRAM_TYPE\020\010\022\026\n\022TRADE_PROGRA"
  "M_TYPE\020\t\022\036\n\032AWD_22_KHARIF_PROGRAM_TYPE\020\n"
  "\022\036\n\032CRM_22_KHARIF_PROGRAM_TYPE\020\013\022\036\n\032DSR_"
  "22_KHARIF_PROGRAM_TYPE\020\014\022\016\n\nPOINT_TYPE\020\r"
  "\022\025\n\021PRUNED_POINT_TYPE\020\016\022\020\n\014POLYGON_TYPE\020"
  "\017*\227\005\n\020PlaceTagProperty\022\031\n\025NO_PLACE_TAG_P"
  "ROPERTY\020\000\022\010\n\004NAME\020\001\022\t\n\005TITLE\020\002\022\t\n\005COLOR\020"
  "\003\022\t\n\005COUNT\020\004\022\t\n\005ACRES\020\005\022\014\n\010EVENT_ID\020\006\022\017\n"
  "\013FARMER_NAME\020\007\022\021\n\rFARMER_MOBILE\020\010\022\017\n\013REG"
  "ION_NAME\020\t\022\017\n\013TEHSIL_NAME\020\013\022\020\n\014VILLAGE_N"
  "AME\020\014\022\017\n\013SOWING_DATE\020\r\022\013\n\007VARIETY\020\016\022\r\n\tS"
  "3_MOBILE\020\017\022\013\n\007S3_NAME\020\020\022\023\n\017APPROVAL_STAT"
  "US\020\021\022\n\n\006STATUS\020\022\022\013\n\007FARM_ID\020\023\022\r\n\tFARMER_"
  "ID\020\024\022\014\n\010PLACE_ID\020\025\022\016\n\nCONTENT_ID\020\026\022\010\n\004UG"
  "DN\020\027\022\023\n\017GEOFENCE_SOURCE\020\030\022\022\n\016SPRAYER_STA"
  "TUS\020\031\022\021\n\rENGINE_STATUS\020\032\022\026\n\022KHARIF_2022_"
  "STATUS\020\033\022\024\n\020RABI_2022_STATUS\020\034\022\026\n\022RABI_2"
  "022_PLACE_ID\020\035\022\026\n\022RABI_2022_PLACE_NS\020\036\022\027"
  "\n\023RABI_2022_PLACE_SRC\020\037\022\027\n\023RABI_2022_PLA"
  "CE_VIS\020 \022\017\n\013PORTAL_EDIT\020!\022\031\n\025KHARIF_22_P"
  "ORTAL_EDIT\020\"\022\027\n\023RABI_22_PORTAL_EDIT\020#\022\034\n"
  "\030AWD_RABI_22_NSV_PLACE_ID\020$*\257\002\n\014PlaceTag"
  "Name\022\020\n\014NO_PLACE_TAG\020\000\022\r\n\tFARM_NAME\020\001\022\016\n"
  "\nPOPULATION\020\002\022\021\n\rDISTRICT_NAME\020\004\022\014\n\010AWD_"
  "PIPE\020\005\022\020\n\014AWD_AERATION\020\006\022\014\n\010AWD_BUND\020\007\022\t"
  "\n\005Actor\020\010\022\022\n\016TagName_FARMER\020\t\022\013\n\007PROGRAM"
  "\020\n\022\020\n\014TagName_FARM\020\013\022\n\n\006PARENT\020\014\022\033\n\027TagN"
  "ame_APPROVAL_STATUS\020\r\022\024\n\020CONTENT_METADAT"
  "A\020\016\022\014\n\010REFERRAL\020\017\022\014\n\010GEOFENCE\020\020\022\t\n\005PINGS"
  "\020\021\022\t\n\005LOCKS\020\022*<\n\032GeometryRepresentationT"
  "ype\022\007\n\003WKB\020\000\022\007\n\003WKT\020\001\022\014\n\010GEO_JSON\020\002*\310\003\n\026"
  "ValidationResponseCode\022\013\n\007NO_CODE\020\000\022+\n&T"
  "OO_CLOSE_TO_ANOTHER_PIPE_PICTURE_CODE\020\241\037"
  "\022+\n&TOO_CLOSE_TO_ANOTHER_BUND_PICTURE_CO"
  "DE\020\242\037\022/\n*TOO_CLOSE_TO_ANOTHER_AERATION_P"
  "ICTURE_CODE\020\243\037\0224\n/PICTURE_LOCATION_LIES_"
  "INSIDE_ANOTHER_FENCE_CODE\020\244\037\0224\n/PICTURE_"
  "LOCATION_NOT_LIES_INSIDE_ANY_FENCE_CODE\020"
  "\245\037\022\'\n\"PICTURE_TOO_FAR_FROM_GEOFENCE_CODE"
  "\020\246\037\022\033\n\026NO_PIPE_INSTALLED_CODE\020\247\037\022\037\n\032POIN"
  "T_OUTSIDE_POLYGON_CODE\020\250\037\022#\n\036MORE_POINT_"
  "INSIDE_POLYGON_CODE\020\251\037\022\036\n\031POINT_INSIDE_P"
  "OLYGON_CODE\020\252\037*\263\003\n\025ValidationResponseMsg"
  "\022\016\n\nNO_MESSAGE\020\000\022)\n%TOO_CLOSE_TO_ANOTHER"
  "_PIPE_PICTURE_MSG\020\001\022)\n%TOO_CLOSE_TO_ANOT"
  "HER_BUND_PICTURE_MSG\020\002\022-\n)TOO_CLOSE_TO_A"
  "NOTHER_AERATION_PICTURE_MSG\020\003\0222\n.PICTURE"
  "_LOCATION_LIES_INSIDE_ANOTHER_FENCE_MSG\020"
  "\004\0222\n.PICTURE_LOCATION_NOT_LIES_INSIDE_AN"
  "Y_FENCE_MSG\020\005\022\"\n\036PICTURE_TOO_FAR_FROM_FE"
  "NCE_MSG\020\006\022\031\n\025NO_PIPE_INSTALLED_MSG\020\007\022\035\n\031"
  "POINT_OUTSIDE_POLYGON_MSG\020\010\022!\n\035MORE_POIN"
  "T_INSIDE_POLYGON_MSG\020\t\022\034\n\030POINT_INSIDE_P"
  "OLYGON_MSG\020\n*R\n\021GeoResponseStatus\022\017\n\013NO_"
  "RESPONSE\020\000\022\026\n\022FAILED_TO_VALIDATE\020\001\022\024\n\020FA"
  "ILED_TO_INSERT\020\002*\274\001\n\021GeoValidationType\022\032"
  "\n\026NO_GEO_VALIDATION_TYPE\020\000\022\036\n\032POINT_PROX"
  "IMITY_VALIDATION\020\001\022\'\n#GEOMETRY_INSIDE_GE"
  "OMETRY_VALIDATION\020\002\022\037\n\033GEOMETRY_OVERLAP_"
  "VALIDATION\020\003\022!\n\035GEOMETRY_EXISTENCE_VALID"
  "ATION\020\004*\211\004\n\021GeoValidationName\022\032\n\026NO_GEO_"
  "VALIDATION_NAME\020\000\022(\n$POINT_X_WITHIN_K_ME"
  "TRES_FROM_POINT_Y\020\001\022\'\n#POINT_X_LEAST_K_M"
  "ETRES_FROM_POINT_Y\020\002\022*\n&POINT_X_WITHIN_K"
  "_METRES_FROM_POLYGON_Y\020\003\022)\n%POINT_X_LEAS"
  "T_K_METRES_FROM_POLYGON_Y\020\004\022\'\n#POINT_X_A"
  "LONE_LIES_INSIDE_POLYGON_Y\020\005\022\036\n\032POLYGON_"
  "X_INSIDE_POLYGON_Y\020\006\022-\n)POINT_X_INSIDE_A"
  "NY_TARGET_SET_OF_POLYGONS\020\007\022/\n+POLYGON_X"
  "_INSIDE_ANY_TARGET_SET_OF_POLYGONS\020\010\022\"\n\036"
  "GEOMETRY_X_OVERLAPS_GEOMETRY_Y\020\t\0224\n0GEOM"
  "ETRY_X_OVERLAPS_ANY_TARGET_SET_OF_GEOMET"
  "RIES\020\n\022+\n\'GEOMETRY_X_EXISTS_IN_RESPECTIV"
  "E_DATASET\020\013*a\n\rAssertionType\022\032\n\026DEFAULT_"
  "ASSERTION_TYPE\020\000\022\017\n\013ASSERT_TRUE\020\001\022\020\n\014ASS"
  "ERT_FALSE\020\002\022\021\n\rASSERT_EQUALS\020\003*J\n\rGeoDat"
  "aSource\022\020\n\014NO_FARM_TYPE\020\000\022\022\n\016USER_FARM_D"
  "ATA\020\001\022\023\n\017USER_POINT_DATA\020\002*\237\001\n\tFilterKey"
  "\022\n\n\006NO_KEY\020\000\022\n\n\006TAG_ID\020\001\022\014\n\010PLACE_Id\020\002\022\014"
  "\n\010TAG_NAME\020\003\022\013\n\007TAG_KEY\020\004\022\r\n\tTAG_VALUE\020\005"
  "\022\014\n\010TILE_KEY\020\006\022\022\n\016REFERENCE_TYPE\020\007\022\r\n\tAT"
  "TRIBUTE\020\010\022\021\n\rATTRIBUTE_KEY\020\t*\227\001\n\rReferen"
  "ceType\022\022\n\016NO_ENTITY_TYPE\020\000\022\023\n\017DEVICE_REF"
  "_TYPE\020\001\022\024\n\020MACHINE_REF_TYPE\020\002\022\010\n\004USER\020\003\022"
  "\021\n\rFARM_REF_TYPE\020\004\022\025\n\021OPERATOR_REF_TYPE\020"
  "\005\022\023\n\017PARENT_REF_TYPE\020\006*\235\002\n\014AttributeKey\022"
  "\024\n\020NO_ATTRIBUTE_KEY\020\000\022\006\n\002ID\020\001\022\014\n\010ATT_NAM"
  "E\020\002\022\r\n\tSERIAL_NO\020\003\022\016\n\nMACHINE_ID\020\004\022\r\n\tDE"
  "VICE_ID\020\005\022\020\n\014ACRE_SPRAYED\020\006\022\013\n\007ADDRESS\020\007"
  "\022\031\n\025FARM_ID_ATTRIBUTE_KEY\020\010\022\r\n\tFUEL_TYPE"
  "\020\t\022\016\n\nLAND_ACRES\020\n\022\022\n\016MACHINE_NUMBER\020\013\022\014"
  "\n\010PHONE_NO\020\014\022\032\n\026RABI_22_CONTENT_ID_ATT\020\r"
  "\022\034\n\030KHARIF_22_CONTENT_ID_ATT\020\016*g\n\013Servic"
  "eName\022\023\n\017NO_SERVICE_NAME\020\000\022\025\n\021MAPS_VECTO"
  "R_STORE\020\001\022\025\n\021MAPS_PLACES_STORE\020\002\022\025\n\021MAPS"
  "_RASTER_INDEX\020\003*\255\001\n\tValueType\022\021\n\rNO_VALU"
  "E_TYPE\020\000\022\025\n\021VALUE_TYPE_DOUBLE\020\001\022\025\n\021VALUE"
  "_TYPE_STRING\020\002\022\026\n\022VALUE_TYPE_BOOLEAN\020\003\022\024"
  "\n\020VALUE_TYPE_INT64\020\004\022\024\n\020VALUE_TYPE_INT32"
  "\020\005\022\033\n\027VALUE_TYPE_NSV_PLACE_ID\020\006*\240\001\n\016Vali"
  "dationName\022\021\n\rNO_VALIDATION\020\000\022\035\n\031AERATIO"
  "N_EVENT_VALIDATION\020\001\022 \n\034PIPE_INSTALLATIO"
  "N_VALIDATION\020\002\022\032\n\026INSIDE_BUND_VALIDATION"
  "\020\003\022\036\n\032INSIDE_GEOFENCE_VALIDATION\020\004*Z\n\016Va"
  "lidationType\022\026\n\022NO_VALIDATION_TYPE\020\000\022\027\n\023"
  "VALIDATION_TYPE_DSR\020\001\022\027\n\023VALIDATION_TYPE"
  "_AWD\020\002*[\n\020HealthParameters\022\021\n\rSYSTEM_HEA"
  "LTH\020\000\022\r\n\tDB_HEALTH\020\001\022\020\n\014CACHE_HEALTH\020\002\022\023"
  "\n\017UPSTREAM_HEALTH\020\003*Q\n\nCloudStore\022\022\n\016NO_"
  "Cloud_Store\020\000\022\022\n\016S3_Cloud_Store\020\001\022\033\n\027Clo"
  "ud_Front_Cloud_Store\020\002*3\n\nUrlBuilder\022\022\n\016"
  "NO_URL_BUILDER\020\000\022\021\n\rURL_BUILDER_1\020\001*/\n\tS"
  "atellite\022\020\n\014NO_SATELLITE\020\000\022\020\n\014SATELLITE_"
  "S1\020\001*-\n\004Band\022\013\n\007NO_BAND\020\000\022\013\n\007BAND_VH\020\001\022\013"
  "\n\007BAND_VV\020\002*P\n\007AppName\022\017\n\013NO_APP_NAME\020\000\022"
  "\020\n\014APP_NAME_AWD\020\001\022\020\n\014APP_NAME_CRM\020\002\022\020\n\014A"
  "PP_NAME_DSR\020\003BX\n(farm.nurture.core.contr"
  "acts.common.enumsP\001Z\'code.nurture.farm/C"
  "ore/Contracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fgeo_5fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fgeo_5fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fgeo_5fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fgeo_5fenums_2eproto = {
  false, false, descriptor_table_protodef_Common_2fgeo_5fenums_2eproto, "Common/geo_enums.proto", 6431,
  &descriptor_table_Common_2fgeo_5fenums_2eproto_once, descriptor_table_Common_2fgeo_5fenums_2eproto_sccs, descriptor_table_Common_2fgeo_5fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2fgeo_5fenums_2eproto::offsets,
  file_level_metadata_Common_2fgeo_5fenums_2eproto, 0, file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto, file_level_service_descriptors_Common_2fgeo_5fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fgeo_5fenums_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[0];
}
bool ProjectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceNamespace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[1];
}
bool PlaceNamespace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[2];
}
bool PlaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemporalResolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[3];
}
bool TemporalResolutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[4];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 300:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[5];
}
bool GeometryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[6];
}
bool DataPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemporalResolutionLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[7];
}
bool TemporalResolutionLevel_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPropCategoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[8];
}
bool DataPropCategoryType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoStatusResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[9];
}
bool GeoStatusResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UI_CLIENT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[10];
}
bool UI_CLIENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[11];
}
bool PlaceSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceVisibleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[12];
}
bool PlaceVisibleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceTagProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[13];
}
bool PlaceTagProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceTagName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[14];
}
bool PlaceTagName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryRepresentationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[15];
}
bool GeometryRepresentationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[16];
}
bool ValidationResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationResponseMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[17];
}
bool ValidationResponseMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[18];
}
bool GeoResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoValidationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[19];
}
bool GeoValidationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoValidationName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[20];
}
bool GeoValidationName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssertionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[21];
}
bool AssertionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoDataSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[22];
}
bool GeoDataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[23];
}
bool FilterKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[24];
}
bool ReferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[25];
}
bool AttributeKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[26];
}
bool ServiceName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[27];
}
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[28];
}
bool ValidationName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[29];
}
bool ValidationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthParameters_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[30];
}
bool HealthParameters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudStore_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[31];
}
bool CloudStore_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrlBuilder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[32];
}
bool UrlBuilder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Satellite_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[33];
}
bool Satellite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Band_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[34];
}
bool Band_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fgeo_5fenums_2eproto);
  return file_level_enum_descriptors_Common_2fgeo_5fenums_2eproto[35];
}
bool AppName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
