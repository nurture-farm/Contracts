// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/time_slot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2ftime_5fslot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2ftime_5fslot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2ftime_5fslot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2ftime_5fslot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2ftime_5fslot_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class DateSlot;
class DateSlotDefaultTypeInternal;
extern DateSlotDefaultTypeInternal _DateSlot_default_instance_;
class LocalTime;
class LocalTimeDefaultTypeInternal;
extern LocalTimeDefaultTypeInternal _LocalTime_default_instance_;
class TimeInterval;
class TimeIntervalDefaultTypeInternal;
extern TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class TimeSlot;
class TimeSlotDefaultTypeInternal;
extern TimeSlotDefaultTypeInternal _TimeSlot_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::DateSlot* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::DateSlot>(Arena*);
template<> ::farm::nurture::core::contracts::common::LocalTime* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::LocalTime>(Arena*);
template<> ::farm::nurture::core::contracts::common::TimeInterval* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeInterval>(Arena*);
template<> ::farm::nurture::core::contracts::common::TimeRange* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeRange>(Arena*);
template<> ::farm::nurture::core::contracts::common::TimeSlot* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeSlot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class LocalTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.LocalTime) */ {
 public:
  inline LocalTime() : LocalTime(nullptr) {}
  virtual ~LocalTime();

  LocalTime(const LocalTime& from);
  LocalTime(LocalTime&& from) noexcept
    : LocalTime() {
    *this = ::std::move(from);
  }

  inline LocalTime& operator=(const LocalTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTime& operator=(LocalTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalTime& default_instance();

  static inline const LocalTime* internal_default_instance() {
    return reinterpret_cast<const LocalTime*>(
               &_LocalTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalTime& a, LocalTime& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalTime* New() const final {
    return CreateMaybeMessage<LocalTime>(nullptr);
  }

  LocalTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalTime& from);
  void MergeFrom(const LocalTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.LocalTime";
  }
  protected:
  explicit LocalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2ftime_5fslot_2eproto);
    return ::descriptor_table_Common_2ftime_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kHourFieldNumber = 2,
    kMinuteFieldNumber = 3,
    kSecondsFieldNumber = 4,
  };
  // string date = 1;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // int32 hour = 2;
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minute = 3;
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seconds = 4;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.LocalTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2ftime_5fslot_2eproto;
};
// -------------------------------------------------------------------

class TimeInterval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.TimeInterval) */ {
 public:
  inline TimeInterval() : TimeInterval(nullptr) {}
  virtual ~TimeInterval();

  TimeInterval(const TimeInterval& from);
  TimeInterval(TimeInterval&& from) noexcept
    : TimeInterval() {
    *this = ::std::move(from);
  }

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeInterval& operator=(TimeInterval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeInterval& default_instance();

  static inline const TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TimeInterval*>(
               &_TimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeInterval& a, TimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeInterval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeInterval* New() const final {
    return CreateMaybeMessage<TimeInterval>(nullptr);
  }

  TimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeInterval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeInterval& from);
  void MergeFrom(const TimeInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeInterval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.TimeInterval";
  }
  protected:
  explicit TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2ftime_5fslot_2eproto);
    return ::descriptor_table_Common_2ftime_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimezoneFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // string timezone = 1;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // .farm.nurture.core.contracts.common.LocalTime start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::farm::nurture::core::contracts::common::LocalTime& start_time() const;
  ::farm::nurture::core::contracts::common::LocalTime* release_start_time();
  ::farm::nurture::core::contracts::common::LocalTime* mutable_start_time();
  void set_allocated_start_time(::farm::nurture::core::contracts::common::LocalTime* start_time);
  private:
  const ::farm::nurture::core::contracts::common::LocalTime& _internal_start_time() const;
  ::farm::nurture::core::contracts::common::LocalTime* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::farm::nurture::core::contracts::common::LocalTime* start_time);
  ::farm::nurture::core::contracts::common::LocalTime* unsafe_arena_release_start_time();

  // .farm.nurture.core.contracts.common.LocalTime end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::farm::nurture::core::contracts::common::LocalTime& end_time() const;
  ::farm::nurture::core::contracts::common::LocalTime* release_end_time();
  ::farm::nurture::core::contracts::common::LocalTime* mutable_end_time();
  void set_allocated_end_time(::farm::nurture::core::contracts::common::LocalTime* end_time);
  private:
  const ::farm::nurture::core::contracts::common::LocalTime& _internal_end_time() const;
  ::farm::nurture::core::contracts::common::LocalTime* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::farm::nurture::core::contracts::common::LocalTime* end_time);
  ::farm::nurture::core::contracts::common::LocalTime* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.TimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::farm::nurture::core::contracts::common::LocalTime* start_time_;
  ::farm::nurture::core::contracts::common::LocalTime* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2ftime_5fslot_2eproto;
};
// -------------------------------------------------------------------

class TimeSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.TimeSlot) */ {
 public:
  inline TimeSlot() : TimeSlot(nullptr) {}
  virtual ~TimeSlot();

  TimeSlot(const TimeSlot& from);
  TimeSlot(TimeSlot&& from) noexcept
    : TimeSlot() {
    *this = ::std::move(from);
  }

  inline TimeSlot& operator=(const TimeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSlot& operator=(TimeSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSlot& default_instance();

  static inline const TimeSlot* internal_default_instance() {
    return reinterpret_cast<const TimeSlot*>(
               &_TimeSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSlot& a, TimeSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSlot* New() const final {
    return CreateMaybeMessage<TimeSlot>(nullptr);
  }

  TimeSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSlot& from);
  void MergeFrom(const TimeSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.TimeSlot";
  }
  protected:
  explicit TimeSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2ftime_5fslot_2eproto);
    return ::descriptor_table_Common_2ftime_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.TimeSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2ftime_5fslot_2eproto;
};
// -------------------------------------------------------------------

class DateSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.DateSlot) */ {
 public:
  inline DateSlot() : DateSlot(nullptr) {}
  virtual ~DateSlot();

  DateSlot(const DateSlot& from);
  DateSlot(DateSlot&& from) noexcept
    : DateSlot() {
    *this = ::std::move(from);
  }

  inline DateSlot& operator=(const DateSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateSlot& operator=(DateSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateSlot& default_instance();

  static inline const DateSlot* internal_default_instance() {
    return reinterpret_cast<const DateSlot*>(
               &_DateSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DateSlot& a, DateSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(DateSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateSlot* New() const final {
    return CreateMaybeMessage<DateSlot>(nullptr);
  }

  DateSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateSlot& from);
  void MergeFrom(const DateSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.DateSlot";
  }
  protected:
  explicit DateSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2ftime_5fslot_2eproto);
    return ::descriptor_table_Common_2ftime_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kTimeZoneFieldNumber = 3,
  };
  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // string time_zone = 3;
  void clear_time_zone();
  const std::string& time_zone() const;
  void set_time_zone(const std::string& value);
  void set_time_zone(std::string&& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  std::string* mutable_time_zone();
  std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.DateSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2ftime_5fslot_2eproto;
};
// -------------------------------------------------------------------

class TimeRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.TimeRange) */ {
 public:
  inline TimeRange() : TimeRange(nullptr) {}
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange& default_instance();

  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRange* New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.TimeRange";
  }
  protected:
  explicit TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2ftime_5fslot_2eproto);
    return ::descriptor_table_Common_2ftime_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp startTime = 1;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& starttime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_starttime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_starttime();
  void set_allocated_starttime(PROTOBUF_NAMESPACE_ID::Timestamp* starttime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_starttime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      PROTOBUF_NAMESPACE_ID::Timestamp* starttime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_starttime();

  // .google.protobuf.Timestamp endTime = 2;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& endtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_endtime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_endtime();
  void set_allocated_endtime(PROTOBUF_NAMESPACE_ID::Timestamp* endtime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_endtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_endtime();
  public:
  void unsafe_arena_set_allocated_endtime(
      PROTOBUF_NAMESPACE_ID::Timestamp* endtime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_endtime();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.TimeRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* starttime_;
  PROTOBUF_NAMESPACE_ID::Timestamp* endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2ftime_5fslot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalTime

// string date = 1;
inline void LocalTime::clear_date() {
  date_.ClearToEmpty();
}
inline const std::string& LocalTime::date() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LocalTime.date)
  return _internal_date();
}
inline void LocalTime::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocalTime.date)
}
inline std::string* LocalTime::mutable_date() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.LocalTime.date)
  return _internal_mutable_date();
}
inline const std::string& LocalTime::_internal_date() const {
  return date_.Get();
}
inline void LocalTime::_internal_set_date(const std::string& value) {
  
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocalTime::set_date(std::string&& value) {
  
  date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.LocalTime.date)
}
inline void LocalTime::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.LocalTime.date)
}
inline void LocalTime::set_date(const char* value,
    size_t size) {
  
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.LocalTime.date)
}
inline std::string* LocalTime::_internal_mutable_date() {
  
  return date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocalTime::release_date() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.LocalTime.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocalTime::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.LocalTime.date)
}

// int32 hour = 2;
inline void LocalTime::clear_hour() {
  hour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::hour() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LocalTime.hour)
  return _internal_hour();
}
inline void LocalTime::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_ = value;
}
inline void LocalTime::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocalTime.hour)
}

// int32 minute = 3;
inline void LocalTime::clear_minute() {
  minute_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::minute() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LocalTime.minute)
  return _internal_minute();
}
inline void LocalTime::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minute_ = value;
}
inline void LocalTime::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocalTime.minute)
}

// int32 seconds = 4;
inline void LocalTime::clear_seconds() {
  seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTime::seconds() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LocalTime.seconds)
  return _internal_seconds();
}
inline void LocalTime::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seconds_ = value;
}
inline void LocalTime::set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocalTime.seconds)
}

// -------------------------------------------------------------------

// TimeInterval

// string timezone = 1;
inline void TimeInterval::clear_timezone() {
  timezone_.ClearToEmpty();
}
inline const std::string& TimeInterval::timezone() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeInterval.timezone)
  return _internal_timezone();
}
inline void TimeInterval::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.TimeInterval.timezone)
}
inline std::string* TimeInterval::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeInterval.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& TimeInterval::_internal_timezone() const {
  return timezone_.Get();
}
inline void TimeInterval::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeInterval::set_timezone(std::string&& value) {
  
  timezone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.TimeInterval.timezone)
}
inline void TimeInterval::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.TimeInterval.timezone)
}
inline void TimeInterval::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.TimeInterval.timezone)
}
inline std::string* TimeInterval::_internal_mutable_timezone() {
  
  return timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeInterval::release_timezone() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeInterval.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeInterval::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeInterval.timezone)
}

// .farm.nurture.core.contracts.common.LocalTime start_time = 2;
inline bool TimeInterval::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool TimeInterval::has_start_time() const {
  return _internal_has_start_time();
}
inline void TimeInterval::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::LocalTime& TimeInterval::_internal_start_time() const {
  const ::farm::nurture::core::contracts::common::LocalTime* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::LocalTime&>(
      ::farm::nurture::core::contracts::common::_LocalTime_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::LocalTime& TimeInterval::start_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeInterval.start_time)
  return _internal_start_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_start_time(
    ::farm::nurture::core::contracts::common::LocalTime* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeInterval.start_time)
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::release_start_time() {
  
  ::farm::nurture::core::contracts::common::LocalTime* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeInterval.start_time)
  
  ::farm::nurture::core::contracts::common::LocalTime* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::LocalTime>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeInterval.start_time)
  return _internal_mutable_start_time();
}
inline void TimeInterval::set_allocated_start_time(::farm::nurture::core::contracts::common::LocalTime* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_time_;
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_time);
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeInterval.start_time)
}

// .farm.nurture.core.contracts.common.LocalTime end_time = 3;
inline bool TimeInterval::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool TimeInterval::has_end_time() const {
  return _internal_has_end_time();
}
inline void TimeInterval::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::LocalTime& TimeInterval::_internal_end_time() const {
  const ::farm::nurture::core::contracts::common::LocalTime* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::LocalTime&>(
      ::farm::nurture::core::contracts::common::_LocalTime_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::LocalTime& TimeInterval::end_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeInterval.end_time)
  return _internal_end_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_end_time(
    ::farm::nurture::core::contracts::common::LocalTime* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeInterval.end_time)
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::release_end_time() {
  
  ::farm::nurture::core::contracts::common::LocalTime* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeInterval.end_time)
  
  ::farm::nurture::core::contracts::common::LocalTime* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::LocalTime>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline ::farm::nurture::core::contracts::common::LocalTime* TimeInterval::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeInterval.end_time)
  return _internal_mutable_end_time();
}
inline void TimeInterval::set_allocated_end_time(::farm::nurture::core::contracts::common::LocalTime* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_time_;
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_time);
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeInterval.end_time)
}

// -------------------------------------------------------------------

// TimeSlot

// .google.protobuf.Timestamp start_time = 1;
inline bool TimeSlot::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool TimeSlot::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSlot::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSlot::start_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeSlot.start_time)
  return _internal_start_time();
}
inline void TimeSlot::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeSlot.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSlot::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSlot::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeSlot.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSlot::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSlot::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeSlot.start_time)
  return _internal_mutable_start_time();
}
inline void TimeSlot::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeSlot.start_time)
}

// .google.protobuf.Duration duration = 2;
inline bool TimeSlot::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool TimeSlot::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSlot::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSlot::duration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeSlot.duration)
  return _internal_duration();
}
inline void TimeSlot::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeSlot.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSlot::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSlot::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeSlot.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSlot::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSlot::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeSlot.duration)
  return _internal_mutable_duration();
}
inline void TimeSlot::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeSlot.duration)
}

// -------------------------------------------------------------------

// DateSlot

// string start_date = 1;
inline void DateSlot::clear_start_date() {
  start_date_.ClearToEmpty();
}
inline const std::string& DateSlot::start_date() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DateSlot.start_date)
  return _internal_start_date();
}
inline void DateSlot::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DateSlot.start_date)
}
inline std::string* DateSlot::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DateSlot.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& DateSlot::_internal_start_date() const {
  return start_date_.Get();
}
inline void DateSlot::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DateSlot::set_start_date(std::string&& value) {
  
  start_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DateSlot.start_date)
}
inline void DateSlot::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DateSlot.start_date)
}
inline void DateSlot::set_start_date(const char* value,
    size_t size) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DateSlot.start_date)
}
inline std::string* DateSlot::_internal_mutable_start_date() {
  
  return start_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateSlot::release_start_date() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DateSlot.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateSlot::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DateSlot.start_date)
}

// string end_date = 2;
inline void DateSlot::clear_end_date() {
  end_date_.ClearToEmpty();
}
inline const std::string& DateSlot::end_date() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DateSlot.end_date)
  return _internal_end_date();
}
inline void DateSlot::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DateSlot.end_date)
}
inline std::string* DateSlot::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DateSlot.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& DateSlot::_internal_end_date() const {
  return end_date_.Get();
}
inline void DateSlot::_internal_set_end_date(const std::string& value) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DateSlot::set_end_date(std::string&& value) {
  
  end_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DateSlot.end_date)
}
inline void DateSlot::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DateSlot.end_date)
}
inline void DateSlot::set_end_date(const char* value,
    size_t size) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DateSlot.end_date)
}
inline std::string* DateSlot::_internal_mutable_end_date() {
  
  return end_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateSlot::release_end_date() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DateSlot.end_date)
  return end_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateSlot::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DateSlot.end_date)
}

// string time_zone = 3;
inline void DateSlot::clear_time_zone() {
  time_zone_.ClearToEmpty();
}
inline const std::string& DateSlot::time_zone() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DateSlot.time_zone)
  return _internal_time_zone();
}
inline void DateSlot::set_time_zone(const std::string& value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DateSlot.time_zone)
}
inline std::string* DateSlot::mutable_time_zone() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DateSlot.time_zone)
  return _internal_mutable_time_zone();
}
inline const std::string& DateSlot::_internal_time_zone() const {
  return time_zone_.Get();
}
inline void DateSlot::_internal_set_time_zone(const std::string& value) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DateSlot::set_time_zone(std::string&& value) {
  
  time_zone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DateSlot.time_zone)
}
inline void DateSlot::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DateSlot.time_zone)
}
inline void DateSlot::set_time_zone(const char* value,
    size_t size) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DateSlot.time_zone)
}
inline std::string* DateSlot::_internal_mutable_time_zone() {
  
  return time_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateSlot::release_time_zone() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DateSlot.time_zone)
  return time_zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateSlot::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  time_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DateSlot.time_zone)
}

// -------------------------------------------------------------------

// TimeRange

// .google.protobuf.Timestamp startTime = 1;
inline bool TimeRange::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool TimeRange::has_starttime() const {
  return _internal_has_starttime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::_internal_starttime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::starttime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeRange.startTime)
  return _internal_starttime();
}
inline void TimeRange::unsafe_arena_set_allocated_starttime(
    PROTOBUF_NAMESPACE_ID::Timestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeRange.startTime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_starttime() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeRange.startTime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeRange.startTime)
  return _internal_mutable_starttime();
}
inline void TimeRange::set_allocated_starttime(PROTOBUF_NAMESPACE_ID::Timestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime)->GetArena();
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeRange.startTime)
}

// .google.protobuf.Timestamp endTime = 2;
inline bool TimeRange::_internal_has_endtime() const {
  return this != internal_default_instance() && endtime_ != nullptr;
}
inline bool TimeRange::has_endtime() const {
  return _internal_has_endtime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::_internal_endtime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = endtime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::endtime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TimeRange.endTime)
  return _internal_endtime();
}
inline void TimeRange::unsafe_arena_set_allocated_endtime(
    PROTOBUF_NAMESPACE_ID::Timestamp* endtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime_);
  }
  endtime_ = endtime;
  if (endtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TimeRange.endTime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_endtime() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = endtime_;
  endtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TimeRange.endTime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = endtime_;
  endtime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::_internal_mutable_endtime() {
  
  if (endtime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    endtime_ = p;
  }
  return endtime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TimeRange.endTime)
  return _internal_mutable_endtime();
}
inline void TimeRange::set_allocated_endtime(PROTOBUF_NAMESPACE_ID::Timestamp* endtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime_);
  }
  if (endtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime)->GetArena();
    if (message_arena != submessage_arena) {
      endtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtime, submessage_arena);
    }
    
  } else {
    
  }
  endtime_ = endtime;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TimeRange.endTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2ftime_5fslot_2eproto
