// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/entities.proto

#include "Common/entities.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationHierarchy_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2ftime_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSlot_Common_2ftime_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class ActorIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorID> _instance;
} _ActorID_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class ActorEventTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorEventTrace> _instance;
} _ActorEventTrace_default_instance_;
class GeographyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geography> _instance;
} _Geography_default_instance_;
class KafkaProductInterestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KafkaProductInterestProto> _instance;
} _KafkaProductInterestProto_default_instance_;
class RoleGeoPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleGeoPair> _instance;
} _RoleGeoPair_default_instance_;
class UserAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAttributes> _instance;
} _UserAttributes_default_instance_;
class LocationHierarchyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationHierarchy> _instance;
} _LocationHierarchy_default_instance_;
class ProductDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductDetails> _instance;
} _ProductDetails_default_instance_;
class IOTStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOTStats> _instance;
} _IOTStats_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_ActorEventTrace_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ActorEventTrace_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ActorEventTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActorEventTrace_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ActorEventTrace_Common_2fentities_2eproto}, {
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ActorID_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ActorID_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ActorID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorID_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_Geography_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Geography_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Geography();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Geography_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Geography_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_IOTStats_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_IOTStats_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::IOTStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOTStats_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IOTStats_Common_2fentities_2eproto}, {
      &scc_info_TimeSlot_Common_2ftime_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_KafkaProductInterestProto_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_KafkaProductInterestProto_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::KafkaProductInterestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KafkaProductInterestProto_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KafkaProductInterestProto_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_Location_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Location_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Location_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_LocationHierarchy_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_LocationHierarchy_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::LocationHierarchy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationHierarchy_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocationHierarchy_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_ProductDetails_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ProductDetails_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ProductDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductDetails_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProductDetails_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_RoleGeoPair_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_RoleGeoPair_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::RoleGeoPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleGeoPair_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleGeoPair_Common_2fentities_2eproto}, {}};

static void InitDefaultsscc_info_UserAttributes_Common_2fentities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UserAttributes_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UserAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAttributes_Common_2fentities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserAttributes_Common_2fentities_2eproto}, {
      &scc_info_LocationHierarchy_Common_2fentities_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fentities_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fentities_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fentities_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fentities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorID, actor_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorID, actor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Location, accuracy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorEventTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorEventTrace, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ActorEventTrace, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Geography, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Geography, geographytype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Geography, geographyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, farmermobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, farmername_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, productname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, productbrandname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, productcode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, latitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, longitude_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, district_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, enquiry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::KafkaProductInterestProto, farmerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RoleGeoPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RoleGeoPair, role_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RoleGeoPair, geoid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RoleGeoPair, subrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, locationhierarchy_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, product_reference_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, product_reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, booking_source_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, crop_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, isdsrsignedup_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, bookingcount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserAttributes, iskavach_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocationHierarchy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LocationHierarchy, loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, materialcode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, unit_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, tolerancepercentage_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, dosageperacre_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ProductDetails, unitpacksize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, ismalfunctioned_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, iotacre_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, allowacrechangepercentage_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, totalpingscount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, timeslot_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, engineoncount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, speedcount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, pingdensityperminute_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, ismisbehaved_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, deviceid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::IOTStats, machinenumber_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::ActorID)},
  { 7, -1, sizeof(::farm::nurture::core::contracts::common::Location)},
  { 15, -1, sizeof(::farm::nurture::core::contracts::common::ActorEventTrace)},
  { 22, -1, sizeof(::farm::nurture::core::contracts::common::Geography)},
  { 29, -1, sizeof(::farm::nurture::core::contracts::common::KafkaProductInterestProto)},
  { 45, -1, sizeof(::farm::nurture::core::contracts::common::RoleGeoPair)},
  { 53, -1, sizeof(::farm::nurture::core::contracts::common::UserAttributes)},
  { 66, -1, sizeof(::farm::nurture::core::contracts::common::LocationHierarchy)},
  { 72, -1, sizeof(::farm::nurture::core::contracts::common::ProductDetails)},
  { 82, -1, sizeof(::farm::nurture::core::contracts::common::IOTStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ActorID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ActorEventTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Geography_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_KafkaProductInterestProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_RoleGeoPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UserAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_LocationHierarchy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ProductDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_IOTStats_default_instance_),
};

const char descriptor_table_protodef_Common_2fentities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Common/entities.proto\022\"farm.nurture.co"
  "re.contracts.common\032\022Common/enums.proto\032"
  "\037google/protobuf/timestamp.proto\032\026Common"
  "/time_slot.proto\"^\n\007ActorID\022A\n\nactor_typ"
  "e\030\001 \001(\0162-.farm.nurture.core.contracts.co"
  "mmon.ActorType\022\020\n\010actor_id\030\002 \001(\003\"A\n\010Loca"
  "tion\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001("
  "\001\022\020\n\010accuracy\030\003 \001(\001\"|\n\017ActorEventTrace\022:"
  "\n\005actor\030\001 \001(\0132+.farm.nurture.core.contra"
  "cts.common.ActorID\022-\n\ttimestamp\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\"j\n\tGeography\022H"
  "\n\rgeographyType\030\001 \001(\01621.farm.nurture.cor"
  "e.contracts.common.GeographyType\022\023\n\013geog"
  "raphyId\030\002 \001(\003\"\370\001\n\031KafkaProductInterestPr"
  "oto\022\032\n\022farmerMobileNumber\030\001 \001(\t\022\022\n\nfarme"
  "rName\030\002 \001(\t\022\023\n\013productName\030\003 \001(\t\022\030\n\020prod"
  "uctBrandName\030\004 \001(\t\022\023\n\013productCode\030\005 \001(\t\022"
  "\020\n\010latitude\030\006 \001(\001\022\021\n\tlongitude\030\007 \001(\001\022\020\n\010"
  "district\030\010 \001(\t\022\r\n\005state\030\t \001(\t\022\017\n\007enquiry"
  "\030\n \001(\003\022\020\n\010farmerId\030\013 \001(\003\";\n\013RoleGeoPair\022"
  "\014\n\004role\030\001 \001(\t\022\r\n\005geoId\030\002 \001(\003\022\017\n\007subRole\030"
  "\003 \001(\t\"\270\002\n\016UserAttributes\022P\n\021locationHier"
  "archy\030\001 \001(\01325.farm.nurture.core.contract"
  "s.common.LocationHierarchy\022\036\n\026product_re"
  "ference_type\030\002 \001(\t\022\034\n\024product_reference_"
  "id\030\003 \001(\t\022I\n\016booking_source\030\004 \001(\01621.farm."
  "nurture.core.contracts.common.BookingSou"
  "rce\022\014\n\004crop\030\005 \003(\t\022\025\n\risDSRSignedUp\030\006 \001(\010"
  "\022\024\n\014bookingCount\030\007 \001(\003\022\020\n\010isKavach\030\010 \001(\010"
  "\" \n\021LocationHierarchy\022\013\n\003loc\030\001 \003(\t\"\254\001\n\016P"
  "roductDetails\022\024\n\014materialCode\030\001 \001(\t\022:\n\004u"
  "nit\030\002 \001(\0162,.farm.nurture.core.contracts."
  "common.UnitType\022\033\n\023tolerancePercentage\030\003"
  " \001(\001\022\025\n\rdosagePerAcre\030\004 \001(\001\022\024\n\014unitPackS"
  "ize\030\005 \001(\001\"\270\002\n\010IOTStats\022\027\n\017isMalfunctione"
  "d\030\001 \001(\010\022\017\n\007iotAcre\030\002 \001(\001\022!\n\031allowAcreCha"
  "ngePercentage\030\003 \001(\001\022\027\n\017totalPingsCount\030\004"
  " \001(\003\022>\n\010timeslot\030\005 \001(\0132,.farm.nurture.co"
  "re.contracts.common.TimeSlot\022\025\n\rengineOn"
  "Count\030\006 \001(\003\022\022\n\nspeedCount\030\007 \001(\003\022\034\n\024pingD"
  "ensityPerMinute\030\010 \001(\001\022\024\n\014isMisbehaved\030\t "
  "\001(\010\022\020\n\010deviceId\030\n \001(\t\022\025\n\rmachineNumber\030\013"
  " \001(\tBS\n\"farm.nurture.core.contracts.comm"
  "onP\001Z(github.com/nurture-farm/Contracts/"
  "Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fentities_2eproto_deps[3] = {
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_Common_2ftime_5fslot_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fentities_2eproto_sccs[10] = {
  &scc_info_ActorEventTrace_Common_2fentities_2eproto.base,
  &scc_info_ActorID_Common_2fentities_2eproto.base,
  &scc_info_Geography_Common_2fentities_2eproto.base,
  &scc_info_IOTStats_Common_2fentities_2eproto.base,
  &scc_info_KafkaProductInterestProto_Common_2fentities_2eproto.base,
  &scc_info_Location_Common_2fentities_2eproto.base,
  &scc_info_LocationHierarchy_Common_2fentities_2eproto.base,
  &scc_info_ProductDetails_Common_2fentities_2eproto.base,
  &scc_info_RoleGeoPair_Common_2fentities_2eproto.base,
  &scc_info_UserAttributes_Common_2fentities_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fentities_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fentities_2eproto = {
  false, false, descriptor_table_protodef_Common_2fentities_2eproto, "Common/entities.proto", 1777,
  &descriptor_table_Common_2fentities_2eproto_once, descriptor_table_Common_2fentities_2eproto_sccs, descriptor_table_Common_2fentities_2eproto_deps, 10, 3,
  schemas, file_default_instances, TableStruct_Common_2fentities_2eproto::offsets,
  file_level_metadata_Common_2fentities_2eproto, 10, file_level_enum_descriptors_Common_2fentities_2eproto, file_level_service_descriptors_Common_2fentities_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fentities_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fentities_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class ActorID::_Internal {
 public:
};

ActorID::ActorID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ActorID)
}
ActorID::ActorID(const ActorID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actor_type_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ActorID)
}

void ActorID::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actor_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&actor_type_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
}

ActorID::~ActorID() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ActorID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActorID::ArenaDtor(void* object) {
  ActorID* _this = reinterpret_cast< ActorID* >(object);
  (void)_this;
}
void ActorID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorID& ActorID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorID_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void ActorID::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ActorID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_type_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(actor_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actor_type(static_cast<::farm::nurture::core::contracts::common::ActorType>(val));
        } else goto handle_unusual;
        continue;
      // int64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ActorID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  if (this->actor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actor_type(), target);
  }

  // int64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_actor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ActorID)
  return target;
}

size_t ActorID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ActorID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_actor_id());
  }

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  if (this->actor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actor_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ActorID)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ActorID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ActorID)
    MergeFrom(*source);
  }
}

void ActorID::MergeFrom(const ActorID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ActorID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.actor_type() != 0) {
    _internal_set_actor_type(from._internal_actor_type());
  }
}

void ActorID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ActorID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorID::CopyFrom(const ActorID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ActorID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorID::IsInitialized() const {
  return true;
}

void ActorID::InternalSwap(ActorID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorID, actor_type_)
      + sizeof(ActorID::actor_type_)
      - PROTOBUF_FIELD_OFFSET(ActorID, actor_id_)>(
          reinterpret_cast<char*>(&actor_id_),
          reinterpret_cast<char*>(&other->actor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Location)
}

void Location::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accuracy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double accuracy = 3;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double accuracy = 3;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.accuracy() <= 0 && from.accuracy() >= 0)) {
    _internal_set_accuracy(from._internal_accuracy());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, accuracy_)
      + sizeof(Location::accuracy_)
      - PROTOBUF_FIELD_OFFSET(Location, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActorEventTrace::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const ActorEventTrace* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ActorEventTrace* msg);
};

const ::farm::nurture::core::contracts::common::ActorID&
ActorEventTrace::_Internal::actor(const ActorEventTrace* msg) {
  return *msg->actor_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ActorEventTrace::_Internal::timestamp(const ActorEventTrace* msg) {
  return *msg->timestamp_;
}
void ActorEventTrace::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ActorEventTrace::ActorEventTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ActorEventTrace)
}
ActorEventTrace::ActorEventTrace(const ActorEventTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ActorEventTrace)
}

void ActorEventTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActorEventTrace_Common_2fentities_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&actor_)) + sizeof(timestamp_));
}

ActorEventTrace::~ActorEventTrace() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ActorEventTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorEventTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actor_;
  if (this != internal_default_instance()) delete timestamp_;
}

void ActorEventTrace::ArenaDtor(void* object) {
  ActorEventTrace* _this = reinterpret_cast< ActorEventTrace* >(object);
  (void)_this;
}
void ActorEventTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorEventTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorEventTrace& ActorEventTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorEventTrace_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void ActorEventTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ActorEventTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorEventTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ActorID actor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorEventTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ActorEventTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actor(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ActorEventTrace)
  return target;
}

size_t ActorEventTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ActorEventTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorEventTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ActorEventTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorEventTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorEventTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ActorEventTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ActorEventTrace)
    MergeFrom(*source);
  }
}

void ActorEventTrace::MergeFrom(const ActorEventTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ActorEventTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void ActorEventTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ActorEventTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorEventTrace::CopyFrom(const ActorEventTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ActorEventTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorEventTrace::IsInitialized() const {
  return true;
}

void ActorEventTrace::InternalSwap(ActorEventTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorEventTrace, timestamp_)
      + sizeof(ActorEventTrace::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ActorEventTrace, actor_)>(
          reinterpret_cast<char*>(&actor_),
          reinterpret_cast<char*>(&other->actor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorEventTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Geography::_Internal {
 public:
};

Geography::Geography(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Geography)
}
Geography::Geography(const Geography& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&geographyid_, &from.geographyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&geographytype_) -
    reinterpret_cast<char*>(&geographyid_)) + sizeof(geographytype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Geography)
}

void Geography::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&geographyid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&geographytype_) -
      reinterpret_cast<char*>(&geographyid_)) + sizeof(geographytype_));
}

Geography::~Geography() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Geography)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Geography::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Geography::ArenaDtor(void* object) {
  Geography* _this = reinterpret_cast< Geography* >(object);
  (void)_this;
}
void Geography::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Geography::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geography& Geography::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geography_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void Geography::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Geography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&geographyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geographytype_) -
      reinterpret_cast<char*>(&geographyid_)) + sizeof(geographytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geography::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.GeographyType geographyType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geographytype(static_cast<::farm::nurture::core::contracts::common::GeographyType>(val));
        } else goto handle_unusual;
        continue;
      // int64 geographyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          geographyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geography::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Geography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.GeographyType geographyType = 1;
  if (this->geographytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_geographytype(), target);
  }

  // int64 geographyId = 2;
  if (this->geographyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_geographyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Geography)
  return target;
}

size_t Geography::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Geography)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 geographyId = 2;
  if (this->geographyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_geographyid());
  }

  // .farm.nurture.core.contracts.common.GeographyType geographyType = 1;
  if (this->geographytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geographytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geography::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Geography)
  GOOGLE_DCHECK_NE(&from, this);
  const Geography* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geography>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Geography)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Geography)
    MergeFrom(*source);
  }
}

void Geography::MergeFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Geography)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geographyid() != 0) {
    _internal_set_geographyid(from._internal_geographyid());
  }
  if (from.geographytype() != 0) {
    _internal_set_geographytype(from._internal_geographytype());
  }
}

void Geography::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geography::CopyFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geography::IsInitialized() const {
  return true;
}

void Geography::InternalSwap(Geography* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geography, geographytype_)
      + sizeof(Geography::geographytype_)
      - PROTOBUF_FIELD_OFFSET(Geography, geographyid_)>(
          reinterpret_cast<char*>(&geographyid_),
          reinterpret_cast<char*>(&other->geographyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geography::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KafkaProductInterestProto::_Internal {
 public:
};

KafkaProductInterestProto::KafkaProductInterestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.KafkaProductInterestProto)
}
KafkaProductInterestProto::KafkaProductInterestProto(const KafkaProductInterestProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  farmermobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_farmermobilenumber().empty()) {
    farmermobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_farmermobilenumber(), 
      GetArena());
  }
  farmername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_farmername().empty()) {
    farmername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_farmername(), 
      GetArena());
  }
  productname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productname().empty()) {
    productname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_productname(), 
      GetArena());
  }
  productbrandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productbrandname().empty()) {
    productbrandname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_productbrandname(), 
      GetArena());
  }
  productcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productcode().empty()) {
    productcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_productcode(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_district().empty()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&farmerid_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(farmerid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.KafkaProductInterestProto)
}

void KafkaProductInterestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KafkaProductInterestProto_Common_2fentities_2eproto.base);
  farmermobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  farmername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productbrandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&farmerid_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(farmerid_));
}

KafkaProductInterestProto::~KafkaProductInterestProto() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KafkaProductInterestProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  farmermobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  farmername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productbrandname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KafkaProductInterestProto::ArenaDtor(void* object) {
  KafkaProductInterestProto* _this = reinterpret_cast< KafkaProductInterestProto* >(object);
  (void)_this;
}
void KafkaProductInterestProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KafkaProductInterestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KafkaProductInterestProto& KafkaProductInterestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KafkaProductInterestProto_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void KafkaProductInterestProto::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  farmermobilenumber_.ClearToEmpty();
  farmername_.ClearToEmpty();
  productname_.ClearToEmpty();
  productbrandname_.ClearToEmpty();
  productcode_.ClearToEmpty();
  district_.ClearToEmpty();
  state_.ClearToEmpty();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&farmerid_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(farmerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KafkaProductInterestProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string farmerMobileNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_farmermobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string farmerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_farmername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_productname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.productName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productBrandName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_productbrandname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_productcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string district = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.district"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.KafkaProductInterestProto.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enquiry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          enquiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 farmerId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          farmerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KafkaProductInterestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string farmerMobileNumber = 1;
  if (this->farmermobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_farmermobilenumber().data(), static_cast<int>(this->_internal_farmermobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_farmermobilenumber(), target);
  }

  // string farmerName = 2;
  if (this->farmername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_farmername().data(), static_cast<int>(this->_internal_farmername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_farmername(), target);
  }

  // string productName = 3;
  if (this->productname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productname().data(), static_cast<int>(this->_internal_productname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.productName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_productname(), target);
  }

  // string productBrandName = 4;
  if (this->productbrandname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productbrandname().data(), static_cast<int>(this->_internal_productbrandname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_productbrandname(), target);
  }

  // string productCode = 5;
  if (this->productcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productcode().data(), static_cast<int>(this->_internal_productcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_productcode(), target);
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_latitude(), target);
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  // string district = 8;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_district().data(), static_cast<int>(this->_internal_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.district");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_district(), target);
  }

  // string state = 9;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.KafkaProductInterestProto.state");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_state(), target);
  }

  // int64 enquiry = 10;
  if (this->enquiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_enquiry(), target);
  }

  // int64 farmerId = 11;
  if (this->farmerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_farmerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  return target;
}

size_t KafkaProductInterestProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string farmerMobileNumber = 1;
  if (this->farmermobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_farmermobilenumber());
  }

  // string farmerName = 2;
  if (this->farmername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_farmername());
  }

  // string productName = 3;
  if (this->productname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productname());
  }

  // string productBrandName = 4;
  if (this->productbrandname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productbrandname());
  }

  // string productCode = 5;
  if (this->productcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productcode());
  }

  // string district = 8;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_district());
  }

  // string state = 9;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // double latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 7;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 enquiry = 10;
  if (this->enquiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_enquiry());
  }

  // int64 farmerId = 11;
  if (this->farmerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_farmerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KafkaProductInterestProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const KafkaProductInterestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KafkaProductInterestProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.KafkaProductInterestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.KafkaProductInterestProto)
    MergeFrom(*source);
  }
}

void KafkaProductInterestProto::MergeFrom(const KafkaProductInterestProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.farmermobilenumber().size() > 0) {
    _internal_set_farmermobilenumber(from._internal_farmermobilenumber());
  }
  if (from.farmername().size() > 0) {
    _internal_set_farmername(from._internal_farmername());
  }
  if (from.productname().size() > 0) {
    _internal_set_productname(from._internal_productname());
  }
  if (from.productbrandname().size() > 0) {
    _internal_set_productbrandname(from._internal_productbrandname());
  }
  if (from.productcode().size() > 0) {
    _internal_set_productcode(from._internal_productcode());
  }
  if (from.district().size() > 0) {
    _internal_set_district(from._internal_district());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.enquiry() != 0) {
    _internal_set_enquiry(from._internal_enquiry());
  }
  if (from.farmerid() != 0) {
    _internal_set_farmerid(from._internal_farmerid());
  }
}

void KafkaProductInterestProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KafkaProductInterestProto::CopyFrom(const KafkaProductInterestProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.KafkaProductInterestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KafkaProductInterestProto::IsInitialized() const {
  return true;
}

void KafkaProductInterestProto::InternalSwap(KafkaProductInterestProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  farmermobilenumber_.Swap(&other->farmermobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  farmername_.Swap(&other->farmername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  productname_.Swap(&other->productname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  productbrandname_.Swap(&other->productbrandname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  productcode_.Swap(&other->productcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KafkaProductInterestProto, farmerid_)
      + sizeof(KafkaProductInterestProto::farmerid_)
      - PROTOBUF_FIELD_OFFSET(KafkaProductInterestProto, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KafkaProductInterestProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoleGeoPair::_Internal {
 public:
};

RoleGeoPair::RoleGeoPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.RoleGeoPair)
}
RoleGeoPair::RoleGeoPair(const RoleGeoPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArena());
  }
  subrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subrole().empty()) {
    subrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subrole(), 
      GetArena());
  }
  geoid_ = from.geoid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.RoleGeoPair)
}

void RoleGeoPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleGeoPair_Common_2fentities_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geoid_ = PROTOBUF_LONGLONG(0);
}

RoleGeoPair::~RoleGeoPair() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.RoleGeoPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleGeoPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleGeoPair::ArenaDtor(void* object) {
  RoleGeoPair* _this = reinterpret_cast< RoleGeoPair* >(object);
  (void)_this;
}
void RoleGeoPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleGeoPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleGeoPair& RoleGeoPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleGeoPair_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void RoleGeoPair::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.RoleGeoPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmpty();
  subrole_.ClearToEmpty();
  geoid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleGeoPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RoleGeoPair.role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 geoId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          geoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_subrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RoleGeoPair.subRole"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleGeoPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.RoleGeoPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RoleGeoPair.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  // int64 geoId = 2;
  if (this->geoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_geoid(), target);
  }

  // string subRole = 3;
  if (this->subrole().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subrole().data(), static_cast<int>(this->_internal_subrole().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RoleGeoPair.subRole");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.RoleGeoPair)
  return target;
}

size_t RoleGeoPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.RoleGeoPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string subRole = 3;
  if (this->subrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subrole());
  }

  // int64 geoId = 2;
  if (this->geoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_geoid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleGeoPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.RoleGeoPair)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleGeoPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleGeoPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.RoleGeoPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.RoleGeoPair)
    MergeFrom(*source);
  }
}

void RoleGeoPair::MergeFrom(const RoleGeoPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.RoleGeoPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.subrole().size() > 0) {
    _internal_set_subrole(from._internal_subrole());
  }
  if (from.geoid() != 0) {
    _internal_set_geoid(from._internal_geoid());
  }
}

void RoleGeoPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.RoleGeoPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGeoPair::CopyFrom(const RoleGeoPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.RoleGeoPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGeoPair::IsInitialized() const {
  return true;
}

void RoleGeoPair::InternalSwap(RoleGeoPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subrole_.Swap(&other->subrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(geoid_, other->geoid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleGeoPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserAttributes::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::LocationHierarchy& locationhierarchy(const UserAttributes* msg);
};

const ::farm::nurture::core::contracts::common::LocationHierarchy&
UserAttributes::_Internal::locationhierarchy(const UserAttributes* msg) {
  return *msg->locationhierarchy_;
}
UserAttributes::UserAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UserAttributes)
}
UserAttributes::UserAttributes(const UserAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crop_(from.crop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_reference_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_reference_type().empty()) {
    product_reference_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_reference_type(), 
      GetArena());
  }
  product_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_reference_id().empty()) {
    product_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_reference_id(), 
      GetArena());
  }
  if (from._internal_has_locationhierarchy()) {
    locationhierarchy_ = new ::farm::nurture::core::contracts::common::LocationHierarchy(*from.locationhierarchy_);
  } else {
    locationhierarchy_ = nullptr;
  }
  ::memcpy(&booking_source_, &from.booking_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&bookingcount_) -
    reinterpret_cast<char*>(&booking_source_)) + sizeof(bookingcount_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UserAttributes)
}

void UserAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAttributes_Common_2fentities_2eproto.base);
  product_reference_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&locationhierarchy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bookingcount_) -
      reinterpret_cast<char*>(&locationhierarchy_)) + sizeof(bookingcount_));
}

UserAttributes::~UserAttributes() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UserAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_reference_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locationhierarchy_;
}

void UserAttributes::ArenaDtor(void* object) {
  UserAttributes* _this = reinterpret_cast< UserAttributes* >(object);
  (void)_this;
}
void UserAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAttributes& UserAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAttributes_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void UserAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UserAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crop_.Clear();
  product_reference_type_.ClearToEmpty();
  product_reference_id_.ClearToEmpty();
  if (GetArena() == nullptr && locationhierarchy_ != nullptr) {
    delete locationhierarchy_;
  }
  locationhierarchy_ = nullptr;
  ::memset(&booking_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bookingcount_) -
      reinterpret_cast<char*>(&booking_source_)) + sizeof(bookingcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.LocationHierarchy locationHierarchy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationhierarchy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_reference_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_reference_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserAttributes.product_reference_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_product_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserAttributes.product_reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.BookingSource booking_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_booking_source(static_cast<::farm::nurture::core::contracts::common::BookingSource>(val));
        } else goto handle_unusual;
        continue;
      // repeated string crop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crop();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.UserAttributes.crop"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isDSRSignedUp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isdsrsignedup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bookingCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bookingcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isKavach = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iskavach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UserAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.LocationHierarchy locationHierarchy = 1;
  if (this->has_locationhierarchy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::locationhierarchy(this), target, stream);
  }

  // string product_reference_type = 2;
  if (this->product_reference_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_reference_type().data(), static_cast<int>(this->_internal_product_reference_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserAttributes.product_reference_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_reference_type(), target);
  }

  // string product_reference_id = 3;
  if (this->product_reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_reference_id().data(), static_cast<int>(this->_internal_product_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserAttributes.product_reference_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_product_reference_id(), target);
  }

  // .farm.nurture.core.contracts.common.BookingSource booking_source = 4;
  if (this->booking_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_booking_source(), target);
  }

  // repeated string crop = 5;
  for (int i = 0, n = this->_internal_crop_size(); i < n; i++) {
    const auto& s = this->_internal_crop(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.UserAttributes.crop");
    target = stream->WriteString(5, s, target);
  }

  // bool isDSRSignedUp = 6;
  if (this->isdsrsignedup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isdsrsignedup(), target);
  }

  // int64 bookingCount = 7;
  if (this->bookingcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_bookingcount(), target);
  }

  // bool isKavach = 8;
  if (this->iskavach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_iskavach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UserAttributes)
  return target;
}

size_t UserAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UserAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string crop = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(crop_.size());
  for (int i = 0, n = crop_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      crop_.Get(i));
  }

  // string product_reference_type = 2;
  if (this->product_reference_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_reference_type());
  }

  // string product_reference_id = 3;
  if (this->product_reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_reference_id());
  }

  // .farm.nurture.core.contracts.common.LocationHierarchy locationHierarchy = 1;
  if (this->has_locationhierarchy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationhierarchy_);
  }

  // .farm.nurture.core.contracts.common.BookingSource booking_source = 4;
  if (this->booking_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_booking_source());
  }

  // bool isDSRSignedUp = 6;
  if (this->isdsrsignedup() != 0) {
    total_size += 1 + 1;
  }

  // bool isKavach = 8;
  if (this->iskavach() != 0) {
    total_size += 1 + 1;
  }

  // int64 bookingCount = 7;
  if (this->bookingcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bookingcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UserAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UserAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UserAttributes)
    MergeFrom(*source);
  }
}

void UserAttributes::MergeFrom(const UserAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UserAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crop_.MergeFrom(from.crop_);
  if (from.product_reference_type().size() > 0) {
    _internal_set_product_reference_type(from._internal_product_reference_type());
  }
  if (from.product_reference_id().size() > 0) {
    _internal_set_product_reference_id(from._internal_product_reference_id());
  }
  if (from.has_locationhierarchy()) {
    _internal_mutable_locationhierarchy()->::farm::nurture::core::contracts::common::LocationHierarchy::MergeFrom(from._internal_locationhierarchy());
  }
  if (from.booking_source() != 0) {
    _internal_set_booking_source(from._internal_booking_source());
  }
  if (from.isdsrsignedup() != 0) {
    _internal_set_isdsrsignedup(from._internal_isdsrsignedup());
  }
  if (from.iskavach() != 0) {
    _internal_set_iskavach(from._internal_iskavach());
  }
  if (from.bookingcount() != 0) {
    _internal_set_bookingcount(from._internal_bookingcount());
  }
}

void UserAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UserAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAttributes::CopyFrom(const UserAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UserAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAttributes::IsInitialized() const {
  return true;
}

void UserAttributes::InternalSwap(UserAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crop_.InternalSwap(&other->crop_);
  product_reference_type_.Swap(&other->product_reference_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_reference_id_.Swap(&other->product_reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAttributes, bookingcount_)
      + sizeof(UserAttributes::bookingcount_)
      - PROTOBUF_FIELD_OFFSET(UserAttributes, locationhierarchy_)>(
          reinterpret_cast<char*>(&locationhierarchy_),
          reinterpret_cast<char*>(&other->locationhierarchy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationHierarchy::_Internal {
 public:
};

LocationHierarchy::LocationHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.LocationHierarchy)
}
LocationHierarchy::LocationHierarchy(const LocationHierarchy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loc_(from.loc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.LocationHierarchy)
}

void LocationHierarchy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationHierarchy_Common_2fentities_2eproto.base);
}

LocationHierarchy::~LocationHierarchy() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.LocationHierarchy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationHierarchy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocationHierarchy::ArenaDtor(void* object) {
  LocationHierarchy* _this = reinterpret_cast< LocationHierarchy* >(object);
  (void)_this;
}
void LocationHierarchy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationHierarchy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationHierarchy& LocationHierarchy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationHierarchy_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void LocationHierarchy::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.LocationHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationHierarchy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string loc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.LocationHierarchy.loc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationHierarchy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.LocationHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string loc = 1;
  for (int i = 0, n = this->_internal_loc_size(); i < n; i++) {
    const auto& s = this->_internal_loc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.LocationHierarchy.loc");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.LocationHierarchy)
  return target;
}

size_t LocationHierarchy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.LocationHierarchy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loc_.size());
  for (int i = 0, n = loc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationHierarchy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.LocationHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationHierarchy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationHierarchy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.LocationHierarchy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.LocationHierarchy)
    MergeFrom(*source);
  }
}

void LocationHierarchy::MergeFrom(const LocationHierarchy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.LocationHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_.MergeFrom(from.loc_);
}

void LocationHierarchy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.LocationHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationHierarchy::CopyFrom(const LocationHierarchy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.LocationHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationHierarchy::IsInitialized() const {
  return true;
}

void LocationHierarchy::InternalSwap(LocationHierarchy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loc_.InternalSwap(&other->loc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationHierarchy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProductDetails::_Internal {
 public:
};

ProductDetails::ProductDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ProductDetails)
}
ProductDetails::ProductDetails(const ProductDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  materialcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_materialcode().empty()) {
    materialcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_materialcode(), 
      GetArena());
  }
  ::memcpy(&tolerancepercentage_, &from.tolerancepercentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&tolerancepercentage_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ProductDetails)
}

void ProductDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductDetails_Common_2fentities_2eproto.base);
  materialcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tolerancepercentage_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&tolerancepercentage_)) + sizeof(unit_));
}

ProductDetails::~ProductDetails() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ProductDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  materialcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductDetails::ArenaDtor(void* object) {
  ProductDetails* _this = reinterpret_cast< ProductDetails* >(object);
  (void)_this;
}
void ProductDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductDetails& ProductDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductDetails_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void ProductDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ProductDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialcode_.ClearToEmpty();
  ::memset(&tolerancepercentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&tolerancepercentage_)) + sizeof(unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string materialCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_materialcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.ProductDetails.materialCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.UnitType unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::farm::nurture::core::contracts::common::UnitType>(val));
        } else goto handle_unusual;
        continue;
      // double tolerancePercentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          tolerancepercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dosagePerAcre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dosageperacre_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double unitPackSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          unitpacksize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ProductDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string materialCode = 1;
  if (this->materialcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_materialcode().data(), static_cast<int>(this->_internal_materialcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.ProductDetails.materialCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_materialcode(), target);
  }

  // .farm.nurture.core.contracts.common.UnitType unit = 2;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit(), target);
  }

  // double tolerancePercentage = 3;
  if (!(this->tolerancepercentage() <= 0 && this->tolerancepercentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tolerancepercentage(), target);
  }

  // double dosagePerAcre = 4;
  if (!(this->dosageperacre() <= 0 && this->dosageperacre() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dosageperacre(), target);
  }

  // double unitPackSize = 5;
  if (!(this->unitpacksize() <= 0 && this->unitpacksize() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_unitpacksize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ProductDetails)
  return target;
}

size_t ProductDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ProductDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string materialCode = 1;
  if (this->materialcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialcode());
  }

  // double tolerancePercentage = 3;
  if (!(this->tolerancepercentage() <= 0 && this->tolerancepercentage() >= 0)) {
    total_size += 1 + 8;
  }

  // double dosagePerAcre = 4;
  if (!(this->dosageperacre() <= 0 && this->dosageperacre() >= 0)) {
    total_size += 1 + 8;
  }

  // double unitPackSize = 5;
  if (!(this->unitpacksize() <= 0 && this->unitpacksize() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.core.contracts.common.UnitType unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ProductDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ProductDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ProductDetails)
    MergeFrom(*source);
  }
}

void ProductDetails::MergeFrom(const ProductDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ProductDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.materialcode().size() > 0) {
    _internal_set_materialcode(from._internal_materialcode());
  }
  if (!(from.tolerancepercentage() <= 0 && from.tolerancepercentage() >= 0)) {
    _internal_set_tolerancepercentage(from._internal_tolerancepercentage());
  }
  if (!(from.dosageperacre() <= 0 && from.dosageperacre() >= 0)) {
    _internal_set_dosageperacre(from._internal_dosageperacre());
  }
  if (!(from.unitpacksize() <= 0 && from.unitpacksize() >= 0)) {
    _internal_set_unitpacksize(from._internal_unitpacksize());
  }
  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
}

void ProductDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ProductDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductDetails::CopyFrom(const ProductDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ProductDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDetails::IsInitialized() const {
  return true;
}

void ProductDetails::InternalSwap(ProductDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  materialcode_.Swap(&other->materialcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductDetails, unit_)
      + sizeof(ProductDetails::unit_)
      - PROTOBUF_FIELD_OFFSET(ProductDetails, tolerancepercentage_)>(
          reinterpret_cast<char*>(&tolerancepercentage_),
          reinterpret_cast<char*>(&other->tolerancepercentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IOTStats::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::TimeSlot& timeslot(const IOTStats* msg);
};

const ::farm::nurture::core::contracts::common::TimeSlot&
IOTStats::_Internal::timeslot(const IOTStats* msg) {
  return *msg->timeslot_;
}
void IOTStats::clear_timeslot() {
  if (GetArena() == nullptr && timeslot_ != nullptr) {
    delete timeslot_;
  }
  timeslot_ = nullptr;
}
IOTStats::IOTStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.IOTStats)
}
IOTStats::IOTStats(const IOTStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  machinenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machinenumber().empty()) {
    machinenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machinenumber(), 
      GetArena());
  }
  if (from._internal_has_timeslot()) {
    timeslot_ = new ::farm::nurture::core::contracts::common::TimeSlot(*from.timeslot_);
  } else {
    timeslot_ = nullptr;
  }
  ::memcpy(&iotacre_, &from.iotacre_,
    static_cast<size_t>(reinterpret_cast<char*>(&ismisbehaved_) -
    reinterpret_cast<char*>(&iotacre_)) + sizeof(ismisbehaved_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.IOTStats)
}

void IOTStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOTStats_Common_2fentities_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machinenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timeslot_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ismisbehaved_) -
      reinterpret_cast<char*>(&timeslot_)) + sizeof(ismisbehaved_));
}

IOTStats::~IOTStats() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.IOTStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IOTStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machinenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeslot_;
}

void IOTStats::ArenaDtor(void* object) {
  IOTStats* _this = reinterpret_cast< IOTStats* >(object);
  (void)_this;
}
void IOTStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOTStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOTStats& IOTStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOTStats_Common_2fentities_2eproto.base);
  return *internal_default_instance();
}


void IOTStats::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.IOTStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  machinenumber_.ClearToEmpty();
  if (GetArena() == nullptr && timeslot_ != nullptr) {
    delete timeslot_;
  }
  timeslot_ = nullptr;
  ::memset(&iotacre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismisbehaved_) -
      reinterpret_cast<char*>(&iotacre_)) + sizeof(ismisbehaved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOTStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isMalfunctioned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ismalfunctioned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double iotAcre = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          iotacre_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double allowAcreChangePercentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          allowacrechangepercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 totalPingsCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalpingscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TimeSlot timeslot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeslot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 engineOnCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          engineoncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 speedCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pingDensityPerMinute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pingdensityperminute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isMisbehaved = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ismisbehaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.IOTStats.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machineNumber = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_machinenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.IOTStats.machineNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOTStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.IOTStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isMalfunctioned = 1;
  if (this->ismalfunctioned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ismalfunctioned(), target);
  }

  // double iotAcre = 2;
  if (!(this->iotacre() <= 0 && this->iotacre() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_iotacre(), target);
  }

  // double allowAcreChangePercentage = 3;
  if (!(this->allowacrechangepercentage() <= 0 && this->allowacrechangepercentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_allowacrechangepercentage(), target);
  }

  // int64 totalPingsCount = 4;
  if (this->totalpingscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_totalpingscount(), target);
  }

  // .farm.nurture.core.contracts.common.TimeSlot timeslot = 5;
  if (this->has_timeslot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timeslot(this), target, stream);
  }

  // int64 engineOnCount = 6;
  if (this->engineoncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_engineoncount(), target);
  }

  // int64 speedCount = 7;
  if (this->speedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_speedcount(), target);
  }

  // double pingDensityPerMinute = 8;
  if (!(this->pingdensityperminute() <= 0 && this->pingdensityperminute() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pingdensityperminute(), target);
  }

  // bool isMisbehaved = 9;
  if (this->ismisbehaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ismisbehaved(), target);
  }

  // string deviceId = 10;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.IOTStats.deviceId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_deviceid(), target);
  }

  // string machineNumber = 11;
  if (this->machinenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machinenumber().data(), static_cast<int>(this->_internal_machinenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.IOTStats.machineNumber");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_machinenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.IOTStats)
  return target;
}

size_t IOTStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.IOTStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 10;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string machineNumber = 11;
  if (this->machinenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machinenumber());
  }

  // .farm.nurture.core.contracts.common.TimeSlot timeslot = 5;
  if (this->has_timeslot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeslot_);
  }

  // double iotAcre = 2;
  if (!(this->iotacre() <= 0 && this->iotacre() >= 0)) {
    total_size += 1 + 8;
  }

  // double allowAcreChangePercentage = 3;
  if (!(this->allowacrechangepercentage() <= 0 && this->allowacrechangepercentage() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 totalPingsCount = 4;
  if (this->totalpingscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalpingscount());
  }

  // int64 engineOnCount = 6;
  if (this->engineoncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_engineoncount());
  }

  // int64 speedCount = 7;
  if (this->speedcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_speedcount());
  }

  // double pingDensityPerMinute = 8;
  if (!(this->pingdensityperminute() <= 0 && this->pingdensityperminute() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isMalfunctioned = 1;
  if (this->ismalfunctioned() != 0) {
    total_size += 1 + 1;
  }

  // bool isMisbehaved = 9;
  if (this->ismisbehaved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOTStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.IOTStats)
  GOOGLE_DCHECK_NE(&from, this);
  const IOTStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOTStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.IOTStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.IOTStats)
    MergeFrom(*source);
  }
}

void IOTStats::MergeFrom(const IOTStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.IOTStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.machinenumber().size() > 0) {
    _internal_set_machinenumber(from._internal_machinenumber());
  }
  if (from.has_timeslot()) {
    _internal_mutable_timeslot()->::farm::nurture::core::contracts::common::TimeSlot::MergeFrom(from._internal_timeslot());
  }
  if (!(from.iotacre() <= 0 && from.iotacre() >= 0)) {
    _internal_set_iotacre(from._internal_iotacre());
  }
  if (!(from.allowacrechangepercentage() <= 0 && from.allowacrechangepercentage() >= 0)) {
    _internal_set_allowacrechangepercentage(from._internal_allowacrechangepercentage());
  }
  if (from.totalpingscount() != 0) {
    _internal_set_totalpingscount(from._internal_totalpingscount());
  }
  if (from.engineoncount() != 0) {
    _internal_set_engineoncount(from._internal_engineoncount());
  }
  if (from.speedcount() != 0) {
    _internal_set_speedcount(from._internal_speedcount());
  }
  if (!(from.pingdensityperminute() <= 0 && from.pingdensityperminute() >= 0)) {
    _internal_set_pingdensityperminute(from._internal_pingdensityperminute());
  }
  if (from.ismalfunctioned() != 0) {
    _internal_set_ismalfunctioned(from._internal_ismalfunctioned());
  }
  if (from.ismisbehaved() != 0) {
    _internal_set_ismisbehaved(from._internal_ismisbehaved());
  }
}

void IOTStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.IOTStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOTStats::CopyFrom(const IOTStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.IOTStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOTStats::IsInitialized() const {
  return true;
}

void IOTStats::InternalSwap(IOTStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machinenumber_.Swap(&other->machinenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOTStats, ismisbehaved_)
      + sizeof(IOTStats::ismisbehaved_)
      - PROTOBUF_FIELD_OFFSET(IOTStats, timeslot_)>(
          reinterpret_cast<char*>(&timeslot_),
          reinterpret_cast<char*>(&other->timeslot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOTStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ActorID* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ActorID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ActorID >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Location* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ActorEventTrace* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ActorEventTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ActorEventTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Geography* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Geography >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Geography >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::KafkaProductInterestProto* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::KafkaProductInterestProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::KafkaProductInterestProto >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::RoleGeoPair* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::RoleGeoPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::RoleGeoPair >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UserAttributes* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UserAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UserAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::LocationHierarchy* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::LocationHierarchy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::LocationHierarchy >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ProductDetails* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ProductDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ProductDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::IOTStats* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::IOTStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::IOTStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
