// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/entities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fentities_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fentities_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "Common/time_slot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fentities_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fentities_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class ActorEventTrace;
class ActorEventTraceDefaultTypeInternal;
extern ActorEventTraceDefaultTypeInternal _ActorEventTrace_default_instance_;
class ActorID;
class ActorIDDefaultTypeInternal;
extern ActorIDDefaultTypeInternal _ActorID_default_instance_;
class Geography;
class GeographyDefaultTypeInternal;
extern GeographyDefaultTypeInternal _Geography_default_instance_;
class IOTStats;
class IOTStatsDefaultTypeInternal;
extern IOTStatsDefaultTypeInternal _IOTStats_default_instance_;
class KafkaProductInterestProto;
class KafkaProductInterestProtoDefaultTypeInternal;
extern KafkaProductInterestProtoDefaultTypeInternal _KafkaProductInterestProto_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class LocationHierarchy;
class LocationHierarchyDefaultTypeInternal;
extern LocationHierarchyDefaultTypeInternal _LocationHierarchy_default_instance_;
class ProductDetails;
class ProductDetailsDefaultTypeInternal;
extern ProductDetailsDefaultTypeInternal _ProductDetails_default_instance_;
class RoleGeoPair;
class RoleGeoPairDefaultTypeInternal;
extern RoleGeoPairDefaultTypeInternal _RoleGeoPair_default_instance_;
class UserAttributes;
class UserAttributesDefaultTypeInternal;
extern UserAttributesDefaultTypeInternal _UserAttributes_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::ActorEventTrace* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorEventTrace>(Arena*);
template<> ::farm::nurture::core::contracts::common::ActorID* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(Arena*);
template<> ::farm::nurture::core::contracts::common::Geography* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Geography>(Arena*);
template<> ::farm::nurture::core::contracts::common::IOTStats* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::IOTStats>(Arena*);
template<> ::farm::nurture::core::contracts::common::KafkaProductInterestProto* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::KafkaProductInterestProto>(Arena*);
template<> ::farm::nurture::core::contracts::common::Location* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Location>(Arena*);
template<> ::farm::nurture::core::contracts::common::LocationHierarchy* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::LocationHierarchy>(Arena*);
template<> ::farm::nurture::core::contracts::common::ProductDetails* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ProductDetails>(Arena*);
template<> ::farm::nurture::core::contracts::common::RoleGeoPair* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RoleGeoPair>(Arena*);
template<> ::farm::nurture::core::contracts::common::UserAttributes* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UserAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class ActorID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ActorID) */ {
 public:
  inline ActorID() : ActorID(nullptr) {}
  virtual ~ActorID();

  ActorID(const ActorID& from);
  ActorID(ActorID&& from) noexcept
    : ActorID() {
    *this = ::std::move(from);
  }

  inline ActorID& operator=(const ActorID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorID& operator=(ActorID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorID& default_instance();

  static inline const ActorID* internal_default_instance() {
    return reinterpret_cast<const ActorID*>(
               &_ActorID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActorID& a, ActorID& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorID* New() const final {
    return CreateMaybeMessage<ActorID>(nullptr);
  }

  ActorID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorID& from);
  void MergeFrom(const ActorID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ActorID";
  }
  protected:
  explicit ActorID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 2,
    kActorTypeFieldNumber = 1,
  };
  // int64 actor_id = 2;
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.ActorType actor_type = 1;
  void clear_actor_type();
  ::farm::nurture::core::contracts::common::ActorType actor_type() const;
  void set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  private:
  ::farm::nurture::core::contracts::common::ActorType _internal_actor_type() const;
  void _internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ActorID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 actor_id_;
  int actor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAccuracyFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double accuracy = 3;
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  double accuracy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class ActorEventTrace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ActorEventTrace) */ {
 public:
  inline ActorEventTrace() : ActorEventTrace(nullptr) {}
  virtual ~ActorEventTrace();

  ActorEventTrace(const ActorEventTrace& from);
  ActorEventTrace(ActorEventTrace&& from) noexcept
    : ActorEventTrace() {
    *this = ::std::move(from);
  }

  inline ActorEventTrace& operator=(const ActorEventTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorEventTrace& operator=(ActorEventTrace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorEventTrace& default_instance();

  static inline const ActorEventTrace* internal_default_instance() {
    return reinterpret_cast<const ActorEventTrace*>(
               &_ActorEventTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActorEventTrace& a, ActorEventTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorEventTrace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorEventTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorEventTrace* New() const final {
    return CreateMaybeMessage<ActorEventTrace>(nullptr);
  }

  ActorEventTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorEventTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorEventTrace& from);
  void MergeFrom(const ActorEventTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorEventTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ActorEventTrace";
  }
  protected:
  explicit ActorEventTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ActorID actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ActorEventTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class Geography PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Geography) */ {
 public:
  inline Geography() : Geography(nullptr) {}
  virtual ~Geography();

  Geography(const Geography& from);
  Geography(Geography&& from) noexcept
    : Geography() {
    *this = ::std::move(from);
  }

  inline Geography& operator=(const Geography& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geography& operator=(Geography&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geography& default_instance();

  static inline const Geography* internal_default_instance() {
    return reinterpret_cast<const Geography*>(
               &_Geography_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Geography& a, Geography& b) {
    a.Swap(&b);
  }
  inline void Swap(Geography* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geography* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geography* New() const final {
    return CreateMaybeMessage<Geography>(nullptr);
  }

  Geography* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geography>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geography& from);
  void MergeFrom(const Geography& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geography* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Geography";
  }
  protected:
  explicit Geography(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeographyIdFieldNumber = 2,
    kGeographyTypeFieldNumber = 1,
  };
  // int64 geographyId = 2;
  void clear_geographyid();
  ::PROTOBUF_NAMESPACE_ID::int64 geographyid() const;
  void set_geographyid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_geographyid() const;
  void _internal_set_geographyid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.GeographyType geographyType = 1;
  void clear_geographytype();
  ::farm::nurture::core::contracts::common::GeographyType geographytype() const;
  void set_geographytype(::farm::nurture::core::contracts::common::GeographyType value);
  private:
  ::farm::nurture::core::contracts::common::GeographyType _internal_geographytype() const;
  void _internal_set_geographytype(::farm::nurture::core::contracts::common::GeographyType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Geography)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 geographyid_;
  int geographytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class KafkaProductInterestProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.KafkaProductInterestProto) */ {
 public:
  inline KafkaProductInterestProto() : KafkaProductInterestProto(nullptr) {}
  virtual ~KafkaProductInterestProto();

  KafkaProductInterestProto(const KafkaProductInterestProto& from);
  KafkaProductInterestProto(KafkaProductInterestProto&& from) noexcept
    : KafkaProductInterestProto() {
    *this = ::std::move(from);
  }

  inline KafkaProductInterestProto& operator=(const KafkaProductInterestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KafkaProductInterestProto& operator=(KafkaProductInterestProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KafkaProductInterestProto& default_instance();

  static inline const KafkaProductInterestProto* internal_default_instance() {
    return reinterpret_cast<const KafkaProductInterestProto*>(
               &_KafkaProductInterestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KafkaProductInterestProto& a, KafkaProductInterestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KafkaProductInterestProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KafkaProductInterestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KafkaProductInterestProto* New() const final {
    return CreateMaybeMessage<KafkaProductInterestProto>(nullptr);
  }

  KafkaProductInterestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KafkaProductInterestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KafkaProductInterestProto& from);
  void MergeFrom(const KafkaProductInterestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KafkaProductInterestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.KafkaProductInterestProto";
  }
  protected:
  explicit KafkaProductInterestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFarmerMobileNumberFieldNumber = 1,
    kFarmerNameFieldNumber = 2,
    kProductNameFieldNumber = 3,
    kProductBrandNameFieldNumber = 4,
    kProductCodeFieldNumber = 5,
    kDistrictFieldNumber = 8,
    kStateFieldNumber = 9,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
    kEnquiryFieldNumber = 10,
    kFarmerIdFieldNumber = 11,
  };
  // string farmerMobileNumber = 1;
  void clear_farmermobilenumber();
  const std::string& farmermobilenumber() const;
  void set_farmermobilenumber(const std::string& value);
  void set_farmermobilenumber(std::string&& value);
  void set_farmermobilenumber(const char* value);
  void set_farmermobilenumber(const char* value, size_t size);
  std::string* mutable_farmermobilenumber();
  std::string* release_farmermobilenumber();
  void set_allocated_farmermobilenumber(std::string* farmermobilenumber);
  private:
  const std::string& _internal_farmermobilenumber() const;
  void _internal_set_farmermobilenumber(const std::string& value);
  std::string* _internal_mutable_farmermobilenumber();
  public:

  // string farmerName = 2;
  void clear_farmername();
  const std::string& farmername() const;
  void set_farmername(const std::string& value);
  void set_farmername(std::string&& value);
  void set_farmername(const char* value);
  void set_farmername(const char* value, size_t size);
  std::string* mutable_farmername();
  std::string* release_farmername();
  void set_allocated_farmername(std::string* farmername);
  private:
  const std::string& _internal_farmername() const;
  void _internal_set_farmername(const std::string& value);
  std::string* _internal_mutable_farmername();
  public:

  // string productName = 3;
  void clear_productname();
  const std::string& productname() const;
  void set_productname(const std::string& value);
  void set_productname(std::string&& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  std::string* mutable_productname();
  std::string* release_productname();
  void set_allocated_productname(std::string* productname);
  private:
  const std::string& _internal_productname() const;
  void _internal_set_productname(const std::string& value);
  std::string* _internal_mutable_productname();
  public:

  // string productBrandName = 4;
  void clear_productbrandname();
  const std::string& productbrandname() const;
  void set_productbrandname(const std::string& value);
  void set_productbrandname(std::string&& value);
  void set_productbrandname(const char* value);
  void set_productbrandname(const char* value, size_t size);
  std::string* mutable_productbrandname();
  std::string* release_productbrandname();
  void set_allocated_productbrandname(std::string* productbrandname);
  private:
  const std::string& _internal_productbrandname() const;
  void _internal_set_productbrandname(const std::string& value);
  std::string* _internal_mutable_productbrandname();
  public:

  // string productCode = 5;
  void clear_productcode();
  const std::string& productcode() const;
  void set_productcode(const std::string& value);
  void set_productcode(std::string&& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  std::string* mutable_productcode();
  std::string* release_productcode();
  void set_allocated_productcode(std::string* productcode);
  private:
  const std::string& _internal_productcode() const;
  void _internal_set_productcode(const std::string& value);
  std::string* _internal_mutable_productcode();
  public:

  // string district = 8;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 9;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int64 enquiry = 10;
  void clear_enquiry();
  ::PROTOBUF_NAMESPACE_ID::int64 enquiry() const;
  void set_enquiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_enquiry() const;
  void _internal_set_enquiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 farmerId = 11;
  void clear_farmerid();
  ::PROTOBUF_NAMESPACE_ID::int64 farmerid() const;
  void set_farmerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_farmerid() const;
  void _internal_set_farmerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.KafkaProductInterestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr farmermobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr farmername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productbrandname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 enquiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 farmerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class RoleGeoPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RoleGeoPair) */ {
 public:
  inline RoleGeoPair() : RoleGeoPair(nullptr) {}
  virtual ~RoleGeoPair();

  RoleGeoPair(const RoleGeoPair& from);
  RoleGeoPair(RoleGeoPair&& from) noexcept
    : RoleGeoPair() {
    *this = ::std::move(from);
  }

  inline RoleGeoPair& operator=(const RoleGeoPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleGeoPair& operator=(RoleGeoPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleGeoPair& default_instance();

  static inline const RoleGeoPair* internal_default_instance() {
    return reinterpret_cast<const RoleGeoPair*>(
               &_RoleGeoPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoleGeoPair& a, RoleGeoPair& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleGeoPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleGeoPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleGeoPair* New() const final {
    return CreateMaybeMessage<RoleGeoPair>(nullptr);
  }

  RoleGeoPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleGeoPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleGeoPair& from);
  void MergeFrom(const RoleGeoPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleGeoPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RoleGeoPair";
  }
  protected:
  explicit RoleGeoPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kSubRoleFieldNumber = 3,
    kGeoIdFieldNumber = 2,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string subRole = 3;
  void clear_subrole();
  const std::string& subrole() const;
  void set_subrole(const std::string& value);
  void set_subrole(std::string&& value);
  void set_subrole(const char* value);
  void set_subrole(const char* value, size_t size);
  std::string* mutable_subrole();
  std::string* release_subrole();
  void set_allocated_subrole(std::string* subrole);
  private:
  const std::string& _internal_subrole() const;
  void _internal_set_subrole(const std::string& value);
  std::string* _internal_mutable_subrole();
  public:

  // int64 geoId = 2;
  void clear_geoid();
  ::PROTOBUF_NAMESPACE_ID::int64 geoid() const;
  void set_geoid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_geoid() const;
  void _internal_set_geoid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RoleGeoPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subrole_;
  ::PROTOBUF_NAMESPACE_ID::int64 geoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class UserAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UserAttributes) */ {
 public:
  inline UserAttributes() : UserAttributes(nullptr) {}
  virtual ~UserAttributes();

  UserAttributes(const UserAttributes& from);
  UserAttributes(UserAttributes&& from) noexcept
    : UserAttributes() {
    *this = ::std::move(from);
  }

  inline UserAttributes& operator=(const UserAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAttributes& operator=(UserAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAttributes& default_instance();

  static inline const UserAttributes* internal_default_instance() {
    return reinterpret_cast<const UserAttributes*>(
               &_UserAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserAttributes& a, UserAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAttributes* New() const final {
    return CreateMaybeMessage<UserAttributes>(nullptr);
  }

  UserAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAttributes& from);
  void MergeFrom(const UserAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UserAttributes";
  }
  protected:
  explicit UserAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCropFieldNumber = 5,
    kProductReferenceTypeFieldNumber = 2,
    kProductReferenceIdFieldNumber = 3,
    kLocationHierarchyFieldNumber = 1,
    kBookingSourceFieldNumber = 4,
    kIsDSRSignedUpFieldNumber = 6,
    kIsKavachFieldNumber = 8,
    kBookingCountFieldNumber = 7,
  };
  // repeated string crop = 5;
  int crop_size() const;
  private:
  int _internal_crop_size() const;
  public:
  void clear_crop();
  const std::string& crop(int index) const;
  std::string* mutable_crop(int index);
  void set_crop(int index, const std::string& value);
  void set_crop(int index, std::string&& value);
  void set_crop(int index, const char* value);
  void set_crop(int index, const char* value, size_t size);
  std::string* add_crop();
  void add_crop(const std::string& value);
  void add_crop(std::string&& value);
  void add_crop(const char* value);
  void add_crop(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& crop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_crop();
  private:
  const std::string& _internal_crop(int index) const;
  std::string* _internal_add_crop();
  public:

  // string product_reference_type = 2;
  void clear_product_reference_type();
  const std::string& product_reference_type() const;
  void set_product_reference_type(const std::string& value);
  void set_product_reference_type(std::string&& value);
  void set_product_reference_type(const char* value);
  void set_product_reference_type(const char* value, size_t size);
  std::string* mutable_product_reference_type();
  std::string* release_product_reference_type();
  void set_allocated_product_reference_type(std::string* product_reference_type);
  private:
  const std::string& _internal_product_reference_type() const;
  void _internal_set_product_reference_type(const std::string& value);
  std::string* _internal_mutable_product_reference_type();
  public:

  // string product_reference_id = 3;
  void clear_product_reference_id();
  const std::string& product_reference_id() const;
  void set_product_reference_id(const std::string& value);
  void set_product_reference_id(std::string&& value);
  void set_product_reference_id(const char* value);
  void set_product_reference_id(const char* value, size_t size);
  std::string* mutable_product_reference_id();
  std::string* release_product_reference_id();
  void set_allocated_product_reference_id(std::string* product_reference_id);
  private:
  const std::string& _internal_product_reference_id() const;
  void _internal_set_product_reference_id(const std::string& value);
  std::string* _internal_mutable_product_reference_id();
  public:

  // .farm.nurture.core.contracts.common.LocationHierarchy locationHierarchy = 1;
  bool has_locationhierarchy() const;
  private:
  bool _internal_has_locationhierarchy() const;
  public:
  void clear_locationhierarchy();
  const ::farm::nurture::core::contracts::common::LocationHierarchy& locationhierarchy() const;
  ::farm::nurture::core::contracts::common::LocationHierarchy* release_locationhierarchy();
  ::farm::nurture::core::contracts::common::LocationHierarchy* mutable_locationhierarchy();
  void set_allocated_locationhierarchy(::farm::nurture::core::contracts::common::LocationHierarchy* locationhierarchy);
  private:
  const ::farm::nurture::core::contracts::common::LocationHierarchy& _internal_locationhierarchy() const;
  ::farm::nurture::core::contracts::common::LocationHierarchy* _internal_mutable_locationhierarchy();
  public:
  void unsafe_arena_set_allocated_locationhierarchy(
      ::farm::nurture::core::contracts::common::LocationHierarchy* locationhierarchy);
  ::farm::nurture::core::contracts::common::LocationHierarchy* unsafe_arena_release_locationhierarchy();

  // .farm.nurture.core.contracts.common.BookingSource booking_source = 4;
  void clear_booking_source();
  ::farm::nurture::core::contracts::common::BookingSource booking_source() const;
  void set_booking_source(::farm::nurture::core::contracts::common::BookingSource value);
  private:
  ::farm::nurture::core::contracts::common::BookingSource _internal_booking_source() const;
  void _internal_set_booking_source(::farm::nurture::core::contracts::common::BookingSource value);
  public:

  // bool isDSRSignedUp = 6;
  void clear_isdsrsignedup();
  bool isdsrsignedup() const;
  void set_isdsrsignedup(bool value);
  private:
  bool _internal_isdsrsignedup() const;
  void _internal_set_isdsrsignedup(bool value);
  public:

  // bool isKavach = 8;
  void clear_iskavach();
  bool iskavach() const;
  void set_iskavach(bool value);
  private:
  bool _internal_iskavach() const;
  void _internal_set_iskavach(bool value);
  public:

  // int64 bookingCount = 7;
  void clear_bookingcount();
  ::PROTOBUF_NAMESPACE_ID::int64 bookingcount() const;
  void set_bookingcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bookingcount() const;
  void _internal_set_bookingcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UserAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> crop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_reference_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_reference_id_;
  ::farm::nurture::core::contracts::common::LocationHierarchy* locationhierarchy_;
  int booking_source_;
  bool isdsrsignedup_;
  bool iskavach_;
  ::PROTOBUF_NAMESPACE_ID::int64 bookingcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class LocationHierarchy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.LocationHierarchy) */ {
 public:
  inline LocationHierarchy() : LocationHierarchy(nullptr) {}
  virtual ~LocationHierarchy();

  LocationHierarchy(const LocationHierarchy& from);
  LocationHierarchy(LocationHierarchy&& from) noexcept
    : LocationHierarchy() {
    *this = ::std::move(from);
  }

  inline LocationHierarchy& operator=(const LocationHierarchy& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationHierarchy& operator=(LocationHierarchy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationHierarchy& default_instance();

  static inline const LocationHierarchy* internal_default_instance() {
    return reinterpret_cast<const LocationHierarchy*>(
               &_LocationHierarchy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LocationHierarchy& a, LocationHierarchy& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationHierarchy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationHierarchy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationHierarchy* New() const final {
    return CreateMaybeMessage<LocationHierarchy>(nullptr);
  }

  LocationHierarchy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationHierarchy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationHierarchy& from);
  void MergeFrom(const LocationHierarchy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationHierarchy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.LocationHierarchy";
  }
  protected:
  explicit LocationHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocFieldNumber = 1,
  };
  // repeated string loc = 1;
  int loc_size() const;
  private:
  int _internal_loc_size() const;
  public:
  void clear_loc();
  const std::string& loc(int index) const;
  std::string* mutable_loc(int index);
  void set_loc(int index, const std::string& value);
  void set_loc(int index, std::string&& value);
  void set_loc(int index, const char* value);
  void set_loc(int index, const char* value, size_t size);
  std::string* add_loc();
  void add_loc(const std::string& value);
  void add_loc(std::string&& value);
  void add_loc(const char* value);
  void add_loc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& loc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_loc();
  private:
  const std::string& _internal_loc(int index) const;
  std::string* _internal_add_loc();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.LocationHierarchy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> loc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class ProductDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ProductDetails) */ {
 public:
  inline ProductDetails() : ProductDetails(nullptr) {}
  virtual ~ProductDetails();

  ProductDetails(const ProductDetails& from);
  ProductDetails(ProductDetails&& from) noexcept
    : ProductDetails() {
    *this = ::std::move(from);
  }

  inline ProductDetails& operator=(const ProductDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductDetails& operator=(ProductDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProductDetails& default_instance();

  static inline const ProductDetails* internal_default_instance() {
    return reinterpret_cast<const ProductDetails*>(
               &_ProductDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProductDetails& a, ProductDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductDetails* New() const final {
    return CreateMaybeMessage<ProductDetails>(nullptr);
  }

  ProductDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductDetails& from);
  void MergeFrom(const ProductDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ProductDetails";
  }
  protected:
  explicit ProductDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialCodeFieldNumber = 1,
    kTolerancePercentageFieldNumber = 3,
    kDosagePerAcreFieldNumber = 4,
    kUnitPackSizeFieldNumber = 5,
    kUnitFieldNumber = 2,
  };
  // string materialCode = 1;
  void clear_materialcode();
  const std::string& materialcode() const;
  void set_materialcode(const std::string& value);
  void set_materialcode(std::string&& value);
  void set_materialcode(const char* value);
  void set_materialcode(const char* value, size_t size);
  std::string* mutable_materialcode();
  std::string* release_materialcode();
  void set_allocated_materialcode(std::string* materialcode);
  private:
  const std::string& _internal_materialcode() const;
  void _internal_set_materialcode(const std::string& value);
  std::string* _internal_mutable_materialcode();
  public:

  // double tolerancePercentage = 3;
  void clear_tolerancepercentage();
  double tolerancepercentage() const;
  void set_tolerancepercentage(double value);
  private:
  double _internal_tolerancepercentage() const;
  void _internal_set_tolerancepercentage(double value);
  public:

  // double dosagePerAcre = 4;
  void clear_dosageperacre();
  double dosageperacre() const;
  void set_dosageperacre(double value);
  private:
  double _internal_dosageperacre() const;
  void _internal_set_dosageperacre(double value);
  public:

  // double unitPackSize = 5;
  void clear_unitpacksize();
  double unitpacksize() const;
  void set_unitpacksize(double value);
  private:
  double _internal_unitpacksize() const;
  void _internal_set_unitpacksize(double value);
  public:

  // .farm.nurture.core.contracts.common.UnitType unit = 2;
  void clear_unit();
  ::farm::nurture::core::contracts::common::UnitType unit() const;
  void set_unit(::farm::nurture::core::contracts::common::UnitType value);
  private:
  ::farm::nurture::core::contracts::common::UnitType _internal_unit() const;
  void _internal_set_unit(::farm::nurture::core::contracts::common::UnitType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ProductDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr materialcode_;
  double tolerancepercentage_;
  double dosageperacre_;
  double unitpacksize_;
  int unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// -------------------------------------------------------------------

class IOTStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.IOTStats) */ {
 public:
  inline IOTStats() : IOTStats(nullptr) {}
  virtual ~IOTStats();

  IOTStats(const IOTStats& from);
  IOTStats(IOTStats&& from) noexcept
    : IOTStats() {
    *this = ::std::move(from);
  }

  inline IOTStats& operator=(const IOTStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOTStats& operator=(IOTStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOTStats& default_instance();

  static inline const IOTStats* internal_default_instance() {
    return reinterpret_cast<const IOTStats*>(
               &_IOTStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IOTStats& a, IOTStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IOTStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOTStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOTStats* New() const final {
    return CreateMaybeMessage<IOTStats>(nullptr);
  }

  IOTStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOTStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOTStats& from);
  void MergeFrom(const IOTStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOTStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.IOTStats";
  }
  protected:
  explicit IOTStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fentities_2eproto);
    return ::descriptor_table_Common_2fentities_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 10,
    kMachineNumberFieldNumber = 11,
    kTimeslotFieldNumber = 5,
    kIotAcreFieldNumber = 2,
    kAllowAcreChangePercentageFieldNumber = 3,
    kTotalPingsCountFieldNumber = 4,
    kEngineOnCountFieldNumber = 6,
    kSpeedCountFieldNumber = 7,
    kPingDensityPerMinuteFieldNumber = 8,
    kIsMalfunctionedFieldNumber = 1,
    kIsMisbehavedFieldNumber = 9,
  };
  // string deviceId = 10;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string machineNumber = 11;
  void clear_machinenumber();
  const std::string& machinenumber() const;
  void set_machinenumber(const std::string& value);
  void set_machinenumber(std::string&& value);
  void set_machinenumber(const char* value);
  void set_machinenumber(const char* value, size_t size);
  std::string* mutable_machinenumber();
  std::string* release_machinenumber();
  void set_allocated_machinenumber(std::string* machinenumber);
  private:
  const std::string& _internal_machinenumber() const;
  void _internal_set_machinenumber(const std::string& value);
  std::string* _internal_mutable_machinenumber();
  public:

  // .farm.nurture.core.contracts.common.TimeSlot timeslot = 5;
  bool has_timeslot() const;
  private:
  bool _internal_has_timeslot() const;
  public:
  void clear_timeslot();
  const ::farm::nurture::core::contracts::common::TimeSlot& timeslot() const;
  ::farm::nurture::core::contracts::common::TimeSlot* release_timeslot();
  ::farm::nurture::core::contracts::common::TimeSlot* mutable_timeslot();
  void set_allocated_timeslot(::farm::nurture::core::contracts::common::TimeSlot* timeslot);
  private:
  const ::farm::nurture::core::contracts::common::TimeSlot& _internal_timeslot() const;
  ::farm::nurture::core::contracts::common::TimeSlot* _internal_mutable_timeslot();
  public:
  void unsafe_arena_set_allocated_timeslot(
      ::farm::nurture::core::contracts::common::TimeSlot* timeslot);
  ::farm::nurture::core::contracts::common::TimeSlot* unsafe_arena_release_timeslot();

  // double iotAcre = 2;
  void clear_iotacre();
  double iotacre() const;
  void set_iotacre(double value);
  private:
  double _internal_iotacre() const;
  void _internal_set_iotacre(double value);
  public:

  // double allowAcreChangePercentage = 3;
  void clear_allowacrechangepercentage();
  double allowacrechangepercentage() const;
  void set_allowacrechangepercentage(double value);
  private:
  double _internal_allowacrechangepercentage() const;
  void _internal_set_allowacrechangepercentage(double value);
  public:

  // int64 totalPingsCount = 4;
  void clear_totalpingscount();
  ::PROTOBUF_NAMESPACE_ID::int64 totalpingscount() const;
  void set_totalpingscount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_totalpingscount() const;
  void _internal_set_totalpingscount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 engineOnCount = 6;
  void clear_engineoncount();
  ::PROTOBUF_NAMESPACE_ID::int64 engineoncount() const;
  void set_engineoncount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_engineoncount() const;
  void _internal_set_engineoncount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 speedCount = 7;
  void clear_speedcount();
  ::PROTOBUF_NAMESPACE_ID::int64 speedcount() const;
  void set_speedcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_speedcount() const;
  void _internal_set_speedcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double pingDensityPerMinute = 8;
  void clear_pingdensityperminute();
  double pingdensityperminute() const;
  void set_pingdensityperminute(double value);
  private:
  double _internal_pingdensityperminute() const;
  void _internal_set_pingdensityperminute(double value);
  public:

  // bool isMalfunctioned = 1;
  void clear_ismalfunctioned();
  bool ismalfunctioned() const;
  void set_ismalfunctioned(bool value);
  private:
  bool _internal_ismalfunctioned() const;
  void _internal_set_ismalfunctioned(bool value);
  public:

  // bool isMisbehaved = 9;
  void clear_ismisbehaved();
  bool ismisbehaved() const;
  void set_ismisbehaved(bool value);
  private:
  bool _internal_ismisbehaved() const;
  void _internal_set_ismisbehaved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.IOTStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machinenumber_;
  ::farm::nurture::core::contracts::common::TimeSlot* timeslot_;
  double iotacre_;
  double allowacrechangepercentage_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalpingscount_;
  ::PROTOBUF_NAMESPACE_ID::int64 engineoncount_;
  ::PROTOBUF_NAMESPACE_ID::int64 speedcount_;
  double pingdensityperminute_;
  bool ismalfunctioned_;
  bool ismisbehaved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fentities_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActorID

// .farm.nurture.core.contracts.common.ActorType actor_type = 1;
inline void ActorID::clear_actor_type() {
  actor_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ActorType ActorID::_internal_actor_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ActorType >(actor_type_);
}
inline ::farm::nurture::core::contracts::common::ActorType ActorID::actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActorID.actor_type)
  return _internal_actor_type();
}
inline void ActorID::_internal_set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  
  actor_type_ = value;
}
inline void ActorID::set_actor_type(::farm::nurture::core::contracts::common::ActorType value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActorID.actor_type)
}

// int64 actor_id = 2;
inline void ActorID::clear_actor_id() {
  actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActorID::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActorID::actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActorID.actor_id)
  return _internal_actor_id();
}
inline void ActorID::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actor_id_ = value;
}
inline void ActorID::set_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ActorID.actor_id)
}

// -------------------------------------------------------------------

// Location

// double latitude = 1;
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Location.latitude)
}

// double longitude = 2;
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Location.longitude)
}

// double accuracy = 3;
inline void Location::clear_accuracy() {
  accuracy_ = 0;
}
inline double Location::_internal_accuracy() const {
  return accuracy_;
}
inline double Location::accuracy() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Location.accuracy)
  return _internal_accuracy();
}
inline void Location::_internal_set_accuracy(double value) {
  
  accuracy_ = value;
}
inline void Location::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Location.accuracy)
}

// -------------------------------------------------------------------

// ActorEventTrace

// .farm.nurture.core.contracts.common.ActorID actor = 1;
inline bool ActorEventTrace::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool ActorEventTrace::has_actor() const {
  return _internal_has_actor();
}
inline void ActorEventTrace::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::ActorID& ActorEventTrace::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ActorEventTrace::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActorEventTrace.actor)
  return _internal_actor();
}
inline void ActorEventTrace::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.ActorEventTrace.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* ActorEventTrace::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActorEventTrace::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.ActorEventTrace.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActorEventTrace::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActorEventTrace::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ActorEventTrace.actor)
  return _internal_mutable_actor();
}
inline void ActorEventTrace::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete actor_;
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(actor);
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.ActorEventTrace.actor)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool ActorEventTrace::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool ActorEventTrace::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActorEventTrace::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActorEventTrace::timestamp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ActorEventTrace.timestamp)
  return _internal_timestamp();
}
inline void ActorEventTrace::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.ActorEventTrace.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActorEventTrace::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActorEventTrace::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.ActorEventTrace.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActorEventTrace::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActorEventTrace::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ActorEventTrace.timestamp)
  return _internal_mutable_timestamp();
}
inline void ActorEventTrace::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.ActorEventTrace.timestamp)
}

// -------------------------------------------------------------------

// Geography

// .farm.nurture.core.contracts.common.GeographyType geographyType = 1;
inline void Geography::clear_geographytype() {
  geographytype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeographyType Geography::_internal_geographytype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeographyType >(geographytype_);
}
inline ::farm::nurture::core::contracts::common::GeographyType Geography::geographytype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Geography.geographyType)
  return _internal_geographytype();
}
inline void Geography::_internal_set_geographytype(::farm::nurture::core::contracts::common::GeographyType value) {
  
  geographytype_ = value;
}
inline void Geography::set_geographytype(::farm::nurture::core::contracts::common::GeographyType value) {
  _internal_set_geographytype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Geography.geographyType)
}

// int64 geographyId = 2;
inline void Geography::clear_geographyid() {
  geographyid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Geography::_internal_geographyid() const {
  return geographyid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Geography::geographyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Geography.geographyId)
  return _internal_geographyid();
}
inline void Geography::_internal_set_geographyid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  geographyid_ = value;
}
inline void Geography::set_geographyid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_geographyid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Geography.geographyId)
}

// -------------------------------------------------------------------

// KafkaProductInterestProto

// string farmerMobileNumber = 1;
inline void KafkaProductInterestProto::clear_farmermobilenumber() {
  farmermobilenumber_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::farmermobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
  return _internal_farmermobilenumber();
}
inline void KafkaProductInterestProto::set_farmermobilenumber(const std::string& value) {
  _internal_set_farmermobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
}
inline std::string* KafkaProductInterestProto::mutable_farmermobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
  return _internal_mutable_farmermobilenumber();
}
inline const std::string& KafkaProductInterestProto::_internal_farmermobilenumber() const {
  return farmermobilenumber_.Get();
}
inline void KafkaProductInterestProto::_internal_set_farmermobilenumber(const std::string& value) {
  
  farmermobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_farmermobilenumber(std::string&& value) {
  
  farmermobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
}
inline void KafkaProductInterestProto::set_farmermobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  farmermobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
}
inline void KafkaProductInterestProto::set_farmermobilenumber(const char* value,
    size_t size) {
  
  farmermobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_farmermobilenumber() {
  
  return farmermobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_farmermobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
  return farmermobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_farmermobilenumber(std::string* farmermobilenumber) {
  if (farmermobilenumber != nullptr) {
    
  } else {
    
  }
  farmermobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), farmermobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerMobileNumber)
}

// string farmerName = 2;
inline void KafkaProductInterestProto::clear_farmername() {
  farmername_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::farmername() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
  return _internal_farmername();
}
inline void KafkaProductInterestProto::set_farmername(const std::string& value) {
  _internal_set_farmername(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
}
inline std::string* KafkaProductInterestProto::mutable_farmername() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
  return _internal_mutable_farmername();
}
inline const std::string& KafkaProductInterestProto::_internal_farmername() const {
  return farmername_.Get();
}
inline void KafkaProductInterestProto::_internal_set_farmername(const std::string& value) {
  
  farmername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_farmername(std::string&& value) {
  
  farmername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
}
inline void KafkaProductInterestProto::set_farmername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  farmername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
}
inline void KafkaProductInterestProto::set_farmername(const char* value,
    size_t size) {
  
  farmername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_farmername() {
  
  return farmername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_farmername() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
  return farmername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_farmername(std::string* farmername) {
  if (farmername != nullptr) {
    
  } else {
    
  }
  farmername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), farmername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerName)
}

// string productName = 3;
inline void KafkaProductInterestProto::clear_productname() {
  productname_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::productname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
  return _internal_productname();
}
inline void KafkaProductInterestProto::set_productname(const std::string& value) {
  _internal_set_productname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
}
inline std::string* KafkaProductInterestProto::mutable_productname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
  return _internal_mutable_productname();
}
inline const std::string& KafkaProductInterestProto::_internal_productname() const {
  return productname_.Get();
}
inline void KafkaProductInterestProto::_internal_set_productname(const std::string& value) {
  
  productname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_productname(std::string&& value) {
  
  productname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
}
inline void KafkaProductInterestProto::set_productname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
}
inline void KafkaProductInterestProto::set_productname(const char* value,
    size_t size) {
  
  productname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_productname() {
  
  return productname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_productname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
  return productname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_productname(std::string* productname) {
  if (productname != nullptr) {
    
  } else {
    
  }
  productname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.productName)
}

// string productBrandName = 4;
inline void KafkaProductInterestProto::clear_productbrandname() {
  productbrandname_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::productbrandname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
  return _internal_productbrandname();
}
inline void KafkaProductInterestProto::set_productbrandname(const std::string& value) {
  _internal_set_productbrandname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
}
inline std::string* KafkaProductInterestProto::mutable_productbrandname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
  return _internal_mutable_productbrandname();
}
inline const std::string& KafkaProductInterestProto::_internal_productbrandname() const {
  return productbrandname_.Get();
}
inline void KafkaProductInterestProto::_internal_set_productbrandname(const std::string& value) {
  
  productbrandname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_productbrandname(std::string&& value) {
  
  productbrandname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
}
inline void KafkaProductInterestProto::set_productbrandname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productbrandname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
}
inline void KafkaProductInterestProto::set_productbrandname(const char* value,
    size_t size) {
  
  productbrandname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_productbrandname() {
  
  return productbrandname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_productbrandname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
  return productbrandname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_productbrandname(std::string* productbrandname) {
  if (productbrandname != nullptr) {
    
  } else {
    
  }
  productbrandname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productbrandname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.productBrandName)
}

// string productCode = 5;
inline void KafkaProductInterestProto::clear_productcode() {
  productcode_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::productcode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
  return _internal_productcode();
}
inline void KafkaProductInterestProto::set_productcode(const std::string& value) {
  _internal_set_productcode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
}
inline std::string* KafkaProductInterestProto::mutable_productcode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
  return _internal_mutable_productcode();
}
inline const std::string& KafkaProductInterestProto::_internal_productcode() const {
  return productcode_.Get();
}
inline void KafkaProductInterestProto::_internal_set_productcode(const std::string& value) {
  
  productcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_productcode(std::string&& value) {
  
  productcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
}
inline void KafkaProductInterestProto::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
}
inline void KafkaProductInterestProto::set_productcode(const char* value,
    size_t size) {
  
  productcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_productcode() {
  
  return productcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_productcode() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
  return productcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_productcode(std::string* productcode) {
  if (productcode != nullptr) {
    
  } else {
    
  }
  productcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.productCode)
}

// double latitude = 6;
inline void KafkaProductInterestProto::clear_latitude() {
  latitude_ = 0;
}
inline double KafkaProductInterestProto::_internal_latitude() const {
  return latitude_;
}
inline double KafkaProductInterestProto::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.latitude)
  return _internal_latitude();
}
inline void KafkaProductInterestProto::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void KafkaProductInterestProto::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.latitude)
}

// double longitude = 7;
inline void KafkaProductInterestProto::clear_longitude() {
  longitude_ = 0;
}
inline double KafkaProductInterestProto::_internal_longitude() const {
  return longitude_;
}
inline double KafkaProductInterestProto::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.longitude)
  return _internal_longitude();
}
inline void KafkaProductInterestProto::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void KafkaProductInterestProto::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.longitude)
}

// string district = 8;
inline void KafkaProductInterestProto::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
  return _internal_district();
}
inline void KafkaProductInterestProto::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
}
inline std::string* KafkaProductInterestProto::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
  return _internal_mutable_district();
}
inline const std::string& KafkaProductInterestProto::_internal_district() const {
  return district_.Get();
}
inline void KafkaProductInterestProto::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
}
inline void KafkaProductInterestProto::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
}
inline void KafkaProductInterestProto::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.district)
}

// string state = 9;
inline void KafkaProductInterestProto::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& KafkaProductInterestProto::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
  return _internal_state();
}
inline void KafkaProductInterestProto::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
}
inline std::string* KafkaProductInterestProto::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
  return _internal_mutable_state();
}
inline const std::string& KafkaProductInterestProto::_internal_state() const {
  return state_.Get();
}
inline void KafkaProductInterestProto::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KafkaProductInterestProto::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
}
inline void KafkaProductInterestProto::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
}
inline void KafkaProductInterestProto::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
}
inline std::string* KafkaProductInterestProto::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KafkaProductInterestProto::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KafkaProductInterestProto::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.KafkaProductInterestProto.state)
}

// int64 enquiry = 10;
inline void KafkaProductInterestProto::clear_enquiry() {
  enquiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KafkaProductInterestProto::_internal_enquiry() const {
  return enquiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KafkaProductInterestProto::enquiry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.enquiry)
  return _internal_enquiry();
}
inline void KafkaProductInterestProto::_internal_set_enquiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  enquiry_ = value;
}
inline void KafkaProductInterestProto::set_enquiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_enquiry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.enquiry)
}

// int64 farmerId = 11;
inline void KafkaProductInterestProto::clear_farmerid() {
  farmerid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KafkaProductInterestProto::_internal_farmerid() const {
  return farmerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KafkaProductInterestProto::farmerid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerId)
  return _internal_farmerid();
}
inline void KafkaProductInterestProto::_internal_set_farmerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  farmerid_ = value;
}
inline void KafkaProductInterestProto::set_farmerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_farmerid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.KafkaProductInterestProto.farmerId)
}

// -------------------------------------------------------------------

// RoleGeoPair

// string role = 1;
inline void RoleGeoPair::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& RoleGeoPair::role() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RoleGeoPair.role)
  return _internal_role();
}
inline void RoleGeoPair::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RoleGeoPair.role)
}
inline std::string* RoleGeoPair::mutable_role() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RoleGeoPair.role)
  return _internal_mutable_role();
}
inline const std::string& RoleGeoPair::_internal_role() const {
  return role_.Get();
}
inline void RoleGeoPair::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoleGeoPair::set_role(std::string&& value) {
  
  role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RoleGeoPair.role)
}
inline void RoleGeoPair::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RoleGeoPair.role)
}
inline void RoleGeoPair::set_role(const char* value,
    size_t size) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RoleGeoPair.role)
}
inline std::string* RoleGeoPair::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoleGeoPair::release_role() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RoleGeoPair.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleGeoPair::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RoleGeoPair.role)
}

// int64 geoId = 2;
inline void RoleGeoPair::clear_geoid() {
  geoid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleGeoPair::_internal_geoid() const {
  return geoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleGeoPair::geoid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RoleGeoPair.geoId)
  return _internal_geoid();
}
inline void RoleGeoPair::_internal_set_geoid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  geoid_ = value;
}
inline void RoleGeoPair::set_geoid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_geoid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RoleGeoPair.geoId)
}

// string subRole = 3;
inline void RoleGeoPair::clear_subrole() {
  subrole_.ClearToEmpty();
}
inline const std::string& RoleGeoPair::subrole() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
  return _internal_subrole();
}
inline void RoleGeoPair::set_subrole(const std::string& value) {
  _internal_set_subrole(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
}
inline std::string* RoleGeoPair::mutable_subrole() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
  return _internal_mutable_subrole();
}
inline const std::string& RoleGeoPair::_internal_subrole() const {
  return subrole_.Get();
}
inline void RoleGeoPair::_internal_set_subrole(const std::string& value) {
  
  subrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoleGeoPair::set_subrole(std::string&& value) {
  
  subrole_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
}
inline void RoleGeoPair::set_subrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
}
inline void RoleGeoPair::set_subrole(const char* value,
    size_t size) {
  
  subrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
}
inline std::string* RoleGeoPair::_internal_mutable_subrole() {
  
  return subrole_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoleGeoPair::release_subrole() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
  return subrole_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleGeoPair::set_allocated_subrole(std::string* subrole) {
  if (subrole != nullptr) {
    
  } else {
    
  }
  subrole_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subrole,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RoleGeoPair.subRole)
}

// -------------------------------------------------------------------

// UserAttributes

// .farm.nurture.core.contracts.common.LocationHierarchy locationHierarchy = 1;
inline bool UserAttributes::_internal_has_locationhierarchy() const {
  return this != internal_default_instance() && locationhierarchy_ != nullptr;
}
inline bool UserAttributes::has_locationhierarchy() const {
  return _internal_has_locationhierarchy();
}
inline void UserAttributes::clear_locationhierarchy() {
  if (GetArena() == nullptr && locationhierarchy_ != nullptr) {
    delete locationhierarchy_;
  }
  locationhierarchy_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::LocationHierarchy& UserAttributes::_internal_locationhierarchy() const {
  const ::farm::nurture::core::contracts::common::LocationHierarchy* p = locationhierarchy_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::LocationHierarchy&>(
      ::farm::nurture::core::contracts::common::_LocationHierarchy_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::LocationHierarchy& UserAttributes::locationhierarchy() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.locationHierarchy)
  return _internal_locationhierarchy();
}
inline void UserAttributes::unsafe_arena_set_allocated_locationhierarchy(
    ::farm::nurture::core::contracts::common::LocationHierarchy* locationhierarchy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationhierarchy_);
  }
  locationhierarchy_ = locationhierarchy;
  if (locationhierarchy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UserAttributes.locationHierarchy)
}
inline ::farm::nurture::core::contracts::common::LocationHierarchy* UserAttributes::release_locationhierarchy() {
  
  ::farm::nurture::core::contracts::common::LocationHierarchy* temp = locationhierarchy_;
  locationhierarchy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocationHierarchy* UserAttributes::unsafe_arena_release_locationhierarchy() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserAttributes.locationHierarchy)
  
  ::farm::nurture::core::contracts::common::LocationHierarchy* temp = locationhierarchy_;
  locationhierarchy_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::LocationHierarchy* UserAttributes::_internal_mutable_locationhierarchy() {
  
  if (locationhierarchy_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::LocationHierarchy>(GetArena());
    locationhierarchy_ = p;
  }
  return locationhierarchy_;
}
inline ::farm::nurture::core::contracts::common::LocationHierarchy* UserAttributes::mutable_locationhierarchy() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserAttributes.locationHierarchy)
  return _internal_mutable_locationhierarchy();
}
inline void UserAttributes::set_allocated_locationhierarchy(::farm::nurture::core::contracts::common::LocationHierarchy* locationhierarchy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locationhierarchy_;
  }
  if (locationhierarchy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locationhierarchy);
    if (message_arena != submessage_arena) {
      locationhierarchy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationhierarchy, submessage_arena);
    }
    
  } else {
    
  }
  locationhierarchy_ = locationhierarchy;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserAttributes.locationHierarchy)
}

// string product_reference_type = 2;
inline void UserAttributes::clear_product_reference_type() {
  product_reference_type_.ClearToEmpty();
}
inline const std::string& UserAttributes::product_reference_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
  return _internal_product_reference_type();
}
inline void UserAttributes::set_product_reference_type(const std::string& value) {
  _internal_set_product_reference_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
}
inline std::string* UserAttributes::mutable_product_reference_type() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
  return _internal_mutable_product_reference_type();
}
inline const std::string& UserAttributes::_internal_product_reference_type() const {
  return product_reference_type_.Get();
}
inline void UserAttributes::_internal_set_product_reference_type(const std::string& value) {
  
  product_reference_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAttributes::set_product_reference_type(std::string&& value) {
  
  product_reference_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
}
inline void UserAttributes::set_product_reference_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_reference_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
}
inline void UserAttributes::set_product_reference_type(const char* value,
    size_t size) {
  
  product_reference_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
}
inline std::string* UserAttributes::_internal_mutable_product_reference_type() {
  
  return product_reference_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAttributes::release_product_reference_type() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
  return product_reference_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAttributes::set_allocated_product_reference_type(std::string* product_reference_type) {
  if (product_reference_type != nullptr) {
    
  } else {
    
  }
  product_reference_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_reference_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserAttributes.product_reference_type)
}

// string product_reference_id = 3;
inline void UserAttributes::clear_product_reference_id() {
  product_reference_id_.ClearToEmpty();
}
inline const std::string& UserAttributes::product_reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
  return _internal_product_reference_id();
}
inline void UserAttributes::set_product_reference_id(const std::string& value) {
  _internal_set_product_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
}
inline std::string* UserAttributes::mutable_product_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
  return _internal_mutable_product_reference_id();
}
inline const std::string& UserAttributes::_internal_product_reference_id() const {
  return product_reference_id_.Get();
}
inline void UserAttributes::_internal_set_product_reference_id(const std::string& value) {
  
  product_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAttributes::set_product_reference_id(std::string&& value) {
  
  product_reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
}
inline void UserAttributes::set_product_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
}
inline void UserAttributes::set_product_reference_id(const char* value,
    size_t size) {
  
  product_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
}
inline std::string* UserAttributes::_internal_mutable_product_reference_id() {
  
  return product_reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAttributes::release_product_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
  return product_reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAttributes::set_allocated_product_reference_id(std::string* product_reference_id) {
  if (product_reference_id != nullptr) {
    
  } else {
    
  }
  product_reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserAttributes.product_reference_id)
}

// .farm.nurture.core.contracts.common.BookingSource booking_source = 4;
inline void UserAttributes::clear_booking_source() {
  booking_source_ = 0;
}
inline ::farm::nurture::core::contracts::common::BookingSource UserAttributes::_internal_booking_source() const {
  return static_cast< ::farm::nurture::core::contracts::common::BookingSource >(booking_source_);
}
inline ::farm::nurture::core::contracts::common::BookingSource UserAttributes::booking_source() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.booking_source)
  return _internal_booking_source();
}
inline void UserAttributes::_internal_set_booking_source(::farm::nurture::core::contracts::common::BookingSource value) {
  
  booking_source_ = value;
}
inline void UserAttributes::set_booking_source(::farm::nurture::core::contracts::common::BookingSource value) {
  _internal_set_booking_source(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.booking_source)
}

// repeated string crop = 5;
inline int UserAttributes::_internal_crop_size() const {
  return crop_.size();
}
inline int UserAttributes::crop_size() const {
  return _internal_crop_size();
}
inline void UserAttributes::clear_crop() {
  crop_.Clear();
}
inline std::string* UserAttributes::add_crop() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.UserAttributes.crop)
  return _internal_add_crop();
}
inline const std::string& UserAttributes::_internal_crop(int index) const {
  return crop_.Get(index);
}
inline const std::string& UserAttributes::crop(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.crop)
  return _internal_crop(index);
}
inline std::string* UserAttributes::mutable_crop(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserAttributes.crop)
  return crop_.Mutable(index);
}
inline void UserAttributes::set_crop(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.crop)
  crop_.Mutable(index)->assign(value);
}
inline void UserAttributes::set_crop(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.crop)
  crop_.Mutable(index)->assign(std::move(value));
}
inline void UserAttributes::set_crop(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline void UserAttributes::set_crop(int index, const char* value, size_t size) {
  crop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline std::string* UserAttributes::_internal_add_crop() {
  return crop_.Add();
}
inline void UserAttributes::add_crop(const std::string& value) {
  crop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline void UserAttributes::add_crop(std::string&& value) {
  crop_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline void UserAttributes::add_crop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline void UserAttributes::add_crop(const char* value, size_t size) {
  crop_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.UserAttributes.crop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserAttributes::crop() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UserAttributes.crop)
  return crop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserAttributes::mutable_crop() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UserAttributes.crop)
  return &crop_;
}

// bool isDSRSignedUp = 6;
inline void UserAttributes::clear_isdsrsignedup() {
  isdsrsignedup_ = false;
}
inline bool UserAttributes::_internal_isdsrsignedup() const {
  return isdsrsignedup_;
}
inline bool UserAttributes::isdsrsignedup() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.isDSRSignedUp)
  return _internal_isdsrsignedup();
}
inline void UserAttributes::_internal_set_isdsrsignedup(bool value) {
  
  isdsrsignedup_ = value;
}
inline void UserAttributes::set_isdsrsignedup(bool value) {
  _internal_set_isdsrsignedup(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.isDSRSignedUp)
}

// int64 bookingCount = 7;
inline void UserAttributes::clear_bookingcount() {
  bookingcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAttributes::_internal_bookingcount() const {
  return bookingcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAttributes::bookingcount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.bookingCount)
  return _internal_bookingcount();
}
inline void UserAttributes::_internal_set_bookingcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bookingcount_ = value;
}
inline void UserAttributes::set_bookingcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bookingcount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.bookingCount)
}

// bool isKavach = 8;
inline void UserAttributes::clear_iskavach() {
  iskavach_ = false;
}
inline bool UserAttributes::_internal_iskavach() const {
  return iskavach_;
}
inline bool UserAttributes::iskavach() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserAttributes.isKavach)
  return _internal_iskavach();
}
inline void UserAttributes::_internal_set_iskavach(bool value) {
  
  iskavach_ = value;
}
inline void UserAttributes::set_iskavach(bool value) {
  _internal_set_iskavach(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserAttributes.isKavach)
}

// -------------------------------------------------------------------

// LocationHierarchy

// repeated string loc = 1;
inline int LocationHierarchy::_internal_loc_size() const {
  return loc_.size();
}
inline int LocationHierarchy::loc_size() const {
  return _internal_loc_size();
}
inline void LocationHierarchy::clear_loc() {
  loc_.Clear();
}
inline std::string* LocationHierarchy::add_loc() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  return _internal_add_loc();
}
inline const std::string& LocationHierarchy::_internal_loc(int index) const {
  return loc_.Get(index);
}
inline const std::string& LocationHierarchy::loc(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  return _internal_loc(index);
}
inline std::string* LocationHierarchy::mutable_loc(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  return loc_.Mutable(index);
}
inline void LocationHierarchy::set_loc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  loc_.Mutable(index)->assign(value);
}
inline void LocationHierarchy::set_loc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  loc_.Mutable(index)->assign(std::move(value));
}
inline void LocationHierarchy::set_loc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline void LocationHierarchy::set_loc(int index, const char* value, size_t size) {
  loc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline std::string* LocationHierarchy::_internal_add_loc() {
  return loc_.Add();
}
inline void LocationHierarchy::add_loc(const std::string& value) {
  loc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline void LocationHierarchy::add_loc(std::string&& value) {
  loc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline void LocationHierarchy::add_loc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline void LocationHierarchy::add_loc(const char* value, size_t size) {
  loc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.LocationHierarchy.loc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LocationHierarchy::loc() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  return loc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LocationHierarchy::mutable_loc() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.LocationHierarchy.loc)
  return &loc_;
}

// -------------------------------------------------------------------

// ProductDetails

// string materialCode = 1;
inline void ProductDetails::clear_materialcode() {
  materialcode_.ClearToEmpty();
}
inline const std::string& ProductDetails::materialcode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ProductDetails.materialCode)
  return _internal_materialcode();
}
inline void ProductDetails::set_materialcode(const std::string& value) {
  _internal_set_materialcode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ProductDetails.materialCode)
}
inline std::string* ProductDetails::mutable_materialcode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ProductDetails.materialCode)
  return _internal_mutable_materialcode();
}
inline const std::string& ProductDetails::_internal_materialcode() const {
  return materialcode_.Get();
}
inline void ProductDetails::_internal_set_materialcode(const std::string& value) {
  
  materialcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProductDetails::set_materialcode(std::string&& value) {
  
  materialcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.ProductDetails.materialCode)
}
inline void ProductDetails::set_materialcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  materialcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.ProductDetails.materialCode)
}
inline void ProductDetails::set_materialcode(const char* value,
    size_t size) {
  
  materialcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.ProductDetails.materialCode)
}
inline std::string* ProductDetails::_internal_mutable_materialcode() {
  
  return materialcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProductDetails::release_materialcode() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.ProductDetails.materialCode)
  return materialcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductDetails::set_allocated_materialcode(std::string* materialcode) {
  if (materialcode != nullptr) {
    
  } else {
    
  }
  materialcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), materialcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.ProductDetails.materialCode)
}

// .farm.nurture.core.contracts.common.UnitType unit = 2;
inline void ProductDetails::clear_unit() {
  unit_ = 0;
}
inline ::farm::nurture::core::contracts::common::UnitType ProductDetails::_internal_unit() const {
  return static_cast< ::farm::nurture::core::contracts::common::UnitType >(unit_);
}
inline ::farm::nurture::core::contracts::common::UnitType ProductDetails::unit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ProductDetails.unit)
  return _internal_unit();
}
inline void ProductDetails::_internal_set_unit(::farm::nurture::core::contracts::common::UnitType value) {
  
  unit_ = value;
}
inline void ProductDetails::set_unit(::farm::nurture::core::contracts::common::UnitType value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ProductDetails.unit)
}

// double tolerancePercentage = 3;
inline void ProductDetails::clear_tolerancepercentage() {
  tolerancepercentage_ = 0;
}
inline double ProductDetails::_internal_tolerancepercentage() const {
  return tolerancepercentage_;
}
inline double ProductDetails::tolerancepercentage() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ProductDetails.tolerancePercentage)
  return _internal_tolerancepercentage();
}
inline void ProductDetails::_internal_set_tolerancepercentage(double value) {
  
  tolerancepercentage_ = value;
}
inline void ProductDetails::set_tolerancepercentage(double value) {
  _internal_set_tolerancepercentage(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ProductDetails.tolerancePercentage)
}

// double dosagePerAcre = 4;
inline void ProductDetails::clear_dosageperacre() {
  dosageperacre_ = 0;
}
inline double ProductDetails::_internal_dosageperacre() const {
  return dosageperacre_;
}
inline double ProductDetails::dosageperacre() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ProductDetails.dosagePerAcre)
  return _internal_dosageperacre();
}
inline void ProductDetails::_internal_set_dosageperacre(double value) {
  
  dosageperacre_ = value;
}
inline void ProductDetails::set_dosageperacre(double value) {
  _internal_set_dosageperacre(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ProductDetails.dosagePerAcre)
}

// double unitPackSize = 5;
inline void ProductDetails::clear_unitpacksize() {
  unitpacksize_ = 0;
}
inline double ProductDetails::_internal_unitpacksize() const {
  return unitpacksize_;
}
inline double ProductDetails::unitpacksize() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ProductDetails.unitPackSize)
  return _internal_unitpacksize();
}
inline void ProductDetails::_internal_set_unitpacksize(double value) {
  
  unitpacksize_ = value;
}
inline void ProductDetails::set_unitpacksize(double value) {
  _internal_set_unitpacksize(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ProductDetails.unitPackSize)
}

// -------------------------------------------------------------------

// IOTStats

// bool isMalfunctioned = 1;
inline void IOTStats::clear_ismalfunctioned() {
  ismalfunctioned_ = false;
}
inline bool IOTStats::_internal_ismalfunctioned() const {
  return ismalfunctioned_;
}
inline bool IOTStats::ismalfunctioned() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.isMalfunctioned)
  return _internal_ismalfunctioned();
}
inline void IOTStats::_internal_set_ismalfunctioned(bool value) {
  
  ismalfunctioned_ = value;
}
inline void IOTStats::set_ismalfunctioned(bool value) {
  _internal_set_ismalfunctioned(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.isMalfunctioned)
}

// double iotAcre = 2;
inline void IOTStats::clear_iotacre() {
  iotacre_ = 0;
}
inline double IOTStats::_internal_iotacre() const {
  return iotacre_;
}
inline double IOTStats::iotacre() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.iotAcre)
  return _internal_iotacre();
}
inline void IOTStats::_internal_set_iotacre(double value) {
  
  iotacre_ = value;
}
inline void IOTStats::set_iotacre(double value) {
  _internal_set_iotacre(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.iotAcre)
}

// double allowAcreChangePercentage = 3;
inline void IOTStats::clear_allowacrechangepercentage() {
  allowacrechangepercentage_ = 0;
}
inline double IOTStats::_internal_allowacrechangepercentage() const {
  return allowacrechangepercentage_;
}
inline double IOTStats::allowacrechangepercentage() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.allowAcreChangePercentage)
  return _internal_allowacrechangepercentage();
}
inline void IOTStats::_internal_set_allowacrechangepercentage(double value) {
  
  allowacrechangepercentage_ = value;
}
inline void IOTStats::set_allowacrechangepercentage(double value) {
  _internal_set_allowacrechangepercentage(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.allowAcreChangePercentage)
}

// int64 totalPingsCount = 4;
inline void IOTStats::clear_totalpingscount() {
  totalpingscount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::_internal_totalpingscount() const {
  return totalpingscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::totalpingscount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.totalPingsCount)
  return _internal_totalpingscount();
}
inline void IOTStats::_internal_set_totalpingscount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalpingscount_ = value;
}
inline void IOTStats::set_totalpingscount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_totalpingscount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.totalPingsCount)
}

// .farm.nurture.core.contracts.common.TimeSlot timeslot = 5;
inline bool IOTStats::_internal_has_timeslot() const {
  return this != internal_default_instance() && timeslot_ != nullptr;
}
inline bool IOTStats::has_timeslot() const {
  return _internal_has_timeslot();
}
inline const ::farm::nurture::core::contracts::common::TimeSlot& IOTStats::_internal_timeslot() const {
  const ::farm::nurture::core::contracts::common::TimeSlot* p = timeslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::TimeSlot&>(
      ::farm::nurture::core::contracts::common::_TimeSlot_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::TimeSlot& IOTStats::timeslot() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.timeslot)
  return _internal_timeslot();
}
inline void IOTStats::unsafe_arena_set_allocated_timeslot(
    ::farm::nurture::core::contracts::common::TimeSlot* timeslot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeslot_);
  }
  timeslot_ = timeslot;
  if (timeslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.IOTStats.timeslot)
}
inline ::farm::nurture::core::contracts::common::TimeSlot* IOTStats::release_timeslot() {
  
  ::farm::nurture::core::contracts::common::TimeSlot* temp = timeslot_;
  timeslot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* IOTStats::unsafe_arena_release_timeslot() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.IOTStats.timeslot)
  
  ::farm::nurture::core::contracts::common::TimeSlot* temp = timeslot_;
  timeslot_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* IOTStats::_internal_mutable_timeslot() {
  
  if (timeslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeSlot>(GetArena());
    timeslot_ = p;
  }
  return timeslot_;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* IOTStats::mutable_timeslot() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.IOTStats.timeslot)
  return _internal_mutable_timeslot();
}
inline void IOTStats::set_allocated_timeslot(::farm::nurture::core::contracts::common::TimeSlot* timeslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeslot_);
  }
  if (timeslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeslot)->GetArena();
    if (message_arena != submessage_arena) {
      timeslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeslot, submessage_arena);
    }
    
  } else {
    
  }
  timeslot_ = timeslot;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.IOTStats.timeslot)
}

// int64 engineOnCount = 6;
inline void IOTStats::clear_engineoncount() {
  engineoncount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::_internal_engineoncount() const {
  return engineoncount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::engineoncount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.engineOnCount)
  return _internal_engineoncount();
}
inline void IOTStats::_internal_set_engineoncount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  engineoncount_ = value;
}
inline void IOTStats::set_engineoncount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_engineoncount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.engineOnCount)
}

// int64 speedCount = 7;
inline void IOTStats::clear_speedcount() {
  speedcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::_internal_speedcount() const {
  return speedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IOTStats::speedcount() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.speedCount)
  return _internal_speedcount();
}
inline void IOTStats::_internal_set_speedcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  speedcount_ = value;
}
inline void IOTStats::set_speedcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_speedcount(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.speedCount)
}

// double pingDensityPerMinute = 8;
inline void IOTStats::clear_pingdensityperminute() {
  pingdensityperminute_ = 0;
}
inline double IOTStats::_internal_pingdensityperminute() const {
  return pingdensityperminute_;
}
inline double IOTStats::pingdensityperminute() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.pingDensityPerMinute)
  return _internal_pingdensityperminute();
}
inline void IOTStats::_internal_set_pingdensityperminute(double value) {
  
  pingdensityperminute_ = value;
}
inline void IOTStats::set_pingdensityperminute(double value) {
  _internal_set_pingdensityperminute(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.pingDensityPerMinute)
}

// bool isMisbehaved = 9;
inline void IOTStats::clear_ismisbehaved() {
  ismisbehaved_ = false;
}
inline bool IOTStats::_internal_ismisbehaved() const {
  return ismisbehaved_;
}
inline bool IOTStats::ismisbehaved() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.isMisbehaved)
  return _internal_ismisbehaved();
}
inline void IOTStats::_internal_set_ismisbehaved(bool value) {
  
  ismisbehaved_ = value;
}
inline void IOTStats::set_ismisbehaved(bool value) {
  _internal_set_ismisbehaved(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.isMisbehaved)
}

// string deviceId = 10;
inline void IOTStats::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& IOTStats::deviceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.deviceId)
  return _internal_deviceid();
}
inline void IOTStats::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.deviceId)
}
inline std::string* IOTStats::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.IOTStats.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& IOTStats::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void IOTStats::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOTStats::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.IOTStats.deviceId)
}
inline void IOTStats::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.IOTStats.deviceId)
}
inline void IOTStats::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.IOTStats.deviceId)
}
inline std::string* IOTStats::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOTStats::release_deviceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.IOTStats.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOTStats::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.IOTStats.deviceId)
}

// string machineNumber = 11;
inline void IOTStats::clear_machinenumber() {
  machinenumber_.ClearToEmpty();
}
inline const std::string& IOTStats::machinenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.IOTStats.machineNumber)
  return _internal_machinenumber();
}
inline void IOTStats::set_machinenumber(const std::string& value) {
  _internal_set_machinenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.IOTStats.machineNumber)
}
inline std::string* IOTStats::mutable_machinenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.IOTStats.machineNumber)
  return _internal_mutable_machinenumber();
}
inline const std::string& IOTStats::_internal_machinenumber() const {
  return machinenumber_.Get();
}
inline void IOTStats::_internal_set_machinenumber(const std::string& value) {
  
  machinenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOTStats::set_machinenumber(std::string&& value) {
  
  machinenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.IOTStats.machineNumber)
}
inline void IOTStats::set_machinenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machinenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.IOTStats.machineNumber)
}
inline void IOTStats::set_machinenumber(const char* value,
    size_t size) {
  
  machinenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.IOTStats.machineNumber)
}
inline std::string* IOTStats::_internal_mutable_machinenumber() {
  
  return machinenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOTStats::release_machinenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.IOTStats.machineNumber)
  return machinenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOTStats::set_allocated_machinenumber(std::string* machinenumber) {
  if (machinenumber != nullptr) {
    
  } else {
    
  }
  machinenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machinenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.IOTStats.machineNumber)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fentities_2eproto
