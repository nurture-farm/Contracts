// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/user_details.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fuser_5fdetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fuser_5fdetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fuser_5fdetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fuser_5fdetails_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fuser_5fdetails_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class UserFarmAreaDetails;
class UserFarmAreaDetailsDefaultTypeInternal;
extern UserFarmAreaDetailsDefaultTypeInternal _UserFarmAreaDetails_default_instance_;
class UserPersonalDetails;
class UserPersonalDetailsDefaultTypeInternal;
extern UserPersonalDetailsDefaultTypeInternal _UserPersonalDetails_default_instance_;
class UserWithAreaDetails;
class UserWithAreaDetailsDefaultTypeInternal;
extern UserWithAreaDetailsDefaultTypeInternal _UserWithAreaDetails_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::UserFarmAreaDetails* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UserFarmAreaDetails>(Arena*);
template<> ::farm::nurture::core::contracts::common::UserPersonalDetails* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UserPersonalDetails>(Arena*);
template<> ::farm::nurture::core::contracts::common::UserWithAreaDetails* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UserWithAreaDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class UserPersonalDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UserPersonalDetails) */ {
 public:
  inline UserPersonalDetails() : UserPersonalDetails(nullptr) {}
  virtual ~UserPersonalDetails();

  UserPersonalDetails(const UserPersonalDetails& from);
  UserPersonalDetails(UserPersonalDetails&& from) noexcept
    : UserPersonalDetails() {
    *this = ::std::move(from);
  }

  inline UserPersonalDetails& operator=(const UserPersonalDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPersonalDetails& operator=(UserPersonalDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPersonalDetails& default_instance();

  static inline const UserPersonalDetails* internal_default_instance() {
    return reinterpret_cast<const UserPersonalDetails*>(
               &_UserPersonalDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserPersonalDetails& a, UserPersonalDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPersonalDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPersonalDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPersonalDetails* New() const final {
    return CreateMaybeMessage<UserPersonalDetails>(nullptr);
  }

  UserPersonalDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPersonalDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPersonalDetails& from);
  void MergeFrom(const UserPersonalDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPersonalDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UserPersonalDetails";
  }
  protected:
  explicit UserPersonalDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fuser_5fdetails_2eproto);
    return ::descriptor_table_Common_2fuser_5fdetails_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UserPersonalDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fuser_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class UserFarmAreaDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UserFarmAreaDetails) */ {
 public:
  inline UserFarmAreaDetails() : UserFarmAreaDetails(nullptr) {}
  virtual ~UserFarmAreaDetails();

  UserFarmAreaDetails(const UserFarmAreaDetails& from);
  UserFarmAreaDetails(UserFarmAreaDetails&& from) noexcept
    : UserFarmAreaDetails() {
    *this = ::std::move(from);
  }

  inline UserFarmAreaDetails& operator=(const UserFarmAreaDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFarmAreaDetails& operator=(UserFarmAreaDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFarmAreaDetails& default_instance();

  static inline const UserFarmAreaDetails* internal_default_instance() {
    return reinterpret_cast<const UserFarmAreaDetails*>(
               &_UserFarmAreaDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserFarmAreaDetails& a, UserFarmAreaDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFarmAreaDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFarmAreaDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFarmAreaDetails* New() const final {
    return CreateMaybeMessage<UserFarmAreaDetails>(nullptr);
  }

  UserFarmAreaDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFarmAreaDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFarmAreaDetails& from);
  void MergeFrom(const UserFarmAreaDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFarmAreaDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UserFarmAreaDetails";
  }
  protected:
  explicit UserFarmAreaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fuser_5fdetails_2eproto);
    return ::descriptor_table_Common_2fuser_5fdetails_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcresFieldNumber = 1,
  };
  // float acres = 1;
  void clear_acres();
  float acres() const;
  void set_acres(float value);
  private:
  float _internal_acres() const;
  void _internal_set_acres(float value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UserFarmAreaDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float acres_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fuser_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class UserWithAreaDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UserWithAreaDetails) */ {
 public:
  inline UserWithAreaDetails() : UserWithAreaDetails(nullptr) {}
  virtual ~UserWithAreaDetails();

  UserWithAreaDetails(const UserWithAreaDetails& from);
  UserWithAreaDetails(UserWithAreaDetails&& from) noexcept
    : UserWithAreaDetails() {
    *this = ::std::move(from);
  }

  inline UserWithAreaDetails& operator=(const UserWithAreaDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserWithAreaDetails& operator=(UserWithAreaDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserWithAreaDetails& default_instance();

  static inline const UserWithAreaDetails* internal_default_instance() {
    return reinterpret_cast<const UserWithAreaDetails*>(
               &_UserWithAreaDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserWithAreaDetails& a, UserWithAreaDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(UserWithAreaDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserWithAreaDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserWithAreaDetails* New() const final {
    return CreateMaybeMessage<UserWithAreaDetails>(nullptr);
  }

  UserWithAreaDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserWithAreaDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserWithAreaDetails& from);
  void MergeFrom(const UserWithAreaDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWithAreaDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UserWithAreaDetails";
  }
  protected:
  explicit UserWithAreaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fuser_5fdetails_2eproto);
    return ::descriptor_table_Common_2fuser_5fdetails_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPersonalDetailsFieldNumber = 1,
    kUserFarmAreaDetailsFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.UserPersonalDetails user_personal_details = 1;
  bool has_user_personal_details() const;
  private:
  bool _internal_has_user_personal_details() const;
  public:
  void clear_user_personal_details();
  const ::farm::nurture::core::contracts::common::UserPersonalDetails& user_personal_details() const;
  ::farm::nurture::core::contracts::common::UserPersonalDetails* release_user_personal_details();
  ::farm::nurture::core::contracts::common::UserPersonalDetails* mutable_user_personal_details();
  void set_allocated_user_personal_details(::farm::nurture::core::contracts::common::UserPersonalDetails* user_personal_details);
  private:
  const ::farm::nurture::core::contracts::common::UserPersonalDetails& _internal_user_personal_details() const;
  ::farm::nurture::core::contracts::common::UserPersonalDetails* _internal_mutable_user_personal_details();
  public:
  void unsafe_arena_set_allocated_user_personal_details(
      ::farm::nurture::core::contracts::common::UserPersonalDetails* user_personal_details);
  ::farm::nurture::core::contracts::common::UserPersonalDetails* unsafe_arena_release_user_personal_details();

  // .farm.nurture.core.contracts.common.UserFarmAreaDetails user_farm_area_details = 2;
  bool has_user_farm_area_details() const;
  private:
  bool _internal_has_user_farm_area_details() const;
  public:
  void clear_user_farm_area_details();
  const ::farm::nurture::core::contracts::common::UserFarmAreaDetails& user_farm_area_details() const;
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* release_user_farm_area_details();
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* mutable_user_farm_area_details();
  void set_allocated_user_farm_area_details(::farm::nurture::core::contracts::common::UserFarmAreaDetails* user_farm_area_details);
  private:
  const ::farm::nurture::core::contracts::common::UserFarmAreaDetails& _internal_user_farm_area_details() const;
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* _internal_mutable_user_farm_area_details();
  public:
  void unsafe_arena_set_allocated_user_farm_area_details(
      ::farm::nurture::core::contracts::common::UserFarmAreaDetails* user_farm_area_details);
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* unsafe_arena_release_user_farm_area_details();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UserWithAreaDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::UserPersonalDetails* user_personal_details_;
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* user_farm_area_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fuser_5fdetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserPersonalDetails

// string first_name = 1;
inline void UserPersonalDetails::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& UserPersonalDetails::first_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
  return _internal_first_name();
}
inline void UserPersonalDetails::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
}
inline std::string* UserPersonalDetails::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& UserPersonalDetails::_internal_first_name() const {
  return first_name_.Get();
}
inline void UserPersonalDetails::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserPersonalDetails::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
}
inline void UserPersonalDetails::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
}
inline void UserPersonalDetails::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
}
inline std::string* UserPersonalDetails::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserPersonalDetails::release_first_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPersonalDetails::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserPersonalDetails.first_name)
}

// string last_name = 2;
inline void UserPersonalDetails::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& UserPersonalDetails::last_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
  return _internal_last_name();
}
inline void UserPersonalDetails::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
}
inline std::string* UserPersonalDetails::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& UserPersonalDetails::_internal_last_name() const {
  return last_name_.Get();
}
inline void UserPersonalDetails::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserPersonalDetails::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
}
inline void UserPersonalDetails::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
}
inline void UserPersonalDetails::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
}
inline std::string* UserPersonalDetails::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserPersonalDetails::release_last_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPersonalDetails::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserPersonalDetails.last_name)
}

// string email = 3;
inline void UserPersonalDetails::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserPersonalDetails::email() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserPersonalDetails.email)
  return _internal_email();
}
inline void UserPersonalDetails::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserPersonalDetails.email)
}
inline std::string* UserPersonalDetails::mutable_email() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserPersonalDetails.email)
  return _internal_mutable_email();
}
inline const std::string& UserPersonalDetails::_internal_email() const {
  return email_.Get();
}
inline void UserPersonalDetails::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserPersonalDetails::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.UserPersonalDetails.email)
}
inline void UserPersonalDetails::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.UserPersonalDetails.email)
}
inline void UserPersonalDetails::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.UserPersonalDetails.email)
}
inline std::string* UserPersonalDetails::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserPersonalDetails::release_email() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserPersonalDetails.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPersonalDetails::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserPersonalDetails.email)
}

// -------------------------------------------------------------------

// UserFarmAreaDetails

// float acres = 1;
inline void UserFarmAreaDetails::clear_acres() {
  acres_ = 0;
}
inline float UserFarmAreaDetails::_internal_acres() const {
  return acres_;
}
inline float UserFarmAreaDetails::acres() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserFarmAreaDetails.acres)
  return _internal_acres();
}
inline void UserFarmAreaDetails::_internal_set_acres(float value) {
  
  acres_ = value;
}
inline void UserFarmAreaDetails::set_acres(float value) {
  _internal_set_acres(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserFarmAreaDetails.acres)
}

// -------------------------------------------------------------------

// UserWithAreaDetails

// .farm.nurture.core.contracts.common.UserPersonalDetails user_personal_details = 1;
inline bool UserWithAreaDetails::_internal_has_user_personal_details() const {
  return this != internal_default_instance() && user_personal_details_ != nullptr;
}
inline bool UserWithAreaDetails::has_user_personal_details() const {
  return _internal_has_user_personal_details();
}
inline void UserWithAreaDetails::clear_user_personal_details() {
  if (GetArena() == nullptr && user_personal_details_ != nullptr) {
    delete user_personal_details_;
  }
  user_personal_details_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::UserPersonalDetails& UserWithAreaDetails::_internal_user_personal_details() const {
  const ::farm::nurture::core::contracts::common::UserPersonalDetails* p = user_personal_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::UserPersonalDetails&>(
      ::farm::nurture::core::contracts::common::_UserPersonalDetails_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::UserPersonalDetails& UserWithAreaDetails::user_personal_details() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserWithAreaDetails.user_personal_details)
  return _internal_user_personal_details();
}
inline void UserWithAreaDetails::unsafe_arena_set_allocated_user_personal_details(
    ::farm::nurture::core::contracts::common::UserPersonalDetails* user_personal_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_personal_details_);
  }
  user_personal_details_ = user_personal_details;
  if (user_personal_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UserWithAreaDetails.user_personal_details)
}
inline ::farm::nurture::core::contracts::common::UserPersonalDetails* UserWithAreaDetails::release_user_personal_details() {
  
  ::farm::nurture::core::contracts::common::UserPersonalDetails* temp = user_personal_details_;
  user_personal_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::UserPersonalDetails* UserWithAreaDetails::unsafe_arena_release_user_personal_details() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserWithAreaDetails.user_personal_details)
  
  ::farm::nurture::core::contracts::common::UserPersonalDetails* temp = user_personal_details_;
  user_personal_details_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::UserPersonalDetails* UserWithAreaDetails::_internal_mutable_user_personal_details() {
  
  if (user_personal_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::UserPersonalDetails>(GetArena());
    user_personal_details_ = p;
  }
  return user_personal_details_;
}
inline ::farm::nurture::core::contracts::common::UserPersonalDetails* UserWithAreaDetails::mutable_user_personal_details() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserWithAreaDetails.user_personal_details)
  return _internal_mutable_user_personal_details();
}
inline void UserWithAreaDetails::set_allocated_user_personal_details(::farm::nurture::core::contracts::common::UserPersonalDetails* user_personal_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_personal_details_;
  }
  if (user_personal_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_personal_details);
    if (message_arena != submessage_arena) {
      user_personal_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_personal_details, submessage_arena);
    }
    
  } else {
    
  }
  user_personal_details_ = user_personal_details;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserWithAreaDetails.user_personal_details)
}

// .farm.nurture.core.contracts.common.UserFarmAreaDetails user_farm_area_details = 2;
inline bool UserWithAreaDetails::_internal_has_user_farm_area_details() const {
  return this != internal_default_instance() && user_farm_area_details_ != nullptr;
}
inline bool UserWithAreaDetails::has_user_farm_area_details() const {
  return _internal_has_user_farm_area_details();
}
inline void UserWithAreaDetails::clear_user_farm_area_details() {
  if (GetArena() == nullptr && user_farm_area_details_ != nullptr) {
    delete user_farm_area_details_;
  }
  user_farm_area_details_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::UserFarmAreaDetails& UserWithAreaDetails::_internal_user_farm_area_details() const {
  const ::farm::nurture::core::contracts::common::UserFarmAreaDetails* p = user_farm_area_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::UserFarmAreaDetails&>(
      ::farm::nurture::core::contracts::common::_UserFarmAreaDetails_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::UserFarmAreaDetails& UserWithAreaDetails::user_farm_area_details() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserWithAreaDetails.user_farm_area_details)
  return _internal_user_farm_area_details();
}
inline void UserWithAreaDetails::unsafe_arena_set_allocated_user_farm_area_details(
    ::farm::nurture::core::contracts::common::UserFarmAreaDetails* user_farm_area_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_farm_area_details_);
  }
  user_farm_area_details_ = user_farm_area_details;
  if (user_farm_area_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UserWithAreaDetails.user_farm_area_details)
}
inline ::farm::nurture::core::contracts::common::UserFarmAreaDetails* UserWithAreaDetails::release_user_farm_area_details() {
  
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* temp = user_farm_area_details_;
  user_farm_area_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::UserFarmAreaDetails* UserWithAreaDetails::unsafe_arena_release_user_farm_area_details() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UserWithAreaDetails.user_farm_area_details)
  
  ::farm::nurture::core::contracts::common::UserFarmAreaDetails* temp = user_farm_area_details_;
  user_farm_area_details_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::UserFarmAreaDetails* UserWithAreaDetails::_internal_mutable_user_farm_area_details() {
  
  if (user_farm_area_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::UserFarmAreaDetails>(GetArena());
    user_farm_area_details_ = p;
  }
  return user_farm_area_details_;
}
inline ::farm::nurture::core::contracts::common::UserFarmAreaDetails* UserWithAreaDetails::mutable_user_farm_area_details() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UserWithAreaDetails.user_farm_area_details)
  return _internal_mutable_user_farm_area_details();
}
inline void UserWithAreaDetails::set_allocated_user_farm_area_details(::farm::nurture::core::contracts::common::UserFarmAreaDetails* user_farm_area_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_farm_area_details_;
  }
  if (user_farm_area_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_farm_area_details);
    if (message_arena != submessage_arena) {
      user_farm_area_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_farm_area_details, submessage_arena);
    }
    
  } else {
    
  }
  user_farm_area_details_ = user_farm_area_details;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UserWithAreaDetails.user_farm_area_details)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fuser_5fdetails_2eproto
