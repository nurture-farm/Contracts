// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/guaranteed_amount_to_premium.proto

#include "Common/guaranteed_amount_to_premium.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class GuaranteedAmountToPremiumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuaranteedAmountToPremium> _instance;
} _GuaranteedAmountToPremium_default_instance_;
class DiscountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Discount> _instance;
} _Discount_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Discount_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Discount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto}, {}};

static void InitDefaultsscc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_GuaranteedAmountToPremium_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::GuaranteedAmountToPremium();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto}, {
      &scc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GuaranteedAmountToPremium, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GuaranteedAmountToPremium, guaranteedamount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GuaranteedAmountToPremium, discount_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GuaranteedAmountToPremium, premiumamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Discount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Discount, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Discount, discountedprice_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Discount, discountinpercentage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::GuaranteedAmountToPremium)},
  { 8, -1, sizeof(::farm::nurture::core::contracts::common::Discount)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_GuaranteedAmountToPremium_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Discount_default_instance_),
};

const char descriptor_table_protodef_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)Common/guaranteed_amount_to_premium.pr"
  "oto\022\"farm.nurture.core.contracts.common\""
  "\214\001\n\031GuaranteedAmountToPremium\022\030\n\020guarant"
  "eedAmount\030\001 \001(\001\022>\n\010discount\030\002 \001(\0132,.farm"
  ".nurture.core.contracts.common.Discount\022"
  "\025\n\rpremiumAmount\030\003 \001(\001\"M\n\010Discount\022\n\n\002id"
  "\030\001 \001(\003\022\027\n\017discountedPrice\030\002 \001(\001\022\034\n\024disco"
  "untInPercentage\030\003 \001(\001BR\n\"farm.nurture.co"
  "re.contracts.commonP\001Z\'code.nurture.farm"
  "/Core/Contracts/Common\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_sccs[2] = {
  &scc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base,
  &scc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto = {
  false, false, descriptor_table_protodef_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto, "Common/guaranteed_amount_to_premium.proto", 393,
  &descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_once, descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_sccs, descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto::offsets,
  file_level_metadata_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto, 2, file_level_enum_descriptors_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto, file_level_service_descriptors_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class GuaranteedAmountToPremium::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Discount& discount(const GuaranteedAmountToPremium* msg);
};

const ::farm::nurture::core::contracts::common::Discount&
GuaranteedAmountToPremium::_Internal::discount(const GuaranteedAmountToPremium* msg) {
  return *msg->discount_;
}
GuaranteedAmountToPremium::GuaranteedAmountToPremium(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
}
GuaranteedAmountToPremium::GuaranteedAmountToPremium(const GuaranteedAmountToPremium& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_discount()) {
    discount_ = new ::farm::nurture::core::contracts::common::Discount(*from.discount_);
  } else {
    discount_ = nullptr;
  }
  ::memcpy(&guaranteedamount_, &from.guaranteedamount_,
    static_cast<size_t>(reinterpret_cast<char*>(&premiumamount_) -
    reinterpret_cast<char*>(&guaranteedamount_)) + sizeof(premiumamount_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
}

void GuaranteedAmountToPremium::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&discount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&premiumamount_) -
      reinterpret_cast<char*>(&discount_)) + sizeof(premiumamount_));
}

GuaranteedAmountToPremium::~GuaranteedAmountToPremium() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuaranteedAmountToPremium::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete discount_;
}

void GuaranteedAmountToPremium::ArenaDtor(void* object) {
  GuaranteedAmountToPremium* _this = reinterpret_cast< GuaranteedAmountToPremium* >(object);
  (void)_this;
}
void GuaranteedAmountToPremium::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuaranteedAmountToPremium::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuaranteedAmountToPremium& GuaranteedAmountToPremium::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuaranteedAmountToPremium_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base);
  return *internal_default_instance();
}


void GuaranteedAmountToPremium::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && discount_ != nullptr) {
    delete discount_;
  }
  discount_ = nullptr;
  ::memset(&guaranteedamount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&premiumamount_) -
      reinterpret_cast<char*>(&guaranteedamount_)) + sizeof(premiumamount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuaranteedAmountToPremium::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double guaranteedAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          guaranteedamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Discount discount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_discount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double premiumAmount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          premiumamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuaranteedAmountToPremium::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double guaranteedAmount = 1;
  if (!(this->guaranteedamount() <= 0 && this->guaranteedamount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_guaranteedamount(), target);
  }

  // .farm.nurture.core.contracts.common.Discount discount = 2;
  if (this->has_discount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::discount(this), target, stream);
  }

  // double premiumAmount = 3;
  if (!(this->premiumamount() <= 0 && this->premiumamount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_premiumamount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  return target;
}

size_t GuaranteedAmountToPremium::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Discount discount = 2;
  if (this->has_discount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discount_);
  }

  // double guaranteedAmount = 1;
  if (!(this->guaranteedamount() <= 0 && this->guaranteedamount() >= 0)) {
    total_size += 1 + 8;
  }

  // double premiumAmount = 3;
  if (!(this->premiumamount() <= 0 && this->premiumamount() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuaranteedAmountToPremium::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  const GuaranteedAmountToPremium* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuaranteedAmountToPremium>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
    MergeFrom(*source);
  }
}

void GuaranteedAmountToPremium::MergeFrom(const GuaranteedAmountToPremium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_discount()) {
    _internal_mutable_discount()->::farm::nurture::core::contracts::common::Discount::MergeFrom(from._internal_discount());
  }
  if (!(from.guaranteedamount() <= 0 && from.guaranteedamount() >= 0)) {
    _internal_set_guaranteedamount(from._internal_guaranteedamount());
  }
  if (!(from.premiumamount() <= 0 && from.premiumamount() >= 0)) {
    _internal_set_premiumamount(from._internal_premiumamount());
  }
}

void GuaranteedAmountToPremium::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuaranteedAmountToPremium::CopyFrom(const GuaranteedAmountToPremium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.GuaranteedAmountToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuaranteedAmountToPremium::IsInitialized() const {
  return true;
}

void GuaranteedAmountToPremium::InternalSwap(GuaranteedAmountToPremium* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuaranteedAmountToPremium, premiumamount_)
      + sizeof(GuaranteedAmountToPremium::premiumamount_)
      - PROTOBUF_FIELD_OFFSET(GuaranteedAmountToPremium, discount_)>(
          reinterpret_cast<char*>(&discount_),
          reinterpret_cast<char*>(&other->discount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuaranteedAmountToPremium::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Discount::_Internal {
 public:
};

Discount::Discount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Discount)
}
Discount::Discount(const Discount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&discountinpercentage_) -
    reinterpret_cast<char*>(&id_)) + sizeof(discountinpercentage_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Discount)
}

void Discount::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&discountinpercentage_) -
      reinterpret_cast<char*>(&id_)) + sizeof(discountinpercentage_));
}

Discount::~Discount() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Discount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Discount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Discount::ArenaDtor(void* object) {
  Discount* _this = reinterpret_cast< Discount* >(object);
  (void)_this;
}
void Discount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Discount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Discount& Discount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Discount_Common_2fguaranteed_5famount_5fto_5fpremium_2eproto.base);
  return *internal_default_instance();
}


void Discount::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Discount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discountinpercentage_) -
      reinterpret_cast<char*>(&id_)) + sizeof(discountinpercentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Discount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double discountedPrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          discountedprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double discountInPercentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          discountinpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Discount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Discount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // double discountedPrice = 2;
  if (!(this->discountedprice() <= 0 && this->discountedprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_discountedprice(), target);
  }

  // double discountInPercentage = 3;
  if (!(this->discountinpercentage() <= 0 && this->discountinpercentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_discountinpercentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Discount)
  return target;
}

size_t Discount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Discount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // double discountedPrice = 2;
  if (!(this->discountedprice() <= 0 && this->discountedprice() >= 0)) {
    total_size += 1 + 8;
  }

  // double discountInPercentage = 3;
  if (!(this->discountinpercentage() <= 0 && this->discountinpercentage() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Discount)
  GOOGLE_DCHECK_NE(&from, this);
  const Discount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Discount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Discount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Discount)
    MergeFrom(*source);
  }
}

void Discount::MergeFrom(const Discount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Discount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.discountedprice() <= 0 && from.discountedprice() >= 0)) {
    _internal_set_discountedprice(from._internal_discountedprice());
  }
  if (!(from.discountinpercentage() <= 0 && from.discountinpercentage() >= 0)) {
    _internal_set_discountinpercentage(from._internal_discountinpercentage());
  }
}

void Discount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Discount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discount::CopyFrom(const Discount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Discount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discount::IsInitialized() const {
  return true;
}

void Discount::InternalSwap(Discount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Discount, discountinpercentage_)
      + sizeof(Discount::discountinpercentage_)
      - PROTOBUF_FIELD_OFFSET(Discount, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Discount::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::GuaranteedAmountToPremium* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::GuaranteedAmountToPremium >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::GuaranteedAmountToPremium >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Discount* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Discount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Discount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
