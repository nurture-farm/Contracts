// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/enums.proto

#include "Common/enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2fenums_2eproto[138];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022Common/enums.proto\022\"farm.nurture.core."
  "contracts.common*4\n\tEventType\022\017\n\013NO_WORK"
  "FLOW\020\000\022\t\n\005EVENT\020\001\022\013\n\007SERVICE\020\002*\236\003\n\013Booki"
  "ngType\022\016\n\nNO_BOOKING\020\000\022\020\n\014FARM_SERVICE\020\001"
  "\022\020\n\014VISIT_FARMER\020\002\022\030\n\024SOIL_TESTING_BOOKI"
  "NG\020\003\022\022\n\016ORCHID_BOOKING\020\004\022\026\n\022PUSA_SPRAY_B"
  "OOKING\020\005\022\035\n\031GROUNDNUT_HARVEST_BOOKING\020\006\022"
  "\032\n\026SEED_TREATMENT_BOOKING\020\007\022\032\n\026POTATO_PL"
  "ANTER_BOOKING\020\010\022\026\n\022CULTIVATOR_BOOKING\020\t\022"
  "\027\n\023DISC_HARROW_BOOKING\020\n\022\025\n\021ROTAVATOR_BO"
  "OKING\020\013\022\025\n\021MB_PLOUGH_BOOKING\020\014\022(\n$TRACK_"
  "TYPE_COMBINE_HARVESTER_BOOKING\020\r\022\035\n\031COMB"
  "INE_HARVESTER_BOOKING\020\016\022\026\n\022SEED_DRILL_BO"
  "OKING\020\017*\254\003\n\013ServiceType\022\016\n\nNO_SERVICE\020\000\022"
  "\n\n\006SOWING\020\001\022\014\n\010SPRAYING\020\002\022\016\n\nHARVESTING\020"
  "\003\022\032\n\026SOIL_SAMPLE_COLLECTION\020\004\022\030\n\024SOIL_TE"
  "STING_SERVICE\020\005\022\026\n\022PUSA_SPRAY_SERVICE\020\006\022"
  "\035\n\031GROUNDNUT_HARVEST_SERVICE\020\007\022\032\n\026SEED_T"
  "REATMENT_SERVICE\020\010\022\032\n\026POTATO_PLANTER_SER"
  "VICE\020\t\022\026\n\022CULTIVATOR_SERVICE\020\n\022\027\n\023DISC_H"
  "ARROW_SERVICE\020\013\022\025\n\021ROTAVATOR_SERVICE\020\014\022\025"
  "\n\021MB_PLOUGH_SERVICE\020\r\022(\n$TRACK_TYPE_COMB"
  "INE_HARVESTER_SERVICE\020\016\022\035\n\031COMBINE_HARVE"
  "STER_SERVICE\020\017\022\026\n\022SEED_DRILL_SERVICE\020\020*\342"
  "\003\n\010WorkType\022\020\n\014NO_WORK_TYPE\020\000\022#\n\037OPERATO"
  "R_SOIL_SAMPLE_COLLECTION\020\001\022\027\n\023OPTICS_SOI"
  "L_TESTING\020\002\022\021\n\rTRACTOR_SPRAY\020\003\022\017\n\013DRONE_"
  "SPRAY\020\004\022\022\n\016VERTICAL_SPRAY\020\006\022\020\n\014HARVEST_W"
  "ORK\020\007\022\032\n\026HARVESTER_DRIVING_WORK\020\010\022\026\n\022TRA"
  "CTOR_PUSA_SPRAY\020\t\022\034\n\030SEED_TREATMENT_WORK"
  "_TYPE\020\n\022\034\n\030POTATO_PLANTER_WORK_TYPE\020\013\022\030\n"
  "\024CULTIVATOR_WORK_TYPE\020\014\022\031\n\025DISC_HARROW_W"
  "ORK_TYPE\020\r\022\027\n\023ROTAVATOR_WORK_TYPE\020\016\022\027\n\023M"
  "B_PLOUGH_WORK_TYPE\020\017\022*\n&TRACK_TYPE_COMBI"
  "NE_HARVESTER_WORK_TYPE\020\020\022\037\n\033COMBINE_HARV"
  "ESTER_WORK_TYPE\020\021\022\030\n\024SEED_DRILL_WORK_TYP"
  "E\020\022*8\n\tWorkClass\022\021\n\rNO_WORK_CLASS\020\000\022\030\n\024I"
  "NDIAN_TRACTOR_SPRAY\020\001*B\n\014ServiceClass\022\024\n"
  "\020NO_SERVICE_CLASS\020\000\022\034\n\030OPERATOR_MACHINE_"
  "SERVICE\020\001*=\n\010UnitType\022\020\n\014NO_UNIT_TYPE\020\000\022"
  "\016\n\nUNIT_ACRES\020\001\022\017\n\013UNIT_LITERS\020\002*\'\n\017Prod"
  "uctSKUClass\022\024\n\020PRODUCT_NO_CLASS\020\000*%\n\016Pro"
  "ductSKUType\022\023\n\017PRODUCT_NO_TYPE\020\000*g\n\tVisi"
  "tType\022\014\n\010NO_EVENT\020\000\022\020\n\014SOIL_TESTING\020\001\022\020\n"
  "\014CROP_TESTING\020\002\022\027\n\023FARMER_REGISTRATION\020\003"
  "\022\017\n\013FARMER_DEMO\020\004*M\n\013EventReason\022\023\n\017NO_E"
  "VENT_REASON\020\000\022\r\n\tHERBICIDE\020\001\022\r\n\tPESTICID"
  "E\020\002\022\013\n\007WEATHER\020\003*\243\007\n\017EventUpdateType\022\r\n\t"
  "NO_UPDATE\020\000\022\027\n\023EVENT_UPDATE_MODIFY\020\002\022\027\n\023"
  "EVENT_UPDATE_CANCEL\020\003\022 \n\034EVENT_UPDATE_OP"
  "ERATOR_ACCEPT\020\004\022\036\n\032EVENT_UPDATE_OPERATOR"
  "_DENY\020\005\022\036\n\032EVENT_UPDATE_SCHEDULE_TIME\020\001\022"
  "\036\n\032EVENT_UPDATE_SCHEDULE_AREA\020\006\022#\n\037EVENT"
  "_UPDATE_SCHEDULE_AREA_TIME\020\014\022\035\n\031EVENT_UP"
  "DATE_REQUEST_TIME\020\022\022\035\n\031EVENT_UPDATE_REQU"
  "EST_AREA\020\023\022\"\n\036EVENT_UPDATE_REQUEST_AREA_"
  "TIME\020\024\022\037\n\033EVENT_UPDATE_ACTOR_ASSIGNED\020\007\022"
  "\036\n\032EVENT_UPDATE_ACTOR_REMOVED\020\010\022\035\n\031EVENT"
  "_UPDATE_SERVICE_AREA\020\t\022\"\n\036EVENT_UPDATE_S"
  "ERVICE_AREA_TIME\020\n\022\035\n\031EVENT_UPDATE_SERVI"
  "CE_TIME\020\013\022\036\n\032EVENT_UPDATE_SERVICE_START\020"
  "\r\022\036\n\032EVENT_UPDATE_SERVICE_PAUSE\020\016\022\037\n\033EVE"
  "NT_UPDATE_SERVICE_RESUME\020\017\022\035\n\031EVENT_UPDA"
  "TE_SERVICE_DONE\020\020\022\"\n\036EVENT_UPDATE_SERVIC"
  "E_COMPLETED\020\021\022\036\n\032EVENT_UPDATE_CAP_AVAILA"
  "BLE\020\025\022 \n\034EVENT_UPDATE_CAP_UNAVAILABLE\020\026\022"
  ",\n(EVENT_UPDATE_SAMPLE_COLLECTION_COMPLE"
  "TED\020\027\022#\n\037EVENT_UPDATE_DELIVERY_COMPLETED"
  "\020\030\022$\n EVENT_UPDATE_FARM_SCAN_COMPLETED\020\031"
  "\022\"\n\036EVENT_UPDATE_PAYMENT_COLLECTED\020\032\022 \n\034"
  "EVENT_UPDATE_SERVICE_STOPPED\020\033*\355\005\n\tActor"
  "Type\022\014\n\010NO_ACTOR\020\000\022\n\n\006FARMER\020\001\022\014\n\010OPERAT"
  "OR\020\002\022\021\n\rFIELD_OFFICER\020\003\022 \n\034BUSINESS_DEVE"
  "LOPMENT_OFFICER\020\004\022\021\n\rSUPPORT_AGENT\020\005\022\030\n\024"
  "ADARSH_KRISHI_CENTER\020\006\022\025\n\021EXTENSION_OFFI"
  "CER\020\007\022\025\n\021EXTENSION_MANAGER\020\010\022\020\n\014CLUSTER_"
  "HEAD\020\t\022\013\n\007MACHINE\020\n\022\n\n\006SYSTEM\020*\022\014\n\010RETAI"
  "LER\020\016\022\016\n\nTECHNICIAN\020\017\022\017\n\013COORDINATOR\020\020\022\033"
  "\n\027ASSISTANT_STATE_MANAGER\020\021\022\016\n\nTEST_ACTO"
  "R\020\022\022\022\n\016LAB_TECHNICIAN\020\023\022\n\n\006GROWER\020\024\022\034\n\030S"
  "ERVICE_BOOKING_INSIGHTS\020e\022\023\n\017SHAKTIMAN_A"
  "DMIN\020f\022\024\n\020CLUSTER_INCHARGE\020g\022\025\n\021TERRITOR"
  "Y_MANAGER\020h\022\033\n\027ZONAL_MARKETING_MANAGER\020i"
  "\022\027\n\023ZONAL_SALES_MANAGER\020j\022\031\n\025ZONAL_SERVI"
  "CE_MANAGER\020k\022*\n&ASSISTANT_BUSINESS_DEVEL"
  "OPMENT_OFFICER\020l\022\023\n\017ASSISTANT_ADMIN\020m\022\024\n"
  "\020RETAILER_OFFICER\020n\022\022\n\016ADMIN_EMPLOYEE\020o\022"
  "\021\n\rUNIMART_ADMIN\020p\022\014\n\010SBU_HEAD\020q\022\013\n\007PART"
  "NER\020r\022\021\n\rUNIMART_F3_FO\020s\022\022\n\016UNIMART_INTE"
  "RN\020t\"\004\010\013\020\013\"\004\010\014\020\014\"\004\010\r\020\r*\250\001\n\rBookingSource"
  "\022\025\n\021NO_BOOKING_SOURCE\020\000\022\016\n\nFARMER_APP\020\001\022"
  "\020\n\014OPERATOR_APP\020\002\022\016\n\nAKC_PORTAL\020\003\022\025\n\021TES"
  "T_PROBE_SOURCE\020\004\022\016\n\nRETAIL_APP\020\005\022\r\n\tADMI"
  "N_APP\020\006\022\030\n\024SYSTEM_AUTO_CREATION\020\007*\206\002\n\nCl"
  "ientType\022\022\n\016NO_CLIENT_TYPE\020\000\022\025\n\021CLIENT_F"
  "ARMER_APP\020\001\022\027\n\023CLIENT_OPERATOR_APP\020\002\022\024\n\020"
  "CLIENT_ADMIN_APP\020\003\022\031\n\025CLIENT_TECHNICIAN_"
  "APP\020\004\022\025\n\021CLIENT_AKC_PORTAL\020\005\022\031\n\025CLIENT_S"
  "YS_ALLOCATION\020\006\022\022\n\016CLIENT_CAPTAIN\020\007\022\016\n\nC"
  "LIENT_MDM\020\010\022\025\n\021CLIENT_RETAIL_APP\020\t\022\026\n\022CL"
  "IENT_PARTNER_APP\020\n*\301\001\n\023BookingStatusReas"
  "on\022\034\n\030NO_BOOKING_STATUS_REASON\020\000\022\033\n\027SOME"
  "_SERVICES_COMPLETED\020\005\022\032\n\026ALL_SERVICES_CO"
  "MPLETED\020\001\022\033\n\027SOME_SERVICES_CANCELLED\020\002\022\032"
  "\n\026ALL_SERVICES_CANCELLED\020\003\022\032\n\026SOME_SERVI"
  "CES_REJECTED\020\004*\237\001\n\rBookingStatus\022\025\n\021NO_B"
  "OOKING_STATUS\020\000\022\023\n\017BOOKING_CREATED\020\001\022\037\n\033"
  "BOOKING_PARTIALLY_COMPLETED\020\002\022\025\n\021BOOKING"
  "_CANCELLED\020\003\022\025\n\021BOOKING_COMPLETED\020\004\022\023\n\017B"
  "OOKING_EXPIRED\020\005*\363\002\n\016WorkflowStatus\022\r\n\tN"
  "O_STATUS\020\000\022\013\n\007CREATED\020\n\022\014\n\010ACCEPTED\020\017\022\r\n"
  "\tCONFIRMED\020\024\022\014\n\010ASSIGNED\020\036\022\r\n\tSCHEDULED\020"
  "(\022\016\n\nDISPATCHED\0202\022\013\n\007STARTED\020<\022\r\n\tCOMPLE"
  "TED\020P\022\023\n\016SERVICE_PAUSED\020\310\001\022\022\n\rSERVICE_BR"
  "EAK\020\334\001\022 \n\033SAMPLE_COLLECTION_COMPLETED\020\373\001"
  "\022\027\n\022DELIVERY_COMPLETED\020\374\001\022\030\n\023FARM_SCAN_C"
  "OMPLETED\020\375\001\022\026\n\021PAYMENT_COLLECTED\020\376\001\022\016\n\tS"
  "USPENDED\020\254\002\022\016\n\tCANCELLED\020\300\002\022\r\n\010REJECTED\020"
  "\244\003\022\014\n\007RESUMED\020\245\003\022\014\n\007STOPPED\020\246\003*\217\016\n\024Workf"
  "lowStatusReason\022\026\n\022NO_WORKFLOW_REASON\020\000\022"
  "\034\n\030REASON_SERVICE_TASK_DONE\020\001\022\034\n\030REASON_"
  "SERVICE_CANCELLED\020\"\022\034\n\030REASON_MACHINE_BR"
  "EAKDOWN\020\002\022\035\n\031REASON_CUSTOMER_NOT_READY\020\003"
  "\022\036\n\032REASON_PRODUCT_NOT_MATCHED\020\004\022\032\n\026REAS"
  "ON_ACTOR_ALLOTMENT\020\005\022\037\n\033REASON_PRODUCT_S"
  "KU_ATTACHED\020\006\022\033\n\027REASON_OPERATOR_REMOVED"
  "\020\007\022\032\n\026REASON_MACHINE_REMOVED\020\010\022)\n%REASON"
  "_PRODUCT_SKU_ATTACHMENT_REMOVED\020\t\022\030\n\024REA"
  "SON_ACTOR_REMOVED\020\n\022\027\n\023REASON_TASK_START"
  "ED\020\013\022\026\n\022REASON_TASK_PAUSED\020\014\022\027\n\023REASON_T"
  "ASK_RESUMED\020\r\022$\n REASON_OPERATOR_FARMER_"
  "CONFIRMED\020\016\022\027\n\023REASON_ACTOR_ON_WAY\020\017\022\030\n\024"
  "REASON_LACK_OF_WATER\020\020\022\026\n\022REASON_BAD_WEA"
  "THER\020\021\022\034\n\030REASON_PESTICIDE_ON_CROP\020\022\022\034\n\030"
  "REASON_HERBICIDE_ON_CROP\020\023\022\031\n\025REASON_LAN"
  "D_NOT_FOUND\020\024\022\031\n\025REASON_CROP_NOT_FOUND\020\025"
  "\022\032\n\026REASON_BOOKING_CREATED\020\026\022\034\n\030REASON_B"
  "OOKING_CANCELLED\020 \022\034\n\030REASON_BOOKING_COM"
  "PLETED\020!\022\035\n\031REASON_TASK_GROUP_REMOVED\020\027\022"
  "\033\n\027REASON_TASK_GROUP_ADDED\020\030\022\035\n\031REASON_T"
  "ASK_GROUP_UPDATED\020\031\022\035\n\031REASON_CAPACITY_A"
  "VAILABLE\020\032\022\037\n\033REASON_CAPACITY_UNAVAILABL"
  "E\020\033\022\033\n\027REASON_CAPACITY_EVICTED\020$\022\"\n\036REAS"
  "ON_PLANNER_ALLOC_AVAILABLE\020\034\022$\n REASON_P"
  "LANNER_ALLOC_UNAVAILABLE\020\035\022\"\n\036REASON_PLA"
  "NNER_DAILY_ALLOTMENT\020\036\022\033\n\027REASON_MANUAL_"
  "ALLOTMENT\020\037\022\030\n\024REASON_UPDATE_FAILED\020%\022\034\n"
  "\030REASON_UNALLOTTED_FAILED\020&\022&\n\"REASON_EV"
  "ICTION_DUE_TO_HIGH_DEMAND\0202\022\035\n\031REASON_ED"
  "IT_LIMIT_CROSSED\020\'\022\026\n\022REASON_BAD_REQUEST"
  "\020(\022!\n\035REASON_BAD_INPUT_REQUEST_TIME\020)\022!\n"
  "\035REASON_BAD_INPUT_REQUEST_AREA\020*\022!\n\035REAS"
  "ON_BAD_INPUT_SERVICE_AREA\020+\022)\n%REASON_MA"
  "CHINE_PREVENTIVE_MAINTENANCE\020,\0225\n1REASON"
  "_MACHINE_PREVENTIVE_MAINTENANCE_RESCHEDU"
  "LED\020-\022\034\n\030REASON_NO_SUPPLY_PRESENT\020G\022\"\n\036R"
  "EASON_MISSING_REQUIRED_ACTORS\020H\022\036\n\032REASO"
  "N_SUPPLY_IN_BREAKDOWN\020I\022\037\n\033REASON_SUPPLY"
  "_CALENDAR_FULL\020J\022-\n)REASON_SUPPLY_GROUP_"
  "INVALID_SKILL_SET_IDS\020K\022\034\n\030REASON_MACHIN"
  "E_CAME_LATE\020Q\022!\n\035REASON_OPERATOR_NOT_REA"
  "CHABLE\020R\022 \n\034REASON_PRODUCT_NOT_AVAILABLE"
  "\020S\022\032\n\026REASON_REQUEST_EXPIRED\020T\022\027\n\023REASON"
  "_FAR_LOCATION\020[\022\027\n\023REASON_TASK_STOPPED\020e"
  "*\373\001\n\024ActorAllotmentStatus\022\023\n\017NO_ALLOT_ST"
  "ATUS\020\000\022\022\n\016ACTOR_ASSIGNED\020\001\022\021\n\rACTOR_REMO"
  "VED\020\n\022\037\n\033ACTOR_REMOVED_BEFORE_ON_WAY\020\013\022\020"
  "\n\014ACTOR_ON_WAY\020\002\022 \n\034ACTOR_REMOVED_BEFORE"
  "_STARTED\020\014\022\021\n\rACTOR_STARTED\020\004\022\035\n\031ACTOR_R"
  "EMOVED_AFTER_START\020\017\022\020\n\014ACTOR_PAUSED\020\005\022\016"
  "\n\nACTOR_DONE\020\006*\342\002\n\032ActorAllotmentStatusR"
  "eason\022\032\n\026NO_ALLOT_STATUS_REASON\020\000\022\025\n\021OPE"
  "RATOR_ASSIGNED\020\001\022\020\n\014AKC_ASSIGNED\020\002\022\024\n\020AC"
  "TOR_REASSIGNED\020\003\022\032\n\026SERVICE_TASK_COMPLET"
  "ED\020\004\022\033\n\027SERVICE_ACTOR_PART_DONE\020\005\022\023\n\017OPE"
  "RATOR_ON_WAY\020\006\022\024\n\020OPERATOR_STARTED\020\007\022\035\n\031"
  "OPERATOR_PAUSED_FOR_WATER\020\010\022\026\n\022OPERATOR_"
  "CANCELLED\020\t\022\024\n\020FARMER_CANCELLED\020\n\022 \n\034OPE"
  "RATOR_OR_FARMER_CANCELLED\020\013\022\026\n\022SUPPLY_UN"
  "AVAILABLE\020\014*\247\001\n\031ProductSKUPurchaseChanne"
  "l\022\027\n\023NO_PURCHASE_CHANNEL\020\000\022\034\n\030PURCHASE_C"
  "HANNEL_UNKNOWN\020\001\022\030\n\024PURCHASE_FROM_DEALER"
  "\020\002\022\032\n\026PURCHASE_FROM_OPERATOR\020\003\022\035\n\031PURCHA"
  "SE_FROM_THIRD_PARTY\020\004*5\n\020ProductSKUDomai"
  "n\022\021\n\rNO_SKU_DOMAIN\020\000\022\016\n\nDOMAIN_UPL\020\001*[\n\027"
  "ProductAttachmentStatus\022\030\n\024NO_ATTACHMENT"
  "_STATUS\020\000\022\024\n\020VERIFIED_SUCCESS\020\001\022\020\n\014FAKE_"
  "PRODUCT\020\002*E\n\010Currency\022\025\n\021NO_CURRENCY_KNO"
  "WN\020\000\022\007\n\003INR\020\001\022\007\n\003USD\020\002\022\007\n\003CAD\020\003\022\007\n\003AUD\020\004"
  "*n\n\nTaskStatus\022\022\n\016NO_TASK_STATUS\020\000\022\020\n\014TA"
  "SK_CREATED\020\001\022\020\n\014TASK_STARTED\020\002\022\022\n\016TASK_C"
  "OMPLETED\020\003\022\024\n\020PARENT_CANCELLED\020\n*\205\001\n\rReq"
  "uestStatus\022\025\n\021NO_REQUEST_STATUS\020\000\022\014\n\007SUC"
  "CESS\020\310\001\022\016\n\tBAD_INPUT\020\220\003\022\016\n\tNOT_FOUND\020\224\003\022"
  "\032\n\025REQUEST_NOT_FULFILLED\020\234\003\022\023\n\016INTERNAL_"
  "ERROR\020\364\003*\210\014\n\023RequestStatusReason\022\034\n\030NO_R"
  "EQUEST_STATUS_REASON\020\000\022\027\n\022DB_NOT_FOUND_E"
  "RROR\020\240\037\022\033\n\026DB_DUPLICATE_KEY_ERROR\020\241\037\022\026\n\021"
  "DB_INTERNAL_ERROR\020\210\'\022\033\n\026REQUEST_PREPARE_"
  "FAILED\020\360.\022\031\n\024RESPONSE_READ_FAILED\020\3306\022\026\n\021"
  "JSON_PARSE_FAILED\020\3316\022\024\n\017WORKFLOW_CLOSED\020"
  "\300>\022\035\n\027DB_CREATE_BOOKING_ERROR\020\320\206\003\022\035\n\027DB_"
  "CREATE_SERVICE_ERROR\020\321\206\003\022%\n\037DB_CREATE_BO"
  "OKING_SERVICE_ERROR\020\322\206\003\022\035\n\027DB_UPDATE_BOO"
  "KING_ERROR\020\264\207\003\022\035\n\027DB_UPDATE_SERVICE_ERRO"
  "R\020\265\207\003\022%\n\037DB_UPDATE_BOOKING_SERVICE_ERROR"
  "\020\266\207\003\022\032\n\024DB_GET_BOOKING_ERROR\020\230\210\003\022\032\n\024DB_G"
  "ET_SERVICE_ERROR\020\231\210\003\022\"\n\034DB_GET_BOOKING_S"
  "ERVICE_ERROR\020\232\210\003\022!\n\033REWARDS_BACKEND_CALL"
  "_FAILED\020\200\211\003\022\037\n\031COMMUNICATION_CALL_FAILED"
  "\020\341\211\003\022\025\n\017SAM_CALL_FAILED\020\305\212\003\022\024\n\016BN_CALL_F"
  "AILED\020\251\213\003\022\025\n\017AFS_CALL_FAILED\020\215\214\003\022\024\n\016PE_C"
  "ALL_FAILED\020\361\214\003\022\025\n\017LMS_CALL_FAILED\020\325\215\003\022\036\n"
  "\030FARM_SERVICE_CALL_FAILED\020\271\216\003\022\034\n\026CROP_MO"
  "DEL_CALL_FAILED\020\235\217\003\022\"\n\034SUPPLY_WORKFLOWS_"
  "CALL_FAILED\020\201\220\003\022#\n\035BOOKING_WORKFLOWS_CAL"
  "L_FAILED\020\202\220\003\022\031\n\023PT_GET_SCORE_FAILED\020\340\324\003\022"
  "!\n\033PT_SCORE_CALCULATION_FAILED\020\341\324\003\022\032\n\024CA"
  "PACITY_UNAVAILABLE\020\360\242\004\022\031\n\023NO_SUPPLY_AVAI"
  "LABLE\020\361\242\004\022)\n#REVERSE_TRANSACTION_EVENT_N"
  "OT_FOUND\020\200\361\004\022$\n\036REQUEST_CHANGE_VALIDITY_"
  "FAILED\020\240\215\006\022\"\n\034REQUEST_TIME_VALIDITY_FAIL"
  "ED\020\301\204=\022\"\n\034REQUEST_AREA_VALIDITY_FAILED\020\302"
  "\204=\022\031\n\023REQUEST_AREA_IS_LOW\020\303\204=\022\032\n\024REQUEST"
  "_TIME_IS_PAST\020\304\204=\022 \n\032REQUEST_TIME_IS_TOO"
  "_FUTURE\020\305\204=\022\033\n\025REQUEST_CHANGE_FAILED\020\306\204="
  "\022\033\n\025REQUEST_UPDATE_FAILED\020\307\204=\022\035\n\027REQUEST"
  "_COMPLETE_FAILED\020\250\215\006\022\033\n\025REQUEST_CANCEL_F"
  "AILED\020\251\215\006\022 \n\032REQUEST_SERVICE_AREA_EMPTY\020"
  "\312\204=\022#\n\035REQUEST_SERVICE_AREA_ID_EMPTY\020\313\204="
  "\022#\n\035REQUEST_SERVICE_AREA_NS_EMPTY\020\314\204=\022#\n"
  "\035REQUEST_DUPLICATE_TRANSACTION\020\341\221C\022 \n\032RE"
  "QUEST_INSUFFICIENT_FUNDS\020\342\221C\022-\n\'CASHBACK"
  "_REQUEST_MONTHLY_LIMIT_EXCEEDED\020\343\221C*I\n\022E"
  "ventReferenceType\022\033\n\027NO_EVENT_REFERENCE_"
  "TYPE\020\000\022\013\n\007PACKAGE\020\001\022\t\n\005SALES\020\002*q\n\nDebugL"
  "evel\022\022\n\016NO_DEBUG_LEVEL\020\000\022\016\n\nPRODUCTION\020\001"
  "\022\t\n\005GAMMA\020\002\022\010\n\004BETA\020\003\022\t\n\005ALPHA\020\004\022\t\n\005STAG"
  "E\020\n\022\007\n\003DEV\020\024\022\013\n\007VERBOSE\020\036*\376\001\n\013TriggerTyp"
  "e\022\016\n\nNO_TRIGGER\020\000\022\025\n\021TRIGGER_ALLOTMENT\020\001"
  "\022\030\n\024TRIGGER_RE_ALLOTMENT\020\002\022\034\n\030TRIGGER_CA"
  "NCEL_ALLOTMENT\020\003\022\034\n\030TRIGGER_APP_NOTIFICA"
  "TION\020\n\022 \n\034TRIGGER_APP_SMS_NOTIFICATION\020\013"
  "\022\017\n\013TRIGGER_SMS\020\014\022\020\n\014TRIGGER_CALL\020\r\022\023\n\017T"
  "RIGGER_BOOKING\020\024\022\030\n\024TRIGGER_QR_CODE_SCAN"
  "\020\036*)\n\016TriggerSubType\022\027\n\023NO_TRIGGER_SUB_T"
  "YPE\020\000*\342\001\n\010TaskType\022\013\n\007NO_TASK\020\000\022\022\n\016ALLOT"
  "MENT_TASK\020\001\022\025\n\021RE_ALLOTMENT_TASK\020\002\022\031\n\025CA"
  "NCEL_ALLOTMENT_TASK\020\003\022\031\n\025APP_NOTIFICATIO"
  "N_TASK\020\n\022\035\n\031APP_SMS_NOTIFICATION_TASK\020\013\022"
  "\014\n\010SMS_TASK\020\014\022\r\n\tCALL_TASK\020\r\022\022\n\016EVENT_CR"
  "EATION\020\024\022\030\n\024PRODUCT_CONFIRMATION\020\036*#\n\013Ta"
  "skSubType\022\024\n\020NO_TASK_SUB_TYPE\020\000*R\n\024Actor"
  "InServiceStatus\022\023\n\017NO_ACTOR_STATUS\020\000\022\021\n\r"
  "ENABLED_ACTOR\020\001\022\022\n\016DISABLED_ACTOR\020\002*i\n\031S"
  "KUProductInServiceStatus\022\031\n\025NO_SKU_PRODU"
  "CT_STATUS\020\000\022\027\n\023ENABLED_SKU_PRODUCT\020\001\022\030\n\024"
  "DISABLED_SKU_PRODUCT\020\002*_\n\rTaskOperation\022"
  "\t\n\005NO_OP\020\000\022\014\n\010TASK_ADD\020\001\022\017\n\013TASK_DELETE\020"
  "\002\022\023\n\017TASK_RESCHEDULE\020\003\022\017\n\013TASK_MODIFY\020\004*"
  "\233\001\n\014TimeSlotType\022\020\n\014NO_TIME_SLOT\020\000\022\025\n\021RE"
  "QUEST_TIME_SLOT\020\001\022\026\n\022SCHEDULE_TIME_SLOT\020"
  "\002\022\025\n\021SERVICE_TIME_SLOT\020\003\022\025\n\021CREATED_TIME"
  "_SLOT\020\004\022\034\n\030SERVER_UPDATED_TIME_SLOT\020\005*\356\003"
  "\n\024ServiceAreaNamespace\022\035\n\031NO_SERVICE_ARE"
  "A_NAMESPACE\020\000\022\034\n\030COMMON_SPRAYER_NAMESPAC"
  "E\020\001\022\025\n\021VILLAGE_NAMESPACE\020\002\022\030\n\024COMMON_STS"
  "_NAMESPACE\020\003\022\035\n\031ORCHID_SPRAYING_NAMESPAC"
  "E\020\004\022\033\n\027PUSA_SPRAYING_NAMESPACE\020\005\022\"\n\036GROU"
  "NDNUT_HARVESTING_NAMESPACE\020\006\022\034\n\030SEED_TRE"
  "ATMENT_NAMESPACE\020\007\022\034\n\030POTATO_PLANTER_NAM"
  "ESPACE\020\010\022\030\n\024CULTIVATOR_NAMESPACE\020\t\022\031\n\025DI"
  "SC_HARROW_NAMESPACE\020\n\022\027\n\023ROTAVATOR_NAMES"
  "PACE\020\013\022\027\n\023MB_PLOUGH_NAMESPACE\020\014\022*\n&TRACK"
  "_TYPE_COMBINE_HARVESTER_NAMESPACE\020\r\022\037\n\033C"
  "OMBINE_HARVESTER_NAMESPACE\020\016\022\030\n\024SEED_DRI"
  "LL_NAMESPACE\020\017*\177\n\014LocationType\022\024\n\020NO_LOC"
  "ATION_TYPE\020\000\022\021\n\rFARM_LOCATION\020\001\022\023\n\017FARME"
  "R_LOCATION\020\002\022\024\n\020UNIMART_LOCATION\020\003\022\033\n\027FA"
  "RMER_VILLAGE_LOCATION\020\004*\\\n\rBookingAction"
  "\022\025\n\021NO_BOOKING_ACTION\020\000\022\031\n\025BOOKING_ACTIO"
  "N_CANCEL\020\001\022\031\n\025BOOKING_ACTION_UPDATE\020\002*\343\013"
  "\n\rServiceAction\022\025\n\021NO_SERVICE_ACTION\020\000\022\031"
  "\n\025SERVICE_ACTION_CREATE\020\001\022\031\n\025SERVICE_ACT"
  "ION_CANCEL\020\003\022\032\n\026SERVICE_ACTION_DETAILS\020\004"
  "\022\035\n\031SERVICE_ACTION_RESCHEDULE\020\005\022\033\n\027SERVI"
  "CE_ACTION_FEEDBACK\020\006\022 \n\034SERVICE_ACTION_A"
  "DD_ALLOTMENT\020\007\022#\n\037SERVICE_ACTION_REMOVE_"
  "ALLOTMENT\020\010\022#\n\037SERVICE_ACTION_CHANGE_ALL"
  "OTMENT\020\t\022\036\n\032SERVICE_ACTION_ADD_PRODUCT\020\016"
  "\022!\n\035SERVICE_ACTION_REMOVE_PRODUCT\020\017\022!\n\035S"
  "ERVICE_ACTION_CHANGE_PRODUCT\020\020\022\"\n\036SERVIC"
  "E_ACTION_UPDATE_REQ_SLOT\020\021\022\"\n\036SERVICE_AC"
  "TION_UPDATE_SCH_SLOT\020\023\022\"\n\036SERVICE_ACTION"
  "_UPDATE_SER_SLOT\020\022\022\"\n\036SERVICE_ACTION_UPD"
  "ATE_REQ_AREA\020\024\022\"\n\036SERVICE_ACTION_UPDATE_"
  "SCH_AREA\020\025\022\"\n\036SERVICE_ACTION_UPDATE_SER_"
  "AREA\020\026\022\031\n\025SERVICE_ACTION_ACCEPT\020\037\022%\n!SER"
  "VICE_ACTION_ADD_ALLOTTED_ACTOR\020 \022(\n$SERV"
  "ICE_ACTION_CHANGE_ALLOTTED_ACTOR\020!\0221\n-SE"
  "RVICE_ACTION_CHANGE_MULTIPLE_ALLOTTED_AC"
  "TOR\020\"\022$\n SERVICE_ACTION_EARLY_UNALLOTMEN"
  "T\020$\022!\n\035SERVICE_ACTION_MAKE_ALLOTMENT\020%\022\031"
  "\n\025SERVICE_ACTION_REJECT\020&\022(\n$SERVICE_ACT"
  "ION_REMOVE_ALLOTTED_ACTOR\020\'\022+\n\'SERVICE_A"
  "CTION_SERVICE_AREA_TIME_UPDATE\020(\022(\n$SERV"
  "ICE_ACTION_UPDATE_ALLOTTED_ACTOR\020)\022\035\n\031SE"
  "RVICE_ACTION_UNALLOTTED\020*\022.\n*SERVICE_ACT"
  "ION_SAMPLE_COLLECTION_COMPLETED\020+\022%\n!SER"
  "VICE_ACTION_DELIVERY_COMPLETED\020,\022&\n\"SERV"
  "ICE_ACTION_FARM_SCAN_COMPLETED\020-\022$\n SERV"
  "ICE_ACTION_PAYMENT_COLLECTED\020.\022\030\n\024SERVIC"
  "E_ACTION_START\020/\022\030\n\024SERVICE_ACTION_PAUSE"
  "\0200\022\032\n\026SERVICE_ACTION_SUSPEND\0201\022\033\n\027SERVIC"
  "E_ACTION_COMPLETE\0202\022\033\n\027SERVICE_ACTION_EV"
  "ICTION\0203\022\031\n\025SERVICE_ACTION_RESUME\0204\022\027\n\023S"
  "ERVICE_ACTION_STOP\0205\022<\n8SERVICE_ACTION_N"
  "O_ALLOTTED_ACTOR_UPDATES_AFTER_ALLOTMENT"
  "\020e\0229\n5SERVICE_ACTION_NO_ALLOTTED_ACTOR_U"
  "PDATES_AFTER_ACCEPT\020f\"\004\010g\020}*^\n\024Communica"
  "tionChannel\022\016\n\nNO_CHANNEL\020\000\022\007\n\003SMS\020\001\022\t\n\005"
  "EMAIL\020\002\022\024\n\020APP_NOTIFICATION\020\003\022\014\n\010WHATSAP"
  "P\020\004*s\n\023CommunicationStatus\022\022\n\016NO_COMM_ST"
  "ATUS\020\000\022\021\n\rCOMM_ACCEPTED\020\001\022\020\n\014COMM_PENDIN"
  "G\020\002\022\022\n\016COMM_DELIVERED\020\003\022\017\n\013COMM_FAILED\020\004"
  "*\260\001\n\031CommunicationFailureCause\022\014\n\010NO_CAU"
  "SE\020\000\022\031\n\025COMM_OPERATOR_FAILURE\020\001\022\035\n\031COMM_"
  "NUMBER_NOT_REACHABLE\020\002\022\031\n\025COMM_NUMBER_NO"
  "T_EXIST\020\003\022\027\n\023COMM_NUMBER_BLOCKED\020\004\022\027\n\023CO"
  "MM_SYSTEM_FAILURE\020\005*\206\002\n\016ResponseStatus\022\026"
  "\n\022NO_RESPONSE_STATUS\020\000\022\016\n\nSUCCESSFUL\020\001\022\t"
  "\n\005ERROR\020\002\022\016\n\nNOT__FOUND\020\003\022\020\n\014ZERO_RESULT"
  "S\020\004\022\r\n\tDUPLICATE\020\005\022\023\n\017LIMIT__EXCEEDED\020\006\022"
  "\023\n\017INVALID_REQUEST\020\007\022\031\n\025TEMPORARILY_SUSP"
  "ENDED\020\010\022\024\n\020OVER_USAGE_LIMIT\020\t\022\022\n\016REQUEST"
  "_DENIED\020\n\022\021\n\rUNKNOWN_ERROR\020\013\022\016\n\nDB_FAILU"
  "RE\020\014*\203\004\n\022ResponseStatusCode\022\033\n\027NO_RESPON"
  "SE_STATUS_CODE\020\000\022\007\n\002OK\020\310\001\022\017\n\nNO_CONTENT\020"
  "\314\001\022\020\n\013BAD_REQUEST\020\220\003\022\021\n\014UNAUTHORIZED\020\221\003\022"
  "\025\n\020ENTITY_NOT_FOUND\020\224\003\022\t\n\004GONE\020\232\003\022\032\n\025INT"
  "ERNAL_SERVER_ERROR\020\364\003\022\016\n\tSQL_ERROR\020\200\004\022\024\n"
  "\017DUPLICATE_ENTRY\020\231\003\022\023\n\016LIMIT_EXCEEDED\020\255\003"
  "\022\033\n\026PROFILE_EXIST_OTP_SENT\020\350\007\022\035\n\030PROFILE"
  "_CREATED_OTP_SENT\020\351\007\022\024\n\017USER_VALIDATION\020"
  "\352\007\022\033\n\026FARMER_PROFILE_CREATED\020\353\007\0221\n,MULTI"
  "PLE_UNIQUE_ACCOUNT_BY_SAME_DEVICE_ERROR\020"
  "\354\007\022\023\n\016USER_NOT_FOUND\020\321\017\022\020\n\013INVALID_OTP\020\322"
  "\017\022\020\n\013OTP_EXPIRED\020\323\017\022\034\n\027USER_ALREADY_REGI"
  "STERED\020\324\017\022\037\n\032INACTIVE_USER_REGISTRATION\020"
  "\325\017*7\n\006Status\022\023\n\017NO_KNOWN_STATUS\020\000\022\n\n\006ACT"
  "IVE\020\001\022\014\n\010INACTIVE\020\002*P\n\016FarmCropStatus\022\027\n"
  "\023NO_FARM_CROP_STATUS\020\000\022\t\n\005SOWED\020\001\022\r\n\tHAR"
  "VESTED\020\002\022\013\n\007DELETED\020\003*2\n\rMediaProvider\022\025"
  "\n\021NO_MEDIA_PROVIDER\020\000\022\n\n\006AWS_S3\020\001*9\n\014Dur"
  "ationUnit\022\024\n\020NO_DURATION_UNIT\020\000\022\010\n\004DAYS\020"
  "\001\022\t\n\005YEARS\020\002*E\n\014DurationType\022\024\n\020NO_DURAT"
  "ION_TYPE\020\000\022\t\n\005SHORT\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004LON"
  "G\020\003*(\n\tScaleType\022\021\n\rNO_SCALE_TYPE\020\000\022\010\n\004B"
  "BCH\020\001*\222\001\n\014LanguageCode\022\024\n\020NO_LANGUAGE_CO"
  "DE\020\000\022\t\n\005EN_US\020\001\022\t\n\005HI_IN\020\002\022\006\n\002GU\020\003\022\006\n\002PA"
  "\020\004\022\006\n\002KA\020\005\022\006\n\002TA\020\006\022\006\n\002TE\020\007\022\006\n\002BN\020\010\022\006\n\002MR"
  "\020\t\022\006\n\002ML\020\n\022\006\n\002KN\020\013\022\006\n\002OD\020\014\022\006\n\002PU\020\r*\244\001\n\nR"
  "ewardType\022\022\n\016NO_REWARD_TYPE\020\000\022\020\n\014REWARD_"
  "POINT\020\001\022\024\n\020HEALTH_INSURANCE\020\002\022\024\n\020PRIORIT"
  "Y_SERVICE\020\003\022\022\n\016FIELD_ADVISORY\020\004\022\032\n\026SPRAY"
  "_SERVICE_DISCOUNT\020\005\022\024\n\020SERVICE_CASHBACK\020"
  "\006*\271\006\n\016UserActionType\022\027\n\023NO_USER_ACTION_T"
  "YPE\020\000\022\030\n\024PRODUCT_SCAN_SUCCESS\020\001\022\030\n\024PRODU"
  "CT_SCAN_FAILURE\020\002\022\025\n\021REQUESTED_SERVICE\020\003"
  "\022\025\n\021CANCELLED_SERVICE\020\004\022\025\n\021COMPLETED_SER"
  "VICE\020\005\022\033\n\027PROUCT_SCAN_ZERO_POINTS\020\006\022\013\n\007S"
  "IGN_UP\020\007\022\024\n\020SURVEY_COMPLETED\020\010\022\022\n\016PACKAG"
  "E_SIGNUP\020\t\022\036\n\032PARTIAL_REDEMPTION_SERVICE"
  "\020\n\022\026\n\022FIRST_REWARD_POINT\020\013\022\024\n\020CASHBACK_R"
  "EQUEST\020\014\022\025\n\021USER_REGISTRATION\020\r\022\014\n\010ADD_F"
  "ARM\020\016\022\024\n\020ADD_BANK_DETAILS\020\017\022\026\n\022PRODUCT_G"
  "ROUP_SCAN\020\020\022\020\n\014BOOK_SERVICE\020\021\022\032\n\026PRODUCT"
  "_SCAN_NOT_FOUND\020\022\022\036\n\032PRODUCT_SCAN_MONTHL"
  "Y_LIMIT\020\023\022\035\n\031PRODUCT_SCAN_WEEKLY_LIMIT\020\024"
  "\022\033\n\027PRODUCT_ALREADY_SCANNED\020\025\022\030\n\024PROMOTI"
  "ONAL_ACTIVITY\020\026\022\'\n#SEED_TREATMENT_MACHIN"
  "E_SCAN_FAILURE\020\027\022\'\n#SEED_TREATMENT_MACHI"
  "NE_SCAN_SUCCESS\020\030\022+\n\'SEED_TREATMENT_MACH"
  "INE_SCAN_ZERO_POINTS\020\031\022)\n%SEED_TREATMENT"
  "_MACHINE_SCAN_NOT_FOUND\020\032\022\020\n\014PRODUCT_SCA"
  "N\020\033\022\027\n\023DOCTOR_CALL_REQUEST\020\034\022\022\n\016SEGMENT_"
  "CHANGE\020\035\022\023\n\017ORDER_DELIVERED\020\036*\254\001\n\005AppID\022"
  "\r\n\tNO_APP_ID\020\000\022\n\n\006NF_SMS\020\001\022\013\n\007UNIMART\020\002\022"
  "\022\n\016AFS_TECHNICIAN\020\003\022\r\n\tAFS_ADMIN\020\004\022\020\n\014AF"
  "S_OPERATOR\020\005\022\r\n\tNF_FARMER\020\006\022\021\n\rNF_FARMER"
  "_IOS\020\007\022\017\n\013NF_RETAILER\020\010\022\023\n\017AFS_COORDINAT"
  "OR\020\t*0\n\007AppType\022\017\n\013NO_APP_TYPE\020\000\022\013\n\007ANDR"
  "OID\020\001\022\007\n\003IOS\020\002*A\n\014HandoverType\022\024\n\020NO_HAN"
  "DOVER_TYPE\020\000\022\r\n\tINITIATED\020\001\022\014\n\010COMPLETE\020"
  "\002*@\n\016HandoverStatus\022\026\n\022NO_HANDOVER_STATU"
  "S\020\000\022\010\n\004SENT\020\001\022\014\n\010VERIFIED\020\002*s\n\022MachineEv"
  "entAction\022\033\n\027NO_MACHINE_EVENT_ACTION\020\000\022\037"
  "\n\033MACHINE_EVENT_ACTION_CREATE\020\001\022\037\n\033MACHI"
  "NE_EVENT_ACTION_UPDATE\020\002*C\n\014ScheduleType"
  "\022\024\n\020NO_SCHEDULE_TYPE\020\000\022\014\n\010SCHEDULE\020\001\022\017\n\013"
  "RESCHCEDULE\020\002*[\n\nUserStatus\022\020\n\014UNREGISTE"
  "RED\020\000\022\016\n\nREGISTERED\020\001\022\013\n\007BLOCKED\020\002\022\036\n\032EM"
  "AIL_VERIFICATION_PENDING\020\003*)\n\006Gender\022\010\n\004"
  "MALE\020\000\022\n\n\006FEMALE\020\001\022\t\n\005OTHER\020\002*\"\n\013Address"
  "Type\022\010\n\004HOME\020\000\022\t\n\005STORE\020\001*L\n\rGeographyTy"
  "pe\022\010\n\004ZONE\020\000\022\n\n\006REGION\020\001\022\014\n\010DISTRICT\020\002\022\n"
  "\n\006TEHSIL\020\003\022\013\n\007VILLAGE\020\004*f\n\014DocumentType\022"
  "\014\n\010PAN_CARD\020\000\022\017\n\013AADHAR_CARD\020\001\022\017\n\013PROFIL"
  "E_PIC\020\002\022\023\n\017DRIVING_LICENSE\020\003\022\021\n\rCANCEL_C"
  "HEQUE\020\004*]\n\030BookingEligibilityStatus\022&\n\"U"
  "NKNOWN_BOOKING_ELIGIBILITY_STATUS\020\000\022\013\n\007E"
  "NABLED\020\001\022\014\n\010DISABLED\020\002*\200\001\n\023BookingSchedu"
  "leType\022\034\n\030NO_BOOKING_SCHEDULE_TYPE\020\000\022\n\n\006"
  "HOURLY\020\001\022\t\n\005DAILY\020\002\022\n\n\006WEEKLY\020\003\022\013\n\007MONTH"
  "LY\020\004\022\r\n\tQUARTERLY\020\005\022\014\n\010ANNUALLY\020\006*>\n\020Boo"
  "kingNameSpace\022\030\n\024NO_BOOKING_NAMESPACE\020\000\022"
  "\020\n\014NURTURE_FARM\020\001*$\n\014BookingClass\022\024\n\020NO_"
  "BOOKING_CLASS\020\000*\233\001\n\010Language\022\017\n\013NO_LANGU"
  "AGE\020\000\022\013\n\007ENGLISH\020\001\022\t\n\005HINDI\020\002\022\014\n\010GUJARAT"
  "I\020\003\022\013\n\007PUNJABI\020\004\022\013\n\007KANNADA\020\005\022\t\n\005TAMIL\020\006"
  "\022\n\n\006TELUGU\020\007\022\r\n\tMALAYALAM\020\010\022\013\n\007BENGALI\020\t"
  "\022\013\n\007MARATHI\020\n*3\n\007Country\022\016\n\nNO_COUNTRY\020\000"
  "\022\t\n\005INDIA\020\001\022\r\n\tAUSTRALIA\020\002*Q\n\024PushNotifi"
  "cationType\022\035\n\031NO_PUSH_NOTIFICATION_TYPE\020"
  "\000\022\020\n\014NOTIFICATION\020\001\022\010\n\004DATA\020\002*5\n\010InfoTyp"
  "e\022\020\n\014NO_INFO_TYPE\020\000\022\t\n\005BASIC\020\001\022\014\n\010DETAIL"
  "ED\020\002*\?\n\017DayDurationType\022\030\n\024NO_DAY_DURATI"
  "ON_TYPE\020\000\022\007\n\003DAY\020\001\022\t\n\005NIGHT\020\002*{\n\tDayOfWe"
  "ek\022\022\n\016NO_DAY_OF_WEEK\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TU"
  "ESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006"
  "FRIDAY\020\005\022\014\n\010SATURDAY\020\006\022\n\n\006SUNDAY\020\007*\204\001\n\023W"
  "eatherForecastType\022\035\n\031NO_WEATHER_FORCECA"
  "ST_TYPE\020\000\022\022\n\016DAILY_FORECAST\020\001\022\023\n\017HOURLY_"
  "FORECAST\020\002\022\017\n\013OBSERVATION\020\003\022\024\n\020HISTORY_F"
  "ORECAST\020\004*\247\001\n\022CommunicationState\022\032\n\026NO_C"
  "OMMUNICATION_STATE\020\000\022\026\n\022VENDOR_UNDELIVER"
  "ED\020\001\022\024\n\020VENDOR_DELIVERED\020\002\022\030\n\024CUSTOMER_U"
  "NDELIVERED\020\003\022\026\n\022CUSTOMER_DELIVERED\020\004\022\025\n\021"
  "PROCESSING_FAILED\020\005*S\n\016NutrientRating\022\026\n"
  "\022NO_NUTRIENT_RATING\020\000\022\016\n\nSUFFICIENT\020\001\022\r\n"
  "\tDEFICIENT\020\002\022\n\n\006EXCESS\020\003*F\n\014CropLandType"
  "\022\024\n\020NO_CROPLAND_TYPE\020\000\022\r\n\tIRRIGATED\020\001\022\021\n"
  "\rNON_IRRIGATED\020\002*\262\001\n\030SynFertilizerReplac"
  "ement\022!\n\035NO_SYN_FERTILIZER_REPLACEMENT\020\000"
  "\022\020\n\014BEEF_FEEDLOT\020\001\022\023\n\017CHICKEN_BROILER\020\002\022"
  "\021\n\rCHICKEN_LAYER\020\003\022\t\n\005DAIRY\020\004\022\t\n\005SHEEP\020\005"
  "\022\t\n\005SWINE\020\006\022\030\n\024OTHER_SYN_FERTILIZER\020\007*\267\002"
  "\n\014ActivityType\022\017\n\013NO_ACTIVITY\020\000\022\025\n\021TILLA"
  "GE_REDUCTION\020\001\022\027\n\023SEASONAL_COVER_CROP\020\002\022"
  "#\n\037FERTILIZER_REDUCTION_PERCENTAGE\020\003\022%\n!"
  "N_FERTILIZER_REDUCTION_PERCENTAGE\020\004\022\036\n\032S"
  "YN_FERTILIZER_REPLACEMENT\020\005\022-\n)SYN_N_FER"
  "TILIZER_REPLACED_WITH_COMPOST_CN\020\006\022)\n%SY"
  "N_N_FERTILIZER_REDUCTION_PERCENTAGE\020\007\022 \n"
  "\034IMPROVE_FARM_FUEL_EFFICIENCY\020\010*I\n\023Templ"
  "ateContentType\022\034\n\030NO_TEMPLATE_CONTENT_TY"
  "PE\020\000\022\n\n\006STRING\020\001\022\010\n\004HTML\020\002*I\n\021ResponseOr"
  "derType\022\025\n\021NO_RESPONSE_ORDER\020\000\022\r\n\tASCEND"
  "ING\020\001\022\016\n\nDESCENDING\020\002*2\n\nSecretType\022\r\n\tN"
  "O_SECRET\020\000\022\007\n\003OTP\020\001\022\014\n\010PASSWORD\020\002*\277\001\n\013Fe"
  "atureName\022\016\n\nNO_FEATURE\020\000\022\017\n\013DOC_ON_CALL"
  "\020\001\022\031\n\025SPRAY_SERVICE_FEATURE\020\002\022\033\n\027WEATHER"
  "_UPDATES_FEATURE\020\003\022\031\n\025MANDI_UPDATES_FEAT"
  "URE\020\004\022\030\n\024PRODUCT_SCAN_FEATURE\020\005\022\"\n\036VIDEO"
  "_FEED_CREATE_POST_FEATURE\020\006*a\n\014OfferKeyN"
  "ame\022\013\n\007SEGMENT\020\000\022\t\n\005ORDER\020\001\022\r\n\tORDERITEM"
  "\020\002\022\020\n\014USER_PROFILE\020\003\022\030\n\024CONTENT_VERIFICA"
  "TION\020\004*\347\001\n\017OfferServiceKey\022\037\n\033SEGMENT_SE"
  "GMENT_ID_ORIGINAL\020\000\022\032\n\026ORDER_ORDER_AMOUN"
  "T_SUM\020\001\022!\n\035ORDERITEM_TOTAL_PACK_SIZE_SUM"
  "\020\002\022&\n\"ORDER_IDENTIFIER_ID_DISTINCT_COUNT"
  "\020\003\022+\n\'CONTENT_VERIFICATION_COMBINED_ID_L"
  "ATEST\020\004\022\037\n\033ORDER_ORDER_AMOUNT_ORIGINAL\020\005"
  "*\230\002\n\014OfferMetaKey\022\031\n\025ORDER_CREATED_AT_DA"
  "TE\020\000\022\030\n\024ORDER_PLACED_AT_DATE\020\001\022\034\n\030ORDERI"
  "TEM_PLACED_AT_DATE\020\002\022$\n ORDERITEM_PRODUC"
  "T_GROUP_ORIGINAL\020\003\022\"\n\036ORDERITEM_IDENTIFI"
  "ER_ID_LATEST\020\004\022*\n&CONTENT_VERIFICATION_E"
  "VENT_ID_ORIGINAL\020\005\022\037\n\033ORDER_PAYMENT_TYPE"
  "_ORIGINAL\020\006\022\036\n\032ORDER_IDENTIFIER_ID_LATES"
  "T\020\007*%\n\021EngagementKeyName\022\020\n\014SEGMENT_TYPE"
  "\020\000*\220\003\n\037EngagementServiceUserSegmentKey\022\030"
  "\n\024USER_PROFILE_USER_ID\020\000\022\030\n\024USER_PROFILE"
  "_CROP_ID\020\001\022\032\n\026USER_PROFILE_REGION_ID\020\002\022\030"
  "\n\024USER_PROFILE_FARM_ID\020\003\022\030\n\024USER_PROFILE"
  "_BANK_ID\020\004\022\032\n\026USER_PROFILE_NAMESPACE\020\005\022\026"
  "\n\022USER_PROFILE_STATE\020\006\022\031\n\025USER_PROFILE_D"
  "ISTRICT\020\007\022\027\n\023USER_PROFILE_TEHSIL\020\010\022\030\n\024US"
  "ER_PROFILE_VILLAGE\020\t\022\030\n\024USER_PROFILE_PIN"
  "CODE\020\n\022\032\n\026USER_PROFILE_USER_TYPE\020\013\022\031\n\025US"
  "ER_PROFILE_USER_GMV\020\014\022\026\n\022USER_PROFILE_DE"
  "POS\020\r*O\n\017ContentMimeType\022\030\n\024NO_CONTENT_M"
  "IME_TYPE\020\000\022\r\n\tVIDEO_MP4\020\001\022\023\n\017MIME_TYPE_I"
  "MAGE\020\002*H\n\021UserContentStatus\022\032\n\026NO_USER_C"
  "ONTENT_STATUS\020\000\022\t\n\005LIKED\020\001\022\014\n\010DISLIKED\020\002"
  "*\224\001\n\014QuestionType\022\024\n\020NO_QUESTION_TYPE\020\000\022"
  "\010\n\004TEXT\020\001\022\013\n\007NUMERIC\020\002\022\025\n\021TEXT_MULTI_CHO"
  "ICE\020\003\022\030\n\024NUMERIC_MULTI_CHOICE\020\004\022\025\n\021FILL_"
  "IN_THE_BLANK\020\005\022\017\n\013FILE_UPLOAD\020\006*\227\001\n\023Comp"
  "arisonCheckType\022\034\n\030NO_COMPARISON_CHECK_T"
  "YPE\020\000\022\006\n\002IN\020\001\022\006\n\002BW\020\002\022\010\n\004LESS\020\003\022\013\n\007GREAT"
  "ER\020\004\022\016\n\nLESS_EQUAL\020\005\022\021\n\rGREATER_EQUAL\020\006\022"
  "\t\n\005EQUAL\020\007\022\r\n\tNOT_EQUAL\020\010*-\n\006Tenant\022\r\n\tN"
  "O_TENANT\020\000\022\007\n\003HFX\020\001\022\013\n\007SEEDHOP\020\002*B\n\tMedi"
  "aType\022\021\n\rNO_MEDIA_TYPE\020\000\022\t\n\005IMAGE\020\001\022\014\n\010D"
  "OCUMENT\020\002\022\t\n\005VIDEO\020\003*L\n\017MediaAccessType\022"
  "\030\n\024NO_MEDIA_ACCESS_TYPE\020\000\022\016\n\nPUBLIC_URL\020"
  "\001\022\017\n\013DOCUMENT_ID\020\002*+\n\010DPSource\022\020\n\014NO_DP_"
  "SOURCE\020\000\022\r\n\tCLEVERTAP\020\001*C\n\014EventSubType\022"
  "\024\n\020NO_EVENT_SUBTYPE\020\000\022\035\n\031CONTENT_MANAGEM"
  "ENT_SYSTEM\020\001*V\n\023CultivationPractice\022\033\n\027N"
  "O_CULTIVATION_PRACTICE\020\000\022\007\n\003AWD\020\001\022\007\n\003DSR"
  "\020\002\022\020\n\014TRANSPLANTED\020\003*\220\001\n\022PracticeChangeT"
  "ype\022\017\n\013NO_PRACTICE\020\000\022\030\n\024PC_TILLAGE_REDUC"
  "TION\020\001\022\032\n\026PC_COVER_CROP_ADDITION\020\002\022\026\n\022PC"
  "_MANURE_ADDITION\020\003\022\033\n\027PC_FERTILIZER_REDU"
  "CTION\020\004*z\n\016ApprovalStatus\022\026\n\022NO_APPROVAL"
  "_STATUS\020\000\022\017\n\013IN_PROGRESS\020\001\022\014\n\010APPROVED\020\002"
  "\022\n\n\006REJECT\020\003\022\024\n\020CONTENT_VERIFIED\020\004\022\017\n\013CA"
  "RE_NEEDED\020\005*\317\001\n\024ApprovalStatusReason\022\035\n\031"
  "NO_APPROVAL_STATUS_REASON\020\000\022 \n\034WATER_NOT"
  "_DRAINED_TILL_15_CM\020\001\022\032\n\026FIELD_IS_STILL_"
  "FLOODED\020\002\022\023\n\017IMAGE_NOT_CLEAR\020\003\022\035\n\031OUTSID"
  "E_OF_EVENT_TIMELINE\020\004\022\032\n\026PICTURE_IS_NOT_"
  "OF_PIPE\020\005\022\n\n\006OTHERS\020\006*\204\001\n\013ProgramType\022\023\n"
  "\017NO_PROGRAM_TYPE\020\000\022\026\n\022PUSA_SPRAY_PROGRAM"
  "\020\001\022\017\n\013AWD_PROGRAM\020\002\022\017\n\013DSR_PROGRAM\020\003\022\025\n\021"
  "GROUNDNUT_PROGRAM\020\004\022\017\n\013CRM_PROGRAM\020\005*Q\n\r"
  "ProgramStatus\022\025\n\021NO_PROGRAM_STATUS\020\000\022\023\n\017"
  "PROGRAM_ENABLED\020\001\022\024\n\020PROGRAM_DISABLED\020\002*"
  "\243\001\n\tEventName\022\021\n\rNO_EVENT_NAME\020\000\022\022\n\016DRYI"
  "NG_EVENT_1\020\001\022\022\n\016DRYING_EVENT_2\020\002\022\020\n\014REGI"
  "STRATION\020\003\022\013\n\007DETAILS\020\004\022\020\n\014SOIL_TURNING\020"
  "\005\022\023\n\017ROTAVATOR_USAGE\020\006\022\025\n\021PIPE_INSTALLAT"
  "ION\020\007*\264\003\n\024ProgramPageEventType\022\021\n\rNO_EVE"
  "NT_TYPE\020\000\022\023\n\017AWD_DRY_EVENT_1\020\001\022\023\n\017AWD_DR"
  "Y_EVENT_2\020\002\022\023\n\017DSR_DRY_EVENT_1\020\003\022\023\n\017DSR_"
  "DRY_EVENT_2\020\004\022\023\n\017AWD_DRY_EVENT_3\020\005\022\023\n\017AW"
  "D_DRY_EVENT_4\020\006\022\021\n\rDSR_DRY_EVENT\020\007\022\034\n\030CR"
  "M_PROGRAM_REGISTRATION\020\010\022\026\n\022PUSA_SPRAY_D"
  "ETAILS\020\t\022\036\n\032DAY_AFTER_PUSA_SPRAY_EVENT\020\n"
  "\022\026\n\022SOIL_TURNING_EVENT\020\013\022 \n\034ROTAVATOR_US"
  "AGE_DURING_RAINS\020\014\022\016\n\nVIDEO_INFO\020\r\022\020\n\014SI"
  "GNUP_EVENT\020\016\022\031\n\025BEFORE_AERATION_EVENT\020\017\022"
<<<<<<< HEAD
  "\016\n\nGEOTAGGING\020\020\022\033\n\027PIPE_INSTALLATION_EVE"
  "NT\020\021*I\n\013EventStatus\022\023\n\017NO_EVENT_STATUS\020\000"
  "\022\021\n\rEVENT_ENABLED\020\001\022\022\n\016EVENT_DISABLED\020\002*"
  "R\n\013ContactType\022\023\n\017NO_CONTACT_TYPE\020\000\022\014\n\010E"
  "MAIL_ID\020\001\022\021\n\rMOBILE_NUMBER\020\002\022\r\n\tFCM_TOKE"
  "N\020\003*S\n\016CampaignStatus\022\026\n\022NO_CAMPAGIN_STA"
  "TUS\020\000\022\013\n\007RUNNING\020\001\022\n\n\006HALTED\020\002\022\020\n\014PRE_IN"
  "ACTION\020\003*`\n\tNameSpace\022\020\n\014NO_NAMESPACE\020\000\022"
  "\010\n\004FARM\020\001\022\n\n\006RETAIL\020\002\022\t\n\005TRADE\020\003\022\013\n\007SUST"
  "AIN\020\004\022\023\n\017NURTURE_PARTNER\020\005*X\n\021CampaignQu"
  "eryType\022\032\n\026NO_CAMPAIGN_QUERY_TYPE\020\000\022\n\n\006A"
  "THENA\020\001\022\014\n\010DATABASE\020\002\022\r\n\tUSER_LIST\020\003*m\n\023"
  "ReferralBookingType\022\032\n\026REFERRAL_SPRAY_BO"
  "OKING\020\000\022\031\n\025REFERRAL_PRODUCT_SCAN\020\001\022\037\n\033RE"
  "FERRAL_PROGRAM_ENROLLMENT\020\002*K\n\014ReferralT"
  "ype\022\017\n\013NO_REFERRAL\020\000\022\025\n\021EXISTING_REFERRA"
  "L\020\001\022\023\n\017CUSTOM_REFERRAL\020\002*_\n\nFormStatus\022\022"
  "\n\016NO_FORM_STATUS\020\000\022\014\n\010FS_DRAFT\020\001\022\020\n\014FS_C"
  "OMPLETED\020\002\022\r\n\tFS_ACTIVE\020\003\022\016\n\nFS_DELETED\020"
  "\004*Z\n\021EligibilityStatus\022\031\n\025NO_ELIGIBILITY"
  "_STATUS\020\000\022\014\n\010ELIGIBLE\020\001\022\017\n\013IN_ELIGIBLE\020\002"
  "\022\013\n\007UNKNOWN\020\003*l\n\014ServicesName\022\023\n\017PADDY_H"
  "ARVESTER\020\000\022\020\n\014HAPPY_SEEDER\020\001\022\n\n\006BAILER\020\002"
  "\022\022\n\016STUBBLE_CUTTER\020\003\022\025\n\021COMBINE_HARVESTE"
  "R\020\004*M\n\024CampaignScheduleType\022\035\n\031NO_CAMPAI"
  "GN_SCHEDULE_TYPE\020\000\022\026\n\022INACTION_OVER_TIME"
  "\020\001*i\n\014ResourceType\022\017\n\013NO_RESOURCE\020\000\022\025\n\021F"
  "ARMER_ONBOARDING\020\001\022\013\n\007BOOKING\020\002\022\022\n\016PROGR"
  "AM_SIGNUP\020\003\022\020\n\014BANK_DEPOSIT\020\004*i\n\022Resourc"
  "eAccessType\022\r\n\tNO_ACCESS\020\000\022\010\n\004VIEW\020\001\022\n\n\006"
  "CREATE\020\002\022\010\n\004EDIT\020\003\022\n\n\006DELETE\020\004\022\n\n\006CANCEL"
  "\020\005\022\014\n\010REASSIGN\020\006*n\n\017ContentCategory\022\027\n\023N"
  "O_CONTENT_CATEGORY\020\000\022\016\n\nMEDIA_FEED\020\001\022\031\n\025"
  "PROGRAM_EVENT_CONTENT\020\002\022\027\n\023CONTENT_UPLOA"
  "D_DEMO\020\003*N\n\017ContentProvider\022\027\n\023NO_CONTEN"
  "T_PROVIDER\020\000\022\013\n\007YOUTUBE\020\001\022\006\n\002S3\020\002\022\r\n\tBLO"
  "BSTORE\020\003*J\n\021PayoutProcessType\022\032\n\026NO_PAYO"
  "UT_PROCESS_TYPE\020\000\022\r\n\tREPROCESS\020\001\022\n\n\006UPDA"
  "TE\020\002*\207\002\n\007JobType\022\017\n\013NO_JOB_TYPE\020\000\022 \n\034JOB"
  "_TYPE_RETAILER_ONBOARDING\020\001\022\033\n\027JOB_TYPE_"
  "ORDER_CREATION\020\002\022\036\n\032JOB_TYPE_FARMER_ONBO"
  "ARDING\020\003\022\031\n\025JOB_TYPE_PRODUCT_SCAN\020\004\022\034\n\030J"
  "OB_TYPE_SERVICE_BOOKING\020\005\022\033\n\027JOB_TYPE_HE"
  "ALTH_PACKAGE\020\006\022\032\n\026JOB_TYPE_AWD_ONBOARDED"
  "\020\007\022\032\n\026JOB_TYPE_DSR_ONBOARDED\020\010*\230\001\n\tJobSt"
  "atus\022\021\n\rNO_Job_Status\020\000\022\024\n\020JOB_STATUS_TO"
  "_DO\020\001\022\026\n\022JOB_STATUS_STARTED\020\002\022\026\n\022JOB_STA"
  "TUS_PARTIAL\020\003\022\030\n\024JOB_STATUS_COMPLETED\020\004\022"
  "\030\n\024JOB_STATUS_CANCELLED\020\005*t\n\rPaymentStat"
  "us\022\025\n\021NO_PAYMENT_STATUS\020\000\022\023\n\017PAYMENT_CRE"
  "ATED\020\001\022\020\n\014PAYMENT_PAID\020\002\022\023\n\017PAYMENT_ON_H"
  "OLD\020\003\022\020\n\014PAYMENT_VOID\020\004*\260\002\n\rPaymentReaso"
  "n\022\032\n\026UNKNOWN_PAYMENT_REASON\020\000\022\035\n\031FARMER_"
  "ONBOARDING_PAYMENT\020\001\022 \n\034PRODUCT_SCAN_PAY"
  "MENT_PAYMENT\020\002\022 \n\034FARMER_SPRAY_BOOKING_P"
  "AYMENT\020\003\022\037\n\033RETAILER_ONBOARDING_PAYMENT\020"
  "\004\022 \n\034RETAILER_FIRST_ORDER_PAYMENT\020\005\022!\n\035R"
  "ETAILER_SECOND_ORDER_PAYMENT\020\006\022\036\n\032RETAIL"
  "ER_ALL_ORDER_PAYMENT\020\007\022\032\n\026GENERAL_SCHEME"
  "_PAYMENT\020\010*\216\001\n\nSchemeType\022\027\n\023SCHEME_TYPE"
  "_UNKNOWN\020\000\022 \n\034SCHEME_TYPE_FIXED_PAY_SCHE"
  "ME\020\001\022#\n\037SCHEME_TYPE_VARIABLE_PAY_SCHEME\020"
  "\002\022 \n\034SCHEME_TYPE_RECURRING_SCHEME\020\003*\217\001\n\020"
  "SchemeWindowType\022\036\n\032SCHEME_WINDOW_TYPE_U"
  "NKNOWN\020\000\022\034\n\030SCHEME_WINDOW_TYPE_DAILY\020\001\022\035"
  "\n\031SCHEME_WINDOW_TYPE_WEEKLY\020\002\022\036\n\032SCHEME_"
  "WINDOW_TYPE_MONTHLY\020\003*v\n\013PaymentType\022\030\n\024"
  "PAYMENT_TYPE_UNKNOWN\020\000\022\025\n\021PAYMENT_TYPE_F"
  "LAT\020\001\022\033\n\027PAYMENT_TYPE_PERCENTAGE\020\002\022\031\n\025PA"
  "YMENT_TYPE_PER_UNIT\020\003*Y\n\024PerformanceQuer"
  "yType\022\014\n\010NO_QUERY\020\000\022\020\n\014QUERY_ATHENA\020\001\022\017\n"
  "\013QUERY_MYSQL\020\002\022\020\n\014QUERY_PRESTO\020\003*o\n\033Perf"
  "ormanceQueryMappingType\022\021\n\rNO_QUERY_TYPE"
  "\020\000\022\023\n\017AGGREGATED_VIEW\020\001\022\021\n\rDETAILED_VIEW"
  "\020\002\022\025\n\021LAST_RUN_AT_QUERY\020\003*\231\003\n\017Performanc"
  "eType\022\027\n\023NO_PERFORMANCE_TYPE\020\000\022(\n$PERFOR"
  "MANCE_TYPE_RETAILER_ONBOARDING\020\001\022!\n\035PERF"
  "ORMANCE_TYPE_FIRST_ORDERS\020\002\022\"\n\036PERFORMAN"
  "CE_TYPE_SECOND_ORDERS\020\003\022\037\n\033PERFORMANCE_T"
  "YPE_ALL_ORDERS\020\004\022&\n\"PERFORMANCE_TYPE_FAR"
  "MER_ONBOARDING\020\005\022\"\n\036PERFORMANCE_TYPE_PRO"
  "DUCT_SCANS\020\006\022\"\n\036PERFORMANCE_TYPE_ACRES_S"
  "PRAYED\020\007\022#\n\037PERFORMANCE_TYPE_HEALTH_PACK"
  "AGE\020\010\022\"\n\036PERFORMANCE_TYPE_AWD_ONBOARDED\020"
  "\t\022\"\n\036PERFORMANCE_TYPE_DSR_ONBOARDED\020\n*\361\001"
  "\n\023ContentDataCategory\022\021\n\rPRODUCT_USAGE\020\000"
  "\022\025\n\021FARMING_TECHNIQUE\020\001\022\021\n\rCROP_ADVISORY"
  "\020\002\022\022\n\016CROP_SELECTION\020\003\022\r\n\tAWARENESS\020\004\022\026\n"
  "\022FARMER_TESTIMONIAL\020\005\022\025\n\021FARMING_MACHINE"
  "RY\020\006\022\022\n\016CARBON_PROGRAM\020\007\022\022\n\016SELFIE_CONTE"
  "ST\020\010\022\016\n\nFARM_DIARY\020\t\022\023\n\017OTHERS_CATEGORY\020"
  "\n*M\n\020IOTBookingAction\022\r\n\tNO_ACTION\020\000\022\t\n\005"
  "START\020\001\022\010\n\004STOP\020\002\022\t\n\005PAUSE\020\003\022\n\n\006RESUME\020\004"
  "*}\n\"TargetUserWorkflowQueryMappingType\022\031"
  "\n\025NO_TARGET_USERS_QUERY\020\000\022 \n\034TARGET_USER"
  "S_AGGREGATED_VIEW\020\001\022\032\n\026TARGET_USERS_LIST"
  "_VIEW\020\002BX\n(farm.nurture.core.contracts.c"
  "ommon.enumsP\001Z\'code.nurture.farm/Core/Co"
  "ntracts/Common\240\001\001b\006proto3"
=======
  "\016\n\nGEOTAGGING\020\020*I\n\013EventStatus\022\023\n\017NO_EVE"
  "NT_STATUS\020\000\022\021\n\rEVENT_ENABLED\020\001\022\022\n\016EVENT_"
  "DISABLED\020\002*R\n\013ContactType\022\023\n\017NO_CONTACT_"
  "TYPE\020\000\022\014\n\010EMAIL_ID\020\001\022\021\n\rMOBILE_NUMBER\020\002\022"
  "\r\n\tFCM_TOKEN\020\003*S\n\016CampaignStatus\022\026\n\022NO_C"
  "AMPAGIN_STATUS\020\000\022\013\n\007RUNNING\020\001\022\n\n\006HALTED\020"
  "\002\022\020\n\014PRE_INACTION\020\003*`\n\tNameSpace\022\020\n\014NO_N"
  "AMESPACE\020\000\022\010\n\004FARM\020\001\022\n\n\006RETAIL\020\002\022\t\n\005TRAD"
  "E\020\003\022\013\n\007SUSTAIN\020\004\022\023\n\017NURTURE_PARTNER\020\005*X\n"
  "\021CampaignQueryType\022\032\n\026NO_CAMPAIGN_QUERY_"
  "TYPE\020\000\022\n\n\006ATHENA\020\001\022\014\n\010DATABASE\020\002\022\r\n\tUSER"
  "_LIST\020\003*m\n\023ReferralBookingType\022\032\n\026REFERR"
  "AL_SPRAY_BOOKING\020\000\022\031\n\025REFERRAL_PRODUCT_S"
  "CAN\020\001\022\037\n\033REFERRAL_PROGRAM_ENROLLMENT\020\002*K"
  "\n\014ReferralType\022\017\n\013NO_REFERRAL\020\000\022\025\n\021EXIST"
  "ING_REFERRAL\020\001\022\023\n\017CUSTOM_REFERRAL\020\002*_\n\nF"
  "ormStatus\022\022\n\016NO_FORM_STATUS\020\000\022\014\n\010FS_DRAF"
  "T\020\001\022\020\n\014FS_COMPLETED\020\002\022\r\n\tFS_ACTIVE\020\003\022\016\n\n"
  "FS_DELETED\020\004*Z\n\021EligibilityStatus\022\031\n\025NO_"
  "ELIGIBILITY_STATUS\020\000\022\014\n\010ELIGIBLE\020\001\022\017\n\013IN"
  "_ELIGIBLE\020\002\022\013\n\007UNKNOWN\020\003*l\n\014ServicesName"
  "\022\023\n\017PADDY_HARVESTER\020\000\022\020\n\014HAPPY_SEEDER\020\001\022"
  "\n\n\006BAILER\020\002\022\022\n\016STUBBLE_CUTTER\020\003\022\025\n\021COMBI"
  "NE_HARVESTER\020\004*M\n\024CampaignScheduleType\022\035"
  "\n\031NO_CAMPAIGN_SCHEDULE_TYPE\020\000\022\026\n\022INACTIO"
  "N_OVER_TIME\020\001*i\n\014ResourceType\022\017\n\013NO_RESO"
  "URCE\020\000\022\025\n\021FARMER_ONBOARDING\020\001\022\013\n\007BOOKING"
  "\020\002\022\022\n\016PROGRAM_SIGNUP\020\003\022\020\n\014BANK_DEPOSIT\020\004"
  "*i\n\022ResourceAccessType\022\r\n\tNO_ACCESS\020\000\022\010\n"
  "\004VIEW\020\001\022\n\n\006CREATE\020\002\022\010\n\004EDIT\020\003\022\n\n\006DELETE\020"
  "\004\022\n\n\006CANCEL\020\005\022\014\n\010REASSIGN\020\006*n\n\017ContentCa"
  "tegory\022\027\n\023NO_CONTENT_CATEGORY\020\000\022\016\n\nMEDIA"
  "_FEED\020\001\022\031\n\025PROGRAM_EVENT_CONTENT\020\002\022\027\n\023CO"
  "NTENT_UPLOAD_DEMO\020\003*N\n\017ContentProvider\022\027"
  "\n\023NO_CONTENT_PROVIDER\020\000\022\013\n\007YOUTUBE\020\001\022\006\n\002"
  "S3\020\002\022\r\n\tBLOBSTORE\020\003*J\n\021PayoutProcessType"
  "\022\032\n\026NO_PAYOUT_PROCESS_TYPE\020\000\022\r\n\tREPROCES"
  "S\020\001\022\n\n\006UPDATE\020\002*\207\002\n\007JobType\022\017\n\013NO_JOB_TY"
  "PE\020\000\022 \n\034JOB_TYPE_RETAILER_ONBOARDING\020\001\022\033"
  "\n\027JOB_TYPE_ORDER_CREATION\020\002\022\036\n\032JOB_TYPE_"
  "FARMER_ONBOARDING\020\003\022\031\n\025JOB_TYPE_PRODUCT_"
  "SCAN\020\004\022\034\n\030JOB_TYPE_SERVICE_BOOKING\020\005\022\033\n\027"
  "JOB_TYPE_HEALTH_PACKAGE\020\006\022\032\n\026JOB_TYPE_AW"
  "D_ONBOARDED\020\007\022\032\n\026JOB_TYPE_DSR_ONBOARDED\020"
  "\010*\230\001\n\tJobStatus\022\021\n\rNO_Job_Status\020\000\022\024\n\020JO"
  "B_STATUS_TO_DO\020\001\022\026\n\022JOB_STATUS_STARTED\020\002"
  "\022\026\n\022JOB_STATUS_PARTIAL\020\003\022\030\n\024JOB_STATUS_C"
  "OMPLETED\020\004\022\030\n\024JOB_STATUS_CANCELLED\020\005*t\n\r"
  "PaymentStatus\022\025\n\021NO_PAYMENT_STATUS\020\000\022\023\n\017"
  "PAYMENT_CREATED\020\001\022\020\n\014PAYMENT_PAID\020\002\022\023\n\017P"
  "AYMENT_ON_HOLD\020\003\022\020\n\014PAYMENT_VOID\020\004*\260\002\n\rP"
  "aymentReason\022\032\n\026UNKNOWN_PAYMENT_REASON\020\000"
  "\022\035\n\031FARMER_ONBOARDING_PAYMENT\020\001\022 \n\034PRODU"
  "CT_SCAN_PAYMENT_PAYMENT\020\002\022 \n\034FARMER_SPRA"
  "Y_BOOKING_PAYMENT\020\003\022\037\n\033RETAILER_ONBOARDI"
  "NG_PAYMENT\020\004\022 \n\034RETAILER_FIRST_ORDER_PAY"
  "MENT\020\005\022!\n\035RETAILER_SECOND_ORDER_PAYMENT\020"
  "\006\022\036\n\032RETAILER_ALL_ORDER_PAYMENT\020\007\022\032\n\026GEN"
  "ERAL_SCHEME_PAYMENT\020\010*\216\001\n\nSchemeType\022\027\n\023"
  "SCHEME_TYPE_UNKNOWN\020\000\022 \n\034SCHEME_TYPE_FIX"
  "ED_PAY_SCHEME\020\001\022#\n\037SCHEME_TYPE_VARIABLE_"
  "PAY_SCHEME\020\002\022 \n\034SCHEME_TYPE_RECURRING_SC"
  "HEME\020\003*\217\001\n\020SchemeWindowType\022\036\n\032SCHEME_WI"
  "NDOW_TYPE_UNKNOWN\020\000\022\034\n\030SCHEME_WINDOW_TYP"
  "E_DAILY\020\001\022\035\n\031SCHEME_WINDOW_TYPE_WEEKLY\020\002"
  "\022\036\n\032SCHEME_WINDOW_TYPE_MONTHLY\020\003*v\n\013Paym"
  "entType\022\030\n\024PAYMENT_TYPE_UNKNOWN\020\000\022\025\n\021PAY"
  "MENT_TYPE_FLAT\020\001\022\033\n\027PAYMENT_TYPE_PERCENT"
  "AGE\020\002\022\031\n\025PAYMENT_TYPE_PER_UNIT\020\003*Y\n\024Perf"
  "ormanceQueryType\022\014\n\010NO_QUERY\020\000\022\020\n\014QUERY_"
  "ATHENA\020\001\022\017\n\013QUERY_MYSQL\020\002\022\020\n\014QUERY_PREST"
  "O\020\003*o\n\033PerformanceQueryMappingType\022\021\n\rNO"
  "_QUERY_TYPE\020\000\022\023\n\017AGGREGATED_VIEW\020\001\022\021\n\rDE"
  "TAILED_VIEW\020\002\022\025\n\021LAST_RUN_AT_QUERY\020\003*\231\003\n"
  "\017PerformanceType\022\027\n\023NO_PERFORMANCE_TYPE\020"
  "\000\022(\n$PERFORMANCE_TYPE_RETAILER_ONBOARDIN"
  "G\020\001\022!\n\035PERFORMANCE_TYPE_FIRST_ORDERS\020\002\022\""
  "\n\036PERFORMANCE_TYPE_SECOND_ORDERS\020\003\022\037\n\033PE"
  "RFORMANCE_TYPE_ALL_ORDERS\020\004\022&\n\"PERFORMAN"
  "CE_TYPE_FARMER_ONBOARDING\020\005\022\"\n\036PERFORMAN"
  "CE_TYPE_PRODUCT_SCANS\020\006\022\"\n\036PERFORMANCE_T"
  "YPE_ACRES_SPRAYED\020\007\022#\n\037PERFORMANCE_TYPE_"
  "HEALTH_PACKAGE\020\010\022\"\n\036PERFORMANCE_TYPE_AWD"
  "_ONBOARDED\020\t\022\"\n\036PERFORMANCE_TYPE_DSR_ONB"
  "OARDED\020\n*\361\001\n\023ContentDataCategory\022\021\n\rPROD"
  "UCT_USAGE\020\000\022\025\n\021FARMING_TECHNIQUE\020\001\022\021\n\rCR"
  "OP_ADVISORY\020\002\022\022\n\016CROP_SELECTION\020\003\022\r\n\tAWA"
  "RENESS\020\004\022\026\n\022FARMER_TESTIMONIAL\020\005\022\025\n\021FARM"
  "ING_MACHINERY\020\006\022\022\n\016CARBON_PROGRAM\020\007\022\022\n\016S"
  "ELFIE_CONTEST\020\010\022\016\n\nFARM_DIARY\020\t\022\023\n\017OTHER"
  "S_CATEGORY\020\n*M\n\020IOTBookingAction\022\r\n\tNO_A"
  "CTION\020\000\022\t\n\005START\020\001\022\010\n\004STOP\020\002\022\t\n\005PAUSE\020\003\022"
  "\n\n\006RESUME\020\004*}\n\"TargetUserWorkflowQueryMa"
  "ppingType\022\031\n\025NO_TARGET_USERS_QUERY\020\000\022 \n\034"
  "TARGET_USERS_AGGREGATED_VIEW\020\001\022\032\n\026TARGET"
  "_USERS_LIST_VIEW\020\002BX\n(farm.nurture.core."
  "contracts.common.enumsP\001Z\'code.nurture.f"
  "arm/Core/Contracts/Common\240\001\001b\006proto3"
>>>>>>> master
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fenums_2eproto = {
<<<<<<< HEAD
  false, false, descriptor_table_protodef_Common_2fenums_2eproto, "Common/enums.proto", 25705,
=======
  false, false, descriptor_table_protodef_Common_2fenums_2eproto, "Common/enums.proto", 25676,
>>>>>>> master
  &descriptor_table_Common_2fenums_2eproto_once, descriptor_table_Common_2fenums_2eproto_sccs, descriptor_table_Common_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2fenums_2eproto::offsets,
  file_level_metadata_Common_2fenums_2eproto, 0, file_level_enum_descriptors_Common_2fenums_2eproto, file_level_service_descriptors_Common_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fenums_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fenums_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[1];
}
bool BookingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[2];
}
bool ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[3];
}
bool WorkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[4];
}
bool WorkClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[5];
}
bool ServiceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[6];
}
bool UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[7];
}
bool ProductSKUClass_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[8];
}
bool ProductSKUType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[9];
}
bool VisitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[10];
}
bool EventReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventUpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[11];
}
bool EventUpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[12];
}
bool ActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 42:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[13];
}
bool BookingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[14];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[15];
}
bool BookingStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[16];
}
bool BookingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[17];
}
bool WorkflowStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 15:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 80:
    case 200:
    case 220:
    case 251:
    case 252:
    case 253:
    case 254:
    case 300:
    case 320:
    case 420:
    case 421:
    case 422:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[18];
}
bool WorkflowStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 50:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 91:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorAllotmentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[19];
}
bool ActorAllotmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorAllotmentStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[20];
}
bool ActorAllotmentStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUPurchaseChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[21];
}
bool ProductSKUPurchaseChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUDomain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[22];
}
bool ProductSKUDomain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductAttachmentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[23];
}
bool ProductAttachmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Currency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[24];
}
bool Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[25];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[26];
}
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 400:
    case 404:
    case 412:
    case 500:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[27];
}
bool RequestStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 4000:
    case 4001:
    case 5000:
    case 6000:
    case 7000:
    case 7001:
    case 8000:
    case 50000:
    case 50001:
    case 50002:
    case 50100:
    case 50101:
    case 50102:
    case 50200:
    case 50201:
    case 50202:
    case 50304:
    case 50401:
    case 50501:
    case 50601:
    case 50701:
    case 50801:
    case 50901:
    case 51001:
    case 51101:
    case 51201:
    case 51202:
    case 60000:
    case 60001:
    case 70000:
    case 70001:
    case 80000:
    case 100000:
    case 100008:
    case 100009:
    case 1000001:
    case 1000002:
    case 1000003:
    case 1000004:
    case 1000005:
    case 1000006:
    case 1000007:
    case 1000010:
    case 1000011:
    case 1000012:
    case 1100001:
    case 1100002:
    case 1100003:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[28];
}
bool EventReferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[29];
}
bool DebugLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[30];
}
bool TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[31];
}
bool TriggerSubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[32];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[33];
}
bool TaskSubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorInServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[34];
}
bool ActorInServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKUProductInServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[35];
}
bool SKUProductInServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[36];
}
bool TaskOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[37];
}
bool TimeSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceAreaNamespace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[38];
}
bool ServiceAreaNamespace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[39];
}
bool LocationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[40];
}
bool BookingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[41];
}
bool ServiceAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[42];
}
bool CommunicationChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[43];
}
bool CommunicationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationFailureCause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[44];
}
bool CommunicationFailureCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[45];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[46];
}
bool ResponseStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 204:
    case 400:
    case 401:
    case 404:
    case 409:
    case 410:
    case 429:
    case 500:
    case 512:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[47];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FarmCropStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[48];
}
bool FarmCropStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[49];
}
bool MediaProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DurationUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[50];
}
bool DurationUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[51];
}
bool DurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScaleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[52];
}
bool ScaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[53];
}
bool LanguageCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[54];
}
bool RewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[55];
}
bool UserActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[56];
}
bool AppID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[57];
}
bool AppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[58];
}
bool HandoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[59];
}
bool HandoverStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MachineEventAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[60];
}
bool MachineEventAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[61];
}
bool ScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[62];
}
bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[63];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[64];
}
bool AddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeographyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[65];
}
bool GeographyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DocumentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[66];
}
bool DocumentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingEligibilityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[67];
}
bool BookingEligibilityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[68];
}
bool BookingScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingNameSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[69];
}
bool BookingNameSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[70];
}
bool BookingClass_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[71];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[72];
}
bool Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PushNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[73];
}
bool PushNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InfoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[74];
}
bool InfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DayDurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[75];
}
bool DayDurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[76];
}
bool DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherForecastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[77];
}
bool WeatherForecastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[78];
}
bool CommunicationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NutrientRating_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[79];
}
bool NutrientRating_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropLandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[80];
}
bool CropLandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SynFertilizerReplacement_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[81];
}
bool SynFertilizerReplacement_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[82];
}
bool ActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemplateContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[83];
}
bool TemplateContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[84];
}
bool ResponseOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecretType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[85];
}
bool SecretType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[86];
}
bool FeatureName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferKeyName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[87];
}
bool OfferKeyName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferServiceKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[88];
}
bool OfferServiceKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferMetaKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[89];
}
bool OfferMetaKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngagementKeyName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[90];
}
bool EngagementKeyName_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngagementServiceUserSegmentKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[91];
}
bool EngagementServiceUserSegmentKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentMimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[92];
}
bool ContentMimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserContentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[93];
}
bool UserContentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[94];
}
bool QuestionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonCheckType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[95];
}
bool ComparisonCheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tenant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[96];
}
bool Tenant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[97];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaAccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[98];
}
bool MediaAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DPSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[99];
}
bool DPSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[100];
}
bool EventSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CultivationPractice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[101];
}
bool CultivationPractice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PracticeChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[102];
}
bool PracticeChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApprovalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[103];
}
bool ApprovalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApprovalStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[104];
}
bool ApprovalStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[105];
}
bool ProgramType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[106];
}
bool ProgramStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[107];
}
bool EventName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramPageEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[108];
}
bool ProgramPageEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[109];
}
bool EventStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContactType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[110];
}
bool ContactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[111];
}
bool CampaignStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[112];
}
bool NameSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[113];
}
bool CampaignQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferralBookingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[114];
}
bool ReferralBookingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferralType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[115];
}
bool ReferralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[116];
}
bool FormStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EligibilityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[117];
}
bool EligibilityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServicesName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[118];
}
bool ServicesName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[119];
}
bool CampaignScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[120];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceAccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[121];
}
bool ResourceAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[122];
}
bool ContentCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[123];
}
bool ContentProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayoutProcessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[124];
}
bool PayoutProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[125];
}
bool JobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[126];
}
bool JobStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[127];
}
bool PaymentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[128];
}
bool PaymentReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[129];
}
bool SchemeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemeWindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[130];
}
bool SchemeWindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[131];
}
bool PaymentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[132];
}
bool PerformanceQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceQueryMappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[133];
}
bool PerformanceQueryMappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[134];
}
bool PerformanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentDataCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[135];
}
bool ContentDataCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOTBookingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[136];
}
bool IOTBookingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TargetUserWorkflowQueryMappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[137];
}
bool TargetUserWorkflowQueryMappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
