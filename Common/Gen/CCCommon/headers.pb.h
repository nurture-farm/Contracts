// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/headers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fheaders_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fheaders_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/entities.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fheaders_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fheaders_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class AppNameType;
class AppNameTypeDefaultTypeInternal;
extern AppNameTypeDefaultTypeInternal _AppNameType_default_instance_;
class Attribs;
class AttribsDefaultTypeInternal;
extern AttribsDefaultTypeInternal _Attribs_default_instance_;
class DataPlatformMessage;
class DataPlatformMessageDefaultTypeInternal;
extern DataPlatformMessageDefaultTypeInternal _DataPlatformMessage_default_instance_;
class RequestHeaders;
class RequestHeadersDefaultTypeInternal;
extern RequestHeadersDefaultTypeInternal _RequestHeaders_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::AppNameType* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::AppNameType>(Arena*);
template<> ::farm::nurture::core::contracts::common::Attribs* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Attribs>(Arena*);
template<> ::farm::nurture::core::contracts::common::DataPlatformMessage* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::DataPlatformMessage>(Arena*);
template<> ::farm::nurture::core::contracts::common::RequestHeaders* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class RequestHeaders PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RequestHeaders) */ {
 public:
  inline RequestHeaders() : RequestHeaders(nullptr) {}
  virtual ~RequestHeaders();

  RequestHeaders(const RequestHeaders& from);
  RequestHeaders(RequestHeaders&& from) noexcept
    : RequestHeaders() {
    *this = ::std::move(from);
  }

  inline RequestHeaders& operator=(const RequestHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaders& operator=(RequestHeaders&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeaders& default_instance();

  static inline const RequestHeaders* internal_default_instance() {
    return reinterpret_cast<const RequestHeaders*>(
               &_RequestHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeaders& a, RequestHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaders* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeaders* New() const final {
    return CreateMaybeMessage<RequestHeaders>(nullptr);
  }

  RequestHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeaders>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeaders& from);
  void MergeFrom(const RequestHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaders* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RequestHeaders";
  }
  protected:
  explicit RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fheaders_2eproto);
    return ::descriptor_table_Common_2fheaders_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 11,
    kClientIdFieldNumber = 1,
    kTracingIdFieldNumber = 2,
    kI18NFieldNumber = 4,
    kExperimentIdFieldNumber = 8,
    kSecurityTokenFieldNumber = 10,
    kPrefferedUserNameFieldNumber = 12,
    kAuthTokenFieldNumber = 15,
    kAppTokenFieldNumber = 16,
    kSessionIdFieldNumber = 20,
    kDeviceIdFieldNumber = 23,
    kUpdatedByEventFieldNumber = 17,
    kUserFieldNumber = 22,
    kTraceDetailsFieldNumber = 3,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kAccuracyFieldNumber = 7,
    kLanguageCodeFieldNumber = 9,
    kLanguageFieldNumber = 13,
    kCountryFieldNumber = 14,
    kAppTypeFieldNumber = 18,
    kAppVersionFieldNumber = 19,
    kAppNameFieldNumber = 21,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 11;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string clientId = 1;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string tracingId = 2;
  void clear_tracingid();
  const std::string& tracingid() const;
  void set_tracingid(const std::string& value);
  void set_tracingid(std::string&& value);
  void set_tracingid(const char* value);
  void set_tracingid(const char* value, size_t size);
  std::string* mutable_tracingid();
  std::string* release_tracingid();
  void set_allocated_tracingid(std::string* tracingid);
  private:
  const std::string& _internal_tracingid() const;
  void _internal_set_tracingid(const std::string& value);
  std::string* _internal_mutable_tracingid();
  public:

  // string i18N = 4;
  void clear_i18n();
  const std::string& i18n() const;
  void set_i18n(const std::string& value);
  void set_i18n(std::string&& value);
  void set_i18n(const char* value);
  void set_i18n(const char* value, size_t size);
  std::string* mutable_i18n();
  std::string* release_i18n();
  void set_allocated_i18n(std::string* i18n);
  private:
  const std::string& _internal_i18n() const;
  void _internal_set_i18n(const std::string& value);
  std::string* _internal_mutable_i18n();
  public:

  // string experimentId = 8;
  void clear_experimentid();
  const std::string& experimentid() const;
  void set_experimentid(const std::string& value);
  void set_experimentid(std::string&& value);
  void set_experimentid(const char* value);
  void set_experimentid(const char* value, size_t size);
  std::string* mutable_experimentid();
  std::string* release_experimentid();
  void set_allocated_experimentid(std::string* experimentid);
  private:
  const std::string& _internal_experimentid() const;
  void _internal_set_experimentid(const std::string& value);
  std::string* _internal_mutable_experimentid();
  public:

  // string securityToken = 10;
  void clear_securitytoken();
  const std::string& securitytoken() const;
  void set_securitytoken(const std::string& value);
  void set_securitytoken(std::string&& value);
  void set_securitytoken(const char* value);
  void set_securitytoken(const char* value, size_t size);
  std::string* mutable_securitytoken();
  std::string* release_securitytoken();
  void set_allocated_securitytoken(std::string* securitytoken);
  private:
  const std::string& _internal_securitytoken() const;
  void _internal_set_securitytoken(const std::string& value);
  std::string* _internal_mutable_securitytoken();
  public:

  // string prefferedUserName = 12;
  void clear_prefferedusername();
  const std::string& prefferedusername() const;
  void set_prefferedusername(const std::string& value);
  void set_prefferedusername(std::string&& value);
  void set_prefferedusername(const char* value);
  void set_prefferedusername(const char* value, size_t size);
  std::string* mutable_prefferedusername();
  std::string* release_prefferedusername();
  void set_allocated_prefferedusername(std::string* prefferedusername);
  private:
  const std::string& _internal_prefferedusername() const;
  void _internal_set_prefferedusername(const std::string& value);
  std::string* _internal_mutable_prefferedusername();
  public:

  // string authToken = 15;
  void clear_authtoken();
  const std::string& authtoken() const;
  void set_authtoken(const std::string& value);
  void set_authtoken(std::string&& value);
  void set_authtoken(const char* value);
  void set_authtoken(const char* value, size_t size);
  std::string* mutable_authtoken();
  std::string* release_authtoken();
  void set_allocated_authtoken(std::string* authtoken);
  private:
  const std::string& _internal_authtoken() const;
  void _internal_set_authtoken(const std::string& value);
  std::string* _internal_mutable_authtoken();
  public:

  // string appToken = 16;
  void clear_apptoken();
  const std::string& apptoken() const;
  void set_apptoken(const std::string& value);
  void set_apptoken(std::string&& value);
  void set_apptoken(const char* value);
  void set_apptoken(const char* value, size_t size);
  std::string* mutable_apptoken();
  std::string* release_apptoken();
  void set_allocated_apptoken(std::string* apptoken);
  private:
  const std::string& _internal_apptoken() const;
  void _internal_set_apptoken(const std::string& value);
  std::string* _internal_mutable_apptoken();
  public:

  // string sessionId = 20;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string deviceId = 23;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // .farm.nurture.core.contracts.common.ActorEventTrace updatedByEvent = 17;
  bool has_updatedbyevent() const;
  private:
  bool _internal_has_updatedbyevent() const;
  public:
  void clear_updatedbyevent();
  const ::farm::nurture::core::contracts::common::ActorEventTrace& updatedbyevent() const;
  ::farm::nurture::core::contracts::common::ActorEventTrace* release_updatedbyevent();
  ::farm::nurture::core::contracts::common::ActorEventTrace* mutable_updatedbyevent();
  void set_allocated_updatedbyevent(::farm::nurture::core::contracts::common::ActorEventTrace* updatedbyevent);
  private:
  const ::farm::nurture::core::contracts::common::ActorEventTrace& _internal_updatedbyevent() const;
  ::farm::nurture::core::contracts::common::ActorEventTrace* _internal_mutable_updatedbyevent();
  public:
  void unsafe_arena_set_allocated_updatedbyevent(
      ::farm::nurture::core::contracts::common::ActorEventTrace* updatedbyevent);
  ::farm::nurture::core::contracts::common::ActorEventTrace* unsafe_arena_release_updatedbyevent();

  // .farm.nurture.core.contracts.common.ActorID user = 22;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::farm::nurture::core::contracts::common::ActorID& user() const;
  ::farm::nurture::core::contracts::common::ActorID* release_user();
  ::farm::nurture::core::contracts::common::ActorID* mutable_user();
  void set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_user() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::farm::nurture::core::contracts::common::ActorID* user);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_user();

  // bool traceDetails = 3;
  void clear_tracedetails();
  bool tracedetails() const;
  void set_tracedetails(bool value);
  private:
  bool _internal_tracedetails() const;
  void _internal_set_tracedetails(bool value);
  public:

  // float latitude = 5;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 6;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float accuracy = 7;
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // .farm.nurture.core.contracts.common.LanguageCode languageCode = 9;
  void clear_languagecode();
  ::farm::nurture::core::contracts::common::LanguageCode languagecode() const;
  void set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_languagecode() const;
  void _internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // .farm.nurture.core.contracts.common.Language language = 13;
  void clear_language();
  ::farm::nurture::core::contracts::common::Language language() const;
  void set_language(::farm::nurture::core::contracts::common::Language value);
  private:
  ::farm::nurture::core::contracts::common::Language _internal_language() const;
  void _internal_set_language(::farm::nurture::core::contracts::common::Language value);
  public:

  // .farm.nurture.core.contracts.common.Country country = 14;
  void clear_country();
  ::farm::nurture::core::contracts::common::Country country() const;
  void set_country(::farm::nurture::core::contracts::common::Country value);
  private:
  ::farm::nurture::core::contracts::common::Country _internal_country() const;
  void _internal_set_country(::farm::nurture::core::contracts::common::Country value);
  public:

  // .farm.nurture.core.contracts.common.AppType appType = 18;
  void clear_apptype();
  ::farm::nurture::core::contracts::common::AppType apptype() const;
  void set_apptype(::farm::nurture::core::contracts::common::AppType value);
  private:
  ::farm::nurture::core::contracts::common::AppType _internal_apptype() const;
  void _internal_set_apptype(::farm::nurture::core::contracts::common::AppType value);
  public:

  // int64 appVersion = 19;
  void clear_appversion();
  ::PROTOBUF_NAMESPACE_ID::int64 appversion() const;
  void set_appversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_appversion() const;
  void _internal_set_appversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.ClientType appName = 21;
  void clear_appname();
  ::farm::nurture::core::contracts::common::ClientType appname() const;
  void set_appname(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_appname() const;
  void _internal_set_appname(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RequestHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracingid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i18n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr experimentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitytoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefferedusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apptoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::farm::nurture::core::contracts::common::ActorEventTrace* updatedbyevent_;
  ::farm::nurture::core::contracts::common::ActorID* user_;
  bool tracedetails_;
  float latitude_;
  float longitude_;
  float accuracy_;
  int languagecode_;
  int language_;
  int country_;
  int apptype_;
  ::PROTOBUF_NAMESPACE_ID::int64 appversion_;
  int appname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fheaders_2eproto;
};
// -------------------------------------------------------------------

class Attribs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Attribs) */ {
 public:
  inline Attribs() : Attribs(nullptr) {}
  virtual ~Attribs();

  Attribs(const Attribs& from);
  Attribs(Attribs&& from) noexcept
    : Attribs() {
    *this = ::std::move(from);
  }

  inline Attribs& operator=(const Attribs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribs& operator=(Attribs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribs& default_instance();

  static inline const Attribs* internal_default_instance() {
    return reinterpret_cast<const Attribs*>(
               &_Attribs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Attribs& a, Attribs& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribs* New() const final {
    return CreateMaybeMessage<Attribs>(nullptr);
  }

  Attribs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribs& from);
  void MergeFrom(const Attribs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Attribs";
  }
  protected:
  explicit Attribs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fheaders_2eproto);
    return ::descriptor_table_Common_2fheaders_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Attribs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fheaders_2eproto;
};
// -------------------------------------------------------------------

class DataPlatformMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.DataPlatformMessage) */ {
 public:
  inline DataPlatformMessage() : DataPlatformMessage(nullptr) {}
  virtual ~DataPlatformMessage();

  DataPlatformMessage(const DataPlatformMessage& from);
  DataPlatformMessage(DataPlatformMessage&& from) noexcept
    : DataPlatformMessage() {
    *this = ::std::move(from);
  }

  inline DataPlatformMessage& operator=(const DataPlatformMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPlatformMessage& operator=(DataPlatformMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataPlatformMessage& default_instance();

  static inline const DataPlatformMessage* internal_default_instance() {
    return reinterpret_cast<const DataPlatformMessage*>(
               &_DataPlatformMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataPlatformMessage& a, DataPlatformMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPlatformMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPlatformMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataPlatformMessage* New() const final {
    return CreateMaybeMessage<DataPlatformMessage>(nullptr);
  }

  DataPlatformMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPlatformMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataPlatformMessage& from);
  void MergeFrom(const DataPlatformMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPlatformMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.DataPlatformMessage";
  }
  protected:
  explicit DataPlatformMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fheaders_2eproto);
    return ::descriptor_table_Common_2fheaders_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 1,
    kExternalIdFieldNumber = 2,
    kVersionNameFieldNumber = 5,
    kOsVersionFieldNumber = 6,
    kEventDataFieldNumber = 12,
    kAppNameTypeFieldNumber = 7,
    kTimestampFieldNumber = 10,
    kActorFieldNumber = 11,
    kDpSourceFieldNumber = 3,
    kVersionCodeFieldNumber = 4,
    kSessionIdFieldNumber = 9,
    kEventTypeFieldNumber = 8,
    kEventSubTypeFieldNumber = 13,
    kNamespaceFieldNumber = 14,
    kEventIndexFieldNumber = 15,
  };
  // string eventName = 1;
  void clear_eventname();
  const std::string& eventname() const;
  void set_eventname(const std::string& value);
  void set_eventname(std::string&& value);
  void set_eventname(const char* value);
  void set_eventname(const char* value, size_t size);
  std::string* mutable_eventname();
  std::string* release_eventname();
  void set_allocated_eventname(std::string* eventname);
  private:
  const std::string& _internal_eventname() const;
  void _internal_set_eventname(const std::string& value);
  std::string* _internal_mutable_eventname();
  public:

  // string externalId = 2;
  void clear_externalid();
  const std::string& externalid() const;
  void set_externalid(const std::string& value);
  void set_externalid(std::string&& value);
  void set_externalid(const char* value);
  void set_externalid(const char* value, size_t size);
  std::string* mutable_externalid();
  std::string* release_externalid();
  void set_allocated_externalid(std::string* externalid);
  private:
  const std::string& _internal_externalid() const;
  void _internal_set_externalid(const std::string& value);
  std::string* _internal_mutable_externalid();
  public:

  // string versionName = 5;
  void clear_versionname();
  const std::string& versionname() const;
  void set_versionname(const std::string& value);
  void set_versionname(std::string&& value);
  void set_versionname(const char* value);
  void set_versionname(const char* value, size_t size);
  std::string* mutable_versionname();
  std::string* release_versionname();
  void set_allocated_versionname(std::string* versionname);
  private:
  const std::string& _internal_versionname() const;
  void _internal_set_versionname(const std::string& value);
  std::string* _internal_mutable_versionname();
  public:

  // string osVersion = 6;
  void clear_osversion();
  const std::string& osversion() const;
  void set_osversion(const std::string& value);
  void set_osversion(std::string&& value);
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  std::string* mutable_osversion();
  std::string* release_osversion();
  void set_allocated_osversion(std::string* osversion);
  private:
  const std::string& _internal_osversion() const;
  void _internal_set_osversion(const std::string& value);
  std::string* _internal_mutable_osversion();
  public:

  // bytes eventData = 12;
  void clear_eventdata();
  const std::string& eventdata() const;
  void set_eventdata(const std::string& value);
  void set_eventdata(std::string&& value);
  void set_eventdata(const char* value);
  void set_eventdata(const void* value, size_t size);
  std::string* mutable_eventdata();
  std::string* release_eventdata();
  void set_allocated_eventdata(std::string* eventdata);
  private:
  const std::string& _internal_eventdata() const;
  void _internal_set_eventdata(const std::string& value);
  std::string* _internal_mutable_eventdata();
  public:

  // .farm.nurture.core.contracts.common.AppNameType appNameType = 7;
  bool has_appnametype() const;
  private:
  bool _internal_has_appnametype() const;
  public:
  void clear_appnametype();
  const ::farm::nurture::core::contracts::common::AppNameType& appnametype() const;
  ::farm::nurture::core::contracts::common::AppNameType* release_appnametype();
  ::farm::nurture::core::contracts::common::AppNameType* mutable_appnametype();
  void set_allocated_appnametype(::farm::nurture::core::contracts::common::AppNameType* appnametype);
  private:
  const ::farm::nurture::core::contracts::common::AppNameType& _internal_appnametype() const;
  ::farm::nurture::core::contracts::common::AppNameType* _internal_mutable_appnametype();
  public:
  void unsafe_arena_set_allocated_appnametype(
      ::farm::nurture::core::contracts::common::AppNameType* appnametype);
  ::farm::nurture::core::contracts::common::AppNameType* unsafe_arena_release_appnametype();

  // .google.protobuf.Timestamp timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .farm.nurture.core.contracts.common.ActorID actor = 11;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.DPSource dpSource = 3;
  void clear_dpsource();
  ::farm::nurture::core::contracts::common::DPSource dpsource() const;
  void set_dpsource(::farm::nurture::core::contracts::common::DPSource value);
  private:
  ::farm::nurture::core::contracts::common::DPSource _internal_dpsource() const;
  void _internal_set_dpsource(::farm::nurture::core::contracts::common::DPSource value);
  public:

  // int32 versionCode = 4;
  void clear_versioncode();
  ::PROTOBUF_NAMESPACE_ID::int32 versioncode() const;
  void set_versioncode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_versioncode() const;
  void _internal_set_versioncode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 sessionId = 9;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.EventType eventType = 8;
  void clear_eventtype();
  ::farm::nurture::core::contracts::common::EventType eventtype() const;
  void set_eventtype(::farm::nurture::core::contracts::common::EventType value);
  private:
  ::farm::nurture::core::contracts::common::EventType _internal_eventtype() const;
  void _internal_set_eventtype(::farm::nurture::core::contracts::common::EventType value);
  public:

  // .farm.nurture.core.contracts.common.EventSubType eventSubType = 13;
  void clear_eventsubtype();
  ::farm::nurture::core::contracts::common::EventSubType eventsubtype() const;
  void set_eventsubtype(::farm::nurture::core::contracts::common::EventSubType value);
  private:
  ::farm::nurture::core::contracts::common::EventSubType _internal_eventsubtype() const;
  void _internal_set_eventsubtype(::farm::nurture::core::contracts::common::EventSubType value);
  public:

  // .farm.nurture.core.contracts.common.NameSpace namespace = 14;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // int32 eventIndex = 15;
  void clear_eventindex();
  ::PROTOBUF_NAMESPACE_ID::int32 eventindex() const;
  void set_eventindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventindex() const;
  void _internal_set_eventindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.DataPlatformMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventdata_;
  ::farm::nurture::core::contracts::common::AppNameType* appnametype_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int dpsource_;
  ::PROTOBUF_NAMESPACE_ID::int32 versioncode_;
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid_;
  int eventtype_;
  int eventsubtype_;
  int namespace__;
  ::PROTOBUF_NAMESPACE_ID::int32 eventindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fheaders_2eproto;
};
// -------------------------------------------------------------------

class AppNameType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.AppNameType) */ {
 public:
  inline AppNameType() : AppNameType(nullptr) {}
  virtual ~AppNameType();

  AppNameType(const AppNameType& from);
  AppNameType(AppNameType&& from) noexcept
    : AppNameType() {
    *this = ::std::move(from);
  }

  inline AppNameType& operator=(const AppNameType& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppNameType& operator=(AppNameType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppNameType& default_instance();

  static inline const AppNameType* internal_default_instance() {
    return reinterpret_cast<const AppNameType*>(
               &_AppNameType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppNameType& a, AppNameType& b) {
    a.Swap(&b);
  }
  inline void Swap(AppNameType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppNameType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppNameType* New() const final {
    return CreateMaybeMessage<AppNameType>(nullptr);
  }

  AppNameType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppNameType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppNameType& from);
  void MergeFrom(const AppNameType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppNameType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.AppNameType";
  }
  protected:
  explicit AppNameType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fheaders_2eproto);
    return ::descriptor_table_Common_2fheaders_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.AppNameType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fheaders_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaders

// string clientId = 1;
inline void RequestHeaders::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::clientid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.clientId)
  return _internal_clientid();
}
inline void RequestHeaders::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.clientId)
}
inline std::string* RequestHeaders::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& RequestHeaders::_internal_clientid() const {
  return clientid_.Get();
}
inline void RequestHeaders::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.clientId)
}
inline void RequestHeaders::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.clientId)
}
inline void RequestHeaders::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.clientId)
}
inline std::string* RequestHeaders::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_clientid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.clientId)
}

// string tracingId = 2;
inline void RequestHeaders::clear_tracingid() {
  tracingid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::tracingid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
  return _internal_tracingid();
}
inline void RequestHeaders::set_tracingid(const std::string& value) {
  _internal_set_tracingid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
}
inline std::string* RequestHeaders::mutable_tracingid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
  return _internal_mutable_tracingid();
}
inline const std::string& RequestHeaders::_internal_tracingid() const {
  return tracingid_.Get();
}
inline void RequestHeaders::_internal_set_tracingid(const std::string& value) {
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_tracingid(std::string&& value) {
  
  tracingid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
}
inline void RequestHeaders::set_tracingid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
}
inline void RequestHeaders::set_tracingid(const char* value,
    size_t size) {
  
  tracingid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
}
inline std::string* RequestHeaders::_internal_mutable_tracingid() {
  
  return tracingid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_tracingid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
  return tracingid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_tracingid(std::string* tracingid) {
  if (tracingid != nullptr) {
    
  } else {
    
  }
  tracingid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracingid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.tracingId)
}

// bool traceDetails = 3;
inline void RequestHeaders::clear_tracedetails() {
  tracedetails_ = false;
}
inline bool RequestHeaders::_internal_tracedetails() const {
  return tracedetails_;
}
inline bool RequestHeaders::tracedetails() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.traceDetails)
  return _internal_tracedetails();
}
inline void RequestHeaders::_internal_set_tracedetails(bool value) {
  
  tracedetails_ = value;
}
inline void RequestHeaders::set_tracedetails(bool value) {
  _internal_set_tracedetails(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.traceDetails)
}

// string i18N = 4;
inline void RequestHeaders::clear_i18n() {
  i18n_.ClearToEmpty();
}
inline const std::string& RequestHeaders::i18n() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.i18N)
  return _internal_i18n();
}
inline void RequestHeaders::set_i18n(const std::string& value) {
  _internal_set_i18n(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.i18N)
}
inline std::string* RequestHeaders::mutable_i18n() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.i18N)
  return _internal_mutable_i18n();
}
inline const std::string& RequestHeaders::_internal_i18n() const {
  return i18n_.Get();
}
inline void RequestHeaders::_internal_set_i18n(const std::string& value) {
  
  i18n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_i18n(std::string&& value) {
  
  i18n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.i18N)
}
inline void RequestHeaders::set_i18n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  i18n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.i18N)
}
inline void RequestHeaders::set_i18n(const char* value,
    size_t size) {
  
  i18n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.i18N)
}
inline std::string* RequestHeaders::_internal_mutable_i18n() {
  
  return i18n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_i18n() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.i18N)
  return i18n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_i18n(std::string* i18n) {
  if (i18n != nullptr) {
    
  } else {
    
  }
  i18n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i18n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.i18N)
}

// float latitude = 5;
inline void RequestHeaders::clear_latitude() {
  latitude_ = 0;
}
inline float RequestHeaders::_internal_latitude() const {
  return latitude_;
}
inline float RequestHeaders::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.latitude)
  return _internal_latitude();
}
inline void RequestHeaders::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void RequestHeaders::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.latitude)
}

// float longitude = 6;
inline void RequestHeaders::clear_longitude() {
  longitude_ = 0;
}
inline float RequestHeaders::_internal_longitude() const {
  return longitude_;
}
inline float RequestHeaders::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.longitude)
  return _internal_longitude();
}
inline void RequestHeaders::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void RequestHeaders::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.longitude)
}

// float accuracy = 7;
inline void RequestHeaders::clear_accuracy() {
  accuracy_ = 0;
}
inline float RequestHeaders::_internal_accuracy() const {
  return accuracy_;
}
inline float RequestHeaders::accuracy() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.accuracy)
  return _internal_accuracy();
}
inline void RequestHeaders::_internal_set_accuracy(float value) {
  
  accuracy_ = value;
}
inline void RequestHeaders::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.accuracy)
}

// string experimentId = 8;
inline void RequestHeaders::clear_experimentid() {
  experimentid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::experimentid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
  return _internal_experimentid();
}
inline void RequestHeaders::set_experimentid(const std::string& value) {
  _internal_set_experimentid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
}
inline std::string* RequestHeaders::mutable_experimentid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
  return _internal_mutable_experimentid();
}
inline const std::string& RequestHeaders::_internal_experimentid() const {
  return experimentid_.Get();
}
inline void RequestHeaders::_internal_set_experimentid(const std::string& value) {
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_experimentid(std::string&& value) {
  
  experimentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
}
inline void RequestHeaders::set_experimentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
}
inline void RequestHeaders::set_experimentid(const char* value,
    size_t size) {
  
  experimentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
}
inline std::string* RequestHeaders::_internal_mutable_experimentid() {
  
  return experimentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_experimentid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
  return experimentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_experimentid(std::string* experimentid) {
  if (experimentid != nullptr) {
    
  } else {
    
  }
  experimentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), experimentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.experimentId)
}

// .farm.nurture.core.contracts.common.LanguageCode languageCode = 9;
inline void RequestHeaders::clear_languagecode() {
  languagecode_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode RequestHeaders::_internal_languagecode() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(languagecode_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode RequestHeaders::languagecode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.languageCode)
  return _internal_languagecode();
}
inline void RequestHeaders::_internal_set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  languagecode_ = value;
}
inline void RequestHeaders::set_languagecode(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_languagecode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.languageCode)
}

// string securityToken = 10;
inline void RequestHeaders::clear_securitytoken() {
  securitytoken_.ClearToEmpty();
}
inline const std::string& RequestHeaders::securitytoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
  return _internal_securitytoken();
}
inline void RequestHeaders::set_securitytoken(const std::string& value) {
  _internal_set_securitytoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
}
inline std::string* RequestHeaders::mutable_securitytoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
  return _internal_mutable_securitytoken();
}
inline const std::string& RequestHeaders::_internal_securitytoken() const {
  return securitytoken_.Get();
}
inline void RequestHeaders::_internal_set_securitytoken(const std::string& value) {
  
  securitytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_securitytoken(std::string&& value) {
  
  securitytoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
}
inline void RequestHeaders::set_securitytoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securitytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
}
inline void RequestHeaders::set_securitytoken(const char* value,
    size_t size) {
  
  securitytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
}
inline std::string* RequestHeaders::_internal_mutable_securitytoken() {
  
  return securitytoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_securitytoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
  return securitytoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_securitytoken(std::string* securitytoken) {
  if (securitytoken != nullptr) {
    
  } else {
    
  }
  securitytoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitytoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.securityToken)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 11;
inline int RequestHeaders::_internal_attribs_size() const {
  return attribs_.size();
}
inline int RequestHeaders::attribs_size() const {
  return _internal_attribs_size();
}
inline void RequestHeaders::clear_attribs() {
  attribs_.Clear();
}
inline ::farm::nurture::core::contracts::common::Attribs* RequestHeaders::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
RequestHeaders::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.RequestHeaders.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& RequestHeaders::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& RequestHeaders::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* RequestHeaders::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* RequestHeaders::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RequestHeaders.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
RequestHeaders::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.RequestHeaders.attribs)
  return attribs_;
}

// string prefferedUserName = 12;
inline void RequestHeaders::clear_prefferedusername() {
  prefferedusername_.ClearToEmpty();
}
inline const std::string& RequestHeaders::prefferedusername() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
  return _internal_prefferedusername();
}
inline void RequestHeaders::set_prefferedusername(const std::string& value) {
  _internal_set_prefferedusername(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
}
inline std::string* RequestHeaders::mutable_prefferedusername() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
  return _internal_mutable_prefferedusername();
}
inline const std::string& RequestHeaders::_internal_prefferedusername() const {
  return prefferedusername_.Get();
}
inline void RequestHeaders::_internal_set_prefferedusername(const std::string& value) {
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_prefferedusername(std::string&& value) {
  
  prefferedusername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
}
inline void RequestHeaders::set_prefferedusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
}
inline void RequestHeaders::set_prefferedusername(const char* value,
    size_t size) {
  
  prefferedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
}
inline std::string* RequestHeaders::_internal_mutable_prefferedusername() {
  
  return prefferedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_prefferedusername() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
  return prefferedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_prefferedusername(std::string* prefferedusername) {
  if (prefferedusername != nullptr) {
    
  } else {
    
  }
  prefferedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefferedusername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.prefferedUserName)
}

// .farm.nurture.core.contracts.common.Language language = 13;
inline void RequestHeaders::clear_language() {
  language_ = 0;
}
inline ::farm::nurture::core::contracts::common::Language RequestHeaders::_internal_language() const {
  return static_cast< ::farm::nurture::core::contracts::common::Language >(language_);
}
inline ::farm::nurture::core::contracts::common::Language RequestHeaders::language() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.language)
  return _internal_language();
}
inline void RequestHeaders::_internal_set_language(::farm::nurture::core::contracts::common::Language value) {
  
  language_ = value;
}
inline void RequestHeaders::set_language(::farm::nurture::core::contracts::common::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.language)
}

// .farm.nurture.core.contracts.common.Country country = 14;
inline void RequestHeaders::clear_country() {
  country_ = 0;
}
inline ::farm::nurture::core::contracts::common::Country RequestHeaders::_internal_country() const {
  return static_cast< ::farm::nurture::core::contracts::common::Country >(country_);
}
inline ::farm::nurture::core::contracts::common::Country RequestHeaders::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.country)
  return _internal_country();
}
inline void RequestHeaders::_internal_set_country(::farm::nurture::core::contracts::common::Country value) {
  
  country_ = value;
}
inline void RequestHeaders::set_country(::farm::nurture::core::contracts::common::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.country)
}

// string authToken = 15;
inline void RequestHeaders::clear_authtoken() {
  authtoken_.ClearToEmpty();
}
inline const std::string& RequestHeaders::authtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.authToken)
  return _internal_authtoken();
}
inline void RequestHeaders::set_authtoken(const std::string& value) {
  _internal_set_authtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.authToken)
}
inline std::string* RequestHeaders::mutable_authtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.authToken)
  return _internal_mutable_authtoken();
}
inline const std::string& RequestHeaders::_internal_authtoken() const {
  return authtoken_.Get();
}
inline void RequestHeaders::_internal_set_authtoken(const std::string& value) {
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_authtoken(std::string&& value) {
  
  authtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.authToken)
}
inline void RequestHeaders::set_authtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.authToken)
}
inline void RequestHeaders::set_authtoken(const char* value,
    size_t size) {
  
  authtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.authToken)
}
inline std::string* RequestHeaders::_internal_mutable_authtoken() {
  
  return authtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_authtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.authToken)
  return authtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_authtoken(std::string* authtoken) {
  if (authtoken != nullptr) {
    
  } else {
    
  }
  authtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.authToken)
}

// string appToken = 16;
inline void RequestHeaders::clear_apptoken() {
  apptoken_.ClearToEmpty();
}
inline const std::string& RequestHeaders::apptoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.appToken)
  return _internal_apptoken();
}
inline void RequestHeaders::set_apptoken(const std::string& value) {
  _internal_set_apptoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.appToken)
}
inline std::string* RequestHeaders::mutable_apptoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.appToken)
  return _internal_mutable_apptoken();
}
inline const std::string& RequestHeaders::_internal_apptoken() const {
  return apptoken_.Get();
}
inline void RequestHeaders::_internal_set_apptoken(const std::string& value) {
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_apptoken(std::string&& value) {
  
  apptoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.appToken)
}
inline void RequestHeaders::set_apptoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.appToken)
}
inline void RequestHeaders::set_apptoken(const char* value,
    size_t size) {
  
  apptoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.appToken)
}
inline std::string* RequestHeaders::_internal_mutable_apptoken() {
  
  return apptoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_apptoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.appToken)
  return apptoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_apptoken(std::string* apptoken) {
  if (apptoken != nullptr) {
    
  } else {
    
  }
  apptoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apptoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.appToken)
}

// .farm.nurture.core.contracts.common.ActorEventTrace updatedByEvent = 17;
inline bool RequestHeaders::_internal_has_updatedbyevent() const {
  return this != internal_default_instance() && updatedbyevent_ != nullptr;
}
inline bool RequestHeaders::has_updatedbyevent() const {
  return _internal_has_updatedbyevent();
}
inline const ::farm::nurture::core::contracts::common::ActorEventTrace& RequestHeaders::_internal_updatedbyevent() const {
  const ::farm::nurture::core::contracts::common::ActorEventTrace* p = updatedbyevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorEventTrace&>(
      ::farm::nurture::core::contracts::common::_ActorEventTrace_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorEventTrace& RequestHeaders::updatedbyevent() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.updatedByEvent)
  return _internal_updatedbyevent();
}
inline void RequestHeaders::unsafe_arena_set_allocated_updatedbyevent(
    ::farm::nurture::core::contracts::common::ActorEventTrace* updatedbyevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyevent_);
  }
  updatedbyevent_ = updatedbyevent;
  if (updatedbyevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.updatedByEvent)
}
inline ::farm::nurture::core::contracts::common::ActorEventTrace* RequestHeaders::release_updatedbyevent() {
  
  ::farm::nurture::core::contracts::common::ActorEventTrace* temp = updatedbyevent_;
  updatedbyevent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorEventTrace* RequestHeaders::unsafe_arena_release_updatedbyevent() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.updatedByEvent)
  
  ::farm::nurture::core::contracts::common::ActorEventTrace* temp = updatedbyevent_;
  updatedbyevent_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorEventTrace* RequestHeaders::_internal_mutable_updatedbyevent() {
  
  if (updatedbyevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorEventTrace>(GetArena());
    updatedbyevent_ = p;
  }
  return updatedbyevent_;
}
inline ::farm::nurture::core::contracts::common::ActorEventTrace* RequestHeaders::mutable_updatedbyevent() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.updatedByEvent)
  return _internal_mutable_updatedbyevent();
}
inline void RequestHeaders::set_allocated_updatedbyevent(::farm::nurture::core::contracts::common::ActorEventTrace* updatedbyevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyevent_);
  }
  if (updatedbyevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyevent)->GetArena();
    if (message_arena != submessage_arena) {
      updatedbyevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedbyevent, submessage_arena);
    }
    
  } else {
    
  }
  updatedbyevent_ = updatedbyevent;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.updatedByEvent)
}

// .farm.nurture.core.contracts.common.AppType appType = 18;
inline void RequestHeaders::clear_apptype() {
  apptype_ = 0;
}
inline ::farm::nurture::core::contracts::common::AppType RequestHeaders::_internal_apptype() const {
  return static_cast< ::farm::nurture::core::contracts::common::AppType >(apptype_);
}
inline ::farm::nurture::core::contracts::common::AppType RequestHeaders::apptype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.appType)
  return _internal_apptype();
}
inline void RequestHeaders::_internal_set_apptype(::farm::nurture::core::contracts::common::AppType value) {
  
  apptype_ = value;
}
inline void RequestHeaders::set_apptype(::farm::nurture::core::contracts::common::AppType value) {
  _internal_set_apptype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.appType)
}

// int64 appVersion = 19;
inline void RequestHeaders::clear_appversion() {
  appversion_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestHeaders::_internal_appversion() const {
  return appversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestHeaders::appversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.appVersion)
  return _internal_appversion();
}
inline void RequestHeaders::_internal_set_appversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  appversion_ = value;
}
inline void RequestHeaders::set_appversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_appversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.appVersion)
}

// string sessionId = 20;
inline void RequestHeaders::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::sessionid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
  return _internal_sessionid();
}
inline void RequestHeaders::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
}
inline std::string* RequestHeaders::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
  return _internal_mutable_sessionid();
}
inline const std::string& RequestHeaders::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void RequestHeaders::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_sessionid(std::string&& value) {
  
  sessionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
}
inline void RequestHeaders::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
}
inline void RequestHeaders::set_sessionid(const char* value,
    size_t size) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
}
inline std::string* RequestHeaders::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_sessionid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.sessionId)
}

// .farm.nurture.core.contracts.common.ClientType appName = 21;
inline void RequestHeaders::clear_appname() {
  appname_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType RequestHeaders::_internal_appname() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(appname_);
}
inline ::farm::nurture::core::contracts::common::ClientType RequestHeaders::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.appName)
  return _internal_appname();
}
inline void RequestHeaders::_internal_set_appname(::farm::nurture::core::contracts::common::ClientType value) {
  
  appname_ = value;
}
inline void RequestHeaders::set_appname(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.appName)
}

// .farm.nurture.core.contracts.common.ActorID user = 22;
inline bool RequestHeaders::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool RequestHeaders::has_user() const {
  return _internal_has_user();
}
inline const ::farm::nurture::core::contracts::common::ActorID& RequestHeaders::_internal_user() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& RequestHeaders::user() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.user)
  return _internal_user();
}
inline void RequestHeaders::unsafe_arena_set_allocated_user(
    ::farm::nurture::core::contracts::common::ActorID* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.user)
}
inline ::farm::nurture::core::contracts::common::ActorID* RequestHeaders::release_user() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RequestHeaders::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.user)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RequestHeaders::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::farm::nurture::core::contracts::common::ActorID* RequestHeaders::mutable_user() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.user)
  return _internal_mutable_user();
}
inline void RequestHeaders::set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.user)
}

// string deviceId = 23;
inline void RequestHeaders::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& RequestHeaders::deviceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
  return _internal_deviceid();
}
inline void RequestHeaders::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
}
inline std::string* RequestHeaders::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& RequestHeaders::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void RequestHeaders::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestHeaders::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
}
inline void RequestHeaders::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
}
inline void RequestHeaders::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
}
inline std::string* RequestHeaders::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestHeaders::release_deviceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestHeaders::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RequestHeaders.deviceId)
}

// -------------------------------------------------------------------

// Attribs

// string key = 1;
inline void Attribs::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Attribs::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Attribs.key)
  return _internal_key();
}
inline void Attribs::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Attribs.key)
}
inline std::string* Attribs::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Attribs.key)
  return _internal_mutable_key();
}
inline const std::string& Attribs::_internal_key() const {
  return key_.Get();
}
inline void Attribs::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribs::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Attribs.key)
}
inline void Attribs::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Attribs.key)
}
inline void Attribs::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Attribs.key)
}
inline std::string* Attribs::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribs::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Attribs.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Attribs.key)
}

// string value = 2;
inline void Attribs::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Attribs::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Attribs.value)
  return _internal_value();
}
inline void Attribs::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Attribs.value)
}
inline std::string* Attribs::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Attribs.value)
  return _internal_mutable_value();
}
inline const std::string& Attribs::_internal_value() const {
  return value_.Get();
}
inline void Attribs::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribs::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Attribs.value)
}
inline void Attribs::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Attribs.value)
}
inline void Attribs::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Attribs.value)
}
inline std::string* Attribs::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribs::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Attribs.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribs::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Attribs.value)
}

// -------------------------------------------------------------------

// DataPlatformMessage

// string eventName = 1;
inline void DataPlatformMessage::clear_eventname() {
  eventname_.ClearToEmpty();
}
inline const std::string& DataPlatformMessage::eventname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
  return _internal_eventname();
}
inline void DataPlatformMessage::set_eventname(const std::string& value) {
  _internal_set_eventname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
}
inline std::string* DataPlatformMessage::mutable_eventname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
  return _internal_mutable_eventname();
}
inline const std::string& DataPlatformMessage::_internal_eventname() const {
  return eventname_.Get();
}
inline void DataPlatformMessage::_internal_set_eventname(const std::string& value) {
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataPlatformMessage::set_eventname(std::string&& value) {
  
  eventname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
}
inline void DataPlatformMessage::set_eventname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
}
inline void DataPlatformMessage::set_eventname(const char* value,
    size_t size) {
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
}
inline std::string* DataPlatformMessage::_internal_mutable_eventname() {
  
  return eventname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataPlatformMessage::release_eventname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
  return eventname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataPlatformMessage::set_allocated_eventname(std::string* eventname) {
  if (eventname != nullptr) {
    
  } else {
    
  }
  eventname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.eventName)
}

// string externalId = 2;
inline void DataPlatformMessage::clear_externalid() {
  externalid_.ClearToEmpty();
}
inline const std::string& DataPlatformMessage::externalid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
  return _internal_externalid();
}
inline void DataPlatformMessage::set_externalid(const std::string& value) {
  _internal_set_externalid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
}
inline std::string* DataPlatformMessage::mutable_externalid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
  return _internal_mutable_externalid();
}
inline const std::string& DataPlatformMessage::_internal_externalid() const {
  return externalid_.Get();
}
inline void DataPlatformMessage::_internal_set_externalid(const std::string& value) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataPlatformMessage::set_externalid(std::string&& value) {
  
  externalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
}
inline void DataPlatformMessage::set_externalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
}
inline void DataPlatformMessage::set_externalid(const char* value,
    size_t size) {
  
  externalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
}
inline std::string* DataPlatformMessage::_internal_mutable_externalid() {
  
  return externalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataPlatformMessage::release_externalid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
  return externalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataPlatformMessage::set_allocated_externalid(std::string* externalid) {
  if (externalid != nullptr) {
    
  } else {
    
  }
  externalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.externalId)
}

// .farm.nurture.core.contracts.common.DPSource dpSource = 3;
inline void DataPlatformMessage::clear_dpsource() {
  dpsource_ = 0;
}
inline ::farm::nurture::core::contracts::common::DPSource DataPlatformMessage::_internal_dpsource() const {
  return static_cast< ::farm::nurture::core::contracts::common::DPSource >(dpsource_);
}
inline ::farm::nurture::core::contracts::common::DPSource DataPlatformMessage::dpsource() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.dpSource)
  return _internal_dpsource();
}
inline void DataPlatformMessage::_internal_set_dpsource(::farm::nurture::core::contracts::common::DPSource value) {
  
  dpsource_ = value;
}
inline void DataPlatformMessage::set_dpsource(::farm::nurture::core::contracts::common::DPSource value) {
  _internal_set_dpsource(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.dpSource)
}

// int32 versionCode = 4;
inline void DataPlatformMessage::clear_versioncode() {
  versioncode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPlatformMessage::_internal_versioncode() const {
  return versioncode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPlatformMessage::versioncode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.versionCode)
  return _internal_versioncode();
}
inline void DataPlatformMessage::_internal_set_versioncode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  versioncode_ = value;
}
inline void DataPlatformMessage::set_versioncode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_versioncode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.versionCode)
}

// string versionName = 5;
inline void DataPlatformMessage::clear_versionname() {
  versionname_.ClearToEmpty();
}
inline const std::string& DataPlatformMessage::versionname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
  return _internal_versionname();
}
inline void DataPlatformMessage::set_versionname(const std::string& value) {
  _internal_set_versionname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
}
inline std::string* DataPlatformMessage::mutable_versionname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
  return _internal_mutable_versionname();
}
inline const std::string& DataPlatformMessage::_internal_versionname() const {
  return versionname_.Get();
}
inline void DataPlatformMessage::_internal_set_versionname(const std::string& value) {
  
  versionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataPlatformMessage::set_versionname(std::string&& value) {
  
  versionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
}
inline void DataPlatformMessage::set_versionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  versionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
}
inline void DataPlatformMessage::set_versionname(const char* value,
    size_t size) {
  
  versionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
}
inline std::string* DataPlatformMessage::_internal_mutable_versionname() {
  
  return versionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataPlatformMessage::release_versionname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
  return versionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataPlatformMessage::set_allocated_versionname(std::string* versionname) {
  if (versionname != nullptr) {
    
  } else {
    
  }
  versionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), versionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.versionName)
}

// string osVersion = 6;
inline void DataPlatformMessage::clear_osversion() {
  osversion_.ClearToEmpty();
}
inline const std::string& DataPlatformMessage::osversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
  return _internal_osversion();
}
inline void DataPlatformMessage::set_osversion(const std::string& value) {
  _internal_set_osversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
}
inline std::string* DataPlatformMessage::mutable_osversion() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
  return _internal_mutable_osversion();
}
inline const std::string& DataPlatformMessage::_internal_osversion() const {
  return osversion_.Get();
}
inline void DataPlatformMessage::_internal_set_osversion(const std::string& value) {
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataPlatformMessage::set_osversion(std::string&& value) {
  
  osversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
}
inline void DataPlatformMessage::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
}
inline void DataPlatformMessage::set_osversion(const char* value,
    size_t size) {
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
}
inline std::string* DataPlatformMessage::_internal_mutable_osversion() {
  
  return osversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataPlatformMessage::release_osversion() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
  return osversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataPlatformMessage::set_allocated_osversion(std::string* osversion) {
  if (osversion != nullptr) {
    
  } else {
    
  }
  osversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.osVersion)
}

// .farm.nurture.core.contracts.common.AppNameType appNameType = 7;
inline bool DataPlatformMessage::_internal_has_appnametype() const {
  return this != internal_default_instance() && appnametype_ != nullptr;
}
inline bool DataPlatformMessage::has_appnametype() const {
  return _internal_has_appnametype();
}
inline void DataPlatformMessage::clear_appnametype() {
  if (GetArena() == nullptr && appnametype_ != nullptr) {
    delete appnametype_;
  }
  appnametype_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::AppNameType& DataPlatformMessage::_internal_appnametype() const {
  const ::farm::nurture::core::contracts::common::AppNameType* p = appnametype_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::AppNameType&>(
      ::farm::nurture::core::contracts::common::_AppNameType_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::AppNameType& DataPlatformMessage::appnametype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.appNameType)
  return _internal_appnametype();
}
inline void DataPlatformMessage::unsafe_arena_set_allocated_appnametype(
    ::farm::nurture::core::contracts::common::AppNameType* appnametype) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appnametype_);
  }
  appnametype_ = appnametype;
  if (appnametype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.appNameType)
}
inline ::farm::nurture::core::contracts::common::AppNameType* DataPlatformMessage::release_appnametype() {
  
  ::farm::nurture::core::contracts::common::AppNameType* temp = appnametype_;
  appnametype_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::AppNameType* DataPlatformMessage::unsafe_arena_release_appnametype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.appNameType)
  
  ::farm::nurture::core::contracts::common::AppNameType* temp = appnametype_;
  appnametype_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::AppNameType* DataPlatformMessage::_internal_mutable_appnametype() {
  
  if (appnametype_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::AppNameType>(GetArena());
    appnametype_ = p;
  }
  return appnametype_;
}
inline ::farm::nurture::core::contracts::common::AppNameType* DataPlatformMessage::mutable_appnametype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.appNameType)
  return _internal_mutable_appnametype();
}
inline void DataPlatformMessage::set_allocated_appnametype(::farm::nurture::core::contracts::common::AppNameType* appnametype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appnametype_;
  }
  if (appnametype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appnametype);
    if (message_arena != submessage_arena) {
      appnametype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appnametype, submessage_arena);
    }
    
  } else {
    
  }
  appnametype_ = appnametype;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.appNameType)
}

// .farm.nurture.core.contracts.common.EventType eventType = 8;
inline void DataPlatformMessage::clear_eventtype() {
  eventtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::EventType DataPlatformMessage::_internal_eventtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::EventType >(eventtype_);
}
inline ::farm::nurture::core::contracts::common::EventType DataPlatformMessage::eventtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.eventType)
  return _internal_eventtype();
}
inline void DataPlatformMessage::_internal_set_eventtype(::farm::nurture::core::contracts::common::EventType value) {
  
  eventtype_ = value;
}
inline void DataPlatformMessage::set_eventtype(::farm::nurture::core::contracts::common::EventType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.eventType)
}

// int64 sessionId = 9;
inline void DataPlatformMessage::clear_sessionid() {
  sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataPlatformMessage::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataPlatformMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.sessionId)
  return _internal_sessionid();
}
inline void DataPlatformMessage::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sessionid_ = value;
}
inline void DataPlatformMessage::set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.sessionId)
}

// .google.protobuf.Timestamp timestamp = 10;
inline bool DataPlatformMessage::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool DataPlatformMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataPlatformMessage::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataPlatformMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.timestamp)
  return _internal_timestamp();
}
inline void DataPlatformMessage::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataPlatformMessage::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataPlatformMessage::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataPlatformMessage::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataPlatformMessage::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.timestamp)
  return _internal_mutable_timestamp();
}
inline void DataPlatformMessage::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.timestamp)
}

// .farm.nurture.core.contracts.common.ActorID actor = 11;
inline bool DataPlatformMessage::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool DataPlatformMessage::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& DataPlatformMessage::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& DataPlatformMessage::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.actor)
  return _internal_actor();
}
inline void DataPlatformMessage::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* DataPlatformMessage::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DataPlatformMessage::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DataPlatformMessage::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* DataPlatformMessage::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.actor)
  return _internal_mutable_actor();
}
inline void DataPlatformMessage::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.actor)
}

// bytes eventData = 12;
inline void DataPlatformMessage::clear_eventdata() {
  eventdata_.ClearToEmpty();
}
inline const std::string& DataPlatformMessage::eventdata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
  return _internal_eventdata();
}
inline void DataPlatformMessage::set_eventdata(const std::string& value) {
  _internal_set_eventdata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
}
inline std::string* DataPlatformMessage::mutable_eventdata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
  return _internal_mutable_eventdata();
}
inline const std::string& DataPlatformMessage::_internal_eventdata() const {
  return eventdata_.Get();
}
inline void DataPlatformMessage::_internal_set_eventdata(const std::string& value) {
  
  eventdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataPlatformMessage::set_eventdata(std::string&& value) {
  
  eventdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
}
inline void DataPlatformMessage::set_eventdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
}
inline void DataPlatformMessage::set_eventdata(const void* value,
    size_t size) {
  
  eventdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
}
inline std::string* DataPlatformMessage::_internal_mutable_eventdata() {
  
  return eventdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataPlatformMessage::release_eventdata() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
  return eventdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataPlatformMessage::set_allocated_eventdata(std::string* eventdata) {
  if (eventdata != nullptr) {
    
  } else {
    
  }
  eventdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DataPlatformMessage.eventData)
}

// .farm.nurture.core.contracts.common.EventSubType eventSubType = 13;
inline void DataPlatformMessage::clear_eventsubtype() {
  eventsubtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::EventSubType DataPlatformMessage::_internal_eventsubtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::EventSubType >(eventsubtype_);
}
inline ::farm::nurture::core::contracts::common::EventSubType DataPlatformMessage::eventsubtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.eventSubType)
  return _internal_eventsubtype();
}
inline void DataPlatformMessage::_internal_set_eventsubtype(::farm::nurture::core::contracts::common::EventSubType value) {
  
  eventsubtype_ = value;
}
inline void DataPlatformMessage::set_eventsubtype(::farm::nurture::core::contracts::common::EventSubType value) {
  _internal_set_eventsubtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.eventSubType)
}

// .farm.nurture.core.contracts.common.NameSpace namespace = 14;
inline void DataPlatformMessage::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace DataPlatformMessage::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace DataPlatformMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.namespace)
  return _internal_namespace_();
}
inline void DataPlatformMessage::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void DataPlatformMessage::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.namespace)
}

// int32 eventIndex = 15;
inline void DataPlatformMessage::clear_eventindex() {
  eventindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPlatformMessage::_internal_eventindex() const {
  return eventindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPlatformMessage::eventindex() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DataPlatformMessage.eventIndex)
  return _internal_eventindex();
}
inline void DataPlatformMessage::_internal_set_eventindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventindex_ = value;
}
inline void DataPlatformMessage::set_eventindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventindex(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DataPlatformMessage.eventIndex)
}

// -------------------------------------------------------------------

// AppNameType

// string key = 1;
inline void AppNameType::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& AppNameType::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.AppNameType.key)
  return _internal_key();
}
inline void AppNameType::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.AppNameType.key)
}
inline std::string* AppNameType::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.AppNameType.key)
  return _internal_mutable_key();
}
inline const std::string& AppNameType::_internal_key() const {
  return key_.Get();
}
inline void AppNameType::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppNameType::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.AppNameType.key)
}
inline void AppNameType::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.AppNameType.key)
}
inline void AppNameType::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.AppNameType.key)
}
inline std::string* AppNameType::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppNameType::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.AppNameType.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppNameType::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.AppNameType.key)
}

// string value = 2;
inline void AppNameType::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AppNameType::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.AppNameType.value)
  return _internal_value();
}
inline void AppNameType::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.AppNameType.value)
}
inline std::string* AppNameType::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.AppNameType.value)
  return _internal_mutable_value();
}
inline const std::string& AppNameType::_internal_value() const {
  return value_.Get();
}
inline void AppNameType::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppNameType::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.AppNameType.value)
}
inline void AppNameType::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.AppNameType.value)
}
inline void AppNameType::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.AppNameType.value)
}
inline std::string* AppNameType::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppNameType::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.AppNameType.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppNameType::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.AppNameType.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fheaders_2eproto
