// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/geo_common.proto

#include "Common/geo_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Environment_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapTile_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Options_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Place_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2ftime_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_Common_2ftime_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2ftime_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSlot_Common_2ftime_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Value_Common_2fgeo_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class PlaceTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceTag> _instance;
} _PlaceTag_default_instance_;
class ValidationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationResponse> _instance;
} _ValidationResponse_default_instance_;
class GeoPlacesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPlaces> _instance;
} _GeoPlaces_default_instance_;
class ValidationResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationResults> _instance;
} _ValidationResults_default_instance_;
class GeometryToValidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryToValidate> _instance;
} _GeometryToValidate_default_instance_;
class ValidationsApplicableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationsApplicable> _instance;
} _ValidationsApplicable_default_instance_;
class FilterArgumentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterArguments> _instance;
} _FilterArguments_default_instance_;
class FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter> _instance;
} _Filter_default_instance_;
class BaseConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseConditions> _instance;
} _BaseConditions_default_instance_;
class ReferenceAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceAttribute> _instance;
} _ReferenceAttribute_default_instance_;
class ZoomRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZoomRange> _instance;
} _ZoomRange_default_instance_;
class MapTileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapTile> _instance;
} _MapTile_default_instance_;
class EnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Environment> _instance;
} _Environment_default_instance_;
class PlaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Place> _instance;
} _Place_default_instance_;
class AttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribute> _instance;
} _Attribute_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
} _Value_default_instance_;
class OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Options> _instance;
} _Options_default_instance_;
class UserContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class PlacesDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlacesData> _instance;
} _PlacesData_default_instance_;
class ConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Configuration> _instance;
} _Configuration_default_instance_;
class TileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TileRequest> _instance;
} _TileRequest_default_instance_;
class TileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TileResponse> _instance;
} _TileResponse_default_instance_;
class UpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRequest> _instance;
} _UpdateRequest_default_instance_;
class UpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateResponse> _instance;
} _UpdateResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRequest> _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResponse> _instance;
} _DeleteResponse_default_instance_;
class InsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRequest> _instance;
} _InsertRequest_default_instance_;
class InsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertResponse> _instance;
} _InsertResponse_default_instance_;
class LatLngDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatLng> _instance;
} _LatLng_default_instance_;
class UpdateReferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReferenceRequest> _instance;
} _UpdateReferenceRequest_default_instance_;
class UpdateReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReferenceResponse> _instance;
} _UpdateReferenceResponse_default_instance_;
class UpdateReferenceResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReferenceResult> _instance;
} _UpdateReferenceResult_default_instance_;
class PlaceReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceReference> _instance;
} _PlaceReference_default_instance_;
class UpdateTagsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTagsRequest> _instance;
} _UpdateTagsRequest_default_instance_;
class UpdatePlaceTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlaceTags> _instance;
} _UpdatePlaceTags_default_instance_;
class UpdateTagsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTagsResponse> _instance;
} _UpdateTagsResponse_default_instance_;
class UpdateTagResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTagResult> _instance;
} _UpdateTagResult_default_instance_;
class PlaceTagValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceTagValue> _instance;
} _PlaceTagValue_default_instance_;
class OverlappingPlaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverlappingPlace> _instance;
} _OverlappingPlace_default_instance_;
class OverlappingPlacesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverlappingPlaces> _instance;
} _OverlappingPlaces_default_instance_;
class ValidationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validation> _instance;
} _Validation_default_instance_;
class RasterDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RasterDataRequest> _instance;
} _RasterDataRequest_default_instance_;
class RasterDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RasterDataResponse> _instance;
} _RasterDataResponse_default_instance_;
class MapTilesToPreSignedUrlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapTilesToPreSignedUrl> _instance;
} _MapTilesToPreSignedUrl_default_instance_;
class RegisterSourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterSourceConfig> _instance;
} _RegisterSourceConfig_default_instance_;
class NSVPlaceIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NSVPlaceId> _instance;
} _NSVPlaceId_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_Attribute_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Attribute_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Attribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Attribute_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Value_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_BaseConditions_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::BaseConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Configuration_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Configuration_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configuration_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Configuration_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_DeleteRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::DeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_DeleteResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::DeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Environment_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Environment_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Environment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Environment_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Environment_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Filter_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Filter_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Filter_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_FilterArguments_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::FilterArguments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Value_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_GeoPlaces_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::GeoPlaces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_GeometryToValidate_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::GeometryToValidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_InsertRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::InsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Options_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Filter_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_InsertResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::InsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LatLng_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_LatLng_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::LatLng();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatLng_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatLng_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_MapTile_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_MapTile_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::MapTile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapTile_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapTile_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_MapTilesToPreSignedUrl_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_MapTile_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_NSVPlaceId_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::NSVPlaceId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_Options_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Options_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Options_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Options_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_OverlappingPlace_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::OverlappingPlace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_OverlappingPlaces_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::OverlappingPlaces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Place_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Place_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Place();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Place_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Place_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_TimeRange_Common_2ftime_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_PlaceReference_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::PlaceReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_PlaceTag_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::PlaceTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_PlaceTagValue_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::PlaceTagValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PlacesData_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_PlacesData_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::PlacesData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlacesData_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlacesData_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_RasterDataRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::RasterDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_MapTile_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_TimeSlot_Common_2ftime_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_RasterDataResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::RasterDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ReferenceAttribute_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ReferenceAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Attribute_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_RegisterSourceConfig_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::RegisterSourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_TimeRange_Common_2ftime_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_TileRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_TileRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::TileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TileRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TileRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_MapTile_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Filter_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TileResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_TileResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::TileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TileResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TileResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdatePlaceTags_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdatePlaceTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateReferenceRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateReferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Options_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateReferenceResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateReferenceResult_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateReferenceResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Options_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateTagResult_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateTagResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateTagsRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateTagsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_Options_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UpdateTagsResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UpdateTagsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UserContext_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_UserContext_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::UserContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserContext_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserContext_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_Validation_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Validation_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Validation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Validation_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Validation_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ValidationResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ValidationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ValidationResults_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ValidationResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto}, {
      &scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto.base,
      &scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ValidationsApplicable_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ValidationsApplicable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_Value_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_Value_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Value_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Value_Common_2fgeo_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::common::_ZoomRange_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::common::ZoomRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Common_2fgeo_5fcommon_2eproto[46];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Common_2fgeo_5fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fgeo_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fgeo_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, placetagname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, placetagpropertyname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, placetagpropertyvalue_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, tagname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, tagpropertykey_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, tagpropertyvalue_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, placetagid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTag, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResponse, valcode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResponse, dsc_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResponse, valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeoPlaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeoPlaces, geometry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeoPlaces, placeid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeoPlaces, geometryrepresentationtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeoPlaces, placetags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, vldtrs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, valid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, validationtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, validationname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, asserttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationResults, places_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, plcsrctype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, plcnmspce_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, plcvsble_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, auditrequired_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, minzoom_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, maxzoom_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, uiclient_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, validationsapplicable_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, gmrprtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, gmt_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, thresholddistance_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::GeometryToValidate, plcids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationsApplicable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationsApplicable, validationtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationsApplicable, validationname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ValidationsApplicable, asserttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, placeids_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, placetagids_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, tagnames_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, tagproperties_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, stringvalues_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, reference_types_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, attribute_keys_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::FilterArguments, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Filter, basecondition_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Filter, combiningoperator_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Filter, conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::BaseConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::BaseConditions, filterkey_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::BaseConditions, operator__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::BaseConditions, argument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ReferenceAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ReferenceAttribute, reference_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ReferenceAttribute, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ZoomRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ZoomRange, minzoom_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::ZoomRange, maxzoom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTile, zoom_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTile, tilex_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTile, tiley_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, sourcetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, visibletype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, model_version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, zoom_hints_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Environment, client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, geometry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, representation_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, tags_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, reference_attributes_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, time_range_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, place_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, source_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, deleted_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, overlap_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Place, source_id_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribute, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Attribute, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, value_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, number_value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, string_value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, bool_value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, int64_value_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Value, int32_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Options, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Options, check_overlap_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Options, get_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UserContext, ugdnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, sourceid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, geometry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, placeid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, geometryrepresentationtype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, placetags_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, place_source_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, place_name_space_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, place_visible_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlacesData, geometry_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Configuration, audit_required_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Configuration, overlap_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Configuration, soft_delete_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Configuration, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileRequest, maptiles_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileRequest, tag_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::TileResponse, places_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateRequest, places_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateResponse, updated_places_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateResponse, updated_places_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateResponse, places_with_overlaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteRequest, place_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteResponse, deleted_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::DeleteResponse, deleted_places_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertRequest, options_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertRequest, places_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertRequest, tag_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertResponse, inserted_or_updated_places_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertResponse, inserted_or_updated_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::InsertResponse, places_with_overlaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LatLng, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LatLng, lat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::LatLng, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceRequest, references_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResponse, update_ref_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, updated_place_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, new_refs_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, appended_refs_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, added_ref_values_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, deleted_refs_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateReferenceResult, deleted_ref_values_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, place_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, replace_ref_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, delete_references_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, delete_ref_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceReference, append_ref_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsRequest, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsRequest, tags_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, place_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, replace_tag_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, delete_tags_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, delete_tag_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdatePlaceTags, append_tag_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsResponse, env_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagsResponse, update_tag_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, updated_place_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, new_tags_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, appended_tags_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, added_tag_values_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, deleted_tags_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::UpdateTagResult, deleted_tag_values_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, value_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, float_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, string_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, bool_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, int64_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, int32_values_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::PlaceTagValue, nsv_place_id_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlace, place_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlace, source_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlace, intersecting_geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlaces, place_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlaces, source_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::OverlappingPlaces, overlaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Validation, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::Validation, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataRequest, environment_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataRequest, map_tiles_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataRequest, time_slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataResponse, environment_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RasterDataResponse, pre_signed_urls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl, map_tile_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl, pre_signed_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, cloudstore_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, url_builder_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, satellite_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, band_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, valid_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, base_directory_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::RegisterSourceConfig, date_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::NSVPlaceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::NSVPlaceId, placenamespace_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::NSVPlaceId, placesourcetype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::NSVPlaceId, placevisibletype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::common::NSVPlaceId, place_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::common::PlaceTag)},
  { 13, -1, sizeof(::farm::nurture::core::contracts::common::ValidationResponse)},
  { 22, -1, sizeof(::farm::nurture::core::contracts::common::GeoPlaces)},
  { 31, -1, sizeof(::farm::nurture::core::contracts::common::ValidationResults)},
  { 42, -1, sizeof(::farm::nurture::core::contracts::common::GeometryToValidate)},
  { 60, -1, sizeof(::farm::nurture::core::contracts::common::ValidationsApplicable)},
  { 68, -1, sizeof(::farm::nurture::core::contracts::common::FilterArguments)},
  { 81, -1, sizeof(::farm::nurture::core::contracts::common::Filter)},
  { 89, -1, sizeof(::farm::nurture::core::contracts::common::BaseConditions)},
  { 97, -1, sizeof(::farm::nurture::core::contracts::common::ReferenceAttribute)},
  { 104, -1, sizeof(::farm::nurture::core::contracts::common::ZoomRange)},
  { 111, -1, sizeof(::farm::nurture::core::contracts::common::MapTile)},
  { 119, -1, sizeof(::farm::nurture::core::contracts::common::Environment)},
  { 130, -1, sizeof(::farm::nurture::core::contracts::common::Place)},
  { 146, -1, sizeof(::farm::nurture::core::contracts::common::Attribute)},
  { 153, -1, sizeof(::farm::nurture::core::contracts::common::Value)},
  { 164, -1, sizeof(::farm::nurture::core::contracts::common::Options)},
  { 171, -1, sizeof(::farm::nurture::core::contracts::common::UserContext)},
  { 177, -1, sizeof(::farm::nurture::core::contracts::common::PlacesData)},
  { 191, -1, sizeof(::farm::nurture::core::contracts::common::Configuration)},
  { 200, -1, sizeof(::farm::nurture::core::contracts::common::TileRequest)},
  { 208, -1, sizeof(::farm::nurture::core::contracts::common::TileResponse)},
  { 215, -1, sizeof(::farm::nurture::core::contracts::common::UpdateRequest)},
  { 223, -1, sizeof(::farm::nurture::core::contracts::common::UpdateResponse)},
  { 232, -1, sizeof(::farm::nurture::core::contracts::common::DeleteRequest)},
  { 239, -1, sizeof(::farm::nurture::core::contracts::common::DeleteResponse)},
  { 247, -1, sizeof(::farm::nurture::core::contracts::common::InsertRequest)},
  { 256, -1, sizeof(::farm::nurture::core::contracts::common::InsertResponse)},
  { 265, -1, sizeof(::farm::nurture::core::contracts::common::LatLng)},
  { 272, -1, sizeof(::farm::nurture::core::contracts::common::UpdateReferenceRequest)},
  { 280, -1, sizeof(::farm::nurture::core::contracts::common::UpdateReferenceResponse)},
  { 287, -1, sizeof(::farm::nurture::core::contracts::common::UpdateReferenceResult)},
  { 298, -1, sizeof(::farm::nurture::core::contracts::common::PlaceReference)},
  { 308, -1, sizeof(::farm::nurture::core::contracts::common::UpdateTagsRequest)},
  { 316, -1, sizeof(::farm::nurture::core::contracts::common::UpdatePlaceTags)},
  { 326, -1, sizeof(::farm::nurture::core::contracts::common::UpdateTagsResponse)},
  { 333, -1, sizeof(::farm::nurture::core::contracts::common::UpdateTagResult)},
  { 344, -1, sizeof(::farm::nurture::core::contracts::common::PlaceTagValue)},
  { 356, -1, sizeof(::farm::nurture::core::contracts::common::OverlappingPlace)},
  { 364, -1, sizeof(::farm::nurture::core::contracts::common::OverlappingPlaces)},
  { 372, -1, sizeof(::farm::nurture::core::contracts::common::Validation)},
  { 379, -1, sizeof(::farm::nurture::core::contracts::common::RasterDataRequest)},
  { 387, -1, sizeof(::farm::nurture::core::contracts::common::RasterDataResponse)},
  { 394, -1, sizeof(::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl)},
  { 401, -1, sizeof(::farm::nurture::core::contracts::common::RegisterSourceConfig)},
  { 413, -1, sizeof(::farm::nurture::core::contracts::common::NSVPlaceId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_PlaceTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ValidationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_GeoPlaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ValidationResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_GeometryToValidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ValidationsApplicable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_FilterArguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_BaseConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ReferenceAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_ZoomRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_MapTile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Environment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Place_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Attribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UserContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_PlacesData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_TileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_TileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_InsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_InsertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_LatLng_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateReferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateReferenceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_PlaceReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateTagsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdatePlaceTags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateTagsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_UpdateTagResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_PlaceTagValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_OverlappingPlace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_OverlappingPlaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_Validation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_RasterDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_RasterDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_MapTilesToPreSignedUrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_RegisterSourceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::common::_NSVPlaceId_default_instance_),
};

const char descriptor_table_protodef_Common_2fgeo_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Common/geo_common.proto\022\"farm.nurture."
  "core.contracts.common\032\026Common/geo_enums."
  "proto\032\022Common/enums.proto\032\026Common/time_s"
  "lot.proto\"\336\002\n\010PlaceTag\022\024\n\014placeTagName\030\001"
  " \001(\t\022\034\n\024placeTagPropertyName\030\002 \001(\t\022\035\n\025pl"
  "aceTagPropertyValue\030\003 \001(\t\022A\n\007TagName\030\004 \001"
  "(\01620.farm.nurture.core.contracts.common."
  "PlaceTagName\022L\n\016TagPropertyKey\030\005 \001(\01624.f"
  "arm.nurture.core.contracts.common.PlaceT"
  "agProperty\022\030\n\020TagPropertyValue\030\006 \001(\t\022\022\n\n"
  "PlaceTagId\030\007 \001(\003\022@\n\005value\030\010 \001(\01321.farm.n"
  "urture.core.contracts.common.PlaceTagVal"
  "ue\"\305\001\n\022ValidationResponse\022F\n\003msg\030\001 \001(\01629"
  ".farm.nurture.core.contracts.common.Vali"
  "dationResponseMsg\022K\n\007valCode\030\002 \001(\0162:.far"
  "m.nurture.core.contracts.common.Validati"
  "onResponseCode\022\013\n\003dsc\030\003 \001(\t\022\r\n\005valid\030\004 \001"
  "(\010\"\323\001\n\tGeoPlaces\022\020\n\010geometry\030\001 \001(\t\022\017\n\007Pl"
  "aceId\030\002 \001(\003\022b\n\032geometryRepresentationTyp"
  "e\030\003 \001(\0162>.farm.nurture.core.contracts.co"
  "mmon.GeometryRepresentationType\022\?\n\tPlace"
  "Tags\030\004 \003(\0132,.farm.nurture.core.contracts"
  ".common.PlaceTag\"\216\003\n\021ValidationResults\022F"
  "\n\006vldtRs\030\001 \001(\01326.farm.nurture.core.contr"
  "acts.common.ValidationResponse\022\r\n\005valid\030"
  "\002 \001(\010\022M\n\016validationType\030\003 \001(\01625.farm.nur"
  "ture.core.contracts.common.GeoValidation"
  "Type\022M\n\016validationName\030\004 \001(\01625.farm.nurt"
  "ure.core.contracts.common.GeoValidationN"
  "ame\022E\n\nassertType\030\005 \001(\01621.farm.nurture.c"
  "ore.contracts.common.AssertionType\022=\n\006pl"
  "aces\030\006 \003(\0132-.farm.nurture.core.contracts"
  ".common.GeoPlaces\"\334\004\n\022GeometryToValidate"
  "\022G\n\nPlcSrcType\030\001 \001(\01623.farm.nurture.core"
  ".contracts.common.PlaceSourceType\022E\n\tPlc"
  "Nmspce\030\002 \001(\01622.farm.nurture.core.contrac"
  "ts.common.PlaceNamespace\022F\n\010PlcVsble\030\003 \001"
  "(\01624.farm.nurture.core.contracts.common."
  "PlaceVisibleType\022\017\n\007version\030\004 \001(\t\022\025\n\rAud"
  "itRequired\030\005 \001(\010\022\017\n\007MinZoom\030\006 \001(\005\022\017\n\007Max"
  "Zoom\030\007 \001(\005\022\?\n\010UiClient\030\t \001(\0162-.farm.nurt"
  "ure.core.contracts.common.UI_CLIENT\022X\n\025v"
  "alidationsApplicable\030\n \003(\01329.farm.nurtur"
  "e.core.contracts.common.ValidationsAppli"
  "cable\022Q\n\tgmRprType\030\017 \001(\0162>.farm.nurture."
  "core.contracts.common.GeometryRepresenta"
  "tionType\022\013\n\003gmt\030\020 \001(\t\022\031\n\021thresholdDistan"
  "ce\030\021 \001(\005\022\016\n\006plcIds\030\022 \003(\003\"\374\001\n\025Validations"
  "Applicable\022M\n\016validationType\030\001 \001(\01625.far"
  "m.nurture.core.contracts.common.GeoValid"
  "ationType\022M\n\016validationName\030\002 \001(\01625.farm"
  ".nurture.core.contracts.common.GeoValida"
  "tionName\022E\n\nassertType\030\003 \001(\01621.farm.nurt"
  "ure.core.contracts.common.AssertionType\""
  "\260\003\n\017FilterArguments\022\020\n\010placeIds\030\001 \003(\003\022\023\n"
  "\013placeTagIds\030\002 \003(\003\022B\n\010tagNames\030\003 \003(\01620.f"
  "arm.nurture.core.contracts.common.PlaceT"
  "agName\022K\n\rtagProperties\030\004 \003(\01624.farm.nur"
  "ture.core.contracts.common.PlaceTagPrope"
  "rty\022\024\n\014StringValues\030\005 \003(\t\022J\n\017reference_t"
  "ypes\030\006 \003(\01621.farm.nurture.core.contracts"
  ".common.ReferenceType\022H\n\016attribute_keys\030"
  "\007 \003(\01620.farm.nurture.core.contracts.comm"
  "on.AttributeKey\0229\n\006values\030\010 \003(\0132).farm.n"
  "urture.core.contracts.common.Value\"\341\001\n\006F"
  "ilter\022I\n\rbaseCondition\030\001 \001(\01322.farm.nurt"
  "ure.core.contracts.common.BaseConditions"
  "\022L\n\021combiningOperator\030\002 \001(\01621.farm.nurtu"
  "re.core.contracts.common.LogicOperator\022>"
  "\n\nconditions\030\003 \003(\0132*.farm.nurture.core.c"
  "ontracts.common.Filter\"\344\001\n\016BaseCondition"
  "s\022@\n\tfilterKey\030\001 \001(\0162-.farm.nurture.core"
  ".contracts.common.FilterKey\022I\n\010operator\030"
  "\002 \001(\01627.farm.nurture.core.contracts.comm"
  "on.ComparisonCheckType\022E\n\010argument\030\003 \001(\013"
  "23.farm.nurture.core.contracts.common.Fi"
  "lterArguments\"\242\001\n\022ReferenceAttribute\022I\n\016"
  "reference_type\030\001 \001(\01621.farm.nurture.core"
  ".contracts.common.ReferenceType\022A\n\nattri"
  "butes\030\002 \003(\0132-.farm.nurture.core.contract"
  "s.common.Attribute\"-\n\tZoomRange\022\017\n\007minZo"
  "om\030\001 \001(\005\022\017\n\007maxZoom\030\002 \001(\005\"5\n\007MapTile\022\014\n\004"
  "zoom\030\001 \001(\005\022\r\n\005tileX\030\002 \001(\003\022\r\n\005tileY\030\003 \001(\003"
  "\"\201\003\n\013Environment\022E\n\tnamespace\030\001 \001(\01622.fa"
  "rm.nurture.core.contracts.common.PlaceNa"
  "mespace\022G\n\nsourceType\030\002 \001(\01623.farm.nurtu"
  "re.core.contracts.common.PlaceSourceType"
  "\022I\n\013visibleType\030\003 \001(\01624.farm.nurture.cor"
  "e.contracts.common.PlaceVisibleType\022\025\n\rm"
  "odel_version\030\004 \001(\t\022A\n\nzoom_hints\030\005 \001(\0132-"
  ".farm.nurture.core.contracts.common.Zoom"
  "Range\022=\n\006client\030\006 \001(\0162-.farm.nurture.cor"
  "e.contracts.common.UI_CLIENT\"\272\003\n\005Place\022\020"
  "\n\010geometry\030\001 \001(\t\022[\n\023representation_type\030"
  "\002 \001(\0162>.farm.nurture.core.contracts.comm"
  "on.GeometryRepresentationType\022:\n\004tags\030\003 "
  "\003(\0132,.farm.nurture.core.contracts.common"
  ".PlaceTag\022T\n\024reference_attributes\030\004 \003(\0132"
  "6.farm.nurture.core.contracts.common.Ref"
  "erenceAttribute\022A\n\ntime_range\030\005 \001(\0132-.fa"
  "rm.nurture.core.contracts.common.TimeRan"
  "ge\022\020\n\010place_id\030\006 \001(\003\022\021\n\tsource_id\030\007 \001(\003\022"
  "\017\n\007version\030\010 \001(\003\022\017\n\007deleted\030\t \001(\010\022\017\n\007ove"
  "rlap\030\n \001(\010\022\025\n\rsource_id_str\030\013 \001(\t\"\204\001\n\tAt"
  "tribute\022=\n\003key\030\001 \001(\01620.farm.nurture.core"
  ".contracts.common.AttributeKey\0228\n\005value\030"
  "\002 \001(\0132).farm.nurture.core.contracts.comm"
  "on.Value\"\264\001\n\005Value\022A\n\nvalue_type\030\001 \001(\0162-"
  ".farm.nurture.core.contracts.common.Valu"
  "eType\022\024\n\014number_value\030\002 \001(\001\022\024\n\014string_va"
  "lue\030\003 \001(\t\022\022\n\nbool_value\030\004 \001(\010\022\023\n\013int64_v"
  "alue\030\005 \001(\003\022\023\n\013int32_value\030\006 \001(\005\"5\n\007Optio"
  "ns\022\025\n\rcheck_overlap\030\001 \001(\010\022\023\n\013get_details"
  "\030\002 \001(\010\"\035\n\013UserContext\022\016\n\006ugdnID\030\001 \001(\003\"\237\004"
  "\n\nPlacesData\022\020\n\010SourceId\030\001 \001(\t\022\020\n\010geomet"
  "ry\030\002 \001(\t\022\017\n\007PlaceId\030\003 \001(\003\022b\n\032geometryRep"
  "resentationType\030\004 \001(\0162>.farm.nurture.cor"
  "e.contracts.common.GeometryRepresentatio"
  "nType\022\?\n\tPlaceTags\030\005 \003(\0132,.farm.nurture."
  "core.contracts.common.PlaceTag\022N\n\021place_"
  "source_type\030\006 \001(\01623.farm.nurture.core.co"
  "ntracts.common.PlaceSourceType\022L\n\020place_"
  "name_space\030\007 \001(\01622.farm.nurture.core.con"
  "tracts.common.PlaceNamespace\022P\n\022place_vi"
  "sible_type\030\010 \001(\01624.farm.nurture.core.con"
  "tracts.common.PlaceVisibleType\022G\n\rgeomet"
  "ry_type\030\t \001(\01620.farm.nurture.core.contra"
  "cts.common.GeometryType\"\224\001\n\rConfiguratio"
  "n\022\026\n\016audit_required\030\001 \001(\010\022\017\n\007overlap\030\002 \001"
  "(\010\022\023\n\013soft_delete\030\003 \001(\010\022E\n\014service_name\030"
  "\004 \001(\0162/.farm.nurture.core.contracts.comm"
  "on.ServiceName\"\312\001\n\013TileRequest\022<\n\003env\030\001 "
  "\001(\0132/.farm.nurture.core.contracts.common"
  ".Environment\022=\n\010mapTiles\030\002 \003(\0132+.farm.nu"
  "rture.core.contracts.common.MapTile\022>\n\nt"
  "ag_filter\030\003 \001(\0132*.farm.nurture.core.cont"
  "racts.common.Filter\"\207\001\n\014TileResponse\022<\n\003"
  "env\030\001 \001(\0132/.farm.nurture.core.contracts."
  "common.Environment\0229\n\006places\030\002 \003(\0132).far"
  "m.nurture.core.contracts.common.Place\"\306\001"
  "\n\rUpdateRequest\022<\n\003env\030\001 \001(\0132/.farm.nurt"
  "ure.core.contracts.common.Environment\0229\n"
  "\006places\030\002 \003(\0132).farm.nurture.core.contra"
  "cts.common.Place\022<\n\007options\030\003 \001(\0132+.farm"
  ".nurture.core.contracts.common.Options\"\204"
  "\002\n\016UpdateResponse\022<\n\003env\030\001 \001(\0132/.farm.nu"
  "rture.core.contracts.common.Environment\022"
  "A\n\016updated_places\030\002 \003(\0132).farm.nurture.c"
  "ore.contracts.common.Place\022\034\n\024updated_pl"
  "aces_count\030\003 \001(\003\022S\n\024places_with_overlaps"
  "\030\004 \003(\01325.farm.nurture.core.contracts.com"
  "mon.OverlappingPlaces\"`\n\rDeleteRequest\022<"
  "\n\003env\030\001 \001(\0132/.farm.nurture.core.contract"
  "s.common.Environment\022\021\n\tplace_ids\030\002 \003(\003\""
  "\250\001\n\016DeleteResponse\022<\n\003env\030\001 \001(\0132/.farm.n"
  "urture.core.contracts.common.Environment"
  "\022\025\n\rdeleted_count\030\002 \001(\003\022A\n\016deleted_place"
  "s\030\003 \003(\0132).farm.nurture.core.contracts.co"
  "mmon.Place\"\206\002\n\rInsertRequest\022<\n\003env\030\001 \001("
  "\0132/.farm.nurture.core.contracts.common.E"
  "nvironment\022<\n\007options\030\002 \001(\0132+.farm.nurtu"
  "re.core.contracts.common.Options\0229\n\006plac"
  "es\030\003 \003(\0132).farm.nurture.core.contracts.c"
  "ommon.Place\022>\n\ntag_filter\030\004 \001(\0132*.farm.n"
  "urture.core.contracts.common.Filter\"\225\002\n\016"
  "InsertResponse\022<\n\003env\030\001 \001(\0132/.farm.nurtu"
  "re.core.contracts.common.Environment\022M\n\032"
  "inserted_or_updated_places\030\002 \003(\0132).farm."
  "nurture.core.contracts.common.Place\022!\n\031i"
  "nserted_or_updated_count\030\003 \001(\003\022S\n\024places"
  "_with_overlaps\030\004 \003(\01325.farm.nurture.core"
  ".contracts.common.OverlappingPlaces\"\"\n\006L"
  "atLng\022\013\n\003lat\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\"\334\001\n\026Upda"
  "teReferenceRequest\022<\n\003env\030\001 \001(\0132/.farm.n"
  "urture.core.contracts.common.Environment"
  "\022F\n\nreferences\030\002 \003(\01322.farm.nurture.core"
  ".contracts.common.PlaceReference\022<\n\007opti"
  "ons\030\003 \001(\0132+.farm.nurture.core.contracts."
  "common.Options\"\256\001\n\027UpdateReferenceRespon"
  "se\022<\n\003env\030\001 \001(\0132/.farm.nurture.core.cont"
  "racts.common.Environment\022U\n\022update_ref_r"
  "esults\030\002 \003(\01329.farm.nurture.core.contrac"
  "ts.common.UpdateReferenceResult\"\354\001\n\025Upda"
  "teReferenceResult\022@\n\rupdated_place\030\001 \001(\013"
  "2).farm.nurture.core.contracts.common.Pl"
  "ace\022\026\n\016new_refs_count\030\002 \001(\005\022\033\n\023appended_"
  "refs_count\030\003 \001(\005\022\036\n\026added_ref_values_cou"
  "nt\030\004 \001(\005\022\032\n\022deleted_refs_count\030\005 \001(\005\022 \n\030"
  "deleted_ref_values_count\030\006 \001(\005\"\357\002\n\016Place"
  "Reference\022\020\n\010place_id\030\001 \001(\003\022R\n\022replace_r"
  "ef_values\030\002 \003(\01326.farm.nurture.core.cont"
  "racts.common.ReferenceAttribute\022Q\n\021delet"
  "e_references\030\003 \003(\01326.farm.nurture.core.c"
  "ontracts.common.ReferenceAttribute\022Q\n\021de"
  "lete_ref_values\030\004 \003(\01326.farm.nurture.cor"
  "e.contracts.common.ReferenceAttribute\022Q\n"
  "\021append_ref_values\030\005 \003(\01326.farm.nurture."
  "core.contracts.common.ReferenceAttribute"
  "\"\322\001\n\021UpdateTagsRequest\022<\n\003env\030\001 \001(\0132/.fa"
  "rm.nurture.core.contracts.common.Environ"
  "ment\022A\n\004tags\030\002 \003(\01323.farm.nurture.core.c"
  "ontracts.common.UpdatePlaceTags\022<\n\007optio"
  "ns\030\003 \001(\0132+.farm.nurture.core.contracts.c"
  "ommon.Options\"\302\002\n\017UpdatePlaceTags\022\020\n\010pla"
  "ce_id\030\001 \001(\003\022H\n\022replace_tag_values\030\002 \003(\0132"
  ",.farm.nurture.core.contracts.common.Pla"
  "ceTag\022A\n\013delete_tags\030\003 \003(\0132,.farm.nurtur"
  "e.core.contracts.common.PlaceTag\022G\n\021dele"
  "te_tag_values\030\004 \003(\0132,.farm.nurture.core."
  "contracts.common.PlaceTag\022G\n\021append_tag_"
  "values\030\005 \003(\0132,.farm.nurture.core.contrac"
  "ts.common.PlaceTag\"\243\001\n\022UpdateTagsRespons"
  "e\022<\n\003env\030\001 \001(\0132/.farm.nurture.core.contr"
  "acts.common.Environment\022O\n\022update_tag_re"
  "sults\030\002 \003(\01323.farm.nurture.core.contract"
  "s.common.UpdateTagResult\"\346\001\n\017UpdateTagRe"
  "sult\022@\n\rupdated_place\030\001 \001(\0132).farm.nurtu"
  "re.core.contracts.common.Place\022\026\n\016new_ta"
  "gs_count\030\002 \001(\005\022\033\n\023appended_tags_count\030\003 "
  "\001(\005\022\036\n\026added_tag_values_count\030\004 \001(\005\022\032\n\022d"
  "eleted_tags_count\030\005 \001(\005\022 \n\030deleted_tag_v"
  "alues_count\030\006 \001(\005\"\215\002\n\rPlaceTagValue\022A\n\nv"
  "alue_type\030\001 \001(\0162-.farm.nurture.core.cont"
  "racts.common.ValueType\022\024\n\014float_values\030\002"
  " \003(\001\022\025\n\rstring_values\030\003 \003(\t\022\023\n\013bool_valu"
  "es\030\004 \003(\010\022\024\n\014int64_values\030\005 \003(\003\022\024\n\014int32_"
  "values\030\006 \003(\005\022K\n\023nsv_place_id_values\030\007 \003("
  "\0132..farm.nurture.core.contracts.common.N"
  "SVPlaceId\"V\n\020OverlappingPlace\022\020\n\010place_i"
  "d\030\001 \001(\003\022\021\n\tsource_id\030\002 \001(\t\022\035\n\025intersecti"
  "ng_geometry\030\003 \001(\t\"\200\001\n\021OverlappingPlaces\022"
  "\020\n\010place_id\030\001 \001(\003\022\021\n\tsource_id\030\002 \001(\t\022F\n\010"
  "overlaps\030\003 \003(\01324.farm.nurture.core.contr"
  "acts.common.OverlappingPlace\"\220\001\n\nValidat"
  "ion\022@\n\004name\030\001 \001(\01622.farm.nurture.core.co"
  "ntracts.common.ValidationName\022@\n\004type\030\002 "
  "\001(\01622.farm.nurture.core.contracts.common"
  ".ValidationType\"\332\001\n\021RasterDataRequest\022D\n"
  "\013environment\030\001 \001(\0132/.farm.nurture.core.c"
  "ontracts.common.Environment\022>\n\tmap_tiles"
  "\030\002 \003(\0132+.farm.nurture.core.contracts.com"
  "mon.MapTile\022\?\n\ttime_slot\030\003 \001(\0132,.farm.nu"
  "rture.core.contracts.common.TimeSlot\"\257\001\n"
  "\022RasterDataResponse\022D\n\013environment\030\001 \001(\013"
  "2/.farm.nurture.core.contracts.common.En"
  "vironment\022S\n\017pre_signed_urls\030\002 \003(\0132:.far"
  "m.nurture.core.contracts.common.MapTiles"
  "ToPreSignedUrl\"o\n\026MapTilesToPreSignedUrl"
  "\022=\n\010map_tile\030\001 \001(\0132+.farm.nurture.core.c"
  "ontracts.common.MapTile\022\026\n\016pre_signed_ur"
  "l\030\002 \001(\t\"\267\003\n\024RegisterSourceConfig\022B\n\nclou"
  "dStore\030\001 \001(\0162..farm.nurture.core.contrac"
  "ts.common.CloudStore\022C\n\013url_builder\030\002 \001("
  "\0162..farm.nurture.core.contracts.common.U"
  "rlBuilder\022@\n\tsatellite\030\003 \001(\0162-.farm.nurt"
  "ure.core.contracts.common.Satellite\0226\n\004b"
  "and\030\004 \001(\0162(.farm.nurture.core.contracts."
  "common.Band\022A\n\nvalid_time\030\005 \001(\0132-.farm.n"
  "urture.core.contracts.common.TimeRange\022\026"
  "\n\016base_directory\030\006 \001(\t\022A\n\ndate_range\030\007 \001"
  "(\0132-.farm.nurture.core.contracts.common."
  "TimeRange\"\210\002\n\nNSVPlaceId\022J\n\016PlaceNamespa"
  "ce\030\001 \001(\01622.farm.nurture.core.contracts.c"
  "ommon.PlaceNamespace\022L\n\017PlaceSourceType\030"
  "\002 \001(\01623.farm.nurture.core.contracts.comm"
  "on.PlaceSourceType\022N\n\020PlaceVisibleType\030\003"
  " \001(\01624.farm.nurture.core.contracts.commo"
  "n.PlaceVisibleType\022\020\n\010place_id\030\004 \001(\003BR\n\""
  "farm.nurture.core.contracts.commonP\001Z\'co"
  "de.nurture.farm/Core/Contracts/Common\240\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fgeo_5fcommon_2eproto_deps[3] = {
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_Common_2fgeo_5fenums_2eproto,
  &::descriptor_table_Common_2ftime_5fslot_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fgeo_5fcommon_2eproto_sccs[46] = {
  &scc_info_Attribute_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Configuration_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Filter_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_LatLng_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_MapTile_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Options_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Place_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_PlacesData_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_TileRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_TileResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_UserContext_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Validation_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_Value_Common_2fgeo_5fcommon_2eproto.base,
  &scc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fgeo_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fgeo_5fcommon_2eproto = {
  false, false, descriptor_table_protodef_Common_2fgeo_5fcommon_2eproto, "Common/geo_common.proto", 10808,
  &descriptor_table_Common_2fgeo_5fcommon_2eproto_once, descriptor_table_Common_2fgeo_5fcommon_2eproto_sccs, descriptor_table_Common_2fgeo_5fcommon_2eproto_deps, 46, 3,
  schemas, file_default_instances, TableStruct_Common_2fgeo_5fcommon_2eproto::offsets,
  file_level_metadata_Common_2fgeo_5fcommon_2eproto, 46, file_level_enum_descriptors_Common_2fgeo_5fcommon_2eproto, file_level_service_descriptors_Common_2fgeo_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fgeo_5fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fgeo_5fcommon_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class PlaceTag::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::PlaceTagValue& value(const PlaceTag* msg);
};

const ::farm::nurture::core::contracts::common::PlaceTagValue&
PlaceTag::_Internal::value(const PlaceTag* msg) {
  return *msg->value_;
}
PlaceTag::PlaceTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.PlaceTag)
}
PlaceTag::PlaceTag(const PlaceTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placetagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placetagname().empty()) {
    placetagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placetagname(), 
      GetArena());
  }
  placetagpropertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placetagpropertyname().empty()) {
    placetagpropertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placetagpropertyname(), 
      GetArena());
  }
  placetagpropertyvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placetagpropertyvalue().empty()) {
    placetagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placetagpropertyvalue(), 
      GetArena());
  }
  tagpropertyvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagpropertyvalue().empty()) {
    tagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagpropertyvalue(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::farm::nurture::core::contracts::common::PlaceTagValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&tagname_, &from.tagname_,
    static_cast<size_t>(reinterpret_cast<char*>(&placetagid_) -
    reinterpret_cast<char*>(&tagname_)) + sizeof(placetagid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.PlaceTag)
}

void PlaceTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base);
  placetagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetagpropertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetagpropertyvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagpropertyvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&placetagid_) -
      reinterpret_cast<char*>(&value_)) + sizeof(placetagid_));
}

PlaceTag::~PlaceTag() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.PlaceTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  placetagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetagpropertyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetagpropertyvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagpropertyvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void PlaceTag::ArenaDtor(void* object) {
  PlaceTag* _this = reinterpret_cast< PlaceTag* >(object);
  (void)_this;
}
void PlaceTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceTag& PlaceTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceTag_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void PlaceTag::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.PlaceTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placetagname_.ClearToEmpty();
  placetagpropertyname_.ClearToEmpty();
  placetagpropertyvalue_.ClearToEmpty();
  tagpropertyvalue_.ClearToEmpty();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&tagname_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&placetagid_) -
      reinterpret_cast<char*>(&tagname_)) + sizeof(placetagid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string placeTagName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_placetagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlaceTag.placeTagName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeTagPropertyName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_placetagpropertyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeTagPropertyValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_placetagpropertyvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceTagName TagName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tagname(static_cast<::farm::nurture::core::contracts::common::PlaceTagName>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceTagProperty TagPropertyKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tagpropertykey(static_cast<::farm::nurture::core::contracts::common::PlaceTagProperty>(val));
        } else goto handle_unusual;
        continue;
      // string TagPropertyValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tagpropertyvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PlaceTagId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          placetagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceTagValue value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.PlaceTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string placeTagName = 1;
  if (this->placetagname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placetagname().data(), static_cast<int>(this->_internal_placetagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlaceTag.placeTagName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_placetagname(), target);
  }

  // string placeTagPropertyName = 2;
  if (this->placetagpropertyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placetagpropertyname().data(), static_cast<int>(this->_internal_placetagpropertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_placetagpropertyname(), target);
  }

  // string placeTagPropertyValue = 3;
  if (this->placetagpropertyvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placetagpropertyvalue().data(), static_cast<int>(this->_internal_placetagpropertyvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_placetagpropertyvalue(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceTagName TagName = 4;
  if (this->tagname() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tagname(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceTagProperty TagPropertyKey = 5;
  if (this->tagpropertykey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_tagpropertykey(), target);
  }

  // string TagPropertyValue = 6;
  if (this->tagpropertyvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagpropertyvalue().data(), static_cast<int>(this->_internal_tagpropertyvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tagpropertyvalue(), target);
  }

  // int64 PlaceTagId = 7;
  if (this->placetagid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_placetagid(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceTagValue value = 8;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.PlaceTag)
  return target;
}

size_t PlaceTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.PlaceTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string placeTagName = 1;
  if (this->placetagname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placetagname());
  }

  // string placeTagPropertyName = 2;
  if (this->placetagpropertyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placetagpropertyname());
  }

  // string placeTagPropertyValue = 3;
  if (this->placetagpropertyvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placetagpropertyvalue());
  }

  // string TagPropertyValue = 6;
  if (this->tagpropertyvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagpropertyvalue());
  }

  // .farm.nurture.core.contracts.common.PlaceTagValue value = 8;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .farm.nurture.core.contracts.common.PlaceTagName TagName = 4;
  if (this->tagname() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tagname());
  }

  // .farm.nurture.core.contracts.common.PlaceTagProperty TagPropertyKey = 5;
  if (this->tagpropertykey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tagpropertykey());
  }

  // int64 PlaceTagId = 7;
  if (this->placetagid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_placetagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.PlaceTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.PlaceTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.PlaceTag)
    MergeFrom(*source);
  }
}

void PlaceTag::MergeFrom(const PlaceTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.PlaceTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.placetagname().size() > 0) {
    _internal_set_placetagname(from._internal_placetagname());
  }
  if (from.placetagpropertyname().size() > 0) {
    _internal_set_placetagpropertyname(from._internal_placetagpropertyname());
  }
  if (from.placetagpropertyvalue().size() > 0) {
    _internal_set_placetagpropertyvalue(from._internal_placetagpropertyvalue());
  }
  if (from.tagpropertyvalue().size() > 0) {
    _internal_set_tagpropertyvalue(from._internal_tagpropertyvalue());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::farm::nurture::core::contracts::common::PlaceTagValue::MergeFrom(from._internal_value());
  }
  if (from.tagname() != 0) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from.tagpropertykey() != 0) {
    _internal_set_tagpropertykey(from._internal_tagpropertykey());
  }
  if (from.placetagid() != 0) {
    _internal_set_placetagid(from._internal_placetagid());
  }
}

void PlaceTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.PlaceTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceTag::CopyFrom(const PlaceTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.PlaceTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceTag::IsInitialized() const {
  return true;
}

void PlaceTag::InternalSwap(PlaceTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placetagname_.Swap(&other->placetagname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placetagpropertyname_.Swap(&other->placetagpropertyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placetagpropertyvalue_.Swap(&other->placetagpropertyvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tagpropertyvalue_.Swap(&other->tagpropertyvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceTag, placetagid_)
      + sizeof(PlaceTag::placetagid_)
      - PROTOBUF_FIELD_OFFSET(PlaceTag, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidationResponse::_Internal {
 public:
};

ValidationResponse::ValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ValidationResponse)
}
ValidationResponse::ValidationResponse(const ValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dsc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dsc().empty()) {
    dsc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dsc(), 
      GetArena());
  }
  ::memcpy(&msg_, &from.msg_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&msg_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ValidationResponse)
}

void ValidationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto.base);
  dsc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&msg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(valid_));
}

ValidationResponse::~ValidationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ValidationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dsc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidationResponse::ArenaDtor(void* object) {
  ValidationResponse* _this = reinterpret_cast< ValidationResponse* >(object);
  (void)_this;
}
void ValidationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationResponse& ValidationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dsc_.ClearToEmpty();
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(valid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ValidationResponseMsg msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg(static_cast<::farm::nurture::core::contracts::common::ValidationResponseMsg>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ValidationResponseCode valCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_valcode(static_cast<::farm::nurture::core::contracts::common::ValidationResponseCode>(val));
        } else goto handle_unusual;
        continue;
      // string dsc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dsc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.ValidationResponse.dsc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValidationResponseMsg msg = 1;
  if (this->msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg(), target);
  }

  // .farm.nurture.core.contracts.common.ValidationResponseCode valCode = 2;
  if (this->valcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_valcode(), target);
  }

  // string dsc = 3;
  if (this->dsc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dsc().data(), static_cast<int>(this->_internal_dsc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.ValidationResponse.dsc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dsc(), target);
  }

  // bool valid = 4;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ValidationResponse)
  return target;
}

size_t ValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ValidationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dsc = 3;
  if (this->dsc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dsc());
  }

  // .farm.nurture.core.contracts.common.ValidationResponseMsg msg = 1;
  if (this->msg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg());
  }

  // .farm.nurture.core.contracts.common.ValidationResponseCode valCode = 2;
  if (this->valcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valcode());
  }

  // bool valid = 4;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ValidationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ValidationResponse)
    MergeFrom(*source);
  }
}

void ValidationResponse::MergeFrom(const ValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dsc().size() > 0) {
    _internal_set_dsc(from._internal_dsc());
  }
  if (from.msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.valcode() != 0) {
    _internal_set_valcode(from._internal_valcode());
  }
  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
}

void ValidationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationResponse::CopyFrom(const ValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationResponse::IsInitialized() const {
  return true;
}

void ValidationResponse::InternalSwap(ValidationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dsc_.Swap(&other->dsc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationResponse, valid_)
      + sizeof(ValidationResponse::valid_)
      - PROTOBUF_FIELD_OFFSET(ValidationResponse, msg_)>(
          reinterpret_cast<char*>(&msg_),
          reinterpret_cast<char*>(&other->msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeoPlaces::_Internal {
 public:
};

GeoPlaces::GeoPlaces(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placetags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.GeoPlaces)
}
GeoPlaces::GeoPlaces(const GeoPlaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placetags_(from.placetags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geometry().empty()) {
    geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geometry(), 
      GetArena());
  }
  ::memcpy(&placeid_, &from.placeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&geometryrepresentationtype_) -
    reinterpret_cast<char*>(&placeid_)) + sizeof(geometryrepresentationtype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.GeoPlaces)
}

void GeoPlaces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto.base);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&placeid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&geometryrepresentationtype_) -
      reinterpret_cast<char*>(&placeid_)) + sizeof(geometryrepresentationtype_));
}

GeoPlaces::~GeoPlaces() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.GeoPlaces)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPlaces::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeoPlaces::ArenaDtor(void* object) {
  GeoPlaces* _this = reinterpret_cast< GeoPlaces* >(object);
  (void)_this;
}
void GeoPlaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPlaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPlaces& GeoPlaces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPlaces_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void GeoPlaces::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.GeoPlaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placetags_.Clear();
  geometry_.ClearToEmpty();
  ::memset(&placeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometryrepresentationtype_) -
      reinterpret_cast<char*>(&placeid_)) + sizeof(geometryrepresentationtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPlaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_geometry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.GeoPlaces.geometry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PlaceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          placeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geometryrepresentationtype(static_cast<::farm::nurture::core::contracts::common::GeometryRepresentationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placetags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPlaces::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.GeoPlaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geometry = 1;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.GeoPlaces.geometry");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geometry(), target);
  }

  // int64 PlaceId = 2;
  if (this->placeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_placeid(), target);
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 3;
  if (this->geometryrepresentationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_geometryrepresentationtype(), target);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placetags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_placetags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.GeoPlaces)
  return target;
}

size_t GeoPlaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.GeoPlaces)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 4;
  total_size += 1UL * this->_internal_placetags_size();
  for (const auto& msg : this->placetags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string geometry = 1;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  // int64 PlaceId = 2;
  if (this->placeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_placeid());
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 3;
  if (this->geometryrepresentationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometryrepresentationtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPlaces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.GeoPlaces)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPlaces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPlaces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.GeoPlaces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.GeoPlaces)
    MergeFrom(*source);
  }
}

void GeoPlaces::MergeFrom(const GeoPlaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.GeoPlaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placetags_.MergeFrom(from.placetags_);
  if (from.geometry().size() > 0) {
    _internal_set_geometry(from._internal_geometry());
  }
  if (from.placeid() != 0) {
    _internal_set_placeid(from._internal_placeid());
  }
  if (from.geometryrepresentationtype() != 0) {
    _internal_set_geometryrepresentationtype(from._internal_geometryrepresentationtype());
  }
}

void GeoPlaces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.GeoPlaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPlaces::CopyFrom(const GeoPlaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.GeoPlaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPlaces::IsInitialized() const {
  return true;
}

void GeoPlaces::InternalSwap(GeoPlaces* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placetags_.InternalSwap(&other->placetags_);
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPlaces, geometryrepresentationtype_)
      + sizeof(GeoPlaces::geometryrepresentationtype_)
      - PROTOBUF_FIELD_OFFSET(GeoPlaces, placeid_)>(
          reinterpret_cast<char*>(&placeid_),
          reinterpret_cast<char*>(&other->placeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPlaces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidationResults::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ValidationResponse& vldtrs(const ValidationResults* msg);
};

const ::farm::nurture::core::contracts::common::ValidationResponse&
ValidationResults::_Internal::vldtrs(const ValidationResults* msg) {
  return *msg->vldtrs_;
}
ValidationResults::ValidationResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  places_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ValidationResults)
}
ValidationResults::ValidationResults(const ValidationResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      places_(from.places_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vldtrs()) {
    vldtrs_ = new ::farm::nurture::core::contracts::common::ValidationResponse(*from.vldtrs_);
  } else {
    vldtrs_ = nullptr;
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&asserttype_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(asserttype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ValidationResults)
}

void ValidationResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vldtrs_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&asserttype_) -
      reinterpret_cast<char*>(&vldtrs_)) + sizeof(asserttype_));
}

ValidationResults::~ValidationResults() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ValidationResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidationResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vldtrs_;
}

void ValidationResults::ArenaDtor(void* object) {
  ValidationResults* _this = reinterpret_cast< ValidationResults* >(object);
  (void)_this;
}
void ValidationResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidationResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationResults& ValidationResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationResults_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ValidationResults::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ValidationResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  places_.Clear();
  if (GetArena() == nullptr && vldtrs_ != nullptr) {
    delete vldtrs_;
  }
  vldtrs_ = nullptr;
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asserttype_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(asserttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ValidationResponse vldtRs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vldtrs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeoValidationType validationType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationtype(static_cast<::farm::nurture::core::contracts::common::GeoValidationType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeoValidationName validationName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationname(static_cast<::farm::nurture::core::contracts::common::GeoValidationName>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AssertionType assertType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_asserttype(static_cast<::farm::nurture::core::contracts::common::AssertionType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.GeoPlaces places = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ValidationResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValidationResponse vldtRs = 1;
  if (this->has_vldtrs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vldtrs(this), target, stream);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_valid(), target);
  }

  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 3;
  if (this->validationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_validationtype(), target);
  }

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 4;
  if (this->validationname() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_validationname(), target);
  }

  // .farm.nurture.core.contracts.common.AssertionType assertType = 5;
  if (this->asserttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_asserttype(), target);
  }

  // repeated .farm.nurture.core.contracts.common.GeoPlaces places = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_places(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ValidationResults)
  return target;
}

size_t ValidationResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ValidationResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.GeoPlaces places = 6;
  total_size += 1UL * this->_internal_places_size();
  for (const auto& msg : this->places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ValidationResponse vldtRs = 1;
  if (this->has_vldtrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vldtrs_);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 3;
  if (this->validationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationtype());
  }

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 4;
  if (this->validationname() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationname());
  }

  // .farm.nurture.core.contracts.common.AssertionType assertType = 5;
  if (this->asserttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asserttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ValidationResults)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ValidationResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ValidationResults)
    MergeFrom(*source);
  }
}

void ValidationResults::MergeFrom(const ValidationResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ValidationResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  places_.MergeFrom(from.places_);
  if (from.has_vldtrs()) {
    _internal_mutable_vldtrs()->::farm::nurture::core::contracts::common::ValidationResponse::MergeFrom(from._internal_vldtrs());
  }
  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
  if (from.validationtype() != 0) {
    _internal_set_validationtype(from._internal_validationtype());
  }
  if (from.validationname() != 0) {
    _internal_set_validationname(from._internal_validationname());
  }
  if (from.asserttype() != 0) {
    _internal_set_asserttype(from._internal_asserttype());
  }
}

void ValidationResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ValidationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationResults::CopyFrom(const ValidationResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ValidationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationResults::IsInitialized() const {
  return true;
}

void ValidationResults::InternalSwap(ValidationResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  places_.InternalSwap(&other->places_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationResults, asserttype_)
      + sizeof(ValidationResults::asserttype_)
      - PROTOBUF_FIELD_OFFSET(ValidationResults, vldtrs_)>(
          reinterpret_cast<char*>(&vldtrs_),
          reinterpret_cast<char*>(&other->vldtrs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeometryToValidate::_Internal {
 public:
};

GeometryToValidate::GeometryToValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validationsapplicable_(arena),
  plcids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.GeometryToValidate)
}
GeometryToValidate::GeometryToValidate(const GeometryToValidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validationsapplicable_(from.validationsapplicable_),
      plcids_(from.plcids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  gmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gmt().empty()) {
    gmt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gmt(), 
      GetArena());
  }
  ::memcpy(&plcsrctype_, &from.plcsrctype_,
    static_cast<size_t>(reinterpret_cast<char*>(&thresholddistance_) -
    reinterpret_cast<char*>(&plcsrctype_)) + sizeof(thresholddistance_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.GeometryToValidate)
}

void GeometryToValidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&plcsrctype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&thresholddistance_) -
      reinterpret_cast<char*>(&plcsrctype_)) + sizeof(thresholddistance_));
}

GeometryToValidate::~GeometryToValidate() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.GeometryToValidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeometryToValidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gmt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeometryToValidate::ArenaDtor(void* object) {
  GeometryToValidate* _this = reinterpret_cast< GeometryToValidate* >(object);
  (void)_this;
}
void GeometryToValidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryToValidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryToValidate& GeometryToValidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryToValidate_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void GeometryToValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.GeometryToValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validationsapplicable_.Clear();
  plcids_.Clear();
  version_.ClearToEmpty();
  gmt_.ClearToEmpty();
  ::memset(&plcsrctype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thresholddistance_) -
      reinterpret_cast<char*>(&plcsrctype_)) + sizeof(thresholddistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometryToValidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.PlaceSourceType PlcSrcType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plcsrctype(static_cast<::farm::nurture::core::contracts::common::PlaceSourceType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceNamespace PlcNmspce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plcnmspce(static_cast<::farm::nurture::core::contracts::common::PlaceNamespace>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceVisibleType PlcVsble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plcvsble(static_cast<::farm::nurture::core::contracts::common::PlaceVisibleType>(val));
        } else goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.GeometryToValidate.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AuditRequired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auditrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MinZoom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          minzoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxZoom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxzoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.UI_CLIENT UiClient = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_uiclient(static_cast<::farm::nurture::core::contracts::common::UI_CLIENT>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ValidationsApplicable validationsApplicable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validationsapplicable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeometryRepresentationType gmRprType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gmrprtype(static_cast<::farm::nurture::core::contracts::common::GeometryRepresentationType>(val));
        } else goto handle_unusual;
        continue;
      // string gmt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gmt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.GeometryToValidate.gmt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 thresholdDistance = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          thresholddistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 plcIds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_plcids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_plcids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryToValidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.GeometryToValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PlaceSourceType PlcSrcType = 1;
  if (this->plcsrctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_plcsrctype(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceNamespace PlcNmspce = 2;
  if (this->plcnmspce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_plcnmspce(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlcVsble = 3;
  if (this->plcvsble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_plcvsble(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.GeometryToValidate.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // bool AuditRequired = 5;
  if (this->auditrequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_auditrequired(), target);
  }

  // int32 MinZoom = 6;
  if (this->minzoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_minzoom(), target);
  }

  // int32 MaxZoom = 7;
  if (this->maxzoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_maxzoom(), target);
  }

  // .farm.nurture.core.contracts.common.UI_CLIENT UiClient = 9;
  if (this->uiclient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_uiclient(), target);
  }

  // repeated .farm.nurture.core.contracts.common.ValidationsApplicable validationsApplicable = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validationsapplicable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_validationsapplicable(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType gmRprType = 15;
  if (this->gmrprtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_gmrprtype(), target);
  }

  // string gmt = 16;
  if (this->gmt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gmt().data(), static_cast<int>(this->_internal_gmt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.GeometryToValidate.gmt");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gmt(), target);
  }

  // int32 thresholdDistance = 17;
  if (this->thresholddistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_thresholddistance(), target);
  }

  // repeated int64 plcIds = 18;
  {
    int byte_size = _plcids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          18, _internal_plcids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.GeometryToValidate)
  return target;
}

size_t GeometryToValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.GeometryToValidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.ValidationsApplicable validationsApplicable = 10;
  total_size += 1UL * this->_internal_validationsapplicable_size();
  for (const auto& msg : this->validationsapplicable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 plcIds = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->plcids_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _plcids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string gmt = 16;
  if (this->gmt().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gmt());
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType PlcSrcType = 1;
  if (this->plcsrctype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plcsrctype());
  }

  // .farm.nurture.core.contracts.common.PlaceNamespace PlcNmspce = 2;
  if (this->plcnmspce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plcnmspce());
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlcVsble = 3;
  if (this->plcvsble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plcvsble());
  }

  // bool AuditRequired = 5;
  if (this->auditrequired() != 0) {
    total_size += 1 + 1;
  }

  // int32 MinZoom = 6;
  if (this->minzoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minzoom());
  }

  // int32 MaxZoom = 7;
  if (this->maxzoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxzoom());
  }

  // .farm.nurture.core.contracts.common.UI_CLIENT UiClient = 9;
  if (this->uiclient() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_uiclient());
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType gmRprType = 15;
  if (this->gmrprtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gmrprtype());
  }

  // int32 thresholdDistance = 17;
  if (this->thresholddistance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thresholddistance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryToValidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.GeometryToValidate)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryToValidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryToValidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.GeometryToValidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.GeometryToValidate)
    MergeFrom(*source);
  }
}

void GeometryToValidate::MergeFrom(const GeometryToValidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.GeometryToValidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validationsapplicable_.MergeFrom(from.validationsapplicable_);
  plcids_.MergeFrom(from.plcids_);
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.gmt().size() > 0) {
    _internal_set_gmt(from._internal_gmt());
  }
  if (from.plcsrctype() != 0) {
    _internal_set_plcsrctype(from._internal_plcsrctype());
  }
  if (from.plcnmspce() != 0) {
    _internal_set_plcnmspce(from._internal_plcnmspce());
  }
  if (from.plcvsble() != 0) {
    _internal_set_plcvsble(from._internal_plcvsble());
  }
  if (from.auditrequired() != 0) {
    _internal_set_auditrequired(from._internal_auditrequired());
  }
  if (from.minzoom() != 0) {
    _internal_set_minzoom(from._internal_minzoom());
  }
  if (from.maxzoom() != 0) {
    _internal_set_maxzoom(from._internal_maxzoom());
  }
  if (from.uiclient() != 0) {
    _internal_set_uiclient(from._internal_uiclient());
  }
  if (from.gmrprtype() != 0) {
    _internal_set_gmrprtype(from._internal_gmrprtype());
  }
  if (from.thresholddistance() != 0) {
    _internal_set_thresholddistance(from._internal_thresholddistance());
  }
}

void GeometryToValidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.GeometryToValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryToValidate::CopyFrom(const GeometryToValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.GeometryToValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryToValidate::IsInitialized() const {
  return true;
}

void GeometryToValidate::InternalSwap(GeometryToValidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validationsapplicable_.InternalSwap(&other->validationsapplicable_);
  plcids_.InternalSwap(&other->plcids_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gmt_.Swap(&other->gmt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeometryToValidate, thresholddistance_)
      + sizeof(GeometryToValidate::thresholddistance_)
      - PROTOBUF_FIELD_OFFSET(GeometryToValidate, plcsrctype_)>(
          reinterpret_cast<char*>(&plcsrctype_),
          reinterpret_cast<char*>(&other->plcsrctype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryToValidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidationsApplicable::_Internal {
 public:
};

ValidationsApplicable::ValidationsApplicable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ValidationsApplicable)
}
ValidationsApplicable::ValidationsApplicable(const ValidationsApplicable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&validationtype_, &from.validationtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&asserttype_) -
    reinterpret_cast<char*>(&validationtype_)) + sizeof(asserttype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ValidationsApplicable)
}

void ValidationsApplicable::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&validationtype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&asserttype_) -
      reinterpret_cast<char*>(&validationtype_)) + sizeof(asserttype_));
}

ValidationsApplicable::~ValidationsApplicable() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ValidationsApplicable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidationsApplicable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidationsApplicable::ArenaDtor(void* object) {
  ValidationsApplicable* _this = reinterpret_cast< ValidationsApplicable* >(object);
  (void)_this;
}
void ValidationsApplicable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidationsApplicable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationsApplicable& ValidationsApplicable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationsApplicable_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ValidationsApplicable::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&validationtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asserttype_) -
      reinterpret_cast<char*>(&validationtype_)) + sizeof(asserttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationsApplicable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.GeoValidationType validationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationtype(static_cast<::farm::nurture::core::contracts::common::GeoValidationType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeoValidationName validationName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationname(static_cast<::farm::nurture::core::contracts::common::GeoValidationName>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AssertionType assertType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_asserttype(static_cast<::farm::nurture::core::contracts::common::AssertionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationsApplicable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 1;
  if (this->validationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validationtype(), target);
  }

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 2;
  if (this->validationname() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_validationname(), target);
  }

  // .farm.nurture.core.contracts.common.AssertionType assertType = 3;
  if (this->asserttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_asserttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ValidationsApplicable)
  return target;
}

size_t ValidationsApplicable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 1;
  if (this->validationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationtype());
  }

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 2;
  if (this->validationname() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationname());
  }

  // .farm.nurture.core.contracts.common.AssertionType assertType = 3;
  if (this->asserttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asserttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationsApplicable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationsApplicable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationsApplicable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ValidationsApplicable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ValidationsApplicable)
    MergeFrom(*source);
  }
}

void ValidationsApplicable::MergeFrom(const ValidationsApplicable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validationtype() != 0) {
    _internal_set_validationtype(from._internal_validationtype());
  }
  if (from.validationname() != 0) {
    _internal_set_validationname(from._internal_validationname());
  }
  if (from.asserttype() != 0) {
    _internal_set_asserttype(from._internal_asserttype());
  }
}

void ValidationsApplicable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationsApplicable::CopyFrom(const ValidationsApplicable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ValidationsApplicable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationsApplicable::IsInitialized() const {
  return true;
}

void ValidationsApplicable::InternalSwap(ValidationsApplicable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationsApplicable, asserttype_)
      + sizeof(ValidationsApplicable::asserttype_)
      - PROTOBUF_FIELD_OFFSET(ValidationsApplicable, validationtype_)>(
          reinterpret_cast<char*>(&validationtype_),
          reinterpret_cast<char*>(&other->validationtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationsApplicable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterArguments::_Internal {
 public:
};

FilterArguments::FilterArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placeids_(arena),
  placetagids_(arena),
  tagnames_(arena),
  tagproperties_(arena),
  stringvalues_(arena),
  reference_types_(arena),
  attribute_keys_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.FilterArguments)
}
FilterArguments::FilterArguments(const FilterArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placeids_(from.placeids_),
      placetagids_(from.placetagids_),
      tagnames_(from.tagnames_),
      tagproperties_(from.tagproperties_),
      stringvalues_(from.stringvalues_),
      reference_types_(from.reference_types_),
      attribute_keys_(from.attribute_keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.FilterArguments)
}

void FilterArguments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto.base);
}

FilterArguments::~FilterArguments() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.FilterArguments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterArguments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterArguments::ArenaDtor(void* object) {
  FilterArguments* _this = reinterpret_cast< FilterArguments* >(object);
  (void)_this;
}
void FilterArguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterArguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterArguments& FilterArguments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterArguments_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void FilterArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.FilterArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeids_.Clear();
  placetagids_.Clear();
  tagnames_.Clear();
  tagproperties_.Clear();
  stringvalues_.Clear();
  reference_types_.Clear();
  attribute_keys_.Clear();
  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterArguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 placeIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_placeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_placeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 placeTagIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_placetagids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_placetagids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTagName tagNames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tagnames(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tagnames(static_cast<::farm::nurture::core::contracts::common::PlaceTagName>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTagProperty tagProperties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tagproperties(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tagproperties(static_cast<::farm::nurture::core::contracts::common::PlaceTagProperty>(val));
        } else goto handle_unusual;
        continue;
      // repeated string StringValues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stringvalues();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.FilterArguments.StringValues"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceType reference_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_reference_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_reference_types(static_cast<::farm::nurture::core::contracts::common::ReferenceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.AttributeKey attribute_keys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_attribute_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_attribute_keys(static_cast<::farm::nurture::core::contracts::common::AttributeKey>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Value values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterArguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.FilterArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 placeIds = 1;
  {
    int byte_size = _placeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_placeids(), byte_size, target);
    }
  }

  // repeated int64 placeTagIds = 2;
  {
    int byte_size = _placetagids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_placetagids(), byte_size, target);
    }
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTagName tagNames = 3;
  {
    int byte_size = _tagnames_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, tagnames_, byte_size, target);
    }
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTagProperty tagProperties = 4;
  {
    int byte_size = _tagproperties_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, tagproperties_, byte_size, target);
    }
  }

  // repeated string StringValues = 5;
  for (int i = 0, n = this->_internal_stringvalues_size(); i < n; i++) {
    const auto& s = this->_internal_stringvalues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.FilterArguments.StringValues");
    target = stream->WriteString(5, s, target);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceType reference_types = 6;
  {
    int byte_size = _reference_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, reference_types_, byte_size, target);
    }
  }

  // repeated .farm.nurture.core.contracts.common.AttributeKey attribute_keys = 7;
  {
    int byte_size = _attribute_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, attribute_keys_, byte_size, target);
    }
  }

  // repeated .farm.nurture.core.contracts.common.Value values = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.FilterArguments)
  return target;
}

size_t FilterArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.FilterArguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 placeIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->placeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _placeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 placeTagIds = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->placetagids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _placetagids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTagName tagNames = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tagnames_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_tagnames(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tagnames_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTagProperty tagProperties = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tagproperties_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_tagproperties(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tagproperties_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string StringValues = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stringvalues_.size());
  for (int i = 0, n = stringvalues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stringvalues_.Get(i));
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceType reference_types = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_reference_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_reference_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reference_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.common.AttributeKey attribute_keys = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_attribute_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_attribute_keys(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attribute_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.common.Value values = 8;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterArguments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.FilterArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterArguments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterArguments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.FilterArguments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.FilterArguments)
    MergeFrom(*source);
  }
}

void FilterArguments::MergeFrom(const FilterArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.FilterArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeids_.MergeFrom(from.placeids_);
  placetagids_.MergeFrom(from.placetagids_);
  tagnames_.MergeFrom(from.tagnames_);
  tagproperties_.MergeFrom(from.tagproperties_);
  stringvalues_.MergeFrom(from.stringvalues_);
  reference_types_.MergeFrom(from.reference_types_);
  attribute_keys_.MergeFrom(from.attribute_keys_);
  values_.MergeFrom(from.values_);
}

void FilterArguments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.FilterArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterArguments::CopyFrom(const FilterArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.FilterArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterArguments::IsInitialized() const {
  return true;
}

void FilterArguments::InternalSwap(FilterArguments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placeids_.InternalSwap(&other->placeids_);
  placetagids_.InternalSwap(&other->placetagids_);
  tagnames_.InternalSwap(&other->tagnames_);
  tagproperties_.InternalSwap(&other->tagproperties_);
  stringvalues_.InternalSwap(&other->stringvalues_);
  reference_types_.InternalSwap(&other->reference_types_);
  attribute_keys_.InternalSwap(&other->attribute_keys_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterArguments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Filter::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::BaseConditions& basecondition(const Filter* msg);
};

const ::farm::nurture::core::contracts::common::BaseConditions&
Filter::_Internal::basecondition(const Filter* msg) {
  return *msg->basecondition_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basecondition()) {
    basecondition_ = new ::farm::nurture::core::contracts::common::BaseConditions(*from.basecondition_);
  } else {
    basecondition_ = nullptr;
  }
  combiningoperator_ = from.combiningoperator_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Filter)
}

void Filter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Filter_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basecondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&combiningoperator_) -
      reinterpret_cast<char*>(&basecondition_)) + sizeof(combiningoperator_));
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basecondition_;
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
}
void Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  if (GetArena() == nullptr && basecondition_ != nullptr) {
    delete basecondition_;
  }
  basecondition_ = nullptr;
  combiningoperator_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.BaseConditions baseCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LogicOperator combiningOperator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_combiningoperator(static_cast<::farm::nurture::core::contracts::common::LogicOperator>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Filter conditions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.BaseConditions baseCondition = 1;
  if (this->has_basecondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basecondition(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.LogicOperator combiningOperator = 2;
  if (this->combiningoperator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_combiningoperator(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Filter conditions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_conditions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Filter conditions = 3;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.BaseConditions baseCondition = 1;
  if (this->has_basecondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basecondition_);
  }

  // .farm.nurture.core.contracts.common.LogicOperator combiningOperator = 2;
  if (this->combiningoperator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_combiningoperator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  if (from.has_basecondition()) {
    _internal_mutable_basecondition()->::farm::nurture::core::contracts::common::BaseConditions::MergeFrom(from._internal_basecondition());
  }
  if (from.combiningoperator() != 0) {
    _internal_set_combiningoperator(from._internal_combiningoperator());
  }
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conditions_.InternalSwap(&other->conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Filter, combiningoperator_)
      + sizeof(Filter::combiningoperator_)
      - PROTOBUF_FIELD_OFFSET(Filter, basecondition_)>(
          reinterpret_cast<char*>(&basecondition_),
          reinterpret_cast<char*>(&other->basecondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BaseConditions::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::FilterArguments& argument(const BaseConditions* msg);
};

const ::farm::nurture::core::contracts::common::FilterArguments&
BaseConditions::_Internal::argument(const BaseConditions* msg) {
  return *msg->argument_;
}
BaseConditions::BaseConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.BaseConditions)
}
BaseConditions::BaseConditions(const BaseConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_argument()) {
    argument_ = new ::farm::nurture::core::contracts::common::FilterArguments(*from.argument_);
  } else {
    argument_ = nullptr;
  }
  ::memcpy(&filterkey_, &from.filterkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&filterkey_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.BaseConditions)
}

void BaseConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&argument_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&argument_)) + sizeof(operator__));
}

BaseConditions::~BaseConditions() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.BaseConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete argument_;
}

void BaseConditions::ArenaDtor(void* object) {
  BaseConditions* _this = reinterpret_cast< BaseConditions* >(object);
  (void)_this;
}
void BaseConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseConditions& BaseConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseConditions_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void BaseConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.BaseConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && argument_ != nullptr) {
    delete argument_;
  }
  argument_ = nullptr;
  ::memset(&filterkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&filterkey_)) + sizeof(operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.FilterKey filterKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filterkey(static_cast<::farm::nurture::core::contracts::common::FilterKey>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ComparisonCheckType operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::farm::nurture::core::contracts::common::ComparisonCheckType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.FilterArguments argument = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_argument(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.BaseConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.FilterKey filterKey = 1;
  if (this->filterkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filterkey(), target);
  }

  // .farm.nurture.core.contracts.common.ComparisonCheckType operator = 2;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .farm.nurture.core.contracts.common.FilterArguments argument = 3;
  if (this->has_argument()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::argument(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.BaseConditions)
  return target;
}

size_t BaseConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.BaseConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.FilterArguments argument = 3;
  if (this->has_argument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argument_);
  }

  // .farm.nurture.core.contracts.common.FilterKey filterKey = 1;
  if (this->filterkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filterkey());
  }

  // .farm.nurture.core.contracts.common.ComparisonCheckType operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.BaseConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.BaseConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.BaseConditions)
    MergeFrom(*source);
  }
}

void BaseConditions::MergeFrom(const BaseConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.BaseConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_argument()) {
    _internal_mutable_argument()->::farm::nurture::core::contracts::common::FilterArguments::MergeFrom(from._internal_argument());
  }
  if (from.filterkey() != 0) {
    _internal_set_filterkey(from._internal_filterkey());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void BaseConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.BaseConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseConditions::CopyFrom(const BaseConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.BaseConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseConditions::IsInitialized() const {
  return true;
}

void BaseConditions::InternalSwap(BaseConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseConditions, operator__)
      + sizeof(BaseConditions::operator__)
      - PROTOBUF_FIELD_OFFSET(BaseConditions, argument_)>(
          reinterpret_cast<char*>(&argument_),
          reinterpret_cast<char*>(&other->argument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReferenceAttribute::_Internal {
 public:
};

ReferenceAttribute::ReferenceAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ReferenceAttribute)
}
ReferenceAttribute::ReferenceAttribute(const ReferenceAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_type_ = from.reference_type_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ReferenceAttribute)
}

void ReferenceAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto.base);
  reference_type_ = 0;
}

ReferenceAttribute::~ReferenceAttribute() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ReferenceAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReferenceAttribute::ArenaDtor(void* object) {
  ReferenceAttribute* _this = reinterpret_cast< ReferenceAttribute* >(object);
  (void)_this;
}
void ReferenceAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceAttribute& ReferenceAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceAttribute_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ReferenceAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  reference_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ReferenceType reference_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reference_type(static_cast<::farm::nurture::core::contracts::common::ReferenceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribute attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ReferenceType reference_type = 1;
  if (this->reference_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference_type(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribute attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ReferenceAttribute)
  return target;
}

size_t ReferenceAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribute attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ReferenceType reference_type = 1;
  if (this->reference_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ReferenceAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ReferenceAttribute)
    MergeFrom(*source);
  }
}

void ReferenceAttribute::MergeFrom(const ReferenceAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.reference_type() != 0) {
    _internal_set_reference_type(from._internal_reference_type());
  }
}

void ReferenceAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceAttribute::CopyFrom(const ReferenceAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ReferenceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceAttribute::IsInitialized() const {
  return true;
}

void ReferenceAttribute::InternalSwap(ReferenceAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  swap(reference_type_, other->reference_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ZoomRange::_Internal {
 public:
};

ZoomRange::ZoomRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.ZoomRange)
}
ZoomRange::ZoomRange(const ZoomRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minzoom_, &from.minzoom_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxzoom_) -
    reinterpret_cast<char*>(&minzoom_)) + sizeof(maxzoom_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.ZoomRange)
}

void ZoomRange::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&minzoom_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxzoom_) -
      reinterpret_cast<char*>(&minzoom_)) + sizeof(maxzoom_));
}

ZoomRange::~ZoomRange() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.ZoomRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZoomRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZoomRange::ArenaDtor(void* object) {
  ZoomRange* _this = reinterpret_cast< ZoomRange* >(object);
  (void)_this;
}
void ZoomRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoomRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZoomRange& ZoomRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZoomRange_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ZoomRange::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.ZoomRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minzoom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxzoom_) -
      reinterpret_cast<char*>(&minzoom_)) + sizeof(maxzoom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoomRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 minZoom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minzoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxZoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxzoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoomRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.ZoomRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minZoom = 1;
  if (this->minzoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minzoom(), target);
  }

  // int32 maxZoom = 2;
  if (this->maxzoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxzoom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.ZoomRange)
  return target;
}

size_t ZoomRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.ZoomRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minZoom = 1;
  if (this->minzoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minzoom());
  }

  // int32 maxZoom = 2;
  if (this->maxzoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxzoom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoomRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.ZoomRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoomRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZoomRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.ZoomRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.ZoomRange)
    MergeFrom(*source);
  }
}

void ZoomRange::MergeFrom(const ZoomRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.ZoomRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minzoom() != 0) {
    _internal_set_minzoom(from._internal_minzoom());
  }
  if (from.maxzoom() != 0) {
    _internal_set_maxzoom(from._internal_maxzoom());
  }
}

void ZoomRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.ZoomRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoomRange::CopyFrom(const ZoomRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.ZoomRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoomRange::IsInitialized() const {
  return true;
}

void ZoomRange::InternalSwap(ZoomRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoomRange, maxzoom_)
      + sizeof(ZoomRange::maxzoom_)
      - PROTOBUF_FIELD_OFFSET(ZoomRange, minzoom_)>(
          reinterpret_cast<char*>(&minzoom_),
          reinterpret_cast<char*>(&other->minzoom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoomRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MapTile::_Internal {
 public:
};

MapTile::MapTile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.MapTile)
}
MapTile::MapTile(const MapTile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tilex_, &from.tilex_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&tilex_)) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.MapTile)
}

void MapTile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tilex_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&tilex_)) + sizeof(zoom_));
}

MapTile::~MapTile() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.MapTile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapTile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapTile::ArenaDtor(void* object) {
  MapTile* _this = reinterpret_cast< MapTile* >(object);
  (void)_this;
}
void MapTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapTile& MapTile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapTile_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void MapTile::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.MapTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tilex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&tilex_)) + sizeof(zoom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 zoom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tileX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tilex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tileY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tiley_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapTile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.MapTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zoom = 1;
  if (this->zoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_zoom(), target);
  }

  // int64 tileX = 2;
  if (this->tilex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tilex(), target);
  }

  // int64 tileY = 3;
  if (this->tiley() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tiley(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.MapTile)
  return target;
}

size_t MapTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.MapTile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 tileX = 2;
  if (this->tilex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tilex());
  }

  // int64 tileY = 3;
  if (this->tiley() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tiley());
  }

  // int32 zoom = 1;
  if (this->zoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zoom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapTile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.MapTile)
  GOOGLE_DCHECK_NE(&from, this);
  const MapTile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.MapTile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.MapTile)
    MergeFrom(*source);
  }
}

void MapTile::MergeFrom(const MapTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.MapTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tilex() != 0) {
    _internal_set_tilex(from._internal_tilex());
  }
  if (from.tiley() != 0) {
    _internal_set_tiley(from._internal_tiley());
  }
  if (from.zoom() != 0) {
    _internal_set_zoom(from._internal_zoom());
  }
}

void MapTile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.MapTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTile::CopyFrom(const MapTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.MapTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTile::IsInitialized() const {
  return true;
}

void MapTile::InternalSwap(MapTile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTile, zoom_)
      + sizeof(MapTile::zoom_)
      - PROTOBUF_FIELD_OFFSET(MapTile, tilex_)>(
          reinterpret_cast<char*>(&tilex_),
          reinterpret_cast<char*>(&other->tilex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Environment::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ZoomRange& zoom_hints(const Environment* msg);
};

const ::farm::nurture::core::contracts::common::ZoomRange&
Environment::_Internal::zoom_hints(const Environment* msg) {
  return *msg->zoom_hints_;
}
Environment::Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Environment)
}
Environment::Environment(const Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version().empty()) {
    model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version(), 
      GetArena());
  }
  if (from._internal_has_zoom_hints()) {
    zoom_hints_ = new ::farm::nurture::core::contracts::common::ZoomRange(*from.zoom_hints_);
  } else {
    zoom_hints_ = nullptr;
  }
  ::memcpy(&namespace__, &from.namespace__,
    static_cast<size_t>(reinterpret_cast<char*>(&client_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(client_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Environment)
}

void Environment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base);
  model_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_hints_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_) -
      reinterpret_cast<char*>(&zoom_hints_)) + sizeof(client_));
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Environment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Environment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete zoom_hints_;
}

void Environment::ArenaDtor(void* object) {
  Environment* _this = reinterpret_cast< Environment* >(object);
  (void)_this;
}
void Environment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Environment& Environment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Environment_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_version_.ClearToEmpty();
  if (GetArena() == nullptr && zoom_hints_ != nullptr) {
    delete zoom_hints_;
  }
  zoom_hints_ = nullptr;
  ::memset(&namespace__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_) -
      reinterpret_cast<char*>(&namespace__)) + sizeof(client_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Environment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.PlaceNamespace namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::PlaceNamespace>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceSourceType sourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::farm::nurture::core::contracts::common::PlaceSourceType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceVisibleType visibleType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibletype(static_cast<::farm::nurture::core::contracts::common::PlaceVisibleType>(val));
        } else goto handle_unusual;
        continue;
      // string model_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Environment.model_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ZoomRange zoom_hints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_hints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.UI_CLIENT client = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client(static_cast<::farm::nurture::core::contracts::common::UI_CLIENT>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Environment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PlaceNamespace namespace = 1;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_namespace_(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType sourceType = 2;
  if (this->sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sourcetype(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType visibleType = 3;
  if (this->visibletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_visibletype(), target);
  }

  // string model_version = 4;
  if (this->model_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version().data(), static_cast<int>(this->_internal_model_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Environment.model_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version(), target);
  }

  // .farm.nurture.core.contracts.common.ZoomRange zoom_hints = 5;
  if (this->has_zoom_hints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::zoom_hints(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.UI_CLIENT client = 6;
  if (this->client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Environment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_version = 4;
  if (this->model_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version());
  }

  // .farm.nurture.core.contracts.common.ZoomRange zoom_hints = 5;
  if (this->has_zoom_hints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_hints_);
  }

  // .farm.nurture.core.contracts.common.PlaceNamespace namespace = 1;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType sourceType = 2;
  if (this->sourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType visibleType = 3;
  if (this->visibletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibletype());
  }

  // .farm.nurture.core.contracts.common.UI_CLIENT client = 6;
  if (this->client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Environment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Environment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_version().size() > 0) {
    _internal_set_model_version(from._internal_model_version());
  }
  if (from.has_zoom_hints()) {
    _internal_mutable_zoom_hints()->::farm::nurture::core::contracts::common::ZoomRange::MergeFrom(from._internal_zoom_hints());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.sourcetype() != 0) {
    _internal_set_sourcetype(from._internal_sourcetype());
  }
  if (from.visibletype() != 0) {
    _internal_set_visibletype(from._internal_visibletype());
  }
  if (from.client() != 0) {
    _internal_set_client(from._internal_client());
  }
}

void Environment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::InternalSwap(Environment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_version_.Swap(&other->model_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Environment, client_)
      + sizeof(Environment::client_)
      - PROTOBUF_FIELD_OFFSET(Environment, zoom_hints_)>(
          reinterpret_cast<char*>(&zoom_hints_),
          reinterpret_cast<char*>(&other->zoom_hints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Environment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Place::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::TimeRange& time_range(const Place* msg);
};

const ::farm::nurture::core::contracts::common::TimeRange&
Place::_Internal::time_range(const Place* msg) {
  return *msg->time_range_;
}
void Place::clear_time_range() {
  if (GetArena() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
}
Place::Place(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  reference_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Place)
}
Place::Place(const Place& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      reference_attributes_(from.reference_attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geometry().empty()) {
    geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geometry(), 
      GetArena());
  }
  source_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id_str().empty()) {
    source_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_id_str(), 
      GetArena());
  }
  if (from._internal_has_time_range()) {
    time_range_ = new ::farm::nurture::core::contracts::common::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  ::memcpy(&place_id_, &from.place_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&place_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Place)
}

void Place::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Place_Common_2fgeo_5fcommon_2eproto.base);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_range_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&time_range_)) + sizeof(version_));
}

Place::~Place() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Place)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Place::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_range_;
}

void Place::ArenaDtor(void* object) {
  Place* _this = reinterpret_cast< Place* >(object);
  (void)_this;
}
void Place::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Place::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Place& Place::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Place_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Place::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Place)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  reference_attributes_.Clear();
  geometry_.ClearToEmpty();
  source_id_str_.ClearToEmpty();
  if (GetArena() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
  ::memset(&place_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&place_id_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Place::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_geometry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Place.geometry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeometryRepresentationType representation_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_representation_type(static_cast<::farm::nurture::core::contracts::common::GeometryRepresentationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceAttribute reference_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TimeRange time_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 place_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 source_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deleted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id_str = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_source_id_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Place.source_id_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Place::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Place)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geometry = 1;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Place.geometry");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geometry(), target);
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType representation_type = 2;
  if (this->representation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_representation_type(), target);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tags(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute reference_attributes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_reference_attributes(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.TimeRange time_range = 5;
  if (this->has_time_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_range(this), target, stream);
  }

  // int64 place_id = 6;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_place_id(), target);
  }

  // int64 source_id = 7;
  if (this->source_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_source_id(), target);
  }

  // int64 version = 8;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_version(), target);
  }

  // bool deleted = 9;
  if (this->deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_deleted(), target);
  }

  // bool overlap = 10;
  if (this->overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_overlap(), target);
  }

  // string source_id_str = 11;
  if (this->source_id_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id_str().data(), static_cast<int>(this->_internal_source_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Place.source_id_str");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_source_id_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Place)
  return target;
}

size_t Place::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Place)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.PlaceTag tags = 3;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute reference_attributes = 4;
  total_size += 1UL * this->_internal_reference_attributes_size();
  for (const auto& msg : this->reference_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string geometry = 1;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  // string source_id_str = 11;
  if (this->source_id_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id_str());
  }

  // .farm.nurture.core.contracts.common.TimeRange time_range = 5;
  if (this->has_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_);
  }

  // int64 place_id = 6;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  // int64 source_id = 7;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_source_id());
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType representation_type = 2;
  if (this->representation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_representation_type());
  }

  // bool deleted = 9;
  if (this->deleted() != 0) {
    total_size += 1 + 1;
  }

  // bool overlap = 10;
  if (this->overlap() != 0) {
    total_size += 1 + 1;
  }

  // int64 version = 8;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Place::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Place)
  GOOGLE_DCHECK_NE(&from, this);
  const Place* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Place>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Place)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Place)
    MergeFrom(*source);
  }
}

void Place::MergeFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Place)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  reference_attributes_.MergeFrom(from.reference_attributes_);
  if (from.geometry().size() > 0) {
    _internal_set_geometry(from._internal_geometry());
  }
  if (from.source_id_str().size() > 0) {
    _internal_set_source_id_str(from._internal_source_id_str());
  }
  if (from.has_time_range()) {
    _internal_mutable_time_range()->::farm::nurture::core::contracts::common::TimeRange::MergeFrom(from._internal_time_range());
  }
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
  if (from.source_id() != 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  if (from.representation_type() != 0) {
    _internal_set_representation_type(from._internal_representation_type());
  }
  if (from.deleted() != 0) {
    _internal_set_deleted(from._internal_deleted());
  }
  if (from.overlap() != 0) {
    _internal_set_overlap(from._internal_overlap());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Place::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Place::CopyFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Place::IsInitialized() const {
  return true;
}

void Place::InternalSwap(Place* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  reference_attributes_.InternalSwap(&other->reference_attributes_);
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_id_str_.Swap(&other->source_id_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Place, version_)
      + sizeof(Place::version_)
      - PROTOBUF_FIELD_OFFSET(Place, time_range_)>(
          reinterpret_cast<char*>(&time_range_),
          reinterpret_cast<char*>(&other->time_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Place::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Attribute::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Value& value(const Attribute* msg);
};

const ::farm::nurture::core::contracts::common::Value&
Attribute::_Internal::value(const Attribute* msg) {
  return *msg->value_;
}
Attribute::Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::farm::nurture::core::contracts::common::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Attribute)
}

void Attribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribute_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Attribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Attribute::ArenaDtor(void* object) {
  Attribute* _this = reinterpret_cast< Attribute* >(object);
  (void)_this;
}
void Attribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute& Attribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribute_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.AttributeKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_key(static_cast<::farm::nurture::core::contracts::common::AttributeKey>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Value value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.AttributeKey key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key(), target);
  }

  // .farm.nurture.core.contracts.common.Value value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Attribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .farm.nurture.core.contracts.common.AttributeKey key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Attribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::farm::nurture::core::contracts::common::Value::MergeFrom(from._internal_value());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void Attribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attribute, key_)
      + sizeof(Attribute::key_)
      - PROTOBUF_FIELD_OFFSET(Attribute, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_value().empty()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  ::memcpy(&number_value_, &from.number_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&int32_value_) -
    reinterpret_cast<char*>(&number_value_)) + sizeof(int32_value_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Value_Common_2fgeo_5fcommon_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&number_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&int32_value_) -
      reinterpret_cast<char*>(&number_value_)) + sizeof(int32_value_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Value_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_value_.ClearToEmpty();
  ::memset(&number_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int32_value_) -
      reinterpret_cast<char*>(&number_value_)) + sizeof(int32_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ValueType value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::farm::nurture::core::contracts::common::ValueType>(val));
        } else goto handle_unusual;
        continue;
      // double number_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          number_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.Value.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          int64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          int32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  if (this->value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value_type(), target);
  }

  // double number_value = 2;
  if (!(this->number_value() <= 0 && this->number_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_number_value(), target);
  }

  // string string_value = 3;
  if (this->string_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.Value.string_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_value(), target);
  }

  // bool bool_value = 4;
  if (this->bool_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_value(), target);
  }

  // int64 int64_value = 5;
  if (this->int64_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_int64_value(), target);
  }

  // int32 int32_value = 6;
  if (this->int32_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_int32_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_value = 3;
  if (this->string_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_value());
  }

  // double number_value = 2;
  if (!(this->number_value() <= 0 && this->number_value() >= 0)) {
    total_size += 1 + 8;
  }

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  // bool bool_value = 4;
  if (this->bool_value() != 0) {
    total_size += 1 + 1;
  }

  // int64 int64_value = 5;
  if (this->int64_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64_value());
  }

  // int32 int32_value = 6;
  if (this->int32_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int32_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_value().size() > 0) {
    _internal_set_string_value(from._internal_string_value());
  }
  if (!(from.number_value() <= 0 && from.number_value() >= 0)) {
    _internal_set_number_value(from._internal_number_value());
  }
  if (from.value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  if (from.bool_value() != 0) {
    _internal_set_bool_value(from._internal_bool_value());
  }
  if (from.int64_value() != 0) {
    _internal_set_int64_value(from._internal_int64_value());
  }
  if (from.int32_value() != 0) {
    _internal_set_int32_value(from._internal_int32_value());
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Value, int32_value_)
      + sizeof(Value::int32_value_)
      - PROTOBUF_FIELD_OFFSET(Value, number_value_)>(
          reinterpret_cast<char*>(&number_value_),
          reinterpret_cast<char*>(&other->number_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Options::_Internal {
 public:
};

Options::Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Options)
}
Options::Options(const Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&check_overlap_, &from.check_overlap_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_details_) -
    reinterpret_cast<char*>(&check_overlap_)) + sizeof(get_details_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Options)
}

void Options::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&check_overlap_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&get_details_) -
      reinterpret_cast<char*>(&check_overlap_)) + sizeof(get_details_));
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Options::ArenaDtor(void* object) {
  Options* _this = reinterpret_cast< Options* >(object);
  (void)_this;
}
void Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Options& Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Options_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&check_overlap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_details_) -
      reinterpret_cast<char*>(&check_overlap_)) + sizeof(get_details_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool check_overlap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          check_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          get_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool check_overlap = 1;
  if (this->check_overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_check_overlap(), target);
  }

  // bool get_details = 2;
  if (this->get_details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_get_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Options)
  return target;
}

size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool check_overlap = 1;
  if (this->check_overlap() != 0) {
    total_size += 1 + 1;
  }

  // bool get_details = 2;
  if (this->get_details() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Options)
    MergeFrom(*source);
  }
}

void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.check_overlap() != 0) {
    _internal_set_check_overlap(from._internal_check_overlap());
  }
  if (from.get_details() != 0) {
    _internal_set_get_details(from._internal_get_details());
  }
}

void Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  return true;
}

void Options::InternalSwap(Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Options, get_details_)
      + sizeof(Options::get_details_)
      - PROTOBUF_FIELD_OFFSET(Options, check_overlap_)>(
          reinterpret_cast<char*>(&check_overlap_),
          reinterpret_cast<char*>(&other->check_overlap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserContext::_Internal {
 public:
};

UserContext::UserContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ugdnid_ = from.ugdnid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UserContext)
}

void UserContext::SharedCtor() {
  ugdnid_ = PROTOBUF_LONGLONG(0);
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UserContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserContext::ArenaDtor(void* object) {
  UserContext* _this = reinterpret_cast< UserContext* >(object);
  (void)_this;
}
void UserContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserContext_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UserContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ugdnid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ugdnID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ugdnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UserContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ugdnID = 1;
  if (this->ugdnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ugdnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UserContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ugdnID = 1;
  if (this->ugdnid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ugdnid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UserContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugdnid() != 0) {
    _internal_set_ugdnid(from._internal_ugdnid());
  }
}

void UserContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ugdnid_, other->ugdnid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlacesData::_Internal {
 public:
};

PlacesData::PlacesData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placetags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.PlacesData)
}
PlacesData::PlacesData(const PlacesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placetags_(from.placetags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceid().empty()) {
    sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceid(), 
      GetArena());
  }
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geometry().empty()) {
    geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geometry(), 
      GetArena());
  }
  ::memcpy(&placeid_, &from.placeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&geometry_type_) -
    reinterpret_cast<char*>(&placeid_)) + sizeof(geometry_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.PlacesData)
}

void PlacesData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlacesData_Common_2fgeo_5fcommon_2eproto.base);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&placeid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&geometry_type_) -
      reinterpret_cast<char*>(&placeid_)) + sizeof(geometry_type_));
}

PlacesData::~PlacesData() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.PlacesData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlacesData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlacesData::ArenaDtor(void* object) {
  PlacesData* _this = reinterpret_cast< PlacesData* >(object);
  (void)_this;
}
void PlacesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlacesData& PlacesData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlacesData_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void PlacesData::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.PlacesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placetags_.Clear();
  sourceid_.ClearToEmpty();
  geometry_.ClearToEmpty();
  ::memset(&placeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometry_type_) -
      reinterpret_cast<char*>(&placeid_)) + sizeof(geometry_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlacesData.SourceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_geometry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlacesData.geometry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PlaceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          placeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geometryrepresentationtype(static_cast<::farm::nurture::core::contracts::common::GeometryRepresentationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placetags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceSourceType place_source_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place_source_type(static_cast<::farm::nurture::core::contracts::common::PlaceSourceType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceNamespace place_name_space = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place_name_space(static_cast<::farm::nurture::core::contracts::common::PlaceNamespace>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceVisibleType place_visible_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place_visible_type(static_cast<::farm::nurture::core::contracts::common::PlaceVisibleType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.GeometryType geometry_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geometry_type(static_cast<::farm::nurture::core::contracts::common::GeometryType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.PlacesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SourceId = 1;
  if (this->sourceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlacesData.SourceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourceid(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlacesData.geometry");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_geometry(), target);
  }

  // int64 PlaceId = 3;
  if (this->placeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_placeid(), target);
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 4;
  if (this->geometryrepresentationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_geometryrepresentationtype(), target);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placetags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_placetags(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType place_source_type = 6;
  if (this->place_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_place_source_type(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceNamespace place_name_space = 7;
  if (this->place_name_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_place_name_space(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType place_visible_type = 8;
  if (this->place_visible_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_place_visible_type(), target);
  }

  // .farm.nurture.core.contracts.common.GeometryType geometry_type = 9;
  if (this->geometry_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_geometry_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.PlacesData)
  return target;
}

size_t PlacesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.PlacesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 5;
  total_size += 1UL * this->_internal_placetags_size();
  for (const auto& msg : this->placetags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SourceId = 1;
  if (this->sourceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  // int64 PlaceId = 3;
  if (this->placeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_placeid());
  }

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 4;
  if (this->geometryrepresentationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometryrepresentationtype());
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType place_source_type = 6;
  if (this->place_source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place_source_type());
  }

  // .farm.nurture.core.contracts.common.PlaceNamespace place_name_space = 7;
  if (this->place_name_space() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place_name_space());
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType place_visible_type = 8;
  if (this->place_visible_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place_visible_type());
  }

  // .farm.nurture.core.contracts.common.GeometryType geometry_type = 9;
  if (this->geometry_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometry_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlacesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.PlacesData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlacesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlacesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.PlacesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.PlacesData)
    MergeFrom(*source);
  }
}

void PlacesData::MergeFrom(const PlacesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.PlacesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placetags_.MergeFrom(from.placetags_);
  if (from.sourceid().size() > 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
  if (from.geometry().size() > 0) {
    _internal_set_geometry(from._internal_geometry());
  }
  if (from.placeid() != 0) {
    _internal_set_placeid(from._internal_placeid());
  }
  if (from.geometryrepresentationtype() != 0) {
    _internal_set_geometryrepresentationtype(from._internal_geometryrepresentationtype());
  }
  if (from.place_source_type() != 0) {
    _internal_set_place_source_type(from._internal_place_source_type());
  }
  if (from.place_name_space() != 0) {
    _internal_set_place_name_space(from._internal_place_name_space());
  }
  if (from.place_visible_type() != 0) {
    _internal_set_place_visible_type(from._internal_place_visible_type());
  }
  if (from.geometry_type() != 0) {
    _internal_set_geometry_type(from._internal_geometry_type());
  }
}

void PlacesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.PlacesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacesData::CopyFrom(const PlacesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.PlacesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacesData::IsInitialized() const {
  return true;
}

void PlacesData::InternalSwap(PlacesData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placetags_.InternalSwap(&other->placetags_);
  sourceid_.Swap(&other->sourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlacesData, geometry_type_)
      + sizeof(PlacesData::geometry_type_)
      - PROTOBUF_FIELD_OFFSET(PlacesData, placeid_)>(
          reinterpret_cast<char*>(&placeid_),
          reinterpret_cast<char*>(&other->placeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacesData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Configuration::_Internal {
 public:
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audit_required_, &from.audit_required_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_name_) -
    reinterpret_cast<char*>(&audit_required_)) + sizeof(service_name_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Configuration)
}

void Configuration::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audit_required_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&service_name_) -
      reinterpret_cast<char*>(&audit_required_)) + sizeof(service_name_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Configuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Configuration::ArenaDtor(void* object) {
  Configuration* _this = reinterpret_cast< Configuration* >(object);
  (void)_this;
}
void Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Configuration& Configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Configuration_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&audit_required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_name_) -
      reinterpret_cast<char*>(&audit_required_)) + sizeof(service_name_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool audit_required = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          audit_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft_delete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soft_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ServiceName service_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service_name(static_cast<::farm::nurture::core::contracts::common::ServiceName>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool audit_required = 1;
  if (this->audit_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_audit_required(), target);
  }

  // bool overlap = 2;
  if (this->overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_overlap(), target);
  }

  // bool soft_delete = 3;
  if (this->soft_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_soft_delete(), target);
  }

  // .farm.nurture.core.contracts.common.ServiceName service_name = 4;
  if (this->service_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool audit_required = 1;
  if (this->audit_required() != 0) {
    total_size += 1 + 1;
  }

  // bool overlap = 2;
  if (this->overlap() != 0) {
    total_size += 1 + 1;
  }

  // bool soft_delete = 3;
  if (this->soft_delete() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.core.contracts.common.ServiceName service_name = 4;
  if (this->service_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audit_required() != 0) {
    _internal_set_audit_required(from._internal_audit_required());
  }
  if (from.overlap() != 0) {
    _internal_set_overlap(from._internal_overlap());
  }
  if (from.soft_delete() != 0) {
    _internal_set_soft_delete(from._internal_soft_delete());
  }
  if (from.service_name() != 0) {
    _internal_set_service_name(from._internal_service_name());
  }
}

void Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, service_name_)
      + sizeof(Configuration::service_name_)
      - PROTOBUF_FIELD_OFFSET(Configuration, audit_required_)>(
          reinterpret_cast<char*>(&audit_required_),
          reinterpret_cast<char*>(&other->audit_required_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TileRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const TileRequest* msg);
  static const ::farm::nurture::core::contracts::common::Filter& tag_filter(const TileRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
TileRequest::_Internal::env(const TileRequest* msg) {
  return *msg->env_;
}
const ::farm::nurture::core::contracts::common::Filter&
TileRequest::_Internal::tag_filter(const TileRequest* msg) {
  return *msg->tag_filter_;
}
TileRequest::TileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  maptiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.TileRequest)
}
TileRequest::TileRequest(const TileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      maptiles_(from.maptiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from._internal_has_tag_filter()) {
    tag_filter_ = new ::farm::nurture::core::contracts::common::Filter(*from.tag_filter_);
  } else {
    tag_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.TileRequest)
}

void TileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TileRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tag_filter_) -
      reinterpret_cast<char*>(&env_)) + sizeof(tag_filter_));
}

TileRequest::~TileRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.TileRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete tag_filter_;
}

void TileRequest::ArenaDtor(void* object) {
  TileRequest* _this = reinterpret_cast< TileRequest* >(object);
  (void)_this;
}
void TileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TileRequest& TileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TileRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void TileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.TileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maptiles_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  if (GetArena() == nullptr && tag_filter_ != nullptr) {
    delete tag_filter_;
  }
  tag_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.MapTile mapTiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maptiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Filter tag_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.TileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.MapTile mapTiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maptiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_maptiles(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.Filter tag_filter = 3;
  if (this->has_tag_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tag_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.TileRequest)
  return target;
}

size_t TileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.TileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.MapTile mapTiles = 2;
  total_size += 1UL * this->_internal_maptiles_size();
  for (const auto& msg : this->maptiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // .farm.nurture.core.contracts.common.Filter tag_filter = 3;
  if (this->has_tag_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.TileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.TileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.TileRequest)
    MergeFrom(*source);
  }
}

void TileRequest::MergeFrom(const TileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.TileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maptiles_.MergeFrom(from.maptiles_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.has_tag_filter()) {
    _internal_mutable_tag_filter()->::farm::nurture::core::contracts::common::Filter::MergeFrom(from._internal_tag_filter());
  }
}

void TileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.TileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileRequest::CopyFrom(const TileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.TileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRequest::IsInitialized() const {
  return true;
}

void TileRequest::InternalSwap(TileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maptiles_.InternalSwap(&other->maptiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileRequest, tag_filter_)
      + sizeof(TileRequest::tag_filter_)
      - PROTOBUF_FIELD_OFFSET(TileRequest, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TileResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const TileResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
TileResponse::_Internal::env(const TileResponse* msg) {
  return *msg->env_;
}
TileResponse::TileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  places_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.TileResponse)
}
TileResponse::TileResponse(const TileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      places_(from.places_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.TileResponse)
}

void TileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TileResponse_Common_2fgeo_5fcommon_2eproto.base);
  env_ = nullptr;
}

TileResponse::~TileResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.TileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void TileResponse::ArenaDtor(void* object) {
  TileResponse* _this = reinterpret_cast< TileResponse* >(object);
  (void)_this;
}
void TileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TileResponse& TileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TileResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void TileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.TileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  places_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.TileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_places(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.TileResponse)
  return target;
}

size_t TileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.TileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  total_size += 1UL * this->_internal_places_size();
  for (const auto& msg : this->places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.TileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.TileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.TileResponse)
    MergeFrom(*source);
  }
}

void TileResponse::MergeFrom(const TileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.TileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  places_.MergeFrom(from.places_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
}

void TileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.TileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileResponse::CopyFrom(const TileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.TileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileResponse::IsInitialized() const {
  return true;
}

void TileResponse::InternalSwap(TileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  places_.InternalSwap(&other->places_);
  swap(env_, other->env_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateRequest* msg);
  static const ::farm::nurture::core::contracts::common::Options& options(const UpdateRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateRequest::_Internal::env(const UpdateRequest* msg) {
  return *msg->env_;
}
const ::farm::nurture::core::contracts::common::Options&
UpdateRequest::_Internal::options(const UpdateRequest* msg) {
  return *msg->options_;
}
UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  places_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      places_(from.places_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::farm::nurture::core::contracts::common::Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&env_)) + sizeof(options_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateRequest::ArenaDtor(void* object) {
  UpdateRequest* _this = reinterpret_cast< UpdateRequest* >(object);
  (void)_this;
}
void UpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRequest& UpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  places_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Options options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_places(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  total_size += 1UL * this->_internal_places_size();
  for (const auto& msg : this->places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  places_.MergeFrom(from.places_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::farm::nurture::core::contracts::common::Options::MergeFrom(from._internal_options());
  }
}

void UpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  places_.InternalSwap(&other->places_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRequest, options_)
      + sizeof(UpdateRequest::options_)
      - PROTOBUF_FIELD_OFFSET(UpdateRequest, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateResponse::_Internal::env(const UpdateResponse* msg) {
  return *msg->env_;
}
UpdateResponse::UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updated_places_(arena),
  places_with_overlaps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updated_places_(from.updated_places_),
      places_with_overlaps_(from.places_with_overlaps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  updated_places_count_ = from.updated_places_count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateResponse)
}

void UpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&updated_places_count_) -
      reinterpret_cast<char*>(&env_)) + sizeof(updated_places_count_));
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void UpdateResponse::ArenaDtor(void* object) {
  UpdateResponse* _this = reinterpret_cast< UpdateResponse* >(object);
  (void)_this;
}
void UpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResponse& UpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_places_.Clear();
  places_with_overlaps_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  updated_places_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place updated_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updated_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 updated_places_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_places_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places_with_overlaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Place updated_places = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updated_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_updated_places(i), target, stream);
  }

  // int64 updated_places_count = 3;
  if (this->updated_places_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_updated_places_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_with_overlaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_places_with_overlaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateResponse)
  return target;
}

size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place updated_places = 2;
  total_size += 1UL * this->_internal_updated_places_size();
  for (const auto& msg : this->updated_places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  total_size += 1UL * this->_internal_places_with_overlaps_size();
  for (const auto& msg : this->places_with_overlaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // int64 updated_places_count = 3;
  if (this->updated_places_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_places_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateResponse)
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_places_.MergeFrom(from.updated_places_);
  places_with_overlaps_.MergeFrom(from.places_with_overlaps_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.updated_places_count() != 0) {
    _internal_set_updated_places_count(from._internal_updated_places_count());
  }
}

void UpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updated_places_.InternalSwap(&other->updated_places_);
  places_with_overlaps_.InternalSwap(&other->places_with_overlaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateResponse, updated_places_count_)
      + sizeof(UpdateResponse::updated_places_count_)
      - PROTOBUF_FIELD_OFFSET(UpdateResponse, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const DeleteRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
DeleteRequest::_Internal::env(const DeleteRequest* msg) {
  return *msg->env_;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  place_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      place_ids_(from.place_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto.base);
  env_ = nullptr;
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.DeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void DeleteRequest::ArenaDtor(void* object) {
  DeleteRequest* _this = reinterpret_cast< DeleteRequest* >(object);
  (void)_this;
}
void DeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  place_ids_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 place_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_place_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_place_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated int64 place_ids = 2;
  {
    int byte_size = _place_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_place_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.DeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 place_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->place_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _place_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.DeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  place_ids_.MergeFrom(from.place_ids_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
}

void DeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  place_ids_.InternalSwap(&other->place_ids_);
  swap(env_, other->env_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const DeleteResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
DeleteResponse::_Internal::env(const DeleteResponse* msg) {
  return *msg->env_;
}
DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deleted_places_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_places_(from.deleted_places_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_count_) -
      reinterpret_cast<char*>(&env_)) + sizeof(deleted_count_));
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.DeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void DeleteResponse::ArenaDtor(void* object) {
  DeleteResponse* _this = reinterpret_cast< DeleteResponse* >(object);
  (void)_this;
}
void DeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_places_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  deleted_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deleted_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place deleted_places = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deleted_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // int64 deleted_count = 2;
  if (this->deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deleted_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Place deleted_places = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deleted_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_deleted_places(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.DeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place deleted_places = 3;
  total_size += 1UL * this->_internal_deleted_places_size();
  for (const auto& msg : this->deleted_places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // int64 deleted_count = 2;
  if (this->deleted_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deleted_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.DeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_places_.MergeFrom(from.deleted_places_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
}

void DeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deleted_places_.InternalSwap(&other->deleted_places_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteResponse, deleted_count_)
      + sizeof(DeleteResponse::deleted_count_)
      - PROTOBUF_FIELD_OFFSET(DeleteResponse, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const InsertRequest* msg);
  static const ::farm::nurture::core::contracts::common::Options& options(const InsertRequest* msg);
  static const ::farm::nurture::core::contracts::common::Filter& tag_filter(const InsertRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
InsertRequest::_Internal::env(const InsertRequest* msg) {
  return *msg->env_;
}
const ::farm::nurture::core::contracts::common::Options&
InsertRequest::_Internal::options(const InsertRequest* msg) {
  return *msg->options_;
}
const ::farm::nurture::core::contracts::common::Filter&
InsertRequest::_Internal::tag_filter(const InsertRequest* msg) {
  return *msg->tag_filter_;
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  places_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      places_(from.places_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::farm::nurture::core::contracts::common::Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_tag_filter()) {
    tag_filter_ = new ::farm::nurture::core::contracts::common::Filter(*from.tag_filter_);
  } else {
    tag_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.InsertRequest)
}

void InsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tag_filter_) -
      reinterpret_cast<char*>(&env_)) + sizeof(tag_filter_));
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.InsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete tag_filter_;
}

void InsertRequest::ArenaDtor(void* object) {
  InsertRequest* _this = reinterpret_cast< InsertRequest* >(object);
  (void)_this;
}
void InsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRequest& InsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  places_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArena() == nullptr && tag_filter_ != nullptr) {
    delete tag_filter_;
  }
  tag_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Options options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place places = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Filter tag_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.Options options = 2;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Place places = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_places(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.Filter tag_filter = 4;
  if (this->has_tag_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tag_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.InsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place places = 3;
  total_size += 1UL * this->_internal_places_size();
  for (const auto& msg : this->places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // .farm.nurture.core.contracts.common.Options options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .farm.nurture.core.contracts.common.Filter tag_filter = 4;
  if (this->has_tag_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.InsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.InsertRequest)
    MergeFrom(*source);
  }
}

void InsertRequest::MergeFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  places_.MergeFrom(from.places_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::farm::nurture::core::contracts::common::Options::MergeFrom(from._internal_options());
  }
  if (from.has_tag_filter()) {
    _internal_mutable_tag_filter()->::farm::nurture::core::contracts::common::Filter::MergeFrom(from._internal_tag_filter());
  }
}

void InsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  places_.InternalSwap(&other->places_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, tag_filter_)
      + sizeof(InsertRequest::tag_filter_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const InsertResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
InsertResponse::_Internal::env(const InsertResponse* msg) {
  return *msg->env_;
}
InsertResponse::InsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inserted_or_updated_places_(arena),
  places_with_overlaps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.InsertResponse)
}
InsertResponse::InsertResponse(const InsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inserted_or_updated_places_(from.inserted_or_updated_places_),
      places_with_overlaps_(from.places_with_overlaps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  inserted_or_updated_count_ = from.inserted_or_updated_count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.InsertResponse)
}

void InsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inserted_or_updated_count_) -
      reinterpret_cast<char*>(&env_)) + sizeof(inserted_or_updated_count_));
}

InsertResponse::~InsertResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.InsertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void InsertResponse::ArenaDtor(void* object) {
  InsertResponse* _this = reinterpret_cast< InsertResponse* >(object);
  (void)_this;
}
void InsertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertResponse& InsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void InsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.InsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inserted_or_updated_places_.Clear();
  places_with_overlaps_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  inserted_or_updated_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Place inserted_or_updated_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inserted_or_updated_places(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 inserted_or_updated_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inserted_or_updated_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_places_with_overlaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.InsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Place inserted_or_updated_places = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inserted_or_updated_places_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inserted_or_updated_places(i), target, stream);
  }

  // int64 inserted_or_updated_count = 3;
  if (this->inserted_or_updated_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_inserted_or_updated_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_places_with_overlaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_places_with_overlaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.InsertResponse)
  return target;
}

size_t InsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.InsertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Place inserted_or_updated_places = 2;
  total_size += 1UL * this->_internal_inserted_or_updated_places_size();
  for (const auto& msg : this->inserted_or_updated_places_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  total_size += 1UL * this->_internal_places_with_overlaps_size();
  for (const auto& msg : this->places_with_overlaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // int64 inserted_or_updated_count = 3;
  if (this->inserted_or_updated_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inserted_or_updated_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.InsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.InsertResponse)
    MergeFrom(*source);
  }
}

void InsertResponse::MergeFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inserted_or_updated_places_.MergeFrom(from.inserted_or_updated_places_);
  places_with_overlaps_.MergeFrom(from.places_with_overlaps_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.inserted_or_updated_count() != 0) {
    _internal_set_inserted_or_updated_count(from._internal_inserted_or_updated_count());
  }
}

void InsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertResponse::CopyFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResponse::IsInitialized() const {
  return true;
}

void InsertResponse::InternalSwap(InsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inserted_or_updated_places_.InternalSwap(&other->inserted_or_updated_places_);
  places_with_overlaps_.InternalSwap(&other->places_with_overlaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertResponse, inserted_or_updated_count_)
      + sizeof(InsertResponse::inserted_or_updated_count_)
      - PROTOBUF_FIELD_OFFSET(InsertResponse, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LatLng::_Internal {
 public:
};

LatLng::LatLng(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.LatLng)
}
LatLng::LatLng(const LatLng& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.LatLng)
}

void LatLng::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

LatLng::~LatLng() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.LatLng)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatLng::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LatLng::ArenaDtor(void* object) {
  LatLng* _this = reinterpret_cast< LatLng* >(object);
  (void)_this;
}
void LatLng::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatLng::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatLng& LatLng::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatLng_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void LatLng::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.LatLng)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatLng::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatLng::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.LatLng)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.LatLng)
  return target;
}

size_t LatLng::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.LatLng)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatLng::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.LatLng)
  GOOGLE_DCHECK_NE(&from, this);
  const LatLng* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatLng>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.LatLng)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.LatLng)
    MergeFrom(*source);
  }
}

void LatLng::MergeFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.LatLng)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lng() <= 0 && from.lng() >= 0)) {
    _internal_set_lng(from._internal_lng());
  }
}

void LatLng::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.LatLng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatLng::CopyFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.LatLng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLng::IsInitialized() const {
  return true;
}

void LatLng::InternalSwap(LatLng* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatLng, lng_)
      + sizeof(LatLng::lng_)
      - PROTOBUF_FIELD_OFFSET(LatLng, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatLng::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateReferenceRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateReferenceRequest* msg);
  static const ::farm::nurture::core::contracts::common::Options& options(const UpdateReferenceRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateReferenceRequest::_Internal::env(const UpdateReferenceRequest* msg) {
  return *msg->env_;
}
const ::farm::nurture::core::contracts::common::Options&
UpdateReferenceRequest::_Internal::options(const UpdateReferenceRequest* msg) {
  return *msg->options_;
}
UpdateReferenceRequest::UpdateReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateReferenceRequest)
}
UpdateReferenceRequest::UpdateReferenceRequest(const UpdateReferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::farm::nurture::core::contracts::common::Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateReferenceRequest)
}

void UpdateReferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&env_)) + sizeof(options_));
}

UpdateReferenceRequest::~UpdateReferenceRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateReferenceRequest::ArenaDtor(void* object) {
  UpdateReferenceRequest* _this = reinterpret_cast< UpdateReferenceRequest* >(object);
  (void)_this;
}
void UpdateReferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReferenceRequest& UpdateReferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReferenceRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceReference references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Options options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceReference references = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_references(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  return target;
}

size_t UpdateReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.PlaceReference references = 2;
  total_size += 1UL * this->_internal_references_size();
  for (const auto& msg : this->references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateReferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateReferenceRequest)
    MergeFrom(*source);
  }
}

void UpdateReferenceRequest::MergeFrom(const UpdateReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::farm::nurture::core::contracts::common::Options::MergeFrom(from._internal_options());
  }
}

void UpdateReferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReferenceRequest::CopyFrom(const UpdateReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReferenceRequest::IsInitialized() const {
  return true;
}

void UpdateReferenceRequest::InternalSwap(UpdateReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateReferenceRequest, options_)
      + sizeof(UpdateReferenceRequest::options_)
      - PROTOBUF_FIELD_OFFSET(UpdateReferenceRequest, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateReferenceResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateReferenceResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateReferenceResponse::_Internal::env(const UpdateReferenceResponse* msg) {
  return *msg->env_;
}
UpdateReferenceResponse::UpdateReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  update_ref_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateReferenceResponse)
}
UpdateReferenceResponse::UpdateReferenceResponse(const UpdateReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      update_ref_results_(from.update_ref_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateReferenceResponse)
}

void UpdateReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto.base);
  env_ = nullptr;
}

UpdateReferenceResponse::~UpdateReferenceResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void UpdateReferenceResponse::ArenaDtor(void* object) {
  UpdateReferenceResponse* _this = reinterpret_cast< UpdateReferenceResponse* >(object);
  (void)_this;
}
void UpdateReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReferenceResponse& UpdateReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReferenceResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_ref_results_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.UpdateReferenceResult update_ref_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_ref_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.UpdateReferenceResult update_ref_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_ref_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_update_ref_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  return target;
}

size_t UpdateReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.UpdateReferenceResult update_ref_results = 2;
  total_size += 1UL * this->_internal_update_ref_results_size();
  for (const auto& msg : this->update_ref_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateReferenceResponse)
    MergeFrom(*source);
  }
}

void UpdateReferenceResponse::MergeFrom(const UpdateReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_ref_results_.MergeFrom(from.update_ref_results_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
}

void UpdateReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReferenceResponse::CopyFrom(const UpdateReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReferenceResponse::IsInitialized() const {
  return true;
}

void UpdateReferenceResponse::InternalSwap(UpdateReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  update_ref_results_.InternalSwap(&other->update_ref_results_);
  swap(env_, other->env_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateReferenceResult::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Place& updated_place(const UpdateReferenceResult* msg);
};

const ::farm::nurture::core::contracts::common::Place&
UpdateReferenceResult::_Internal::updated_place(const UpdateReferenceResult* msg) {
  return *msg->updated_place_;
}
UpdateReferenceResult::UpdateReferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateReferenceResult)
}
UpdateReferenceResult::UpdateReferenceResult(const UpdateReferenceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updated_place()) {
    updated_place_ = new ::farm::nurture::core::contracts::common::Place(*from.updated_place_);
  } else {
    updated_place_ = nullptr;
  }
  ::memcpy(&new_refs_count_, &from.new_refs_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_ref_values_count_) -
    reinterpret_cast<char*>(&new_refs_count_)) + sizeof(deleted_ref_values_count_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateReferenceResult)
}

void UpdateReferenceResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updated_place_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_ref_values_count_) -
      reinterpret_cast<char*>(&updated_place_)) + sizeof(deleted_ref_values_count_));
}

UpdateReferenceResult::~UpdateReferenceResult() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateReferenceResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReferenceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updated_place_;
}

void UpdateReferenceResult::ArenaDtor(void* object) {
  UpdateReferenceResult* _this = reinterpret_cast< UpdateReferenceResult* >(object);
  (void)_this;
}
void UpdateReferenceResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReferenceResult& UpdateReferenceResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReferenceResult_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateReferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updated_place_ != nullptr) {
    delete updated_place_;
  }
  updated_place_ = nullptr;
  ::memset(&new_refs_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_ref_values_count_) -
      reinterpret_cast<char*>(&new_refs_count_)) + sizeof(deleted_ref_values_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReferenceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Place updated_place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_place(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_refs_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_refs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 appended_refs_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          appended_refs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 added_ref_values_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          added_ref_values_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deleted_refs_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          deleted_refs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deleted_ref_values_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          deleted_ref_values_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReferenceResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  if (this->has_updated_place()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::updated_place(this), target, stream);
  }

  // int32 new_refs_count = 2;
  if (this->new_refs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_refs_count(), target);
  }

  // int32 appended_refs_count = 3;
  if (this->appended_refs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appended_refs_count(), target);
  }

  // int32 added_ref_values_count = 4;
  if (this->added_ref_values_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_added_ref_values_count(), target);
  }

  // int32 deleted_refs_count = 5;
  if (this->deleted_refs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_deleted_refs_count(), target);
  }

  // int32 deleted_ref_values_count = 6;
  if (this->deleted_ref_values_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_deleted_ref_values_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateReferenceResult)
  return target;
}

size_t UpdateReferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  if (this->has_updated_place()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_place_);
  }

  // int32 new_refs_count = 2;
  if (this->new_refs_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_refs_count());
  }

  // int32 appended_refs_count = 3;
  if (this->appended_refs_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_appended_refs_count());
  }

  // int32 added_ref_values_count = 4;
  if (this->added_ref_values_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_added_ref_values_count());
  }

  // int32 deleted_refs_count = 5;
  if (this->deleted_refs_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deleted_refs_count());
  }

  // int32 deleted_ref_values_count = 6;
  if (this->deleted_ref_values_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deleted_ref_values_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReferenceResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReferenceResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReferenceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateReferenceResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateReferenceResult)
    MergeFrom(*source);
  }
}

void UpdateReferenceResult::MergeFrom(const UpdateReferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updated_place()) {
    _internal_mutable_updated_place()->::farm::nurture::core::contracts::common::Place::MergeFrom(from._internal_updated_place());
  }
  if (from.new_refs_count() != 0) {
    _internal_set_new_refs_count(from._internal_new_refs_count());
  }
  if (from.appended_refs_count() != 0) {
    _internal_set_appended_refs_count(from._internal_appended_refs_count());
  }
  if (from.added_ref_values_count() != 0) {
    _internal_set_added_ref_values_count(from._internal_added_ref_values_count());
  }
  if (from.deleted_refs_count() != 0) {
    _internal_set_deleted_refs_count(from._internal_deleted_refs_count());
  }
  if (from.deleted_ref_values_count() != 0) {
    _internal_set_deleted_ref_values_count(from._internal_deleted_ref_values_count());
  }
}

void UpdateReferenceResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReferenceResult::CopyFrom(const UpdateReferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateReferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReferenceResult::IsInitialized() const {
  return true;
}

void UpdateReferenceResult::InternalSwap(UpdateReferenceResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateReferenceResult, deleted_ref_values_count_)
      + sizeof(UpdateReferenceResult::deleted_ref_values_count_)
      - PROTOBUF_FIELD_OFFSET(UpdateReferenceResult, updated_place_)>(
          reinterpret_cast<char*>(&updated_place_),
          reinterpret_cast<char*>(&other->updated_place_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReferenceResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceReference::_Internal {
 public:
};

PlaceReference::PlaceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replace_ref_values_(arena),
  delete_references_(arena),
  delete_ref_values_(arena),
  append_ref_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.PlaceReference)
}
PlaceReference::PlaceReference(const PlaceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replace_ref_values_(from.replace_ref_values_),
      delete_references_(from.delete_references_),
      delete_ref_values_(from.delete_ref_values_),
      append_ref_values_(from.append_ref_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  place_id_ = from.place_id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.PlaceReference)
}

void PlaceReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto.base);
  place_id_ = PROTOBUF_LONGLONG(0);
}

PlaceReference::~PlaceReference() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.PlaceReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceReference::ArenaDtor(void* object) {
  PlaceReference* _this = reinterpret_cast< PlaceReference* >(object);
  (void)_this;
}
void PlaceReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceReference& PlaceReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceReference_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void PlaceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.PlaceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replace_ref_values_.Clear();
  delete_references_.Clear();
  delete_ref_values_.Clear();
  append_ref_values_.Clear();
  place_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 place_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceAttribute replace_ref_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replace_ref_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_references = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_ref_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_ref_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.ReferenceAttribute append_ref_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_append_ref_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.PlaceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_place_id(), target);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute replace_ref_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_ref_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replace_ref_values(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_references = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_delete_references(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_ref_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_ref_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_delete_ref_values(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute append_ref_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_append_ref_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_append_ref_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.PlaceReference)
  return target;
}

size_t PlaceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.PlaceReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute replace_ref_values = 2;
  total_size += 1UL * this->_internal_replace_ref_values_size();
  for (const auto& msg : this->replace_ref_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_references = 3;
  total_size += 1UL * this->_internal_delete_references_size();
  for (const auto& msg : this->delete_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_ref_values = 4;
  total_size += 1UL * this->_internal_delete_ref_values_size();
  for (const auto& msg : this->delete_ref_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute append_ref_values = 5;
  total_size += 1UL * this->_internal_append_ref_values_size();
  for (const auto& msg : this->append_ref_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.PlaceReference)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.PlaceReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.PlaceReference)
    MergeFrom(*source);
  }
}

void PlaceReference::MergeFrom(const PlaceReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.PlaceReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replace_ref_values_.MergeFrom(from.replace_ref_values_);
  delete_references_.MergeFrom(from.delete_references_);
  delete_ref_values_.MergeFrom(from.delete_ref_values_);
  append_ref_values_.MergeFrom(from.append_ref_values_);
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
}

void PlaceReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.PlaceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceReference::CopyFrom(const PlaceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.PlaceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceReference::IsInitialized() const {
  return true;
}

void PlaceReference::InternalSwap(PlaceReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replace_ref_values_.InternalSwap(&other->replace_ref_values_);
  delete_references_.InternalSwap(&other->delete_references_);
  delete_ref_values_.InternalSwap(&other->delete_ref_values_);
  append_ref_values_.InternalSwap(&other->append_ref_values_);
  swap(place_id_, other->place_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateTagsRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateTagsRequest* msg);
  static const ::farm::nurture::core::contracts::common::Options& options(const UpdateTagsRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateTagsRequest::_Internal::env(const UpdateTagsRequest* msg) {
  return *msg->env_;
}
const ::farm::nurture::core::contracts::common::Options&
UpdateTagsRequest::_Internal::options(const UpdateTagsRequest* msg) {
  return *msg->options_;
}
UpdateTagsRequest::UpdateTagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateTagsRequest)
}
UpdateTagsRequest::UpdateTagsRequest(const UpdateTagsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::farm::nurture::core::contracts::common::Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateTagsRequest)
}

void UpdateTagsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&env_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&env_)) + sizeof(options_));
}

UpdateTagsRequest::~UpdateTagsRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateTagsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTagsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateTagsRequest::ArenaDtor(void* object) {
  UpdateTagsRequest* _this = reinterpret_cast< UpdateTagsRequest* >(object);
  (void)_this;
}
void UpdateTagsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTagsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTagsRequest& UpdateTagsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTagsRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateTagsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTagsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.UpdatePlaceTags tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Options options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTagsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.UpdatePlaceTags tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tags(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateTagsRequest)
  return target;
}

size_t UpdateTagsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.UpdatePlaceTags tags = 2;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  // .farm.nurture.core.contracts.common.Options options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTagsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTagsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTagsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateTagsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateTagsRequest)
    MergeFrom(*source);
  }
}

void UpdateTagsRequest::MergeFrom(const UpdateTagsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::farm::nurture::core::contracts::common::Options::MergeFrom(from._internal_options());
  }
}

void UpdateTagsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsRequest::CopyFrom(const UpdateTagsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsRequest::IsInitialized() const {
  return true;
}

void UpdateTagsRequest::InternalSwap(UpdateTagsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTagsRequest, options_)
      + sizeof(UpdateTagsRequest::options_)
      - PROTOBUF_FIELD_OFFSET(UpdateTagsRequest, env_)>(
          reinterpret_cast<char*>(&env_),
          reinterpret_cast<char*>(&other->env_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTagsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdatePlaceTags::_Internal {
 public:
};

UpdatePlaceTags::UpdatePlaceTags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replace_tag_values_(arena),
  delete_tags_(arena),
  delete_tag_values_(arena),
  append_tag_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdatePlaceTags)
}
UpdatePlaceTags::UpdatePlaceTags(const UpdatePlaceTags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replace_tag_values_(from.replace_tag_values_),
      delete_tags_(from.delete_tags_),
      delete_tag_values_(from.delete_tag_values_),
      append_tag_values_(from.append_tag_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  place_id_ = from.place_id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdatePlaceTags)
}

void UpdatePlaceTags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto.base);
  place_id_ = PROTOBUF_LONGLONG(0);
}

UpdatePlaceTags::~UpdatePlaceTags() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdatePlaceTags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlaceTags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatePlaceTags::ArenaDtor(void* object) {
  UpdatePlaceTags* _this = reinterpret_cast< UpdatePlaceTags* >(object);
  (void)_this;
}
void UpdatePlaceTags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlaceTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlaceTags& UpdatePlaceTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlaceTags_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlaceTags::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replace_tag_values_.Clear();
  delete_tags_.Clear();
  delete_tag_values_.Clear();
  append_tag_values_.Clear();
  place_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlaceTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 place_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag replace_tag_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replace_tag_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tag_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_tag_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.PlaceTag append_tag_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_append_tag_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlaceTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_place_id(), target);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag replace_tag_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_tag_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replace_tag_values(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_delete_tags(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tag_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete_tag_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_delete_tag_values(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag append_tag_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_append_tag_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_append_tag_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdatePlaceTags)
  return target;
}

size_t UpdatePlaceTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.PlaceTag replace_tag_values = 2;
  total_size += 1UL * this->_internal_replace_tag_values_size();
  for (const auto& msg : this->replace_tag_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tags = 3;
  total_size += 1UL * this->_internal_delete_tags_size();
  for (const auto& msg : this->delete_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tag_values = 4;
  total_size += 1UL * this->_internal_delete_tag_values_size();
  for (const auto& msg : this->delete_tag_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.PlaceTag append_tag_values = 5;
  total_size += 1UL * this->_internal_append_tag_values_size();
  for (const auto& msg : this->append_tag_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlaceTags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlaceTags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlaceTags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdatePlaceTags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdatePlaceTags)
    MergeFrom(*source);
  }
}

void UpdatePlaceTags::MergeFrom(const UpdatePlaceTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replace_tag_values_.MergeFrom(from.replace_tag_values_);
  delete_tags_.MergeFrom(from.delete_tags_);
  delete_tag_values_.MergeFrom(from.delete_tag_values_);
  append_tag_values_.MergeFrom(from.append_tag_values_);
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
}

void UpdatePlaceTags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlaceTags::CopyFrom(const UpdatePlaceTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdatePlaceTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlaceTags::IsInitialized() const {
  return true;
}

void UpdatePlaceTags::InternalSwap(UpdatePlaceTags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replace_tag_values_.InternalSwap(&other->replace_tag_values_);
  delete_tags_.InternalSwap(&other->delete_tags_);
  delete_tag_values_.InternalSwap(&other->delete_tag_values_);
  append_tag_values_.InternalSwap(&other->append_tag_values_);
  swap(place_id_, other->place_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlaceTags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateTagsResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& env(const UpdateTagsResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
UpdateTagsResponse::_Internal::env(const UpdateTagsResponse* msg) {
  return *msg->env_;
}
UpdateTagsResponse::UpdateTagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  update_tag_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateTagsResponse)
}
UpdateTagsResponse::UpdateTagsResponse(const UpdateTagsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      update_tag_results_(from.update_tag_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_env()) {
    env_ = new ::farm::nurture::core::contracts::common::Environment(*from.env_);
  } else {
    env_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateTagsResponse)
}

void UpdateTagsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto.base);
  env_ = nullptr;
}

UpdateTagsResponse::~UpdateTagsResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateTagsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTagsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete env_;
}

void UpdateTagsResponse::ArenaDtor(void* object) {
  UpdateTagsResponse* _this = reinterpret_cast< UpdateTagsResponse* >(object);
  (void)_this;
}
void UpdateTagsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTagsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTagsResponse& UpdateTagsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTagsResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateTagsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_tag_results_.Clear();
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTagsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.UpdateTagResult update_tag_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_tag_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTagsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::env(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.UpdateTagResult update_tag_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_tag_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_update_tag_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateTagsResponse)
  return target;
}

size_t UpdateTagsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.UpdateTagResult update_tag_results = 2;
  total_size += 1UL * this->_internal_update_tag_results_size();
  for (const auto& msg : this->update_tag_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment env = 1;
  if (this->has_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTagsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTagsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTagsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateTagsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateTagsResponse)
    MergeFrom(*source);
  }
}

void UpdateTagsResponse::MergeFrom(const UpdateTagsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_tag_results_.MergeFrom(from.update_tag_results_);
  if (from.has_env()) {
    _internal_mutable_env()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_env());
  }
}

void UpdateTagsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsResponse::CopyFrom(const UpdateTagsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsResponse::IsInitialized() const {
  return true;
}

void UpdateTagsResponse::InternalSwap(UpdateTagsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  update_tag_results_.InternalSwap(&other->update_tag_results_);
  swap(env_, other->env_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTagsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateTagResult::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Place& updated_place(const UpdateTagResult* msg);
};

const ::farm::nurture::core::contracts::common::Place&
UpdateTagResult::_Internal::updated_place(const UpdateTagResult* msg) {
  return *msg->updated_place_;
}
UpdateTagResult::UpdateTagResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.UpdateTagResult)
}
UpdateTagResult::UpdateTagResult(const UpdateTagResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updated_place()) {
    updated_place_ = new ::farm::nurture::core::contracts::common::Place(*from.updated_place_);
  } else {
    updated_place_ = nullptr;
  }
  ::memcpy(&new_tags_count_, &from.new_tags_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_tag_values_count_) -
    reinterpret_cast<char*>(&new_tags_count_)) + sizeof(deleted_tag_values_count_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.UpdateTagResult)
}

void UpdateTagResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updated_place_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_tag_values_count_) -
      reinterpret_cast<char*>(&updated_place_)) + sizeof(deleted_tag_values_count_));
}

UpdateTagResult::~UpdateTagResult() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.UpdateTagResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTagResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updated_place_;
}

void UpdateTagResult::ArenaDtor(void* object) {
  UpdateTagResult* _this = reinterpret_cast< UpdateTagResult* >(object);
  (void)_this;
}
void UpdateTagResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTagResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTagResult& UpdateTagResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTagResult_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void UpdateTagResult::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.UpdateTagResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updated_place_ != nullptr) {
    delete updated_place_;
  }
  updated_place_ = nullptr;
  ::memset(&new_tags_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_tag_values_count_) -
      reinterpret_cast<char*>(&new_tags_count_)) + sizeof(deleted_tag_values_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTagResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Place updated_place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_place(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_tags_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_tags_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 appended_tags_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          appended_tags_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 added_tag_values_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          added_tag_values_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deleted_tags_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          deleted_tags_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deleted_tag_values_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          deleted_tag_values_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTagResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.UpdateTagResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  if (this->has_updated_place()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::updated_place(this), target, stream);
  }

  // int32 new_tags_count = 2;
  if (this->new_tags_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_tags_count(), target);
  }

  // int32 appended_tags_count = 3;
  if (this->appended_tags_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appended_tags_count(), target);
  }

  // int32 added_tag_values_count = 4;
  if (this->added_tag_values_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_added_tag_values_count(), target);
  }

  // int32 deleted_tags_count = 5;
  if (this->deleted_tags_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_deleted_tags_count(), target);
  }

  // int32 deleted_tag_values_count = 6;
  if (this->deleted_tag_values_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_deleted_tag_values_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.UpdateTagResult)
  return target;
}

size_t UpdateTagResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.UpdateTagResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  if (this->has_updated_place()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_place_);
  }

  // int32 new_tags_count = 2;
  if (this->new_tags_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_tags_count());
  }

  // int32 appended_tags_count = 3;
  if (this->appended_tags_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_appended_tags_count());
  }

  // int32 added_tag_values_count = 4;
  if (this->added_tag_values_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_added_tag_values_count());
  }

  // int32 deleted_tags_count = 5;
  if (this->deleted_tags_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deleted_tags_count());
  }

  // int32 deleted_tag_values_count = 6;
  if (this->deleted_tag_values_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deleted_tag_values_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTagResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.UpdateTagResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTagResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTagResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.UpdateTagResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.UpdateTagResult)
    MergeFrom(*source);
  }
}

void UpdateTagResult::MergeFrom(const UpdateTagResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.UpdateTagResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updated_place()) {
    _internal_mutable_updated_place()->::farm::nurture::core::contracts::common::Place::MergeFrom(from._internal_updated_place());
  }
  if (from.new_tags_count() != 0) {
    _internal_set_new_tags_count(from._internal_new_tags_count());
  }
  if (from.appended_tags_count() != 0) {
    _internal_set_appended_tags_count(from._internal_appended_tags_count());
  }
  if (from.added_tag_values_count() != 0) {
    _internal_set_added_tag_values_count(from._internal_added_tag_values_count());
  }
  if (from.deleted_tags_count() != 0) {
    _internal_set_deleted_tags_count(from._internal_deleted_tags_count());
  }
  if (from.deleted_tag_values_count() != 0) {
    _internal_set_deleted_tag_values_count(from._internal_deleted_tag_values_count());
  }
}

void UpdateTagResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.UpdateTagResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagResult::CopyFrom(const UpdateTagResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.UpdateTagResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagResult::IsInitialized() const {
  return true;
}

void UpdateTagResult::InternalSwap(UpdateTagResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTagResult, deleted_tag_values_count_)
      + sizeof(UpdateTagResult::deleted_tag_values_count_)
      - PROTOBUF_FIELD_OFFSET(UpdateTagResult, updated_place_)>(
          reinterpret_cast<char*>(&updated_place_),
          reinterpret_cast<char*>(&other->updated_place_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTagResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceTagValue::_Internal {
 public:
};

PlaceTagValue::PlaceTagValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  float_values_(arena),
  string_values_(arena),
  bool_values_(arena),
  int64_values_(arena),
  int32_values_(arena),
  nsv_place_id_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.PlaceTagValue)
}
PlaceTagValue::PlaceTagValue(const PlaceTagValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      float_values_(from.float_values_),
      string_values_(from.string_values_),
      bool_values_(from.bool_values_),
      int64_values_(from.int64_values_),
      int32_values_(from.int32_values_),
      nsv_place_id_values_(from.nsv_place_id_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_type_ = from.value_type_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.PlaceTagValue)
}

void PlaceTagValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto.base);
  value_type_ = 0;
}

PlaceTagValue::~PlaceTagValue() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.PlaceTagValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceTagValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceTagValue::ArenaDtor(void* object) {
  PlaceTagValue* _this = reinterpret_cast< PlaceTagValue* >(object);
  (void)_this;
}
void PlaceTagValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceTagValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceTagValue& PlaceTagValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceTagValue_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void PlaceTagValue::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.PlaceTagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_values_.Clear();
  string_values_.Clear();
  bool_values_.Clear();
  int64_values_.Clear();
  int32_values_.Clear();
  nsv_place_id_values_.Clear();
  value_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceTagValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ValueType value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::farm::nurture::core::contracts::common::ValueType>(val));
        } else goto handle_unusual;
        continue;
      // repeated double float_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_float_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_float_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string string_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.PlaceTagValue.string_values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool bool_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_bool_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.NSVPlaceId nsv_place_id_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nsv_place_id_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceTagValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.PlaceTagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  if (this->value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value_type(), target);
  }

  // repeated double float_values = 2;
  if (this->_internal_float_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_float_values(), target);
  }

  // repeated string string_values = 3;
  for (int i = 0, n = this->_internal_string_values_size(); i < n; i++) {
    const auto& s = this->_internal_string_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.PlaceTagValue.string_values");
    target = stream->WriteString(3, s, target);
  }

  // repeated bool bool_values = 4;
  if (this->_internal_bool_values_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_bool_values(), target);
  }

  // repeated int64 int64_values = 5;
  {
    int byte_size = _int64_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_int64_values(), byte_size, target);
    }
  }

  // repeated int32 int32_values = 6;
  {
    int byte_size = _int32_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_int32_values(), byte_size, target);
    }
  }

  // repeated .farm.nurture.core.contracts.common.NSVPlaceId nsv_place_id_values = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nsv_place_id_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_nsv_place_id_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.PlaceTagValue)
  return target;
}

size_t PlaceTagValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.PlaceTagValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double float_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_values_.size());
  for (int i = 0, n = string_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_values_.Get(i));
  }

  // repeated bool bool_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_values = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int32_values = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.common.NSVPlaceId nsv_place_id_values = 7;
  total_size += 1UL * this->_internal_nsv_place_id_values_size();
  for (const auto& msg : this->nsv_place_id_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceTagValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.PlaceTagValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceTagValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceTagValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.PlaceTagValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.PlaceTagValue)
    MergeFrom(*source);
  }
}

void PlaceTagValue::MergeFrom(const PlaceTagValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.PlaceTagValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_values_.MergeFrom(from.float_values_);
  string_values_.MergeFrom(from.string_values_);
  bool_values_.MergeFrom(from.bool_values_);
  int64_values_.MergeFrom(from.int64_values_);
  int32_values_.MergeFrom(from.int32_values_);
  nsv_place_id_values_.MergeFrom(from.nsv_place_id_values_);
  if (from.value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
}

void PlaceTagValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.PlaceTagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceTagValue::CopyFrom(const PlaceTagValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.PlaceTagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceTagValue::IsInitialized() const {
  return true;
}

void PlaceTagValue::InternalSwap(PlaceTagValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  float_values_.InternalSwap(&other->float_values_);
  string_values_.InternalSwap(&other->string_values_);
  bool_values_.InternalSwap(&other->bool_values_);
  int64_values_.InternalSwap(&other->int64_values_);
  int32_values_.InternalSwap(&other->int32_values_);
  nsv_place_id_values_.InternalSwap(&other->nsv_place_id_values_);
  swap(value_type_, other->value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceTagValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OverlappingPlace::_Internal {
 public:
};

OverlappingPlace::OverlappingPlace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.OverlappingPlace)
}
OverlappingPlace::OverlappingPlace(const OverlappingPlace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_id(), 
      GetArena());
  }
  intersecting_geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intersecting_geometry().empty()) {
    intersecting_geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intersecting_geometry(), 
      GetArena());
  }
  place_id_ = from.place_id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.OverlappingPlace)
}

void OverlappingPlace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intersecting_geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  place_id_ = PROTOBUF_LONGLONG(0);
}

OverlappingPlace::~OverlappingPlace() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.OverlappingPlace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OverlappingPlace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intersecting_geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OverlappingPlace::ArenaDtor(void* object) {
  OverlappingPlace* _this = reinterpret_cast< OverlappingPlace* >(object);
  (void)_this;
}
void OverlappingPlace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlappingPlace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverlappingPlace& OverlappingPlace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverlappingPlace_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void OverlappingPlace::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.OverlappingPlace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.ClearToEmpty();
  intersecting_geometry_.ClearToEmpty();
  place_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlappingPlace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 place_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.OverlappingPlace.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intersecting_geometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_intersecting_geometry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlappingPlace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.OverlappingPlace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_place_id(), target);
  }

  // string source_id = 2;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.OverlappingPlace.source_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_id(), target);
  }

  // string intersecting_geometry = 3;
  if (this->intersecting_geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intersecting_geometry().data(), static_cast<int>(this->_internal_intersecting_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_intersecting_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.OverlappingPlace)
  return target;
}

size_t OverlappingPlace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.OverlappingPlace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_id = 2;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // string intersecting_geometry = 3;
  if (this->intersecting_geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intersecting_geometry());
  }

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverlappingPlace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.OverlappingPlace)
  GOOGLE_DCHECK_NE(&from, this);
  const OverlappingPlace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverlappingPlace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.OverlappingPlace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.OverlappingPlace)
    MergeFrom(*source);
  }
}

void OverlappingPlace::MergeFrom(const OverlappingPlace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.OverlappingPlace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_id().size() > 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  if (from.intersecting_geometry().size() > 0) {
    _internal_set_intersecting_geometry(from._internal_intersecting_geometry());
  }
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
}

void OverlappingPlace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.OverlappingPlace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlappingPlace::CopyFrom(const OverlappingPlace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.OverlappingPlace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlappingPlace::IsInitialized() const {
  return true;
}

void OverlappingPlace::InternalSwap(OverlappingPlace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intersecting_geometry_.Swap(&other->intersecting_geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(place_id_, other->place_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlappingPlace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OverlappingPlaces::_Internal {
 public:
};

OverlappingPlaces::OverlappingPlaces(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlaps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.OverlappingPlaces)
}
OverlappingPlaces::OverlappingPlaces(const OverlappingPlaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overlaps_(from.overlaps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_id(), 
      GetArena());
  }
  place_id_ = from.place_id_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.OverlappingPlaces)
}

void OverlappingPlaces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  place_id_ = PROTOBUF_LONGLONG(0);
}

OverlappingPlaces::~OverlappingPlaces() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.OverlappingPlaces)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OverlappingPlaces::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OverlappingPlaces::ArenaDtor(void* object) {
  OverlappingPlaces* _this = reinterpret_cast< OverlappingPlaces* >(object);
  (void)_this;
}
void OverlappingPlaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlappingPlaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverlappingPlaces& OverlappingPlaces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverlappingPlaces_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void OverlappingPlaces::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlaps_.Clear();
  source_id_.ClearToEmpty();
  place_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlappingPlaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 place_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.OverlappingPlaces.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.OverlappingPlace overlaps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlappingPlaces::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_place_id(), target);
  }

  // string source_id = 2;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.OverlappingPlaces.source_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_id(), target);
  }

  // repeated .farm.nurture.core.contracts.common.OverlappingPlace overlaps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_overlaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.OverlappingPlaces)
  return target;
}

size_t OverlappingPlaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.OverlappingPlace overlaps = 3;
  total_size += 1UL * this->_internal_overlaps_size();
  for (const auto& msg : this->overlaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string source_id = 2;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // int64 place_id = 1;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverlappingPlaces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  GOOGLE_DCHECK_NE(&from, this);
  const OverlappingPlaces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverlappingPlaces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.OverlappingPlaces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.OverlappingPlaces)
    MergeFrom(*source);
  }
}

void OverlappingPlaces::MergeFrom(const OverlappingPlaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlaps_.MergeFrom(from.overlaps_);
  if (from.source_id().size() > 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
}

void OverlappingPlaces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlappingPlaces::CopyFrom(const OverlappingPlaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.OverlappingPlaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlappingPlaces::IsInitialized() const {
  return true;
}

void OverlappingPlaces::InternalSwap(OverlappingPlaces* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  overlaps_.InternalSwap(&other->overlaps_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(place_id_, other->place_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlappingPlaces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Validation::_Internal {
 public:
};

Validation::Validation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.Validation)
}
Validation::Validation(const Validation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&name_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.Validation)
}

void Validation::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
}

Validation::~Validation() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.Validation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Validation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Validation::ArenaDtor(void* object) {
  Validation* _this = reinterpret_cast< Validation* >(object);
  (void)_this;
}
void Validation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validation& Validation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validation_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ValidationName name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::farm::nurture::core::contracts::common::ValidationName>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ValidationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::farm::nurture::core::contracts::common::ValidationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValidationName name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // .farm.nurture.core.contracts.common.ValidationType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.Validation)
  return target;
}

size_t Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.Validation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ValidationName name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.ValidationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const Validation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.Validation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.Validation)
    MergeFrom(*source);
  }
}

void Validation::MergeFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Validation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validation::CopyFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validation::IsInitialized() const {
  return true;
}

void Validation::InternalSwap(Validation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validation, type_)
      + sizeof(Validation::type_)
      - PROTOBUF_FIELD_OFFSET(Validation, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RasterDataRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& environment(const RasterDataRequest* msg);
  static const ::farm::nurture::core::contracts::common::TimeSlot& time_slot(const RasterDataRequest* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
RasterDataRequest::_Internal::environment(const RasterDataRequest* msg) {
  return *msg->environment_;
}
const ::farm::nurture::core::contracts::common::TimeSlot&
RasterDataRequest::_Internal::time_slot(const RasterDataRequest* msg) {
  return *msg->time_slot_;
}
void RasterDataRequest::clear_time_slot() {
  if (GetArena() == nullptr && time_slot_ != nullptr) {
    delete time_slot_;
  }
  time_slot_ = nullptr;
}
RasterDataRequest::RasterDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_tiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.RasterDataRequest)
}
RasterDataRequest::RasterDataRequest(const RasterDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map_tiles_(from.map_tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_environment()) {
    environment_ = new ::farm::nurture::core::contracts::common::Environment(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  if (from._internal_has_time_slot()) {
    time_slot_ = new ::farm::nurture::core::contracts::common::TimeSlot(*from.time_slot_);
  } else {
    time_slot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.RasterDataRequest)
}

void RasterDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&environment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_slot_) -
      reinterpret_cast<char*>(&environment_)) + sizeof(time_slot_));
}

RasterDataRequest::~RasterDataRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.RasterDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RasterDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete time_slot_;
}

void RasterDataRequest::ArenaDtor(void* object) {
  RasterDataRequest* _this = reinterpret_cast< RasterDataRequest* >(object);
  (void)_this;
}
void RasterDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RasterDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RasterDataRequest& RasterDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RasterDataRequest_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void RasterDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.RasterDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_tiles_.Clear();
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
  if (GetArena() == nullptr && time_slot_ != nullptr) {
    delete time_slot_;
  }
  time_slot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RasterDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment environment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.MapTile map_tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TimeSlot time_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RasterDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.RasterDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  if (this->has_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::environment(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.MapTile map_tiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_map_tiles(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.TimeSlot time_slot = 3;
  if (this->has_time_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_slot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.RasterDataRequest)
  return target;
}

size_t RasterDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.RasterDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.MapTile map_tiles = 2;
  total_size += 1UL * this->_internal_map_tiles_size();
  for (const auto& msg : this->map_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  if (this->has_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  // .farm.nurture.core.contracts.common.TimeSlot time_slot = 3;
  if (this->has_time_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_slot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RasterDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.RasterDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RasterDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RasterDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.RasterDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.RasterDataRequest)
    MergeFrom(*source);
  }
}

void RasterDataRequest::MergeFrom(const RasterDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.RasterDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_tiles_.MergeFrom(from.map_tiles_);
  if (from.has_environment()) {
    _internal_mutable_environment()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_environment());
  }
  if (from.has_time_slot()) {
    _internal_mutable_time_slot()->::farm::nurture::core::contracts::common::TimeSlot::MergeFrom(from._internal_time_slot());
  }
}

void RasterDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.RasterDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RasterDataRequest::CopyFrom(const RasterDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.RasterDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RasterDataRequest::IsInitialized() const {
  return true;
}

void RasterDataRequest::InternalSwap(RasterDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_tiles_.InternalSwap(&other->map_tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RasterDataRequest, time_slot_)
      + sizeof(RasterDataRequest::time_slot_)
      - PROTOBUF_FIELD_OFFSET(RasterDataRequest, environment_)>(
          reinterpret_cast<char*>(&environment_),
          reinterpret_cast<char*>(&other->environment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RasterDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RasterDataResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::Environment& environment(const RasterDataResponse* msg);
};

const ::farm::nurture::core::contracts::common::Environment&
RasterDataResponse::_Internal::environment(const RasterDataResponse* msg) {
  return *msg->environment_;
}
RasterDataResponse::RasterDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pre_signed_urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.RasterDataResponse)
}
RasterDataResponse::RasterDataResponse(const RasterDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pre_signed_urls_(from.pre_signed_urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_environment()) {
    environment_ = new ::farm::nurture::core::contracts::common::Environment(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.RasterDataResponse)
}

void RasterDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto.base);
  environment_ = nullptr;
}

RasterDataResponse::~RasterDataResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.RasterDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RasterDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete environment_;
}

void RasterDataResponse::ArenaDtor(void* object) {
  RasterDataResponse* _this = reinterpret_cast< RasterDataResponse* >(object);
  (void)_this;
}
void RasterDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RasterDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RasterDataResponse& RasterDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RasterDataResponse_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void RasterDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.RasterDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_signed_urls_.Clear();
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RasterDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.Environment environment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.MapTilesToPreSignedUrl pre_signed_urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pre_signed_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RasterDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.RasterDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  if (this->has_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::environment(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.MapTilesToPreSignedUrl pre_signed_urls = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pre_signed_urls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pre_signed_urls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.RasterDataResponse)
  return target;
}

size_t RasterDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.RasterDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.MapTilesToPreSignedUrl pre_signed_urls = 2;
  total_size += 1UL * this->_internal_pre_signed_urls_size();
  for (const auto& msg : this->pre_signed_urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  if (this->has_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RasterDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.RasterDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RasterDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RasterDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.RasterDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.RasterDataResponse)
    MergeFrom(*source);
  }
}

void RasterDataResponse::MergeFrom(const RasterDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.RasterDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre_signed_urls_.MergeFrom(from.pre_signed_urls_);
  if (from.has_environment()) {
    _internal_mutable_environment()->::farm::nurture::core::contracts::common::Environment::MergeFrom(from._internal_environment());
  }
}

void RasterDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.RasterDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RasterDataResponse::CopyFrom(const RasterDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.RasterDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RasterDataResponse::IsInitialized() const {
  return true;
}

void RasterDataResponse::InternalSwap(RasterDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pre_signed_urls_.InternalSwap(&other->pre_signed_urls_);
  swap(environment_, other->environment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RasterDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MapTilesToPreSignedUrl::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::MapTile& map_tile(const MapTilesToPreSignedUrl* msg);
};

const ::farm::nurture::core::contracts::common::MapTile&
MapTilesToPreSignedUrl::_Internal::map_tile(const MapTilesToPreSignedUrl* msg) {
  return *msg->map_tile_;
}
MapTilesToPreSignedUrl::MapTilesToPreSignedUrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
}
MapTilesToPreSignedUrl::MapTilesToPreSignedUrl(const MapTilesToPreSignedUrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre_signed_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pre_signed_url().empty()) {
    pre_signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_signed_url(), 
      GetArena());
  }
  if (from._internal_has_map_tile()) {
    map_tile_ = new ::farm::nurture::core::contracts::common::MapTile(*from.map_tile_);
  } else {
    map_tile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
}

void MapTilesToPreSignedUrl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto.base);
  pre_signed_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_tile_ = nullptr;
}

MapTilesToPreSignedUrl::~MapTilesToPreSignedUrl() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapTilesToPreSignedUrl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pre_signed_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_tile_;
}

void MapTilesToPreSignedUrl::ArenaDtor(void* object) {
  MapTilesToPreSignedUrl* _this = reinterpret_cast< MapTilesToPreSignedUrl* >(object);
  (void)_this;
}
void MapTilesToPreSignedUrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapTilesToPreSignedUrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapTilesToPreSignedUrl& MapTilesToPreSignedUrl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapTilesToPreSignedUrl_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void MapTilesToPreSignedUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_signed_url_.ClearToEmpty();
  if (GetArena() == nullptr && map_tile_ != nullptr) {
    delete map_tile_;
  }
  map_tile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTilesToPreSignedUrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.MapTile map_tile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pre_signed_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pre_signed_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapTilesToPreSignedUrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.MapTile map_tile = 1;
  if (this->has_map_tile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_tile(this), target, stream);
  }

  // string pre_signed_url = 2;
  if (this->pre_signed_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_signed_url().data(), static_cast<int>(this->_internal_pre_signed_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pre_signed_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  return target;
}

size_t MapTilesToPreSignedUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pre_signed_url = 2;
  if (this->pre_signed_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_signed_url());
  }

  // .farm.nurture.core.contracts.common.MapTile map_tile = 1;
  if (this->has_map_tile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_tile_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapTilesToPreSignedUrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const MapTilesToPreSignedUrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapTilesToPreSignedUrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
    MergeFrom(*source);
  }
}

void MapTilesToPreSignedUrl::MergeFrom(const MapTilesToPreSignedUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_signed_url().size() > 0) {
    _internal_set_pre_signed_url(from._internal_pre_signed_url());
  }
  if (from.has_map_tile()) {
    _internal_mutable_map_tile()->::farm::nurture::core::contracts::common::MapTile::MergeFrom(from._internal_map_tile());
  }
}

void MapTilesToPreSignedUrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTilesToPreSignedUrl::CopyFrom(const MapTilesToPreSignedUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTilesToPreSignedUrl::IsInitialized() const {
  return true;
}

void MapTilesToPreSignedUrl::InternalSwap(MapTilesToPreSignedUrl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pre_signed_url_.Swap(&other->pre_signed_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(map_tile_, other->map_tile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTilesToPreSignedUrl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterSourceConfig::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::TimeRange& valid_time(const RegisterSourceConfig* msg);
  static const ::farm::nurture::core::contracts::common::TimeRange& date_range(const RegisterSourceConfig* msg);
};

const ::farm::nurture::core::contracts::common::TimeRange&
RegisterSourceConfig::_Internal::valid_time(const RegisterSourceConfig* msg) {
  return *msg->valid_time_;
}
const ::farm::nurture::core::contracts::common::TimeRange&
RegisterSourceConfig::_Internal::date_range(const RegisterSourceConfig* msg) {
  return *msg->date_range_;
}
void RegisterSourceConfig::clear_valid_time() {
  if (GetArena() == nullptr && valid_time_ != nullptr) {
    delete valid_time_;
  }
  valid_time_ = nullptr;
}
void RegisterSourceConfig::clear_date_range() {
  if (GetArena() == nullptr && date_range_ != nullptr) {
    delete date_range_;
  }
  date_range_ = nullptr;
}
RegisterSourceConfig::RegisterSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.RegisterSourceConfig)
}
RegisterSourceConfig::RegisterSourceConfig(const RegisterSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_directory().empty()) {
    base_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_directory(), 
      GetArena());
  }
  if (from._internal_has_valid_time()) {
    valid_time_ = new ::farm::nurture::core::contracts::common::TimeRange(*from.valid_time_);
  } else {
    valid_time_ = nullptr;
  }
  if (from._internal_has_date_range()) {
    date_range_ = new ::farm::nurture::core::contracts::common::TimeRange(*from.date_range_);
  } else {
    date_range_ = nullptr;
  }
  ::memcpy(&cloudstore_, &from.cloudstore_,
    static_cast<size_t>(reinterpret_cast<char*>(&band_) -
    reinterpret_cast<char*>(&cloudstore_)) + sizeof(band_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.RegisterSourceConfig)
}

void RegisterSourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto.base);
  base_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&valid_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&band_) -
      reinterpret_cast<char*>(&valid_time_)) + sizeof(band_));
}

RegisterSourceConfig::~RegisterSourceConfig() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.RegisterSourceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterSourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete valid_time_;
  if (this != internal_default_instance()) delete date_range_;
}

void RegisterSourceConfig::ArenaDtor(void* object) {
  RegisterSourceConfig* _this = reinterpret_cast< RegisterSourceConfig* >(object);
  (void)_this;
}
void RegisterSourceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterSourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterSourceConfig& RegisterSourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterSourceConfig_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void RegisterSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_directory_.ClearToEmpty();
  if (GetArena() == nullptr && valid_time_ != nullptr) {
    delete valid_time_;
  }
  valid_time_ = nullptr;
  if (GetArena() == nullptr && date_range_ != nullptr) {
    delete date_range_;
  }
  date_range_ = nullptr;
  ::memset(&cloudstore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_) -
      reinterpret_cast<char*>(&cloudstore_)) + sizeof(band_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterSourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.CloudStore cloudStore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cloudstore(static_cast<::farm::nurture::core::contracts::common::CloudStore>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.UrlBuilder url_builder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_url_builder(static_cast<::farm::nurture::core::contracts::common::UrlBuilder>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Satellite satellite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_satellite(static_cast<::farm::nurture::core::contracts::common::Satellite>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Band band = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_band(static_cast<::farm::nurture::core::contracts::common::Band>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TimeRange valid_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_base_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TimeRange date_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterSourceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.CloudStore cloudStore = 1;
  if (this->cloudstore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cloudstore(), target);
  }

  // .farm.nurture.core.contracts.common.UrlBuilder url_builder = 2;
  if (this->url_builder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_url_builder(), target);
  }

  // .farm.nurture.core.contracts.common.Satellite satellite = 3;
  if (this->satellite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_satellite(), target);
  }

  // .farm.nurture.core.contracts.common.Band band = 4;
  if (this->band() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_band(), target);
  }

  // .farm.nurture.core.contracts.common.TimeRange valid_time = 5;
  if (this->has_valid_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::valid_time(this), target, stream);
  }

  // string base_directory = 6;
  if (this->base_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_directory().data(), static_cast<int>(this->_internal_base_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_base_directory(), target);
  }

  // .farm.nurture.core.contracts.common.TimeRange date_range = 7;
  if (this->has_date_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::date_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.RegisterSourceConfig)
  return target;
}

size_t RegisterSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_directory = 6;
  if (this->base_directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_directory());
  }

  // .farm.nurture.core.contracts.common.TimeRange valid_time = 5;
  if (this->has_valid_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valid_time_);
  }

  // .farm.nurture.core.contracts.common.TimeRange date_range = 7;
  if (this->has_date_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_range_);
  }

  // .farm.nurture.core.contracts.common.CloudStore cloudStore = 1;
  if (this->cloudstore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cloudstore());
  }

  // .farm.nurture.core.contracts.common.UrlBuilder url_builder = 2;
  if (this->url_builder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_url_builder());
  }

  // .farm.nurture.core.contracts.common.Satellite satellite = 3;
  if (this->satellite() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_satellite());
  }

  // .farm.nurture.core.contracts.common.Band band = 4;
  if (this->band() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_band());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterSourceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterSourceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterSourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.RegisterSourceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.RegisterSourceConfig)
    MergeFrom(*source);
  }
}

void RegisterSourceConfig::MergeFrom(const RegisterSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_directory().size() > 0) {
    _internal_set_base_directory(from._internal_base_directory());
  }
  if (from.has_valid_time()) {
    _internal_mutable_valid_time()->::farm::nurture::core::contracts::common::TimeRange::MergeFrom(from._internal_valid_time());
  }
  if (from.has_date_range()) {
    _internal_mutable_date_range()->::farm::nurture::core::contracts::common::TimeRange::MergeFrom(from._internal_date_range());
  }
  if (from.cloudstore() != 0) {
    _internal_set_cloudstore(from._internal_cloudstore());
  }
  if (from.url_builder() != 0) {
    _internal_set_url_builder(from._internal_url_builder());
  }
  if (from.satellite() != 0) {
    _internal_set_satellite(from._internal_satellite());
  }
  if (from.band() != 0) {
    _internal_set_band(from._internal_band());
  }
}

void RegisterSourceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterSourceConfig::CopyFrom(const RegisterSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.RegisterSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterSourceConfig::IsInitialized() const {
  return true;
}

void RegisterSourceConfig::InternalSwap(RegisterSourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  base_directory_.Swap(&other->base_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterSourceConfig, band_)
      + sizeof(RegisterSourceConfig::band_)
      - PROTOBUF_FIELD_OFFSET(RegisterSourceConfig, valid_time_)>(
          reinterpret_cast<char*>(&valid_time_),
          reinterpret_cast<char*>(&other->valid_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterSourceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NSVPlaceId::_Internal {
 public:
};

NSVPlaceId::NSVPlaceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.common.NSVPlaceId)
}
NSVPlaceId::NSVPlaceId(const NSVPlaceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&placenamespace_, &from.placenamespace_,
    static_cast<size_t>(reinterpret_cast<char*>(&placevisibletype_) -
    reinterpret_cast<char*>(&placenamespace_)) + sizeof(placevisibletype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.common.NSVPlaceId)
}

void NSVPlaceId::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&placenamespace_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&placevisibletype_) -
      reinterpret_cast<char*>(&placenamespace_)) + sizeof(placevisibletype_));
}

NSVPlaceId::~NSVPlaceId() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.common.NSVPlaceId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NSVPlaceId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NSVPlaceId::ArenaDtor(void* object) {
  NSVPlaceId* _this = reinterpret_cast< NSVPlaceId* >(object);
  (void)_this;
}
void NSVPlaceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NSVPlaceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NSVPlaceId& NSVPlaceId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NSVPlaceId_Common_2fgeo_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void NSVPlaceId::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.common.NSVPlaceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&placenamespace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&placevisibletype_) -
      reinterpret_cast<char*>(&placenamespace_)) + sizeof(placevisibletype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NSVPlaceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.PlaceNamespace PlaceNamespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_placenamespace(static_cast<::farm::nurture::core::contracts::common::PlaceNamespace>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceSourceType PlaceSourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_placesourcetype(static_cast<::farm::nurture::core::contracts::common::PlaceSourceType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.PlaceVisibleType PlaceVisibleType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_placevisibletype(static_cast<::farm::nurture::core::contracts::common::PlaceVisibleType>(val));
        } else goto handle_unusual;
        continue;
      // int64 place_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          place_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NSVPlaceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.common.NSVPlaceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PlaceNamespace PlaceNamespace = 1;
  if (this->placenamespace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_placenamespace(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType PlaceSourceType = 2;
  if (this->placesourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_placesourcetype(), target);
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlaceVisibleType = 3;
  if (this->placevisibletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_placevisibletype(), target);
  }

  // int64 place_id = 4;
  if (this->place_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_place_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.common.NSVPlaceId)
  return target;
}

size_t NSVPlaceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.common.NSVPlaceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PlaceNamespace PlaceNamespace = 1;
  if (this->placenamespace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_placenamespace());
  }

  // .farm.nurture.core.contracts.common.PlaceSourceType PlaceSourceType = 2;
  if (this->placesourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_placesourcetype());
  }

  // int64 place_id = 4;
  if (this->place_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_place_id());
  }

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlaceVisibleType = 3;
  if (this->placevisibletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_placevisibletype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NSVPlaceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.common.NSVPlaceId)
  GOOGLE_DCHECK_NE(&from, this);
  const NSVPlaceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NSVPlaceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.common.NSVPlaceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.common.NSVPlaceId)
    MergeFrom(*source);
  }
}

void NSVPlaceId::MergeFrom(const NSVPlaceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.common.NSVPlaceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.placenamespace() != 0) {
    _internal_set_placenamespace(from._internal_placenamespace());
  }
  if (from.placesourcetype() != 0) {
    _internal_set_placesourcetype(from._internal_placesourcetype());
  }
  if (from.place_id() != 0) {
    _internal_set_place_id(from._internal_place_id());
  }
  if (from.placevisibletype() != 0) {
    _internal_set_placevisibletype(from._internal_placevisibletype());
  }
}

void NSVPlaceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.common.NSVPlaceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NSVPlaceId::CopyFrom(const NSVPlaceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.common.NSVPlaceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NSVPlaceId::IsInitialized() const {
  return true;
}

void NSVPlaceId::InternalSwap(NSVPlaceId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSVPlaceId, placevisibletype_)
      + sizeof(NSVPlaceId::placevisibletype_)
      - PROTOBUF_FIELD_OFFSET(NSVPlaceId, placenamespace_)>(
          reinterpret_cast<char*>(&placenamespace_),
          reinterpret_cast<char*>(&other->placenamespace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NSVPlaceId::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::PlaceTag* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::PlaceTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::PlaceTag >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ValidationResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ValidationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::GeoPlaces* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::GeoPlaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::GeoPlaces >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ValidationResults* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ValidationResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ValidationResults >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::GeometryToValidate* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::GeometryToValidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::GeometryToValidate >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ValidationsApplicable* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ValidationsApplicable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ValidationsApplicable >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::FilterArguments* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::FilterArguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::FilterArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Filter* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::BaseConditions* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::BaseConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::BaseConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ReferenceAttribute* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ReferenceAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ReferenceAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::ZoomRange* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::ZoomRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::ZoomRange >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::MapTile* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::MapTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::MapTile >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Environment* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Place* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Place >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Place >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Attribute* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Value* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Options* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Options >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UserContext* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UserContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::PlacesData* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::PlacesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::PlacesData >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Configuration* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::TileRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::TileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::TileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::TileResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::TileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::TileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::DeleteRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::DeleteResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::InsertRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::InsertResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::InsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::InsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::LatLng* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::LatLng >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::LatLng >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateReferenceRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateReferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateReferenceResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateReferenceResult* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateReferenceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateReferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::PlaceReference* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::PlaceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::PlaceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateTagsRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateTagsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateTagsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdatePlaceTags* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdatePlaceTags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdatePlaceTags >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateTagsResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateTagsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateTagsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::UpdateTagResult* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::UpdateTagResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::UpdateTagResult >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::PlaceTagValue* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::PlaceTagValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::PlaceTagValue >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::OverlappingPlace* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::OverlappingPlace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::OverlappingPlace >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::OverlappingPlaces* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::OverlappingPlaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::OverlappingPlaces >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::Validation* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::Validation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::Validation >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::RasterDataRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::RasterDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::RasterDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::RasterDataResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::RasterDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::RasterDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::RegisterSourceConfig* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::RegisterSourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::RegisterSourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::common::NSVPlaceId* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::common::NSVPlaceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::common::NSVPlaceId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
