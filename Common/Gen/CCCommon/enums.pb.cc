// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/enums.proto

#include "Common/enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2fenums_2eproto[185];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022Common/enums.proto\022\"farm.nurture.core."
  "contracts.common*4\n\tEventType\022\017\n\013NO_WORK"
  "FLOW\020\000\022\t\n\005EVENT\020\001\022\013\n\007SERVICE\020\002*\224\t\n\013Booki"
  "ngType\022\016\n\nNO_BOOKING\020\000\022\020\n\014FARM_SERVICE\020\001"
  "\022\020\n\014VISIT_FARMER\020\002\022\030\n\024SOIL_TESTING_BOOKI"
  "NG\020\003\022\022\n\016ORCHID_BOOKING\020\004\022\026\n\022PUSA_SPRAY_B"
  "OOKING\020\005\022\035\n\031GROUNDNUT_HARVEST_BOOKING\020\006\022"
  "\032\n\026SEED_TREATMENT_BOOKING\020\007\022\032\n\026POTATO_PL"
  "ANTER_BOOKING\020\010\022\026\n\022CULTIVATOR_BOOKING\020\t\022"
  "\027\n\023DISC_HARROW_BOOKING\020\n\022\025\n\021ROTAVATOR_BO"
  "OKING\020\013\022\025\n\021MB_PLOUGH_BOOKING\020\014\022(\n$TRACK_"
  "TYPE_COMBINE_HARVESTER_BOOKING\020\r\022\035\n\031COMB"
  "INE_HARVESTER_BOOKING\020\016\022\026\n\022SEED_DRILL_BO"
  "OKING\020\017\022\032\n\026MANUAL_LEVELER_BOOKING\020\020\022\030\n\024H"
  "APPY_SEEDER_BOOKING\020\021\022\030\n\024SUPER_SEEDER_BO"
  "OKING\020\022\022\033\n\027ZERO_SEED_DRILL_BOOKING\020\023\022\023\n\017"
  "TROLLEY_BOOKING\020\024\022\036\n\032TRACTOR_CAGE_WHEEL_"
  "BOOKING\020\025\022\030\n\024PADDY_RIDGER_BOOKING\020\026\022\023\n\017M"
  "ULCHER_BOOKING\020\027\022\022\n\016BAILER_BOOKING\020\030\022\030\n\024"
  "POWER_TILLER_BOOKING\020\031\022\030\n\024POWER_WEEDER_B"
  "OOKING\020\032\022\030\n\024POWER_REAPER_BOOKING\020\033\022\024\n\020SH"
  "REDDER_BOOKING\020\034\022\031\n\025POTATO_DIGGER_BOOKIN"
  "G\020\035\022\034\n\030POTATO_HARVESTER_BOOKING\020\036\022\032\n\026PAD"
  "DY_THRESHER_BOOKING\020\037\022\024\n\020THRESHER_BOOKIN"
  "G\020 \022\030\n\024STRAW_REAPER_BOOKING\020!\022\034\n\030GROUNDN"
  "UT_DIGGER_BOOKING\020\"\022\027\n\023MANGO_SPRAY_BOOKI"
  "NG\020#\022\037\n\033LASER_LAND_LEVELLER_BOOKING\020$\022\037\n"
  "\033POMEGRANATE_SPRAYER_BOOKING\020%\022\032\n\026MAIZE_"
  "PLANTING_BOOKING\020&\022\035\n\031SUGARCANE_PLANTER_"
  "BOOKING\020\'\022\031\n\025SOIL_SAMPLING_BOOKING\020(\022\032\n\026"
  "DRONE_SPRAYING_BOOKING\020)\022\033\n\027SOIL_TESTING"
  "_ML_BOOKING\020*\022\036\n\032SOYBEAN_HARVESTING_BOOK"
  "ING\020+*\242\t\n\013ServiceType\022\016\n\nNO_SERVICE\020\000\022\n\n"
  "\006SOWING\020\001\022\014\n\010SPRAYING\020\002\022\016\n\nHARVESTING\020\003\022"
  "\032\n\026SOIL_SAMPLE_COLLECTION\020\004\022\030\n\024SOIL_TEST"
  "ING_SERVICE\020\005\022\026\n\022PUSA_SPRAY_SERVICE\020\006\022\035\n"
  "\031GROUNDNUT_HARVEST_SERVICE\020\007\022\032\n\026SEED_TRE"
  "ATMENT_SERVICE\020\010\022\032\n\026POTATO_PLANTER_SERVI"
  "CE\020\t\022\026\n\022CULTIVATOR_SERVICE\020\n\022\027\n\023DISC_HAR"
  "ROW_SERVICE\020\013\022\025\n\021ROTAVATOR_SERVICE\020\014\022\025\n\021"
  "MB_PLOUGH_SERVICE\020\r\022(\n$TRACK_TYPE_COMBIN"
  "E_HARVESTER_SERVICE\020\016\022\035\n\031COMBINE_HARVEST"
  "ER_SERVICE\020\017\022\026\n\022SEED_DRILL_SERVICE\020\020\022\032\n\026"
  "MANUAL_LEVELER_SERVICE\020\021\022\030\n\024HAPPY_SEEDER"
  "_SERVICE\020\022\022\030\n\024SUPER_SEEDER_SERVICE\020\023\022\033\n\027"
  "ZERO_SEED_DRILL_SERVICE\020\024\022\023\n\017TROLLEY_SER"
  "VICE\020\025\022\036\n\032TRACTOR_CAGE_WHEEL_SERVICE\020\026\022\030"
  "\n\024PADDY_RIDGER_SERVICE\020\027\022\023\n\017MULCHER_SERV"
  "ICE\020\030\022\022\n\016BAILER_SERVICE\020\031\022\030\n\024POWER_TILLE"
  "R_SERVICE\020\032\022\030\n\024POWER_WEEDER_SERVICE\020\033\022\030\n"
  "\024POWER_REAPER_SERVICE\020\034\022\024\n\020SHREDDER_SERV"
  "ICE\020\035\022\031\n\025POTATO_DIGGER_SERVICE\020\036\022\034\n\030POTA"
  "TO_HARVESTER_SERVICE\020\037\022\032\n\026PADDY_THRESHER"
  "_SERVICE\020 \022\024\n\020THRESHER_SERVICE\020!\022\030\n\024STRA"
  "W_REAPER_SERVICE\020\"\022\034\n\030GROUNDNUT_DIGGER_S"
  "ERVICE\020#\022\027\n\023MANGO_SPRAY_SERVICE\020$\022\037\n\033LAS"
  "ER_LAND_LEVELLER_SERVICE\020%\022\037\n\033POMEGRANAT"
  "E_SPRAYER_SERVICE\020&\022\032\n\026MAIZE_PLANTING_SE"
  "RVICE\020\'\022\035\n\031SUGARCANE_PLANTER_SERVICE\020(\022\031"
  "\n\025SOIL_SAMPLING_SERVICE\020)\022\032\n\026DRONE_SPRAY"
  "ING_SERVICE\020*\022\033\n\027SOIL_TESTING_ML_SERVICE"
  "\020+\022\036\n\032SOYBEAN_HARVESTING_SERVICE\020,*\220\n\n\010W"
  "orkType\022\020\n\014NO_WORK_TYPE\020\000\022#\n\037OPERATOR_SO"
  "IL_SAMPLE_COLLECTION\020\001\022\027\n\023OPTICS_SOIL_TE"
  "STING\020\002\022\021\n\rTRACTOR_SPRAY\020\003\022\017\n\013DRONE_SPRA"
  "Y\020\004\022\022\n\016VERTICAL_SPRAY\020\006\022\020\n\014HARVEST_WORK\020"
  "\007\022\032\n\026HARVESTER_DRIVING_WORK\020\010\022\026\n\022TRACTOR"
  "_PUSA_SPRAY\020\t\022\034\n\030SEED_TREATMENT_WORK_TYP"
  "E\020\n\022\034\n\030POTATO_PLANTER_WORK_TYPE\020\013\022\030\n\024CUL"
  "TIVATOR_WORK_TYPE\020\014\022\031\n\025DISC_HARROW_WORK_"
  "TYPE\020\r\022\027\n\023ROTAVATOR_WORK_TYPE\020\016\022\027\n\023MB_PL"
  "OUGH_WORK_TYPE\020\017\022*\n&TRACK_TYPE_COMBINE_H"
  "ARVESTER_WORK_TYPE\020\020\022\037\n\033COMBINE_HARVESTE"
  "R_WORK_TYPE\020\021\022\030\n\024SEED_DRILL_WORK_TYPE\020\022\022"
  "\034\n\030MANUAL_LEVELER_WORK_TYPE\020\023\022\032\n\026HAPPY_S"
  "EEDER_WORK_TYPE\020\024\022\032\n\026SUPER_SEEDER_WORK_T"
  "YPE\020\025\022\035\n\031ZERO_SEED_DRILL_WORK_TYPE\020\026\022\025\n\021"
  "TROLLEY_WORK_TYPE\020\027\022 \n\034TRACTOR_CAGE_WHEE"
  "L_WORK_TYPE\020\030\022\032\n\026PADDY_RIDGER_WORK_TYPE\020"
  "\031\022\025\n\021MULCHER_WORK_TYPE\020\032\022\024\n\020BAILER_WORK_"
  "TYPE\020\033\022\032\n\026POWER_TILLER_WORK_TYPE\020\034\022\032\n\026PO"
  "WER_WEEDER_WORK_TYPE\020\035\022\032\n\026POWER_REAPER_W"
  "ORK_TYPE\020\036\022\026\n\022SHREDDER_WORK_TYPE\020\037\022\033\n\027PO"
  "TATO_DIGGER_WORK_TYPE\020 \022\036\n\032POTATO_HARVES"
  "TER_WORK_TYPE\020!\022\034\n\030PADDY_THRESHER_WORK_T"
  "YPE\020\"\022\026\n\022THRESHER_WORK_TYPE\020#\022\032\n\026STRAW_R"
  "EAPER_WORK_TYPE\020$\022\036\n\032GROUNDNUT_DIGGER_WO"
  "RK_TYPE\020%\022\031\n\025MANGO_SPRAY_WORK_TYPE\020&\022!\n\035"
  "LASER_LAND_LEVELLER_WORK_TYPE\020\'\022!\n\035POMEG"
  "RANATE_SPRAYER_WORK_TYPE\020(\022\034\n\030MAIZE_PLAN"
  "TING_WORK_TYPE\020)\022\037\n\033SUGARCANE_PLANTER_WO"
  "RK_TYPE\020*\022\033\n\027SOIL_SAMPLING_WORK_TYPE\020+\022\034"
  "\n\030DRONE_SPRAYING_WORK_TYPE\020,\022\035\n\031SOIL_TES"
  "TING_ML_WORK_TYPE\020-\022 \n\034SOYBEAN_HARVESTIN"
  "G_WORK_TYPE\020.*8\n\tWorkClass\022\021\n\rNO_WORK_CL"
  "ASS\020\000\022\030\n\024INDIAN_TRACTOR_SPRAY\020\001*B\n\014Servi"
  "ceClass\022\024\n\020NO_SERVICE_CLASS\020\000\022\034\n\030OPERATO"
  "R_MACHINE_SERVICE\020\001*K\n\010UnitType\022\020\n\014NO_UN"
  "IT_TYPE\020\000\022\016\n\nUNIT_ACRES\020\001\022\017\n\013UNIT_LITERS"
  "\020\002\022\014\n\010UNIT_KGS\020\003*\'\n\017ProductSKUClass\022\024\n\020P"
  "RODUCT_NO_CLASS\020\000*%\n\016ProductSKUType\022\023\n\017P"
  "RODUCT_NO_TYPE\020\000*g\n\tVisitType\022\014\n\010NO_EVEN"
  "T\020\000\022\020\n\014SOIL_TESTING\020\001\022\020\n\014CROP_TESTING\020\002\022"
  "\027\n\023FARMER_REGISTRATION\020\003\022\017\n\013FARMER_DEMO\020"
  "\004*M\n\013EventReason\022\023\n\017NO_EVENT_REASON\020\000\022\r\n"
  "\tHERBICIDE\020\001\022\r\n\tPESTICIDE\020\002\022\013\n\007WEATHER\020\003"
  "*\200\010\n\017EventUpdateType\022\r\n\tNO_UPDATE\020\000\022\027\n\023E"
  "VENT_UPDATE_MODIFY\020\002\022\027\n\023EVENT_UPDATE_CAN"
  "CEL\020\003\022 \n\034EVENT_UPDATE_OPERATOR_ACCEPT\020\004\022"
  "\036\n\032EVENT_UPDATE_OPERATOR_DENY\020\005\022\036\n\032EVENT"
  "_UPDATE_SCHEDULE_TIME\020\001\022\036\n\032EVENT_UPDATE_"
  "SCHEDULE_AREA\020\006\022#\n\037EVENT_UPDATE_SCHEDULE"
  "_AREA_TIME\020\014\022\035\n\031EVENT_UPDATE_REQUEST_TIM"
  "E\020\022\022\035\n\031EVENT_UPDATE_REQUEST_AREA\020\023\022\"\n\036EV"
  "ENT_UPDATE_REQUEST_AREA_TIME\020\024\022\037\n\033EVENT_"
  "UPDATE_ACTOR_ASSIGNED\020\007\022\036\n\032EVENT_UPDATE_"
  "ACTOR_REMOVED\020\010\022\035\n\031EVENT_UPDATE_SERVICE_"
  "AREA\020\t\022\"\n\036EVENT_UPDATE_SERVICE_AREA_TIME"
  "\020\n\022\035\n\031EVENT_UPDATE_SERVICE_TIME\020\013\022\036\n\032EVE"
  "NT_UPDATE_SERVICE_START\020\r\022\036\n\032EVENT_UPDAT"
  "E_SERVICE_PAUSE\020\016\022\037\n\033EVENT_UPDATE_SERVIC"
  "E_RESUME\020\017\022\035\n\031EVENT_UPDATE_SERVICE_DONE\020"
  "\020\022\"\n\036EVENT_UPDATE_SERVICE_COMPLETED\020\021\022\036\n"
  "\032EVENT_UPDATE_CAP_AVAILABLE\020\025\022 \n\034EVENT_U"
  "PDATE_CAP_UNAVAILABLE\020\026\022,\n(EVENT_UPDATE_"
  "SAMPLE_COLLECTION_COMPLETED\020\027\022#\n\037EVENT_U"
  "PDATE_DELIVERY_COMPLETED\020\030\022$\n EVENT_UPDA"
  "TE_FARM_SCAN_COMPLETED\020\031\022\"\n\036EVENT_UPDATE"
  "_PAYMENT_COLLECTED\020\032\022 \n\034EVENT_UPDATE_SER"
  "VICE_STOPPED\020\033\022\034\n\030EVENT_UPDATE_IOT_DETAI"
  "LS\020\034\022\033\n\027EVENT_UPDATE_EDIT_ACRES\020\035\022 \n\034EVE"
  "NT_UPDATE_SOIL_ATTRIBUTES\020\036*\236\006\n\tActorTyp"
  "e\022\014\n\010NO_ACTOR\020\000\022\n\n\006FARMER\020\001\022\014\n\010OPERATOR\020"
  "\002\022\021\n\rFIELD_OFFICER\020\003\022 \n\034BUSINESS_DEVELOP"
  "MENT_OFFICER\020\004\022\021\n\rSUPPORT_AGENT\020\005\022\030\n\024ADA"
  "RSH_KRISHI_CENTER\020\006\022\025\n\021EXTENSION_OFFICER"
  "\020\007\022\025\n\021EXTENSION_MANAGER\020\010\022\020\n\014CLUSTER_HEA"
  "D\020\t\022\013\n\007MACHINE\020\n\022\n\n\006SYSTEM\020*\022\014\n\010RETAILER"
  "\020\016\022\016\n\nTECHNICIAN\020\017\022\017\n\013COORDINATOR\020\020\022\033\n\027A"
  "SSISTANT_STATE_MANAGER\020\021\022\016\n\nTEST_ACTOR\020\022"
  "\022\022\n\016LAB_TECHNICIAN\020\023\022\n\n\006GROWER\020\024\022\n\n\006SELL"
  "ER\020\025\022\034\n\030SERVICE_BOOKING_INSIGHTS\020e\022\023\n\017SH"
  "AKTIMAN_ADMIN\020f\022\024\n\020CLUSTER_INCHARGE\020g\022\025\n"
  "\021TERRITORY_MANAGER\020h\022\033\n\027ZONAL_MARKETING_"
  "MANAGER\020i\022\027\n\023ZONAL_SALES_MANAGER\020j\022\031\n\025ZO"
  "NAL_SERVICE_MANAGER\020k\022*\n&ASSISTANT_BUSIN"
  "ESS_DEVELOPMENT_OFFICER\020l\022\023\n\017ASSISTANT_A"
  "DMIN\020m\022\024\n\020RETAILER_OFFICER\020n\022\022\n\016ADMIN_EM"
  "PLOYEE\020o\022\021\n\rUNIMART_ADMIN\020p\022\014\n\010SBU_HEAD\020"
  "q\022\013\n\007PARTNER\020r\022\021\n\rUNIMART_F3_FO\020s\022\022\n\016UNI"
  "MART_INTERN\020t\022\021\n\rSUSTAIN_MITRA\020u\022\020\n\014KRIS"
  "HI_MITRA\020v\"\004\010\013\020\013\"\004\010\014\020\014\"\004\010\r\020\r*\250\001\n\rBooking"
  "Source\022\025\n\021NO_BOOKING_SOURCE\020\000\022\016\n\nFARMER_"
  "APP\020\001\022\020\n\014OPERATOR_APP\020\002\022\016\n\nAKC_PORTAL\020\003\022"
  "\025\n\021TEST_PROBE_SOURCE\020\004\022\016\n\nRETAIL_APP\020\005\022\r"
  "\n\tADMIN_APP\020\006\022\030\n\024SYSTEM_AUTO_CREATION\020\007*"
  "\264\002\n\nClientType\022\022\n\016NO_CLIENT_TYPE\020\000\022\025\n\021CL"
  "IENT_FARMER_APP\020\001\022\027\n\023CLIENT_OPERATOR_APP"
  "\020\002\022\024\n\020CLIENT_ADMIN_APP\020\003\022\031\n\025CLIENT_TECHN"
  "ICIAN_APP\020\004\022\025\n\021CLIENT_AKC_PORTAL\020\005\022\031\n\025CL"
  "IENT_SYS_ALLOCATION\020\006\022\022\n\016CLIENT_CAPTAIN\020"
  "\007\022\016\n\nCLIENT_MDM\020\010\022\025\n\021CLIENT_RETAIL_APP\020\t"
  "\022\026\n\022CLIENT_PARTNER_APP\020\n\022\024\n\020CLIENT_TRADE"
  "_APP\020\013\022\026\n\022CLIENT_UNIMART_APP\020\014*\301\001\n\023Booki"
  "ngStatusReason\022\034\n\030NO_BOOKING_STATUS_REAS"
  "ON\020\000\022\033\n\027SOME_SERVICES_COMPLETED\020\005\022\032\n\026ALL"
  "_SERVICES_COMPLETED\020\001\022\033\n\027SOME_SERVICES_C"
  "ANCELLED\020\002\022\032\n\026ALL_SERVICES_CANCELLED\020\003\022\032"
  "\n\026SOME_SERVICES_REJECTED\020\004*\237\001\n\rBookingSt"
  "atus\022\025\n\021NO_BOOKING_STATUS\020\000\022\023\n\017BOOKING_C"
  "REATED\020\001\022\037\n\033BOOKING_PARTIALLY_COMPLETED\020"
  "\002\022\025\n\021BOOKING_CANCELLED\020\003\022\025\n\021BOOKING_COMP"
  "LETED\020\004\022\023\n\017BOOKING_EXPIRED\020\005*\363\002\n\016Workflo"
  "wStatus\022\r\n\tNO_STATUS\020\000\022\013\n\007CREATED\020\n\022\014\n\010A"
  "CCEPTED\020\017\022\r\n\tCONFIRMED\020\024\022\014\n\010ASSIGNED\020\036\022\r"
  "\n\tSCHEDULED\020(\022\016\n\nDISPATCHED\0202\022\013\n\007STARTED"
  "\020<\022\r\n\tCOMPLETED\020P\022\023\n\016SERVICE_PAUSED\020\310\001\022\022"
  "\n\rSERVICE_BREAK\020\334\001\022 \n\033SAMPLE_COLLECTION_"
  "COMPLETED\020\373\001\022\027\n\022DELIVERY_COMPLETED\020\374\001\022\030\n"
  "\023FARM_SCAN_COMPLETED\020\375\001\022\026\n\021PAYMENT_COLLE"
  "CTED\020\376\001\022\016\n\tSUSPENDED\020\254\002\022\016\n\tCANCELLED\020\300\002\022"
  "\r\n\010REJECTED\020\244\003\022\014\n\007RESUMED\020\245\003\022\014\n\007STOPPED\020"
  "\246\003*\375\016\n\024WorkflowStatusReason\022\026\n\022NO_WORKFL"
  "OW_REASON\020\000\022\034\n\030REASON_SERVICE_TASK_DONE\020"
  "\001\022\034\n\030REASON_SERVICE_CANCELLED\020\"\022\034\n\030REASO"
  "N_MACHINE_BREAKDOWN\020\002\022\035\n\031REASON_CUSTOMER"
  "_NOT_READY\020\003\022\036\n\032REASON_PRODUCT_NOT_MATCH"
  "ED\020\004\022\032\n\026REASON_ACTOR_ALLOTMENT\020\005\022\037\n\033REAS"
  "ON_PRODUCT_SKU_ATTACHED\020\006\022\033\n\027REASON_OPER"
  "ATOR_REMOVED\020\007\022\032\n\026REASON_MACHINE_REMOVED"
  "\020\010\022)\n%REASON_PRODUCT_SKU_ATTACHMENT_REMO"
  "VED\020\t\022\030\n\024REASON_ACTOR_REMOVED\020\n\022\027\n\023REASO"
  "N_TASK_STARTED\020\013\022\026\n\022REASON_TASK_PAUSED\020\014"
  "\022\027\n\023REASON_TASK_RESUMED\020\r\022$\n REASON_OPER"
  "ATOR_FARMER_CONFIRMED\020\016\022\027\n\023REASON_ACTOR_"
  "ON_WAY\020\017\022\030\n\024REASON_LACK_OF_WATER\020\020\022\026\n\022RE"
  "ASON_BAD_WEATHER\020\021\022\034\n\030REASON_PESTICIDE_O"
  "N_CROP\020\022\022\034\n\030REASON_HERBICIDE_ON_CROP\020\023\022\031"
  "\n\025REASON_LAND_NOT_FOUND\020\024\022\031\n\025REASON_CROP"
  "_NOT_FOUND\020\025\022\032\n\026REASON_BOOKING_CREATED\020\026"
  "\022\034\n\030REASON_BOOKING_CANCELLED\020 \022\034\n\030REASON"
  "_BOOKING_COMPLETED\020!\022\035\n\031REASON_TASK_GROU"
  "P_REMOVED\020\027\022\033\n\027REASON_TASK_GROUP_ADDED\020\030"
  "\022\035\n\031REASON_TASK_GROUP_UPDATED\020\031\022\035\n\031REASO"
  "N_CAPACITY_AVAILABLE\020\032\022\037\n\033REASON_CAPACIT"
  "Y_UNAVAILABLE\020\033\022\033\n\027REASON_CAPACITY_EVICT"
  "ED\020$\022\"\n\036REASON_PLANNER_ALLOC_AVAILABLE\020\034"
  "\022$\n REASON_PLANNER_ALLOC_UNAVAILABLE\020\035\022\""
  "\n\036REASON_PLANNER_DAILY_ALLOTMENT\020\036\022\033\n\027RE"
  "ASON_MANUAL_ALLOTMENT\020\037\022\030\n\024REASON_UPDATE"
  "_FAILED\020%\022\034\n\030REASON_UNALLOTTED_FAILED\020&\022"
  "&\n\"REASON_EVICTION_DUE_TO_HIGH_DEMAND\0202\022"
  "\035\n\031REASON_EDIT_LIMIT_CROSSED\020\'\022\026\n\022REASON"
  "_BAD_REQUEST\020(\022!\n\035REASON_BAD_INPUT_REQUE"
  "ST_TIME\020)\022!\n\035REASON_BAD_INPUT_REQUEST_AR"
  "EA\020*\022!\n\035REASON_BAD_INPUT_SERVICE_AREA\020+\022"
  ")\n%REASON_MACHINE_PREVENTIVE_MAINTENANCE"
  "\020,\0225\n1REASON_MACHINE_PREVENTIVE_MAINTENA"
  "NCE_RESCHEDULED\020-\022\034\n\030REASON_NO_SUPPLY_PR"
  "ESENT\020G\022\"\n\036REASON_MISSING_REQUIRED_ACTOR"
  "S\020H\022\036\n\032REASON_SUPPLY_IN_BREAKDOWN\020I\022\037\n\033R"
  "EASON_SUPPLY_CALENDAR_FULL\020J\022-\n)REASON_S"
  "UPPLY_GROUP_INVALID_SKILL_SET_IDS\020K\022\034\n\030R"
  "EASON_MACHINE_CAME_LATE\020Q\022!\n\035REASON_OPER"
  "ATOR_NOT_REACHABLE\020R\022 \n\034REASON_PRODUCT_N"
  "OT_AVAILABLE\020S\022\032\n\026REASON_REQUEST_EXPIRED"
  "\020T\022!\n\035REASON_PUSA_NO_DESIRED_RESULT\020U\022\"\n"
  "\036REASON_PUSA_GROWING_OTHER_CROP\020V\022%\n!REA"
  "SON_PUSA_USING_OTHER_EQUIPMENT\020W\022\027\n\023REAS"
  "ON_FAR_LOCATION\020[\022\027\n\023REASON_TASK_STOPPED"
  "\020e*\373\001\n\024ActorAllotmentStatus\022\023\n\017NO_ALLOT_"
  "STATUS\020\000\022\022\n\016ACTOR_ASSIGNED\020\001\022\021\n\rACTOR_RE"
  "MOVED\020\n\022\037\n\033ACTOR_REMOVED_BEFORE_ON_WAY\020\013"
  "\022\020\n\014ACTOR_ON_WAY\020\002\022 \n\034ACTOR_REMOVED_BEFO"
  "RE_STARTED\020\014\022\021\n\rACTOR_STARTED\020\004\022\035\n\031ACTOR"
  "_REMOVED_AFTER_START\020\017\022\020\n\014ACTOR_PAUSED\020\005"
  "\022\016\n\nACTOR_DONE\020\006*\342\002\n\032ActorAllotmentStatu"
  "sReason\022\032\n\026NO_ALLOT_STATUS_REASON\020\000\022\025\n\021O"
  "PERATOR_ASSIGNED\020\001\022\020\n\014AKC_ASSIGNED\020\002\022\024\n\020"
  "ACTOR_REASSIGNED\020\003\022\032\n\026SERVICE_TASK_COMPL"
  "ETED\020\004\022\033\n\027SERVICE_ACTOR_PART_DONE\020\005\022\023\n\017O"
  "PERATOR_ON_WAY\020\006\022\024\n\020OPERATOR_STARTED\020\007\022\035"
  "\n\031OPERATOR_PAUSED_FOR_WATER\020\010\022\026\n\022OPERATO"
  "R_CANCELLED\020\t\022\024\n\020FARMER_CANCELLED\020\n\022 \n\034O"
  "PERATOR_OR_FARMER_CANCELLED\020\013\022\026\n\022SUPPLY_"
  "UNAVAILABLE\020\014*\247\001\n\031ProductSKUPurchaseChan"
  "nel\022\027\n\023NO_PURCHASE_CHANNEL\020\000\022\034\n\030PURCHASE"
  "_CHANNEL_UNKNOWN\020\001\022\030\n\024PURCHASE_FROM_DEAL"
  "ER\020\002\022\032\n\026PURCHASE_FROM_OPERATOR\020\003\022\035\n\031PURC"
  "HASE_FROM_THIRD_PARTY\020\004*5\n\020ProductSKUDom"
  "ain\022\021\n\rNO_SKU_DOMAIN\020\000\022\016\n\nDOMAIN_UPL\020\001*["
  "\n\027ProductAttachmentStatus\022\030\n\024NO_ATTACHME"
  "NT_STATUS\020\000\022\024\n\020VERIFIED_SUCCESS\020\001\022\020\n\014FAK"
  "E_PRODUCT\020\002*X\n\010Currency\022\025\n\021NO_CURRENCY_K"
  "NOWN\020\000\022\007\n\003INR\020\001\022\007\n\003USD\020\002\022\007\n\003CAD\020\003\022\007\n\003AUD"
  "\020\004\022\021\n\rREWARD_POINTS\020\005*n\n\nTaskStatus\022\022\n\016N"
  "O_TASK_STATUS\020\000\022\020\n\014TASK_CREATED\020\001\022\020\n\014TAS"
  "K_STARTED\020\002\022\022\n\016TASK_COMPLETED\020\003\022\024\n\020PAREN"
  "T_CANCELLED\020\n*\316\001\n\rRequestStatus\022\025\n\021NO_RE"
  "QUEST_STATUS\020\000\022\014\n\007SUCCESS\020\310\001\022\016\n\tBAD_INPU"
  "T\020\220\003\022\016\n\tNOT_FOUND\020\224\003\022\032\n\025REQUEST_NOT_FULF"
  "ILLED\020\234\003\022\033\n\026REQUEST_NOT_AUTHORIZED\020\221\003\022\023\n"
  "\016INTERNAL_ERROR\020\364\003\022\024\n\017PARTIAL_CONTENT\020\316\001"
  "\022\024\n\017INVALID_VERSION\020\246\004*\243\014\n\023RequestStatus"
  "Reason\022\034\n\030NO_REQUEST_STATUS_REASON\020\000\022\027\n\022"
  "DB_NOT_FOUND_ERROR\020\240\037\022\033\n\026DB_DUPLICATE_KE"
  "Y_ERROR\020\241\037\022\026\n\021DB_INTERNAL_ERROR\020\210\'\022\033\n\026RE"
  "QUEST_PREPARE_FAILED\020\360.\022\031\n\024RESPONSE_READ"
  "_FAILED\020\3306\022\026\n\021JSON_PARSE_FAILED\020\3316\022\024\n\017WO"
  "RKFLOW_CLOSED\020\300>\022\035\n\027DB_CREATE_BOOKING_ER"
  "ROR\020\320\206\003\022\035\n\027DB_CREATE_SERVICE_ERROR\020\321\206\003\022%"
  "\n\037DB_CREATE_BOOKING_SERVICE_ERROR\020\322\206\003\022\035\n"
  "\027DB_UPDATE_BOOKING_ERROR\020\264\207\003\022\035\n\027DB_UPDAT"
  "E_SERVICE_ERROR\020\265\207\003\022%\n\037DB_UPDATE_BOOKING"
  "_SERVICE_ERROR\020\266\207\003\022\032\n\024DB_GET_BOOKING_ERR"
  "OR\020\230\210\003\022\032\n\024DB_GET_SERVICE_ERROR\020\231\210\003\022\"\n\034DB"
  "_GET_BOOKING_SERVICE_ERROR\020\232\210\003\022!\n\033REWARD"
  "S_BACKEND_CALL_FAILED\020\200\211\003\022\037\n\031COMMUNICATI"
  "ON_CALL_FAILED\020\341\211\003\022\025\n\017SAM_CALL_FAILED\020\305\212"
  "\003\022\024\n\016BN_CALL_FAILED\020\251\213\003\022\025\n\017AFS_CALL_FAIL"
  "ED\020\215\214\003\022\024\n\016PE_CALL_FAILED\020\361\214\003\022\025\n\017LMS_CALL"
  "_FAILED\020\325\215\003\022\036\n\030FARM_SERVICE_CALL_FAILED\020"
  "\271\216\003\022\034\n\026CROP_MODEL_CALL_FAILED\020\235\217\003\022\"\n\034SUP"
  "PLY_WORKFLOWS_CALL_FAILED\020\201\220\003\022#\n\035BOOKING"
  "_WORKFLOWS_CALL_FAILED\020\202\220\003\022\031\n\023PT_GET_SCO"
  "RE_FAILED\020\340\324\003\022!\n\033PT_SCORE_CALCULATION_FA"
  "ILED\020\341\324\003\022\032\n\024CAPACITY_UNAVAILABLE\020\360\242\004\022\031\n\023"
  "NO_SUPPLY_AVAILABLE\020\361\242\004\022)\n#REVERSE_TRANS"
  "ACTION_EVENT_NOT_FOUND\020\200\361\004\022$\n\036REQUEST_CH"
  "ANGE_VALIDITY_FAILED\020\240\215\006\022\"\n\034REQUEST_TIME"
  "_VALIDITY_FAILED\020\301\204=\022\"\n\034REQUEST_AREA_VAL"
  "IDITY_FAILED\020\302\204=\022\031\n\023REQUEST_AREA_IS_LOW\020"
  "\303\204=\022\032\n\024REQUEST_TIME_IS_PAST\020\304\204=\022 \n\032REQUE"
  "ST_TIME_IS_TOO_FUTURE\020\305\204=\022\033\n\025REQUEST_CHA"
  "NGE_FAILED\020\306\204=\022\033\n\025REQUEST_UPDATE_FAILED\020"
  "\307\204=\022\035\n\027REQUEST_COMPLETE_FAILED\020\250\215\006\022\033\n\025RE"
  "QUEST_CANCEL_FAILED\020\251\215\006\022 \n\032REQUEST_SERVI"
  "CE_AREA_EMPTY\020\312\204=\022#\n\035REQUEST_SERVICE_ARE"
  "A_ID_EMPTY\020\313\204=\022#\n\035REQUEST_SERVICE_AREA_N"
  "S_EMPTY\020\314\204=\022#\n\035REQUEST_DUPLICATE_TRANSAC"
  "TION\020\341\221C\022 \n\032REQUEST_INSUFFICIENT_FUNDS\020\342"
  "\221C\022-\n\'CASHBACK_REQUEST_MONTHLY_LIMIT_EXC"
  "EEDED\020\343\221C\022\031\n\023FARM_DATA_NOT_FOUND\020\201\237I*I\n\022"
  "EventReferenceType\022\033\n\027NO_EVENT_REFERENCE"
  "_TYPE\020\000\022\013\n\007PACKAGE\020\001\022\t\n\005SALES\020\002*q\n\nDebug"
  "Level\022\022\n\016NO_DEBUG_LEVEL\020\000\022\016\n\nPRODUCTION\020"
  "\001\022\t\n\005GAMMA\020\002\022\010\n\004BETA\020\003\022\t\n\005ALPHA\020\004\022\t\n\005STA"
  "GE\020\n\022\007\n\003DEV\020\024\022\013\n\007VERBOSE\020\036*\376\001\n\013TriggerTy"
  "pe\022\016\n\nNO_TRIGGER\020\000\022\025\n\021TRIGGER_ALLOTMENT\020"
  "\001\022\030\n\024TRIGGER_RE_ALLOTMENT\020\002\022\034\n\030TRIGGER_C"
  "ANCEL_ALLOTMENT\020\003\022\034\n\030TRIGGER_APP_NOTIFIC"
  "ATION\020\n\022 \n\034TRIGGER_APP_SMS_NOTIFICATION\020"
  "\013\022\017\n\013TRIGGER_SMS\020\014\022\020\n\014TRIGGER_CALL\020\r\022\023\n\017"
  "TRIGGER_BOOKING\020\024\022\030\n\024TRIGGER_QR_CODE_SCA"
  "N\020\036*)\n\016TriggerSubType\022\027\n\023NO_TRIGGER_SUB_"
  "TYPE\020\000*\342\001\n\010TaskType\022\013\n\007NO_TASK\020\000\022\022\n\016ALLO"
  "TMENT_TASK\020\001\022\025\n\021RE_ALLOTMENT_TASK\020\002\022\031\n\025C"
  "ANCEL_ALLOTMENT_TASK\020\003\022\031\n\025APP_NOTIFICATI"
  "ON_TASK\020\n\022\035\n\031APP_SMS_NOTIFICATION_TASK\020\013"
  "\022\014\n\010SMS_TASK\020\014\022\r\n\tCALL_TASK\020\r\022\022\n\016EVENT_C"
  "REATION\020\024\022\030\n\024PRODUCT_CONFIRMATION\020\036*#\n\013T"
  "askSubType\022\024\n\020NO_TASK_SUB_TYPE\020\000*R\n\024Acto"
  "rInServiceStatus\022\023\n\017NO_ACTOR_STATUS\020\000\022\021\n"
  "\rENABLED_ACTOR\020\001\022\022\n\016DISABLED_ACTOR\020\002*i\n\031"
  "SKUProductInServiceStatus\022\031\n\025NO_SKU_PROD"
  "UCT_STATUS\020\000\022\027\n\023ENABLED_SKU_PRODUCT\020\001\022\030\n"
  "\024DISABLED_SKU_PRODUCT\020\002*_\n\rTaskOperation"
  "\022\t\n\005NO_OP\020\000\022\014\n\010TASK_ADD\020\001\022\017\n\013TASK_DELETE"
  "\020\002\022\023\n\017TASK_RESCHEDULE\020\003\022\017\n\013TASK_MODIFY\020\004"
  "*\233\001\n\014TimeSlotType\022\020\n\014NO_TIME_SLOT\020\000\022\025\n\021R"
  "EQUEST_TIME_SLOT\020\001\022\026\n\022SCHEDULE_TIME_SLOT"
  "\020\002\022\025\n\021SERVICE_TIME_SLOT\020\003\022\025\n\021CREATED_TIM"
  "E_SLOT\020\004\022\034\n\030SERVER_UPDATED_TIME_SLOT\020\005*\234"
  "\n\n\024ServiceAreaNamespace\022\035\n\031NO_SERVICE_AR"
  "EA_NAMESPACE\020\000\022\034\n\030COMMON_SPRAYER_NAMESPA"
  "CE\020\001\022\025\n\021VILLAGE_NAMESPACE\020\002\022\030\n\024COMMON_ST"
  "S_NAMESPACE\020\003\022\035\n\031ORCHID_SPRAYING_NAMESPA"
  "CE\020\004\022\033\n\027PUSA_SPRAYING_NAMESPACE\020\005\022\"\n\036GRO"
  "UNDNUT_HARVESTING_NAMESPACE\020\006\022\034\n\030SEED_TR"
  "EATMENT_NAMESPACE\020\007\022\034\n\030POTATO_PLANTER_NA"
  "MESPACE\020\010\022\030\n\024CULTIVATOR_NAMESPACE\020\t\022\031\n\025D"
  "ISC_HARROW_NAMESPACE\020\n\022\027\n\023ROTAVATOR_NAME"
  "SPACE\020\013\022\027\n\023MB_PLOUGH_NAMESPACE\020\014\022*\n&TRAC"
  "K_TYPE_COMBINE_HARVESTER_NAMESPACE\020\r\022\037\n\033"
  "COMBINE_HARVESTER_NAMESPACE\020\016\022\030\n\024SEED_DR"
  "ILL_NAMESPACE\020\017\022\034\n\030MANUAL_LEVELER_NAMESP"
  "ACE\020\020\022\032\n\026HAPPY_SEEDER_NAMESPACE\020\021\022\032\n\026SUP"
  "ER_SEEDER_NAMESPACE\020\022\022\035\n\031ZERO_SEED_DRILL"
  "_NAMESPACE\020\023\022\025\n\021TROLLEY_NAMESPACE\020\024\022 \n\034T"
  "RACTOR_CAGE_WHEEL_NAMESPACE\020\025\022\032\n\026PADDY_R"
  "IDGER_NAMESPACE\020\026\022\025\n\021MULCHER_NAMESPACE\020\027"
  "\022\024\n\020BAILER_NAMESPACE\020\030\022\032\n\026POWER_TILLER_N"
  "AMESPACE\020\031\022\032\n\026POWER_WEEDER_NAMESPACE\020\032\022\032"
  "\n\026POWER_REAPER_NAMESPACE\020\033\022\026\n\022SHREDDER_N"
  "AMESPACE\020\034\022\033\n\027POTATO_DIGGER_NAMESPACE\020\035\022"
  "\036\n\032POTATO_HARVESTER_NAMESPACE\020\036\022\034\n\030PADDY"
  "_THRESHER_NAMESPACE\020\037\022\026\n\022THRESHER_NAMESP"
  "ACE\020 \022\032\n\026STRAW_REAPER_NAMESPACE\020!\022\036\n\032GRO"
  "UNDNUT_DIGGER_NAMESPACE\020\"\022\031\n\025MANGO_SPRAY"
  "_NAMESPACE\020#\022!\n\035LASER_LAND_LEVELLER_NAME"
  "SPACE\020$\022!\n\035POMEGRANATE_SPRAYER_NAMESPACE"
  "\020%\022\034\n\030MAIZE_PLANTING_NAMESPACE\020&\022\037\n\033SUGA"
  "RCANE_PLANTER_NAMESPACE\020\'\022\033\n\027SOIL_SAMPLI"
  "NG_NAMESPACE\020(\022\034\n\030DRONE_SPRAYING_NAMESPA"
  "CE\020)\022\035\n\031SOIL_TESTING_ML_NAMESPACE\020*\022 \n\034S"
  "OYBEAN_HARVESTING_NAMESPACE\020+*\177\n\014Locatio"
  "nType\022\024\n\020NO_LOCATION_TYPE\020\000\022\021\n\rFARM_LOCA"
  "TION\020\001\022\023\n\017FARMER_LOCATION\020\002\022\024\n\020UNIMART_L"
  "OCATION\020\003\022\033\n\027FARMER_VILLAGE_LOCATION\020\004*\\"
  "\n\rBookingAction\022\025\n\021NO_BOOKING_ACTION\020\000\022\031"
  "\n\025BOOKING_ACTION_CANCEL\020\001\022\031\n\025BOOKING_ACT"
  "ION_UPDATE\020\002*\202\014\n\rServiceAction\022\025\n\021NO_SER"
  "VICE_ACTION\020\000\022\031\n\025SERVICE_ACTION_CREATE\020\001"
  "\022\031\n\025SERVICE_ACTION_CANCEL\020\003\022\032\n\026SERVICE_A"
  "CTION_DETAILS\020\004\022\035\n\031SERVICE_ACTION_RESCHE"
  "DULE\020\005\022\033\n\027SERVICE_ACTION_FEEDBACK\020\006\022 \n\034S"
  "ERVICE_ACTION_ADD_ALLOTMENT\020\007\022#\n\037SERVICE"
  "_ACTION_REMOVE_ALLOTMENT\020\010\022#\n\037SERVICE_AC"
  "TION_CHANGE_ALLOTMENT\020\t\022\036\n\032SERVICE_ACTIO"
  "N_ADD_PRODUCT\020\016\022!\n\035SERVICE_ACTION_REMOVE"
  "_PRODUCT\020\017\022!\n\035SERVICE_ACTION_CHANGE_PROD"
  "UCT\020\020\022\"\n\036SERVICE_ACTION_UPDATE_REQ_SLOT\020"
  "\021\022\"\n\036SERVICE_ACTION_UPDATE_SCH_SLOT\020\023\022\"\n"
  "\036SERVICE_ACTION_UPDATE_SER_SLOT\020\022\022\"\n\036SER"
  "VICE_ACTION_UPDATE_REQ_AREA\020\024\022\"\n\036SERVICE"
  "_ACTION_UPDATE_SCH_AREA\020\025\022\"\n\036SERVICE_ACT"
  "ION_UPDATE_SER_AREA\020\026\022\031\n\025SERVICE_ACTION_"
  "ACCEPT\020\037\022%\n!SERVICE_ACTION_ADD_ALLOTTED_"
  "ACTOR\020 \022(\n$SERVICE_ACTION_CHANGE_ALLOTTE"
  "D_ACTOR\020!\0221\n-SERVICE_ACTION_CHANGE_MULTI"
  "PLE_ALLOTTED_ACTOR\020\"\022$\n SERVICE_ACTION_E"
  "ARLY_UNALLOTMENT\020$\022!\n\035SERVICE_ACTION_MAK"
  "E_ALLOTMENT\020%\022\031\n\025SERVICE_ACTION_REJECT\020&"
  "\022(\n$SERVICE_ACTION_REMOVE_ALLOTTED_ACTOR"
  "\020\'\022+\n\'SERVICE_ACTION_SERVICE_AREA_TIME_U"
  "PDATE\020(\022(\n$SERVICE_ACTION_UPDATE_ALLOTTE"
  "D_ACTOR\020)\022\035\n\031SERVICE_ACTION_UNALLOTTED\020*"
  "\022.\n*SERVICE_ACTION_SAMPLE_COLLECTION_COM"
  "PLETED\020+\022%\n!SERVICE_ACTION_DELIVERY_COMP"
  "LETED\020,\022&\n\"SERVICE_ACTION_FARM_SCAN_COMP"
  "LETED\020-\022$\n SERVICE_ACTION_PAYMENT_COLLEC"
  "TED\020.\022\030\n\024SERVICE_ACTION_START\020/\022\030\n\024SERVI"
  "CE_ACTION_PAUSE\0200\022\032\n\026SERVICE_ACTION_SUSP"
  "END\0201\022\033\n\027SERVICE_ACTION_COMPLETE\0202\022\033\n\027SE"
  "RVICE_ACTION_EVICTION\0203\022\031\n\025SERVICE_ACTIO"
  "N_RESUME\0204\022\027\n\023SERVICE_ACTION_STOP\0205\022<\n8S"
  "ERVICE_ACTION_NO_ALLOTTED_ACTOR_UPDATES_"
  "AFTER_ALLOTMENT\020e\0229\n5SERVICE_ACTION_NO_A"
  "LLOTTED_ACTOR_UPDATES_AFTER_ACCEPT\020f\022\035\n\031"
  "SERVICE_ACTION_EDIT_ACRES\020~\"\004\010g\020}*^\n\024Com"
  "municationChannel\022\016\n\nNO_CHANNEL\020\000\022\007\n\003SMS"
  "\020\001\022\t\n\005EMAIL\020\002\022\024\n\020APP_NOTIFICATION\020\003\022\014\n\010W"
  "HATSAPP\020\004*s\n\023CommunicationStatus\022\022\n\016NO_C"
  "OMM_STATUS\020\000\022\021\n\rCOMM_ACCEPTED\020\001\022\020\n\014COMM_"
  "PENDING\020\002\022\022\n\016COMM_DELIVERED\020\003\022\017\n\013COMM_FA"
  "ILED\020\004*\260\001\n\031CommunicationFailureCause\022\014\n\010"
  "NO_CAUSE\020\000\022\031\n\025COMM_OPERATOR_FAILURE\020\001\022\035\n"
  "\031COMM_NUMBER_NOT_REACHABLE\020\002\022\031\n\025COMM_NUM"
  "BER_NOT_EXIST\020\003\022\027\n\023COMM_NUMBER_BLOCKED\020\004"
  "\022\027\n\023COMM_SYSTEM_FAILURE\020\005*\206\002\n\016ResponseSt"
  "atus\022\026\n\022NO_RESPONSE_STATUS\020\000\022\016\n\nSUCCESSF"
  "UL\020\001\022\t\n\005ERROR\020\002\022\016\n\nNOT__FOUND\020\003\022\020\n\014ZERO_"
  "RESULTS\020\004\022\r\n\tDUPLICATE\020\005\022\023\n\017LIMIT__EXCEE"
  "DED\020\006\022\023\n\017INVALID_REQUEST\020\007\022\031\n\025TEMPORARIL"
  "Y_SUSPENDED\020\010\022\024\n\020OVER_USAGE_LIMIT\020\t\022\022\n\016R"
  "EQUEST_DENIED\020\n\022\021\n\rUNKNOWN_ERROR\020\013\022\016\n\nDB"
  "_FAILURE\020\014*\203\004\n\022ResponseStatusCode\022\033\n\027NO_"
  "RESPONSE_STATUS_CODE\020\000\022\007\n\002OK\020\310\001\022\017\n\nNO_CO"
  "NTENT\020\314\001\022\020\n\013BAD_REQUEST\020\220\003\022\021\n\014UNAUTHORIZ"
  "ED\020\221\003\022\025\n\020ENTITY_NOT_FOUND\020\224\003\022\t\n\004GONE\020\232\003\022"
  "\032\n\025INTERNAL_SERVER_ERROR\020\364\003\022\016\n\tSQL_ERROR"
  "\020\200\004\022\024\n\017DUPLICATE_ENTRY\020\231\003\022\023\n\016LIMIT_EXCEE"
  "DED\020\255\003\022\033\n\026PROFILE_EXIST_OTP_SENT\020\350\007\022\035\n\030P"
  "ROFILE_CREATED_OTP_SENT\020\351\007\022\024\n\017USER_VALID"
  "ATION\020\352\007\022\033\n\026FARMER_PROFILE_CREATED\020\353\007\0221\n"
  ",MULTIPLE_UNIQUE_ACCOUNT_BY_SAME_DEVICE_"
  "ERROR\020\354\007\022\023\n\016USER_NOT_FOUND\020\321\017\022\020\n\013INVALID"
  "_OTP\020\322\017\022\020\n\013OTP_EXPIRED\020\323\017\022\034\n\027USER_ALREAD"
  "Y_REGISTERED\020\324\017\022\037\n\032INACTIVE_USER_REGISTR"
  "ATION\020\325\017*7\n\006Status\022\023\n\017NO_KNOWN_STATUS\020\000\022"
  "\n\n\006ACTIVE\020\001\022\014\n\010INACTIVE\020\002*P\n\016FarmCropSta"
  "tus\022\027\n\023NO_FARM_CROP_STATUS\020\000\022\t\n\005SOWED\020\001\022"
  "\r\n\tHARVESTED\020\002\022\013\n\007DELETED\020\003*2\n\rMediaProv"
  "ider\022\025\n\021NO_MEDIA_PROVIDER\020\000\022\n\n\006AWS_S3\020\001*"
  "9\n\014DurationUnit\022\024\n\020NO_DURATION_UNIT\020\000\022\010\n"
  "\004DAYS\020\001\022\t\n\005YEARS\020\002*E\n\014DurationType\022\024\n\020NO"
  "_DURATION_TYPE\020\000\022\t\n\005SHORT\020\001\022\n\n\006MEDIUM\020\002\022"
  "\010\n\004LONG\020\003*(\n\tScaleType\022\021\n\rNO_SCALE_TYPE\020"
  "\000\022\010\n\004BBCH\020\001*\222\001\n\014LanguageCode\022\024\n\020NO_LANGU"
  "AGE_CODE\020\000\022\t\n\005EN_US\020\001\022\t\n\005HI_IN\020\002\022\006\n\002GU\020\003"
  "\022\006\n\002PA\020\004\022\006\n\002KA\020\005\022\006\n\002TA\020\006\022\006\n\002TE\020\007\022\006\n\002BN\020\010"
  "\022\006\n\002MR\020\t\022\006\n\002ML\020\n\022\006\n\002KN\020\013\022\006\n\002OD\020\014\022\006\n\002PU\020\r"
  "*\202\002\n\nRewardType\022\022\n\016NO_REWARD_TYPE\020\000\022\020\n\014R"
  "EWARD_POINT\020\001\022\024\n\020HEALTH_INSURANCE\020\002\022\024\n\020P"
  "RIORITY_SERVICE\020\003\022\022\n\016FIELD_ADVISORY\020\004\022\032\n"
  "\026SPRAY_SERVICE_DISCOUNT\020\005\022\024\n\020SERVICE_CAS"
  "HBACK\020\006\022\024\n\020BOOKING_DISCOUNT\020\007\022\023\n\017KAVACH_"
  "DISCOUNT\020\010\022\034\n\030PRICE_GUARANTEE_DISCOUNT\020\t"
  "\022\023\n\017DISCOUNT_COUPON\020\n*\251\007\n\016UserActionType"
  "\022\027\n\023NO_USER_ACTION_TYPE\020\000\022\030\n\024PRODUCT_SCA"
  "N_SUCCESS\020\001\022\030\n\024PRODUCT_SCAN_FAILURE\020\002\022\025\n"
  "\021REQUESTED_SERVICE\020\003\022\025\n\021CANCELLED_SERVIC"
  "E\020\004\022\025\n\021COMPLETED_SERVICE\020\005\022\033\n\027PROUCT_SCA"
  "N_ZERO_POINTS\020\006\022\013\n\007SIGN_UP\020\007\022\024\n\020SURVEY_C"
  "OMPLETED\020\010\022\022\n\016PACKAGE_SIGNUP\020\t\022\036\n\032PARTIA"
  "L_REDEMPTION_SERVICE\020\n\022\026\n\022FIRST_REWARD_P"
  "OINT\020\013\022\024\n\020CASHBACK_REQUEST\020\014\022\025\n\021USER_REG"
  "ISTRATION\020\r\022\014\n\010ADD_FARM\020\016\022\024\n\020ADD_BANK_DE"
  "TAILS\020\017\022\026\n\022PRODUCT_GROUP_SCAN\020\020\022\020\n\014BOOK_"
  "SERVICE\020\021\022\032\n\026PRODUCT_SCAN_NOT_FOUND\020\022\022\036\n"
  "\032PRODUCT_SCAN_MONTHLY_LIMIT\020\023\022\035\n\031PRODUCT"
  "_SCAN_WEEKLY_LIMIT\020\024\022\033\n\027PRODUCT_ALREADY_"
  "SCANNED\020\025\022\030\n\024PROMOTIONAL_ACTIVITY\020\026\022\'\n#S"
  "EED_TREATMENT_MACHINE_SCAN_FAILURE\020\027\022\'\n#"
  "SEED_TREATMENT_MACHINE_SCAN_SUCCESS\020\030\022+\n"
  "\'SEED_TREATMENT_MACHINE_SCAN_ZERO_POINTS"
  "\020\031\022)\n%SEED_TREATMENT_MACHINE_SCAN_NOT_FO"
  "UND\020\032\022\020\n\014PRODUCT_SCAN\020\033\022\027\n\023DOCTOR_CALL_R"
  "EQUEST\020\034\022\022\n\016SEGMENT_CHANGE\020\035\022\023\n\017ORDER_DE"
  "LIVERED\020\036\022\032\n\026WEATHER_CASH_GUARANTEE\020\037\022\022\n"
  "\016OFFER_CASHBACK\020 \022\021\n\rSPRAY_BOOKING\020!\022\025\n\021"
  "DAILY_QUIZ_WINNER\020\"\022\024\n\020F2F_POINT_EXPIRY\020"
  "#*\274\001\n\005AppID\022\r\n\tNO_APP_ID\020\000\022\n\n\006NF_SMS\020\001\022\013"
  "\n\007UNIMART\020\002\022\022\n\016AFS_TECHNICIAN\020\003\022\r\n\tAFS_A"
  "DMIN\020\004\022\020\n\014AFS_OPERATOR\020\005\022\r\n\tNF_FARMER\020\006\022"
  "\021\n\rNF_FARMER_IOS\020\007\022\017\n\013NF_RETAILER\020\010\022\023\n\017A"
  "FS_COORDINATOR\020\t\022\016\n\nNF_PARTNER\020\n*0\n\007AppT"
  "ype\022\017\n\013NO_APP_TYPE\020\000\022\013\n\007ANDROID\020\001\022\007\n\003IOS"
  "\020\002*A\n\014HandoverType\022\024\n\020NO_HANDOVER_TYPE\020\000"
  "\022\r\n\tINITIATED\020\001\022\014\n\010COMPLETE\020\002*@\n\016Handove"
  "rStatus\022\026\n\022NO_HANDOVER_STATUS\020\000\022\010\n\004SENT\020"
  "\001\022\014\n\010VERIFIED\020\002*s\n\022MachineEventAction\022\033\n"
  "\027NO_MACHINE_EVENT_ACTION\020\000\022\037\n\033MACHINE_EV"
  "ENT_ACTION_CREATE\020\001\022\037\n\033MACHINE_EVENT_ACT"
  "ION_UPDATE\020\002*C\n\014ScheduleType\022\024\n\020NO_SCHED"
  "ULE_TYPE\020\000\022\014\n\010SCHEDULE\020\001\022\017\n\013RESCHCEDULE\020"
  "\002*[\n\nUserStatus\022\020\n\014UNREGISTERED\020\000\022\016\n\nREG"
  "ISTERED\020\001\022\013\n\007BLOCKED\020\002\022\036\n\032EMAIL_VERIFICA"
  "TION_PENDING\020\003*)\n\006Gender\022\010\n\004MALE\020\000\022\n\n\006FE"
  "MALE\020\001\022\t\n\005OTHER\020\002*\"\n\013AddressType\022\010\n\004HOME"
  "\020\000\022\t\n\005STORE\020\001*L\n\rGeographyType\022\010\n\004ZONE\020\000"
  "\022\n\n\006REGION\020\001\022\014\n\010DISTRICT\020\002\022\n\n\006TEHSIL\020\003\022\013"
  "\n\007VILLAGE\020\004*|\n\014DocumentType\022\014\n\010PAN_CARD\020"
  "\000\022\017\n\013AADHAR_CARD\020\001\022\017\n\013PROFILE_PIC\020\002\022\023\n\017D"
  "RIVING_LICENSE\020\003\022\021\n\rCANCEL_CHEQUE\020\004\022\024\n\020P"
  "OSP_CERTIFICATE\020\005*]\n\030BookingEligibilityS"
  "tatus\022&\n\"UNKNOWN_BOOKING_ELIGIBILITY_STA"
  "TUS\020\000\022\013\n\007ENABLED\020\001\022\014\n\010DISABLED\020\002*\200\001\n\023Boo"
  "kingScheduleType\022\034\n\030NO_BOOKING_SCHEDULE_"
  "TYPE\020\000\022\n\n\006HOURLY\020\001\022\t\n\005DAILY\020\002\022\n\n\006WEEKLY\020"
  "\003\022\013\n\007MONTHLY\020\004\022\r\n\tQUARTERLY\020\005\022\014\n\010ANNUALL"
  "Y\020\006*>\n\020BookingNameSpace\022\030\n\024NO_BOOKING_NA"
  "MESPACE\020\000\022\020\n\014NURTURE_FARM\020\001*$\n\014BookingCl"
  "ass\022\024\n\020NO_BOOKING_CLASS\020\000*\233\001\n\010Language\022\017"
  "\n\013NO_LANGUAGE\020\000\022\013\n\007ENGLISH\020\001\022\t\n\005HINDI\020\002\022"
  "\014\n\010GUJARATI\020\003\022\013\n\007PUNJABI\020\004\022\013\n\007KANNADA\020\005\022"
  "\t\n\005TAMIL\020\006\022\n\n\006TELUGU\020\007\022\r\n\tMALAYALAM\020\010\022\013\n"
  "\007BENGALI\020\t\022\013\n\007MARATHI\020\n*3\n\007Country\022\016\n\nNO"
  "_COUNTRY\020\000\022\t\n\005INDIA\020\001\022\r\n\tAUSTRALIA\020\002*Q\n\024"
  "PushNotificationType\022\035\n\031NO_PUSH_NOTIFICA"
  "TION_TYPE\020\000\022\020\n\014NOTIFICATION\020\001\022\010\n\004DATA\020\002*"
  "5\n\010InfoType\022\020\n\014NO_INFO_TYPE\020\000\022\t\n\005BASIC\020\001"
  "\022\014\n\010DETAILED\020\002*\?\n\017DayDurationType\022\030\n\024NO_"
  "DAY_DURATION_TYPE\020\000\022\007\n\003DAY\020\001\022\t\n\005NIGHT\020\002*"
  "{\n\tDayOfWeek\022\022\n\016NO_DAY_OF_WEEK\020\000\022\n\n\006MOND"
  "AY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THUR"
  "SDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATURDAY\020\006\022\n\n\006SUND"
  "AY\020\007*\204\001\n\023WeatherForecastType\022\035\n\031NO_WEATH"
  "ER_FORCECAST_TYPE\020\000\022\022\n\016DAILY_FORECAST\020\001\022"
  "\023\n\017HOURLY_FORECAST\020\002\022\017\n\013OBSERVATION\020\003\022\024\n"
  "\020HISTORY_FORECAST\020\004*\315\001\n\022CommunicationSta"
  "te\022\032\n\026NO_COMMUNICATION_STATE\020\000\022\026\n\022VENDOR"
  "_UNDELIVERED\020\001\022\024\n\020VENDOR_DELIVERED\020\002\022\030\n\024"
  "CUSTOMER_UNDELIVERED\020\003\022\026\n\022CUSTOMER_DELIV"
  "ERED\020\004\022\025\n\021PROCESSING_FAILED\020\005\022\021\n\rCUSTOME"
  "R_SENT\020\006\022\021\n\rCUSTOMER_READ\020\007*S\n\016NutrientR"
  "ating\022\026\n\022NO_NUTRIENT_RATING\020\000\022\016\n\nSUFFICI"
  "ENT\020\001\022\r\n\tDEFICIENT\020\002\022\n\n\006EXCESS\020\003*F\n\014Crop"
  "LandType\022\024\n\020NO_CROPLAND_TYPE\020\000\022\r\n\tIRRIGA"
  "TED\020\001\022\021\n\rNON_IRRIGATED\020\002*\262\001\n\030SynFertiliz"
  "erReplacement\022!\n\035NO_SYN_FERTILIZER_REPLA"
  "CEMENT\020\000\022\020\n\014BEEF_FEEDLOT\020\001\022\023\n\017CHICKEN_BR"
  "OILER\020\002\022\021\n\rCHICKEN_LAYER\020\003\022\t\n\005DAIRY\020\004\022\t\n"
  "\005SHEEP\020\005\022\t\n\005SWINE\020\006\022\030\n\024OTHER_SYN_FERTILI"
  "ZER\020\007*\267\002\n\014ActivityType\022\017\n\013NO_ACTIVITY\020\000\022"
  "\025\n\021TILLAGE_REDUCTION\020\001\022\027\n\023SEASONAL_COVER"
  "_CROP\020\002\022#\n\037FERTILIZER_REDUCTION_PERCENTA"
  "GE\020\003\022%\n!N_FERTILIZER_REDUCTION_PERCENTAG"
  "E\020\004\022\036\n\032SYN_FERTILIZER_REPLACEMENT\020\005\022-\n)S"
  "YN_N_FERTILIZER_REPLACED_WITH_COMPOST_CN"
  "\020\006\022)\n%SYN_N_FERTILIZER_REDUCTION_PERCENT"
  "AGE\020\007\022 \n\034IMPROVE_FARM_FUEL_EFFICIENCY\020\010*"
  "I\n\023TemplateContentType\022\034\n\030NO_TEMPLATE_CO"
  "NTENT_TYPE\020\000\022\n\n\006STRING\020\001\022\010\n\004HTML\020\002*I\n\021Re"
  "sponseOrderType\022\025\n\021NO_RESPONSE_ORDER\020\000\022\r"
  "\n\tASCENDING\020\001\022\016\n\nDESCENDING\020\002*2\n\nSecretT"
  "ype\022\r\n\tNO_SECRET\020\000\022\007\n\003OTP\020\001\022\014\n\010PASSWORD\020"
  "\002*\337\001\n\013FeatureName\022\016\n\nNO_FEATURE\020\000\022\017\n\013DOC"
  "_ON_CALL\020\001\022\031\n\025SPRAY_SERVICE_FEATURE\020\002\022\033\n"
  "\027WEATHER_UPDATES_FEATURE\020\003\022\031\n\025MANDI_UPDA"
  "TES_FEATURE\020\004\022\030\n\024PRODUCT_SCAN_FEATURE\020\005\022"
  "\"\n\036VIDEO_FEED_CREATE_POST_FEATURE\020\006\022\036\n\032A"
  "UTOMATED_BOUNDARY_POLYGON\020\007*\207\002\n\014OfferKey"
  "Name\022\013\n\007SEGMENT\020\000\022\t\n\005ORDER\020\001\022\r\n\tORDERITE"
  "M\020\002\022\020\n\014USER_PROFILE\020\003\022\030\n\024CONTENT_VERIFIC"
  "ATION\020\004\022\027\n\023PRE_BOOKING_COUPONS\020\005\022\030\n\024POST"
  "_BOOKING_COUPONS\020\006\022\027\n\023PRODUCT_SCAN_ACTIO"
  "N\020\007\022\020\n\014F2F_REFERRAL\020\010\022\026\n\022F2F_REFERRAL_BO"
  "NUS\020\t\022\032\n\026F2F_REFEREE_ONBOARDING\020\n\022\022\n\016DIS"
  "COUNT_ORDER\020\013*\320\006\n\017OfferServiceKey\022\037\n\033SEG"
  "MENT_SEGMENT_ID_ORIGINAL\020\000\022\032\n\026ORDER_ORDE"
  "R_AMOUNT_SUM\020\001\022!\n\035ORDERITEM_TOTAL_PACK_S"
  "IZE_SUM\020\002\022&\n\"ORDER_IDENTIFIER_ID_DISTINC"
  "T_COUNT\020\003\022+\n\'CONTENT_VERIFICATION_COMBIN"
  "ED_ID_LATEST\020\004\022\037\n\033ORDER_ORDER_AMOUNT_ORI"
  "GINAL\020\005\022 \n\034ORDER_AMOUNT_WITHOUT_GST_SUM\020"
  "\006\022%\n!ORDER_AMOUNT_WITHOUT_GST_ORIGINAL\020\007"
  "\022%\n!PRE_BOOKING_COUPONS_BOOKING_COUNT\020\010\022"
  "1\n-POST_BOOKING_COUPONS_MATERIAL_GROUP_C"
  "ODE_LIST\020\t\0222\n.POST_BOOKING_COUPONS_PRODU"
  "CT_REFERENCE_ID_LIST\020\n\0224\n0POST_BOOKING_C"
  "OUPONS_PRODUCT_REFERENCE_TYPE_LIST\020\013\022\030\n\024"
  "ORDERITEM_AMOUNT_SUM\020\014\022\035\n\031ORDERITEM_AMOU"
  "NT_ORIGINAL\020\r\022$\n ORDERITEM_AMOUNT_WITHOU"
  "T_GST_SUM\020\016\022)\n%ORDERITEM_AMOUNT_WITHOUT_"
  "GST_ORIGINAL\020\017\022/\n+DISCOUNT_ORDER_MASTER_"
  "ORDER_AMOUNT_ORIGINAL\020\020\022*\n&DISCOUNT_ORDE"
  "R_MASTER_ORDER_AMOUNT_SUM\020\021\0226\n2DISCOUNT_"
  "ORDER_MASTER_ORDER_AMOUNT_WITHOUT_GST_SU"
  "M\020\022\022;\n7DISCOUNT_ORDER_MASTER_ORDER_AMOUN"
  "T_WITHOUT_GST_ORIGINAL\020\023*\371\003\n\014OfferMetaKe"
  "y\022\031\n\025ORDER_CREATED_AT_DATE\020\000\022\030\n\024ORDER_PL"
  "ACED_AT_DATE\020\001\022\034\n\030ORDERITEM_PLACED_AT_DA"
  "TE\020\002\022$\n ORDERITEM_PRODUCT_GROUP_ORIGINAL"
  "\020\003\022\"\n\036ORDERITEM_IDENTIFIER_ID_LATEST\020\004\022*"
  "\n&CONTENT_VERIFICATION_EVENT_ID_ORIGINAL"
  "\020\005\022\037\n\033ORDER_PAYMENT_TYPE_ORIGINAL\020\006\022\036\n\032O"
  "RDER_IDENTIFIER_ID_LATEST\020\007\022\036\n\032ORDER_SEL"
  "LER_NAME_ORIGINAL\020\010\022\"\n\036ORDERITEM_SELLER_"
  "NAME_ORIGINAL\020\t\022#\n\037ORDERITEM_PRODUCT_NAM"
  "E_ORIGINAL\020\n\022#\n\037ORDERITEM_PAYMENT_TYPE_O"
  "RIGINAL\020\013\022\'\n#DISCOUNT_ORDER_SELLER_NAME_"
  "ORIGINAL\020\014\022(\n$DISCOUNT_ORDER_PRODUCT_NAM"
  "E_ORIGINAL\020\r*Y\n\024OfferCalculationType\022\027\n\023"
  "NO_CALCULATION_TYPE\020\000\022\n\n\006DIRECT\020\001\022\014\n\010IND"
  "IRECT\020\002\022\016\n\nPERCENTAGE\020\003*%\n\021EngagementKey"
  "Name\022\020\n\014SEGMENT_TYPE\020\000*\267\003\n\037EngagementSer"
  "viceUserSegmentKey\022\030\n\024USER_PROFILE_USER_"
  "ID\020\000\022\030\n\024USER_PROFILE_CROP_ID\020\001\022\032\n\026USER_P"
  "ROFILE_REGION_ID\020\002\022\030\n\024USER_PROFILE_FARM_"
  "ID\020\003\022\030\n\024USER_PROFILE_BANK_ID\020\004\022\032\n\026USER_P"
  "ROFILE_NAMESPACE\020\005\022\026\n\022USER_PROFILE_STATE"
  "\020\006\022\031\n\025USER_PROFILE_DISTRICT\020\007\022\027\n\023USER_PR"
  "OFILE_TEHSIL\020\010\022\030\n\024USER_PROFILE_VILLAGE\020\t"
  "\022\030\n\024USER_PROFILE_PINCODE\020\n\022\032\n\026USER_PROFI"
  "LE_USER_TYPE\020\013\022\031\n\025USER_PROFILE_USER_GMV\020"
  "\014\022\026\n\022USER_PROFILE_DEPOS\020\r\022%\n!USER_PROFIL"
  "E_RUPIFI_CREDIT_STATUS\020\016*x\n\017ContentMimeT"
  "ype\022\030\n\024NO_CONTENT_MIME_TYPE\020\000\022\r\n\tVIDEO_M"
  "P4\020\001\022\023\n\017MIME_TYPE_IMAGE\020\002\022\022\n\016MIME_TYPE_T"
  "EXT\020\003\022\023\n\017MIME_TYPE_GROUP\020\004*H\n\021UserConten"
  "tStatus\022\032\n\026NO_USER_CONTENT_STATUS\020\000\022\t\n\005L"
  "IKED\020\001\022\014\n\010DISLIKED\020\002*\224\001\n\014QuestionType\022\024\n"
  "\020NO_QUESTION_TYPE\020\000\022\010\n\004TEXT\020\001\022\013\n\007NUMERIC"
  "\020\002\022\025\n\021TEXT_MULTI_CHOICE\020\003\022\030\n\024NUMERIC_MUL"
  "TI_CHOICE\020\004\022\025\n\021FILL_IN_THE_BLANK\020\005\022\017\n\013FI"
  "LE_UPLOAD\020\006*\243\001\n\023ComparisonCheckType\022\034\n\030N"
  "O_COMPARISON_CHECK_TYPE\020\000\022\006\n\002IN\020\001\022\006\n\002BW\020"
  "\002\022\010\n\004LESS\020\003\022\013\n\007GREATER\020\004\022\016\n\nLESS_EQUAL\020\005"
  "\022\021\n\rGREATER_EQUAL\020\006\022\t\n\005EQUAL\020\007\022\r\n\tNOT_EQ"
  "UAL\020\010\022\n\n\006NOT_IN\020\t*-\n\006Tenant\022\r\n\tNO_TENANT"
  "\020\000\022\007\n\003HFX\020\001\022\013\n\007SEEDHOP\020\002*B\n\tMediaType\022\021\n"
  "\rNO_MEDIA_TYPE\020\000\022\t\n\005IMAGE\020\001\022\014\n\010DOCUMENT\020"
  "\002\022\t\n\005VIDEO\020\003*L\n\017MediaAccessType\022\030\n\024NO_ME"
  "DIA_ACCESS_TYPE\020\000\022\016\n\nPUBLIC_URL\020\001\022\017\n\013DOC"
  "UMENT_ID\020\002*+\n\010DPSource\022\020\n\014NO_DP_SOURCE\020\000"
  "\022\r\n\tCLEVERTAP\020\001*C\n\014EventSubType\022\024\n\020NO_EV"
  "ENT_SUBTYPE\020\000\022\035\n\031CONTENT_MANAGEMENT_SYST"
  "EM\020\001*V\n\023CultivationPractice\022\033\n\027NO_CULTIV"
  "ATION_PRACTICE\020\000\022\007\n\003AWD\020\001\022\007\n\003DSR\020\002\022\020\n\014TR"
  "ANSPLANTED\020\003*\220\001\n\022PracticeChangeType\022\017\n\013N"
  "O_PRACTICE\020\000\022\030\n\024PC_TILLAGE_REDUCTION\020\001\022\032"
  "\n\026PC_COVER_CROP_ADDITION\020\002\022\026\n\022PC_MANURE_"
  "ADDITION\020\003\022\033\n\027PC_FERTILIZER_REDUCTION\020\004*"
  "z\n\016ApprovalStatus\022\026\n\022NO_APPROVAL_STATUS\020"
  "\000\022\017\n\013IN_PROGRESS\020\001\022\014\n\010APPROVED\020\002\022\n\n\006REJE"
  "CT\020\003\022\024\n\020CONTENT_VERIFIED\020\004\022\017\n\013CARE_NEEDE"
  "D\020\005*\355\004\n\024ApprovalStatusReason\022\035\n\031NO_APPRO"
  "VAL_STATUS_REASON\020\000\022 \n\034WATER_NOT_DRAINED"
  "_TILL_15_CM\020\001\022\032\n\026FIELD_IS_STILL_FLOODED\020"
  "\002\022\023\n\017IMAGE_NOT_CLEAR\020\003\022\035\n\031OUTSIDE_OF_EVE"
  "NT_TIMELINE\020\004\022\032\n\026PICTURE_IS_NOT_OF_PIPE\020"
  "\005\022\n\n\006OTHERS\020\006\022\024\n\020MULTIPLE_REASONS\020\007\022\037\n\033P"
  "IPE_TOO_SMALL_IN_THE_IMAGE\020\010\022\033\n\027IMAGE_CL"
  "ICKED_FROM_SIDE\020\t\022&\n\"IMAGE_CLICKED_FROM_"
  "INSIDE_THE_PIPE\020\n\022\014\n\010NO_RULER\020\013\022 \n\034RULER"
  "_PROTRUDING_OUT_OF_PIPE\020\014\022\032\n\026RULER_ROOTE"
  "D_IN_GROUND\020\r\022\031\n\025WATER_ABOVE_THRESHOLD\020\016"
  "\022\013\n\007NO_PIPE\020\017\022\035\n\031PIPE_INTERIOR_NOT_VISIB"
  "LE\020\020\022!\n\035WATER_INSIDE_OUTSIDE_THE_PIPE\020\021\022"
  "!\n\035NO_RULER_AND_NO_HOLES_VISIBLE\020\022\022&\n\"DE"
  "TAILS_DONT_MATCH_ENTERED_DETAILS\020\023\022\037\n\033IM"
  "AGE_IS_NOT_OF_LAND_RECORD\020\024*\373\002\n\013ProgramT"
  "ype\022\023\n\017NO_PROGRAM_TYPE\020\000\022\026\n\022PUSA_SPRAY_P"
  "ROGRAM\020\001\022\017\n\013AWD_PROGRAM\020\002\022\017\n\013DSR_PROGRAM"
  "\020\003\022\025\n\021GROUNDNUT_PROGRAM\020\004\022\017\n\013CRM_PROGRAM"
  "\020\005\022\034\n\030BENGALGRAM_TRADE_PROGRAM\020\006\022\031\n\025AWD_"
  "22_KHARIF_PROGRAM\020\007\022\031\n\025CRM_22_KHARIF_PRO"
  "GRAM\020\010\022\031\n\025DSR_22_KHARIF_PROGRAM\020\t\022\030\n\024SUG"
  "ARCANE_PROGRAM_22\020\n\022\032\n\026SOYABEAN_TRADE_PR"
  "OGRAM\020\013\022\032\n\026RED_GRAM_TRADE_PROGRAM\020\014\022\027\n\023A"
  "WD_22_RABI_PROGRAM\020\r\022\033\n\027HORTICULTURE_PRO"
  "GRAM_22\020\016*t\n\017ProgramCategory\022\027\n\023NO_PROGR"
  "AM_CATEGORY\020\000\022\020\n\014AWD_CATEGORY\020\001\022\020\n\014DSR_C"
  "ATEGORY\020\002\022\020\n\014CRM_CATEGORY\020\003\022\022\n\016TRADE_CAT"
  "EGORY\020\004*Q\n\rProgramStatus\022\025\n\021NO_PROGRAM_S"
  "TATUS\020\000\022\023\n\017PROGRAM_ENABLED\020\001\022\024\n\020PROGRAM_"
  "DISABLED\020\002*\255\002\n\tEventName\022\021\n\rNO_EVENT_NAM"
  "E\020\000\022\022\n\016DRYING_EVENT_1\020\001\022\022\n\016DRYING_EVENT_"
  "2\020\002\022\020\n\014REGISTRATION\020\003\022\013\n\007DETAILS\020\004\022\020\n\014SO"
  "IL_TURNING\020\005\022\023\n\017ROTAVATOR_USAGE\020\006\022\025\n\021PIP"
  "E_INSTALLATION\020\007\022\020\n\014DRYING_EVENT\020\010\022\026\n\022DS"
  "R_PICTURE_UPLOAD\020\t\022\022\n\016DRYING_EVENT_3\020\n\022\022"
  "\n\016CENTRE_OF_BUND\020\013\022\030\n\024FARMER_GAINEXA_PHO"
  "TO\020\014\022\034\n\030FARMER_LAND_RECORD_PHOTO\020\r*\202\001\n\rE"
  "ventCategory\022\025\n\021NO_EVENT_CATEGORY\020\000\022\016\n\nV"
  "IDEO_DATA\020\001\022\020\n\014IMAGE_UPLOAD\020\002\022\r\n\tTEXT_DA"
  "TA\020\003\022\016\n\nGEOFENCING\020\004\022\r\n\tLANDOWNER\020\005\022\n\n\006S"
  "IGNUP\020\006*\230\013\n\024ProgramPageEventType\022\021\n\rNO_E"
  "VENT_TYPE\020\000\022\023\n\017AWD_DRY_EVENT_1\020\001\022\023\n\017AWD_"
  "DRY_EVENT_2\020\002\022\023\n\017DSR_DRY_EVENT_1\020\003\022\023\n\017DS"
  "R_DRY_EVENT_2\020\004\022\023\n\017AWD_DRY_EVENT_3\020\005\022\023\n\017"
  "AWD_DRY_EVENT_4\020\006\022\021\n\rDSR_DRY_EVENT\020\007\022\034\n\030"
  "CRM_PROGRAM_REGISTRATION\020\010\022\026\n\022PUSA_SPRAY"
  "_DETAILS\020\t\022\036\n\032DAY_AFTER_PUSA_SPRAY_EVENT"
  "\020\n\022\026\n\022SOIL_TURNING_EVENT\020\013\022 \n\034ROTAVATOR_"
  "USAGE_DURING_RAINS\020\014\022\016\n\nVIDEO_INFO\020\r\022\020\n\014"
  "SIGNUP_EVENT\020\016\022\031\n\025BEFORE_AERATION_EVENT\020"
  "\017\022\016\n\nGEOTAGGING\020\020\022\035\n\031AWD_DRY_EVENT_1_KHA"
  "RIF_22\020\021\022\035\n\031AWD_DRY_EVENT_2_KHARIF_22\020\022\022"
  "#\n\037BEFORE_AERATION_EVENT_KHARIF_22\020\023\022 \n\034"
  "SOIL_TURNING_EVENT_KHARIF_22\020\024\022(\n$DAY_AF"
  "TER_PUSA_SPRAY_EVENT_KHARIF_22\020\025\022\036\n\032AWD_"
  "SIGNUP_EVENT_KHARIF_22\020\026\022\030\n\024GEOTAGGING_K"
  "HARIF_22\020\027\022\035\n\031DSR_POST_SIGNUP_KHARIF_22\020"
  "\030\022\037\n\033LANDOWNER_DETAILS_KHARIF_22\020\031\022\036\n\032DS"
  "R_SIGNUP_EVENT_KHARIF_22\020\032\022\036\n\032CRM_SIGNUP"
  "_EVENT_KHARIF_22\020\033\022\035\n\031AWD_DRY_EVENT_3_KH"
  "ARIF_22\020\034\022 \n\034AWD_CENTRE_OF_BUND_KHARIF_2"
  "2\020\035\022&\n\"AWD_FARMER_GAINEXA_PHOTO_KHARIF_2"
  "2\020\036\022*\n&SUGARCANE_PROGRAM_LANDOWNER_DETAI"
  "LS_22\020\037\022%\n!SUGARCANE_PROGRAM_SIGNUP_EVEN"
  "T_22\020 \022 \n\034DSR_CENTRE_OF_BUND_KHARIF_22\020!"
  "\022 \n\034CRM_CENTRE_OF_BUND_KHARIF_22\020\"\022\033\n\027AW"
  "D_DRY_EVENT_1_RABI_22\020)\022\033\n\027AWD_DRY_EVENT"
  "_2_RABI_22\020*\022!\n\035BEFORE_AERATION_EVENT_RA"
  "BI_22\020+\022\034\n\030AWD_SIGNUP_EVENT_RABI_22\020,\022\026\n"
  "\022GEOTAGGING_RABI_22\020-\022\035\n\031LANDOWNER_DETAI"
  "LS_RABI_22\020.\022\033\n\027AWD_DRY_EVENT_3_RABI_22\020"
  "/\022\036\n\032AWD_CENTRE_OF_BUND_RABI_22\0200\022$\n AWD"
  "_FARMER_GAINEXA_PHOTO_RABI_22\0201\022-\n)HORTI"
  "CULTURE_PROGRAM_LANDOWNER_DETAILS_22\0202\022("
  "\n$HORTICULTURE_PROGRAM_SIGNUP_EVENT_22\0203"
  "\022(\n$AWD_FARMER_LAND_RECORD_PHOTO_RABI_22"
  "\0204*\\\n\025ProgramLocationConfig\022\017\n\013BOTH_CONF"
  "IG\020\000\022\030\n\024USER_LOCATION_CONFIG\020\001\022\030\n\024FARM_L"
  "OCATION_CONFIG\020\002*Z\n\020GeofencingStatus\022\030\n\024"
  "NO_GEOFENCING_STATUS\020\000\022\026\n\022GEOFENCING_PEN"
  "DING\020\001\022\024\n\020GEOFENCING_SAVED\020\002*I\n\013EventSta"
  "tus\022\023\n\017NO_EVENT_STATUS\020\000\022\021\n\rEVENT_ENABLE"
  "D\020\001\022\022\n\016EVENT_DISABLED\020\002*R\n\013ContactType\022\023"
  "\n\017NO_CONTACT_TYPE\020\000\022\014\n\010EMAIL_ID\020\001\022\021\n\rMOB"
  "ILE_NUMBER\020\002\022\r\n\tFCM_TOKEN\020\003*`\n\016CampaignS"
  "tatus\022\026\n\022NO_CAMPAGIN_STATUS\020\000\022\013\n\007RUNNING"
  "\020\001\022\n\n\006HALTED\020\002\022\020\n\014PRE_INACTION\020\003\022\013\n\007DRAF"
  "TED\020\004*o\n\tNameSpace\022\020\n\014NO_NAMESPACE\020\000\022\010\n\004"
  "FARM\020\001\022\n\n\006RETAIL\020\002\022\t\n\005TRADE\020\003\022\013\n\007SUSTAIN"
  "\020\004\022\023\n\017NURTURE_PARTNER\020\005\022\r\n\tINSURANCE\020\006*j"
  "\n\021CampaignQueryType\022\032\n\026NO_CAMPAIGN_QUERY"
  "_TYPE\020\000\022\n\n\006ATHENA\020\001\022\014\n\010DATABASE\020\002\022\r\n\tUSE"
  "R_LIST\020\003\022\020\n\014USER_JOURNEY\020\004*o\n\030CampaignQu"
  "eryMappingType\022\031\n\025NO_QUERY_MAPPING_TYPE\020"
  "\000\022\020\n\014USER_DEFINED\020\001\022\024\n\020BUSINESS_DEFINED\020"
  "\002\022\020\n\014CUSTOM_QUERY\020\003*m\n\023ReferralBookingTy"
  "pe\022\032\n\026REFERRAL_SPRAY_BOOKING\020\000\022\031\n\025REFERR"
  "AL_PRODUCT_SCAN\020\001\022\037\n\033REFERRAL_PROGRAM_EN"
  "ROLLMENT\020\002*K\n\014ReferralType\022\017\n\013NO_REFERRA"
  "L\020\000\022\025\n\021EXISTING_REFERRAL\020\001\022\023\n\017CUSTOM_REF"
  "ERRAL\020\002*_\n\nFormStatus\022\022\n\016NO_FORM_STATUS\020"
  "\000\022\014\n\010FS_DRAFT\020\001\022\020\n\014FS_COMPLETED\020\002\022\r\n\tFS_"
  "ACTIVE\020\003\022\016\n\nFS_DELETED\020\004*Z\n\021EligibilityS"
  "tatus\022\031\n\025NO_ELIGIBILITY_STATUS\020\000\022\014\n\010ELIG"
  "IBLE\020\001\022\017\n\013IN_ELIGIBLE\020\002\022\013\n\007UNKNOWN\020\003*l\n\014"
  "ServicesName\022\023\n\017PADDY_HARVESTER\020\000\022\020\n\014HAP"
  "PY_SEEDER\020\001\022\n\n\006BAILER\020\002\022\022\n\016STUBBLE_CUTTE"
  "R\020\003\022\025\n\021COMBINE_HARVESTER\020\004*e\n\024CampaignSc"
  "heduleType\022\035\n\031NO_CAMPAIGN_SCHEDULE_TYPE\020"
  "\000\022\026\n\022INACTION_OVER_TIME\020\001\022\026\n\022DYNAMIC_MED"
  "IA_TYPE\020\002*i\n\014ResourceType\022\017\n\013NO_RESOURCE"
  "\020\000\022\025\n\021FARMER_ONBOARDING\020\001\022\013\n\007BOOKING\020\002\022\022"
  "\n\016PROGRAM_SIGNUP\020\003\022\020\n\014BANK_DEPOSIT\020\004*i\n\022"
  "ResourceAccessType\022\r\n\tNO_ACCESS\020\000\022\010\n\004VIE"
  "W\020\001\022\n\n\006CREATE\020\002\022\010\n\004EDIT\020\003\022\n\n\006DELETE\020\004\022\n\n"
  "\006CANCEL\020\005\022\014\n\010REASSIGN\020\006*\241\001\n\017ContentCateg"
  "ory\022\027\n\023NO_CONTENT_CATEGORY\020\000\022\016\n\nMEDIA_FE"
  "ED\020\001\022\031\n\025PROGRAM_EVENT_CONTENT\020\002\022\027\n\023CONTE"
  "NT_UPLOAD_DEMO\020\003\022\032\n\026INSURANCE_DEMO_CONTE"
  "NT\020\004\022\025\n\021AGRONOMY_ADVISORY\020\005*`\n\017ContentPr"
  "ovider\022\027\n\023NO_CONTENT_PROVIDER\020\000\022\013\n\007YOUTU"
  "BE\020\001\022\006\n\002S3\020\002\022\r\n\tBLOBSTORE\020\003\022\020\n\014ACCOUNT_M"
  "EIN\020\004*J\n\021PayoutProcessType\022\032\n\026NO_PAYOUT_"
  "PROCESS_TYPE\020\000\022\r\n\tREPROCESS\020\001\022\n\n\006UPDATE\020"
  "\002*\362\013\n\007JobType\022\017\n\013NO_JOB_TYPE\020\000\022 \n\034JOB_TY"
  "PE_RETAILER_ONBOARDING\020\001\022\033\n\027JOB_TYPE_ORD"
  "ER_CREATION\020\002\022\036\n\032JOB_TYPE_FARMER_ONBOARD"
  "ING\020\003\022\031\n\025JOB_TYPE_PRODUCT_SCAN\020\004\022\034\n\030JOB_"
  "TYPE_SERVICE_BOOKING\020\005\022\033\n\027JOB_TYPE_HEALT"
  "H_PACKAGE\020\006\022\032\n\026JOB_TYPE_AWD_ONBOARDED\020\007\022"
  "\032\n\026JOB_TYPE_DSR_ONBOARDED\020\010\022\035\n\031JOB_TYPE_"
  "PRODUCT_INTEREST\020\t\022\033\n\027JOB_TYPE_PIPE_INST"
  "ALLED\020\013\022\033\n\027JOB_TYPE_ACRES_SERVICED\020\014\022\027\n\023"
  "JOB_TYPE_GEOFENCING\020\r\022\033\n\027JOB_TYPE_DRYING"
  "_EVENT_1\020\016\022\033\n\027JOB_TYPE_DRYING_EVENT_2\020\017\022"
  "#\n\037JOB_TYPE_WEATHER_CASH_GUARANTEE\020\020\022 \n\034"
  "JOB_TYPE_DHAN_VRIDHI_PROGRAM\020\021\022$\n JOB_TY"
  "PE_CRM_ONBOARDED_KHARIF_22\020\022\022$\n JOB_TYPE"
  "_DSR_ONBOARDED_KHARIF_22\020\023\022$\n JOB_TYPE_A"
  "WD_ONBOARDED_KHARIF_22\020\024\022+\n\'JOB_TYPE_FAR"
  "MER_GAINEXA_PHOTO_KHARIF_22\020\025\022 \n\034JOB_TYP"
  "E_FARMERS_LAND_RECORD\020\026\022,\n(JOB_TYPE_PIPE"
  "_INSTALL_PICS_AWD_KHARIF_22\020\027\022+\n\'JOB_TYP"
  "E_INSIDE_PLOT_PICS_AWD_KHARIF_22\020\030\022&\n\"JO"
  "B_TYPE_PROGRAM_SIGNUPS_SUGARCANE\020\031\022\034\n\030JO"
  "B_TYPE_AERATION_EVENTS\020\032\022%\n!JOB_TYPE_DRY"
  "ING_EVENT_2_KHARIF_22\020\033\022%\n!JOB_TYPE_DRYI"
  "NG_EVENT_3_KHARIF_22\020\034\022+\n\'JOB_TYPE_INSID"
  "E_PLOT_PICS_DSR_KHARIF_22\020\035\022&\n\"JOB_TYPE_"
  "SOYA_TRADE_SIGNUP_PROGRAM\020\036\022\036\n\032JOB_TYPE_"
  "OPERATOR_SERVICES\020\037\022\"\n\036JOB_TYPE_AWD_ONBO"
  "ARDED_RABI_22\020!\022#\n\037JOB_TYPE_PIPE_INSTALL"
  "ED_RABI_22\020\"\022\037\n\033JOB_TYPE_GEOFENCING_RABI"
  "_22\020#\022\"\n\036JOB_TYPE_SURVEY_RECORD_RABI_22\020"
  "$\022&\n\"JOB_TYPE_AERATION_EVENTS_1_RABI_22\020"
  "%\022&\n\"JOB_TYPE_AERATION_EVENTS_2_RABI_22\020"
  "&\022$\n JOB_TYPE_DATA_COLLECTION_RABI_22\020\'\022"
  "%\n!JOB_TYPE_BOTTOM_OF_FUNNEL_RABI_22\020(\022\020"
  "\n\014JOB_TYPE_D2F\020)\022\037\n\033JOB_TYPE_D2F_ORDER_C"
  "REATION\020*\022)\n%JOB_TYPE_INSIDE_PLOT_PICS_A"
  "WD_RABI_22\020+\022#\n\037JOB_TYPE_DRYING_EVENT_1_"
  "RABI_22\020,\022#\n\037JOB_TYPE_DRYING_EVENT_2_RAB"
  "I_22\020-*\314\001\n\tJobStatus\022\021\n\rNO_Job_Status\020\000\022"
  "\024\n\020JOB_STATUS_TO_DO\020\001\022\026\n\022JOB_STATUS_STAR"
  "TED\020\002\022\026\n\022JOB_STATUS_PARTIAL\020\003\022\030\n\024JOB_STA"
  "TUS_COMPLETED\020\004\022\030\n\024JOB_STATUS_CANCELLED\020"
  "\005\022\026\n\022JOB_STATUS_PENDING\020\006\022\032\n\026JOB_STATUS_"
  "UNFULFILLED\020\007*t\n\rPaymentStatus\022\025\n\021NO_PAY"
  "MENT_STATUS\020\000\022\023\n\017PAYMENT_CREATED\020\001\022\020\n\014PA"
  "YMENT_PAID\020\002\022\023\n\017PAYMENT_ON_HOLD\020\003\022\020\n\014PAY"
  "MENT_VOID\020\004*\304\002\n\rPaymentReason\022\032\n\026UNKNOWN"
  "_PAYMENT_REASON\020\000\022\035\n\031FARMER_ONBOARDING_P"
  "AYMENT\020\001\022 \n\034PRODUCT_SCAN_PAYMENT_PAYMENT"
  "\020\002\022 \n\034FARMER_SPRAY_BOOKING_PAYMENT\020\003\022\037\n\033"
  "RETAILER_ONBOARDING_PAYMENT\020\004\022 \n\034RETAILE"
  "R_FIRST_ORDER_PAYMENT\020\005\022!\n\035RETAILER_SECO"
  "ND_ORDER_PAYMENT\020\006\022\036\n\032RETAILER_ALL_ORDER"
  "_PAYMENT\020\007\022\032\n\026GENERAL_SCHEME_PAYMENT\020\010\022\022"
  "\n\016MANUAL_PAYMENT\020\t*\216\001\n\nSchemeType\022\027\n\023SCH"
  "EME_TYPE_UNKNOWN\020\000\022 \n\034SCHEME_TYPE_FIXED_"
  "PAY_SCHEME\020\001\022#\n\037SCHEME_TYPE_VARIABLE_PAY"
  "_SCHEME\020\002\022 \n\034SCHEME_TYPE_RECURRING_SCHEM"
  "E\020\003*\217\001\n\020SchemeWindowType\022\036\n\032SCHEME_WINDO"
  "W_TYPE_UNKNOWN\020\000\022\034\n\030SCHEME_WINDOW_TYPE_D"
  "AILY\020\001\022\035\n\031SCHEME_WINDOW_TYPE_WEEKLY\020\002\022\036\n"
  "\032SCHEME_WINDOW_TYPE_MONTHLY\020\003*v\n\013Payment"
  "Type\022\030\n\024PAYMENT_TYPE_UNKNOWN\020\000\022\025\n\021PAYMEN"
  "T_TYPE_FLAT\020\001\022\033\n\027PAYMENT_TYPE_PERCENTAGE"
  "\020\002\022\031\n\025PAYMENT_TYPE_PER_UNIT\020\003*j\n\024Perform"
  "anceQueryType\022\014\n\010NO_QUERY\020\000\022\020\n\014QUERY_ATH"
  "ENA\020\001\022\017\n\013QUERY_MYSQL\020\002\022\020\n\014QUERY_PRESTO\020\003"
  "\022\017\n\013QUERY_TRINO\020\004*\216\001\n\033PerformanceQueryMa"
  "ppingType\022\021\n\rNO_QUERY_TYPE\020\000\022\023\n\017AGGREGAT"
  "ED_VIEW\020\001\022\021\n\rDETAILED_VIEW\020\002\022\025\n\021LAST_RUN"
  "_AT_QUERY\020\003\022\035\n\031AGGREGATED_ATTRIBUTE_VIEW"
  "\020\004*\314\005\n\017PerformanceType\022\027\n\023NO_PERFORMANCE"
  "_TYPE\020\000\022(\n$PERFORMANCE_TYPE_RETAILER_ONB"
  "OARDING\020\001\022!\n\035PERFORMANCE_TYPE_FIRST_ORDE"
  "RS\020\002\022\"\n\036PERFORMANCE_TYPE_SECOND_ORDERS\020\003"
  "\022\037\n\033PERFORMANCE_TYPE_ALL_ORDERS\020\004\022&\n\"PER"
  "FORMANCE_TYPE_FARMER_ONBOARDING\020\005\022\"\n\036PER"
  "FORMANCE_TYPE_PRODUCT_SCANS\020\006\022\"\n\036PERFORM"
  "ANCE_TYPE_ACRES_SPRAYED\020\007\022#\n\037PERFORMANCE"
  "_TYPE_HEALTH_PACKAGE\020\010\022\"\n\036PERFORMANCE_TY"
  "PE_AWD_ONBOARDED\020\t\022\"\n\036PERFORMANCE_TYPE_D"
  "SR_ONBOARDED\020\n\022%\n!PERFORMANCE_TYPE_PRODU"
  "CT_INTEREST\020\013\022#\n\037PERFORMANCE_TYPE_PIPE_I"
  "NSTALLED\020\014\022#\n\037PERFORMANCE_TYPE_ACRES_SER"
  "VICED\020\r\022\037\n\033PERFORMANCE_TYPE_GEOFENCING\020\016"
  "\022#\n\037PERFORMANCE_TYPE_DRYING_EVENT_1\020\017\022#\n"
  "\037PERFORMANCE_TYPE_DRYING_EVENT_2\020\020\022+\n\'PE"
  "RFORMANCE_TYPE_WEATHER_CASH_GUARANTEE\020\021\022"
  "(\n$PERFORMANCE_TYPE_DHAN_VRIDHI_PROGRAM\020"
  "\022*\202\002\n\023ContentDataCategory\022\021\n\rPRODUCT_USA"
  "GE\020\000\022\025\n\021FARMING_TECHNIQUE\020\001\022\021\n\rCROP_ADVI"
  "SORY\020\002\022\022\n\016CROP_SELECTION\020\003\022\r\n\tAWARENESS\020"
  "\004\022\026\n\022FARMER_TESTIMONIAL\020\005\022\025\n\021FARMING_MAC"
  "HINERY\020\006\022\022\n\016CARBON_PROGRAM\020\007\022\022\n\016SELFIE_C"
  "ONTEST\020\010\022\016\n\nFARM_DIARY\020\t\022\023\n\017OTHERS_CATEG"
  "ORY\020\n\022\017\n\013CROP_DOCTOR\020\013*M\n\020IOTBookingActi"
  "on\022\r\n\tNO_ACTION\020\000\022\t\n\005START\020\001\022\010\n\004STOP\020\002\022\t"
  "\n\005PAUSE\020\003\022\n\n\006RESUME\020\004*}\n\"TargetUserWorkf"
  "lowQueryMappingType\022\031\n\025NO_TARGET_USERS_Q"
  "UERY\020\000\022 \n\034TARGET_USERS_AGGREGATED_VIEW\020\001"
  "\022\032\n\026TARGET_USERS_LIST_VIEW\020\002*k\n\021Question"
  "naireType\022\031\n\025NO_QUESTIONNAIRE_TYPE\020\000\022\t\n\005"
  "POLLS\020\001\022\013\n\007QUIZZES\020\002\022\016\n\nDAILY_QUIZ\020\003\022\023\n\017"
  "TEXT_OVER_IMAGE\020\004*%\n\nSelectType\022\t\n\005RADIO"
  "\020\000\022\014\n\010CHECKBOX\020\001*a\n\023QuestionnaireStatus\022"
  "\030\n\024QUESTIONNAIRE_ACTIVE\020\000\022\025\n\021QUESTIONNAI"
  "RE_ALL\020\001\022\031\n\025QUESTIONNAIRE_DELETED\020\002*b\n\016C"
  "ontentTagEnum\022\033\n\027ContentTagEnum_CATEGORY"
  "\020\000\022\027\n\023ContentTagEnum_CROP\020\001\022\032\n\026ContentTa"
  "gEnum_PRODUCT\020\002*J\n\023CommunicationVendor\022\r"
  "\n\tNO_VENDOR\020\000\022\t\n\005KARIX\020\001\022\013\n\007GUPSHUP\020\002\022\014\n"
  "\010FIREBASE\020\003*\211\004\n\021PartnerUploadType\022\034\n\030BUL"
  "K_UPLOAD_PARTNER_DATA\020\000\022!\n\035BULK_UPLOAD_P"
  "ARTNER_ROLE_DATA\020\001\022\'\n#BULK_UPLOAD_PARTNE"
  "R_SUPERVISOR_DATA\020\002\022&\n\"BULK_UPLOAD_S3_FA"
  "RMER_MAPPING_DATA\020\003\022&\n\"BULK_UPLOAD_INSUR"
  "ANCE_SCHEMES_DATA\020\004\022%\n!BULK_UPLOAD_INSUR"
  "ANCE_OFFERS_DATA\020\005\0223\n/BULK_UPLOAD_INSURA"
  "NCE_OFFER_SCHEME_MAPPING_DATA\020\006\022%\n!BULK_"
  "UPLOAD_INSURANCE_CLAIMS_DATA\020\007\0220\n,BULK_U"
  "PLOAD_INSURANCE_BULK_ISSUE_SCHEME_DATA\020\010"
  "\022,\n(BULK_UPLOAD_ADHOC_TRANSACTION_MAKER_"
  "DATA\020\t\022\'\n#BULK_UPLOAD_POSP_CERTIFICATION"
  "_DATA\020\n\022.\n*BULK_UPLOAD_ADHOC_TRANSACTION"
  "_CHECKER_DATA\020\013*o\n\023PartnerUploadStatus\022\032"
  "\n\026PARTNER_UPLOAD_PENDING\020\000\022\036\n\032PARTNER_UP"
  "LOAD_IN_PROGRESS\020\001\022\034\n\030PARTNER_UPLOAD_COM"
  "PLETED\020\002*Q\n\rPaymentMethod\022\010\n\004CASH\020\000\022\n\n\006W"
  "ALLET\020\001\022\007\n\003UPI\020\002\022\026\n\022PRODUCT_SCAN_OFFER\020\003"
  "\022\t\n\005OFFER\020\004*R\n\022PartnerPaymentType\022\023\n\017NO_"
  "PAYMENT_TYPE\020\000\022\020\n\014TEAM_PAYMENT\020\001\022\025\n\021JOB_"
  "BASED_PAYMENT\020\002*~\n\rOverlapStatus\022!\n\035OVER"
  "LAP_STATUS_NOT_APPLICABLE\020\000\022\032\n\026OVERLAP_S"
  "TATUS_PENDING\020\001\022\024\n\020OVERLAP_DETECTED\020\002\022\030\n"
  "\024OVERLAP_NOT_DETECTED\020\003*G\n\017LogicalOperat"
  "or\022\027\n\023NO_LOGICAL_OPERATOR\020\000\022\t\n\005UNION\020\001\022\020"
  "\n\014INTERSECTION\020\002*\206\003\n\036DeviceInstrumentati"
  "onEventType\022(\n$NO_DEVICE_INSTRUMENTATION"
  "_EVENT_TYPE\020\000\022\026\n\022CRM_SERVICE_SIGNUP\020\001\022\026\n"
  "\022DSR_SERVICE_SIGNUP\020\002\022\026\n\022AWD_SERVICE_SIG"
  "NUP\020\003\022\034\n\030GUJARAT_GROUNDNUT_SIGNUP\020\004\022\026\n\022G"
  "KM_PROGRAM_SIGNUP\020\005\022\030\n\024TRADE_PROGRAM_SIG"
  "NUP\020\006\022\035\n\031WEATHER_INSURANCE_SERVICE\020\007\022\025\n\021"
  "PRODUCT_CTA_SCANS\020\010\022!\n\035MOS_SERVICES_BOOK"
  "ING_CREATION\020\t\022\033\n\027SPRAY_BOOKINGS_CREATIO"
  "N\020\n\022\027\n\023ONBOARDING_REFERRAL\020\013\022\023\n\017KAVACH_P"
  "URCHASE\020\014*k\n\024UserJourneyEventType\022\036\n\032NO_"
  "USER_JOURNEY_EVENT_TYPE\020\000\022\n\n\006ACTION\020\001\022\014\n"
  "\010INACTION\020\002\022\r\n\tPAST_DATA\020\003\022\n\n\006CUSTOM\020\004*>"
  "\n\020CampaignEdgeType\022\020\n\014NO_EDGE_TYPE\020\000\022\016\n\n"
  "CHECKPOINT\020\001\022\010\n\004EXIT\020\002*D\n\021EventPropertyT"
  "ype\022\032\n\026NO_EVENT_PROPERTY_TYPE\020\000\022\023\n\017EVENT"
  "_PARAMETER\020\001*^\n\016PurchaseStatus\022\026\n\022NO_PUR"
  "CHASE_STATUS\020\000\022\n\n\006FAILED\020\001\022\013\n\007PENDING\020\002\022"
  "\r\n\tPURCHASED\020\003\022\014\n\010REFUNDED\020\004*A\n\010FileType"
  "\022\020\n\014NO_FILE_TYPE\020\000\022\010\n\004JPEG\020\001\022\007\n\003PNG\020\002\022\007\n"
  "\003PDF\020\003\022\007\n\003DOC\020\004*P\n\tCropStage\022\021\n\rNO_CROP_"
  "STAGE\020\000\022\025\n\021CROP_STAGE_SOWING\020\001\022\031\n\025CROP_S"
  "TAGE_HARVESTING\020\002*7\n\rLogicOperator\022\014\n\010NO"
  "_VALUE\020\000\022\007\n\003AND\020\001\022\006\n\002OR\020\002\022\007\n\003NOT\020\003*\216\001\n\014I"
  "mageQuality\022\024\n\020NO_IMAGE_QUALITY\020\000\022\010\n\004GOO"
  "D\020\001\022\034\n\030POOR_THE_IMAGE_IS_BLURRY\020\002\022\036\n\032POO"
  "R_THE_OBJECT_IS_TOO_FAR\020\003\022 \n\034POOR_THE_OB"
  "JECT_IS_TOO_CLOSE\020\004*>\n\013CropQuality\022\023\n\017NO"
  "_CROP_QUALITY\020\000\022\013\n\007HEALTHY\020\001\022\r\n\tUNHEALTH"
  "Y\020\002*\201\001\n\016CropDamageType\022\031\n\025CROP_DAMAGE_TY"
  "PE_WEED\020\000\022\034\n\030CROP_DAMAGE_TYPE_DISEASE\020\001\022"
  "\031\n\025CROP_DAMAGE_TYPE_PEST\020\002\022\033\n\027CROP_DAMAG"
  "E_TYPE_OTHERS\020\003*\226\004\n\tPlantPart\022\023\n\017PLANT_P"
  "ART_NONE\020\000\022\027\n\023PLANT_PART_SEEDLING\020\001\022\023\n\017P"
  "LANT_PART_ROOT\020\002\022\023\n\017PLANT_PART_LEAF\020\003\022\023\n"
  "\017PLANT_PART_STEM\020\004\022\025\n\021PLANT_PART_BRANCH\020"
  "\005\022\025\n\021PLANT_PART_TILLER\020\006\022\026\n\022PLANT_PART_P"
  "ANICLE\020\007\022\025\n\021PLANT_PART_FLOWER\020\010\022\024\n\020PLANT"
  "_PART_FRUIT\020\t\022\022\n\016PLANT_PART_POD\020\n\022\024\n\020PLA"
  "NT_PART_TUBER\020\013\022\023\n\017PLANT_PART_BULB\020\014\022\031\n\025"
  "PLANT_PART_FLOWER_BUD\020\r\022\022\n\016PLANT_PART_CO"
  "B\020\016\022\025\n\021PLANT_PART_TASSEL\020\017\022\034\n\030PLANT_PART"
  "_INFLORESCENCE\020\020\022\024\n\020PLANT_PART_SETTS\020\021\022\023"
  "\n\017PLANT_PART_BOLL\020\022\022\025\n\021PLANT_PART_SQUARE"
  "\020\023\022\023\n\017PLANT_PART_PEGS\020\024\022\031\n\025PLANT_PART_IN"
  "TERNODES\020\025\022\024\n\020PLANT_PART_NODES\020\026*\276\004\n\016Cro"
  "pLevelStage\022\027\n\023NO_CROP_LEVEL_STAGE\020\000\022\014\n\010"
  "SEEDLING\020\001\022\016\n\nVEGETATIVE\020\002\022\r\n\tTILLERING\020"
  "\003\022\013\n\007PANICLE\020\004\022\013\n\007MILKING\020\005\022\022\n\016GRAIN_MAT"
  "URITY\020\006\022\035\n\031GERMINATION_AND_EMERGENCE\020\007\022$"
  "\n LEAF_AREA_AND_CANOPY_DEVELOPMENT\020\010\022\r\n\t"
  "FLOWERING\020\t\022\024\n\020BOLL_DEVELOPMENT\020\n\022\023\n\017BOL"
  "L_MATURATION\020\013\022\023\n\017STEM_ELONGATION\020\014\022\r\n\tB"
  "RANCHING\020\r\022#\n\037FRUIT_FORMATION_AND_DEVELO"
  "PMENT\020\016\022\022\n\016FRUIT_MATURITY\020\017\022\021\n\rPEG_FORMA"
  "TION\020\020\022\023\n\017PEG_PENETRATION\020\021\022\021\n\rPOD_FORMA"
  "TION\020\022\022\023\n\017POD_DEVELOPMENT\020\023\022\017\n\013POD_FILLI"
  "NG\020\024\022\014\n\010RIPENING\020\025\022\r\n\tTASSELING\020\026\022\013\n\007SIL"
  "KING\020\027\022\021\n\rCOB_FORMATION\020\030\022\023\n\017COB_DEVELOP"
  "MENT\020\031\022\032\n\026PHYSIOLOGICAL_MATURITY\020\032\022\r\n\tSP"
  "ROUTING\020\033*N\n\tNutrients\022\024\n\020UNKNOWN_NUTRIE"
  "NT\020\000\022\006\n\002PH\020\001\022\006\n\002OC\020\002\022\006\n\002EC\020\003\022\005\n\001N\020\004\022\005\n\001P"
  "\020\005\022\005\n\001K\020\006*7\n\013ProductType\022\030\n\024UNKNOWN_PROD"
  "UCT_TYPE\020\000\022\016\n\nFERTILIZER\020\001*E\n\014ProductCla"
  "ss\022\031\n\025UNKNOWN_PRODUCT_CLASS\020\000\022\007\n\003DAP\020\001\022\010"
  "\n\004UREA\020\002\022\007\n\003SSP\020\003*\033\n\006States\022\021\n\rINVALID_S"
  "TATE\020\000*g\n\020GeofencingSource\022\033\n\027UNKNOWN_GE"
  "OFENCE_SOURCE\020\000\022\030\n\024MAPS_GEOFENCE_SOURCE\020"
  "\001\022\034\n\030FARM_APP_GEOFENCE_SOURCE\020\002*\210\001\n\rFile"
  "GroupType\022\020\n\014UNKNOWN_FILE\020\000\022\"\n\036SOIL_TEST"
  "ING_SI_WARE_SCAN_FILE\020\001\022\037\n\033SOIL_TESTING_"
  "PURE_SCAN_FILE\020\002\022 \n\034SOIL_HEALTH_CARD_REP"
  "ORT_FILE\020\003*y\n\014INVOICE_TYPE\022\r\n\tE_INVOICE\020"
  "\000\022\017\n\013TAX_INVOICE\020\001\022\022\n\016BILL_OF_SUPPLY\020\002\022\017"
  "\n\013CREDIT_NOTE\020\003\022\016\n\nDEBIT_NOTE\020\004\022\024\n\020ORIGI"
  "NAL_INVOICE\020\005*L\n\014BILLING_TYPE\022\021\n\rORIGINA"
  "L_BILL\020\000\022\023\n\017DEBIT_NOTE_BILL\020\001\022\024\n\020CREDIT_"
  "NOTE_BILL\020\002*d\n\020GameRewardStatus\022\024\n\020NO_RE"
  "WARD_STATUS\020\000\022\022\n\016REWARD_PENDING\020\001\022\022\n\016REW"
  "ARD_SUCCESS\020\002\022\022\n\016REWARD_FAILURE\020\003*v\n\022Pag"
  "eRenderViewType\022\034\n\030UNKNOWN_PAGE_RENDER_T"
  "YPE\020\000\022\021\n\rJOB_TYPE_VIEW\020\001\022\031\n\025REFERENCE_FA"
  "RMER_TYPE\020\002\022\024\n\020DELIVERY_PARTNER\020\003*\'\n\tOff"
  "erType\022\014\n\010CASHBACK\020\000\022\014\n\010DISCOUNT\020\001*d\n\026Of"
  "ferEventTargetAction\022\013\n\007INVALID\020\000\022\r\n\tREW"
  "ARDING\020\001\022\021\n\rCOMMUNICATION\020\002\022\016\n\nCANCELLIN"
  "G\020\003\022\013\n\007FAILING\020\004*t\n\031OfferDiscountValidat"
  "eKeys\022\017\n\013SELLER_NAME\020\000\022\020\n\014PRODUCT_NAME\020\001"
  "\022\020\n\014PAYMENT_TYPE\020\002\022\n\n\006AMOUNT\020\003\022\026\n\022AMOUNT"
  "_WITHOUT_GST\020\004*W\n\017GeographySource\022\027\n\023NO_"
  "GEOGRAPHY_SOURCE\020\000\022\021\n\rACTOR_LATLONG\020\001\022\016\n"
  "\nACTOR_FARM\020\002\022\010\n\004BOTH\020\003*N\n\tModelType\022\021\n\r"
  "NO_MODEL_TYPE\020\000\022\025\n\021MODEL_TYPE_NORMAL\020\001\022\027"
  "\n\023MODEL_TYPE_TEMPORAL\020\002*\'\n\007TaxType\022\010\n\004CG"
  "ST\020\000\022\010\n\004SGST\020\001\022\010\n\004IGST\020\002*O\n\024ScoringStrat"
  "ergyType\022\035\n\031NO_SCORING_STRATERGY_TYPE\020\000\022"
  "\030\n\024ROLLING_WEIGHTED_SUM\020\001BY\n(farm.nurtur"
  "e.core.contracts.common.enumsP\001Z(github."
  "com/nurture-farm/Contracts/Common\240\001\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fenums_2eproto = {
  false, false, descriptor_table_protodef_Common_2fenums_2eproto, "Common/enums.proto", 40284,
  &descriptor_table_Common_2fenums_2eproto_once, descriptor_table_Common_2fenums_2eproto_sccs, descriptor_table_Common_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2fenums_2eproto::offsets,
  file_level_metadata_Common_2fenums_2eproto, 0, file_level_enum_descriptors_Common_2fenums_2eproto, file_level_service_descriptors_Common_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fenums_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fenums_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[1];
}
bool BookingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[2];
}
bool ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[3];
}
bool WorkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[4];
}
bool WorkClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[5];
}
bool ServiceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[6];
}
bool UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[7];
}
bool ProductSKUClass_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[8];
}
bool ProductSKUType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[9];
}
bool VisitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[10];
}
bool EventReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventUpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[11];
}
bool EventUpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[12];
}
bool ActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 42:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[13];
}
bool BookingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[14];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[15];
}
bool BookingStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[16];
}
bool BookingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[17];
}
bool WorkflowStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 15:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 80:
    case 200:
    case 220:
    case 251:
    case 252:
    case 253:
    case 254:
    case 300:
    case 320:
    case 420:
    case 421:
    case 422:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[18];
}
bool WorkflowStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 50:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 91:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorAllotmentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[19];
}
bool ActorAllotmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorAllotmentStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[20];
}
bool ActorAllotmentStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUPurchaseChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[21];
}
bool ProductSKUPurchaseChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSKUDomain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[22];
}
bool ProductSKUDomain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductAttachmentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[23];
}
bool ProductAttachmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Currency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[24];
}
bool Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[25];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[26];
}
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 206:
    case 400:
    case 401:
    case 404:
    case 412:
    case 500:
    case 550:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[27];
}
bool RequestStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 4000:
    case 4001:
    case 5000:
    case 6000:
    case 7000:
    case 7001:
    case 8000:
    case 50000:
    case 50001:
    case 50002:
    case 50100:
    case 50101:
    case 50102:
    case 50200:
    case 50201:
    case 50202:
    case 50304:
    case 50401:
    case 50501:
    case 50601:
    case 50701:
    case 50801:
    case 50901:
    case 51001:
    case 51101:
    case 51201:
    case 51202:
    case 60000:
    case 60001:
    case 70000:
    case 70001:
    case 80000:
    case 100000:
    case 100008:
    case 100009:
    case 1000001:
    case 1000002:
    case 1000003:
    case 1000004:
    case 1000005:
    case 1000006:
    case 1000007:
    case 1000010:
    case 1000011:
    case 1000012:
    case 1100001:
    case 1100002:
    case 1100003:
    case 1200001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[28];
}
bool EventReferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[29];
}
bool DebugLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[30];
}
bool TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[31];
}
bool TriggerSubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[32];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[33];
}
bool TaskSubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorInServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[34];
}
bool ActorInServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKUProductInServiceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[35];
}
bool SKUProductInServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[36];
}
bool TaskOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[37];
}
bool TimeSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceAreaNamespace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[38];
}
bool ServiceAreaNamespace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[39];
}
bool LocationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[40];
}
bool BookingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[41];
}
bool ServiceAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 101:
    case 102:
    case 126:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[42];
}
bool CommunicationChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[43];
}
bool CommunicationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationFailureCause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[44];
}
bool CommunicationFailureCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[45];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[46];
}
bool ResponseStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 204:
    case 400:
    case 401:
    case 404:
    case 409:
    case 410:
    case 429:
    case 500:
    case 512:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[47];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FarmCropStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[48];
}
bool FarmCropStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[49];
}
bool MediaProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DurationUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[50];
}
bool DurationUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[51];
}
bool DurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScaleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[52];
}
bool ScaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[53];
}
bool LanguageCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[54];
}
bool RewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[55];
}
bool UserActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[56];
}
bool AppID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[57];
}
bool AppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[58];
}
bool HandoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[59];
}
bool HandoverStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MachineEventAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[60];
}
bool MachineEventAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[61];
}
bool ScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[62];
}
bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[63];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[64];
}
bool AddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeographyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[65];
}
bool GeographyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DocumentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[66];
}
bool DocumentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingEligibilityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[67];
}
bool BookingEligibilityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[68];
}
bool BookingScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingNameSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[69];
}
bool BookingNameSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookingClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[70];
}
bool BookingClass_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[71];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[72];
}
bool Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PushNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[73];
}
bool PushNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InfoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[74];
}
bool InfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DayDurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[75];
}
bool DayDurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[76];
}
bool DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherForecastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[77];
}
bool WeatherForecastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[78];
}
bool CommunicationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NutrientRating_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[79];
}
bool NutrientRating_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropLandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[80];
}
bool CropLandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SynFertilizerReplacement_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[81];
}
bool SynFertilizerReplacement_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[82];
}
bool ActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemplateContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[83];
}
bool TemplateContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[84];
}
bool ResponseOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecretType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[85];
}
bool SecretType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[86];
}
bool FeatureName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferKeyName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[87];
}
bool OfferKeyName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferServiceKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[88];
}
bool OfferServiceKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferMetaKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[89];
}
bool OfferMetaKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferCalculationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[90];
}
bool OfferCalculationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngagementKeyName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[91];
}
bool EngagementKeyName_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngagementServiceUserSegmentKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[92];
}
bool EngagementServiceUserSegmentKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentMimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[93];
}
bool ContentMimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserContentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[94];
}
bool UserContentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[95];
}
bool QuestionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonCheckType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[96];
}
bool ComparisonCheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tenant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[97];
}
bool Tenant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[98];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaAccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[99];
}
bool MediaAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DPSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[100];
}
bool DPSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[101];
}
bool EventSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CultivationPractice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[102];
}
bool CultivationPractice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PracticeChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[103];
}
bool PracticeChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApprovalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[104];
}
bool ApprovalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApprovalStatusReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[105];
}
bool ApprovalStatusReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[106];
}
bool ProgramType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[107];
}
bool ProgramCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[108];
}
bool ProgramStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[109];
}
bool EventName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[110];
}
bool EventCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramPageEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[111];
}
bool ProgramPageEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramLocationConfig_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[112];
}
bool ProgramLocationConfig_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeofencingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[113];
}
bool GeofencingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[114];
}
bool EventStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContactType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[115];
}
bool ContactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[116];
}
bool CampaignStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[117];
}
bool NameSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[118];
}
bool CampaignQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignQueryMappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[119];
}
bool CampaignQueryMappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferralBookingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[120];
}
bool ReferralBookingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferralType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[121];
}
bool ReferralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[122];
}
bool FormStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EligibilityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[123];
}
bool EligibilityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServicesName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[124];
}
bool ServicesName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[125];
}
bool CampaignScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[126];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceAccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[127];
}
bool ResourceAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[128];
}
bool ContentCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[129];
}
bool ContentProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayoutProcessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[130];
}
bool PayoutProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[131];
}
bool JobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[132];
}
bool JobStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[133];
}
bool PaymentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[134];
}
bool PaymentReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[135];
}
bool SchemeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemeWindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[136];
}
bool SchemeWindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[137];
}
bool PaymentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[138];
}
bool PerformanceQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceQueryMappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[139];
}
bool PerformanceQueryMappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerformanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[140];
}
bool PerformanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentDataCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[141];
}
bool ContentDataCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOTBookingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[142];
}
bool IOTBookingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TargetUserWorkflowQueryMappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[143];
}
bool TargetUserWorkflowQueryMappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestionnaireType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[144];
}
bool QuestionnaireType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[145];
}
bool SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestionnaireStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[146];
}
bool QuestionnaireStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentTagEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[147];
}
bool ContentTagEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunicationVendor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[148];
}
bool CommunicationVendor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerUploadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[149];
}
bool PartnerUploadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerUploadStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[150];
}
bool PartnerUploadStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[151];
}
bool PaymentMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerPaymentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[152];
}
bool PartnerPaymentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlapStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[153];
}
bool OverlapStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[154];
}
bool LogicalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceInstrumentationEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[155];
}
bool DeviceInstrumentationEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserJourneyEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[156];
}
bool UserJourneyEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CampaignEdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[157];
}
bool CampaignEdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[158];
}
bool EventPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PurchaseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[159];
}
bool PurchaseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[160];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[161];
}
bool CropStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[162];
}
bool LogicOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[163];
}
bool ImageQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[164];
}
bool CropQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropDamageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[165];
}
bool CropDamageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlantPart_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[166];
}
bool PlantPart_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CropLevelStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[167];
}
bool CropLevelStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Nutrients_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[168];
}
bool Nutrients_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[169];
}
bool ProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[170];
}
bool ProductClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[171];
}
bool States_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeofencingSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[172];
}
bool GeofencingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[173];
}
bool FileGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INVOICE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[174];
}
bool INVOICE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BILLING_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[175];
}
bool BILLING_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameRewardStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[176];
}
bool GameRewardStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageRenderViewType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[177];
}
bool PageRenderViewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[178];
}
bool OfferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferEventTargetAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[179];
}
bool OfferEventTargetAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OfferDiscountValidateKeys_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[180];
}
bool OfferDiscountValidateKeys_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeographySource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[181];
}
bool GeographySource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[182];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[183];
}
bool TaxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScoringStratergyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fenums_2eproto);
  return file_level_enum_descriptors_Common_2fenums_2eproto[184];
}
bool ScoringStratergyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
