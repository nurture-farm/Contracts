// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/geo_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fgeo_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fgeo_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/geo_enums.pb.h"
#include "Common/enums.pb.h"
#include "Common/time_slot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fgeo_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fgeo_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[46]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fgeo_5fcommon_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class BaseConditions;
class BaseConditionsDefaultTypeInternal;
extern BaseConditionsDefaultTypeInternal _BaseConditions_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class FilterArguments;
class FilterArgumentsDefaultTypeInternal;
extern FilterArgumentsDefaultTypeInternal _FilterArguments_default_instance_;
class GeoPlaces;
class GeoPlacesDefaultTypeInternal;
extern GeoPlacesDefaultTypeInternal _GeoPlaces_default_instance_;
class GeometryToValidate;
class GeometryToValidateDefaultTypeInternal;
extern GeometryToValidateDefaultTypeInternal _GeometryToValidate_default_instance_;
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class InsertResponse;
class InsertResponseDefaultTypeInternal;
extern InsertResponseDefaultTypeInternal _InsertResponse_default_instance_;
class LatLng;
class LatLngDefaultTypeInternal;
extern LatLngDefaultTypeInternal _LatLng_default_instance_;
class MapTile;
class MapTileDefaultTypeInternal;
extern MapTileDefaultTypeInternal _MapTile_default_instance_;
class MapTilesToPreSignedUrl;
class MapTilesToPreSignedUrlDefaultTypeInternal;
extern MapTilesToPreSignedUrlDefaultTypeInternal _MapTilesToPreSignedUrl_default_instance_;
class NSVPlaceId;
class NSVPlaceIdDefaultTypeInternal;
extern NSVPlaceIdDefaultTypeInternal _NSVPlaceId_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class OverlappingPlace;
class OverlappingPlaceDefaultTypeInternal;
extern OverlappingPlaceDefaultTypeInternal _OverlappingPlace_default_instance_;
class OverlappingPlaces;
class OverlappingPlacesDefaultTypeInternal;
extern OverlappingPlacesDefaultTypeInternal _OverlappingPlaces_default_instance_;
class Place;
class PlaceDefaultTypeInternal;
extern PlaceDefaultTypeInternal _Place_default_instance_;
class PlaceReference;
class PlaceReferenceDefaultTypeInternal;
extern PlaceReferenceDefaultTypeInternal _PlaceReference_default_instance_;
class PlaceTag;
class PlaceTagDefaultTypeInternal;
extern PlaceTagDefaultTypeInternal _PlaceTag_default_instance_;
class PlaceTagValue;
class PlaceTagValueDefaultTypeInternal;
extern PlaceTagValueDefaultTypeInternal _PlaceTagValue_default_instance_;
class PlacesData;
class PlacesDataDefaultTypeInternal;
extern PlacesDataDefaultTypeInternal _PlacesData_default_instance_;
class RasterDataRequest;
class RasterDataRequestDefaultTypeInternal;
extern RasterDataRequestDefaultTypeInternal _RasterDataRequest_default_instance_;
class RasterDataResponse;
class RasterDataResponseDefaultTypeInternal;
extern RasterDataResponseDefaultTypeInternal _RasterDataResponse_default_instance_;
class ReferenceAttribute;
class ReferenceAttributeDefaultTypeInternal;
extern ReferenceAttributeDefaultTypeInternal _ReferenceAttribute_default_instance_;
class RegisterSourceConfig;
class RegisterSourceConfigDefaultTypeInternal;
extern RegisterSourceConfigDefaultTypeInternal _RegisterSourceConfig_default_instance_;
class TileRequest;
class TileRequestDefaultTypeInternal;
extern TileRequestDefaultTypeInternal _TileRequest_default_instance_;
class TileResponse;
class TileResponseDefaultTypeInternal;
extern TileResponseDefaultTypeInternal _TileResponse_default_instance_;
class UpdatePlaceTags;
class UpdatePlaceTagsDefaultTypeInternal;
extern UpdatePlaceTagsDefaultTypeInternal _UpdatePlaceTags_default_instance_;
class UpdateReferenceRequest;
class UpdateReferenceRequestDefaultTypeInternal;
extern UpdateReferenceRequestDefaultTypeInternal _UpdateReferenceRequest_default_instance_;
class UpdateReferenceResponse;
class UpdateReferenceResponseDefaultTypeInternal;
extern UpdateReferenceResponseDefaultTypeInternal _UpdateReferenceResponse_default_instance_;
class UpdateReferenceResult;
class UpdateReferenceResultDefaultTypeInternal;
extern UpdateReferenceResultDefaultTypeInternal _UpdateReferenceResult_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class UpdateTagResult;
class UpdateTagResultDefaultTypeInternal;
extern UpdateTagResultDefaultTypeInternal _UpdateTagResult_default_instance_;
class UpdateTagsRequest;
class UpdateTagsRequestDefaultTypeInternal;
extern UpdateTagsRequestDefaultTypeInternal _UpdateTagsRequest_default_instance_;
class UpdateTagsResponse;
class UpdateTagsResponseDefaultTypeInternal;
extern UpdateTagsResponseDefaultTypeInternal _UpdateTagsResponse_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
class Validation;
class ValidationDefaultTypeInternal;
extern ValidationDefaultTypeInternal _Validation_default_instance_;
class ValidationResponse;
class ValidationResponseDefaultTypeInternal;
extern ValidationResponseDefaultTypeInternal _ValidationResponse_default_instance_;
class ValidationResults;
class ValidationResultsDefaultTypeInternal;
extern ValidationResultsDefaultTypeInternal _ValidationResults_default_instance_;
class ValidationsApplicable;
class ValidationsApplicableDefaultTypeInternal;
extern ValidationsApplicableDefaultTypeInternal _ValidationsApplicable_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ZoomRange;
class ZoomRangeDefaultTypeInternal;
extern ZoomRangeDefaultTypeInternal _ZoomRange_default_instance_;
}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::common::Attribute* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Attribute>(Arena*);
template<> ::farm::nurture::core::contracts::common::BaseConditions* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::BaseConditions>(Arena*);
template<> ::farm::nurture::core::contracts::common::Configuration* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Configuration>(Arena*);
template<> ::farm::nurture::core::contracts::common::DeleteRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::DeleteRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::DeleteResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::DeleteResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::Environment* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(Arena*);
template<> ::farm::nurture::core::contracts::common::Filter* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Filter>(Arena*);
template<> ::farm::nurture::core::contracts::common::FilterArguments* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::FilterArguments>(Arena*);
template<> ::farm::nurture::core::contracts::common::GeoPlaces* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::GeoPlaces>(Arena*);
template<> ::farm::nurture::core::contracts::common::GeometryToValidate* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::GeometryToValidate>(Arena*);
template<> ::farm::nurture::core::contracts::common::InsertRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::InsertRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::InsertResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::InsertResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::LatLng* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::LatLng>(Arena*);
template<> ::farm::nurture::core::contracts::common::MapTile* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::MapTile>(Arena*);
template<> ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl>(Arena*);
template<> ::farm::nurture::core::contracts::common::NSVPlaceId* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::NSVPlaceId>(Arena*);
template<> ::farm::nurture::core::contracts::common::Options* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Options>(Arena*);
template<> ::farm::nurture::core::contracts::common::OverlappingPlace* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::OverlappingPlace>(Arena*);
template<> ::farm::nurture::core::contracts::common::OverlappingPlaces* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::OverlappingPlaces>(Arena*);
template<> ::farm::nurture::core::contracts::common::Place* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Place>(Arena*);
template<> ::farm::nurture::core::contracts::common::PlaceReference* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::PlaceReference>(Arena*);
template<> ::farm::nurture::core::contracts::common::PlaceTag* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::PlaceTag>(Arena*);
template<> ::farm::nurture::core::contracts::common::PlaceTagValue* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::PlaceTagValue>(Arena*);
template<> ::farm::nurture::core::contracts::common::PlacesData* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::PlacesData>(Arena*);
template<> ::farm::nurture::core::contracts::common::RasterDataRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RasterDataRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::RasterDataResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RasterDataResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::ReferenceAttribute* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ReferenceAttribute>(Arena*);
template<> ::farm::nurture::core::contracts::common::RegisterSourceConfig* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::RegisterSourceConfig>(Arena*);
template<> ::farm::nurture::core::contracts::common::TileRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::TileRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::TileResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::TileResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdatePlaceTags* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdatePlaceTags>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateReferenceRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateReferenceRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateReferenceResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateReferenceResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateReferenceResult* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateReferenceResult>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateTagResult* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateTagResult>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateTagsRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateTagsRequest>(Arena*);
template<> ::farm::nurture::core::contracts::common::UpdateTagsResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UpdateTagsResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::UserContext* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::UserContext>(Arena*);
template<> ::farm::nurture::core::contracts::common::Validation* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Validation>(Arena*);
template<> ::farm::nurture::core::contracts::common::ValidationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ValidationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::common::ValidationResults* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ValidationResults>(Arena*);
template<> ::farm::nurture::core::contracts::common::ValidationsApplicable* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ValidationsApplicable>(Arena*);
template<> ::farm::nurture::core::contracts::common::Value* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::Value>(Arena*);
template<> ::farm::nurture::core::contracts::common::ZoomRange* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::common::ZoomRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace common {

// ===================================================================

class PlaceTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.PlaceTag) */ {
 public:
  inline PlaceTag() : PlaceTag(nullptr) {}
  virtual ~PlaceTag();

  PlaceTag(const PlaceTag& from);
  PlaceTag(PlaceTag&& from) noexcept
    : PlaceTag() {
    *this = ::std::move(from);
  }

  inline PlaceTag& operator=(const PlaceTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceTag& operator=(PlaceTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceTag& default_instance();

  static inline const PlaceTag* internal_default_instance() {
    return reinterpret_cast<const PlaceTag*>(
               &_PlaceTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaceTag& a, PlaceTag& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceTag* New() const final {
    return CreateMaybeMessage<PlaceTag>(nullptr);
  }

  PlaceTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceTag& from);
  void MergeFrom(const PlaceTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.PlaceTag";
  }
  protected:
  explicit PlaceTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceTagNameFieldNumber = 1,
    kPlaceTagPropertyNameFieldNumber = 2,
    kPlaceTagPropertyValueFieldNumber = 3,
    kTagPropertyValueFieldNumber = 6,
    kValueFieldNumber = 8,
    kTagNameFieldNumber = 4,
    kTagPropertyKeyFieldNumber = 5,
    kPlaceTagIdFieldNumber = 7,
  };
  // string placeTagName = 1;
  void clear_placetagname();
  const std::string& placetagname() const;
  void set_placetagname(const std::string& value);
  void set_placetagname(std::string&& value);
  void set_placetagname(const char* value);
  void set_placetagname(const char* value, size_t size);
  std::string* mutable_placetagname();
  std::string* release_placetagname();
  void set_allocated_placetagname(std::string* placetagname);
  private:
  const std::string& _internal_placetagname() const;
  void _internal_set_placetagname(const std::string& value);
  std::string* _internal_mutable_placetagname();
  public:

  // string placeTagPropertyName = 2;
  void clear_placetagpropertyname();
  const std::string& placetagpropertyname() const;
  void set_placetagpropertyname(const std::string& value);
  void set_placetagpropertyname(std::string&& value);
  void set_placetagpropertyname(const char* value);
  void set_placetagpropertyname(const char* value, size_t size);
  std::string* mutable_placetagpropertyname();
  std::string* release_placetagpropertyname();
  void set_allocated_placetagpropertyname(std::string* placetagpropertyname);
  private:
  const std::string& _internal_placetagpropertyname() const;
  void _internal_set_placetagpropertyname(const std::string& value);
  std::string* _internal_mutable_placetagpropertyname();
  public:

  // string placeTagPropertyValue = 3;
  void clear_placetagpropertyvalue();
  const std::string& placetagpropertyvalue() const;
  void set_placetagpropertyvalue(const std::string& value);
  void set_placetagpropertyvalue(std::string&& value);
  void set_placetagpropertyvalue(const char* value);
  void set_placetagpropertyvalue(const char* value, size_t size);
  std::string* mutable_placetagpropertyvalue();
  std::string* release_placetagpropertyvalue();
  void set_allocated_placetagpropertyvalue(std::string* placetagpropertyvalue);
  private:
  const std::string& _internal_placetagpropertyvalue() const;
  void _internal_set_placetagpropertyvalue(const std::string& value);
  std::string* _internal_mutable_placetagpropertyvalue();
  public:

  // string TagPropertyValue = 6;
  void clear_tagpropertyvalue();
  const std::string& tagpropertyvalue() const;
  void set_tagpropertyvalue(const std::string& value);
  void set_tagpropertyvalue(std::string&& value);
  void set_tagpropertyvalue(const char* value);
  void set_tagpropertyvalue(const char* value, size_t size);
  std::string* mutable_tagpropertyvalue();
  std::string* release_tagpropertyvalue();
  void set_allocated_tagpropertyvalue(std::string* tagpropertyvalue);
  private:
  const std::string& _internal_tagpropertyvalue() const;
  void _internal_set_tagpropertyvalue(const std::string& value);
  std::string* _internal_mutable_tagpropertyvalue();
  public:

  // .farm.nurture.core.contracts.common.PlaceTagValue value = 8;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::farm::nurture::core::contracts::common::PlaceTagValue& value() const;
  ::farm::nurture::core::contracts::common::PlaceTagValue* release_value();
  ::farm::nurture::core::contracts::common::PlaceTagValue* mutable_value();
  void set_allocated_value(::farm::nurture::core::contracts::common::PlaceTagValue* value);
  private:
  const ::farm::nurture::core::contracts::common::PlaceTagValue& _internal_value() const;
  ::farm::nurture::core::contracts::common::PlaceTagValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::farm::nurture::core::contracts::common::PlaceTagValue* value);
  ::farm::nurture::core::contracts::common::PlaceTagValue* unsafe_arena_release_value();

  // .farm.nurture.core.contracts.common.PlaceTagName TagName = 4;
  void clear_tagname();
  ::farm::nurture::core::contracts::common::PlaceTagName tagname() const;
  void set_tagname(::farm::nurture::core::contracts::common::PlaceTagName value);
  private:
  ::farm::nurture::core::contracts::common::PlaceTagName _internal_tagname() const;
  void _internal_set_tagname(::farm::nurture::core::contracts::common::PlaceTagName value);
  public:

  // .farm.nurture.core.contracts.common.PlaceTagProperty TagPropertyKey = 5;
  void clear_tagpropertykey();
  ::farm::nurture::core::contracts::common::PlaceTagProperty tagpropertykey() const;
  void set_tagpropertykey(::farm::nurture::core::contracts::common::PlaceTagProperty value);
  private:
  ::farm::nurture::core::contracts::common::PlaceTagProperty _internal_tagpropertykey() const;
  void _internal_set_tagpropertykey(::farm::nurture::core::contracts::common::PlaceTagProperty value);
  public:

  // int64 PlaceTagId = 7;
  void clear_placetagid();
  ::PROTOBUF_NAMESPACE_ID::int64 placetagid() const;
  void set_placetagid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placetagid() const;
  void _internal_set_placetagid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.PlaceTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placetagname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placetagpropertyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placetagpropertyvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagpropertyvalue_;
  ::farm::nurture::core::contracts::common::PlaceTagValue* value_;
  int tagname_;
  int tagpropertykey_;
  ::PROTOBUF_NAMESPACE_ID::int64 placetagid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ValidationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ValidationResponse) */ {
 public:
  inline ValidationResponse() : ValidationResponse(nullptr) {}
  virtual ~ValidationResponse();

  ValidationResponse(const ValidationResponse& from);
  ValidationResponse(ValidationResponse&& from) noexcept
    : ValidationResponse() {
    *this = ::std::move(from);
  }

  inline ValidationResponse& operator=(const ValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationResponse& operator=(ValidationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidationResponse& default_instance();

  static inline const ValidationResponse* internal_default_instance() {
    return reinterpret_cast<const ValidationResponse*>(
               &_ValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValidationResponse& a, ValidationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidationResponse* New() const final {
    return CreateMaybeMessage<ValidationResponse>(nullptr);
  }

  ValidationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidationResponse& from);
  void MergeFrom(const ValidationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ValidationResponse";
  }
  protected:
  explicit ValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDscFieldNumber = 3,
    kMsgFieldNumber = 1,
    kValCodeFieldNumber = 2,
    kValidFieldNumber = 4,
  };
  // string dsc = 3;
  void clear_dsc();
  const std::string& dsc() const;
  void set_dsc(const std::string& value);
  void set_dsc(std::string&& value);
  void set_dsc(const char* value);
  void set_dsc(const char* value, size_t size);
  std::string* mutable_dsc();
  std::string* release_dsc();
  void set_allocated_dsc(std::string* dsc);
  private:
  const std::string& _internal_dsc() const;
  void _internal_set_dsc(const std::string& value);
  std::string* _internal_mutable_dsc();
  public:

  // .farm.nurture.core.contracts.common.ValidationResponseMsg msg = 1;
  void clear_msg();
  ::farm::nurture::core::contracts::common::ValidationResponseMsg msg() const;
  void set_msg(::farm::nurture::core::contracts::common::ValidationResponseMsg value);
  private:
  ::farm::nurture::core::contracts::common::ValidationResponseMsg _internal_msg() const;
  void _internal_set_msg(::farm::nurture::core::contracts::common::ValidationResponseMsg value);
  public:

  // .farm.nurture.core.contracts.common.ValidationResponseCode valCode = 2;
  void clear_valcode();
  ::farm::nurture::core::contracts::common::ValidationResponseCode valcode() const;
  void set_valcode(::farm::nurture::core::contracts::common::ValidationResponseCode value);
  private:
  ::farm::nurture::core::contracts::common::ValidationResponseCode _internal_valcode() const;
  void _internal_set_valcode(::farm::nurture::core::contracts::common::ValidationResponseCode value);
  public:

  // bool valid = 4;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ValidationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dsc_;
  int msg_;
  int valcode_;
  bool valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class GeoPlaces PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.GeoPlaces) */ {
 public:
  inline GeoPlaces() : GeoPlaces(nullptr) {}
  virtual ~GeoPlaces();

  GeoPlaces(const GeoPlaces& from);
  GeoPlaces(GeoPlaces&& from) noexcept
    : GeoPlaces() {
    *this = ::std::move(from);
  }

  inline GeoPlaces& operator=(const GeoPlaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPlaces& operator=(GeoPlaces&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPlaces& default_instance();

  static inline const GeoPlaces* internal_default_instance() {
    return reinterpret_cast<const GeoPlaces*>(
               &_GeoPlaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GeoPlaces& a, GeoPlaces& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPlaces* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPlaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPlaces* New() const final {
    return CreateMaybeMessage<GeoPlaces>(nullptr);
  }

  GeoPlaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPlaces>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPlaces& from);
  void MergeFrom(const GeoPlaces& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPlaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.GeoPlaces";
  }
  protected:
  explicit GeoPlaces(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceTagsFieldNumber = 4,
    kGeometryFieldNumber = 1,
    kPlaceIdFieldNumber = 2,
    kGeometryRepresentationTypeFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 4;
  int placetags_size() const;
  private:
  int _internal_placetags_size() const;
  public:
  void clear_placetags();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_placetags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_placetags();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_placetags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_placetags();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& placetags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_placetags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      placetags() const;

  // string geometry = 1;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int64 PlaceId = 2;
  void clear_placeid();
  ::PROTOBUF_NAMESPACE_ID::int64 placeid() const;
  void set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placeid() const;
  void _internal_set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 3;
  void clear_geometryrepresentationtype();
  ::farm::nurture::core::contracts::common::GeometryRepresentationType geometryrepresentationtype() const;
  void set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  private:
  ::farm::nurture::core::contracts::common::GeometryRepresentationType _internal_geometryrepresentationtype() const;
  void _internal_set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.GeoPlaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > placetags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int64 placeid_;
  int geometryrepresentationtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ValidationResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ValidationResults) */ {
 public:
  inline ValidationResults() : ValidationResults(nullptr) {}
  virtual ~ValidationResults();

  ValidationResults(const ValidationResults& from);
  ValidationResults(ValidationResults&& from) noexcept
    : ValidationResults() {
    *this = ::std::move(from);
  }

  inline ValidationResults& operator=(const ValidationResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationResults& operator=(ValidationResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidationResults& default_instance();

  static inline const ValidationResults* internal_default_instance() {
    return reinterpret_cast<const ValidationResults*>(
               &_ValidationResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidationResults& a, ValidationResults& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidationResults* New() const final {
    return CreateMaybeMessage<ValidationResults>(nullptr);
  }

  ValidationResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidationResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidationResults& from);
  void MergeFrom(const ValidationResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ValidationResults";
  }
  protected:
  explicit ValidationResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacesFieldNumber = 6,
    kVldtRsFieldNumber = 1,
    kValidFieldNumber = 2,
    kValidationTypeFieldNumber = 3,
    kValidationNameFieldNumber = 4,
    kAssertTypeFieldNumber = 5,
  };
  // repeated .farm.nurture.core.contracts.common.GeoPlaces places = 6;
  int places_size() const;
  private:
  int _internal_places_size() const;
  public:
  void clear_places();
  ::farm::nurture::core::contracts::common::GeoPlaces* mutable_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::GeoPlaces >*
      mutable_places();
  private:
  const ::farm::nurture::core::contracts::common::GeoPlaces& _internal_places(int index) const;
  ::farm::nurture::core::contracts::common::GeoPlaces* _internal_add_places();
  public:
  const ::farm::nurture::core::contracts::common::GeoPlaces& places(int index) const;
  ::farm::nurture::core::contracts::common::GeoPlaces* add_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::GeoPlaces >&
      places() const;

  // .farm.nurture.core.contracts.common.ValidationResponse vldtRs = 1;
  bool has_vldtrs() const;
  private:
  bool _internal_has_vldtrs() const;
  public:
  void clear_vldtrs();
  const ::farm::nurture::core::contracts::common::ValidationResponse& vldtrs() const;
  ::farm::nurture::core::contracts::common::ValidationResponse* release_vldtrs();
  ::farm::nurture::core::contracts::common::ValidationResponse* mutable_vldtrs();
  void set_allocated_vldtrs(::farm::nurture::core::contracts::common::ValidationResponse* vldtrs);
  private:
  const ::farm::nurture::core::contracts::common::ValidationResponse& _internal_vldtrs() const;
  ::farm::nurture::core::contracts::common::ValidationResponse* _internal_mutable_vldtrs();
  public:
  void unsafe_arena_set_allocated_vldtrs(
      ::farm::nurture::core::contracts::common::ValidationResponse* vldtrs);
  ::farm::nurture::core::contracts::common::ValidationResponse* unsafe_arena_release_vldtrs();

  // bool valid = 2;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 3;
  void clear_validationtype();
  ::farm::nurture::core::contracts::common::GeoValidationType validationtype() const;
  void set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value);
  private:
  ::farm::nurture::core::contracts::common::GeoValidationType _internal_validationtype() const;
  void _internal_set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value);
  public:

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 4;
  void clear_validationname();
  ::farm::nurture::core::contracts::common::GeoValidationName validationname() const;
  void set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value);
  private:
  ::farm::nurture::core::contracts::common::GeoValidationName _internal_validationname() const;
  void _internal_set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value);
  public:

  // .farm.nurture.core.contracts.common.AssertionType assertType = 5;
  void clear_asserttype();
  ::farm::nurture::core::contracts::common::AssertionType asserttype() const;
  void set_asserttype(::farm::nurture::core::contracts::common::AssertionType value);
  private:
  ::farm::nurture::core::contracts::common::AssertionType _internal_asserttype() const;
  void _internal_set_asserttype(::farm::nurture::core::contracts::common::AssertionType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ValidationResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::GeoPlaces > places_;
  ::farm::nurture::core::contracts::common::ValidationResponse* vldtrs_;
  bool valid_;
  int validationtype_;
  int validationname_;
  int asserttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class GeometryToValidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.GeometryToValidate) */ {
 public:
  inline GeometryToValidate() : GeometryToValidate(nullptr) {}
  virtual ~GeometryToValidate();

  GeometryToValidate(const GeometryToValidate& from);
  GeometryToValidate(GeometryToValidate&& from) noexcept
    : GeometryToValidate() {
    *this = ::std::move(from);
  }

  inline GeometryToValidate& operator=(const GeometryToValidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryToValidate& operator=(GeometryToValidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryToValidate& default_instance();

  static inline const GeometryToValidate* internal_default_instance() {
    return reinterpret_cast<const GeometryToValidate*>(
               &_GeometryToValidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeometryToValidate& a, GeometryToValidate& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryToValidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryToValidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryToValidate* New() const final {
    return CreateMaybeMessage<GeometryToValidate>(nullptr);
  }

  GeometryToValidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryToValidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryToValidate& from);
  void MergeFrom(const GeometryToValidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryToValidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.GeometryToValidate";
  }
  protected:
  explicit GeometryToValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidationsApplicableFieldNumber = 10,
    kPlcIdsFieldNumber = 18,
    kVersionFieldNumber = 4,
    kGmtFieldNumber = 16,
    kPlcSrcTypeFieldNumber = 1,
    kPlcNmspceFieldNumber = 2,
    kPlcVsbleFieldNumber = 3,
    kAuditRequiredFieldNumber = 5,
    kMinZoomFieldNumber = 6,
    kMaxZoomFieldNumber = 7,
    kUiClientFieldNumber = 9,
    kGmRprTypeFieldNumber = 15,
    kThresholdDistanceFieldNumber = 17,
  };
  // repeated .farm.nurture.core.contracts.common.ValidationsApplicable validationsApplicable = 10;
  int validationsapplicable_size() const;
  private:
  int _internal_validationsapplicable_size() const;
  public:
  void clear_validationsapplicable();
  ::farm::nurture::core::contracts::common::ValidationsApplicable* mutable_validationsapplicable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ValidationsApplicable >*
      mutable_validationsapplicable();
  private:
  const ::farm::nurture::core::contracts::common::ValidationsApplicable& _internal_validationsapplicable(int index) const;
  ::farm::nurture::core::contracts::common::ValidationsApplicable* _internal_add_validationsapplicable();
  public:
  const ::farm::nurture::core::contracts::common::ValidationsApplicable& validationsapplicable(int index) const;
  ::farm::nurture::core::contracts::common::ValidationsApplicable* add_validationsapplicable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ValidationsApplicable >&
      validationsapplicable() const;

  // repeated int64 plcIds = 18;
  int plcids_size() const;
  private:
  int _internal_plcids_size() const;
  public:
  void clear_plcids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_plcids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_plcids() const;
  void _internal_add_plcids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_plcids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 plcids(int index) const;
  void set_plcids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_plcids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      plcids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_plcids();

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string gmt = 16;
  void clear_gmt();
  const std::string& gmt() const;
  void set_gmt(const std::string& value);
  void set_gmt(std::string&& value);
  void set_gmt(const char* value);
  void set_gmt(const char* value, size_t size);
  std::string* mutable_gmt();
  std::string* release_gmt();
  void set_allocated_gmt(std::string* gmt);
  private:
  const std::string& _internal_gmt() const;
  void _internal_set_gmt(const std::string& value);
  std::string* _internal_mutable_gmt();
  public:

  // .farm.nurture.core.contracts.common.PlaceSourceType PlcSrcType = 1;
  void clear_plcsrctype();
  ::farm::nurture::core::contracts::common::PlaceSourceType plcsrctype() const;
  void set_plcsrctype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceSourceType _internal_plcsrctype() const;
  void _internal_set_plcsrctype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  public:

  // .farm.nurture.core.contracts.common.PlaceNamespace PlcNmspce = 2;
  void clear_plcnmspce();
  ::farm::nurture::core::contracts::common::PlaceNamespace plcnmspce() const;
  void set_plcnmspce(::farm::nurture::core::contracts::common::PlaceNamespace value);
  private:
  ::farm::nurture::core::contracts::common::PlaceNamespace _internal_plcnmspce() const;
  void _internal_set_plcnmspce(::farm::nurture::core::contracts::common::PlaceNamespace value);
  public:

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlcVsble = 3;
  void clear_plcvsble();
  ::farm::nurture::core::contracts::common::PlaceVisibleType plcvsble() const;
  void set_plcvsble(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceVisibleType _internal_plcvsble() const;
  void _internal_set_plcvsble(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  public:

  // bool AuditRequired = 5;
  void clear_auditrequired();
  bool auditrequired() const;
  void set_auditrequired(bool value);
  private:
  bool _internal_auditrequired() const;
  void _internal_set_auditrequired(bool value);
  public:

  // int32 MinZoom = 6;
  void clear_minzoom();
  ::PROTOBUF_NAMESPACE_ID::int32 minzoom() const;
  void set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minzoom() const;
  void _internal_set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxZoom = 7;
  void clear_maxzoom();
  ::PROTOBUF_NAMESPACE_ID::int32 maxzoom() const;
  void set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxzoom() const;
  void _internal_set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.UI_CLIENT UiClient = 9;
  void clear_uiclient();
  ::farm::nurture::core::contracts::common::UI_CLIENT uiclient() const;
  void set_uiclient(::farm::nurture::core::contracts::common::UI_CLIENT value);
  private:
  ::farm::nurture::core::contracts::common::UI_CLIENT _internal_uiclient() const;
  void _internal_set_uiclient(::farm::nurture::core::contracts::common::UI_CLIENT value);
  public:

  // .farm.nurture.core.contracts.common.GeometryRepresentationType gmRprType = 15;
  void clear_gmrprtype();
  ::farm::nurture::core::contracts::common::GeometryRepresentationType gmrprtype() const;
  void set_gmrprtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  private:
  ::farm::nurture::core::contracts::common::GeometryRepresentationType _internal_gmrprtype() const;
  void _internal_set_gmrprtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  public:

  // int32 thresholdDistance = 17;
  void clear_thresholddistance();
  ::PROTOBUF_NAMESPACE_ID::int32 thresholddistance() const;
  void set_thresholddistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thresholddistance() const;
  void _internal_set_thresholddistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.GeometryToValidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ValidationsApplicable > validationsapplicable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > plcids_;
  mutable std::atomic<int> _plcids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gmt_;
  int plcsrctype_;
  int plcnmspce_;
  int plcvsble_;
  bool auditrequired_;
  ::PROTOBUF_NAMESPACE_ID::int32 minzoom_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxzoom_;
  int uiclient_;
  int gmrprtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 thresholddistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ValidationsApplicable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ValidationsApplicable) */ {
 public:
  inline ValidationsApplicable() : ValidationsApplicable(nullptr) {}
  virtual ~ValidationsApplicable();

  ValidationsApplicable(const ValidationsApplicable& from);
  ValidationsApplicable(ValidationsApplicable&& from) noexcept
    : ValidationsApplicable() {
    *this = ::std::move(from);
  }

  inline ValidationsApplicable& operator=(const ValidationsApplicable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationsApplicable& operator=(ValidationsApplicable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidationsApplicable& default_instance();

  static inline const ValidationsApplicable* internal_default_instance() {
    return reinterpret_cast<const ValidationsApplicable*>(
               &_ValidationsApplicable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ValidationsApplicable& a, ValidationsApplicable& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationsApplicable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationsApplicable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidationsApplicable* New() const final {
    return CreateMaybeMessage<ValidationsApplicable>(nullptr);
  }

  ValidationsApplicable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidationsApplicable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidationsApplicable& from);
  void MergeFrom(const ValidationsApplicable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationsApplicable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ValidationsApplicable";
  }
  protected:
  explicit ValidationsApplicable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidationTypeFieldNumber = 1,
    kValidationNameFieldNumber = 2,
    kAssertTypeFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.GeoValidationType validationType = 1;
  void clear_validationtype();
  ::farm::nurture::core::contracts::common::GeoValidationType validationtype() const;
  void set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value);
  private:
  ::farm::nurture::core::contracts::common::GeoValidationType _internal_validationtype() const;
  void _internal_set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value);
  public:

  // .farm.nurture.core.contracts.common.GeoValidationName validationName = 2;
  void clear_validationname();
  ::farm::nurture::core::contracts::common::GeoValidationName validationname() const;
  void set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value);
  private:
  ::farm::nurture::core::contracts::common::GeoValidationName _internal_validationname() const;
  void _internal_set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value);
  public:

  // .farm.nurture.core.contracts.common.AssertionType assertType = 3;
  void clear_asserttype();
  ::farm::nurture::core::contracts::common::AssertionType asserttype() const;
  void set_asserttype(::farm::nurture::core::contracts::common::AssertionType value);
  private:
  ::farm::nurture::core::contracts::common::AssertionType _internal_asserttype() const;
  void _internal_set_asserttype(::farm::nurture::core::contracts::common::AssertionType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ValidationsApplicable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int validationtype_;
  int validationname_;
  int asserttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class FilterArguments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.FilterArguments) */ {
 public:
  inline FilterArguments() : FilterArguments(nullptr) {}
  virtual ~FilterArguments();

  FilterArguments(const FilterArguments& from);
  FilterArguments(FilterArguments&& from) noexcept
    : FilterArguments() {
    *this = ::std::move(from);
  }

  inline FilterArguments& operator=(const FilterArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterArguments& operator=(FilterArguments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterArguments& default_instance();

  static inline const FilterArguments* internal_default_instance() {
    return reinterpret_cast<const FilterArguments*>(
               &_FilterArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FilterArguments& a, FilterArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterArguments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterArguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterArguments* New() const final {
    return CreateMaybeMessage<FilterArguments>(nullptr);
  }

  FilterArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterArguments& from);
  void MergeFrom(const FilterArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.FilterArguments";
  }
  protected:
  explicit FilterArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceIdsFieldNumber = 1,
    kPlaceTagIdsFieldNumber = 2,
    kTagNamesFieldNumber = 3,
    kTagPropertiesFieldNumber = 4,
    kStringValuesFieldNumber = 5,
    kReferenceTypesFieldNumber = 6,
    kAttributeKeysFieldNumber = 7,
    kValuesFieldNumber = 8,
  };
  // repeated int64 placeIds = 1;
  int placeids_size() const;
  private:
  int _internal_placeids_size() const;
  public:
  void clear_placeids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_placeids() const;
  void _internal_add_placeids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_placeids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 placeids(int index) const;
  void set_placeids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_placeids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      placeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_placeids();

  // repeated int64 placeTagIds = 2;
  int placetagids_size() const;
  private:
  int _internal_placetagids_size() const;
  public:
  void clear_placetagids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placetagids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_placetagids() const;
  void _internal_add_placetagids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_placetagids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 placetagids(int index) const;
  void set_placetagids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_placetagids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      placetagids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_placetagids();

  // repeated .farm.nurture.core.contracts.common.PlaceTagName tagNames = 3;
  int tagnames_size() const;
  private:
  int _internal_tagnames_size() const;
  public:
  void clear_tagnames();
  private:
  ::farm::nurture::core::contracts::common::PlaceTagName _internal_tagnames(int index) const;
  void _internal_add_tagnames(::farm::nurture::core::contracts::common::PlaceTagName value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tagnames();
  public:
  ::farm::nurture::core::contracts::common::PlaceTagName tagnames(int index) const;
  void set_tagnames(int index, ::farm::nurture::core::contracts::common::PlaceTagName value);
  void add_tagnames(::farm::nurture::core::contracts::common::PlaceTagName value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tagnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tagnames();

  // repeated .farm.nurture.core.contracts.common.PlaceTagProperty tagProperties = 4;
  int tagproperties_size() const;
  private:
  int _internal_tagproperties_size() const;
  public:
  void clear_tagproperties();
  private:
  ::farm::nurture::core::contracts::common::PlaceTagProperty _internal_tagproperties(int index) const;
  void _internal_add_tagproperties(::farm::nurture::core::contracts::common::PlaceTagProperty value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tagproperties();
  public:
  ::farm::nurture::core::contracts::common::PlaceTagProperty tagproperties(int index) const;
  void set_tagproperties(int index, ::farm::nurture::core::contracts::common::PlaceTagProperty value);
  void add_tagproperties(::farm::nurture::core::contracts::common::PlaceTagProperty value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tagproperties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tagproperties();

  // repeated string StringValues = 5;
  int stringvalues_size() const;
  private:
  int _internal_stringvalues_size() const;
  public:
  void clear_stringvalues();
  const std::string& stringvalues(int index) const;
  std::string* mutable_stringvalues(int index);
  void set_stringvalues(int index, const std::string& value);
  void set_stringvalues(int index, std::string&& value);
  void set_stringvalues(int index, const char* value);
  void set_stringvalues(int index, const char* value, size_t size);
  std::string* add_stringvalues();
  void add_stringvalues(const std::string& value);
  void add_stringvalues(std::string&& value);
  void add_stringvalues(const char* value);
  void add_stringvalues(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringvalues();
  private:
  const std::string& _internal_stringvalues(int index) const;
  std::string* _internal_add_stringvalues();
  public:

  // repeated .farm.nurture.core.contracts.common.ReferenceType reference_types = 6;
  int reference_types_size() const;
  private:
  int _internal_reference_types_size() const;
  public:
  void clear_reference_types();
  private:
  ::farm::nurture::core::contracts::common::ReferenceType _internal_reference_types(int index) const;
  void _internal_add_reference_types(::farm::nurture::core::contracts::common::ReferenceType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_reference_types();
  public:
  ::farm::nurture::core::contracts::common::ReferenceType reference_types(int index) const;
  void set_reference_types(int index, ::farm::nurture::core::contracts::common::ReferenceType value);
  void add_reference_types(::farm::nurture::core::contracts::common::ReferenceType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& reference_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_reference_types();

  // repeated .farm.nurture.core.contracts.common.AttributeKey attribute_keys = 7;
  int attribute_keys_size() const;
  private:
  int _internal_attribute_keys_size() const;
  public:
  void clear_attribute_keys();
  private:
  ::farm::nurture::core::contracts::common::AttributeKey _internal_attribute_keys(int index) const;
  void _internal_add_attribute_keys(::farm::nurture::core::contracts::common::AttributeKey value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_attribute_keys();
  public:
  ::farm::nurture::core::contracts::common::AttributeKey attribute_keys(int index) const;
  void set_attribute_keys(int index, ::farm::nurture::core::contracts::common::AttributeKey value);
  void add_attribute_keys(::farm::nurture::core::contracts::common::AttributeKey value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& attribute_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_attribute_keys();

  // repeated .farm.nurture.core.contracts.common.Value values = 8;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::farm::nurture::core::contracts::common::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Value >*
      mutable_values();
  private:
  const ::farm::nurture::core::contracts::common::Value& _internal_values(int index) const;
  ::farm::nurture::core::contracts::common::Value* _internal_add_values();
  public:
  const ::farm::nurture::core::contracts::common::Value& values(int index) const;
  ::farm::nurture::core::contracts::common::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.FilterArguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > placeids_;
  mutable std::atomic<int> _placeids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > placetagids_;
  mutable std::atomic<int> _placetagids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tagnames_;
  mutable std::atomic<int> _tagnames_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tagproperties_;
  mutable std::atomic<int> _tagproperties_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringvalues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> reference_types_;
  mutable std::atomic<int> _reference_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> attribute_keys_;
  mutable std::atomic<int> _attribute_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Value > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 3,
    kBaseConditionFieldNumber = 1,
    kCombiningOperatorFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Filter conditions = 3;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::farm::nurture::core::contracts::common::Filter* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Filter >*
      mutable_conditions();
  private:
  const ::farm::nurture::core::contracts::common::Filter& _internal_conditions(int index) const;
  ::farm::nurture::core::contracts::common::Filter* _internal_add_conditions();
  public:
  const ::farm::nurture::core::contracts::common::Filter& conditions(int index) const;
  ::farm::nurture::core::contracts::common::Filter* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Filter >&
      conditions() const;

  // .farm.nurture.core.contracts.common.BaseConditions baseCondition = 1;
  bool has_basecondition() const;
  private:
  bool _internal_has_basecondition() const;
  public:
  void clear_basecondition();
  const ::farm::nurture::core::contracts::common::BaseConditions& basecondition() const;
  ::farm::nurture::core::contracts::common::BaseConditions* release_basecondition();
  ::farm::nurture::core::contracts::common::BaseConditions* mutable_basecondition();
  void set_allocated_basecondition(::farm::nurture::core::contracts::common::BaseConditions* basecondition);
  private:
  const ::farm::nurture::core::contracts::common::BaseConditions& _internal_basecondition() const;
  ::farm::nurture::core::contracts::common::BaseConditions* _internal_mutable_basecondition();
  public:
  void unsafe_arena_set_allocated_basecondition(
      ::farm::nurture::core::contracts::common::BaseConditions* basecondition);
  ::farm::nurture::core::contracts::common::BaseConditions* unsafe_arena_release_basecondition();

  // .farm.nurture.core.contracts.common.LogicOperator combiningOperator = 2;
  void clear_combiningoperator();
  ::farm::nurture::core::contracts::common::LogicOperator combiningoperator() const;
  void set_combiningoperator(::farm::nurture::core::contracts::common::LogicOperator value);
  private:
  ::farm::nurture::core::contracts::common::LogicOperator _internal_combiningoperator() const;
  void _internal_set_combiningoperator(::farm::nurture::core::contracts::common::LogicOperator value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Filter > conditions_;
  ::farm::nurture::core::contracts::common::BaseConditions* basecondition_;
  int combiningoperator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class BaseConditions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.BaseConditions) */ {
 public:
  inline BaseConditions() : BaseConditions(nullptr) {}
  virtual ~BaseConditions();

  BaseConditions(const BaseConditions& from);
  BaseConditions(BaseConditions&& from) noexcept
    : BaseConditions() {
    *this = ::std::move(from);
  }

  inline BaseConditions& operator=(const BaseConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseConditions& operator=(BaseConditions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseConditions& default_instance();

  static inline const BaseConditions* internal_default_instance() {
    return reinterpret_cast<const BaseConditions*>(
               &_BaseConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BaseConditions& a, BaseConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseConditions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseConditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseConditions* New() const final {
    return CreateMaybeMessage<BaseConditions>(nullptr);
  }

  BaseConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseConditions& from);
  void MergeFrom(const BaseConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.BaseConditions";
  }
  protected:
  explicit BaseConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 3,
    kFilterKeyFieldNumber = 1,
    kOperatorFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.FilterArguments argument = 3;
  bool has_argument() const;
  private:
  bool _internal_has_argument() const;
  public:
  void clear_argument();
  const ::farm::nurture::core::contracts::common::FilterArguments& argument() const;
  ::farm::nurture::core::contracts::common::FilterArguments* release_argument();
  ::farm::nurture::core::contracts::common::FilterArguments* mutable_argument();
  void set_allocated_argument(::farm::nurture::core::contracts::common::FilterArguments* argument);
  private:
  const ::farm::nurture::core::contracts::common::FilterArguments& _internal_argument() const;
  ::farm::nurture::core::contracts::common::FilterArguments* _internal_mutable_argument();
  public:
  void unsafe_arena_set_allocated_argument(
      ::farm::nurture::core::contracts::common::FilterArguments* argument);
  ::farm::nurture::core::contracts::common::FilterArguments* unsafe_arena_release_argument();

  // .farm.nurture.core.contracts.common.FilterKey filterKey = 1;
  void clear_filterkey();
  ::farm::nurture::core::contracts::common::FilterKey filterkey() const;
  void set_filterkey(::farm::nurture::core::contracts::common::FilterKey value);
  private:
  ::farm::nurture::core::contracts::common::FilterKey _internal_filterkey() const;
  void _internal_set_filterkey(::farm::nurture::core::contracts::common::FilterKey value);
  public:

  // .farm.nurture.core.contracts.common.ComparisonCheckType operator = 2;
  void clear_operator_();
  ::farm::nurture::core::contracts::common::ComparisonCheckType operator_() const;
  void set_operator_(::farm::nurture::core::contracts::common::ComparisonCheckType value);
  private:
  ::farm::nurture::core::contracts::common::ComparisonCheckType _internal_operator_() const;
  void _internal_set_operator_(::farm::nurture::core::contracts::common::ComparisonCheckType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.BaseConditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::FilterArguments* argument_;
  int filterkey_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ReferenceAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ReferenceAttribute) */ {
 public:
  inline ReferenceAttribute() : ReferenceAttribute(nullptr) {}
  virtual ~ReferenceAttribute();

  ReferenceAttribute(const ReferenceAttribute& from);
  ReferenceAttribute(ReferenceAttribute&& from) noexcept
    : ReferenceAttribute() {
    *this = ::std::move(from);
  }

  inline ReferenceAttribute& operator=(const ReferenceAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceAttribute& operator=(ReferenceAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReferenceAttribute& default_instance();

  static inline const ReferenceAttribute* internal_default_instance() {
    return reinterpret_cast<const ReferenceAttribute*>(
               &_ReferenceAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReferenceAttribute& a, ReferenceAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceAttribute* New() const final {
    return CreateMaybeMessage<ReferenceAttribute>(nullptr);
  }

  ReferenceAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceAttribute& from);
  void MergeFrom(const ReferenceAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ReferenceAttribute";
  }
  protected:
  explicit ReferenceAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kReferenceTypeFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.Attribute attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::farm::nurture::core::contracts::common::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribute >*
      mutable_attributes();
  private:
  const ::farm::nurture::core::contracts::common::Attribute& _internal_attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribute* _internal_add_attributes();
  public:
  const ::farm::nurture::core::contracts::common::Attribute& attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribute >&
      attributes() const;

  // .farm.nurture.core.contracts.common.ReferenceType reference_type = 1;
  void clear_reference_type();
  ::farm::nurture::core::contracts::common::ReferenceType reference_type() const;
  void set_reference_type(::farm::nurture::core::contracts::common::ReferenceType value);
  private:
  ::farm::nurture::core::contracts::common::ReferenceType _internal_reference_type() const;
  void _internal_set_reference_type(::farm::nurture::core::contracts::common::ReferenceType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ReferenceAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribute > attributes_;
  int reference_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ZoomRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.ZoomRange) */ {
 public:
  inline ZoomRange() : ZoomRange(nullptr) {}
  virtual ~ZoomRange();

  ZoomRange(const ZoomRange& from);
  ZoomRange(ZoomRange&& from) noexcept
    : ZoomRange() {
    *this = ::std::move(from);
  }

  inline ZoomRange& operator=(const ZoomRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomRange& operator=(ZoomRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZoomRange& default_instance();

  static inline const ZoomRange* internal_default_instance() {
    return reinterpret_cast<const ZoomRange*>(
               &_ZoomRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ZoomRange& a, ZoomRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZoomRange* New() const final {
    return CreateMaybeMessage<ZoomRange>(nullptr);
  }

  ZoomRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZoomRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZoomRange& from);
  void MergeFrom(const ZoomRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.ZoomRange";
  }
  protected:
  explicit ZoomRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinZoomFieldNumber = 1,
    kMaxZoomFieldNumber = 2,
  };
  // int32 minZoom = 1;
  void clear_minzoom();
  ::PROTOBUF_NAMESPACE_ID::int32 minzoom() const;
  void set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minzoom() const;
  void _internal_set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxZoom = 2;
  void clear_maxzoom();
  ::PROTOBUF_NAMESPACE_ID::int32 maxzoom() const;
  void set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxzoom() const;
  void _internal_set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.ZoomRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 minzoom_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxzoom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class MapTile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.MapTile) */ {
 public:
  inline MapTile() : MapTile(nullptr) {}
  virtual ~MapTile();

  MapTile(const MapTile& from);
  MapTile(MapTile&& from) noexcept
    : MapTile() {
    *this = ::std::move(from);
  }

  inline MapTile& operator=(const MapTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTile& operator=(MapTile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapTile& default_instance();

  static inline const MapTile* internal_default_instance() {
    return reinterpret_cast<const MapTile*>(
               &_MapTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MapTile& a, MapTile& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTile* New() const final {
    return CreateMaybeMessage<MapTile>(nullptr);
  }

  MapTile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapTile& from);
  void MergeFrom(const MapTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.MapTile";
  }
  protected:
  explicit MapTile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileXFieldNumber = 2,
    kTileYFieldNumber = 3,
    kZoomFieldNumber = 1,
  };
  // int64 tileX = 2;
  void clear_tilex();
  ::PROTOBUF_NAMESPACE_ID::int64 tilex() const;
  void set_tilex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tilex() const;
  void _internal_set_tilex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tileY = 3;
  void clear_tiley();
  ::PROTOBUF_NAMESPACE_ID::int64 tiley() const;
  void set_tiley(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tiley() const;
  void _internal_set_tiley(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 zoom = 1;
  void clear_zoom();
  ::PROTOBUF_NAMESPACE_ID::int32 zoom() const;
  void set_zoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zoom() const;
  void _internal_set_zoom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.MapTile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 tilex_;
  ::PROTOBUF_NAMESPACE_ID::int64 tiley_;
  ::PROTOBUF_NAMESPACE_ID::int32 zoom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Environment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {}
  virtual ~Environment();

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Environment& default_instance();

  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(nullptr);
  }

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionFieldNumber = 4,
    kZoomHintsFieldNumber = 5,
    kNamespaceFieldNumber = 1,
    kSourceTypeFieldNumber = 2,
    kVisibleTypeFieldNumber = 3,
    kClientFieldNumber = 6,
  };
  // string model_version = 4;
  void clear_model_version();
  const std::string& model_version() const;
  void set_model_version(const std::string& value);
  void set_model_version(std::string&& value);
  void set_model_version(const char* value);
  void set_model_version(const char* value, size_t size);
  std::string* mutable_model_version();
  std::string* release_model_version();
  void set_allocated_model_version(std::string* model_version);
  private:
  const std::string& _internal_model_version() const;
  void _internal_set_model_version(const std::string& value);
  std::string* _internal_mutable_model_version();
  public:

  // .farm.nurture.core.contracts.common.ZoomRange zoom_hints = 5;
  bool has_zoom_hints() const;
  private:
  bool _internal_has_zoom_hints() const;
  public:
  void clear_zoom_hints();
  const ::farm::nurture::core::contracts::common::ZoomRange& zoom_hints() const;
  ::farm::nurture::core::contracts::common::ZoomRange* release_zoom_hints();
  ::farm::nurture::core::contracts::common::ZoomRange* mutable_zoom_hints();
  void set_allocated_zoom_hints(::farm::nurture::core::contracts::common::ZoomRange* zoom_hints);
  private:
  const ::farm::nurture::core::contracts::common::ZoomRange& _internal_zoom_hints() const;
  ::farm::nurture::core::contracts::common::ZoomRange* _internal_mutable_zoom_hints();
  public:
  void unsafe_arena_set_allocated_zoom_hints(
      ::farm::nurture::core::contracts::common::ZoomRange* zoom_hints);
  ::farm::nurture::core::contracts::common::ZoomRange* unsafe_arena_release_zoom_hints();

  // .farm.nurture.core.contracts.common.PlaceNamespace namespace = 1;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::PlaceNamespace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::PlaceNamespace value);
  private:
  ::farm::nurture::core::contracts::common::PlaceNamespace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::PlaceNamespace value);
  public:

  // .farm.nurture.core.contracts.common.PlaceSourceType sourceType = 2;
  void clear_sourcetype();
  ::farm::nurture::core::contracts::common::PlaceSourceType sourcetype() const;
  void set_sourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceSourceType _internal_sourcetype() const;
  void _internal_set_sourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  public:

  // .farm.nurture.core.contracts.common.PlaceVisibleType visibleType = 3;
  void clear_visibletype();
  ::farm::nurture::core::contracts::common::PlaceVisibleType visibletype() const;
  void set_visibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceVisibleType _internal_visibletype() const;
  void _internal_set_visibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  public:

  // .farm.nurture.core.contracts.common.UI_CLIENT client = 6;
  void clear_client();
  ::farm::nurture::core::contracts::common::UI_CLIENT client() const;
  void set_client(::farm::nurture::core::contracts::common::UI_CLIENT value);
  private:
  ::farm::nurture::core::contracts::common::UI_CLIENT _internal_client() const;
  void _internal_set_client(::farm::nurture::core::contracts::common::UI_CLIENT value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_;
  ::farm::nurture::core::contracts::common::ZoomRange* zoom_hints_;
  int namespace__;
  int sourcetype_;
  int visibletype_;
  int client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Place PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Place) */ {
 public:
  inline Place() : Place(nullptr) {}
  virtual ~Place();

  Place(const Place& from);
  Place(Place&& from) noexcept
    : Place() {
    *this = ::std::move(from);
  }

  inline Place& operator=(const Place& from) {
    CopyFrom(from);
    return *this;
  }
  inline Place& operator=(Place&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Place& default_instance();

  static inline const Place* internal_default_instance() {
    return reinterpret_cast<const Place*>(
               &_Place_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Place& a, Place& b) {
    a.Swap(&b);
  }
  inline void Swap(Place* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Place* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Place* New() const final {
    return CreateMaybeMessage<Place>(nullptr);
  }

  Place* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Place>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Place& from);
  void MergeFrom(const Place& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Place* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Place";
  }
  protected:
  explicit Place(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kReferenceAttributesFieldNumber = 4,
    kGeometryFieldNumber = 1,
    kSourceIdStrFieldNumber = 11,
    kTimeRangeFieldNumber = 5,
    kPlaceIdFieldNumber = 6,
    kSourceIdFieldNumber = 7,
    kRepresentationTypeFieldNumber = 2,
    kDeletedFieldNumber = 9,
    kOverlapFieldNumber = 10,
    kVersionFieldNumber = 8,
  };
  // repeated .farm.nurture.core.contracts.common.PlaceTag tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_tags();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_tags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_tags();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& tags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      tags() const;

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute reference_attributes = 4;
  int reference_attributes_size() const;
  private:
  int _internal_reference_attributes_size() const;
  public:
  void clear_reference_attributes();
  ::farm::nurture::core::contracts::common::ReferenceAttribute* mutable_reference_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
      mutable_reference_attributes();
  private:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& _internal_reference_attributes(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* _internal_add_reference_attributes();
  public:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& reference_attributes(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* add_reference_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
      reference_attributes() const;

  // string geometry = 1;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // string source_id_str = 11;
  void clear_source_id_str();
  const std::string& source_id_str() const;
  void set_source_id_str(const std::string& value);
  void set_source_id_str(std::string&& value);
  void set_source_id_str(const char* value);
  void set_source_id_str(const char* value, size_t size);
  std::string* mutable_source_id_str();
  std::string* release_source_id_str();
  void set_allocated_source_id_str(std::string* source_id_str);
  private:
  const std::string& _internal_source_id_str() const;
  void _internal_set_source_id_str(const std::string& value);
  std::string* _internal_mutable_source_id_str();
  public:

  // .farm.nurture.core.contracts.common.TimeRange time_range = 5;
  bool has_time_range() const;
  private:
  bool _internal_has_time_range() const;
  public:
  void clear_time_range();
  const ::farm::nurture::core::contracts::common::TimeRange& time_range() const;
  ::farm::nurture::core::contracts::common::TimeRange* release_time_range();
  ::farm::nurture::core::contracts::common::TimeRange* mutable_time_range();
  void set_allocated_time_range(::farm::nurture::core::contracts::common::TimeRange* time_range);
  private:
  const ::farm::nurture::core::contracts::common::TimeRange& _internal_time_range() const;
  ::farm::nurture::core::contracts::common::TimeRange* _internal_mutable_time_range();
  public:
  void unsafe_arena_set_allocated_time_range(
      ::farm::nurture::core::contracts::common::TimeRange* time_range);
  ::farm::nurture::core::contracts::common::TimeRange* unsafe_arena_release_time_range();

  // int64 place_id = 6;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 source_id = 7;
  void clear_source_id();
  ::PROTOBUF_NAMESPACE_ID::int64 source_id() const;
  void set_source_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_source_id() const;
  void _internal_set_source_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.GeometryRepresentationType representation_type = 2;
  void clear_representation_type();
  ::farm::nurture::core::contracts::common::GeometryRepresentationType representation_type() const;
  void set_representation_type(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  private:
  ::farm::nurture::core::contracts::common::GeometryRepresentationType _internal_representation_type() const;
  void _internal_set_representation_type(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  public:

  // bool deleted = 9;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // bool overlap = 10;
  void clear_overlap();
  bool overlap() const;
  void set_overlap(bool value);
  private:
  bool _internal_overlap() const;
  void _internal_set_overlap(bool value);
  public:

  // int64 version = 8;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Place)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute > reference_attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_str_;
  ::farm::nurture::core::contracts::common::TimeRange* time_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 source_id_;
  int representation_type_;
  bool deleted_;
  bool overlap_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Attribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  virtual ~Attribute();

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute& default_instance();

  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Attribute";
  }
  protected:
  explicit Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::farm::nurture::core::contracts::common::Value& value() const;
  ::farm::nurture::core::contracts::common::Value* release_value();
  ::farm::nurture::core::contracts::common::Value* mutable_value();
  void set_allocated_value(::farm::nurture::core::contracts::common::Value* value);
  private:
  const ::farm::nurture::core::contracts::common::Value& _internal_value() const;
  ::farm::nurture::core::contracts::common::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::farm::nurture::core::contracts::common::Value* value);
  ::farm::nurture::core::contracts::common::Value* unsafe_arena_release_value();

  // .farm.nurture.core.contracts.common.AttributeKey key = 1;
  void clear_key();
  ::farm::nurture::core::contracts::common::AttributeKey key() const;
  void set_key(::farm::nurture::core::contracts::common::AttributeKey value);
  private:
  ::farm::nurture::core::contracts::common::AttributeKey _internal_key() const;
  void _internal_set_key(::farm::nurture::core::contracts::common::AttributeKey value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::Value* value_;
  int key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 3,
    kNumberValueFieldNumber = 2,
    kValueTypeFieldNumber = 1,
    kBoolValueFieldNumber = 4,
    kInt64ValueFieldNumber = 5,
    kInt32ValueFieldNumber = 6,
  };
  // string string_value = 3;
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // double number_value = 2;
  void clear_number_value();
  double number_value() const;
  void set_number_value(double value);
  private:
  double _internal_number_value() const;
  void _internal_set_number_value(double value);
  public:

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  void clear_value_type();
  ::farm::nurture::core::contracts::common::ValueType value_type() const;
  void set_value_type(::farm::nurture::core::contracts::common::ValueType value);
  private:
  ::farm::nurture::core::contracts::common::ValueType _internal_value_type() const;
  void _internal_set_value_type(::farm::nurture::core::contracts::common::ValueType value);
  public:

  // bool bool_value = 4;
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 5;
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 int32_value = 6;
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  double number_value_;
  int value_type_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Options) */ {
 public:
  inline Options() : Options(nullptr) {}
  virtual ~Options();

  Options(const Options& from);
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options& operator=(Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Options& default_instance();

  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }
  inline void Swap(Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return CreateMaybeMessage<Options>(nullptr);
  }

  Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Options";
  }
  protected:
  explicit Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckOverlapFieldNumber = 1,
    kGetDetailsFieldNumber = 2,
  };
  // bool check_overlap = 1;
  void clear_check_overlap();
  bool check_overlap() const;
  void set_check_overlap(bool value);
  private:
  bool _internal_check_overlap() const;
  void _internal_set_check_overlap(bool value);
  public:

  // bool get_details = 2;
  void clear_get_details();
  bool get_details() const;
  void set_get_details(bool value);
  private:
  bool _internal_get_details() const;
  void _internal_set_get_details(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool check_overlap_;
  bool get_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UserContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UserContext) */ {
 public:
  inline UserContext() : UserContext(nullptr) {}
  virtual ~UserContext();

  UserContext(const UserContext& from);
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserContext& default_instance();

  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }
  inline void Swap(UserContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(nullptr);
  }

  UserContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UserContext";
  }
  protected:
  explicit UserContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUgdnIDFieldNumber = 1,
  };
  // int64 ugdnID = 1;
  void clear_ugdnid();
  ::PROTOBUF_NAMESPACE_ID::int64 ugdnid() const;
  void set_ugdnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ugdnid() const;
  void _internal_set_ugdnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UserContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 ugdnid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlacesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.PlacesData) */ {
 public:
  inline PlacesData() : PlacesData(nullptr) {}
  virtual ~PlacesData();

  PlacesData(const PlacesData& from);
  PlacesData(PlacesData&& from) noexcept
    : PlacesData() {
    *this = ::std::move(from);
  }

  inline PlacesData& operator=(const PlacesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlacesData& operator=(PlacesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlacesData& default_instance();

  static inline const PlacesData* internal_default_instance() {
    return reinterpret_cast<const PlacesData*>(
               &_PlacesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlacesData& a, PlacesData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlacesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlacesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlacesData* New() const final {
    return CreateMaybeMessage<PlacesData>(nullptr);
  }

  PlacesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlacesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlacesData& from);
  void MergeFrom(const PlacesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlacesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.PlacesData";
  }
  protected:
  explicit PlacesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceTagsFieldNumber = 5,
    kSourceIdFieldNumber = 1,
    kGeometryFieldNumber = 2,
    kPlaceIdFieldNumber = 3,
    kGeometryRepresentationTypeFieldNumber = 4,
    kPlaceSourceTypeFieldNumber = 6,
    kPlaceNameSpaceFieldNumber = 7,
    kPlaceVisibleTypeFieldNumber = 8,
    kGeometryTypeFieldNumber = 9,
  };
  // repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 5;
  int placetags_size() const;
  private:
  int _internal_placetags_size() const;
  public:
  void clear_placetags();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_placetags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_placetags();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_placetags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_placetags();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& placetags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_placetags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      placetags() const;

  // string SourceId = 1;
  void clear_sourceid();
  const std::string& sourceid() const;
  void set_sourceid(const std::string& value);
  void set_sourceid(std::string&& value);
  void set_sourceid(const char* value);
  void set_sourceid(const char* value, size_t size);
  std::string* mutable_sourceid();
  std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // string geometry = 2;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int64 PlaceId = 3;
  void clear_placeid();
  ::PROTOBUF_NAMESPACE_ID::int64 placeid() const;
  void set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placeid() const;
  void _internal_set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 4;
  void clear_geometryrepresentationtype();
  ::farm::nurture::core::contracts::common::GeometryRepresentationType geometryrepresentationtype() const;
  void set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  private:
  ::farm::nurture::core::contracts::common::GeometryRepresentationType _internal_geometryrepresentationtype() const;
  void _internal_set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value);
  public:

  // .farm.nurture.core.contracts.common.PlaceSourceType place_source_type = 6;
  void clear_place_source_type();
  ::farm::nurture::core::contracts::common::PlaceSourceType place_source_type() const;
  void set_place_source_type(::farm::nurture::core::contracts::common::PlaceSourceType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceSourceType _internal_place_source_type() const;
  void _internal_set_place_source_type(::farm::nurture::core::contracts::common::PlaceSourceType value);
  public:

  // .farm.nurture.core.contracts.common.PlaceNamespace place_name_space = 7;
  void clear_place_name_space();
  ::farm::nurture::core::contracts::common::PlaceNamespace place_name_space() const;
  void set_place_name_space(::farm::nurture::core::contracts::common::PlaceNamespace value);
  private:
  ::farm::nurture::core::contracts::common::PlaceNamespace _internal_place_name_space() const;
  void _internal_set_place_name_space(::farm::nurture::core::contracts::common::PlaceNamespace value);
  public:

  // .farm.nurture.core.contracts.common.PlaceVisibleType place_visible_type = 8;
  void clear_place_visible_type();
  ::farm::nurture::core::contracts::common::PlaceVisibleType place_visible_type() const;
  void set_place_visible_type(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceVisibleType _internal_place_visible_type() const;
  void _internal_set_place_visible_type(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  public:

  // .farm.nurture.core.contracts.common.GeometryType geometry_type = 9;
  void clear_geometry_type();
  ::farm::nurture::core::contracts::common::GeometryType geometry_type() const;
  void set_geometry_type(::farm::nurture::core::contracts::common::GeometryType value);
  private:
  ::farm::nurture::core::contracts::common::GeometryType _internal_geometry_type() const;
  void _internal_set_geometry_type(::farm::nurture::core::contracts::common::GeometryType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.PlacesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > placetags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int64 placeid_;
  int geometryrepresentationtype_;
  int place_source_type_;
  int place_name_space_;
  int place_visible_type_;
  int geometry_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Configuration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  virtual ~Configuration();

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration& default_instance();

  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(nullptr);
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuditRequiredFieldNumber = 1,
    kOverlapFieldNumber = 2,
    kSoftDeleteFieldNumber = 3,
    kServiceNameFieldNumber = 4,
  };
  // bool audit_required = 1;
  void clear_audit_required();
  bool audit_required() const;
  void set_audit_required(bool value);
  private:
  bool _internal_audit_required() const;
  void _internal_set_audit_required(bool value);
  public:

  // bool overlap = 2;
  void clear_overlap();
  bool overlap() const;
  void set_overlap(bool value);
  private:
  bool _internal_overlap() const;
  void _internal_set_overlap(bool value);
  public:

  // bool soft_delete = 3;
  void clear_soft_delete();
  bool soft_delete() const;
  void set_soft_delete(bool value);
  private:
  bool _internal_soft_delete() const;
  void _internal_set_soft_delete(bool value);
  public:

  // .farm.nurture.core.contracts.common.ServiceName service_name = 4;
  void clear_service_name();
  ::farm::nurture::core::contracts::common::ServiceName service_name() const;
  void set_service_name(::farm::nurture::core::contracts::common::ServiceName value);
  private:
  ::farm::nurture::core::contracts::common::ServiceName _internal_service_name() const;
  void _internal_set_service_name(::farm::nurture::core::contracts::common::ServiceName value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool audit_required_;
  bool overlap_;
  bool soft_delete_;
  int service_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class TileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.TileRequest) */ {
 public:
  inline TileRequest() : TileRequest(nullptr) {}
  virtual ~TileRequest();

  TileRequest(const TileRequest& from);
  TileRequest(TileRequest&& from) noexcept
    : TileRequest() {
    *this = ::std::move(from);
  }

  inline TileRequest& operator=(const TileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileRequest& operator=(TileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileRequest& default_instance();

  static inline const TileRequest* internal_default_instance() {
    return reinterpret_cast<const TileRequest*>(
               &_TileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TileRequest& a, TileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileRequest* New() const final {
    return CreateMaybeMessage<TileRequest>(nullptr);
  }

  TileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileRequest& from);
  void MergeFrom(const TileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.TileRequest";
  }
  protected:
  explicit TileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapTilesFieldNumber = 2,
    kEnvFieldNumber = 1,
    kTagFilterFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.MapTile mapTiles = 2;
  int maptiles_size() const;
  private:
  int _internal_maptiles_size() const;
  public:
  void clear_maptiles();
  ::farm::nurture::core::contracts::common::MapTile* mutable_maptiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >*
      mutable_maptiles();
  private:
  const ::farm::nurture::core::contracts::common::MapTile& _internal_maptiles(int index) const;
  ::farm::nurture::core::contracts::common::MapTile* _internal_add_maptiles();
  public:
  const ::farm::nurture::core::contracts::common::MapTile& maptiles(int index) const;
  ::farm::nurture::core::contracts::common::MapTile* add_maptiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >&
      maptiles() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // .farm.nurture.core.contracts.common.Filter tag_filter = 3;
  bool has_tag_filter() const;
  private:
  bool _internal_has_tag_filter() const;
  public:
  void clear_tag_filter();
  const ::farm::nurture::core::contracts::common::Filter& tag_filter() const;
  ::farm::nurture::core::contracts::common::Filter* release_tag_filter();
  ::farm::nurture::core::contracts::common::Filter* mutable_tag_filter();
  void set_allocated_tag_filter(::farm::nurture::core::contracts::common::Filter* tag_filter);
  private:
  const ::farm::nurture::core::contracts::common::Filter& _internal_tag_filter() const;
  ::farm::nurture::core::contracts::common::Filter* _internal_mutable_tag_filter();
  public:
  void unsafe_arena_set_allocated_tag_filter(
      ::farm::nurture::core::contracts::common::Filter* tag_filter);
  ::farm::nurture::core::contracts::common::Filter* unsafe_arena_release_tag_filter();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.TileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile > maptiles_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::farm::nurture::core::contracts::common::Filter* tag_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class TileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.TileResponse) */ {
 public:
  inline TileResponse() : TileResponse(nullptr) {}
  virtual ~TileResponse();

  TileResponse(const TileResponse& from);
  TileResponse(TileResponse&& from) noexcept
    : TileResponse() {
    *this = ::std::move(from);
  }

  inline TileResponse& operator=(const TileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileResponse& operator=(TileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileResponse& default_instance();

  static inline const TileResponse* internal_default_instance() {
    return reinterpret_cast<const TileResponse*>(
               &_TileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TileResponse& a, TileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileResponse* New() const final {
    return CreateMaybeMessage<TileResponse>(nullptr);
  }

  TileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileResponse& from);
  void MergeFrom(const TileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.TileResponse";
  }
  protected:
  explicit TileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacesFieldNumber = 2,
    kEnvFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  int places_size() const;
  private:
  int _internal_places_size() const;
  public:
  void clear_places();
  ::farm::nurture::core::contracts::common::Place* mutable_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      places() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.TileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > places_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacesFieldNumber = 2,
    kEnvFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.Place places = 2;
  int places_size() const;
  private:
  int _internal_places_size() const;
  public:
  void clear_places();
  ::farm::nurture::core::contracts::common::Place* mutable_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      places() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // .farm.nurture.core.contracts.common.Options options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::farm::nurture::core::contracts::common::Options& options() const;
  ::farm::nurture::core::contracts::common::Options* release_options();
  ::farm::nurture::core::contracts::common::Options* mutable_options();
  void set_allocated_options(::farm::nurture::core::contracts::common::Options* options);
  private:
  const ::farm::nurture::core::contracts::common::Options& _internal_options() const;
  ::farm::nurture::core::contracts::common::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::farm::nurture::core::contracts::common::Options* options);
  ::farm::nurture::core::contracts::common::Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > places_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::farm::nurture::core::contracts::common::Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedPlacesFieldNumber = 2,
    kPlacesWithOverlapsFieldNumber = 4,
    kEnvFieldNumber = 1,
    kUpdatedPlacesCountFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.Place updated_places = 2;
  int updated_places_size() const;
  private:
  int _internal_updated_places_size() const;
  public:
  void clear_updated_places();
  ::farm::nurture::core::contracts::common::Place* mutable_updated_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_updated_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_updated_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_updated_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& updated_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_updated_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      updated_places() const;

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  int places_with_overlaps_size() const;
  private:
  int _internal_places_with_overlaps_size() const;
  public:
  void clear_places_with_overlaps();
  ::farm::nurture::core::contracts::common::OverlappingPlaces* mutable_places_with_overlaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >*
      mutable_places_with_overlaps();
  private:
  const ::farm::nurture::core::contracts::common::OverlappingPlaces& _internal_places_with_overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlaces* _internal_add_places_with_overlaps();
  public:
  const ::farm::nurture::core::contracts::common::OverlappingPlaces& places_with_overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlaces* add_places_with_overlaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >&
      places_with_overlaps() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // int64 updated_places_count = 3;
  void clear_updated_places_count();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_places_count() const;
  void set_updated_places_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_places_count() const;
  void _internal_set_updated_places_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > updated_places_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces > places_with_overlaps_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_places_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceIdsFieldNumber = 2,
    kEnvFieldNumber = 1,
  };
  // repeated int64 place_ids = 2;
  int place_ids_size() const;
  private:
  int _internal_place_ids_size() const;
  public:
  void clear_place_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_place_ids() const;
  void _internal_add_place_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_place_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 place_ids(int index) const;
  void set_place_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_place_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      place_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_place_ids();

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > place_ids_;
  mutable std::atomic<int> _place_ids_cached_byte_size_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.DeleteResponse) */ {
 public:
  inline DeleteResponse() : DeleteResponse(nullptr) {}
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponse& default_instance();

  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(nullptr);
  }

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.DeleteResponse";
  }
  protected:
  explicit DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedPlacesFieldNumber = 3,
    kEnvFieldNumber = 1,
    kDeletedCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Place deleted_places = 3;
  int deleted_places_size() const;
  private:
  int _internal_deleted_places_size() const;
  public:
  void clear_deleted_places();
  ::farm::nurture::core::contracts::common::Place* mutable_deleted_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_deleted_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_deleted_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_deleted_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& deleted_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_deleted_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      deleted_places() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // int64 deleted_count = 2;
  void clear_deleted_count();
  ::PROTOBUF_NAMESPACE_ID::int64 deleted_count() const;
  void set_deleted_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deleted_count() const;
  void _internal_set_deleted_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.DeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > deleted_places_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::PROTOBUF_NAMESPACE_ID::int64 deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class InsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.InsertRequest) */ {
 public:
  inline InsertRequest() : InsertRequest(nullptr) {}
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertRequest& default_instance();

  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(nullptr);
  }

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.InsertRequest";
  }
  protected:
  explicit InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacesFieldNumber = 3,
    kEnvFieldNumber = 1,
    kOptionsFieldNumber = 2,
    kTagFilterFieldNumber = 4,
  };
  // repeated .farm.nurture.core.contracts.common.Place places = 3;
  int places_size() const;
  private:
  int _internal_places_size() const;
  public:
  void clear_places();
  ::farm::nurture::core::contracts::common::Place* mutable_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      places() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // .farm.nurture.core.contracts.common.Options options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::farm::nurture::core::contracts::common::Options& options() const;
  ::farm::nurture::core::contracts::common::Options* release_options();
  ::farm::nurture::core::contracts::common::Options* mutable_options();
  void set_allocated_options(::farm::nurture::core::contracts::common::Options* options);
  private:
  const ::farm::nurture::core::contracts::common::Options& _internal_options() const;
  ::farm::nurture::core::contracts::common::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::farm::nurture::core::contracts::common::Options* options);
  ::farm::nurture::core::contracts::common::Options* unsafe_arena_release_options();

  // .farm.nurture.core.contracts.common.Filter tag_filter = 4;
  bool has_tag_filter() const;
  private:
  bool _internal_has_tag_filter() const;
  public:
  void clear_tag_filter();
  const ::farm::nurture::core::contracts::common::Filter& tag_filter() const;
  ::farm::nurture::core::contracts::common::Filter* release_tag_filter();
  ::farm::nurture::core::contracts::common::Filter* mutable_tag_filter();
  void set_allocated_tag_filter(::farm::nurture::core::contracts::common::Filter* tag_filter);
  private:
  const ::farm::nurture::core::contracts::common::Filter& _internal_tag_filter() const;
  ::farm::nurture::core::contracts::common::Filter* _internal_mutable_tag_filter();
  public:
  void unsafe_arena_set_allocated_tag_filter(
      ::farm::nurture::core::contracts::common::Filter* tag_filter);
  ::farm::nurture::core::contracts::common::Filter* unsafe_arena_release_tag_filter();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.InsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > places_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::farm::nurture::core::contracts::common::Options* options_;
  ::farm::nurture::core::contracts::common::Filter* tag_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class InsertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.InsertResponse) */ {
 public:
  inline InsertResponse() : InsertResponse(nullptr) {}
  virtual ~InsertResponse();

  InsertResponse(const InsertResponse& from);
  InsertResponse(InsertResponse&& from) noexcept
    : InsertResponse() {
    *this = ::std::move(from);
  }

  inline InsertResponse& operator=(const InsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertResponse& operator=(InsertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertResponse& default_instance();

  static inline const InsertResponse* internal_default_instance() {
    return reinterpret_cast<const InsertResponse*>(
               &_InsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(InsertResponse& a, InsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertResponse* New() const final {
    return CreateMaybeMessage<InsertResponse>(nullptr);
  }

  InsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertResponse& from);
  void MergeFrom(const InsertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.InsertResponse";
  }
  protected:
  explicit InsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertedOrUpdatedPlacesFieldNumber = 2,
    kPlacesWithOverlapsFieldNumber = 4,
    kEnvFieldNumber = 1,
    kInsertedOrUpdatedCountFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.Place inserted_or_updated_places = 2;
  int inserted_or_updated_places_size() const;
  private:
  int _internal_inserted_or_updated_places_size() const;
  public:
  void clear_inserted_or_updated_places();
  ::farm::nurture::core::contracts::common::Place* mutable_inserted_or_updated_places(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
      mutable_inserted_or_updated_places();
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_inserted_or_updated_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* _internal_add_inserted_or_updated_places();
  public:
  const ::farm::nurture::core::contracts::common::Place& inserted_or_updated_places(int index) const;
  ::farm::nurture::core::contracts::common::Place* add_inserted_or_updated_places();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
      inserted_or_updated_places() const;

  // repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
  int places_with_overlaps_size() const;
  private:
  int _internal_places_with_overlaps_size() const;
  public:
  void clear_places_with_overlaps();
  ::farm::nurture::core::contracts::common::OverlappingPlaces* mutable_places_with_overlaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >*
      mutable_places_with_overlaps();
  private:
  const ::farm::nurture::core::contracts::common::OverlappingPlaces& _internal_places_with_overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlaces* _internal_add_places_with_overlaps();
  public:
  const ::farm::nurture::core::contracts::common::OverlappingPlaces& places_with_overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlaces* add_places_with_overlaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >&
      places_with_overlaps() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // int64 inserted_or_updated_count = 3;
  void clear_inserted_or_updated_count();
  ::PROTOBUF_NAMESPACE_ID::int64 inserted_or_updated_count() const;
  void set_inserted_or_updated_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inserted_or_updated_count() const;
  void _internal_set_inserted_or_updated_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.InsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place > inserted_or_updated_places_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces > places_with_overlaps_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::PROTOBUF_NAMESPACE_ID::int64 inserted_or_updated_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class LatLng PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.LatLng) */ {
 public:
  inline LatLng() : LatLng(nullptr) {}
  virtual ~LatLng();

  LatLng(const LatLng& from);
  LatLng(LatLng&& from) noexcept
    : LatLng() {
    *this = ::std::move(from);
  }

  inline LatLng& operator=(const LatLng& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatLng& operator=(LatLng&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatLng& default_instance();

  static inline const LatLng* internal_default_instance() {
    return reinterpret_cast<const LatLng*>(
               &_LatLng_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LatLng& a, LatLng& b) {
    a.Swap(&b);
  }
  inline void Swap(LatLng* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatLng* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatLng* New() const final {
    return CreateMaybeMessage<LatLng>(nullptr);
  }

  LatLng* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatLng>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatLng& from);
  void MergeFrom(const LatLng& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatLng* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.LatLng";
  }
  protected:
  explicit LatLng(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.LatLng)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateReferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateReferenceRequest) */ {
 public:
  inline UpdateReferenceRequest() : UpdateReferenceRequest(nullptr) {}
  virtual ~UpdateReferenceRequest();

  UpdateReferenceRequest(const UpdateReferenceRequest& from);
  UpdateReferenceRequest(UpdateReferenceRequest&& from) noexcept
    : UpdateReferenceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateReferenceRequest& operator=(const UpdateReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReferenceRequest& operator=(UpdateReferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReferenceRequest& default_instance();

  static inline const UpdateReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateReferenceRequest*>(
               &_UpdateReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateReferenceRequest& a, UpdateReferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReferenceRequest* New() const final {
    return CreateMaybeMessage<UpdateReferenceRequest>(nullptr);
  }

  UpdateReferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReferenceRequest& from);
  void MergeFrom(const UpdateReferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateReferenceRequest";
  }
  protected:
  explicit UpdateReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 2,
    kEnvFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.PlaceReference references = 2;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  ::farm::nurture::core::contracts::common::PlaceReference* mutable_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceReference >*
      mutable_references();
  private:
  const ::farm::nurture::core::contracts::common::PlaceReference& _internal_references(int index) const;
  ::farm::nurture::core::contracts::common::PlaceReference* _internal_add_references();
  public:
  const ::farm::nurture::core::contracts::common::PlaceReference& references(int index) const;
  ::farm::nurture::core::contracts::common::PlaceReference* add_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceReference >&
      references() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // .farm.nurture.core.contracts.common.Options options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::farm::nurture::core::contracts::common::Options& options() const;
  ::farm::nurture::core::contracts::common::Options* release_options();
  ::farm::nurture::core::contracts::common::Options* mutable_options();
  void set_allocated_options(::farm::nurture::core::contracts::common::Options* options);
  private:
  const ::farm::nurture::core::contracts::common::Options& _internal_options() const;
  ::farm::nurture::core::contracts::common::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::farm::nurture::core::contracts::common::Options* options);
  ::farm::nurture::core::contracts::common::Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateReferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceReference > references_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::farm::nurture::core::contracts::common::Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateReferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateReferenceResponse) */ {
 public:
  inline UpdateReferenceResponse() : UpdateReferenceResponse(nullptr) {}
  virtual ~UpdateReferenceResponse();

  UpdateReferenceResponse(const UpdateReferenceResponse& from);
  UpdateReferenceResponse(UpdateReferenceResponse&& from) noexcept
    : UpdateReferenceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateReferenceResponse& operator=(const UpdateReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReferenceResponse& operator=(UpdateReferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReferenceResponse& default_instance();

  static inline const UpdateReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateReferenceResponse*>(
               &_UpdateReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UpdateReferenceResponse& a, UpdateReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReferenceResponse* New() const final {
    return CreateMaybeMessage<UpdateReferenceResponse>(nullptr);
  }

  UpdateReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReferenceResponse& from);
  void MergeFrom(const UpdateReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateReferenceResponse";
  }
  protected:
  explicit UpdateReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateRefResultsFieldNumber = 2,
    kEnvFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.UpdateReferenceResult update_ref_results = 2;
  int update_ref_results_size() const;
  private:
  int _internal_update_ref_results_size() const;
  public:
  void clear_update_ref_results();
  ::farm::nurture::core::contracts::common::UpdateReferenceResult* mutable_update_ref_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateReferenceResult >*
      mutable_update_ref_results();
  private:
  const ::farm::nurture::core::contracts::common::UpdateReferenceResult& _internal_update_ref_results(int index) const;
  ::farm::nurture::core::contracts::common::UpdateReferenceResult* _internal_add_update_ref_results();
  public:
  const ::farm::nurture::core::contracts::common::UpdateReferenceResult& update_ref_results(int index) const;
  ::farm::nurture::core::contracts::common::UpdateReferenceResult* add_update_ref_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateReferenceResult >&
      update_ref_results() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateReferenceResult > update_ref_results_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateReferenceResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateReferenceResult) */ {
 public:
  inline UpdateReferenceResult() : UpdateReferenceResult(nullptr) {}
  virtual ~UpdateReferenceResult();

  UpdateReferenceResult(const UpdateReferenceResult& from);
  UpdateReferenceResult(UpdateReferenceResult&& from) noexcept
    : UpdateReferenceResult() {
    *this = ::std::move(from);
  }

  inline UpdateReferenceResult& operator=(const UpdateReferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReferenceResult& operator=(UpdateReferenceResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReferenceResult& default_instance();

  static inline const UpdateReferenceResult* internal_default_instance() {
    return reinterpret_cast<const UpdateReferenceResult*>(
               &_UpdateReferenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateReferenceResult& a, UpdateReferenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReferenceResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReferenceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReferenceResult* New() const final {
    return CreateMaybeMessage<UpdateReferenceResult>(nullptr);
  }

  UpdateReferenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReferenceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReferenceResult& from);
  void MergeFrom(const UpdateReferenceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReferenceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateReferenceResult";
  }
  protected:
  explicit UpdateReferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedPlaceFieldNumber = 1,
    kNewRefsCountFieldNumber = 2,
    kAppendedRefsCountFieldNumber = 3,
    kAddedRefValuesCountFieldNumber = 4,
    kDeletedRefsCountFieldNumber = 5,
    kDeletedRefValuesCountFieldNumber = 6,
  };
  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  bool has_updated_place() const;
  private:
  bool _internal_has_updated_place() const;
  public:
  void clear_updated_place();
  const ::farm::nurture::core::contracts::common::Place& updated_place() const;
  ::farm::nurture::core::contracts::common::Place* release_updated_place();
  ::farm::nurture::core::contracts::common::Place* mutable_updated_place();
  void set_allocated_updated_place(::farm::nurture::core::contracts::common::Place* updated_place);
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_updated_place() const;
  ::farm::nurture::core::contracts::common::Place* _internal_mutable_updated_place();
  public:
  void unsafe_arena_set_allocated_updated_place(
      ::farm::nurture::core::contracts::common::Place* updated_place);
  ::farm::nurture::core::contracts::common::Place* unsafe_arena_release_updated_place();

  // int32 new_refs_count = 2;
  void clear_new_refs_count();
  ::PROTOBUF_NAMESPACE_ID::int32 new_refs_count() const;
  void set_new_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_refs_count() const;
  void _internal_set_new_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 appended_refs_count = 3;
  void clear_appended_refs_count();
  ::PROTOBUF_NAMESPACE_ID::int32 appended_refs_count() const;
  void set_appended_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appended_refs_count() const;
  void _internal_set_appended_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 added_ref_values_count = 4;
  void clear_added_ref_values_count();
  ::PROTOBUF_NAMESPACE_ID::int32 added_ref_values_count() const;
  void set_added_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_added_ref_values_count() const;
  void _internal_set_added_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deleted_refs_count = 5;
  void clear_deleted_refs_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_refs_count() const;
  void set_deleted_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deleted_refs_count() const;
  void _internal_set_deleted_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deleted_ref_values_count = 6;
  void clear_deleted_ref_values_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_ref_values_count() const;
  void set_deleted_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deleted_ref_values_count() const;
  void _internal_set_deleted_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateReferenceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::Place* updated_place_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_refs_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 appended_refs_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 added_ref_values_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_refs_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_ref_values_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlaceReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.PlaceReference) */ {
 public:
  inline PlaceReference() : PlaceReference(nullptr) {}
  virtual ~PlaceReference();

  PlaceReference(const PlaceReference& from);
  PlaceReference(PlaceReference&& from) noexcept
    : PlaceReference() {
    *this = ::std::move(from);
  }

  inline PlaceReference& operator=(const PlaceReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceReference& operator=(PlaceReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceReference& default_instance();

  static inline const PlaceReference* internal_default_instance() {
    return reinterpret_cast<const PlaceReference*>(
               &_PlaceReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PlaceReference& a, PlaceReference& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceReference* New() const final {
    return CreateMaybeMessage<PlaceReference>(nullptr);
  }

  PlaceReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceReference& from);
  void MergeFrom(const PlaceReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.PlaceReference";
  }
  protected:
  explicit PlaceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplaceRefValuesFieldNumber = 2,
    kDeleteReferencesFieldNumber = 3,
    kDeleteRefValuesFieldNumber = 4,
    kAppendRefValuesFieldNumber = 5,
    kPlaceIdFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute replace_ref_values = 2;
  int replace_ref_values_size() const;
  private:
  int _internal_replace_ref_values_size() const;
  public:
  void clear_replace_ref_values();
  ::farm::nurture::core::contracts::common::ReferenceAttribute* mutable_replace_ref_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
      mutable_replace_ref_values();
  private:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& _internal_replace_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* _internal_add_replace_ref_values();
  public:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& replace_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* add_replace_ref_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
      replace_ref_values() const;

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_references = 3;
  int delete_references_size() const;
  private:
  int _internal_delete_references_size() const;
  public:
  void clear_delete_references();
  ::farm::nurture::core::contracts::common::ReferenceAttribute* mutable_delete_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
      mutable_delete_references();
  private:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& _internal_delete_references(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* _internal_add_delete_references();
  public:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& delete_references(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* add_delete_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
      delete_references() const;

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_ref_values = 4;
  int delete_ref_values_size() const;
  private:
  int _internal_delete_ref_values_size() const;
  public:
  void clear_delete_ref_values();
  ::farm::nurture::core::contracts::common::ReferenceAttribute* mutable_delete_ref_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
      mutable_delete_ref_values();
  private:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& _internal_delete_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* _internal_add_delete_ref_values();
  public:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& delete_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* add_delete_ref_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
      delete_ref_values() const;

  // repeated .farm.nurture.core.contracts.common.ReferenceAttribute append_ref_values = 5;
  int append_ref_values_size() const;
  private:
  int _internal_append_ref_values_size() const;
  public:
  void clear_append_ref_values();
  ::farm::nurture::core::contracts::common::ReferenceAttribute* mutable_append_ref_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
      mutable_append_ref_values();
  private:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& _internal_append_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* _internal_add_append_ref_values();
  public:
  const ::farm::nurture::core::contracts::common::ReferenceAttribute& append_ref_values(int index) const;
  ::farm::nurture::core::contracts::common::ReferenceAttribute* add_append_ref_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
      append_ref_values() const;

  // int64 place_id = 1;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.PlaceReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute > replace_ref_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute > delete_references_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute > delete_ref_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute > append_ref_values_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateTagsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateTagsRequest) */ {
 public:
  inline UpdateTagsRequest() : UpdateTagsRequest(nullptr) {}
  virtual ~UpdateTagsRequest();

  UpdateTagsRequest(const UpdateTagsRequest& from);
  UpdateTagsRequest(UpdateTagsRequest&& from) noexcept
    : UpdateTagsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTagsRequest& operator=(const UpdateTagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTagsRequest& operator=(UpdateTagsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTagsRequest& default_instance();

  static inline const UpdateTagsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTagsRequest*>(
               &_UpdateTagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UpdateTagsRequest& a, UpdateTagsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTagsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTagsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTagsRequest* New() const final {
    return CreateMaybeMessage<UpdateTagsRequest>(nullptr);
  }

  UpdateTagsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTagsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTagsRequest& from);
  void MergeFrom(const UpdateTagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTagsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateTagsRequest";
  }
  protected:
  explicit UpdateTagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kEnvFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.UpdatePlaceTags tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::farm::nurture::core::contracts::common::UpdatePlaceTags* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdatePlaceTags >*
      mutable_tags();
  private:
  const ::farm::nurture::core::contracts::common::UpdatePlaceTags& _internal_tags(int index) const;
  ::farm::nurture::core::contracts::common::UpdatePlaceTags* _internal_add_tags();
  public:
  const ::farm::nurture::core::contracts::common::UpdatePlaceTags& tags(int index) const;
  ::farm::nurture::core::contracts::common::UpdatePlaceTags* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdatePlaceTags >&
      tags() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // .farm.nurture.core.contracts.common.Options options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::farm::nurture::core::contracts::common::Options& options() const;
  ::farm::nurture::core::contracts::common::Options* release_options();
  ::farm::nurture::core::contracts::common::Options* mutable_options();
  void set_allocated_options(::farm::nurture::core::contracts::common::Options* options);
  private:
  const ::farm::nurture::core::contracts::common::Options& _internal_options() const;
  ::farm::nurture::core::contracts::common::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::farm::nurture::core::contracts::common::Options* options);
  ::farm::nurture::core::contracts::common::Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateTagsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdatePlaceTags > tags_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  ::farm::nurture::core::contracts::common::Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlaceTags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdatePlaceTags) */ {
 public:
  inline UpdatePlaceTags() : UpdatePlaceTags(nullptr) {}
  virtual ~UpdatePlaceTags();

  UpdatePlaceTags(const UpdatePlaceTags& from);
  UpdatePlaceTags(UpdatePlaceTags&& from) noexcept
    : UpdatePlaceTags() {
    *this = ::std::move(from);
  }

  inline UpdatePlaceTags& operator=(const UpdatePlaceTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlaceTags& operator=(UpdatePlaceTags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlaceTags& default_instance();

  static inline const UpdatePlaceTags* internal_default_instance() {
    return reinterpret_cast<const UpdatePlaceTags*>(
               &_UpdatePlaceTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdatePlaceTags& a, UpdatePlaceTags& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlaceTags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlaceTags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlaceTags* New() const final {
    return CreateMaybeMessage<UpdatePlaceTags>(nullptr);
  }

  UpdatePlaceTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlaceTags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlaceTags& from);
  void MergeFrom(const UpdatePlaceTags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlaceTags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdatePlaceTags";
  }
  protected:
  explicit UpdatePlaceTags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplaceTagValuesFieldNumber = 2,
    kDeleteTagsFieldNumber = 3,
    kDeleteTagValuesFieldNumber = 4,
    kAppendTagValuesFieldNumber = 5,
    kPlaceIdFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.PlaceTag replace_tag_values = 2;
  int replace_tag_values_size() const;
  private:
  int _internal_replace_tag_values_size() const;
  public:
  void clear_replace_tag_values();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_replace_tag_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_replace_tag_values();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_replace_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_replace_tag_values();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& replace_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_replace_tag_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      replace_tag_values() const;

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tags = 3;
  int delete_tags_size() const;
  private:
  int _internal_delete_tags_size() const;
  public:
  void clear_delete_tags();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_delete_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_delete_tags();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_delete_tags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_delete_tags();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& delete_tags(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_delete_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      delete_tags() const;

  // repeated .farm.nurture.core.contracts.common.PlaceTag delete_tag_values = 4;
  int delete_tag_values_size() const;
  private:
  int _internal_delete_tag_values_size() const;
  public:
  void clear_delete_tag_values();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_delete_tag_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_delete_tag_values();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_delete_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_delete_tag_values();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& delete_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_delete_tag_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      delete_tag_values() const;

  // repeated .farm.nurture.core.contracts.common.PlaceTag append_tag_values = 5;
  int append_tag_values_size() const;
  private:
  int _internal_append_tag_values_size() const;
  public:
  void clear_append_tag_values();
  ::farm::nurture::core::contracts::common::PlaceTag* mutable_append_tag_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
      mutable_append_tag_values();
  private:
  const ::farm::nurture::core::contracts::common::PlaceTag& _internal_append_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* _internal_add_append_tag_values();
  public:
  const ::farm::nurture::core::contracts::common::PlaceTag& append_tag_values(int index) const;
  ::farm::nurture::core::contracts::common::PlaceTag* add_append_tag_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
      append_tag_values() const;

  // int64 place_id = 1;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdatePlaceTags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > replace_tag_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > delete_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > delete_tag_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag > append_tag_values_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateTagsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateTagsResponse) */ {
 public:
  inline UpdateTagsResponse() : UpdateTagsResponse(nullptr) {}
  virtual ~UpdateTagsResponse();

  UpdateTagsResponse(const UpdateTagsResponse& from);
  UpdateTagsResponse(UpdateTagsResponse&& from) noexcept
    : UpdateTagsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTagsResponse& operator=(const UpdateTagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTagsResponse& operator=(UpdateTagsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTagsResponse& default_instance();

  static inline const UpdateTagsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTagsResponse*>(
               &_UpdateTagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateTagsResponse& a, UpdateTagsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTagsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTagsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTagsResponse* New() const final {
    return CreateMaybeMessage<UpdateTagsResponse>(nullptr);
  }

  UpdateTagsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTagsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTagsResponse& from);
  void MergeFrom(const UpdateTagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTagsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateTagsResponse";
  }
  protected:
  explicit UpdateTagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateTagResultsFieldNumber = 2,
    kEnvFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.UpdateTagResult update_tag_results = 2;
  int update_tag_results_size() const;
  private:
  int _internal_update_tag_results_size() const;
  public:
  void clear_update_tag_results();
  ::farm::nurture::core::contracts::common::UpdateTagResult* mutable_update_tag_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateTagResult >*
      mutable_update_tag_results();
  private:
  const ::farm::nurture::core::contracts::common::UpdateTagResult& _internal_update_tag_results(int index) const;
  ::farm::nurture::core::contracts::common::UpdateTagResult* _internal_add_update_tag_results();
  public:
  const ::farm::nurture::core::contracts::common::UpdateTagResult& update_tag_results(int index) const;
  ::farm::nurture::core::contracts::common::UpdateTagResult* add_update_tag_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateTagResult >&
      update_tag_results() const;

  // .farm.nurture.core.contracts.common.Environment env = 1;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const ::farm::nurture::core::contracts::common::Environment& env() const;
  ::farm::nurture::core::contracts::common::Environment* release_env();
  ::farm::nurture::core::contracts::common::Environment* mutable_env();
  void set_allocated_env(::farm::nurture::core::contracts::common::Environment* env);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_env() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_env();
  public:
  void unsafe_arena_set_allocated_env(
      ::farm::nurture::core::contracts::common::Environment* env);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_env();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateTagsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateTagResult > update_tag_results_;
  ::farm::nurture::core::contracts::common::Environment* env_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UpdateTagResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.UpdateTagResult) */ {
 public:
  inline UpdateTagResult() : UpdateTagResult(nullptr) {}
  virtual ~UpdateTagResult();

  UpdateTagResult(const UpdateTagResult& from);
  UpdateTagResult(UpdateTagResult&& from) noexcept
    : UpdateTagResult() {
    *this = ::std::move(from);
  }

  inline UpdateTagResult& operator=(const UpdateTagResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTagResult& operator=(UpdateTagResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTagResult& default_instance();

  static inline const UpdateTagResult* internal_default_instance() {
    return reinterpret_cast<const UpdateTagResult*>(
               &_UpdateTagResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UpdateTagResult& a, UpdateTagResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTagResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTagResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTagResult* New() const final {
    return CreateMaybeMessage<UpdateTagResult>(nullptr);
  }

  UpdateTagResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTagResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTagResult& from);
  void MergeFrom(const UpdateTagResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTagResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.UpdateTagResult";
  }
  protected:
  explicit UpdateTagResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedPlaceFieldNumber = 1,
    kNewTagsCountFieldNumber = 2,
    kAppendedTagsCountFieldNumber = 3,
    kAddedTagValuesCountFieldNumber = 4,
    kDeletedTagsCountFieldNumber = 5,
    kDeletedTagValuesCountFieldNumber = 6,
  };
  // .farm.nurture.core.contracts.common.Place updated_place = 1;
  bool has_updated_place() const;
  private:
  bool _internal_has_updated_place() const;
  public:
  void clear_updated_place();
  const ::farm::nurture::core::contracts::common::Place& updated_place() const;
  ::farm::nurture::core::contracts::common::Place* release_updated_place();
  ::farm::nurture::core::contracts::common::Place* mutable_updated_place();
  void set_allocated_updated_place(::farm::nurture::core::contracts::common::Place* updated_place);
  private:
  const ::farm::nurture::core::contracts::common::Place& _internal_updated_place() const;
  ::farm::nurture::core::contracts::common::Place* _internal_mutable_updated_place();
  public:
  void unsafe_arena_set_allocated_updated_place(
      ::farm::nurture::core::contracts::common::Place* updated_place);
  ::farm::nurture::core::contracts::common::Place* unsafe_arena_release_updated_place();

  // int32 new_tags_count = 2;
  void clear_new_tags_count();
  ::PROTOBUF_NAMESPACE_ID::int32 new_tags_count() const;
  void set_new_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_tags_count() const;
  void _internal_set_new_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 appended_tags_count = 3;
  void clear_appended_tags_count();
  ::PROTOBUF_NAMESPACE_ID::int32 appended_tags_count() const;
  void set_appended_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appended_tags_count() const;
  void _internal_set_appended_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 added_tag_values_count = 4;
  void clear_added_tag_values_count();
  ::PROTOBUF_NAMESPACE_ID::int32 added_tag_values_count() const;
  void set_added_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_added_tag_values_count() const;
  void _internal_set_added_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deleted_tags_count = 5;
  void clear_deleted_tags_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_tags_count() const;
  void set_deleted_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deleted_tags_count() const;
  void _internal_set_deleted_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deleted_tag_values_count = 6;
  void clear_deleted_tag_values_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_tag_values_count() const;
  void set_deleted_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deleted_tag_values_count() const;
  void _internal_set_deleted_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.UpdateTagResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::Place* updated_place_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_tags_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 appended_tags_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 added_tag_values_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_tags_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 deleted_tag_values_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlaceTagValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.PlaceTagValue) */ {
 public:
  inline PlaceTagValue() : PlaceTagValue(nullptr) {}
  virtual ~PlaceTagValue();

  PlaceTagValue(const PlaceTagValue& from);
  PlaceTagValue(PlaceTagValue&& from) noexcept
    : PlaceTagValue() {
    *this = ::std::move(from);
  }

  inline PlaceTagValue& operator=(const PlaceTagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceTagValue& operator=(PlaceTagValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceTagValue& default_instance();

  static inline const PlaceTagValue* internal_default_instance() {
    return reinterpret_cast<const PlaceTagValue*>(
               &_PlaceTagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PlaceTagValue& a, PlaceTagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceTagValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceTagValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceTagValue* New() const final {
    return CreateMaybeMessage<PlaceTagValue>(nullptr);
  }

  PlaceTagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceTagValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceTagValue& from);
  void MergeFrom(const PlaceTagValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceTagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.PlaceTagValue";
  }
  protected:
  explicit PlaceTagValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValuesFieldNumber = 2,
    kStringValuesFieldNumber = 3,
    kBoolValuesFieldNumber = 4,
    kInt64ValuesFieldNumber = 5,
    kInt32ValuesFieldNumber = 6,
    kNsvPlaceIdValuesFieldNumber = 7,
    kValueTypeFieldNumber = 1,
  };
  // repeated double float_values = 2;
  int float_values_size() const;
  private:
  int _internal_float_values_size() const;
  public:
  void clear_float_values();
  private:
  double _internal_float_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_float_values() const;
  void _internal_add_float_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_float_values();
  public:
  double float_values(int index) const;
  void set_float_values(int index, double value);
  void add_float_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      float_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_float_values();

  // repeated string string_values = 3;
  int string_values_size() const;
  private:
  int _internal_string_values_size() const;
  public:
  void clear_string_values();
  const std::string& string_values(int index) const;
  std::string* mutable_string_values(int index);
  void set_string_values(int index, const std::string& value);
  void set_string_values(int index, std::string&& value);
  void set_string_values(int index, const char* value);
  void set_string_values(int index, const char* value, size_t size);
  std::string* add_string_values();
  void add_string_values(const std::string& value);
  void add_string_values(std::string&& value);
  void add_string_values(const char* value);
  void add_string_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_values();
  private:
  const std::string& _internal_string_values(int index) const;
  std::string* _internal_add_string_values();
  public:

  // repeated bool bool_values = 4;
  int bool_values_size() const;
  private:
  int _internal_bool_values_size() const;
  public:
  void clear_bool_values();
  private:
  bool _internal_bool_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_values() const;
  void _internal_add_bool_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_values();
  public:
  bool bool_values(int index) const;
  void set_bool_values(int index, bool value);
  void add_bool_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_values();

  // repeated int64 int64_values = 5;
  int int64_values_size() const;
  private:
  int _internal_int64_values_size() const;
  public:
  void clear_int64_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_values() const;
  void _internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_values(int index) const;
  void set_int64_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_values();

  // repeated int32 int32_values = 6;
  int int32_values_size() const;
  private:
  int _internal_int32_values_size() const;
  public:
  void clear_int32_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_values() const;
  void _internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_values(int index) const;
  void set_int32_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_values();

  // repeated .farm.nurture.core.contracts.common.NSVPlaceId nsv_place_id_values = 7;
  int nsv_place_id_values_size() const;
  private:
  int _internal_nsv_place_id_values_size() const;
  public:
  void clear_nsv_place_id_values();
  ::farm::nurture::core::contracts::common::NSVPlaceId* mutable_nsv_place_id_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::NSVPlaceId >*
      mutable_nsv_place_id_values();
  private:
  const ::farm::nurture::core::contracts::common::NSVPlaceId& _internal_nsv_place_id_values(int index) const;
  ::farm::nurture::core::contracts::common::NSVPlaceId* _internal_add_nsv_place_id_values();
  public:
  const ::farm::nurture::core::contracts::common::NSVPlaceId& nsv_place_id_values(int index) const;
  ::farm::nurture::core::contracts::common::NSVPlaceId* add_nsv_place_id_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::NSVPlaceId >&
      nsv_place_id_values() const;

  // .farm.nurture.core.contracts.common.ValueType value_type = 1;
  void clear_value_type();
  ::farm::nurture::core::contracts::common::ValueType value_type() const;
  void set_value_type(::farm::nurture::core::contracts::common::ValueType value);
  private:
  ::farm::nurture::core::contracts::common::ValueType _internal_value_type() const;
  void _internal_set_value_type(::farm::nurture::core::contracts::common::ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.PlaceTagValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > float_values_;
  mutable std::atomic<int> _float_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_values_;
  mutable std::atomic<int> _bool_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_values_;
  mutable std::atomic<int> _int64_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_values_;
  mutable std::atomic<int> _int32_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::NSVPlaceId > nsv_place_id_values_;
  int value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class OverlappingPlace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.OverlappingPlace) */ {
 public:
  inline OverlappingPlace() : OverlappingPlace(nullptr) {}
  virtual ~OverlappingPlace();

  OverlappingPlace(const OverlappingPlace& from);
  OverlappingPlace(OverlappingPlace&& from) noexcept
    : OverlappingPlace() {
    *this = ::std::move(from);
  }

  inline OverlappingPlace& operator=(const OverlappingPlace& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlappingPlace& operator=(OverlappingPlace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OverlappingPlace& default_instance();

  static inline const OverlappingPlace* internal_default_instance() {
    return reinterpret_cast<const OverlappingPlace*>(
               &_OverlappingPlace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(OverlappingPlace& a, OverlappingPlace& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlappingPlace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlappingPlace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OverlappingPlace* New() const final {
    return CreateMaybeMessage<OverlappingPlace>(nullptr);
  }

  OverlappingPlace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OverlappingPlace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OverlappingPlace& from);
  void MergeFrom(const OverlappingPlace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlappingPlace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.OverlappingPlace";
  }
  protected:
  explicit OverlappingPlace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 2,
    kIntersectingGeometryFieldNumber = 3,
    kPlaceIdFieldNumber = 1,
  };
  // string source_id = 2;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string intersecting_geometry = 3;
  void clear_intersecting_geometry();
  const std::string& intersecting_geometry() const;
  void set_intersecting_geometry(const std::string& value);
  void set_intersecting_geometry(std::string&& value);
  void set_intersecting_geometry(const char* value);
  void set_intersecting_geometry(const char* value, size_t size);
  std::string* mutable_intersecting_geometry();
  std::string* release_intersecting_geometry();
  void set_allocated_intersecting_geometry(std::string* intersecting_geometry);
  private:
  const std::string& _internal_intersecting_geometry() const;
  void _internal_set_intersecting_geometry(const std::string& value);
  std::string* _internal_mutable_intersecting_geometry();
  public:

  // int64 place_id = 1;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.OverlappingPlace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intersecting_geometry_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class OverlappingPlaces PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.OverlappingPlaces) */ {
 public:
  inline OverlappingPlaces() : OverlappingPlaces(nullptr) {}
  virtual ~OverlappingPlaces();

  OverlappingPlaces(const OverlappingPlaces& from);
  OverlappingPlaces(OverlappingPlaces&& from) noexcept
    : OverlappingPlaces() {
    *this = ::std::move(from);
  }

  inline OverlappingPlaces& operator=(const OverlappingPlaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlappingPlaces& operator=(OverlappingPlaces&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OverlappingPlaces& default_instance();

  static inline const OverlappingPlaces* internal_default_instance() {
    return reinterpret_cast<const OverlappingPlaces*>(
               &_OverlappingPlaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(OverlappingPlaces& a, OverlappingPlaces& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlappingPlaces* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlappingPlaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OverlappingPlaces* New() const final {
    return CreateMaybeMessage<OverlappingPlaces>(nullptr);
  }

  OverlappingPlaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OverlappingPlaces>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OverlappingPlaces& from);
  void MergeFrom(const OverlappingPlaces& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlappingPlaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.OverlappingPlaces";
  }
  protected:
  explicit OverlappingPlaces(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlapsFieldNumber = 3,
    kSourceIdFieldNumber = 2,
    kPlaceIdFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.OverlappingPlace overlaps = 3;
  int overlaps_size() const;
  private:
  int _internal_overlaps_size() const;
  public:
  void clear_overlaps();
  ::farm::nurture::core::contracts::common::OverlappingPlace* mutable_overlaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlace >*
      mutable_overlaps();
  private:
  const ::farm::nurture::core::contracts::common::OverlappingPlace& _internal_overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlace* _internal_add_overlaps();
  public:
  const ::farm::nurture::core::contracts::common::OverlappingPlace& overlaps(int index) const;
  ::farm::nurture::core::contracts::common::OverlappingPlace* add_overlaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlace >&
      overlaps() const;

  // string source_id = 2;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // int64 place_id = 1;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.OverlappingPlaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlace > overlaps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Validation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.Validation) */ {
 public:
  inline Validation() : Validation(nullptr) {}
  virtual ~Validation();

  Validation(const Validation& from);
  Validation(Validation&& from) noexcept
    : Validation() {
    *this = ::std::move(from);
  }

  inline Validation& operator=(const Validation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validation& operator=(Validation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Validation& default_instance();

  static inline const Validation* internal_default_instance() {
    return reinterpret_cast<const Validation*>(
               &_Validation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Validation& a, Validation& b) {
    a.Swap(&b);
  }
  inline void Swap(Validation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Validation* New() const final {
    return CreateMaybeMessage<Validation>(nullptr);
  }

  Validation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Validation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Validation& from);
  void MergeFrom(const Validation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.Validation";
  }
  protected:
  explicit Validation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ValidationName name = 1;
  void clear_name();
  ::farm::nurture::core::contracts::common::ValidationName name() const;
  void set_name(::farm::nurture::core::contracts::common::ValidationName value);
  private:
  ::farm::nurture::core::contracts::common::ValidationName _internal_name() const;
  void _internal_set_name(::farm::nurture::core::contracts::common::ValidationName value);
  public:

  // .farm.nurture.core.contracts.common.ValidationType type = 2;
  void clear_type();
  ::farm::nurture::core::contracts::common::ValidationType type() const;
  void set_type(::farm::nurture::core::contracts::common::ValidationType value);
  private:
  ::farm::nurture::core::contracts::common::ValidationType _internal_type() const;
  void _internal_set_type(::farm::nurture::core::contracts::common::ValidationType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.Validation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RasterDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RasterDataRequest) */ {
 public:
  inline RasterDataRequest() : RasterDataRequest(nullptr) {}
  virtual ~RasterDataRequest();

  RasterDataRequest(const RasterDataRequest& from);
  RasterDataRequest(RasterDataRequest&& from) noexcept
    : RasterDataRequest() {
    *this = ::std::move(from);
  }

  inline RasterDataRequest& operator=(const RasterDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RasterDataRequest& operator=(RasterDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RasterDataRequest& default_instance();

  static inline const RasterDataRequest* internal_default_instance() {
    return reinterpret_cast<const RasterDataRequest*>(
               &_RasterDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RasterDataRequest& a, RasterDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RasterDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RasterDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RasterDataRequest* New() const final {
    return CreateMaybeMessage<RasterDataRequest>(nullptr);
  }

  RasterDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RasterDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RasterDataRequest& from);
  void MergeFrom(const RasterDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RasterDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RasterDataRequest";
  }
  protected:
  explicit RasterDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapTilesFieldNumber = 2,
    kEnvironmentFieldNumber = 1,
    kTimeSlotFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.common.MapTile map_tiles = 2;
  int map_tiles_size() const;
  private:
  int _internal_map_tiles_size() const;
  public:
  void clear_map_tiles();
  ::farm::nurture::core::contracts::common::MapTile* mutable_map_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >*
      mutable_map_tiles();
  private:
  const ::farm::nurture::core::contracts::common::MapTile& _internal_map_tiles(int index) const;
  ::farm::nurture::core::contracts::common::MapTile* _internal_add_map_tiles();
  public:
  const ::farm::nurture::core::contracts::common::MapTile& map_tiles(int index) const;
  ::farm::nurture::core::contracts::common::MapTile* add_map_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >&
      map_tiles() const;

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::farm::nurture::core::contracts::common::Environment& environment() const;
  ::farm::nurture::core::contracts::common::Environment* release_environment();
  ::farm::nurture::core::contracts::common::Environment* mutable_environment();
  void set_allocated_environment(::farm::nurture::core::contracts::common::Environment* environment);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_environment() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::farm::nurture::core::contracts::common::Environment* environment);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_environment();

  // .farm.nurture.core.contracts.common.TimeSlot time_slot = 3;
  bool has_time_slot() const;
  private:
  bool _internal_has_time_slot() const;
  public:
  void clear_time_slot();
  const ::farm::nurture::core::contracts::common::TimeSlot& time_slot() const;
  ::farm::nurture::core::contracts::common::TimeSlot* release_time_slot();
  ::farm::nurture::core::contracts::common::TimeSlot* mutable_time_slot();
  void set_allocated_time_slot(::farm::nurture::core::contracts::common::TimeSlot* time_slot);
  private:
  const ::farm::nurture::core::contracts::common::TimeSlot& _internal_time_slot() const;
  ::farm::nurture::core::contracts::common::TimeSlot* _internal_mutable_time_slot();
  public:
  void unsafe_arena_set_allocated_time_slot(
      ::farm::nurture::core::contracts::common::TimeSlot* time_slot);
  ::farm::nurture::core::contracts::common::TimeSlot* unsafe_arena_release_time_slot();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RasterDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile > map_tiles_;
  ::farm::nurture::core::contracts::common::Environment* environment_;
  ::farm::nurture::core::contracts::common::TimeSlot* time_slot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RasterDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RasterDataResponse) */ {
 public:
  inline RasterDataResponse() : RasterDataResponse(nullptr) {}
  virtual ~RasterDataResponse();

  RasterDataResponse(const RasterDataResponse& from);
  RasterDataResponse(RasterDataResponse&& from) noexcept
    : RasterDataResponse() {
    *this = ::std::move(from);
  }

  inline RasterDataResponse& operator=(const RasterDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RasterDataResponse& operator=(RasterDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RasterDataResponse& default_instance();

  static inline const RasterDataResponse* internal_default_instance() {
    return reinterpret_cast<const RasterDataResponse*>(
               &_RasterDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RasterDataResponse& a, RasterDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RasterDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RasterDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RasterDataResponse* New() const final {
    return CreateMaybeMessage<RasterDataResponse>(nullptr);
  }

  RasterDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RasterDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RasterDataResponse& from);
  void MergeFrom(const RasterDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RasterDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RasterDataResponse";
  }
  protected:
  explicit RasterDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreSignedUrlsFieldNumber = 2,
    kEnvironmentFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.common.MapTilesToPreSignedUrl pre_signed_urls = 2;
  int pre_signed_urls_size() const;
  private:
  int _internal_pre_signed_urls_size() const;
  public:
  void clear_pre_signed_urls();
  ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* mutable_pre_signed_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >*
      mutable_pre_signed_urls();
  private:
  const ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl& _internal_pre_signed_urls(int index) const;
  ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* _internal_add_pre_signed_urls();
  public:
  const ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl& pre_signed_urls(int index) const;
  ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* add_pre_signed_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >&
      pre_signed_urls() const;

  // .farm.nurture.core.contracts.common.Environment environment = 1;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::farm::nurture::core::contracts::common::Environment& environment() const;
  ::farm::nurture::core::contracts::common::Environment* release_environment();
  ::farm::nurture::core::contracts::common::Environment* mutable_environment();
  void set_allocated_environment(::farm::nurture::core::contracts::common::Environment* environment);
  private:
  const ::farm::nurture::core::contracts::common::Environment& _internal_environment() const;
  ::farm::nurture::core::contracts::common::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::farm::nurture::core::contracts::common::Environment* environment);
  ::farm::nurture::core::contracts::common::Environment* unsafe_arena_release_environment();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RasterDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl > pre_signed_urls_;
  ::farm::nurture::core::contracts::common::Environment* environment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class MapTilesToPreSignedUrl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl) */ {
 public:
  inline MapTilesToPreSignedUrl() : MapTilesToPreSignedUrl(nullptr) {}
  virtual ~MapTilesToPreSignedUrl();

  MapTilesToPreSignedUrl(const MapTilesToPreSignedUrl& from);
  MapTilesToPreSignedUrl(MapTilesToPreSignedUrl&& from) noexcept
    : MapTilesToPreSignedUrl() {
    *this = ::std::move(from);
  }

  inline MapTilesToPreSignedUrl& operator=(const MapTilesToPreSignedUrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTilesToPreSignedUrl& operator=(MapTilesToPreSignedUrl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapTilesToPreSignedUrl& default_instance();

  static inline const MapTilesToPreSignedUrl* internal_default_instance() {
    return reinterpret_cast<const MapTilesToPreSignedUrl*>(
               &_MapTilesToPreSignedUrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MapTilesToPreSignedUrl& a, MapTilesToPreSignedUrl& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTilesToPreSignedUrl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTilesToPreSignedUrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTilesToPreSignedUrl* New() const final {
    return CreateMaybeMessage<MapTilesToPreSignedUrl>(nullptr);
  }

  MapTilesToPreSignedUrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTilesToPreSignedUrl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapTilesToPreSignedUrl& from);
  void MergeFrom(const MapTilesToPreSignedUrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTilesToPreSignedUrl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.MapTilesToPreSignedUrl";
  }
  protected:
  explicit MapTilesToPreSignedUrl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreSignedUrlFieldNumber = 2,
    kMapTileFieldNumber = 1,
  };
  // string pre_signed_url = 2;
  void clear_pre_signed_url();
  const std::string& pre_signed_url() const;
  void set_pre_signed_url(const std::string& value);
  void set_pre_signed_url(std::string&& value);
  void set_pre_signed_url(const char* value);
  void set_pre_signed_url(const char* value, size_t size);
  std::string* mutable_pre_signed_url();
  std::string* release_pre_signed_url();
  void set_allocated_pre_signed_url(std::string* pre_signed_url);
  private:
  const std::string& _internal_pre_signed_url() const;
  void _internal_set_pre_signed_url(const std::string& value);
  std::string* _internal_mutable_pre_signed_url();
  public:

  // .farm.nurture.core.contracts.common.MapTile map_tile = 1;
  bool has_map_tile() const;
  private:
  bool _internal_has_map_tile() const;
  public:
  void clear_map_tile();
  const ::farm::nurture::core::contracts::common::MapTile& map_tile() const;
  ::farm::nurture::core::contracts::common::MapTile* release_map_tile();
  ::farm::nurture::core::contracts::common::MapTile* mutable_map_tile();
  void set_allocated_map_tile(::farm::nurture::core::contracts::common::MapTile* map_tile);
  private:
  const ::farm::nurture::core::contracts::common::MapTile& _internal_map_tile() const;
  ::farm::nurture::core::contracts::common::MapTile* _internal_mutable_map_tile();
  public:
  void unsafe_arena_set_allocated_map_tile(
      ::farm::nurture::core::contracts::common::MapTile* map_tile);
  ::farm::nurture::core::contracts::common::MapTile* unsafe_arena_release_map_tile();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_signed_url_;
  ::farm::nurture::core::contracts::common::MapTile* map_tile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RegisterSourceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.RegisterSourceConfig) */ {
 public:
  inline RegisterSourceConfig() : RegisterSourceConfig(nullptr) {}
  virtual ~RegisterSourceConfig();

  RegisterSourceConfig(const RegisterSourceConfig& from);
  RegisterSourceConfig(RegisterSourceConfig&& from) noexcept
    : RegisterSourceConfig() {
    *this = ::std::move(from);
  }

  inline RegisterSourceConfig& operator=(const RegisterSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterSourceConfig& operator=(RegisterSourceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterSourceConfig& default_instance();

  static inline const RegisterSourceConfig* internal_default_instance() {
    return reinterpret_cast<const RegisterSourceConfig*>(
               &_RegisterSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(RegisterSourceConfig& a, RegisterSourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterSourceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterSourceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterSourceConfig* New() const final {
    return CreateMaybeMessage<RegisterSourceConfig>(nullptr);
  }

  RegisterSourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterSourceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterSourceConfig& from);
  void MergeFrom(const RegisterSourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterSourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.RegisterSourceConfig";
  }
  protected:
  explicit RegisterSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDirectoryFieldNumber = 6,
    kValidTimeFieldNumber = 5,
    kDateRangeFieldNumber = 7,
    kCloudStoreFieldNumber = 1,
    kUrlBuilderFieldNumber = 2,
    kSatelliteFieldNumber = 3,
    kBandFieldNumber = 4,
  };
  // string base_directory = 6;
  void clear_base_directory();
  const std::string& base_directory() const;
  void set_base_directory(const std::string& value);
  void set_base_directory(std::string&& value);
  void set_base_directory(const char* value);
  void set_base_directory(const char* value, size_t size);
  std::string* mutable_base_directory();
  std::string* release_base_directory();
  void set_allocated_base_directory(std::string* base_directory);
  private:
  const std::string& _internal_base_directory() const;
  void _internal_set_base_directory(const std::string& value);
  std::string* _internal_mutable_base_directory();
  public:

  // .farm.nurture.core.contracts.common.TimeRange valid_time = 5;
  bool has_valid_time() const;
  private:
  bool _internal_has_valid_time() const;
  public:
  void clear_valid_time();
  const ::farm::nurture::core::contracts::common::TimeRange& valid_time() const;
  ::farm::nurture::core::contracts::common::TimeRange* release_valid_time();
  ::farm::nurture::core::contracts::common::TimeRange* mutable_valid_time();
  void set_allocated_valid_time(::farm::nurture::core::contracts::common::TimeRange* valid_time);
  private:
  const ::farm::nurture::core::contracts::common::TimeRange& _internal_valid_time() const;
  ::farm::nurture::core::contracts::common::TimeRange* _internal_mutable_valid_time();
  public:
  void unsafe_arena_set_allocated_valid_time(
      ::farm::nurture::core::contracts::common::TimeRange* valid_time);
  ::farm::nurture::core::contracts::common::TimeRange* unsafe_arena_release_valid_time();

  // .farm.nurture.core.contracts.common.TimeRange date_range = 7;
  bool has_date_range() const;
  private:
  bool _internal_has_date_range() const;
  public:
  void clear_date_range();
  const ::farm::nurture::core::contracts::common::TimeRange& date_range() const;
  ::farm::nurture::core::contracts::common::TimeRange* release_date_range();
  ::farm::nurture::core::contracts::common::TimeRange* mutable_date_range();
  void set_allocated_date_range(::farm::nurture::core::contracts::common::TimeRange* date_range);
  private:
  const ::farm::nurture::core::contracts::common::TimeRange& _internal_date_range() const;
  ::farm::nurture::core::contracts::common::TimeRange* _internal_mutable_date_range();
  public:
  void unsafe_arena_set_allocated_date_range(
      ::farm::nurture::core::contracts::common::TimeRange* date_range);
  ::farm::nurture::core::contracts::common::TimeRange* unsafe_arena_release_date_range();

  // .farm.nurture.core.contracts.common.CloudStore cloudStore = 1;
  void clear_cloudstore();
  ::farm::nurture::core::contracts::common::CloudStore cloudstore() const;
  void set_cloudstore(::farm::nurture::core::contracts::common::CloudStore value);
  private:
  ::farm::nurture::core::contracts::common::CloudStore _internal_cloudstore() const;
  void _internal_set_cloudstore(::farm::nurture::core::contracts::common::CloudStore value);
  public:

  // .farm.nurture.core.contracts.common.UrlBuilder url_builder = 2;
  void clear_url_builder();
  ::farm::nurture::core::contracts::common::UrlBuilder url_builder() const;
  void set_url_builder(::farm::nurture::core::contracts::common::UrlBuilder value);
  private:
  ::farm::nurture::core::contracts::common::UrlBuilder _internal_url_builder() const;
  void _internal_set_url_builder(::farm::nurture::core::contracts::common::UrlBuilder value);
  public:

  // .farm.nurture.core.contracts.common.Satellite satellite = 3;
  void clear_satellite();
  ::farm::nurture::core::contracts::common::Satellite satellite() const;
  void set_satellite(::farm::nurture::core::contracts::common::Satellite value);
  private:
  ::farm::nurture::core::contracts::common::Satellite _internal_satellite() const;
  void _internal_set_satellite(::farm::nurture::core::contracts::common::Satellite value);
  public:

  // .farm.nurture.core.contracts.common.Band band = 4;
  void clear_band();
  ::farm::nurture::core::contracts::common::Band band() const;
  void set_band(::farm::nurture::core::contracts::common::Band value);
  private:
  ::farm::nurture::core::contracts::common::Band _internal_band() const;
  void _internal_set_band(::farm::nurture::core::contracts::common::Band value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.RegisterSourceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_directory_;
  ::farm::nurture::core::contracts::common::TimeRange* valid_time_;
  ::farm::nurture::core::contracts::common::TimeRange* date_range_;
  int cloudstore_;
  int url_builder_;
  int satellite_;
  int band_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class NSVPlaceId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.common.NSVPlaceId) */ {
 public:
  inline NSVPlaceId() : NSVPlaceId(nullptr) {}
  virtual ~NSVPlaceId();

  NSVPlaceId(const NSVPlaceId& from);
  NSVPlaceId(NSVPlaceId&& from) noexcept
    : NSVPlaceId() {
    *this = ::std::move(from);
  }

  inline NSVPlaceId& operator=(const NSVPlaceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSVPlaceId& operator=(NSVPlaceId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NSVPlaceId& default_instance();

  static inline const NSVPlaceId* internal_default_instance() {
    return reinterpret_cast<const NSVPlaceId*>(
               &_NSVPlaceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(NSVPlaceId& a, NSVPlaceId& b) {
    a.Swap(&b);
  }
  inline void Swap(NSVPlaceId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSVPlaceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NSVPlaceId* New() const final {
    return CreateMaybeMessage<NSVPlaceId>(nullptr);
  }

  NSVPlaceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NSVPlaceId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NSVPlaceId& from);
  void MergeFrom(const NSVPlaceId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NSVPlaceId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.common.NSVPlaceId";
  }
  protected:
  explicit NSVPlaceId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fgeo_5fcommon_2eproto);
    return ::descriptor_table_Common_2fgeo_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceNamespaceFieldNumber = 1,
    kPlaceSourceTypeFieldNumber = 2,
    kPlaceIdFieldNumber = 4,
    kPlaceVisibleTypeFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.PlaceNamespace PlaceNamespace = 1;
  void clear_placenamespace();
  ::farm::nurture::core::contracts::common::PlaceNamespace placenamespace() const;
  void set_placenamespace(::farm::nurture::core::contracts::common::PlaceNamespace value);
  private:
  ::farm::nurture::core::contracts::common::PlaceNamespace _internal_placenamespace() const;
  void _internal_set_placenamespace(::farm::nurture::core::contracts::common::PlaceNamespace value);
  public:

  // .farm.nurture.core.contracts.common.PlaceSourceType PlaceSourceType = 2;
  void clear_placesourcetype();
  ::farm::nurture::core::contracts::common::PlaceSourceType placesourcetype() const;
  void set_placesourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceSourceType _internal_placesourcetype() const;
  void _internal_set_placesourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value);
  public:

  // int64 place_id = 4;
  void clear_place_id();
  ::PROTOBUF_NAMESPACE_ID::int64 place_id() const;
  void set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_place_id() const;
  void _internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.PlaceVisibleType PlaceVisibleType = 3;
  void clear_placevisibletype();
  ::farm::nurture::core::contracts::common::PlaceVisibleType placevisibletype() const;
  void set_placevisibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  private:
  ::farm::nurture::core::contracts::common::PlaceVisibleType _internal_placevisibletype() const;
  void _internal_set_placevisibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.common.NSVPlaceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int placenamespace_;
  int placesourcetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 place_id_;
  int placevisibletype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fgeo_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaceTag

// string placeTagName = 1;
inline void PlaceTag::clear_placetagname() {
  placetagname_.ClearToEmpty();
}
inline const std::string& PlaceTag::placetagname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
  return _internal_placetagname();
}
inline void PlaceTag::set_placetagname(const std::string& value) {
  _internal_set_placetagname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
}
inline std::string* PlaceTag::mutable_placetagname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
  return _internal_mutable_placetagname();
}
inline const std::string& PlaceTag::_internal_placetagname() const {
  return placetagname_.Get();
}
inline void PlaceTag::_internal_set_placetagname(const std::string& value) {
  
  placetagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlaceTag::set_placetagname(std::string&& value) {
  
  placetagname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
}
inline void PlaceTag::set_placetagname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placetagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
}
inline void PlaceTag::set_placetagname(const char* value,
    size_t size) {
  
  placetagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
}
inline std::string* PlaceTag::_internal_mutable_placetagname() {
  
  return placetagname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlaceTag::release_placetagname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
  return placetagname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceTag::set_allocated_placetagname(std::string* placetagname) {
  if (placetagname != nullptr) {
    
  } else {
    
  }
  placetagname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placetagname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlaceTag.placeTagName)
}

// string placeTagPropertyName = 2;
inline void PlaceTag::clear_placetagpropertyname() {
  placetagpropertyname_.ClearToEmpty();
}
inline const std::string& PlaceTag::placetagpropertyname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
  return _internal_placetagpropertyname();
}
inline void PlaceTag::set_placetagpropertyname(const std::string& value) {
  _internal_set_placetagpropertyname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
}
inline std::string* PlaceTag::mutable_placetagpropertyname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
  return _internal_mutable_placetagpropertyname();
}
inline const std::string& PlaceTag::_internal_placetagpropertyname() const {
  return placetagpropertyname_.Get();
}
inline void PlaceTag::_internal_set_placetagpropertyname(const std::string& value) {
  
  placetagpropertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlaceTag::set_placetagpropertyname(std::string&& value) {
  
  placetagpropertyname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
}
inline void PlaceTag::set_placetagpropertyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placetagpropertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
}
inline void PlaceTag::set_placetagpropertyname(const char* value,
    size_t size) {
  
  placetagpropertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
}
inline std::string* PlaceTag::_internal_mutable_placetagpropertyname() {
  
  return placetagpropertyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlaceTag::release_placetagpropertyname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
  return placetagpropertyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceTag::set_allocated_placetagpropertyname(std::string* placetagpropertyname) {
  if (placetagpropertyname != nullptr) {
    
  } else {
    
  }
  placetagpropertyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placetagpropertyname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyName)
}

// string placeTagPropertyValue = 3;
inline void PlaceTag::clear_placetagpropertyvalue() {
  placetagpropertyvalue_.ClearToEmpty();
}
inline const std::string& PlaceTag::placetagpropertyvalue() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
  return _internal_placetagpropertyvalue();
}
inline void PlaceTag::set_placetagpropertyvalue(const std::string& value) {
  _internal_set_placetagpropertyvalue(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
}
inline std::string* PlaceTag::mutable_placetagpropertyvalue() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
  return _internal_mutable_placetagpropertyvalue();
}
inline const std::string& PlaceTag::_internal_placetagpropertyvalue() const {
  return placetagpropertyvalue_.Get();
}
inline void PlaceTag::_internal_set_placetagpropertyvalue(const std::string& value) {
  
  placetagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlaceTag::set_placetagpropertyvalue(std::string&& value) {
  
  placetagpropertyvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
}
inline void PlaceTag::set_placetagpropertyvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placetagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
}
inline void PlaceTag::set_placetagpropertyvalue(const char* value,
    size_t size) {
  
  placetagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
}
inline std::string* PlaceTag::_internal_mutable_placetagpropertyvalue() {
  
  return placetagpropertyvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlaceTag::release_placetagpropertyvalue() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
  return placetagpropertyvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceTag::set_allocated_placetagpropertyvalue(std::string* placetagpropertyvalue) {
  if (placetagpropertyvalue != nullptr) {
    
  } else {
    
  }
  placetagpropertyvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placetagpropertyvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlaceTag.placeTagPropertyValue)
}

// .farm.nurture.core.contracts.common.PlaceTagName TagName = 4;
inline void PlaceTag::clear_tagname() {
  tagname_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceTagName PlaceTag::_internal_tagname() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceTagName >(tagname_);
}
inline ::farm::nurture::core::contracts::common::PlaceTagName PlaceTag::tagname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.TagName)
  return _internal_tagname();
}
inline void PlaceTag::_internal_set_tagname(::farm::nurture::core::contracts::common::PlaceTagName value) {
  
  tagname_ = value;
}
inline void PlaceTag::set_tagname(::farm::nurture::core::contracts::common::PlaceTagName value) {
  _internal_set_tagname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.TagName)
}

// .farm.nurture.core.contracts.common.PlaceTagProperty TagPropertyKey = 5;
inline void PlaceTag::clear_tagpropertykey() {
  tagpropertykey_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceTagProperty PlaceTag::_internal_tagpropertykey() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceTagProperty >(tagpropertykey_);
}
inline ::farm::nurture::core::contracts::common::PlaceTagProperty PlaceTag::tagpropertykey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.TagPropertyKey)
  return _internal_tagpropertykey();
}
inline void PlaceTag::_internal_set_tagpropertykey(::farm::nurture::core::contracts::common::PlaceTagProperty value) {
  
  tagpropertykey_ = value;
}
inline void PlaceTag::set_tagpropertykey(::farm::nurture::core::contracts::common::PlaceTagProperty value) {
  _internal_set_tagpropertykey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.TagPropertyKey)
}

// string TagPropertyValue = 6;
inline void PlaceTag::clear_tagpropertyvalue() {
  tagpropertyvalue_.ClearToEmpty();
}
inline const std::string& PlaceTag::tagpropertyvalue() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
  return _internal_tagpropertyvalue();
}
inline void PlaceTag::set_tagpropertyvalue(const std::string& value) {
  _internal_set_tagpropertyvalue(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
}
inline std::string* PlaceTag::mutable_tagpropertyvalue() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
  return _internal_mutable_tagpropertyvalue();
}
inline const std::string& PlaceTag::_internal_tagpropertyvalue() const {
  return tagpropertyvalue_.Get();
}
inline void PlaceTag::_internal_set_tagpropertyvalue(const std::string& value) {
  
  tagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlaceTag::set_tagpropertyvalue(std::string&& value) {
  
  tagpropertyvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
}
inline void PlaceTag::set_tagpropertyvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
}
inline void PlaceTag::set_tagpropertyvalue(const char* value,
    size_t size) {
  
  tagpropertyvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
}
inline std::string* PlaceTag::_internal_mutable_tagpropertyvalue() {
  
  return tagpropertyvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlaceTag::release_tagpropertyvalue() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
  return tagpropertyvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceTag::set_allocated_tagpropertyvalue(std::string* tagpropertyvalue) {
  if (tagpropertyvalue != nullptr) {
    
  } else {
    
  }
  tagpropertyvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagpropertyvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlaceTag.TagPropertyValue)
}

// int64 PlaceTagId = 7;
inline void PlaceTag::clear_placetagid() {
  placetagid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceTag::_internal_placetagid() const {
  return placetagid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceTag::placetagid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.PlaceTagId)
  return _internal_placetagid();
}
inline void PlaceTag::_internal_set_placetagid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  placetagid_ = value;
}
inline void PlaceTag::set_placetagid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_placetagid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTag.PlaceTagId)
}

// .farm.nurture.core.contracts.common.PlaceTagValue value = 8;
inline bool PlaceTag::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool PlaceTag::has_value() const {
  return _internal_has_value();
}
inline void PlaceTag::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::PlaceTagValue& PlaceTag::_internal_value() const {
  const ::farm::nurture::core::contracts::common::PlaceTagValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::PlaceTagValue&>(
      ::farm::nurture::core::contracts::common::_PlaceTagValue_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::PlaceTagValue& PlaceTag::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTag.value)
  return _internal_value();
}
inline void PlaceTag::unsafe_arena_set_allocated_value(
    ::farm::nurture::core::contracts::common::PlaceTagValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.PlaceTag.value)
}
inline ::farm::nurture::core::contracts::common::PlaceTagValue* PlaceTag::release_value() {
  
  ::farm::nurture::core::contracts::common::PlaceTagValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::PlaceTagValue* PlaceTag::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlaceTag.value)
  
  ::farm::nurture::core::contracts::common::PlaceTagValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::PlaceTagValue* PlaceTag::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::PlaceTagValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::farm::nurture::core::contracts::common::PlaceTagValue* PlaceTag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTag.value)
  return _internal_mutable_value();
}
inline void PlaceTag::set_allocated_value(::farm::nurture::core::contracts::common::PlaceTagValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlaceTag.value)
}

// -------------------------------------------------------------------

// ValidationResponse

// .farm.nurture.core.contracts.common.ValidationResponseMsg msg = 1;
inline void ValidationResponse::clear_msg() {
  msg_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValidationResponseMsg ValidationResponse::_internal_msg() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValidationResponseMsg >(msg_);
}
inline ::farm::nurture::core::contracts::common::ValidationResponseMsg ValidationResponse::msg() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResponse.msg)
  return _internal_msg();
}
inline void ValidationResponse::_internal_set_msg(::farm::nurture::core::contracts::common::ValidationResponseMsg value) {
  
  msg_ = value;
}
inline void ValidationResponse::set_msg(::farm::nurture::core::contracts::common::ValidationResponseMsg value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResponse.msg)
}

// .farm.nurture.core.contracts.common.ValidationResponseCode valCode = 2;
inline void ValidationResponse::clear_valcode() {
  valcode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValidationResponseCode ValidationResponse::_internal_valcode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValidationResponseCode >(valcode_);
}
inline ::farm::nurture::core::contracts::common::ValidationResponseCode ValidationResponse::valcode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResponse.valCode)
  return _internal_valcode();
}
inline void ValidationResponse::_internal_set_valcode(::farm::nurture::core::contracts::common::ValidationResponseCode value) {
  
  valcode_ = value;
}
inline void ValidationResponse::set_valcode(::farm::nurture::core::contracts::common::ValidationResponseCode value) {
  _internal_set_valcode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResponse.valCode)
}

// string dsc = 3;
inline void ValidationResponse::clear_dsc() {
  dsc_.ClearToEmpty();
}
inline const std::string& ValidationResponse::dsc() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResponse.dsc)
  return _internal_dsc();
}
inline void ValidationResponse::set_dsc(const std::string& value) {
  _internal_set_dsc(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResponse.dsc)
}
inline std::string* ValidationResponse::mutable_dsc() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ValidationResponse.dsc)
  return _internal_mutable_dsc();
}
inline const std::string& ValidationResponse::_internal_dsc() const {
  return dsc_.Get();
}
inline void ValidationResponse::_internal_set_dsc(const std::string& value) {
  
  dsc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidationResponse::set_dsc(std::string&& value) {
  
  dsc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.ValidationResponse.dsc)
}
inline void ValidationResponse::set_dsc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dsc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.ValidationResponse.dsc)
}
inline void ValidationResponse::set_dsc(const char* value,
    size_t size) {
  
  dsc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.ValidationResponse.dsc)
}
inline std::string* ValidationResponse::_internal_mutable_dsc() {
  
  return dsc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidationResponse::release_dsc() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.ValidationResponse.dsc)
  return dsc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidationResponse::set_allocated_dsc(std::string* dsc) {
  if (dsc != nullptr) {
    
  } else {
    
  }
  dsc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dsc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.ValidationResponse.dsc)
}

// bool valid = 4;
inline void ValidationResponse::clear_valid() {
  valid_ = false;
}
inline bool ValidationResponse::_internal_valid() const {
  return valid_;
}
inline bool ValidationResponse::valid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResponse.valid)
  return _internal_valid();
}
inline void ValidationResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void ValidationResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResponse.valid)
}

// -------------------------------------------------------------------

// GeoPlaces

// string geometry = 1;
inline void GeoPlaces::clear_geometry() {
  geometry_.ClearToEmpty();
}
inline const std::string& GeoPlaces::geometry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeoPlaces.geometry)
  return _internal_geometry();
}
inline void GeoPlaces::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeoPlaces.geometry)
}
inline std::string* GeoPlaces::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GeoPlaces.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& GeoPlaces::_internal_geometry() const {
  return geometry_.Get();
}
inline void GeoPlaces::_internal_set_geometry(const std::string& value) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeoPlaces::set_geometry(std::string&& value) {
  
  geometry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.GeoPlaces.geometry)
}
inline void GeoPlaces::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.GeoPlaces.geometry)
}
inline void GeoPlaces::set_geometry(const char* value,
    size_t size) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.GeoPlaces.geometry)
}
inline std::string* GeoPlaces::_internal_mutable_geometry() {
  
  return geometry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeoPlaces::release_geometry() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.GeoPlaces.geometry)
  return geometry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoPlaces::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.GeoPlaces.geometry)
}

// int64 PlaceId = 2;
inline void GeoPlaces::clear_placeid() {
  placeid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeoPlaces::_internal_placeid() const {
  return placeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeoPlaces::placeid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeoPlaces.PlaceId)
  return _internal_placeid();
}
inline void GeoPlaces::_internal_set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  placeid_ = value;
}
inline void GeoPlaces::set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_placeid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeoPlaces.PlaceId)
}

// .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 3;
inline void GeoPlaces::clear_geometryrepresentationtype() {
  geometryrepresentationtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType GeoPlaces::_internal_geometryrepresentationtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeometryRepresentationType >(geometryrepresentationtype_);
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType GeoPlaces::geometryrepresentationtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeoPlaces.geometryRepresentationType)
  return _internal_geometryrepresentationtype();
}
inline void GeoPlaces::_internal_set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  
  geometryrepresentationtype_ = value;
}
inline void GeoPlaces::set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  _internal_set_geometryrepresentationtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeoPlaces.geometryRepresentationType)
}

// repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 4;
inline int GeoPlaces::_internal_placetags_size() const {
  return placetags_.size();
}
inline int GeoPlaces::placetags_size() const {
  return _internal_placetags_size();
}
inline void GeoPlaces::clear_placetags() {
  placetags_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* GeoPlaces::mutable_placetags(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GeoPlaces.PlaceTags)
  return placetags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
GeoPlaces::mutable_placetags() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.GeoPlaces.PlaceTags)
  return &placetags_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& GeoPlaces::_internal_placetags(int index) const {
  return placetags_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& GeoPlaces::placetags(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeoPlaces.PlaceTags)
  return _internal_placetags(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* GeoPlaces::_internal_add_placetags() {
  return placetags_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* GeoPlaces::add_placetags() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.GeoPlaces.PlaceTags)
  return _internal_add_placetags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
GeoPlaces::placetags() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.GeoPlaces.PlaceTags)
  return placetags_;
}

// -------------------------------------------------------------------

// ValidationResults

// .farm.nurture.core.contracts.common.ValidationResponse vldtRs = 1;
inline bool ValidationResults::_internal_has_vldtrs() const {
  return this != internal_default_instance() && vldtrs_ != nullptr;
}
inline bool ValidationResults::has_vldtrs() const {
  return _internal_has_vldtrs();
}
inline void ValidationResults::clear_vldtrs() {
  if (GetArena() == nullptr && vldtrs_ != nullptr) {
    delete vldtrs_;
  }
  vldtrs_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::ValidationResponse& ValidationResults::_internal_vldtrs() const {
  const ::farm::nurture::core::contracts::common::ValidationResponse* p = vldtrs_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ValidationResponse&>(
      ::farm::nurture::core::contracts::common::_ValidationResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ValidationResponse& ValidationResults::vldtrs() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.vldtRs)
  return _internal_vldtrs();
}
inline void ValidationResults::unsafe_arena_set_allocated_vldtrs(
    ::farm::nurture::core::contracts::common::ValidationResponse* vldtrs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vldtrs_);
  }
  vldtrs_ = vldtrs;
  if (vldtrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.ValidationResults.vldtRs)
}
inline ::farm::nurture::core::contracts::common::ValidationResponse* ValidationResults::release_vldtrs() {
  
  ::farm::nurture::core::contracts::common::ValidationResponse* temp = vldtrs_;
  vldtrs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ValidationResponse* ValidationResults::unsafe_arena_release_vldtrs() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.ValidationResults.vldtRs)
  
  ::farm::nurture::core::contracts::common::ValidationResponse* temp = vldtrs_;
  vldtrs_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ValidationResponse* ValidationResults::_internal_mutable_vldtrs() {
  
  if (vldtrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ValidationResponse>(GetArena());
    vldtrs_ = p;
  }
  return vldtrs_;
}
inline ::farm::nurture::core::contracts::common::ValidationResponse* ValidationResults::mutable_vldtrs() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ValidationResults.vldtRs)
  return _internal_mutable_vldtrs();
}
inline void ValidationResults::set_allocated_vldtrs(::farm::nurture::core::contracts::common::ValidationResponse* vldtrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vldtrs_;
  }
  if (vldtrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vldtrs);
    if (message_arena != submessage_arena) {
      vldtrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vldtrs, submessage_arena);
    }
    
  } else {
    
  }
  vldtrs_ = vldtrs;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.ValidationResults.vldtRs)
}

// bool valid = 2;
inline void ValidationResults::clear_valid() {
  valid_ = false;
}
inline bool ValidationResults::_internal_valid() const {
  return valid_;
}
inline bool ValidationResults::valid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.valid)
  return _internal_valid();
}
inline void ValidationResults::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void ValidationResults::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResults.valid)
}

// .farm.nurture.core.contracts.common.GeoValidationType validationType = 3;
inline void ValidationResults::clear_validationtype() {
  validationtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeoValidationType ValidationResults::_internal_validationtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeoValidationType >(validationtype_);
}
inline ::farm::nurture::core::contracts::common::GeoValidationType ValidationResults::validationtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.validationType)
  return _internal_validationtype();
}
inline void ValidationResults::_internal_set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value) {
  
  validationtype_ = value;
}
inline void ValidationResults::set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value) {
  _internal_set_validationtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResults.validationType)
}

// .farm.nurture.core.contracts.common.GeoValidationName validationName = 4;
inline void ValidationResults::clear_validationname() {
  validationname_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeoValidationName ValidationResults::_internal_validationname() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeoValidationName >(validationname_);
}
inline ::farm::nurture::core::contracts::common::GeoValidationName ValidationResults::validationname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.validationName)
  return _internal_validationname();
}
inline void ValidationResults::_internal_set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value) {
  
  validationname_ = value;
}
inline void ValidationResults::set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value) {
  _internal_set_validationname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResults.validationName)
}

// .farm.nurture.core.contracts.common.AssertionType assertType = 5;
inline void ValidationResults::clear_asserttype() {
  asserttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::AssertionType ValidationResults::_internal_asserttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::AssertionType >(asserttype_);
}
inline ::farm::nurture::core::contracts::common::AssertionType ValidationResults::asserttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.assertType)
  return _internal_asserttype();
}
inline void ValidationResults::_internal_set_asserttype(::farm::nurture::core::contracts::common::AssertionType value) {
  
  asserttype_ = value;
}
inline void ValidationResults::set_asserttype(::farm::nurture::core::contracts::common::AssertionType value) {
  _internal_set_asserttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationResults.assertType)
}

// repeated .farm.nurture.core.contracts.common.GeoPlaces places = 6;
inline int ValidationResults::_internal_places_size() const {
  return places_.size();
}
inline int ValidationResults::places_size() const {
  return _internal_places_size();
}
inline void ValidationResults::clear_places() {
  places_.Clear();
}
inline ::farm::nurture::core::contracts::common::GeoPlaces* ValidationResults::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ValidationResults.places)
  return places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::GeoPlaces >*
ValidationResults::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.ValidationResults.places)
  return &places_;
}
inline const ::farm::nurture::core::contracts::common::GeoPlaces& ValidationResults::_internal_places(int index) const {
  return places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::GeoPlaces& ValidationResults::places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationResults.places)
  return _internal_places(index);
}
inline ::farm::nurture::core::contracts::common::GeoPlaces* ValidationResults::_internal_add_places() {
  return places_.Add();
}
inline ::farm::nurture::core::contracts::common::GeoPlaces* ValidationResults::add_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.ValidationResults.places)
  return _internal_add_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::GeoPlaces >&
ValidationResults::places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.ValidationResults.places)
  return places_;
}

// -------------------------------------------------------------------

// GeometryToValidate

// .farm.nurture.core.contracts.common.PlaceSourceType PlcSrcType = 1;
inline void GeometryToValidate::clear_plcsrctype() {
  plcsrctype_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType GeometryToValidate::_internal_plcsrctype() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceSourceType >(plcsrctype_);
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType GeometryToValidate::plcsrctype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.PlcSrcType)
  return _internal_plcsrctype();
}
inline void GeometryToValidate::_internal_set_plcsrctype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  
  plcsrctype_ = value;
}
inline void GeometryToValidate::set_plcsrctype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  _internal_set_plcsrctype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.PlcSrcType)
}

// .farm.nurture.core.contracts.common.PlaceNamespace PlcNmspce = 2;
inline void GeometryToValidate::clear_plcnmspce() {
  plcnmspce_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace GeometryToValidate::_internal_plcnmspce() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceNamespace >(plcnmspce_);
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace GeometryToValidate::plcnmspce() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.PlcNmspce)
  return _internal_plcnmspce();
}
inline void GeometryToValidate::_internal_set_plcnmspce(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  
  plcnmspce_ = value;
}
inline void GeometryToValidate::set_plcnmspce(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  _internal_set_plcnmspce(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.PlcNmspce)
}

// .farm.nurture.core.contracts.common.PlaceVisibleType PlcVsble = 3;
inline void GeometryToValidate::clear_plcvsble() {
  plcvsble_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType GeometryToValidate::_internal_plcvsble() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceVisibleType >(plcvsble_);
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType GeometryToValidate::plcvsble() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.PlcVsble)
  return _internal_plcvsble();
}
inline void GeometryToValidate::_internal_set_plcvsble(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  
  plcvsble_ = value;
}
inline void GeometryToValidate::set_plcvsble(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  _internal_set_plcvsble(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.PlcVsble)
}

// string version = 4;
inline void GeometryToValidate::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GeometryToValidate::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.version)
  return _internal_version();
}
inline void GeometryToValidate::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.version)
}
inline std::string* GeometryToValidate::mutable_version() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GeometryToValidate.version)
  return _internal_mutable_version();
}
inline const std::string& GeometryToValidate::_internal_version() const {
  return version_.Get();
}
inline void GeometryToValidate::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryToValidate::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.GeometryToValidate.version)
}
inline void GeometryToValidate::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.GeometryToValidate.version)
}
inline void GeometryToValidate::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.GeometryToValidate.version)
}
inline std::string* GeometryToValidate::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryToValidate::release_version() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.GeometryToValidate.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeometryToValidate::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.GeometryToValidate.version)
}

// bool AuditRequired = 5;
inline void GeometryToValidate::clear_auditrequired() {
  auditrequired_ = false;
}
inline bool GeometryToValidate::_internal_auditrequired() const {
  return auditrequired_;
}
inline bool GeometryToValidate::auditrequired() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.AuditRequired)
  return _internal_auditrequired();
}
inline void GeometryToValidate::_internal_set_auditrequired(bool value) {
  
  auditrequired_ = value;
}
inline void GeometryToValidate::set_auditrequired(bool value) {
  _internal_set_auditrequired(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.AuditRequired)
}

// int32 MinZoom = 6;
inline void GeometryToValidate::clear_minzoom() {
  minzoom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::_internal_minzoom() const {
  return minzoom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::minzoom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.MinZoom)
  return _internal_minzoom();
}
inline void GeometryToValidate::_internal_set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minzoom_ = value;
}
inline void GeometryToValidate::set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minzoom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.MinZoom)
}

// int32 MaxZoom = 7;
inline void GeometryToValidate::clear_maxzoom() {
  maxzoom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::_internal_maxzoom() const {
  return maxzoom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::maxzoom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.MaxZoom)
  return _internal_maxzoom();
}
inline void GeometryToValidate::_internal_set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxzoom_ = value;
}
inline void GeometryToValidate::set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxzoom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.MaxZoom)
}

// .farm.nurture.core.contracts.common.UI_CLIENT UiClient = 9;
inline void GeometryToValidate::clear_uiclient() {
  uiclient_ = 0;
}
inline ::farm::nurture::core::contracts::common::UI_CLIENT GeometryToValidate::_internal_uiclient() const {
  return static_cast< ::farm::nurture::core::contracts::common::UI_CLIENT >(uiclient_);
}
inline ::farm::nurture::core::contracts::common::UI_CLIENT GeometryToValidate::uiclient() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.UiClient)
  return _internal_uiclient();
}
inline void GeometryToValidate::_internal_set_uiclient(::farm::nurture::core::contracts::common::UI_CLIENT value) {
  
  uiclient_ = value;
}
inline void GeometryToValidate::set_uiclient(::farm::nurture::core::contracts::common::UI_CLIENT value) {
  _internal_set_uiclient(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.UiClient)
}

// repeated .farm.nurture.core.contracts.common.ValidationsApplicable validationsApplicable = 10;
inline int GeometryToValidate::_internal_validationsapplicable_size() const {
  return validationsapplicable_.size();
}
inline int GeometryToValidate::validationsapplicable_size() const {
  return _internal_validationsapplicable_size();
}
inline void GeometryToValidate::clear_validationsapplicable() {
  validationsapplicable_.Clear();
}
inline ::farm::nurture::core::contracts::common::ValidationsApplicable* GeometryToValidate::mutable_validationsapplicable(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable)
  return validationsapplicable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ValidationsApplicable >*
GeometryToValidate::mutable_validationsapplicable() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable)
  return &validationsapplicable_;
}
inline const ::farm::nurture::core::contracts::common::ValidationsApplicable& GeometryToValidate::_internal_validationsapplicable(int index) const {
  return validationsapplicable_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ValidationsApplicable& GeometryToValidate::validationsapplicable(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable)
  return _internal_validationsapplicable(index);
}
inline ::farm::nurture::core::contracts::common::ValidationsApplicable* GeometryToValidate::_internal_add_validationsapplicable() {
  return validationsapplicable_.Add();
}
inline ::farm::nurture::core::contracts::common::ValidationsApplicable* GeometryToValidate::add_validationsapplicable() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable)
  return _internal_add_validationsapplicable();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ValidationsApplicable >&
GeometryToValidate::validationsapplicable() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.GeometryToValidate.validationsApplicable)
  return validationsapplicable_;
}

// .farm.nurture.core.contracts.common.GeometryRepresentationType gmRprType = 15;
inline void GeometryToValidate::clear_gmrprtype() {
  gmrprtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType GeometryToValidate::_internal_gmrprtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeometryRepresentationType >(gmrprtype_);
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType GeometryToValidate::gmrprtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.gmRprType)
  return _internal_gmrprtype();
}
inline void GeometryToValidate::_internal_set_gmrprtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  
  gmrprtype_ = value;
}
inline void GeometryToValidate::set_gmrprtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  _internal_set_gmrprtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.gmRprType)
}

// string gmt = 16;
inline void GeometryToValidate::clear_gmt() {
  gmt_.ClearToEmpty();
}
inline const std::string& GeometryToValidate::gmt() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
  return _internal_gmt();
}
inline void GeometryToValidate::set_gmt(const std::string& value) {
  _internal_set_gmt(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
}
inline std::string* GeometryToValidate::mutable_gmt() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
  return _internal_mutable_gmt();
}
inline const std::string& GeometryToValidate::_internal_gmt() const {
  return gmt_.Get();
}
inline void GeometryToValidate::_internal_set_gmt(const std::string& value) {
  
  gmt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryToValidate::set_gmt(std::string&& value) {
  
  gmt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
}
inline void GeometryToValidate::set_gmt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gmt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
}
inline void GeometryToValidate::set_gmt(const char* value,
    size_t size) {
  
  gmt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
}
inline std::string* GeometryToValidate::_internal_mutable_gmt() {
  
  return gmt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryToValidate::release_gmt() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
  return gmt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeometryToValidate::set_allocated_gmt(std::string* gmt) {
  if (gmt != nullptr) {
    
  } else {
    
  }
  gmt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gmt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.GeometryToValidate.gmt)
}

// int32 thresholdDistance = 17;
inline void GeometryToValidate::clear_thresholddistance() {
  thresholddistance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::_internal_thresholddistance() const {
  return thresholddistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryToValidate::thresholddistance() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.thresholdDistance)
  return _internal_thresholddistance();
}
inline void GeometryToValidate::_internal_set_thresholddistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thresholddistance_ = value;
}
inline void GeometryToValidate::set_thresholddistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thresholddistance(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.thresholdDistance)
}

// repeated int64 plcIds = 18;
inline int GeometryToValidate::_internal_plcids_size() const {
  return plcids_.size();
}
inline int GeometryToValidate::plcids_size() const {
  return _internal_plcids_size();
}
inline void GeometryToValidate::clear_plcids() {
  plcids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeometryToValidate::_internal_plcids(int index) const {
  return plcids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeometryToValidate::plcids(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.GeometryToValidate.plcIds)
  return _internal_plcids(index);
}
inline void GeometryToValidate::set_plcids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  plcids_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.GeometryToValidate.plcIds)
}
inline void GeometryToValidate::_internal_add_plcids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  plcids_.Add(value);
}
inline void GeometryToValidate::add_plcids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_plcids(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.GeometryToValidate.plcIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GeometryToValidate::_internal_plcids() const {
  return plcids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GeometryToValidate::plcids() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.GeometryToValidate.plcIds)
  return _internal_plcids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GeometryToValidate::_internal_mutable_plcids() {
  return &plcids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GeometryToValidate::mutable_plcids() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.GeometryToValidate.plcIds)
  return _internal_mutable_plcids();
}

// -------------------------------------------------------------------

// ValidationsApplicable

// .farm.nurture.core.contracts.common.GeoValidationType validationType = 1;
inline void ValidationsApplicable::clear_validationtype() {
  validationtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeoValidationType ValidationsApplicable::_internal_validationtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeoValidationType >(validationtype_);
}
inline ::farm::nurture::core::contracts::common::GeoValidationType ValidationsApplicable::validationtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationsApplicable.validationType)
  return _internal_validationtype();
}
inline void ValidationsApplicable::_internal_set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value) {
  
  validationtype_ = value;
}
inline void ValidationsApplicable::set_validationtype(::farm::nurture::core::contracts::common::GeoValidationType value) {
  _internal_set_validationtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationsApplicable.validationType)
}

// .farm.nurture.core.contracts.common.GeoValidationName validationName = 2;
inline void ValidationsApplicable::clear_validationname() {
  validationname_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeoValidationName ValidationsApplicable::_internal_validationname() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeoValidationName >(validationname_);
}
inline ::farm::nurture::core::contracts::common::GeoValidationName ValidationsApplicable::validationname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationsApplicable.validationName)
  return _internal_validationname();
}
inline void ValidationsApplicable::_internal_set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value) {
  
  validationname_ = value;
}
inline void ValidationsApplicable::set_validationname(::farm::nurture::core::contracts::common::GeoValidationName value) {
  _internal_set_validationname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationsApplicable.validationName)
}

// .farm.nurture.core.contracts.common.AssertionType assertType = 3;
inline void ValidationsApplicable::clear_asserttype() {
  asserttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::AssertionType ValidationsApplicable::_internal_asserttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::AssertionType >(asserttype_);
}
inline ::farm::nurture::core::contracts::common::AssertionType ValidationsApplicable::asserttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ValidationsApplicable.assertType)
  return _internal_asserttype();
}
inline void ValidationsApplicable::_internal_set_asserttype(::farm::nurture::core::contracts::common::AssertionType value) {
  
  asserttype_ = value;
}
inline void ValidationsApplicable::set_asserttype(::farm::nurture::core::contracts::common::AssertionType value) {
  _internal_set_asserttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ValidationsApplicable.assertType)
}

// -------------------------------------------------------------------

// FilterArguments

// repeated int64 placeIds = 1;
inline int FilterArguments::_internal_placeids_size() const {
  return placeids_.size();
}
inline int FilterArguments::placeids_size() const {
  return _internal_placeids_size();
}
inline void FilterArguments::clear_placeids() {
  placeids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterArguments::_internal_placeids(int index) const {
  return placeids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterArguments::placeids(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.placeIds)
  return _internal_placeids(index);
}
inline void FilterArguments::set_placeids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  placeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.placeIds)
}
inline void FilterArguments::_internal_add_placeids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  placeids_.Add(value);
}
inline void FilterArguments::add_placeids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_placeids(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.placeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FilterArguments::_internal_placeids() const {
  return placeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FilterArguments::placeids() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.placeIds)
  return _internal_placeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FilterArguments::_internal_mutable_placeids() {
  return &placeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FilterArguments::mutable_placeids() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.placeIds)
  return _internal_mutable_placeids();
}

// repeated int64 placeTagIds = 2;
inline int FilterArguments::_internal_placetagids_size() const {
  return placetagids_.size();
}
inline int FilterArguments::placetagids_size() const {
  return _internal_placetagids_size();
}
inline void FilterArguments::clear_placetagids() {
  placetagids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterArguments::_internal_placetagids(int index) const {
  return placetagids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterArguments::placetagids(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.placeTagIds)
  return _internal_placetagids(index);
}
inline void FilterArguments::set_placetagids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  placetagids_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.placeTagIds)
}
inline void FilterArguments::_internal_add_placetagids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  placetagids_.Add(value);
}
inline void FilterArguments::add_placetagids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_placetagids(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.placeTagIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FilterArguments::_internal_placetagids() const {
  return placetagids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FilterArguments::placetagids() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.placeTagIds)
  return _internal_placetagids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FilterArguments::_internal_mutable_placetagids() {
  return &placetagids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FilterArguments::mutable_placetagids() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.placeTagIds)
  return _internal_mutable_placetagids();
}

// repeated .farm.nurture.core.contracts.common.PlaceTagName tagNames = 3;
inline int FilterArguments::_internal_tagnames_size() const {
  return tagnames_.size();
}
inline int FilterArguments::tagnames_size() const {
  return _internal_tagnames_size();
}
inline void FilterArguments::clear_tagnames() {
  tagnames_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTagName FilterArguments::_internal_tagnames(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceTagName >(tagnames_.Get(index));
}
inline ::farm::nurture::core::contracts::common::PlaceTagName FilterArguments::tagnames(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.tagNames)
  return _internal_tagnames(index);
}
inline void FilterArguments::set_tagnames(int index, ::farm::nurture::core::contracts::common::PlaceTagName value) {
  tagnames_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.tagNames)
}
inline void FilterArguments::_internal_add_tagnames(::farm::nurture::core::contracts::common::PlaceTagName value) {
  tagnames_.Add(value);
}
inline void FilterArguments::add_tagnames(::farm::nurture::core::contracts::common::PlaceTagName value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.tagNames)
  _internal_add_tagnames(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FilterArguments::tagnames() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.tagNames)
  return tagnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::_internal_mutable_tagnames() {
  return &tagnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::mutable_tagnames() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.tagNames)
  return _internal_mutable_tagnames();
}

// repeated .farm.nurture.core.contracts.common.PlaceTagProperty tagProperties = 4;
inline int FilterArguments::_internal_tagproperties_size() const {
  return tagproperties_.size();
}
inline int FilterArguments::tagproperties_size() const {
  return _internal_tagproperties_size();
}
inline void FilterArguments::clear_tagproperties() {
  tagproperties_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTagProperty FilterArguments::_internal_tagproperties(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceTagProperty >(tagproperties_.Get(index));
}
inline ::farm::nurture::core::contracts::common::PlaceTagProperty FilterArguments::tagproperties(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.tagProperties)
  return _internal_tagproperties(index);
}
inline void FilterArguments::set_tagproperties(int index, ::farm::nurture::core::contracts::common::PlaceTagProperty value) {
  tagproperties_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.tagProperties)
}
inline void FilterArguments::_internal_add_tagproperties(::farm::nurture::core::contracts::common::PlaceTagProperty value) {
  tagproperties_.Add(value);
}
inline void FilterArguments::add_tagproperties(::farm::nurture::core::contracts::common::PlaceTagProperty value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.tagProperties)
  _internal_add_tagproperties(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FilterArguments::tagproperties() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.tagProperties)
  return tagproperties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::_internal_mutable_tagproperties() {
  return &tagproperties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::mutable_tagproperties() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.tagProperties)
  return _internal_mutable_tagproperties();
}

// repeated string StringValues = 5;
inline int FilterArguments::_internal_stringvalues_size() const {
  return stringvalues_.size();
}
inline int FilterArguments::stringvalues_size() const {
  return _internal_stringvalues_size();
}
inline void FilterArguments::clear_stringvalues() {
  stringvalues_.Clear();
}
inline std::string* FilterArguments::add_stringvalues() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  return _internal_add_stringvalues();
}
inline const std::string& FilterArguments::_internal_stringvalues(int index) const {
  return stringvalues_.Get(index);
}
inline const std::string& FilterArguments::stringvalues(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  return _internal_stringvalues(index);
}
inline std::string* FilterArguments::mutable_stringvalues(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  return stringvalues_.Mutable(index);
}
inline void FilterArguments::set_stringvalues(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  stringvalues_.Mutable(index)->assign(value);
}
inline void FilterArguments::set_stringvalues(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  stringvalues_.Mutable(index)->assign(std::move(value));
}
inline void FilterArguments::set_stringvalues(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline void FilterArguments::set_stringvalues(int index, const char* value, size_t size) {
  stringvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline std::string* FilterArguments::_internal_add_stringvalues() {
  return stringvalues_.Add();
}
inline void FilterArguments::add_stringvalues(const std::string& value) {
  stringvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline void FilterArguments::add_stringvalues(std::string&& value) {
  stringvalues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline void FilterArguments::add_stringvalues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline void FilterArguments::add_stringvalues(const char* value, size_t size) {
  stringvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.FilterArguments.StringValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilterArguments::stringvalues() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  return stringvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilterArguments::mutable_stringvalues() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.StringValues)
  return &stringvalues_;
}

// repeated .farm.nurture.core.contracts.common.ReferenceType reference_types = 6;
inline int FilterArguments::_internal_reference_types_size() const {
  return reference_types_.size();
}
inline int FilterArguments::reference_types_size() const {
  return _internal_reference_types_size();
}
inline void FilterArguments::clear_reference_types() {
  reference_types_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceType FilterArguments::_internal_reference_types(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::ReferenceType >(reference_types_.Get(index));
}
inline ::farm::nurture::core::contracts::common::ReferenceType FilterArguments::reference_types(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.reference_types)
  return _internal_reference_types(index);
}
inline void FilterArguments::set_reference_types(int index, ::farm::nurture::core::contracts::common::ReferenceType value) {
  reference_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.reference_types)
}
inline void FilterArguments::_internal_add_reference_types(::farm::nurture::core::contracts::common::ReferenceType value) {
  reference_types_.Add(value);
}
inline void FilterArguments::add_reference_types(::farm::nurture::core::contracts::common::ReferenceType value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.reference_types)
  _internal_add_reference_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FilterArguments::reference_types() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.reference_types)
  return reference_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::_internal_mutable_reference_types() {
  return &reference_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::mutable_reference_types() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.reference_types)
  return _internal_mutable_reference_types();
}

// repeated .farm.nurture.core.contracts.common.AttributeKey attribute_keys = 7;
inline int FilterArguments::_internal_attribute_keys_size() const {
  return attribute_keys_.size();
}
inline int FilterArguments::attribute_keys_size() const {
  return _internal_attribute_keys_size();
}
inline void FilterArguments::clear_attribute_keys() {
  attribute_keys_.Clear();
}
inline ::farm::nurture::core::contracts::common::AttributeKey FilterArguments::_internal_attribute_keys(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::AttributeKey >(attribute_keys_.Get(index));
}
inline ::farm::nurture::core::contracts::common::AttributeKey FilterArguments::attribute_keys(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.attribute_keys)
  return _internal_attribute_keys(index);
}
inline void FilterArguments::set_attribute_keys(int index, ::farm::nurture::core::contracts::common::AttributeKey value) {
  attribute_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.FilterArguments.attribute_keys)
}
inline void FilterArguments::_internal_add_attribute_keys(::farm::nurture::core::contracts::common::AttributeKey value) {
  attribute_keys_.Add(value);
}
inline void FilterArguments::add_attribute_keys(::farm::nurture::core::contracts::common::AttributeKey value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.attribute_keys)
  _internal_add_attribute_keys(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FilterArguments::attribute_keys() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.attribute_keys)
  return attribute_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::_internal_mutable_attribute_keys() {
  return &attribute_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterArguments::mutable_attribute_keys() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.attribute_keys)
  return _internal_mutable_attribute_keys();
}

// repeated .farm.nurture.core.contracts.common.Value values = 8;
inline int FilterArguments::_internal_values_size() const {
  return values_.size();
}
inline int FilterArguments::values_size() const {
  return _internal_values_size();
}
inline void FilterArguments::clear_values() {
  values_.Clear();
}
inline ::farm::nurture::core::contracts::common::Value* FilterArguments::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.FilterArguments.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Value >*
FilterArguments::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.FilterArguments.values)
  return &values_;
}
inline const ::farm::nurture::core::contracts::common::Value& FilterArguments::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Value& FilterArguments::values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.FilterArguments.values)
  return _internal_values(index);
}
inline ::farm::nurture::core::contracts::common::Value* FilterArguments::_internal_add_values() {
  return values_.Add();
}
inline ::farm::nurture::core::contracts::common::Value* FilterArguments::add_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.FilterArguments.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Value >&
FilterArguments::values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.FilterArguments.values)
  return values_;
}

// -------------------------------------------------------------------

// Filter

// .farm.nurture.core.contracts.common.BaseConditions baseCondition = 1;
inline bool Filter::_internal_has_basecondition() const {
  return this != internal_default_instance() && basecondition_ != nullptr;
}
inline bool Filter::has_basecondition() const {
  return _internal_has_basecondition();
}
inline void Filter::clear_basecondition() {
  if (GetArena() == nullptr && basecondition_ != nullptr) {
    delete basecondition_;
  }
  basecondition_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::BaseConditions& Filter::_internal_basecondition() const {
  const ::farm::nurture::core::contracts::common::BaseConditions* p = basecondition_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::BaseConditions&>(
      ::farm::nurture::core::contracts::common::_BaseConditions_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::BaseConditions& Filter::basecondition() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Filter.baseCondition)
  return _internal_basecondition();
}
inline void Filter::unsafe_arena_set_allocated_basecondition(
    ::farm::nurture::core::contracts::common::BaseConditions* basecondition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecondition_);
  }
  basecondition_ = basecondition;
  if (basecondition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.Filter.baseCondition)
}
inline ::farm::nurture::core::contracts::common::BaseConditions* Filter::release_basecondition() {
  
  ::farm::nurture::core::contracts::common::BaseConditions* temp = basecondition_;
  basecondition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::BaseConditions* Filter::unsafe_arena_release_basecondition() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Filter.baseCondition)
  
  ::farm::nurture::core::contracts::common::BaseConditions* temp = basecondition_;
  basecondition_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::BaseConditions* Filter::_internal_mutable_basecondition() {
  
  if (basecondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::BaseConditions>(GetArena());
    basecondition_ = p;
  }
  return basecondition_;
}
inline ::farm::nurture::core::contracts::common::BaseConditions* Filter::mutable_basecondition() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Filter.baseCondition)
  return _internal_mutable_basecondition();
}
inline void Filter::set_allocated_basecondition(::farm::nurture::core::contracts::common::BaseConditions* basecondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basecondition_;
  }
  if (basecondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basecondition);
    if (message_arena != submessage_arena) {
      basecondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecondition, submessage_arena);
    }
    
  } else {
    
  }
  basecondition_ = basecondition;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Filter.baseCondition)
}

// .farm.nurture.core.contracts.common.LogicOperator combiningOperator = 2;
inline void Filter::clear_combiningoperator() {
  combiningoperator_ = 0;
}
inline ::farm::nurture::core::contracts::common::LogicOperator Filter::_internal_combiningoperator() const {
  return static_cast< ::farm::nurture::core::contracts::common::LogicOperator >(combiningoperator_);
}
inline ::farm::nurture::core::contracts::common::LogicOperator Filter::combiningoperator() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Filter.combiningOperator)
  return _internal_combiningoperator();
}
inline void Filter::_internal_set_combiningoperator(::farm::nurture::core::contracts::common::LogicOperator value) {
  
  combiningoperator_ = value;
}
inline void Filter::set_combiningoperator(::farm::nurture::core::contracts::common::LogicOperator value) {
  _internal_set_combiningoperator(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Filter.combiningOperator)
}

// repeated .farm.nurture.core.contracts.common.Filter conditions = 3;
inline int Filter::_internal_conditions_size() const {
  return conditions_.size();
}
inline int Filter::conditions_size() const {
  return _internal_conditions_size();
}
inline void Filter::clear_conditions() {
  conditions_.Clear();
}
inline ::farm::nurture::core::contracts::common::Filter* Filter::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Filter.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Filter >*
Filter::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.Filter.conditions)
  return &conditions_;
}
inline const ::farm::nurture::core::contracts::common::Filter& Filter::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Filter& Filter::conditions(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Filter.conditions)
  return _internal_conditions(index);
}
inline ::farm::nurture::core::contracts::common::Filter* Filter::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::farm::nurture::core::contracts::common::Filter* Filter::add_conditions() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.Filter.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Filter >&
Filter::conditions() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.Filter.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// BaseConditions

// .farm.nurture.core.contracts.common.FilterKey filterKey = 1;
inline void BaseConditions::clear_filterkey() {
  filterkey_ = 0;
}
inline ::farm::nurture::core::contracts::common::FilterKey BaseConditions::_internal_filterkey() const {
  return static_cast< ::farm::nurture::core::contracts::common::FilterKey >(filterkey_);
}
inline ::farm::nurture::core::contracts::common::FilterKey BaseConditions::filterkey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.BaseConditions.filterKey)
  return _internal_filterkey();
}
inline void BaseConditions::_internal_set_filterkey(::farm::nurture::core::contracts::common::FilterKey value) {
  
  filterkey_ = value;
}
inline void BaseConditions::set_filterkey(::farm::nurture::core::contracts::common::FilterKey value) {
  _internal_set_filterkey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.BaseConditions.filterKey)
}

// .farm.nurture.core.contracts.common.ComparisonCheckType operator = 2;
inline void BaseConditions::clear_operator_() {
  operator__ = 0;
}
inline ::farm::nurture::core::contracts::common::ComparisonCheckType BaseConditions::_internal_operator_() const {
  return static_cast< ::farm::nurture::core::contracts::common::ComparisonCheckType >(operator__);
}
inline ::farm::nurture::core::contracts::common::ComparisonCheckType BaseConditions::operator_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.BaseConditions.operator)
  return _internal_operator_();
}
inline void BaseConditions::_internal_set_operator_(::farm::nurture::core::contracts::common::ComparisonCheckType value) {
  
  operator__ = value;
}
inline void BaseConditions::set_operator_(::farm::nurture::core::contracts::common::ComparisonCheckType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.BaseConditions.operator)
}

// .farm.nurture.core.contracts.common.FilterArguments argument = 3;
inline bool BaseConditions::_internal_has_argument() const {
  return this != internal_default_instance() && argument_ != nullptr;
}
inline bool BaseConditions::has_argument() const {
  return _internal_has_argument();
}
inline void BaseConditions::clear_argument() {
  if (GetArena() == nullptr && argument_ != nullptr) {
    delete argument_;
  }
  argument_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::FilterArguments& BaseConditions::_internal_argument() const {
  const ::farm::nurture::core::contracts::common::FilterArguments* p = argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::FilterArguments&>(
      ::farm::nurture::core::contracts::common::_FilterArguments_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::FilterArguments& BaseConditions::argument() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.BaseConditions.argument)
  return _internal_argument();
}
inline void BaseConditions::unsafe_arena_set_allocated_argument(
    ::farm::nurture::core::contracts::common::FilterArguments* argument) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(argument_);
  }
  argument_ = argument;
  if (argument) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.BaseConditions.argument)
}
inline ::farm::nurture::core::contracts::common::FilterArguments* BaseConditions::release_argument() {
  
  ::farm::nurture::core::contracts::common::FilterArguments* temp = argument_;
  argument_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::FilterArguments* BaseConditions::unsafe_arena_release_argument() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.BaseConditions.argument)
  
  ::farm::nurture::core::contracts::common::FilterArguments* temp = argument_;
  argument_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::FilterArguments* BaseConditions::_internal_mutable_argument() {
  
  if (argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::FilterArguments>(GetArena());
    argument_ = p;
  }
  return argument_;
}
inline ::farm::nurture::core::contracts::common::FilterArguments* BaseConditions::mutable_argument() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.BaseConditions.argument)
  return _internal_mutable_argument();
}
inline void BaseConditions::set_allocated_argument(::farm::nurture::core::contracts::common::FilterArguments* argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete argument_;
  }
  if (argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(argument);
    if (message_arena != submessage_arena) {
      argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argument, submessage_arena);
    }
    
  } else {
    
  }
  argument_ = argument;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.BaseConditions.argument)
}

// -------------------------------------------------------------------

// ReferenceAttribute

// .farm.nurture.core.contracts.common.ReferenceType reference_type = 1;
inline void ReferenceAttribute::clear_reference_type() {
  reference_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ReferenceType ReferenceAttribute::_internal_reference_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ReferenceType >(reference_type_);
}
inline ::farm::nurture::core::contracts::common::ReferenceType ReferenceAttribute::reference_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ReferenceAttribute.reference_type)
  return _internal_reference_type();
}
inline void ReferenceAttribute::_internal_set_reference_type(::farm::nurture::core::contracts::common::ReferenceType value) {
  
  reference_type_ = value;
}
inline void ReferenceAttribute::set_reference_type(::farm::nurture::core::contracts::common::ReferenceType value) {
  _internal_set_reference_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ReferenceAttribute.reference_type)
}

// repeated .farm.nurture.core.contracts.common.Attribute attributes = 2;
inline int ReferenceAttribute::_internal_attributes_size() const {
  return attributes_.size();
}
inline int ReferenceAttribute::attributes_size() const {
  return _internal_attributes_size();
}
inline void ReferenceAttribute::clear_attributes() {
  attributes_.Clear();
}
inline ::farm::nurture::core::contracts::common::Attribute* ReferenceAttribute::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.ReferenceAttribute.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribute >*
ReferenceAttribute::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.ReferenceAttribute.attributes)
  return &attributes_;
}
inline const ::farm::nurture::core::contracts::common::Attribute& ReferenceAttribute::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribute& ReferenceAttribute::attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ReferenceAttribute.attributes)
  return _internal_attributes(index);
}
inline ::farm::nurture::core::contracts::common::Attribute* ReferenceAttribute::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribute* ReferenceAttribute::add_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.ReferenceAttribute.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribute >&
ReferenceAttribute::attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.ReferenceAttribute.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// ZoomRange

// int32 minZoom = 1;
inline void ZoomRange::clear_minzoom() {
  minzoom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZoomRange::_internal_minzoom() const {
  return minzoom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZoomRange::minzoom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ZoomRange.minZoom)
  return _internal_minzoom();
}
inline void ZoomRange::_internal_set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minzoom_ = value;
}
inline void ZoomRange::set_minzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minzoom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ZoomRange.minZoom)
}

// int32 maxZoom = 2;
inline void ZoomRange::clear_maxzoom() {
  maxzoom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZoomRange::_internal_maxzoom() const {
  return maxzoom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZoomRange::maxzoom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.ZoomRange.maxZoom)
  return _internal_maxzoom();
}
inline void ZoomRange::_internal_set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxzoom_ = value;
}
inline void ZoomRange::set_maxzoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxzoom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.ZoomRange.maxZoom)
}

// -------------------------------------------------------------------

// MapTile

// int32 zoom = 1;
inline void MapTile::clear_zoom() {
  zoom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapTile::_internal_zoom() const {
  return zoom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapTile::zoom() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.MapTile.zoom)
  return _internal_zoom();
}
inline void MapTile::_internal_set_zoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zoom_ = value;
}
inline void MapTile::set_zoom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.MapTile.zoom)
}

// int64 tileX = 2;
inline void MapTile::clear_tilex() {
  tilex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapTile::_internal_tilex() const {
  return tilex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapTile::tilex() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.MapTile.tileX)
  return _internal_tilex();
}
inline void MapTile::_internal_set_tilex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tilex_ = value;
}
inline void MapTile::set_tilex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tilex(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.MapTile.tileX)
}

// int64 tileY = 3;
inline void MapTile::clear_tiley() {
  tiley_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapTile::_internal_tiley() const {
  return tiley_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapTile::tiley() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.MapTile.tileY)
  return _internal_tiley();
}
inline void MapTile::_internal_set_tiley(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tiley_ = value;
}
inline void MapTile::set_tiley(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tiley(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.MapTile.tileY)
}

// -------------------------------------------------------------------

// Environment

// .farm.nurture.core.contracts.common.PlaceNamespace namespace = 1;
inline void Environment::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace Environment::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceNamespace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace Environment::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.namespace)
  return _internal_namespace_();
}
inline void Environment::_internal_set_namespace_(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  
  namespace__ = value;
}
inline void Environment::set_namespace_(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Environment.namespace)
}

// .farm.nurture.core.contracts.common.PlaceSourceType sourceType = 2;
inline void Environment::clear_sourcetype() {
  sourcetype_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType Environment::_internal_sourcetype() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceSourceType >(sourcetype_);
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType Environment::sourcetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.sourceType)
  return _internal_sourcetype();
}
inline void Environment::_internal_set_sourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  
  sourcetype_ = value;
}
inline void Environment::set_sourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Environment.sourceType)
}

// .farm.nurture.core.contracts.common.PlaceVisibleType visibleType = 3;
inline void Environment::clear_visibletype() {
  visibletype_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType Environment::_internal_visibletype() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceVisibleType >(visibletype_);
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType Environment::visibletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.visibleType)
  return _internal_visibletype();
}
inline void Environment::_internal_set_visibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  
  visibletype_ = value;
}
inline void Environment::set_visibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  _internal_set_visibletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Environment.visibleType)
}

// string model_version = 4;
inline void Environment::clear_model_version() {
  model_version_.ClearToEmpty();
}
inline const std::string& Environment::model_version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.model_version)
  return _internal_model_version();
}
inline void Environment::set_model_version(const std::string& value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Environment.model_version)
}
inline std::string* Environment::mutable_model_version() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Environment.model_version)
  return _internal_mutable_model_version();
}
inline const std::string& Environment::_internal_model_version() const {
  return model_version_.Get();
}
inline void Environment::_internal_set_model_version(const std::string& value) {
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Environment::set_model_version(std::string&& value) {
  
  model_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Environment.model_version)
}
inline void Environment::set_model_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Environment.model_version)
}
inline void Environment::set_model_version(const char* value,
    size_t size) {
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Environment.model_version)
}
inline std::string* Environment::_internal_mutable_model_version() {
  
  return model_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Environment::release_model_version() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Environment.model_version)
  return model_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Environment::set_allocated_model_version(std::string* model_version) {
  if (model_version != nullptr) {
    
  } else {
    
  }
  model_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Environment.model_version)
}

// .farm.nurture.core.contracts.common.ZoomRange zoom_hints = 5;
inline bool Environment::_internal_has_zoom_hints() const {
  return this != internal_default_instance() && zoom_hints_ != nullptr;
}
inline bool Environment::has_zoom_hints() const {
  return _internal_has_zoom_hints();
}
inline void Environment::clear_zoom_hints() {
  if (GetArena() == nullptr && zoom_hints_ != nullptr) {
    delete zoom_hints_;
  }
  zoom_hints_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::ZoomRange& Environment::_internal_zoom_hints() const {
  const ::farm::nurture::core::contracts::common::ZoomRange* p = zoom_hints_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ZoomRange&>(
      ::farm::nurture::core::contracts::common::_ZoomRange_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ZoomRange& Environment::zoom_hints() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.zoom_hints)
  return _internal_zoom_hints();
}
inline void Environment::unsafe_arena_set_allocated_zoom_hints(
    ::farm::nurture::core::contracts::common::ZoomRange* zoom_hints) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zoom_hints_);
  }
  zoom_hints_ = zoom_hints;
  if (zoom_hints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.Environment.zoom_hints)
}
inline ::farm::nurture::core::contracts::common::ZoomRange* Environment::release_zoom_hints() {
  
  ::farm::nurture::core::contracts::common::ZoomRange* temp = zoom_hints_;
  zoom_hints_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ZoomRange* Environment::unsafe_arena_release_zoom_hints() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Environment.zoom_hints)
  
  ::farm::nurture::core::contracts::common::ZoomRange* temp = zoom_hints_;
  zoom_hints_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ZoomRange* Environment::_internal_mutable_zoom_hints() {
  
  if (zoom_hints_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ZoomRange>(GetArena());
    zoom_hints_ = p;
  }
  return zoom_hints_;
}
inline ::farm::nurture::core::contracts::common::ZoomRange* Environment::mutable_zoom_hints() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Environment.zoom_hints)
  return _internal_mutable_zoom_hints();
}
inline void Environment::set_allocated_zoom_hints(::farm::nurture::core::contracts::common::ZoomRange* zoom_hints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zoom_hints_;
  }
  if (zoom_hints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zoom_hints);
    if (message_arena != submessage_arena) {
      zoom_hints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zoom_hints, submessage_arena);
    }
    
  } else {
    
  }
  zoom_hints_ = zoom_hints;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Environment.zoom_hints)
}

// .farm.nurture.core.contracts.common.UI_CLIENT client = 6;
inline void Environment::clear_client() {
  client_ = 0;
}
inline ::farm::nurture::core::contracts::common::UI_CLIENT Environment::_internal_client() const {
  return static_cast< ::farm::nurture::core::contracts::common::UI_CLIENT >(client_);
}
inline ::farm::nurture::core::contracts::common::UI_CLIENT Environment::client() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Environment.client)
  return _internal_client();
}
inline void Environment::_internal_set_client(::farm::nurture::core::contracts::common::UI_CLIENT value) {
  
  client_ = value;
}
inline void Environment::set_client(::farm::nurture::core::contracts::common::UI_CLIENT value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Environment.client)
}

// -------------------------------------------------------------------

// Place

// string geometry = 1;
inline void Place::clear_geometry() {
  geometry_.ClearToEmpty();
}
inline const std::string& Place::geometry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.geometry)
  return _internal_geometry();
}
inline void Place::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.geometry)
}
inline std::string* Place::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Place.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& Place::_internal_geometry() const {
  return geometry_.Get();
}
inline void Place::_internal_set_geometry(const std::string& value) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Place::set_geometry(std::string&& value) {
  
  geometry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Place.geometry)
}
inline void Place::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Place.geometry)
}
inline void Place::set_geometry(const char* value,
    size_t size) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Place.geometry)
}
inline std::string* Place::_internal_mutable_geometry() {
  
  return geometry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Place::release_geometry() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Place.geometry)
  return geometry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Place::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Place.geometry)
}

// .farm.nurture.core.contracts.common.GeometryRepresentationType representation_type = 2;
inline void Place::clear_representation_type() {
  representation_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType Place::_internal_representation_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeometryRepresentationType >(representation_type_);
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType Place::representation_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.representation_type)
  return _internal_representation_type();
}
inline void Place::_internal_set_representation_type(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  
  representation_type_ = value;
}
inline void Place::set_representation_type(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  _internal_set_representation_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.representation_type)
}

// repeated .farm.nurture.core.contracts.common.PlaceTag tags = 3;
inline int Place::_internal_tags_size() const {
  return tags_.size();
}
inline int Place::tags_size() const {
  return _internal_tags_size();
}
inline void Place::clear_tags() {
  tags_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* Place::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Place.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
Place::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.Place.tags)
  return &tags_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& Place::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& Place::tags(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.tags)
  return _internal_tags(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* Place::_internal_add_tags() {
  return tags_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* Place::add_tags() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.Place.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
Place::tags() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.Place.tags)
  return tags_;
}

// repeated .farm.nurture.core.contracts.common.ReferenceAttribute reference_attributes = 4;
inline int Place::_internal_reference_attributes_size() const {
  return reference_attributes_.size();
}
inline int Place::reference_attributes_size() const {
  return _internal_reference_attributes_size();
}
inline void Place::clear_reference_attributes() {
  reference_attributes_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* Place::mutable_reference_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Place.reference_attributes)
  return reference_attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
Place::mutable_reference_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.Place.reference_attributes)
  return &reference_attributes_;
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& Place::_internal_reference_attributes(int index) const {
  return reference_attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& Place::reference_attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.reference_attributes)
  return _internal_reference_attributes(index);
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* Place::_internal_add_reference_attributes() {
  return reference_attributes_.Add();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* Place::add_reference_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.Place.reference_attributes)
  return _internal_add_reference_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
Place::reference_attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.Place.reference_attributes)
  return reference_attributes_;
}

// .farm.nurture.core.contracts.common.TimeRange time_range = 5;
inline bool Place::_internal_has_time_range() const {
  return this != internal_default_instance() && time_range_ != nullptr;
}
inline bool Place::has_time_range() const {
  return _internal_has_time_range();
}
inline const ::farm::nurture::core::contracts::common::TimeRange& Place::_internal_time_range() const {
  const ::farm::nurture::core::contracts::common::TimeRange* p = time_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::TimeRange&>(
      ::farm::nurture::core::contracts::common::_TimeRange_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::TimeRange& Place::time_range() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.time_range)
  return _internal_time_range();
}
inline void Place::unsafe_arena_set_allocated_time_range(
    ::farm::nurture::core::contracts::common::TimeRange* time_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_);
  }
  time_range_ = time_range;
  if (time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.Place.time_range)
}
inline ::farm::nurture::core::contracts::common::TimeRange* Place::release_time_range() {
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = time_range_;
  time_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* Place::unsafe_arena_release_time_range() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Place.time_range)
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = time_range_;
  time_range_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* Place::_internal_mutable_time_range() {
  
  if (time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeRange>(GetArena());
    time_range_ = p;
  }
  return time_range_;
}
inline ::farm::nurture::core::contracts::common::TimeRange* Place::mutable_time_range() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Place.time_range)
  return _internal_mutable_time_range();
}
inline void Place::set_allocated_time_range(::farm::nurture::core::contracts::common::TimeRange* time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_);
  }
  if (time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range)->GetArena();
    if (message_arena != submessage_arena) {
      time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    
  } else {
    
  }
  time_range_ = time_range;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Place.time_range)
}

// int64 place_id = 6;
inline void Place::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.place_id)
  return _internal_place_id();
}
inline void Place::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void Place::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.place_id)
}

// int64 source_id = 7;
inline void Place::clear_source_id() {
  source_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::_internal_source_id() const {
  return source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::source_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.source_id)
  return _internal_source_id();
}
inline void Place::_internal_set_source_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  source_id_ = value;
}
inline void Place::set_source_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.source_id)
}

// int64 version = 8;
inline void Place::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Place::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.version)
  return _internal_version();
}
inline void Place::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void Place::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.version)
}

// bool deleted = 9;
inline void Place::clear_deleted() {
  deleted_ = false;
}
inline bool Place::_internal_deleted() const {
  return deleted_;
}
inline bool Place::deleted() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.deleted)
  return _internal_deleted();
}
inline void Place::_internal_set_deleted(bool value) {
  
  deleted_ = value;
}
inline void Place::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.deleted)
}

// bool overlap = 10;
inline void Place::clear_overlap() {
  overlap_ = false;
}
inline bool Place::_internal_overlap() const {
  return overlap_;
}
inline bool Place::overlap() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.overlap)
  return _internal_overlap();
}
inline void Place::_internal_set_overlap(bool value) {
  
  overlap_ = value;
}
inline void Place::set_overlap(bool value) {
  _internal_set_overlap(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.overlap)
}

// string source_id_str = 11;
inline void Place::clear_source_id_str() {
  source_id_str_.ClearToEmpty();
}
inline const std::string& Place::source_id_str() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Place.source_id_str)
  return _internal_source_id_str();
}
inline void Place::set_source_id_str(const std::string& value) {
  _internal_set_source_id_str(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Place.source_id_str)
}
inline std::string* Place::mutable_source_id_str() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Place.source_id_str)
  return _internal_mutable_source_id_str();
}
inline const std::string& Place::_internal_source_id_str() const {
  return source_id_str_.Get();
}
inline void Place::_internal_set_source_id_str(const std::string& value) {
  
  source_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Place::set_source_id_str(std::string&& value) {
  
  source_id_str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Place.source_id_str)
}
inline void Place::set_source_id_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Place.source_id_str)
}
inline void Place::set_source_id_str(const char* value,
    size_t size) {
  
  source_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Place.source_id_str)
}
inline std::string* Place::_internal_mutable_source_id_str() {
  
  return source_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Place::release_source_id_str() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Place.source_id_str)
  return source_id_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Place::set_allocated_source_id_str(std::string* source_id_str) {
  if (source_id_str != nullptr) {
    
  } else {
    
  }
  source_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Place.source_id_str)
}

// -------------------------------------------------------------------

// Attribute

// .farm.nurture.core.contracts.common.AttributeKey key = 1;
inline void Attribute::clear_key() {
  key_ = 0;
}
inline ::farm::nurture::core::contracts::common::AttributeKey Attribute::_internal_key() const {
  return static_cast< ::farm::nurture::core::contracts::common::AttributeKey >(key_);
}
inline ::farm::nurture::core::contracts::common::AttributeKey Attribute::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Attribute.key)
  return _internal_key();
}
inline void Attribute::_internal_set_key(::farm::nurture::core::contracts::common::AttributeKey value) {
  
  key_ = value;
}
inline void Attribute::set_key(::farm::nurture::core::contracts::common::AttributeKey value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Attribute.key)
}

// .farm.nurture.core.contracts.common.Value value = 2;
inline bool Attribute::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Attribute::has_value() const {
  return _internal_has_value();
}
inline void Attribute::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Value& Attribute::_internal_value() const {
  const ::farm::nurture::core::contracts::common::Value* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Value&>(
      ::farm::nurture::core::contracts::common::_Value_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Value& Attribute::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Attribute.value)
  return _internal_value();
}
inline void Attribute::unsafe_arena_set_allocated_value(
    ::farm::nurture::core::contracts::common::Value* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.Attribute.value)
}
inline ::farm::nurture::core::contracts::common::Value* Attribute::release_value() {
  
  ::farm::nurture::core::contracts::common::Value* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Value* Attribute::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Attribute.value)
  
  ::farm::nurture::core::contracts::common::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Value* Attribute::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Value>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::farm::nurture::core::contracts::common::Value* Attribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Attribute.value)
  return _internal_mutable_value();
}
inline void Attribute::set_allocated_value(::farm::nurture::core::contracts::common::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Attribute.value)
}

// -------------------------------------------------------------------

// Value

// .farm.nurture.core.contracts.common.ValueType value_type = 1;
inline void Value::clear_value_type() {
  value_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValueType Value::_internal_value_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValueType >(value_type_);
}
inline ::farm::nurture::core::contracts::common::ValueType Value::value_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.value_type)
  return _internal_value_type();
}
inline void Value::_internal_set_value_type(::farm::nurture::core::contracts::common::ValueType value) {
  
  value_type_ = value;
}
inline void Value::set_value_type(::farm::nurture::core::contracts::common::ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.value_type)
}

// double number_value = 2;
inline void Value::clear_number_value() {
  number_value_ = 0;
}
inline double Value::_internal_number_value() const {
  return number_value_;
}
inline double Value::number_value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.number_value)
  return _internal_number_value();
}
inline void Value::_internal_set_number_value(double value) {
  
  number_value_ = value;
}
inline void Value::set_number_value(double value) {
  _internal_set_number_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.number_value)
}

// string string_value = 3;
inline void Value::clear_string_value() {
  string_value_.ClearToEmpty();
}
inline const std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.string_value)
  return _internal_string_value();
}
inline void Value::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.string_value)
}
inline std::string* Value::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.Value.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& Value::_internal_string_value() const {
  return string_value_.Get();
}
inline void Value::_internal_set_string_value(const std::string& value) {
  
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Value::set_string_value(std::string&& value) {
  
  string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.Value.string_value)
}
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.Value.string_value)
}
inline void Value::set_string_value(const char* value,
    size_t size) {
  
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.Value.string_value)
}
inline std::string* Value::_internal_mutable_string_value() {
  
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.Value.string_value)
  return string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Value::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    
  } else {
    
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.Value.string_value)
}

// bool bool_value = 4;
inline void Value::clear_bool_value() {
  bool_value_ = false;
}
inline bool Value::_internal_bool_value() const {
  return bool_value_;
}
inline bool Value::bool_value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.bool_value)
  return _internal_bool_value();
}
inline void Value::_internal_set_bool_value(bool value) {
  
  bool_value_ = value;
}
inline void Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.bool_value)
}

// int64 int64_value = 5;
inline void Value::clear_int64_value() {
  int64_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::_internal_int64_value() const {
  return int64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::int64_value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.int64_value)
  return _internal_int64_value();
}
inline void Value::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  int64_value_ = value;
}
inline void Value::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.int64_value)
}

// int32 int32_value = 6;
inline void Value::clear_int32_value() {
  int32_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::_internal_int32_value() const {
  return int32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::int32_value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Value.int32_value)
  return _internal_int32_value();
}
inline void Value::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int32_value_ = value;
}
inline void Value::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Value.int32_value)
}

// -------------------------------------------------------------------

// Options

// bool check_overlap = 1;
inline void Options::clear_check_overlap() {
  check_overlap_ = false;
}
inline bool Options::_internal_check_overlap() const {
  return check_overlap_;
}
inline bool Options::check_overlap() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Options.check_overlap)
  return _internal_check_overlap();
}
inline void Options::_internal_set_check_overlap(bool value) {
  
  check_overlap_ = value;
}
inline void Options::set_check_overlap(bool value) {
  _internal_set_check_overlap(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Options.check_overlap)
}

// bool get_details = 2;
inline void Options::clear_get_details() {
  get_details_ = false;
}
inline bool Options::_internal_get_details() const {
  return get_details_;
}
inline bool Options::get_details() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Options.get_details)
  return _internal_get_details();
}
inline void Options::_internal_set_get_details(bool value) {
  
  get_details_ = value;
}
inline void Options::set_get_details(bool value) {
  _internal_set_get_details(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Options.get_details)
}

// -------------------------------------------------------------------

// UserContext

// int64 ugdnID = 1;
inline void UserContext::clear_ugdnid() {
  ugdnid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserContext::_internal_ugdnid() const {
  return ugdnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserContext::ugdnid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UserContext.ugdnID)
  return _internal_ugdnid();
}
inline void UserContext::_internal_set_ugdnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ugdnid_ = value;
}
inline void UserContext::set_ugdnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ugdnid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UserContext.ugdnID)
}

// -------------------------------------------------------------------

// PlacesData

// string SourceId = 1;
inline void PlacesData::clear_sourceid() {
  sourceid_.ClearToEmpty();
}
inline const std::string& PlacesData::sourceid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.SourceId)
  return _internal_sourceid();
}
inline void PlacesData::set_sourceid(const std::string& value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.SourceId)
}
inline std::string* PlacesData::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlacesData.SourceId)
  return _internal_mutable_sourceid();
}
inline const std::string& PlacesData::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void PlacesData::_internal_set_sourceid(const std::string& value) {
  
  sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlacesData::set_sourceid(std::string&& value) {
  
  sourceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlacesData.SourceId)
}
inline void PlacesData::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlacesData.SourceId)
}
inline void PlacesData::set_sourceid(const char* value,
    size_t size) {
  
  sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlacesData.SourceId)
}
inline std::string* PlacesData::_internal_mutable_sourceid() {
  
  return sourceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlacesData::release_sourceid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlacesData.SourceId)
  return sourceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlacesData::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    
  } else {
    
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlacesData.SourceId)
}

// string geometry = 2;
inline void PlacesData::clear_geometry() {
  geometry_.ClearToEmpty();
}
inline const std::string& PlacesData::geometry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.geometry)
  return _internal_geometry();
}
inline void PlacesData::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.geometry)
}
inline std::string* PlacesData::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlacesData.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& PlacesData::_internal_geometry() const {
  return geometry_.Get();
}
inline void PlacesData::_internal_set_geometry(const std::string& value) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlacesData::set_geometry(std::string&& value) {
  
  geometry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.PlacesData.geometry)
}
inline void PlacesData::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlacesData.geometry)
}
inline void PlacesData::set_geometry(const char* value,
    size_t size) {
  
  geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlacesData.geometry)
}
inline std::string* PlacesData::_internal_mutable_geometry() {
  
  return geometry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlacesData::release_geometry() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.PlacesData.geometry)
  return geometry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlacesData::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.PlacesData.geometry)
}

// int64 PlaceId = 3;
inline void PlacesData::clear_placeid() {
  placeid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlacesData::_internal_placeid() const {
  return placeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlacesData::placeid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.PlaceId)
  return _internal_placeid();
}
inline void PlacesData::_internal_set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  placeid_ = value;
}
inline void PlacesData::set_placeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_placeid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.PlaceId)
}

// .farm.nurture.core.contracts.common.GeometryRepresentationType geometryRepresentationType = 4;
inline void PlacesData::clear_geometryrepresentationtype() {
  geometryrepresentationtype_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType PlacesData::_internal_geometryrepresentationtype() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeometryRepresentationType >(geometryrepresentationtype_);
}
inline ::farm::nurture::core::contracts::common::GeometryRepresentationType PlacesData::geometryrepresentationtype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.geometryRepresentationType)
  return _internal_geometryrepresentationtype();
}
inline void PlacesData::_internal_set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  
  geometryrepresentationtype_ = value;
}
inline void PlacesData::set_geometryrepresentationtype(::farm::nurture::core::contracts::common::GeometryRepresentationType value) {
  _internal_set_geometryrepresentationtype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.geometryRepresentationType)
}

// repeated .farm.nurture.core.contracts.common.PlaceTag PlaceTags = 5;
inline int PlacesData::_internal_placetags_size() const {
  return placetags_.size();
}
inline int PlacesData::placetags_size() const {
  return _internal_placetags_size();
}
inline void PlacesData::clear_placetags() {
  placetags_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* PlacesData::mutable_placetags(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlacesData.PlaceTags)
  return placetags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
PlacesData::mutable_placetags() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlacesData.PlaceTags)
  return &placetags_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& PlacesData::_internal_placetags(int index) const {
  return placetags_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& PlacesData::placetags(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.PlaceTags)
  return _internal_placetags(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* PlacesData::_internal_add_placetags() {
  return placetags_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* PlacesData::add_placetags() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlacesData.PlaceTags)
  return _internal_add_placetags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
PlacesData::placetags() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlacesData.PlaceTags)
  return placetags_;
}

// .farm.nurture.core.contracts.common.PlaceSourceType place_source_type = 6;
inline void PlacesData::clear_place_source_type() {
  place_source_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType PlacesData::_internal_place_source_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceSourceType >(place_source_type_);
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType PlacesData::place_source_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.place_source_type)
  return _internal_place_source_type();
}
inline void PlacesData::_internal_set_place_source_type(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  
  place_source_type_ = value;
}
inline void PlacesData::set_place_source_type(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  _internal_set_place_source_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.place_source_type)
}

// .farm.nurture.core.contracts.common.PlaceNamespace place_name_space = 7;
inline void PlacesData::clear_place_name_space() {
  place_name_space_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace PlacesData::_internal_place_name_space() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceNamespace >(place_name_space_);
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace PlacesData::place_name_space() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.place_name_space)
  return _internal_place_name_space();
}
inline void PlacesData::_internal_set_place_name_space(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  
  place_name_space_ = value;
}
inline void PlacesData::set_place_name_space(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  _internal_set_place_name_space(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.place_name_space)
}

// .farm.nurture.core.contracts.common.PlaceVisibleType place_visible_type = 8;
inline void PlacesData::clear_place_visible_type() {
  place_visible_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType PlacesData::_internal_place_visible_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceVisibleType >(place_visible_type_);
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType PlacesData::place_visible_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.place_visible_type)
  return _internal_place_visible_type();
}
inline void PlacesData::_internal_set_place_visible_type(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  
  place_visible_type_ = value;
}
inline void PlacesData::set_place_visible_type(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  _internal_set_place_visible_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.place_visible_type)
}

// .farm.nurture.core.contracts.common.GeometryType geometry_type = 9;
inline void PlacesData::clear_geometry_type() {
  geometry_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::GeometryType PlacesData::_internal_geometry_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::GeometryType >(geometry_type_);
}
inline ::farm::nurture::core::contracts::common::GeometryType PlacesData::geometry_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlacesData.geometry_type)
  return _internal_geometry_type();
}
inline void PlacesData::_internal_set_geometry_type(::farm::nurture::core::contracts::common::GeometryType value) {
  
  geometry_type_ = value;
}
inline void PlacesData::set_geometry_type(::farm::nurture::core::contracts::common::GeometryType value) {
  _internal_set_geometry_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlacesData.geometry_type)
}

// -------------------------------------------------------------------

// Configuration

// bool audit_required = 1;
inline void Configuration::clear_audit_required() {
  audit_required_ = false;
}
inline bool Configuration::_internal_audit_required() const {
  return audit_required_;
}
inline bool Configuration::audit_required() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Configuration.audit_required)
  return _internal_audit_required();
}
inline void Configuration::_internal_set_audit_required(bool value) {
  
  audit_required_ = value;
}
inline void Configuration::set_audit_required(bool value) {
  _internal_set_audit_required(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Configuration.audit_required)
}

// bool overlap = 2;
inline void Configuration::clear_overlap() {
  overlap_ = false;
}
inline bool Configuration::_internal_overlap() const {
  return overlap_;
}
inline bool Configuration::overlap() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Configuration.overlap)
  return _internal_overlap();
}
inline void Configuration::_internal_set_overlap(bool value) {
  
  overlap_ = value;
}
inline void Configuration::set_overlap(bool value) {
  _internal_set_overlap(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Configuration.overlap)
}

// bool soft_delete = 3;
inline void Configuration::clear_soft_delete() {
  soft_delete_ = false;
}
inline bool Configuration::_internal_soft_delete() const {
  return soft_delete_;
}
inline bool Configuration::soft_delete() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Configuration.soft_delete)
  return _internal_soft_delete();
}
inline void Configuration::_internal_set_soft_delete(bool value) {
  
  soft_delete_ = value;
}
inline void Configuration::set_soft_delete(bool value) {
  _internal_set_soft_delete(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Configuration.soft_delete)
}

// .farm.nurture.core.contracts.common.ServiceName service_name = 4;
inline void Configuration::clear_service_name() {
  service_name_ = 0;
}
inline ::farm::nurture::core::contracts::common::ServiceName Configuration::_internal_service_name() const {
  return static_cast< ::farm::nurture::core::contracts::common::ServiceName >(service_name_);
}
inline ::farm::nurture::core::contracts::common::ServiceName Configuration::service_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Configuration.service_name)
  return _internal_service_name();
}
inline void Configuration::_internal_set_service_name(::farm::nurture::core::contracts::common::ServiceName value) {
  
  service_name_ = value;
}
inline void Configuration::set_service_name(::farm::nurture::core::contracts::common::ServiceName value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Configuration.service_name)
}

// -------------------------------------------------------------------

// TileRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool TileRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool TileRequest::has_env() const {
  return _internal_has_env();
}
inline void TileRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& TileRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& TileRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TileRequest.env)
  return _internal_env();
}
inline void TileRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TileRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* TileRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* TileRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TileRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* TileRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* TileRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TileRequest.env)
  return _internal_mutable_env();
}
inline void TileRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TileRequest.env)
}

// repeated .farm.nurture.core.contracts.common.MapTile mapTiles = 2;
inline int TileRequest::_internal_maptiles_size() const {
  return maptiles_.size();
}
inline int TileRequest::maptiles_size() const {
  return _internal_maptiles_size();
}
inline void TileRequest::clear_maptiles() {
  maptiles_.Clear();
}
inline ::farm::nurture::core::contracts::common::MapTile* TileRequest::mutable_maptiles(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TileRequest.mapTiles)
  return maptiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >*
TileRequest::mutable_maptiles() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.TileRequest.mapTiles)
  return &maptiles_;
}
inline const ::farm::nurture::core::contracts::common::MapTile& TileRequest::_internal_maptiles(int index) const {
  return maptiles_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::MapTile& TileRequest::maptiles(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TileRequest.mapTiles)
  return _internal_maptiles(index);
}
inline ::farm::nurture::core::contracts::common::MapTile* TileRequest::_internal_add_maptiles() {
  return maptiles_.Add();
}
inline ::farm::nurture::core::contracts::common::MapTile* TileRequest::add_maptiles() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.TileRequest.mapTiles)
  return _internal_add_maptiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >&
TileRequest::maptiles() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.TileRequest.mapTiles)
  return maptiles_;
}

// .farm.nurture.core.contracts.common.Filter tag_filter = 3;
inline bool TileRequest::_internal_has_tag_filter() const {
  return this != internal_default_instance() && tag_filter_ != nullptr;
}
inline bool TileRequest::has_tag_filter() const {
  return _internal_has_tag_filter();
}
inline void TileRequest::clear_tag_filter() {
  if (GetArena() == nullptr && tag_filter_ != nullptr) {
    delete tag_filter_;
  }
  tag_filter_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Filter& TileRequest::_internal_tag_filter() const {
  const ::farm::nurture::core::contracts::common::Filter* p = tag_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Filter&>(
      ::farm::nurture::core::contracts::common::_Filter_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Filter& TileRequest::tag_filter() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TileRequest.tag_filter)
  return _internal_tag_filter();
}
inline void TileRequest::unsafe_arena_set_allocated_tag_filter(
    ::farm::nurture::core::contracts::common::Filter* tag_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_filter_);
  }
  tag_filter_ = tag_filter;
  if (tag_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TileRequest.tag_filter)
}
inline ::farm::nurture::core::contracts::common::Filter* TileRequest::release_tag_filter() {
  
  ::farm::nurture::core::contracts::common::Filter* temp = tag_filter_;
  tag_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Filter* TileRequest::unsafe_arena_release_tag_filter() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TileRequest.tag_filter)
  
  ::farm::nurture::core::contracts::common::Filter* temp = tag_filter_;
  tag_filter_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Filter* TileRequest::_internal_mutable_tag_filter() {
  
  if (tag_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Filter>(GetArena());
    tag_filter_ = p;
  }
  return tag_filter_;
}
inline ::farm::nurture::core::contracts::common::Filter* TileRequest::mutable_tag_filter() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TileRequest.tag_filter)
  return _internal_mutable_tag_filter();
}
inline void TileRequest::set_allocated_tag_filter(::farm::nurture::core::contracts::common::Filter* tag_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_filter_;
  }
  if (tag_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag_filter);
    if (message_arena != submessage_arena) {
      tag_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_filter, submessage_arena);
    }
    
  } else {
    
  }
  tag_filter_ = tag_filter;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TileRequest.tag_filter)
}

// -------------------------------------------------------------------

// TileResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool TileResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool TileResponse::has_env() const {
  return _internal_has_env();
}
inline void TileResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& TileResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& TileResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TileResponse.env)
  return _internal_env();
}
inline void TileResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.TileResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* TileResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* TileResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.TileResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* TileResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* TileResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TileResponse.env)
  return _internal_mutable_env();
}
inline void TileResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.TileResponse.env)
}

// repeated .farm.nurture.core.contracts.common.Place places = 2;
inline int TileResponse::_internal_places_size() const {
  return places_.size();
}
inline int TileResponse::places_size() const {
  return _internal_places_size();
}
inline void TileResponse::clear_places() {
  places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* TileResponse::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.TileResponse.places)
  return places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
TileResponse::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.TileResponse.places)
  return &places_;
}
inline const ::farm::nurture::core::contracts::common::Place& TileResponse::_internal_places(int index) const {
  return places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& TileResponse::places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.TileResponse.places)
  return _internal_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* TileResponse::_internal_add_places() {
  return places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* TileResponse::add_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.TileResponse.places)
  return _internal_add_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
TileResponse::places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.TileResponse.places)
  return places_;
}

// -------------------------------------------------------------------

// UpdateRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateRequest::has_env() const {
  return _internal_has_env();
}
inline void UpdateRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateRequest.env)
  return _internal_env();
}
inline void UpdateRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateRequest.env)
  return _internal_mutable_env();
}
inline void UpdateRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateRequest.env)
}

// repeated .farm.nurture.core.contracts.common.Place places = 2;
inline int UpdateRequest::_internal_places_size() const {
  return places_.size();
}
inline int UpdateRequest::places_size() const {
  return _internal_places_size();
}
inline void UpdateRequest::clear_places() {
  places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* UpdateRequest::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateRequest.places)
  return places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
UpdateRequest::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateRequest.places)
  return &places_;
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateRequest::_internal_places(int index) const {
  return places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateRequest::places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateRequest.places)
  return _internal_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* UpdateRequest::_internal_add_places() {
  return places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* UpdateRequest::add_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateRequest.places)
  return _internal_add_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
UpdateRequest::places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateRequest.places)
  return places_;
}

// .farm.nurture.core.contracts.common.Options options = 3;
inline bool UpdateRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateRequest::has_options() const {
  return _internal_has_options();
}
inline void UpdateRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateRequest::_internal_options() const {
  const ::farm::nurture::core::contracts::common::Options* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Options&>(
      ::farm::nurture::core::contracts::common::_Options_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateRequest::options() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateRequest.options)
  return _internal_options();
}
inline void UpdateRequest::unsafe_arena_set_allocated_options(
    ::farm::nurture::core::contracts::common::Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateRequest.options)
}
inline ::farm::nurture::core::contracts::common::Options* UpdateRequest::release_options() {
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateRequest.options)
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateRequest.options)
  return _internal_mutable_options();
}
inline void UpdateRequest::set_allocated_options(::farm::nurture::core::contracts::common::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateRequest.options)
}

// -------------------------------------------------------------------

// UpdateResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateResponse::has_env() const {
  return _internal_has_env();
}
inline void UpdateResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateResponse.env)
  return _internal_env();
}
inline void UpdateResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateResponse.env)
  return _internal_mutable_env();
}
inline void UpdateResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateResponse.env)
}

// repeated .farm.nurture.core.contracts.common.Place updated_places = 2;
inline int UpdateResponse::_internal_updated_places_size() const {
  return updated_places_.size();
}
inline int UpdateResponse::updated_places_size() const {
  return _internal_updated_places_size();
}
inline void UpdateResponse::clear_updated_places() {
  updated_places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* UpdateResponse::mutable_updated_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateResponse.updated_places)
  return updated_places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
UpdateResponse::mutable_updated_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateResponse.updated_places)
  return &updated_places_;
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateResponse::_internal_updated_places(int index) const {
  return updated_places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateResponse::updated_places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateResponse.updated_places)
  return _internal_updated_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* UpdateResponse::_internal_add_updated_places() {
  return updated_places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* UpdateResponse::add_updated_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateResponse.updated_places)
  return _internal_add_updated_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
UpdateResponse::updated_places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateResponse.updated_places)
  return updated_places_;
}

// int64 updated_places_count = 3;
inline void UpdateResponse::clear_updated_places_count() {
  updated_places_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateResponse::_internal_updated_places_count() const {
  return updated_places_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateResponse::updated_places_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateResponse.updated_places_count)
  return _internal_updated_places_count();
}
inline void UpdateResponse::_internal_set_updated_places_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_places_count_ = value;
}
inline void UpdateResponse::set_updated_places_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_places_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateResponse.updated_places_count)
}

// repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
inline int UpdateResponse::_internal_places_with_overlaps_size() const {
  return places_with_overlaps_.size();
}
inline int UpdateResponse::places_with_overlaps_size() const {
  return _internal_places_with_overlaps_size();
}
inline void UpdateResponse::clear_places_with_overlaps() {
  places_with_overlaps_.Clear();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* UpdateResponse::mutable_places_with_overlaps(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps)
  return places_with_overlaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >*
UpdateResponse::mutable_places_with_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps)
  return &places_with_overlaps_;
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlaces& UpdateResponse::_internal_places_with_overlaps(int index) const {
  return places_with_overlaps_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlaces& UpdateResponse::places_with_overlaps(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps)
  return _internal_places_with_overlaps(index);
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* UpdateResponse::_internal_add_places_with_overlaps() {
  return places_with_overlaps_.Add();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* UpdateResponse::add_places_with_overlaps() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps)
  return _internal_add_places_with_overlaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >&
UpdateResponse::places_with_overlaps() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateResponse.places_with_overlaps)
  return places_with_overlaps_;
}

// -------------------------------------------------------------------

// DeleteRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool DeleteRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool DeleteRequest::has_env() const {
  return _internal_has_env();
}
inline void DeleteRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& DeleteRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& DeleteRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DeleteRequest.env)
  return _internal_env();
}
inline void DeleteRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.DeleteRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DeleteRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DeleteRequest.env)
  return _internal_mutable_env();
}
inline void DeleteRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DeleteRequest.env)
}

// repeated int64 place_ids = 2;
inline int DeleteRequest::_internal_place_ids_size() const {
  return place_ids_.size();
}
inline int DeleteRequest::place_ids_size() const {
  return _internal_place_ids_size();
}
inline void DeleteRequest::clear_place_ids() {
  place_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_place_ids(int index) const {
  return place_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::place_ids(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DeleteRequest.place_ids)
  return _internal_place_ids(index);
}
inline void DeleteRequest::set_place_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  place_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DeleteRequest.place_ids)
}
inline void DeleteRequest::_internal_add_place_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  place_ids_.Add(value);
}
inline void DeleteRequest::add_place_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_place_ids(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.DeleteRequest.place_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DeleteRequest::_internal_place_ids() const {
  return place_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DeleteRequest::place_ids() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.DeleteRequest.place_ids)
  return _internal_place_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DeleteRequest::_internal_mutable_place_ids() {
  return &place_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DeleteRequest::mutable_place_ids() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.DeleteRequest.place_ids)
  return _internal_mutable_place_ids();
}

// -------------------------------------------------------------------

// DeleteResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool DeleteResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool DeleteResponse::has_env() const {
  return _internal_has_env();
}
inline void DeleteResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& DeleteResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& DeleteResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DeleteResponse.env)
  return _internal_env();
}
inline void DeleteResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.DeleteResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.DeleteResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* DeleteResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DeleteResponse.env)
  return _internal_mutable_env();
}
inline void DeleteResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.DeleteResponse.env)
}

// int64 deleted_count = 2;
inline void DeleteResponse::clear_deleted_count() {
  deleted_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DeleteResponse.deleted_count)
  return _internal_deleted_count();
}
inline void DeleteResponse::_internal_set_deleted_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deleted_count_ = value;
}
inline void DeleteResponse::set_deleted_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.DeleteResponse.deleted_count)
}

// repeated .farm.nurture.core.contracts.common.Place deleted_places = 3;
inline int DeleteResponse::_internal_deleted_places_size() const {
  return deleted_places_.size();
}
inline int DeleteResponse::deleted_places_size() const {
  return _internal_deleted_places_size();
}
inline void DeleteResponse::clear_deleted_places() {
  deleted_places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* DeleteResponse::mutable_deleted_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.DeleteResponse.deleted_places)
  return deleted_places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
DeleteResponse::mutable_deleted_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.DeleteResponse.deleted_places)
  return &deleted_places_;
}
inline const ::farm::nurture::core::contracts::common::Place& DeleteResponse::_internal_deleted_places(int index) const {
  return deleted_places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& DeleteResponse::deleted_places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.DeleteResponse.deleted_places)
  return _internal_deleted_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* DeleteResponse::_internal_add_deleted_places() {
  return deleted_places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* DeleteResponse::add_deleted_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.DeleteResponse.deleted_places)
  return _internal_add_deleted_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
DeleteResponse::deleted_places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.DeleteResponse.deleted_places)
  return deleted_places_;
}

// -------------------------------------------------------------------

// InsertRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool InsertRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool InsertRequest::has_env() const {
  return _internal_has_env();
}
inline void InsertRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& InsertRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& InsertRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertRequest.env)
  return _internal_env();
}
inline void InsertRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.InsertRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* InsertRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.InsertRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertRequest.env)
  return _internal_mutable_env();
}
inline void InsertRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.InsertRequest.env)
}

// .farm.nurture.core.contracts.common.Options options = 2;
inline bool InsertRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool InsertRequest::has_options() const {
  return _internal_has_options();
}
inline void InsertRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Options& InsertRequest::_internal_options() const {
  const ::farm::nurture::core::contracts::common::Options* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Options&>(
      ::farm::nurture::core::contracts::common::_Options_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Options& InsertRequest::options() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertRequest.options)
  return _internal_options();
}
inline void InsertRequest::unsafe_arena_set_allocated_options(
    ::farm::nurture::core::contracts::common::Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.InsertRequest.options)
}
inline ::farm::nurture::core::contracts::common::Options* InsertRequest::release_options() {
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* InsertRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.InsertRequest.options)
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* InsertRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::farm::nurture::core::contracts::common::Options* InsertRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertRequest.options)
  return _internal_mutable_options();
}
inline void InsertRequest::set_allocated_options(::farm::nurture::core::contracts::common::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.InsertRequest.options)
}

// repeated .farm.nurture.core.contracts.common.Place places = 3;
inline int InsertRequest::_internal_places_size() const {
  return places_.size();
}
inline int InsertRequest::places_size() const {
  return _internal_places_size();
}
inline void InsertRequest::clear_places() {
  places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* InsertRequest::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertRequest.places)
  return places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
InsertRequest::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.InsertRequest.places)
  return &places_;
}
inline const ::farm::nurture::core::contracts::common::Place& InsertRequest::_internal_places(int index) const {
  return places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& InsertRequest::places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertRequest.places)
  return _internal_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* InsertRequest::_internal_add_places() {
  return places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* InsertRequest::add_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.InsertRequest.places)
  return _internal_add_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
InsertRequest::places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.InsertRequest.places)
  return places_;
}

// .farm.nurture.core.contracts.common.Filter tag_filter = 4;
inline bool InsertRequest::_internal_has_tag_filter() const {
  return this != internal_default_instance() && tag_filter_ != nullptr;
}
inline bool InsertRequest::has_tag_filter() const {
  return _internal_has_tag_filter();
}
inline void InsertRequest::clear_tag_filter() {
  if (GetArena() == nullptr && tag_filter_ != nullptr) {
    delete tag_filter_;
  }
  tag_filter_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Filter& InsertRequest::_internal_tag_filter() const {
  const ::farm::nurture::core::contracts::common::Filter* p = tag_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Filter&>(
      ::farm::nurture::core::contracts::common::_Filter_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Filter& InsertRequest::tag_filter() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertRequest.tag_filter)
  return _internal_tag_filter();
}
inline void InsertRequest::unsafe_arena_set_allocated_tag_filter(
    ::farm::nurture::core::contracts::common::Filter* tag_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_filter_);
  }
  tag_filter_ = tag_filter;
  if (tag_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.InsertRequest.tag_filter)
}
inline ::farm::nurture::core::contracts::common::Filter* InsertRequest::release_tag_filter() {
  
  ::farm::nurture::core::contracts::common::Filter* temp = tag_filter_;
  tag_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Filter* InsertRequest::unsafe_arena_release_tag_filter() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.InsertRequest.tag_filter)
  
  ::farm::nurture::core::contracts::common::Filter* temp = tag_filter_;
  tag_filter_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Filter* InsertRequest::_internal_mutable_tag_filter() {
  
  if (tag_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Filter>(GetArena());
    tag_filter_ = p;
  }
  return tag_filter_;
}
inline ::farm::nurture::core::contracts::common::Filter* InsertRequest::mutable_tag_filter() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertRequest.tag_filter)
  return _internal_mutable_tag_filter();
}
inline void InsertRequest::set_allocated_tag_filter(::farm::nurture::core::contracts::common::Filter* tag_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_filter_;
  }
  if (tag_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag_filter);
    if (message_arena != submessage_arena) {
      tag_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_filter, submessage_arena);
    }
    
  } else {
    
  }
  tag_filter_ = tag_filter;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.InsertRequest.tag_filter)
}

// -------------------------------------------------------------------

// InsertResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool InsertResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool InsertResponse::has_env() const {
  return _internal_has_env();
}
inline void InsertResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& InsertResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& InsertResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertResponse.env)
  return _internal_env();
}
inline void InsertResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.InsertResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* InsertResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.InsertResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* InsertResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertResponse.env)
  return _internal_mutable_env();
}
inline void InsertResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.InsertResponse.env)
}

// repeated .farm.nurture.core.contracts.common.Place inserted_or_updated_places = 2;
inline int InsertResponse::_internal_inserted_or_updated_places_size() const {
  return inserted_or_updated_places_.size();
}
inline int InsertResponse::inserted_or_updated_places_size() const {
  return _internal_inserted_or_updated_places_size();
}
inline void InsertResponse::clear_inserted_or_updated_places() {
  inserted_or_updated_places_.Clear();
}
inline ::farm::nurture::core::contracts::common::Place* InsertResponse::mutable_inserted_or_updated_places(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places)
  return inserted_or_updated_places_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >*
InsertResponse::mutable_inserted_or_updated_places() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places)
  return &inserted_or_updated_places_;
}
inline const ::farm::nurture::core::contracts::common::Place& InsertResponse::_internal_inserted_or_updated_places(int index) const {
  return inserted_or_updated_places_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Place& InsertResponse::inserted_or_updated_places(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places)
  return _internal_inserted_or_updated_places(index);
}
inline ::farm::nurture::core::contracts::common::Place* InsertResponse::_internal_add_inserted_or_updated_places() {
  return inserted_or_updated_places_.Add();
}
inline ::farm::nurture::core::contracts::common::Place* InsertResponse::add_inserted_or_updated_places() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places)
  return _internal_add_inserted_or_updated_places();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Place >&
InsertResponse::inserted_or_updated_places() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_places)
  return inserted_or_updated_places_;
}

// int64 inserted_or_updated_count = 3;
inline void InsertResponse::clear_inserted_or_updated_count() {
  inserted_or_updated_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertResponse::_internal_inserted_or_updated_count() const {
  return inserted_or_updated_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertResponse::inserted_or_updated_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_count)
  return _internal_inserted_or_updated_count();
}
inline void InsertResponse::_internal_set_inserted_or_updated_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inserted_or_updated_count_ = value;
}
inline void InsertResponse::set_inserted_or_updated_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inserted_or_updated_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.InsertResponse.inserted_or_updated_count)
}

// repeated .farm.nurture.core.contracts.common.OverlappingPlaces places_with_overlaps = 4;
inline int InsertResponse::_internal_places_with_overlaps_size() const {
  return places_with_overlaps_.size();
}
inline int InsertResponse::places_with_overlaps_size() const {
  return _internal_places_with_overlaps_size();
}
inline void InsertResponse::clear_places_with_overlaps() {
  places_with_overlaps_.Clear();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* InsertResponse::mutable_places_with_overlaps(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps)
  return places_with_overlaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >*
InsertResponse::mutable_places_with_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps)
  return &places_with_overlaps_;
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlaces& InsertResponse::_internal_places_with_overlaps(int index) const {
  return places_with_overlaps_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlaces& InsertResponse::places_with_overlaps(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps)
  return _internal_places_with_overlaps(index);
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* InsertResponse::_internal_add_places_with_overlaps() {
  return places_with_overlaps_.Add();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlaces* InsertResponse::add_places_with_overlaps() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps)
  return _internal_add_places_with_overlaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlaces >&
InsertResponse::places_with_overlaps() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.InsertResponse.places_with_overlaps)
  return places_with_overlaps_;
}

// -------------------------------------------------------------------

// LatLng

// double lat = 1;
inline void LatLng::clear_lat() {
  lat_ = 0;
}
inline double LatLng::_internal_lat() const {
  return lat_;
}
inline double LatLng::lat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LatLng.lat)
  return _internal_lat();
}
inline void LatLng::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void LatLng::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LatLng.lat)
}

// double lng = 2;
inline void LatLng::clear_lng() {
  lng_ = 0;
}
inline double LatLng::_internal_lng() const {
  return lng_;
}
inline double LatLng::lng() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.LatLng.lng)
  return _internal_lng();
}
inline void LatLng::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void LatLng::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.LatLng.lng)
}

// -------------------------------------------------------------------

// UpdateReferenceRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateReferenceRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateReferenceRequest::has_env() const {
  return _internal_has_env();
}
inline void UpdateReferenceRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateReferenceRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateReferenceRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceRequest.env)
  return _internal_env();
}
inline void UpdateReferenceRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateReferenceRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceRequest.env)
  return _internal_mutable_env();
}
inline void UpdateReferenceRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceRequest.env)
}

// repeated .farm.nurture.core.contracts.common.PlaceReference references = 2;
inline int UpdateReferenceRequest::_internal_references_size() const {
  return references_.size();
}
inline int UpdateReferenceRequest::references_size() const {
  return _internal_references_size();
}
inline void UpdateReferenceRequest::clear_references() {
  references_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceReference* UpdateReferenceRequest::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceRequest.references)
  return references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceReference >*
UpdateReferenceRequest::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateReferenceRequest.references)
  return &references_;
}
inline const ::farm::nurture::core::contracts::common::PlaceReference& UpdateReferenceRequest::_internal_references(int index) const {
  return references_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceReference& UpdateReferenceRequest::references(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceRequest.references)
  return _internal_references(index);
}
inline ::farm::nurture::core::contracts::common::PlaceReference* UpdateReferenceRequest::_internal_add_references() {
  return references_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceReference* UpdateReferenceRequest::add_references() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateReferenceRequest.references)
  return _internal_add_references();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceReference >&
UpdateReferenceRequest::references() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateReferenceRequest.references)
  return references_;
}

// .farm.nurture.core.contracts.common.Options options = 3;
inline bool UpdateReferenceRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateReferenceRequest::has_options() const {
  return _internal_has_options();
}
inline void UpdateReferenceRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateReferenceRequest::_internal_options() const {
  const ::farm::nurture::core::contracts::common::Options* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Options&>(
      ::farm::nurture::core::contracts::common::_Options_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateReferenceRequest::options() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceRequest.options)
  return _internal_options();
}
inline void UpdateReferenceRequest::unsafe_arena_set_allocated_options(
    ::farm::nurture::core::contracts::common::Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceRequest.options)
}
inline ::farm::nurture::core::contracts::common::Options* UpdateReferenceRequest::release_options() {
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateReferenceRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateReferenceRequest.options)
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateReferenceRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateReferenceRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceRequest.options)
  return _internal_mutable_options();
}
inline void UpdateReferenceRequest::set_allocated_options(::farm::nurture::core::contracts::common::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceRequest.options)
}

// -------------------------------------------------------------------

// UpdateReferenceResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateReferenceResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateReferenceResponse::has_env() const {
  return _internal_has_env();
}
inline void UpdateReferenceResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateReferenceResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateReferenceResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResponse.env)
  return _internal_env();
}
inline void UpdateReferenceResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateReferenceResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateReferenceResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceResponse.env)
  return _internal_mutable_env();
}
inline void UpdateReferenceResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceResponse.env)
}

// repeated .farm.nurture.core.contracts.common.UpdateReferenceResult update_ref_results = 2;
inline int UpdateReferenceResponse::_internal_update_ref_results_size() const {
  return update_ref_results_.size();
}
inline int UpdateReferenceResponse::update_ref_results_size() const {
  return _internal_update_ref_results_size();
}
inline void UpdateReferenceResponse::clear_update_ref_results() {
  update_ref_results_.Clear();
}
inline ::farm::nurture::core::contracts::common::UpdateReferenceResult* UpdateReferenceResponse::mutable_update_ref_results(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results)
  return update_ref_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateReferenceResult >*
UpdateReferenceResponse::mutable_update_ref_results() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results)
  return &update_ref_results_;
}
inline const ::farm::nurture::core::contracts::common::UpdateReferenceResult& UpdateReferenceResponse::_internal_update_ref_results(int index) const {
  return update_ref_results_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::UpdateReferenceResult& UpdateReferenceResponse::update_ref_results(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results)
  return _internal_update_ref_results(index);
}
inline ::farm::nurture::core::contracts::common::UpdateReferenceResult* UpdateReferenceResponse::_internal_add_update_ref_results() {
  return update_ref_results_.Add();
}
inline ::farm::nurture::core::contracts::common::UpdateReferenceResult* UpdateReferenceResponse::add_update_ref_results() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results)
  return _internal_add_update_ref_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateReferenceResult >&
UpdateReferenceResponse::update_ref_results() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateReferenceResponse.update_ref_results)
  return update_ref_results_;
}

// -------------------------------------------------------------------

// UpdateReferenceResult

// .farm.nurture.core.contracts.common.Place updated_place = 1;
inline bool UpdateReferenceResult::_internal_has_updated_place() const {
  return this != internal_default_instance() && updated_place_ != nullptr;
}
inline bool UpdateReferenceResult::has_updated_place() const {
  return _internal_has_updated_place();
}
inline void UpdateReferenceResult::clear_updated_place() {
  if (GetArena() == nullptr && updated_place_ != nullptr) {
    delete updated_place_;
  }
  updated_place_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateReferenceResult::_internal_updated_place() const {
  const ::farm::nurture::core::contracts::common::Place* p = updated_place_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Place&>(
      ::farm::nurture::core::contracts::common::_Place_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateReferenceResult::updated_place() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place)
  return _internal_updated_place();
}
inline void UpdateReferenceResult::unsafe_arena_set_allocated_updated_place(
    ::farm::nurture::core::contracts::common::Place* updated_place) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_place_);
  }
  updated_place_ = updated_place;
  if (updated_place) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place)
}
inline ::farm::nurture::core::contracts::common::Place* UpdateReferenceResult::release_updated_place() {
  
  ::farm::nurture::core::contracts::common::Place* temp = updated_place_;
  updated_place_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateReferenceResult::unsafe_arena_release_updated_place() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place)
  
  ::farm::nurture::core::contracts::common::Place* temp = updated_place_;
  updated_place_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateReferenceResult::_internal_mutable_updated_place() {
  
  if (updated_place_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Place>(GetArena());
    updated_place_ = p;
  }
  return updated_place_;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateReferenceResult::mutable_updated_place() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place)
  return _internal_mutable_updated_place();
}
inline void UpdateReferenceResult::set_allocated_updated_place(::farm::nurture::core::contracts::common::Place* updated_place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updated_place_;
  }
  if (updated_place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated_place);
    if (message_arena != submessage_arena) {
      updated_place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_place, submessage_arena);
    }
    
  } else {
    
  }
  updated_place_ = updated_place;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateReferenceResult.updated_place)
}

// int32 new_refs_count = 2;
inline void UpdateReferenceResult::clear_new_refs_count() {
  new_refs_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::_internal_new_refs_count() const {
  return new_refs_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::new_refs_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.new_refs_count)
  return _internal_new_refs_count();
}
inline void UpdateReferenceResult::_internal_set_new_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  new_refs_count_ = value;
}
inline void UpdateReferenceResult::set_new_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_refs_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateReferenceResult.new_refs_count)
}

// int32 appended_refs_count = 3;
inline void UpdateReferenceResult::clear_appended_refs_count() {
  appended_refs_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::_internal_appended_refs_count() const {
  return appended_refs_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::appended_refs_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.appended_refs_count)
  return _internal_appended_refs_count();
}
inline void UpdateReferenceResult::_internal_set_appended_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appended_refs_count_ = value;
}
inline void UpdateReferenceResult::set_appended_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appended_refs_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateReferenceResult.appended_refs_count)
}

// int32 added_ref_values_count = 4;
inline void UpdateReferenceResult::clear_added_ref_values_count() {
  added_ref_values_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::_internal_added_ref_values_count() const {
  return added_ref_values_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::added_ref_values_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.added_ref_values_count)
  return _internal_added_ref_values_count();
}
inline void UpdateReferenceResult::_internal_set_added_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  added_ref_values_count_ = value;
}
inline void UpdateReferenceResult::set_added_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_added_ref_values_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateReferenceResult.added_ref_values_count)
}

// int32 deleted_refs_count = 5;
inline void UpdateReferenceResult::clear_deleted_refs_count() {
  deleted_refs_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::_internal_deleted_refs_count() const {
  return deleted_refs_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::deleted_refs_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.deleted_refs_count)
  return _internal_deleted_refs_count();
}
inline void UpdateReferenceResult::_internal_set_deleted_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deleted_refs_count_ = value;
}
inline void UpdateReferenceResult::set_deleted_refs_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deleted_refs_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateReferenceResult.deleted_refs_count)
}

// int32 deleted_ref_values_count = 6;
inline void UpdateReferenceResult::clear_deleted_ref_values_count() {
  deleted_ref_values_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::_internal_deleted_ref_values_count() const {
  return deleted_ref_values_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReferenceResult::deleted_ref_values_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateReferenceResult.deleted_ref_values_count)
  return _internal_deleted_ref_values_count();
}
inline void UpdateReferenceResult::_internal_set_deleted_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deleted_ref_values_count_ = value;
}
inline void UpdateReferenceResult::set_deleted_ref_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deleted_ref_values_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateReferenceResult.deleted_ref_values_count)
}

// -------------------------------------------------------------------

// PlaceReference

// int64 place_id = 1;
inline void PlaceReference::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceReference::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceReference::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceReference.place_id)
  return _internal_place_id();
}
inline void PlaceReference::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void PlaceReference::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceReference.place_id)
}

// repeated .farm.nurture.core.contracts.common.ReferenceAttribute replace_ref_values = 2;
inline int PlaceReference::_internal_replace_ref_values_size() const {
  return replace_ref_values_.size();
}
inline int PlaceReference::replace_ref_values_size() const {
  return _internal_replace_ref_values_size();
}
inline void PlaceReference::clear_replace_ref_values() {
  replace_ref_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::mutable_replace_ref_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceReference.replace_ref_values)
  return replace_ref_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
PlaceReference::mutable_replace_ref_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceReference.replace_ref_values)
  return &replace_ref_values_;
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::_internal_replace_ref_values(int index) const {
  return replace_ref_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::replace_ref_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceReference.replace_ref_values)
  return _internal_replace_ref_values(index);
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::_internal_add_replace_ref_values() {
  return replace_ref_values_.Add();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::add_replace_ref_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceReference.replace_ref_values)
  return _internal_add_replace_ref_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
PlaceReference::replace_ref_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceReference.replace_ref_values)
  return replace_ref_values_;
}

// repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_references = 3;
inline int PlaceReference::_internal_delete_references_size() const {
  return delete_references_.size();
}
inline int PlaceReference::delete_references_size() const {
  return _internal_delete_references_size();
}
inline void PlaceReference::clear_delete_references() {
  delete_references_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::mutable_delete_references(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceReference.delete_references)
  return delete_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
PlaceReference::mutable_delete_references() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceReference.delete_references)
  return &delete_references_;
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::_internal_delete_references(int index) const {
  return delete_references_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::delete_references(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceReference.delete_references)
  return _internal_delete_references(index);
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::_internal_add_delete_references() {
  return delete_references_.Add();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::add_delete_references() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceReference.delete_references)
  return _internal_add_delete_references();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
PlaceReference::delete_references() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceReference.delete_references)
  return delete_references_;
}

// repeated .farm.nurture.core.contracts.common.ReferenceAttribute delete_ref_values = 4;
inline int PlaceReference::_internal_delete_ref_values_size() const {
  return delete_ref_values_.size();
}
inline int PlaceReference::delete_ref_values_size() const {
  return _internal_delete_ref_values_size();
}
inline void PlaceReference::clear_delete_ref_values() {
  delete_ref_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::mutable_delete_ref_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceReference.delete_ref_values)
  return delete_ref_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
PlaceReference::mutable_delete_ref_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceReference.delete_ref_values)
  return &delete_ref_values_;
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::_internal_delete_ref_values(int index) const {
  return delete_ref_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::delete_ref_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceReference.delete_ref_values)
  return _internal_delete_ref_values(index);
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::_internal_add_delete_ref_values() {
  return delete_ref_values_.Add();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::add_delete_ref_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceReference.delete_ref_values)
  return _internal_add_delete_ref_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
PlaceReference::delete_ref_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceReference.delete_ref_values)
  return delete_ref_values_;
}

// repeated .farm.nurture.core.contracts.common.ReferenceAttribute append_ref_values = 5;
inline int PlaceReference::_internal_append_ref_values_size() const {
  return append_ref_values_.size();
}
inline int PlaceReference::append_ref_values_size() const {
  return _internal_append_ref_values_size();
}
inline void PlaceReference::clear_append_ref_values() {
  append_ref_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::mutable_append_ref_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceReference.append_ref_values)
  return append_ref_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >*
PlaceReference::mutable_append_ref_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceReference.append_ref_values)
  return &append_ref_values_;
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::_internal_append_ref_values(int index) const {
  return append_ref_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::ReferenceAttribute& PlaceReference::append_ref_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceReference.append_ref_values)
  return _internal_append_ref_values(index);
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::_internal_add_append_ref_values() {
  return append_ref_values_.Add();
}
inline ::farm::nurture::core::contracts::common::ReferenceAttribute* PlaceReference::add_append_ref_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceReference.append_ref_values)
  return _internal_add_append_ref_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::ReferenceAttribute >&
PlaceReference::append_ref_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceReference.append_ref_values)
  return append_ref_values_;
}

// -------------------------------------------------------------------

// UpdateTagsRequest

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateTagsRequest::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateTagsRequest::has_env() const {
  return _internal_has_env();
}
inline void UpdateTagsRequest::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateTagsRequest::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateTagsRequest::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagsRequest.env)
  return _internal_env();
}
inline void UpdateTagsRequest::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateTagsRequest.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsRequest::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsRequest::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateTagsRequest.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsRequest::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagsRequest.env)
  return _internal_mutable_env();
}
inline void UpdateTagsRequest::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateTagsRequest.env)
}

// repeated .farm.nurture.core.contracts.common.UpdatePlaceTags tags = 2;
inline int UpdateTagsRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int UpdateTagsRequest::tags_size() const {
  return _internal_tags_size();
}
inline void UpdateTagsRequest::clear_tags() {
  tags_.Clear();
}
inline ::farm::nurture::core::contracts::common::UpdatePlaceTags* UpdateTagsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagsRequest.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdatePlaceTags >*
UpdateTagsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateTagsRequest.tags)
  return &tags_;
}
inline const ::farm::nurture::core::contracts::common::UpdatePlaceTags& UpdateTagsRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::UpdatePlaceTags& UpdateTagsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagsRequest.tags)
  return _internal_tags(index);
}
inline ::farm::nurture::core::contracts::common::UpdatePlaceTags* UpdateTagsRequest::_internal_add_tags() {
  return tags_.Add();
}
inline ::farm::nurture::core::contracts::common::UpdatePlaceTags* UpdateTagsRequest::add_tags() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateTagsRequest.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdatePlaceTags >&
UpdateTagsRequest::tags() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateTagsRequest.tags)
  return tags_;
}

// .farm.nurture.core.contracts.common.Options options = 3;
inline bool UpdateTagsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateTagsRequest::has_options() const {
  return _internal_has_options();
}
inline void UpdateTagsRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateTagsRequest::_internal_options() const {
  const ::farm::nurture::core::contracts::common::Options* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Options&>(
      ::farm::nurture::core::contracts::common::_Options_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Options& UpdateTagsRequest::options() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagsRequest.options)
  return _internal_options();
}
inline void UpdateTagsRequest::unsafe_arena_set_allocated_options(
    ::farm::nurture::core::contracts::common::Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateTagsRequest.options)
}
inline ::farm::nurture::core::contracts::common::Options* UpdateTagsRequest::release_options() {
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateTagsRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateTagsRequest.options)
  
  ::farm::nurture::core::contracts::common::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateTagsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::farm::nurture::core::contracts::common::Options* UpdateTagsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagsRequest.options)
  return _internal_mutable_options();
}
inline void UpdateTagsRequest::set_allocated_options(::farm::nurture::core::contracts::common::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateTagsRequest.options)
}

// -------------------------------------------------------------------

// UpdatePlaceTags

// int64 place_id = 1;
inline void UpdatePlaceTags::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdatePlaceTags::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdatePlaceTags::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdatePlaceTags.place_id)
  return _internal_place_id();
}
inline void UpdatePlaceTags::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void UpdatePlaceTags::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdatePlaceTags.place_id)
}

// repeated .farm.nurture.core.contracts.common.PlaceTag replace_tag_values = 2;
inline int UpdatePlaceTags::_internal_replace_tag_values_size() const {
  return replace_tag_values_.size();
}
inline int UpdatePlaceTags::replace_tag_values_size() const {
  return _internal_replace_tag_values_size();
}
inline void UpdatePlaceTags::clear_replace_tag_values() {
  replace_tag_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::mutable_replace_tag_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values)
  return replace_tag_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
UpdatePlaceTags::mutable_replace_tag_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values)
  return &replace_tag_values_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::_internal_replace_tag_values(int index) const {
  return replace_tag_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::replace_tag_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values)
  return _internal_replace_tag_values(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::_internal_add_replace_tag_values() {
  return replace_tag_values_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::add_replace_tag_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values)
  return _internal_add_replace_tag_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
UpdatePlaceTags::replace_tag_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdatePlaceTags.replace_tag_values)
  return replace_tag_values_;
}

// repeated .farm.nurture.core.contracts.common.PlaceTag delete_tags = 3;
inline int UpdatePlaceTags::_internal_delete_tags_size() const {
  return delete_tags_.size();
}
inline int UpdatePlaceTags::delete_tags_size() const {
  return _internal_delete_tags_size();
}
inline void UpdatePlaceTags::clear_delete_tags() {
  delete_tags_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::mutable_delete_tags(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags)
  return delete_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
UpdatePlaceTags::mutable_delete_tags() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags)
  return &delete_tags_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::_internal_delete_tags(int index) const {
  return delete_tags_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::delete_tags(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags)
  return _internal_delete_tags(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::_internal_add_delete_tags() {
  return delete_tags_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::add_delete_tags() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags)
  return _internal_add_delete_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
UpdatePlaceTags::delete_tags() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tags)
  return delete_tags_;
}

// repeated .farm.nurture.core.contracts.common.PlaceTag delete_tag_values = 4;
inline int UpdatePlaceTags::_internal_delete_tag_values_size() const {
  return delete_tag_values_.size();
}
inline int UpdatePlaceTags::delete_tag_values_size() const {
  return _internal_delete_tag_values_size();
}
inline void UpdatePlaceTags::clear_delete_tag_values() {
  delete_tag_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::mutable_delete_tag_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values)
  return delete_tag_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
UpdatePlaceTags::mutable_delete_tag_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values)
  return &delete_tag_values_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::_internal_delete_tag_values(int index) const {
  return delete_tag_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::delete_tag_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values)
  return _internal_delete_tag_values(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::_internal_add_delete_tag_values() {
  return delete_tag_values_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::add_delete_tag_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values)
  return _internal_add_delete_tag_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
UpdatePlaceTags::delete_tag_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdatePlaceTags.delete_tag_values)
  return delete_tag_values_;
}

// repeated .farm.nurture.core.contracts.common.PlaceTag append_tag_values = 5;
inline int UpdatePlaceTags::_internal_append_tag_values_size() const {
  return append_tag_values_.size();
}
inline int UpdatePlaceTags::append_tag_values_size() const {
  return _internal_append_tag_values_size();
}
inline void UpdatePlaceTags::clear_append_tag_values() {
  append_tag_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::mutable_append_tag_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values)
  return append_tag_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >*
UpdatePlaceTags::mutable_append_tag_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values)
  return &append_tag_values_;
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::_internal_append_tag_values(int index) const {
  return append_tag_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::PlaceTag& UpdatePlaceTags::append_tag_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values)
  return _internal_append_tag_values(index);
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::_internal_add_append_tag_values() {
  return append_tag_values_.Add();
}
inline ::farm::nurture::core::contracts::common::PlaceTag* UpdatePlaceTags::add_append_tag_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values)
  return _internal_add_append_tag_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::PlaceTag >&
UpdatePlaceTags::append_tag_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdatePlaceTags.append_tag_values)
  return append_tag_values_;
}

// -------------------------------------------------------------------

// UpdateTagsResponse

// .farm.nurture.core.contracts.common.Environment env = 1;
inline bool UpdateTagsResponse::_internal_has_env() const {
  return this != internal_default_instance() && env_ != nullptr;
}
inline bool UpdateTagsResponse::has_env() const {
  return _internal_has_env();
}
inline void UpdateTagsResponse::clear_env() {
  if (GetArena() == nullptr && env_ != nullptr) {
    delete env_;
  }
  env_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateTagsResponse::_internal_env() const {
  const ::farm::nurture::core::contracts::common::Environment* p = env_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& UpdateTagsResponse::env() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagsResponse.env)
  return _internal_env();
}
inline void UpdateTagsResponse::unsafe_arena_set_allocated_env(
    ::farm::nurture::core::contracts::common::Environment* env) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(env_);
  }
  env_ = env;
  if (env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateTagsResponse.env)
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsResponse::release_env() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsResponse::unsafe_arena_release_env() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateTagsResponse.env)
  
  ::farm::nurture::core::contracts::common::Environment* temp = env_;
  env_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsResponse::_internal_mutable_env() {
  
  if (env_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    env_ = p;
  }
  return env_;
}
inline ::farm::nurture::core::contracts::common::Environment* UpdateTagsResponse::mutable_env() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagsResponse.env)
  return _internal_mutable_env();
}
inline void UpdateTagsResponse::set_allocated_env(::farm::nurture::core::contracts::common::Environment* env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete env_;
  }
  if (env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(env);
    if (message_arena != submessage_arena) {
      env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    
  } else {
    
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateTagsResponse.env)
}

// repeated .farm.nurture.core.contracts.common.UpdateTagResult update_tag_results = 2;
inline int UpdateTagsResponse::_internal_update_tag_results_size() const {
  return update_tag_results_.size();
}
inline int UpdateTagsResponse::update_tag_results_size() const {
  return _internal_update_tag_results_size();
}
inline void UpdateTagsResponse::clear_update_tag_results() {
  update_tag_results_.Clear();
}
inline ::farm::nurture::core::contracts::common::UpdateTagResult* UpdateTagsResponse::mutable_update_tag_results(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results)
  return update_tag_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateTagResult >*
UpdateTagsResponse::mutable_update_tag_results() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results)
  return &update_tag_results_;
}
inline const ::farm::nurture::core::contracts::common::UpdateTagResult& UpdateTagsResponse::_internal_update_tag_results(int index) const {
  return update_tag_results_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::UpdateTagResult& UpdateTagsResponse::update_tag_results(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results)
  return _internal_update_tag_results(index);
}
inline ::farm::nurture::core::contracts::common::UpdateTagResult* UpdateTagsResponse::_internal_add_update_tag_results() {
  return update_tag_results_.Add();
}
inline ::farm::nurture::core::contracts::common::UpdateTagResult* UpdateTagsResponse::add_update_tag_results() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results)
  return _internal_add_update_tag_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::UpdateTagResult >&
UpdateTagsResponse::update_tag_results() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.UpdateTagsResponse.update_tag_results)
  return update_tag_results_;
}

// -------------------------------------------------------------------

// UpdateTagResult

// .farm.nurture.core.contracts.common.Place updated_place = 1;
inline bool UpdateTagResult::_internal_has_updated_place() const {
  return this != internal_default_instance() && updated_place_ != nullptr;
}
inline bool UpdateTagResult::has_updated_place() const {
  return _internal_has_updated_place();
}
inline void UpdateTagResult::clear_updated_place() {
  if (GetArena() == nullptr && updated_place_ != nullptr) {
    delete updated_place_;
  }
  updated_place_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateTagResult::_internal_updated_place() const {
  const ::farm::nurture::core::contracts::common::Place* p = updated_place_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Place&>(
      ::farm::nurture::core::contracts::common::_Place_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Place& UpdateTagResult::updated_place() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.updated_place)
  return _internal_updated_place();
}
inline void UpdateTagResult::unsafe_arena_set_allocated_updated_place(
    ::farm::nurture::core::contracts::common::Place* updated_place) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_place_);
  }
  updated_place_ = updated_place;
  if (updated_place) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.UpdateTagResult.updated_place)
}
inline ::farm::nurture::core::contracts::common::Place* UpdateTagResult::release_updated_place() {
  
  ::farm::nurture::core::contracts::common::Place* temp = updated_place_;
  updated_place_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateTagResult::unsafe_arena_release_updated_place() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.UpdateTagResult.updated_place)
  
  ::farm::nurture::core::contracts::common::Place* temp = updated_place_;
  updated_place_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateTagResult::_internal_mutable_updated_place() {
  
  if (updated_place_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Place>(GetArena());
    updated_place_ = p;
  }
  return updated_place_;
}
inline ::farm::nurture::core::contracts::common::Place* UpdateTagResult::mutable_updated_place() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.UpdateTagResult.updated_place)
  return _internal_mutable_updated_place();
}
inline void UpdateTagResult::set_allocated_updated_place(::farm::nurture::core::contracts::common::Place* updated_place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updated_place_;
  }
  if (updated_place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated_place);
    if (message_arena != submessage_arena) {
      updated_place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_place, submessage_arena);
    }
    
  } else {
    
  }
  updated_place_ = updated_place;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.UpdateTagResult.updated_place)
}

// int32 new_tags_count = 2;
inline void UpdateTagResult::clear_new_tags_count() {
  new_tags_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::_internal_new_tags_count() const {
  return new_tags_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::new_tags_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.new_tags_count)
  return _internal_new_tags_count();
}
inline void UpdateTagResult::_internal_set_new_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  new_tags_count_ = value;
}
inline void UpdateTagResult::set_new_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_tags_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateTagResult.new_tags_count)
}

// int32 appended_tags_count = 3;
inline void UpdateTagResult::clear_appended_tags_count() {
  appended_tags_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::_internal_appended_tags_count() const {
  return appended_tags_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::appended_tags_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.appended_tags_count)
  return _internal_appended_tags_count();
}
inline void UpdateTagResult::_internal_set_appended_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appended_tags_count_ = value;
}
inline void UpdateTagResult::set_appended_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appended_tags_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateTagResult.appended_tags_count)
}

// int32 added_tag_values_count = 4;
inline void UpdateTagResult::clear_added_tag_values_count() {
  added_tag_values_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::_internal_added_tag_values_count() const {
  return added_tag_values_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::added_tag_values_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.added_tag_values_count)
  return _internal_added_tag_values_count();
}
inline void UpdateTagResult::_internal_set_added_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  added_tag_values_count_ = value;
}
inline void UpdateTagResult::set_added_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_added_tag_values_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateTagResult.added_tag_values_count)
}

// int32 deleted_tags_count = 5;
inline void UpdateTagResult::clear_deleted_tags_count() {
  deleted_tags_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::_internal_deleted_tags_count() const {
  return deleted_tags_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::deleted_tags_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.deleted_tags_count)
  return _internal_deleted_tags_count();
}
inline void UpdateTagResult::_internal_set_deleted_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deleted_tags_count_ = value;
}
inline void UpdateTagResult::set_deleted_tags_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deleted_tags_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateTagResult.deleted_tags_count)
}

// int32 deleted_tag_values_count = 6;
inline void UpdateTagResult::clear_deleted_tag_values_count() {
  deleted_tag_values_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::_internal_deleted_tag_values_count() const {
  return deleted_tag_values_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTagResult::deleted_tag_values_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.UpdateTagResult.deleted_tag_values_count)
  return _internal_deleted_tag_values_count();
}
inline void UpdateTagResult::_internal_set_deleted_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deleted_tag_values_count_ = value;
}
inline void UpdateTagResult::set_deleted_tag_values_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deleted_tag_values_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.UpdateTagResult.deleted_tag_values_count)
}

// -------------------------------------------------------------------

// PlaceTagValue

// .farm.nurture.core.contracts.common.ValueType value_type = 1;
inline void PlaceTagValue::clear_value_type() {
  value_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValueType PlaceTagValue::_internal_value_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValueType >(value_type_);
}
inline ::farm::nurture::core::contracts::common::ValueType PlaceTagValue::value_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.value_type)
  return _internal_value_type();
}
inline void PlaceTagValue::_internal_set_value_type(::farm::nurture::core::contracts::common::ValueType value) {
  
  value_type_ = value;
}
inline void PlaceTagValue::set_value_type(::farm::nurture::core::contracts::common::ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.value_type)
}

// repeated double float_values = 2;
inline int PlaceTagValue::_internal_float_values_size() const {
  return float_values_.size();
}
inline int PlaceTagValue::float_values_size() const {
  return _internal_float_values_size();
}
inline void PlaceTagValue::clear_float_values() {
  float_values_.Clear();
}
inline double PlaceTagValue::_internal_float_values(int index) const {
  return float_values_.Get(index);
}
inline double PlaceTagValue::float_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.float_values)
  return _internal_float_values(index);
}
inline void PlaceTagValue::set_float_values(int index, double value) {
  float_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.float_values)
}
inline void PlaceTagValue::_internal_add_float_values(double value) {
  float_values_.Add(value);
}
inline void PlaceTagValue::add_float_values(double value) {
  _internal_add_float_values(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.float_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PlaceTagValue::_internal_float_values() const {
  return float_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PlaceTagValue::float_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.float_values)
  return _internal_float_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PlaceTagValue::_internal_mutable_float_values() {
  return &float_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PlaceTagValue::mutable_float_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.float_values)
  return _internal_mutable_float_values();
}

// repeated string string_values = 3;
inline int PlaceTagValue::_internal_string_values_size() const {
  return string_values_.size();
}
inline int PlaceTagValue::string_values_size() const {
  return _internal_string_values_size();
}
inline void PlaceTagValue::clear_string_values() {
  string_values_.Clear();
}
inline std::string* PlaceTagValue::add_string_values() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  return _internal_add_string_values();
}
inline const std::string& PlaceTagValue::_internal_string_values(int index) const {
  return string_values_.Get(index);
}
inline const std::string& PlaceTagValue::string_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  return _internal_string_values(index);
}
inline std::string* PlaceTagValue::mutable_string_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  return string_values_.Mutable(index);
}
inline void PlaceTagValue::set_string_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  string_values_.Mutable(index)->assign(value);
}
inline void PlaceTagValue::set_string_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  string_values_.Mutable(index)->assign(std::move(value));
}
inline void PlaceTagValue::set_string_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline void PlaceTagValue::set_string_values(int index, const char* value, size_t size) {
  string_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline std::string* PlaceTagValue::_internal_add_string_values() {
  return string_values_.Add();
}
inline void PlaceTagValue::add_string_values(const std::string& value) {
  string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline void PlaceTagValue::add_string_values(std::string&& value) {
  string_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline void PlaceTagValue::add_string_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline void PlaceTagValue::add_string_values(const char* value, size_t size) {
  string_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaceTagValue::string_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  return string_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaceTagValue::mutable_string_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.string_values)
  return &string_values_;
}

// repeated bool bool_values = 4;
inline int PlaceTagValue::_internal_bool_values_size() const {
  return bool_values_.size();
}
inline int PlaceTagValue::bool_values_size() const {
  return _internal_bool_values_size();
}
inline void PlaceTagValue::clear_bool_values() {
  bool_values_.Clear();
}
inline bool PlaceTagValue::_internal_bool_values(int index) const {
  return bool_values_.Get(index);
}
inline bool PlaceTagValue::bool_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.bool_values)
  return _internal_bool_values(index);
}
inline void PlaceTagValue::set_bool_values(int index, bool value) {
  bool_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.bool_values)
}
inline void PlaceTagValue::_internal_add_bool_values(bool value) {
  bool_values_.Add(value);
}
inline void PlaceTagValue::add_bool_values(bool value) {
  _internal_add_bool_values(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.bool_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PlaceTagValue::_internal_bool_values() const {
  return bool_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PlaceTagValue::bool_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.bool_values)
  return _internal_bool_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PlaceTagValue::_internal_mutable_bool_values() {
  return &bool_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PlaceTagValue::mutable_bool_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.bool_values)
  return _internal_mutable_bool_values();
}

// repeated int64 int64_values = 5;
inline int PlaceTagValue::_internal_int64_values_size() const {
  return int64_values_.size();
}
inline int PlaceTagValue::int64_values_size() const {
  return _internal_int64_values_size();
}
inline void PlaceTagValue::clear_int64_values() {
  int64_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceTagValue::_internal_int64_values(int index) const {
  return int64_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlaceTagValue::int64_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.int64_values)
  return _internal_int64_values(index);
}
inline void PlaceTagValue::set_int64_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.int64_values)
}
inline void PlaceTagValue::_internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_values_.Add(value);
}
inline void PlaceTagValue::add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_values(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.int64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PlaceTagValue::_internal_int64_values() const {
  return int64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PlaceTagValue::int64_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.int64_values)
  return _internal_int64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PlaceTagValue::_internal_mutable_int64_values() {
  return &int64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PlaceTagValue::mutable_int64_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.int64_values)
  return _internal_mutable_int64_values();
}

// repeated int32 int32_values = 6;
inline int PlaceTagValue::_internal_int32_values_size() const {
  return int32_values_.size();
}
inline int PlaceTagValue::int32_values_size() const {
  return _internal_int32_values_size();
}
inline void PlaceTagValue::clear_int32_values() {
  int32_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceTagValue::_internal_int32_values(int index) const {
  return int32_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceTagValue::int32_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.int32_values)
  return _internal_int32_values(index);
}
inline void PlaceTagValue::set_int32_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.PlaceTagValue.int32_values)
}
inline void PlaceTagValue::_internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_values_.Add(value);
}
inline void PlaceTagValue::add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_values(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.int32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlaceTagValue::_internal_int32_values() const {
  return int32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlaceTagValue::int32_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.int32_values)
  return _internal_int32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlaceTagValue::_internal_mutable_int32_values() {
  return &int32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlaceTagValue::mutable_int32_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.int32_values)
  return _internal_mutable_int32_values();
}

// repeated .farm.nurture.core.contracts.common.NSVPlaceId nsv_place_id_values = 7;
inline int PlaceTagValue::_internal_nsv_place_id_values_size() const {
  return nsv_place_id_values_.size();
}
inline int PlaceTagValue::nsv_place_id_values_size() const {
  return _internal_nsv_place_id_values_size();
}
inline void PlaceTagValue::clear_nsv_place_id_values() {
  nsv_place_id_values_.Clear();
}
inline ::farm::nurture::core::contracts::common::NSVPlaceId* PlaceTagValue::mutable_nsv_place_id_values(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values)
  return nsv_place_id_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::NSVPlaceId >*
PlaceTagValue::mutable_nsv_place_id_values() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values)
  return &nsv_place_id_values_;
}
inline const ::farm::nurture::core::contracts::common::NSVPlaceId& PlaceTagValue::_internal_nsv_place_id_values(int index) const {
  return nsv_place_id_values_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::NSVPlaceId& PlaceTagValue::nsv_place_id_values(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values)
  return _internal_nsv_place_id_values(index);
}
inline ::farm::nurture::core::contracts::common::NSVPlaceId* PlaceTagValue::_internal_add_nsv_place_id_values() {
  return nsv_place_id_values_.Add();
}
inline ::farm::nurture::core::contracts::common::NSVPlaceId* PlaceTagValue::add_nsv_place_id_values() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values)
  return _internal_add_nsv_place_id_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::NSVPlaceId >&
PlaceTagValue::nsv_place_id_values() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.PlaceTagValue.nsv_place_id_values)
  return nsv_place_id_values_;
}

// -------------------------------------------------------------------

// OverlappingPlace

// int64 place_id = 1;
inline void OverlappingPlace::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OverlappingPlace::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OverlappingPlace::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlace.place_id)
  return _internal_place_id();
}
inline void OverlappingPlace::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void OverlappingPlace::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.OverlappingPlace.place_id)
}

// string source_id = 2;
inline void OverlappingPlace::clear_source_id() {
  source_id_.ClearToEmpty();
}
inline const std::string& OverlappingPlace::source_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
  return _internal_source_id();
}
inline void OverlappingPlace::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
}
inline std::string* OverlappingPlace::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& OverlappingPlace::_internal_source_id() const {
  return source_id_.Get();
}
inline void OverlappingPlace::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OverlappingPlace::set_source_id(std::string&& value) {
  
  source_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
}
inline void OverlappingPlace::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
}
inline void OverlappingPlace::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
}
inline std::string* OverlappingPlace::_internal_mutable_source_id() {
  
  return source_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OverlappingPlace::release_source_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OverlappingPlace::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.OverlappingPlace.source_id)
}

// string intersecting_geometry = 3;
inline void OverlappingPlace::clear_intersecting_geometry() {
  intersecting_geometry_.ClearToEmpty();
}
inline const std::string& OverlappingPlace::intersecting_geometry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
  return _internal_intersecting_geometry();
}
inline void OverlappingPlace::set_intersecting_geometry(const std::string& value) {
  _internal_set_intersecting_geometry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
}
inline std::string* OverlappingPlace::mutable_intersecting_geometry() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
  return _internal_mutable_intersecting_geometry();
}
inline const std::string& OverlappingPlace::_internal_intersecting_geometry() const {
  return intersecting_geometry_.Get();
}
inline void OverlappingPlace::_internal_set_intersecting_geometry(const std::string& value) {
  
  intersecting_geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OverlappingPlace::set_intersecting_geometry(std::string&& value) {
  
  intersecting_geometry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
}
inline void OverlappingPlace::set_intersecting_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intersecting_geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
}
inline void OverlappingPlace::set_intersecting_geometry(const char* value,
    size_t size) {
  
  intersecting_geometry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
}
inline std::string* OverlappingPlace::_internal_mutable_intersecting_geometry() {
  
  return intersecting_geometry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OverlappingPlace::release_intersecting_geometry() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
  return intersecting_geometry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OverlappingPlace::set_allocated_intersecting_geometry(std::string* intersecting_geometry) {
  if (intersecting_geometry != nullptr) {
    
  } else {
    
  }
  intersecting_geometry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intersecting_geometry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.OverlappingPlace.intersecting_geometry)
}

// -------------------------------------------------------------------

// OverlappingPlaces

// int64 place_id = 1;
inline void OverlappingPlaces::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OverlappingPlaces::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OverlappingPlaces::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlaces.place_id)
  return _internal_place_id();
}
inline void OverlappingPlaces::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void OverlappingPlaces::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.OverlappingPlaces.place_id)
}

// string source_id = 2;
inline void OverlappingPlaces::clear_source_id() {
  source_id_.ClearToEmpty();
}
inline const std::string& OverlappingPlaces::source_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
  return _internal_source_id();
}
inline void OverlappingPlaces::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
}
inline std::string* OverlappingPlaces::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& OverlappingPlaces::_internal_source_id() const {
  return source_id_.Get();
}
inline void OverlappingPlaces::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OverlappingPlaces::set_source_id(std::string&& value) {
  
  source_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
}
inline void OverlappingPlaces::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
}
inline void OverlappingPlaces::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
}
inline std::string* OverlappingPlaces::_internal_mutable_source_id() {
  
  return source_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OverlappingPlaces::release_source_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OverlappingPlaces::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.OverlappingPlaces.source_id)
}

// repeated .farm.nurture.core.contracts.common.OverlappingPlace overlaps = 3;
inline int OverlappingPlaces::_internal_overlaps_size() const {
  return overlaps_.size();
}
inline int OverlappingPlaces::overlaps_size() const {
  return _internal_overlaps_size();
}
inline void OverlappingPlaces::clear_overlaps() {
  overlaps_.Clear();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlace* OverlappingPlaces::mutable_overlaps(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.OverlappingPlaces.overlaps)
  return overlaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlace >*
OverlappingPlaces::mutable_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.OverlappingPlaces.overlaps)
  return &overlaps_;
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlace& OverlappingPlaces::_internal_overlaps(int index) const {
  return overlaps_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::OverlappingPlace& OverlappingPlaces::overlaps(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.OverlappingPlaces.overlaps)
  return _internal_overlaps(index);
}
inline ::farm::nurture::core::contracts::common::OverlappingPlace* OverlappingPlaces::_internal_add_overlaps() {
  return overlaps_.Add();
}
inline ::farm::nurture::core::contracts::common::OverlappingPlace* OverlappingPlaces::add_overlaps() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.OverlappingPlaces.overlaps)
  return _internal_add_overlaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::OverlappingPlace >&
OverlappingPlaces::overlaps() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.OverlappingPlaces.overlaps)
  return overlaps_;
}

// -------------------------------------------------------------------

// Validation

// .farm.nurture.core.contracts.common.ValidationName name = 1;
inline void Validation::clear_name() {
  name_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValidationName Validation::_internal_name() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValidationName >(name_);
}
inline ::farm::nurture::core::contracts::common::ValidationName Validation::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Validation.name)
  return _internal_name();
}
inline void Validation::_internal_set_name(::farm::nurture::core::contracts::common::ValidationName value) {
  
  name_ = value;
}
inline void Validation::set_name(::farm::nurture::core::contracts::common::ValidationName value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Validation.name)
}

// .farm.nurture.core.contracts.common.ValidationType type = 2;
inline void Validation::clear_type() {
  type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ValidationType Validation::_internal_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ValidationType >(type_);
}
inline ::farm::nurture::core::contracts::common::ValidationType Validation::type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.Validation.type)
  return _internal_type();
}
inline void Validation::_internal_set_type(::farm::nurture::core::contracts::common::ValidationType value) {
  
  type_ = value;
}
inline void Validation::set_type(::farm::nurture::core::contracts::common::ValidationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.Validation.type)
}

// -------------------------------------------------------------------

// RasterDataRequest

// .farm.nurture.core.contracts.common.Environment environment = 1;
inline bool RasterDataRequest::_internal_has_environment() const {
  return this != internal_default_instance() && environment_ != nullptr;
}
inline bool RasterDataRequest::has_environment() const {
  return _internal_has_environment();
}
inline void RasterDataRequest::clear_environment() {
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& RasterDataRequest::_internal_environment() const {
  const ::farm::nurture::core::contracts::common::Environment* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& RasterDataRequest::environment() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RasterDataRequest.environment)
  return _internal_environment();
}
inline void RasterDataRequest::unsafe_arena_set_allocated_environment(
    ::farm::nurture::core::contracts::common::Environment* environment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RasterDataRequest.environment)
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataRequest::release_environment() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = environment_;
  environment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataRequest::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RasterDataRequest.environment)
  
  ::farm::nurture::core::contracts::common::Environment* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataRequest::_internal_mutable_environment() {
  
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    environment_ = p;
  }
  return environment_;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataRequest::mutable_environment() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RasterDataRequest.environment)
  return _internal_mutable_environment();
}
inline void RasterDataRequest::set_allocated_environment(::farm::nurture::core::contracts::common::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RasterDataRequest.environment)
}

// repeated .farm.nurture.core.contracts.common.MapTile map_tiles = 2;
inline int RasterDataRequest::_internal_map_tiles_size() const {
  return map_tiles_.size();
}
inline int RasterDataRequest::map_tiles_size() const {
  return _internal_map_tiles_size();
}
inline void RasterDataRequest::clear_map_tiles() {
  map_tiles_.Clear();
}
inline ::farm::nurture::core::contracts::common::MapTile* RasterDataRequest::mutable_map_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RasterDataRequest.map_tiles)
  return map_tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >*
RasterDataRequest::mutable_map_tiles() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.RasterDataRequest.map_tiles)
  return &map_tiles_;
}
inline const ::farm::nurture::core::contracts::common::MapTile& RasterDataRequest::_internal_map_tiles(int index) const {
  return map_tiles_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::MapTile& RasterDataRequest::map_tiles(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RasterDataRequest.map_tiles)
  return _internal_map_tiles(index);
}
inline ::farm::nurture::core::contracts::common::MapTile* RasterDataRequest::_internal_add_map_tiles() {
  return map_tiles_.Add();
}
inline ::farm::nurture::core::contracts::common::MapTile* RasterDataRequest::add_map_tiles() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RasterDataRequest.map_tiles)
  return _internal_add_map_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTile >&
RasterDataRequest::map_tiles() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.RasterDataRequest.map_tiles)
  return map_tiles_;
}

// .farm.nurture.core.contracts.common.TimeSlot time_slot = 3;
inline bool RasterDataRequest::_internal_has_time_slot() const {
  return this != internal_default_instance() && time_slot_ != nullptr;
}
inline bool RasterDataRequest::has_time_slot() const {
  return _internal_has_time_slot();
}
inline const ::farm::nurture::core::contracts::common::TimeSlot& RasterDataRequest::_internal_time_slot() const {
  const ::farm::nurture::core::contracts::common::TimeSlot* p = time_slot_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::TimeSlot&>(
      ::farm::nurture::core::contracts::common::_TimeSlot_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::TimeSlot& RasterDataRequest::time_slot() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RasterDataRequest.time_slot)
  return _internal_time_slot();
}
inline void RasterDataRequest::unsafe_arena_set_allocated_time_slot(
    ::farm::nurture::core::contracts::common::TimeSlot* time_slot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_slot_);
  }
  time_slot_ = time_slot;
  if (time_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RasterDataRequest.time_slot)
}
inline ::farm::nurture::core::contracts::common::TimeSlot* RasterDataRequest::release_time_slot() {
  
  ::farm::nurture::core::contracts::common::TimeSlot* temp = time_slot_;
  time_slot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* RasterDataRequest::unsafe_arena_release_time_slot() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RasterDataRequest.time_slot)
  
  ::farm::nurture::core::contracts::common::TimeSlot* temp = time_slot_;
  time_slot_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* RasterDataRequest::_internal_mutable_time_slot() {
  
  if (time_slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeSlot>(GetArena());
    time_slot_ = p;
  }
  return time_slot_;
}
inline ::farm::nurture::core::contracts::common::TimeSlot* RasterDataRequest::mutable_time_slot() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RasterDataRequest.time_slot)
  return _internal_mutable_time_slot();
}
inline void RasterDataRequest::set_allocated_time_slot(::farm::nurture::core::contracts::common::TimeSlot* time_slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_slot_);
  }
  if (time_slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_slot)->GetArena();
    if (message_arena != submessage_arena) {
      time_slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_slot, submessage_arena);
    }
    
  } else {
    
  }
  time_slot_ = time_slot;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RasterDataRequest.time_slot)
}

// -------------------------------------------------------------------

// RasterDataResponse

// .farm.nurture.core.contracts.common.Environment environment = 1;
inline bool RasterDataResponse::_internal_has_environment() const {
  return this != internal_default_instance() && environment_ != nullptr;
}
inline bool RasterDataResponse::has_environment() const {
  return _internal_has_environment();
}
inline void RasterDataResponse::clear_environment() {
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::Environment& RasterDataResponse::_internal_environment() const {
  const ::farm::nurture::core::contracts::common::Environment* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::Environment&>(
      ::farm::nurture::core::contracts::common::_Environment_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::Environment& RasterDataResponse::environment() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RasterDataResponse.environment)
  return _internal_environment();
}
inline void RasterDataResponse::unsafe_arena_set_allocated_environment(
    ::farm::nurture::core::contracts::common::Environment* environment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RasterDataResponse.environment)
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataResponse::release_environment() {
  
  ::farm::nurture::core::contracts::common::Environment* temp = environment_;
  environment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataResponse::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RasterDataResponse.environment)
  
  ::farm::nurture::core::contracts::common::Environment* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataResponse::_internal_mutable_environment() {
  
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::Environment>(GetArena());
    environment_ = p;
  }
  return environment_;
}
inline ::farm::nurture::core::contracts::common::Environment* RasterDataResponse::mutable_environment() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RasterDataResponse.environment)
  return _internal_mutable_environment();
}
inline void RasterDataResponse::set_allocated_environment(::farm::nurture::core::contracts::common::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RasterDataResponse.environment)
}

// repeated .farm.nurture.core.contracts.common.MapTilesToPreSignedUrl pre_signed_urls = 2;
inline int RasterDataResponse::_internal_pre_signed_urls_size() const {
  return pre_signed_urls_.size();
}
inline int RasterDataResponse::pre_signed_urls_size() const {
  return _internal_pre_signed_urls_size();
}
inline void RasterDataResponse::clear_pre_signed_urls() {
  pre_signed_urls_.Clear();
}
inline ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* RasterDataResponse::mutable_pre_signed_urls(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls)
  return pre_signed_urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >*
RasterDataResponse::mutable_pre_signed_urls() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls)
  return &pre_signed_urls_;
}
inline const ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl& RasterDataResponse::_internal_pre_signed_urls(int index) const {
  return pre_signed_urls_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl& RasterDataResponse::pre_signed_urls(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls)
  return _internal_pre_signed_urls(index);
}
inline ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* RasterDataResponse::_internal_add_pre_signed_urls() {
  return pre_signed_urls_.Add();
}
inline ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl* RasterDataResponse::add_pre_signed_urls() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls)
  return _internal_add_pre_signed_urls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::MapTilesToPreSignedUrl >&
RasterDataResponse::pre_signed_urls() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.common.RasterDataResponse.pre_signed_urls)
  return pre_signed_urls_;
}

// -------------------------------------------------------------------

// MapTilesToPreSignedUrl

// .farm.nurture.core.contracts.common.MapTile map_tile = 1;
inline bool MapTilesToPreSignedUrl::_internal_has_map_tile() const {
  return this != internal_default_instance() && map_tile_ != nullptr;
}
inline bool MapTilesToPreSignedUrl::has_map_tile() const {
  return _internal_has_map_tile();
}
inline void MapTilesToPreSignedUrl::clear_map_tile() {
  if (GetArena() == nullptr && map_tile_ != nullptr) {
    delete map_tile_;
  }
  map_tile_ = nullptr;
}
inline const ::farm::nurture::core::contracts::common::MapTile& MapTilesToPreSignedUrl::_internal_map_tile() const {
  const ::farm::nurture::core::contracts::common::MapTile* p = map_tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::MapTile&>(
      ::farm::nurture::core::contracts::common::_MapTile_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::MapTile& MapTilesToPreSignedUrl::map_tile() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile)
  return _internal_map_tile();
}
inline void MapTilesToPreSignedUrl::unsafe_arena_set_allocated_map_tile(
    ::farm::nurture::core::contracts::common::MapTile* map_tile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_tile_);
  }
  map_tile_ = map_tile;
  if (map_tile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile)
}
inline ::farm::nurture::core::contracts::common::MapTile* MapTilesToPreSignedUrl::release_map_tile() {
  
  ::farm::nurture::core::contracts::common::MapTile* temp = map_tile_;
  map_tile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::MapTile* MapTilesToPreSignedUrl::unsafe_arena_release_map_tile() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile)
  
  ::farm::nurture::core::contracts::common::MapTile* temp = map_tile_;
  map_tile_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::MapTile* MapTilesToPreSignedUrl::_internal_mutable_map_tile() {
  
  if (map_tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::MapTile>(GetArena());
    map_tile_ = p;
  }
  return map_tile_;
}
inline ::farm::nurture::core::contracts::common::MapTile* MapTilesToPreSignedUrl::mutable_map_tile() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile)
  return _internal_mutable_map_tile();
}
inline void MapTilesToPreSignedUrl::set_allocated_map_tile(::farm::nurture::core::contracts::common::MapTile* map_tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_tile_;
  }
  if (map_tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_tile);
    if (message_arena != submessage_arena) {
      map_tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_tile, submessage_arena);
    }
    
  } else {
    
  }
  map_tile_ = map_tile;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.map_tile)
}

// string pre_signed_url = 2;
inline void MapTilesToPreSignedUrl::clear_pre_signed_url() {
  pre_signed_url_.ClearToEmpty();
}
inline const std::string& MapTilesToPreSignedUrl::pre_signed_url() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
  return _internal_pre_signed_url();
}
inline void MapTilesToPreSignedUrl::set_pre_signed_url(const std::string& value) {
  _internal_set_pre_signed_url(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
}
inline std::string* MapTilesToPreSignedUrl::mutable_pre_signed_url() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
  return _internal_mutable_pre_signed_url();
}
inline const std::string& MapTilesToPreSignedUrl::_internal_pre_signed_url() const {
  return pre_signed_url_.Get();
}
inline void MapTilesToPreSignedUrl::_internal_set_pre_signed_url(const std::string& value) {
  
  pre_signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MapTilesToPreSignedUrl::set_pre_signed_url(std::string&& value) {
  
  pre_signed_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
}
inline void MapTilesToPreSignedUrl::set_pre_signed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
}
inline void MapTilesToPreSignedUrl::set_pre_signed_url(const char* value,
    size_t size) {
  
  pre_signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
}
inline std::string* MapTilesToPreSignedUrl::_internal_mutable_pre_signed_url() {
  
  return pre_signed_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MapTilesToPreSignedUrl::release_pre_signed_url() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
  return pre_signed_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapTilesToPreSignedUrl::set_allocated_pre_signed_url(std::string* pre_signed_url) {
  if (pre_signed_url != nullptr) {
    
  } else {
    
  }
  pre_signed_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_signed_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.MapTilesToPreSignedUrl.pre_signed_url)
}

// -------------------------------------------------------------------

// RegisterSourceConfig

// .farm.nurture.core.contracts.common.CloudStore cloudStore = 1;
inline void RegisterSourceConfig::clear_cloudstore() {
  cloudstore_ = 0;
}
inline ::farm::nurture::core::contracts::common::CloudStore RegisterSourceConfig::_internal_cloudstore() const {
  return static_cast< ::farm::nurture::core::contracts::common::CloudStore >(cloudstore_);
}
inline ::farm::nurture::core::contracts::common::CloudStore RegisterSourceConfig::cloudstore() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.cloudStore)
  return _internal_cloudstore();
}
inline void RegisterSourceConfig::_internal_set_cloudstore(::farm::nurture::core::contracts::common::CloudStore value) {
  
  cloudstore_ = value;
}
inline void RegisterSourceConfig::set_cloudstore(::farm::nurture::core::contracts::common::CloudStore value) {
  _internal_set_cloudstore(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RegisterSourceConfig.cloudStore)
}

// .farm.nurture.core.contracts.common.UrlBuilder url_builder = 2;
inline void RegisterSourceConfig::clear_url_builder() {
  url_builder_ = 0;
}
inline ::farm::nurture::core::contracts::common::UrlBuilder RegisterSourceConfig::_internal_url_builder() const {
  return static_cast< ::farm::nurture::core::contracts::common::UrlBuilder >(url_builder_);
}
inline ::farm::nurture::core::contracts::common::UrlBuilder RegisterSourceConfig::url_builder() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.url_builder)
  return _internal_url_builder();
}
inline void RegisterSourceConfig::_internal_set_url_builder(::farm::nurture::core::contracts::common::UrlBuilder value) {
  
  url_builder_ = value;
}
inline void RegisterSourceConfig::set_url_builder(::farm::nurture::core::contracts::common::UrlBuilder value) {
  _internal_set_url_builder(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RegisterSourceConfig.url_builder)
}

// .farm.nurture.core.contracts.common.Satellite satellite = 3;
inline void RegisterSourceConfig::clear_satellite() {
  satellite_ = 0;
}
inline ::farm::nurture::core::contracts::common::Satellite RegisterSourceConfig::_internal_satellite() const {
  return static_cast< ::farm::nurture::core::contracts::common::Satellite >(satellite_);
}
inline ::farm::nurture::core::contracts::common::Satellite RegisterSourceConfig::satellite() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.satellite)
  return _internal_satellite();
}
inline void RegisterSourceConfig::_internal_set_satellite(::farm::nurture::core::contracts::common::Satellite value) {
  
  satellite_ = value;
}
inline void RegisterSourceConfig::set_satellite(::farm::nurture::core::contracts::common::Satellite value) {
  _internal_set_satellite(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RegisterSourceConfig.satellite)
}

// .farm.nurture.core.contracts.common.Band band = 4;
inline void RegisterSourceConfig::clear_band() {
  band_ = 0;
}
inline ::farm::nurture::core::contracts::common::Band RegisterSourceConfig::_internal_band() const {
  return static_cast< ::farm::nurture::core::contracts::common::Band >(band_);
}
inline ::farm::nurture::core::contracts::common::Band RegisterSourceConfig::band() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.band)
  return _internal_band();
}
inline void RegisterSourceConfig::_internal_set_band(::farm::nurture::core::contracts::common::Band value) {
  
  band_ = value;
}
inline void RegisterSourceConfig::set_band(::farm::nurture::core::contracts::common::Band value) {
  _internal_set_band(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RegisterSourceConfig.band)
}

// .farm.nurture.core.contracts.common.TimeRange valid_time = 5;
inline bool RegisterSourceConfig::_internal_has_valid_time() const {
  return this != internal_default_instance() && valid_time_ != nullptr;
}
inline bool RegisterSourceConfig::has_valid_time() const {
  return _internal_has_valid_time();
}
inline const ::farm::nurture::core::contracts::common::TimeRange& RegisterSourceConfig::_internal_valid_time() const {
  const ::farm::nurture::core::contracts::common::TimeRange* p = valid_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::TimeRange&>(
      ::farm::nurture::core::contracts::common::_TimeRange_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::TimeRange& RegisterSourceConfig::valid_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time)
  return _internal_valid_time();
}
inline void RegisterSourceConfig::unsafe_arena_set_allocated_valid_time(
    ::farm::nurture::core::contracts::common::TimeRange* valid_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valid_time_);
  }
  valid_time_ = valid_time;
  if (valid_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time)
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::release_valid_time() {
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = valid_time_;
  valid_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::unsafe_arena_release_valid_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time)
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = valid_time_;
  valid_time_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::_internal_mutable_valid_time() {
  
  if (valid_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeRange>(GetArena());
    valid_time_ = p;
  }
  return valid_time_;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::mutable_valid_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time)
  return _internal_mutable_valid_time();
}
inline void RegisterSourceConfig::set_allocated_valid_time(::farm::nurture::core::contracts::common::TimeRange* valid_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(valid_time_);
  }
  if (valid_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valid_time)->GetArena();
    if (message_arena != submessage_arena) {
      valid_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valid_time, submessage_arena);
    }
    
  } else {
    
  }
  valid_time_ = valid_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RegisterSourceConfig.valid_time)
}

// string base_directory = 6;
inline void RegisterSourceConfig::clear_base_directory() {
  base_directory_.ClearToEmpty();
}
inline const std::string& RegisterSourceConfig::base_directory() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
  return _internal_base_directory();
}
inline void RegisterSourceConfig::set_base_directory(const std::string& value) {
  _internal_set_base_directory(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
}
inline std::string* RegisterSourceConfig::mutable_base_directory() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
  return _internal_mutable_base_directory();
}
inline const std::string& RegisterSourceConfig::_internal_base_directory() const {
  return base_directory_.Get();
}
inline void RegisterSourceConfig::_internal_set_base_directory(const std::string& value) {
  
  base_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterSourceConfig::set_base_directory(std::string&& value) {
  
  base_directory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
}
inline void RegisterSourceConfig::set_base_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
}
inline void RegisterSourceConfig::set_base_directory(const char* value,
    size_t size) {
  
  base_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
}
inline std::string* RegisterSourceConfig::_internal_mutable_base_directory() {
  
  return base_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterSourceConfig::release_base_directory() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
  return base_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterSourceConfig::set_allocated_base_directory(std::string* base_directory) {
  if (base_directory != nullptr) {
    
  } else {
    
  }
  base_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RegisterSourceConfig.base_directory)
}

// .farm.nurture.core.contracts.common.TimeRange date_range = 7;
inline bool RegisterSourceConfig::_internal_has_date_range() const {
  return this != internal_default_instance() && date_range_ != nullptr;
}
inline bool RegisterSourceConfig::has_date_range() const {
  return _internal_has_date_range();
}
inline const ::farm::nurture::core::contracts::common::TimeRange& RegisterSourceConfig::_internal_date_range() const {
  const ::farm::nurture::core::contracts::common::TimeRange* p = date_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::TimeRange&>(
      ::farm::nurture::core::contracts::common::_TimeRange_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::TimeRange& RegisterSourceConfig::date_range() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.RegisterSourceConfig.date_range)
  return _internal_date_range();
}
inline void RegisterSourceConfig::unsafe_arena_set_allocated_date_range(
    ::farm::nurture::core::contracts::common::TimeRange* date_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_range_);
  }
  date_range_ = date_range;
  if (date_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.common.RegisterSourceConfig.date_range)
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::release_date_range() {
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = date_range_;
  date_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::unsafe_arena_release_date_range() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.common.RegisterSourceConfig.date_range)
  
  ::farm::nurture::core::contracts::common::TimeRange* temp = date_range_;
  date_range_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::_internal_mutable_date_range() {
  
  if (date_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::TimeRange>(GetArena());
    date_range_ = p;
  }
  return date_range_;
}
inline ::farm::nurture::core::contracts::common::TimeRange* RegisterSourceConfig::mutable_date_range() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.common.RegisterSourceConfig.date_range)
  return _internal_mutable_date_range();
}
inline void RegisterSourceConfig::set_allocated_date_range(::farm::nurture::core::contracts::common::TimeRange* date_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_range_);
  }
  if (date_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_range)->GetArena();
    if (message_arena != submessage_arena) {
      date_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_range, submessage_arena);
    }
    
  } else {
    
  }
  date_range_ = date_range;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.common.RegisterSourceConfig.date_range)
}

// -------------------------------------------------------------------

// NSVPlaceId

// .farm.nurture.core.contracts.common.PlaceNamespace PlaceNamespace = 1;
inline void NSVPlaceId::clear_placenamespace() {
  placenamespace_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace NSVPlaceId::_internal_placenamespace() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceNamespace >(placenamespace_);
}
inline ::farm::nurture::core::contracts::common::PlaceNamespace NSVPlaceId::placenamespace() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.NSVPlaceId.PlaceNamespace)
  return _internal_placenamespace();
}
inline void NSVPlaceId::_internal_set_placenamespace(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  
  placenamespace_ = value;
}
inline void NSVPlaceId::set_placenamespace(::farm::nurture::core::contracts::common::PlaceNamespace value) {
  _internal_set_placenamespace(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.NSVPlaceId.PlaceNamespace)
}

// .farm.nurture.core.contracts.common.PlaceSourceType PlaceSourceType = 2;
inline void NSVPlaceId::clear_placesourcetype() {
  placesourcetype_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType NSVPlaceId::_internal_placesourcetype() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceSourceType >(placesourcetype_);
}
inline ::farm::nurture::core::contracts::common::PlaceSourceType NSVPlaceId::placesourcetype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.NSVPlaceId.PlaceSourceType)
  return _internal_placesourcetype();
}
inline void NSVPlaceId::_internal_set_placesourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  
  placesourcetype_ = value;
}
inline void NSVPlaceId::set_placesourcetype(::farm::nurture::core::contracts::common::PlaceSourceType value) {
  _internal_set_placesourcetype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.NSVPlaceId.PlaceSourceType)
}

// .farm.nurture.core.contracts.common.PlaceVisibleType PlaceVisibleType = 3;
inline void NSVPlaceId::clear_placevisibletype() {
  placevisibletype_ = 0;
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType NSVPlaceId::_internal_placevisibletype() const {
  return static_cast< ::farm::nurture::core::contracts::common::PlaceVisibleType >(placevisibletype_);
}
inline ::farm::nurture::core::contracts::common::PlaceVisibleType NSVPlaceId::placevisibletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.NSVPlaceId.PlaceVisibleType)
  return _internal_placevisibletype();
}
inline void NSVPlaceId::_internal_set_placevisibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  
  placevisibletype_ = value;
}
inline void NSVPlaceId::set_placevisibletype(::farm::nurture::core::contracts::common::PlaceVisibleType value) {
  _internal_set_placevisibletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.NSVPlaceId.PlaceVisibleType)
}

// int64 place_id = 4;
inline void NSVPlaceId::clear_place_id() {
  place_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NSVPlaceId::_internal_place_id() const {
  return place_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NSVPlaceId::place_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.common.NSVPlaceId.place_id)
  return _internal_place_id();
}
inline void NSVPlaceId::_internal_set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  place_id_ = value;
}
inline void NSVPlaceId::set_place_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_place_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.common.NSVPlaceId.place_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fgeo_5fcommon_2eproto
